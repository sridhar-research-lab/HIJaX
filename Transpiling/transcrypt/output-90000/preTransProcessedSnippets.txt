delimiter
[int(x) for x in str(num)]
delimiter
np.array(x._data).reshape(x.size[::-1]).T
delimiter
itertools.combinations
delimiter
pygame.display.flip()
delimiter
print([l[i:i + n] for i in range(len(l)) for n in range(1, len(l) - i + 1)])
delimiter
max(min(my_value, max_value), min_value)
delimiter
pd.get_dummies(df)
delimiter
[x[1] for x in elements]
delimiter
root.mainloop()
delimiter
[i for i, e in enumerate(a) if e != 0]
delimiter
max(a_list, key=operator.itemgetter(1))
delimiter
[item for item in a if item[0] == 1]
delimiter
[a[i] for i in (1, 2, 5)]
delimiter
sum(len(v) for v in food_colors.values())
delimiter
plt.show()
delimiter
plt.show()
delimiter
plt.show()
delimiter
[[[4, 4, 4], [4, 4, 4], [4, 4, 4]], [[4], [4], [4]]]
delimiter
sorted(list(myDict.items()), key=lambda e: e[1][2])
delimiter
sorted(list(tag_weight.items()), key=lambda x: int(x[1]), reverse=True)
delimiter
max(flatlist, key=lambda x: x[1])
delimiter
df.sort(axis=1, ascending=False)
delimiter
[i for i, j in zip(a, b) if i == j]
delimiter
conn.commit()
delimiter
sorted(list_of_tuples, key=lambda tup: tup[1])
delimiter
datetime.datetime.now() - datetime.timedelta(days=1)
delimiter
{k: v for d in L for k, v in list(d.items())}
delimiter
a.sort(key=lambda x: b.index(x[0]))
delimiter
instance.__class__.__name__
delimiter
sorted(list(data.items()), key=lambda x: x[1])
delimiter
f.close()
delimiter
datetime.datetime.now().date()
delimiter
numpy.array([[0, 1, 0], [0, 0, 0], [0, 0, 0]])
delimiter
[i[0] for i in a]
delimiter
sorted(list(data.items()), key=lambda x: x[1][0])
delimiter
sorted(a, key=foo)
delimiter
ax.plot_trisurf(XS, YS, ZS)
delimiter
map(dict, zip(*[[(k, v) for v in value] for k, value in list(d.items())]))
delimiter
datetime.datetime.fromtimestamp(ms / 1000.0)
delimiter
SomeModel.objects.filter(id=id).delete()
delimiter
print(random.choice(words))
delimiter
a.sort(key=lambda x_y: b.index(x_y[0]))
delimiter
zipped.sort(key=lambda t: t[1])
delimiter
np.where(a == 1)
delimiter
f.close()
delimiter
list(itertools.product(*a))
delimiter
[input[i:i + n] for i in range(0, len(input), n)]
delimiter
logging.getLogger().setLevel(logging.DEBUG)
delimiter
sorted(enumerate(a), key=lambda x: x[1])
delimiter
array([[True, True], [False, False], [False, False], [True, True]], dtype=bool)
delimiter
random.sample(list(range(100)), 10)
delimiter
max(abs(x - y) for x, y in zip(values[1:], values[:-1]))
delimiter
A = [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0], [0], [0]]]
delimiter
df.unstack()
delimiter
[dict(y) for y in set(tuple(x.items()) for x in d)]
delimiter
sum(d.values())
delimiter
decimal.Decimal(random.randrange(10000)) / 100
delimiter
root.destroy()
delimiter
pandas.concat([df1, df2], axis=1)
delimiter
[(x, y) for x, y in a if x == 1]
delimiter
sorted(iter(dict_.items()), key=lambda x: x[1])
delimiter
xs.sort(key=lambda s: len(s))
delimiter
len(set(mylist)) == 1
delimiter
plt.show()
delimiter
plt.show()
delimiter
__init__.py
delimiter
[len(x) for x in s.split()]
delimiter
[(i // 2) for i in range(10)]
delimiter
sorted(iter(result.items()), key=lambda key_value: key_value[0])
delimiter
ax.scartter(XS, YS, ZS)
delimiter
df.sort(df.columns, axis=1, ascending=False)
delimiter
[(k, v) for k, v in a.items()]
delimiter
list(range(9))
delimiter
L.sort(key=operator.itemgetter(1))
delimiter
plt.show()
delimiter
dict((k, v) for k, v in parent_dict.items() if 2 < k < 4)
delimiter
os.path.dirname(os.path.abspath(existGDBPath))
delimiter
dict([(e[0], int(e[1])) for e in lst])
delimiter
df.groupby(level=[0, 1]).median()
delimiter
plt.show()
delimiter
my_list[-10:]
delimiter
all(isinstance(x, int) for x in lst)
delimiter
[[X[i, j] for i in range(X.shape[0])] for j in range(x.shape[1])]
delimiter
fh1.seek(2)
delimiter
(i + 1, j), (i - 1, j), (i, j - 1), (i, j + 1), (i + 1, j - 1), (i + 1, j + 1)
delimiter
[[X[i, j] for j in range(X.shape[1])] for i in range(x.shape[0])]
delimiter
[(0, 4), (7, 9), (11, 11)]
delimiter
[x for y, x in sorted(zip(Y, X))]
delimiter
myFunc(lambda a, b: iadd(a, b))
delimiter
plt.gca().invert_yaxis()
delimiter
numpy.where(mask)
delimiter
sorted(list(dictionary.items()), key=lambda x: x[1])
delimiter
numpy.array([(x in a) for x in b])
delimiter
p.stdin.flush()
delimiter
dict([(k, v) for k, v in zip(keys, values)])
delimiter
plt.show()
delimiter
np.outer(a, b)
delimiter
[x[0] for x in G]
delimiter
X_train = scaler.fit(X_train).transform(X_train)
delimiter
os.kill(process.pid, signal.SIGKILL)
delimiter
dict((k, v) for k, v in zip(keys, values))
delimiter
[set(item) for item in set(frozenset(item) for item in L)]
delimiter
x[(np.arange(x.shape[0]) != 1), :, :]
delimiter
plt.show()
delimiter
(i + 1, j), (i - 1, j), (i, j - 1), (i, j + 1), (i - 1, j - 1), (i + 1, j - 1)
delimiter
[(i, sum(j) / len(j)) for i, j in list(d.items())]
delimiter
dogtail.rawinput.click(100, 100)
delimiter
sorted(d, key=lambda k: d[k][1])
delimiter
[item for item in a if 1 in item]
delimiter
session.query(Entry).join(Entry.tags).filter(Tag.id == 1).count()
delimiter
list(d.values())
delimiter
[x[1] for x in L]
delimiter
df.div(df.sum(axis=1), axis=0)
delimiter
sum(your_list)
delimiter
x, y = np.random.randint(20, size=(2, 100)) + np.random.rand(2, 100)
delimiter
[sum([x[1] for x in i]) for i in data]
delimiter
[k for k, v in i.items() if v == 0]
delimiter
dataList.sort(key=lambda x: x[1])
delimiter
plt.show()
delimiter
sum(x * y for x, y in list(zip(a, b)))
delimiter
p = subprocess.Popen(cmd, stdout=sys.stdout, stderr=sys.stderr)
delimiter
HttpResponse(status=204)
delimiter
df.apply(lambda x: x.tolist(), axis=1)
delimiter
list.sort()
delimiter
[int(x) for x in bin(8)[2:]]
delimiter
df.apply(lambda row: label_race(row), axis=1)
delimiter
sorted(list_of_tuples, key=lambda tup: tup[::-1])
delimiter
plt.show()
delimiter
[x for x in items if x[2] == 0]
delimiter
os.path.split(os.path.abspath(existGDBPath))
delimiter
l.sort(key=alphanum_key)
delimiter
C = [(a - b) for a, b in zip(A, B)]
delimiter
[x for x in l if x[1] == 1]
delimiter
df[~df.index.duplicated()]
delimiter
b = {a[i]: a[i + 1] for i in range(0, len(a), 2)}
delimiter
print([key for key, value in list(d.items()) if value == 1])
delimiter
[i for i in y if y[i] == 1]
delimiter
bar.sort(key=lambda x: (x.attrb1, x.attrb2), reverse=True)
delimiter
print(soup.get_text())
delimiter
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
delimiter
[j for i in zip(a, b) for j in i]
delimiter
df.groupby(df.index).sum()
delimiter
plt.gca().invert_xaxis()
delimiter
s.groupby(grouper).sum()
delimiter
[4, 5, 5, 6, 6, 6]
delimiter
self.request.url
delimiter
logging.basicConfig()
delimiter
[y for x in list(dict.items()) for y in x]
delimiter
sorted(lst, reverse=True)
delimiter
[x for x in a if x != [1, 1]]
delimiter
print(bool(a))
delimiter
os.path.dirname(os.path.abspath(__file__))
delimiter
sorted(a, key=lambda x: (len(x), [confrom[card[0]] for card in x]))
delimiter
df.sort_values(by=1, ascending=False, axis=1)
delimiter
list(itertools.islice(it, 0, n, 1))
delimiter
sys.stdout.flush()
delimiter
plt.show()
delimiter
array([[1, 2], [2, 0]])
delimiter
next(iter(list(dict.values())))
delimiter
{x[1]: x for x in lol}
delimiter
plt.show()
delimiter
a[:] = [x for x in a if x != [1, 1]]
delimiter
sorted(mylist, key=lambda x: order.index(x[1]))
delimiter
cv2.destroyAllWindows()
delimiter
matplotlib.pyplot.show()
delimiter
sum(map(lambda x: x * x, l))
delimiter
sorted(lst, key=lambda x: (sum(x[1:]), x[0]), reverse=True)
delimiter
unittest.main()
delimiter
sorted(item, key=lambda x: x.id)
delimiter
np.cumsum(x[::-1])[::-1]
delimiter
pd.concat([df1, df2], axis=1)
delimiter
plot([0, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 1], [0.5, 1], [1, 1])
delimiter
keys.sort(key=lambda k: (k[0], int(k[1:])))
delimiter
sorted(lst, key=lambda x: (x < 0, x))
delimiter
[(v, k) for k, v in a.items()]
delimiter
map(sum, zip(*l))
delimiter
df[(df.iloc[:, -12:] == -1).any(axis=1)]
delimiter
fig.add_subplot(1, 1, 1)
delimiter
print(any(x in a for x in b))
delimiter
print([key for key, value in d.items() if value == 1])
delimiter
[i for i in y if y[i] > 1]
delimiter
getattr(your_obj, x)
delimiter
new_list = [(x + 1) for x in my_list]
delimiter
np.sum(a)
delimiter
sorted(unsorted, key=lambda element: (element[1], element[2]))
delimiter
f.close()
delimiter
vectorizer.get_feature_names()
delimiter
pygame.display.update()
delimiter
your_list.sort(key=lambda x: x.anniversary_score)
delimiter
time.sleep(1)
delimiter
[(lst[i], lst2[i]) for i in range(len(lst))]
delimiter
[x[0] for x in os.walk(directory)]
delimiter
all(i < j for i, j in zip(a, b))
delimiter
df = df.reset_index()
delimiter
sorted(lst, key=lambda x: (sum(x[1:]), x[0]))
delimiter
[sorted(item) for item in data]
delimiter
print(browser.current_url)
delimiter
db.session.commit()
delimiter
sum(j ** i for i, j in enumerate(l, 1))
delimiter
pygame.display.update()
delimiter
b = dict(zip(a[0::2], a[1::2]))
delimiter
pd.concat([df, res], axis=1)
delimiter
any(np.equal(a, [1, 2]).all(1))
delimiter
datetime.datetime.now().date()
delimiter
dict(x[1:] for x in reversed(myListOfTuples))
delimiter
{key: val for key, val in list(myDict.items()) if val != 42}
delimiter
[k for k, v in d.items() if v == desired_value]
delimiter
[[sum([x[1] for x in i])] for i in data]
delimiter
np.mean(np.array([old_set, new_set]), axis=0)
delimiter
plt.subplots_adjust(top=0.5)
delimiter
sorted(list_of_medals, key=lambda x: (-x[1], x[0]))
delimiter
plt.show()
delimiter
self.pushButton.clicked.connect(self.showDial)
delimiter
dict(x[i:i + 2] for i in range(0, len(x), 2))
delimiter
df.index.values.tolist()
delimiter
[[int(x) for x in sublist] for sublist in lst]
delimiter
np.diff(arr[:, (1)])
delimiter
func(*args)
delimiter
data[:, ([1, 9])]
delimiter
lambda a, b: a + b
delimiter
df.index.get_level_values(0).unique()
delimiter
plt.show()
delimiter
map(int, str(num))
delimiter
[[[x[0]] for x in y] for y in listD]
delimiter
all(isinstance(x, int) for x in lst)
delimiter
pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))
delimiter
df.groupby(df.columns, axis=1).sum()
delimiter
ax.set_xticks([])
delimiter
arr[:, (1)]
delimiter
array([True, False, False, True], dtype=bool)
delimiter
sorted(list(a_dict.items()), key=lambda item: item[1][1])
delimiter
dict((k, v) for d in dicts for k, v in list(d.items()))
delimiter
db.commit()
delimiter
[x for x in my_list if not any(c.isdigit() for c in x)]
delimiter
arr[arr != 0].min()
delimiter
os.chdir(os.path.dirname(__file__))
delimiter
df.head()
delimiter
pd.concat([students, pd.DataFrame(marks)], axis=1)
delimiter
dict(zip(list(range(1, 5)), list(range(7, 11))))
delimiter
threading.Thread(target=SudsMove).start()
delimiter
zip(*list_of_tuples)
delimiter
sum(d.values())
delimiter
root.mainloop()
delimiter
plt.show()
delimiter
myList = [i for i in range(10)]
delimiter
plt.show()
delimiter
deletemy_list[2:6]
delimiter
sys.stdout.flush()
delimiter
urlfetch.fetch(url, deadline=10 * 60)
delimiter
plt.show()
delimiter
sys.exit(app.exec_())
delimiter
PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))
delimiter
plt.show()
delimiter
root.destroy()
delimiter
plt.show()
delimiter
l1.sort(key=lambda x: int(x[0]))
delimiter
my_list.sort(key=lambda x: x[1])
delimiter
br.select_form(nr=0)
delimiter
plt.show()
delimiter
thisRDD = sc.parallelize(range(10), 2).cache()
delimiter
time.sleep(5)
delimiter
plt.show()
delimiter
pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
delimiter
[list(d.keys()) for d in LoD]
delimiter
df.value.astype(str).apply(list).apply(pd.Series).astype(int)
delimiter
isinstance(s, str)
delimiter
a[tuple(b)]
delimiter
plt.show()
delimiter
[[[x[0]] for x in listD[i]] for i in range(len(listD))]
delimiter
[row[0] for row in a]
delimiter
x, y = np.random.rand(2, 100) * 20
delimiter
y = str(int(x, 16))
delimiter
s.sort(key=operator.itemgetter(1, 2))
delimiter
driver = webdriver.Firefox()
delimiter
root.mainloop()
delimiter
instancelist = [MyClass() for i in range(29)]
delimiter
df.head()
delimiter
any([True, False, False])
delimiter
np.delete(1, 1)
delimiter
ax.xaxis.set_major_locator(MaxNLocator(integer=True))
delimiter
[float(i) for i in lst]
delimiter
[(x * x) for x in range(10)]
delimiter
x = numpy.delete(x, 0, axis=0)
delimiter
[x[0] for x in a]
delimiter
plt.show()
delimiter
max(enumerate(a), key=lambda x: x[1])[0]
delimiter
a = [(sum(x) / len(x)) for x in zip(*a)]
delimiter
msglist = [hextotal[i:i + 4096] for i in range(0, len(hextotal), 4096)]
delimiter
driver.set_window_size(1400, 1000)
delimiter
os.path.realpath(os.path.join(root, name))
delimiter
list(set(frozenset(item) for item in L))
delimiter
myList = [i for i in range(10) if i % 2 == 0]
delimiter
vol.extend((volumeA, volumeB, volumeC))
delimiter
response = requests.put(url, data=json.dumps(data), headers=headers)
delimiter
df2 = df.reset_index()
delimiter
pylab.ylim([0, 1000])
delimiter
d.stack().groupby(level=0).apply(pd.Series.value_counts).unstack().fillna(0)
delimiter
plt.show()
delimiter
any(item[2] == 0 for item in items)
delimiter
dict((v, k) for k, v in map.items())
delimiter
plt.show()
delimiter
[l[i:i + n] for i in range(0, len(l), n)]
delimiter
Book.objects.filter(author__id=1).filter(author__id=2)
delimiter
{k: v for d in dicts for k, v in list(d.items())}
delimiter
[item for item in my_list if 1 <= item <= 5]
delimiter
pd.DataFrame(d)
delimiter
sum(my_counter.values())
delimiter
sorted(list(data.items()), key=lambda x: x[1])
delimiter
[[X[i][j] for j in range(len(X[i]))] for i in range(len(X))]
delimiter
dict((k, v) for k, v in hand.items() if v)
delimiter
sorted(data.values())
delimiter
__init__.py
delimiter
getattr(test, a_string)
delimiter
len(dict_test) + sum(len(v) for v in dict_test.values())
delimiter
[o.my_attr for o in my_list]
delimiter
plt.show()
delimiter
f.close()
delimiter
[i for i in x if i in y]
delimiter
plt.show()
delimiter
gca().get_lines()[n].get_xydata()
delimiter
df.loc[(df.loc[:, (df.dtypes != object)] != 0).any(1)]
delimiter
dict((i, i * 2) for i in range(10))
delimiter
[(x + tuple(y)) for x, y in zip(zip(a, b), c)]
delimiter
{i: (i * 2) for i in range(10)}
delimiter
time.mktime(dt.timetuple()) + dt.microsecond / 1000000.0
delimiter
binascii.a2b_hex(s)
delimiter
s[::2], s[1::2]
delimiter
plt.show()
delimiter
[(x1 - x2) for x1, x2 in zip(List1, List2)]
delimiter
sorted(unsorted_list, key=lambda x: order.get(x, -1))
delimiter
myDict = {key: val for key, val in list(myDict.items()) if val != 42}
delimiter
[l[i:i + n] for i in range(0, len(l), n)]
delimiter
plt.show()
delimiter
1j * np.arange(5)
delimiter
plt.show()
delimiter
sorted(trial_list, key=lambda x: trial_dict[x])
delimiter
pd.concat(d, ignore_index=True)
delimiter
d = {k: v for k, v in list(d.items()) if v > 0}
delimiter
sys.stdout.flush()
delimiter
plt.show()
delimiter
file.close()
delimiter
self.process.terminate()
delimiter
plt.show()
delimiter
np.all(np.all(test, axis=2), axis=1)
delimiter
numpy.ma.array(strided, mask=mask)
delimiter
plt.show()
delimiter
df.mean(axis=1)
delimiter
zip(*np.where(a == 1))
delimiter
random.sample(range(1, 50), 6)
delimiter
os.path.abspath(__file__)
delimiter
plt.show()
delimiter
a, b = map(int, input().split())
delimiter
dbb.commit()
delimiter
sys.exit()
delimiter
fig.subplots_adjust(wspace=0, hspace=0)
delimiter
setattr(self, attr, group)
delimiter
np.array([1j])
delimiter
df.index
delimiter
session.query(Shots).filter_by(event_id=event_id).count()
delimiter
requests.post(url, headers=headers, files=files, data=data)
delimiter
requests.get(url, verify=True)
delimiter
sum(list_of_nums)
delimiter
split_list = [the_list[i:i + n] for i in range(0, len(the_list), n)]
delimiter
plt.plot(np.unique(x), np.poly1d(np.polyfit(x, y, 1))(np.unique(x)))
delimiter
[i for i in range(len(a)) if a[i] > 2]
delimiter
sum(len(x) for x in list(food_colors.values()))
delimiter
session.query(Shots).filter_by(event_id=event_id)
delimiter
numpy.delete(a, index)
delimiter
plt.show()
delimiter
plt.show()
delimiter
x = numpy.delete(x, 2, axis=1)
delimiter
[row[1] for row in A]
delimiter
sorted(lst, key=lambda x: (-sum(x[1:]), x[0]))
delimiter
np.where(np.diff(arr[:, (1)]))[0] + 1
delimiter
win.show()
delimiter
[(x, y) for x, y in zip(myList, myList[1:]) if y == 9]
delimiter
sum(sum(x) for x in lists)
delimiter
sorted(a, key=dict.values, reverse=True)
delimiter
plt.show()
delimiter
list(range(10, 0, -1))
delimiter
np.any(np.in1d(a1, a2))
delimiter
groupby(tags, key=operator.itemgetter(0))
delimiter
a = sorted(a, key=lambda x: x.modified, reverse=True)
delimiter
plt.show()
delimiter
self.axes = self.figure.add_axes([0, 0, 1, 1])
delimiter
subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
delimiter
sum(d * 10 ** i for i, d in enumerate(x[::-1]))
delimiter
data = [line[i:i + 12] for i in range(0, len(line), 12)]
delimiter
conn.commit()
delimiter
quadmesh.set_clim(vmin=0, vmax=15)
delimiter
A(1) + A(2)
delimiter
somelist.sort(key=lambda x: x.resultType)
delimiter
mylist.sort()
delimiter
numpy.concatenate([a, b])
delimiter
datetime.datetime.now() + datetime.timedelta(seconds=10)
delimiter
dict((k, v) for k, v in parent_dict.items() if k > 2 and k < 4)
delimiter
requests.post(url, headers=headers, data=data, files=files)
delimiter
a[[[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]]]
delimiter
cv2.destroyAllWindows()
delimiter
unique_data = [list(x) for x in set(tuple(x) for x in testdata)]
delimiter
unittest.main()
delimiter
os.walk(directory)
delimiter
pd.DataFrame(df.values - df2.values, columns=df.columns)
delimiter
d = dict((k, v) for k, v in d.items() if v > 0)
delimiter
writer.writerows(A)
delimiter
pd.concat([df_slcd, signs], axis=1)
delimiter
df.apply(lambda x: x.fillna(x.mean()), axis=0)
delimiter
root.destroy()
delimiter
time.sleep(1)
delimiter
np.nonzero(np.any(a, axis=0))[0]
delimiter
[x[0] for x in l1 if any(x[0] == y[0] for y in l2)]
delimiter
sum(d.values())
delimiter
a = [0] * 10000
delimiter
admin.site.register(Blog, BlogAdmin)
delimiter
plt.show()
delimiter
sorted(s, key=float)
delimiter
gtk.main()
delimiter
ax.set_ylim((-10, 80.0))
delimiter
np.delete(a, list(range(0, a.shape[1], 8)), axis=1)
delimiter
plt.show()
delimiter
plt.show()
delimiter
df.groupby(df.index.year).sum().head()
delimiter
a[np.argsort(a[:, (1)])]
delimiter
itertools.permutations([0, 0, 0, 0, 1, 1, 1, 1])
delimiter
plt.show()
delimiter
l = [int(x) for x in s.split()]
delimiter
plt.show()
delimiter
plt.show()
delimiter
desired_array = [int(numeric_string) for numeric_string in current_array]
delimiter
plt.show()
delimiter
print(x[0], x[1])
delimiter
lst.append(map(int, z))
delimiter
app.run()
delimiter
jsonify(my_list_of_eqtls)
delimiter
[x for y, x in sorted(zip(Y, X))]
delimiter
f.write(g.read())
delimiter
zip(*sorted(enumerate(a), key=operator.itemgetter(1)))[0][-2:]
delimiter
np.array([fnan, pinf, ninf]) < 0
delimiter
print(arr[1, 1])
delimiter
sorted_dict = collections.OrderedDict(sorted(d.items()))
delimiter
sorted(zipped, key=lambda x: x[1])
delimiter
ax2.legend(loc=0)
delimiter
[elem.tag for elem in a.iter() if elem is not a]
delimiter
plt.show()
delimiter
plt.show()
delimiter
dict((v, k) for k, v in my_dict.items())
delimiter
dict(zip(keys, zip(*data)))
delimiter
deletemylist[:]
delimiter
list(df.index)
delimiter
db.close()
delimiter
root.mainloop()
delimiter
plt.show()
delimiter
root.mainloop()
delimiter
root = tk.Tk()
delimiter
f = lambda x, y: x + y
delimiter
[sum(x) for x in zip(*l)]
delimiter
print([key for key in d if d[key] == 1])
delimiter
app.run()
delimiter
photo.put()
delimiter
plt.show()
delimiter
x = x[~numpy.isnan(x)]
delimiter
np.sqrt(((A - B) ** 2).sum(-1))
delimiter
app.run()
delimiter
plt.show()
delimiter
platform.system()
delimiter
[(a, b, c) for a, (b, c) in l]
delimiter
a.index(max(a))
delimiter
plt.show()
delimiter
list(set(listA) & set(listB))
delimiter
[i for i in a if i.isdigit()]
delimiter
os.system(command)
delimiter
plt.show()
delimiter
[tup[0] for tup in A]
delimiter
plt.show()
delimiter
plt.show()
delimiter
list(itertools.combinations(a, 2))
delimiter
ax.xaxis.tick_top()
delimiter
json.dumps(your_data, ensure_ascii=False)
delimiter
bigram_measures = nltk.collocations.BigramAssocMeasures()
delimiter
plt.show()
delimiter
writer.writerow(A)
delimiter
d.apply(pd.Series.value_counts, axis=1).fillna(0)
delimiter
sparse.coo_matrix(([6], ([5], [7])), shape=(10, 10))
delimiter
B = np.reshape(A, (-1, 2))
delimiter
writer.writerow([item[0], item[1], item[2]])
delimiter
root.lift()
delimiter
numpy.where(x == x.min())
delimiter
plt.show()
delimiter
values = np.array([i for i in range(100)], dtype=np.float64)
delimiter
plt.show()
delimiter
list(zip(a, b))
delimiter
mercury(1, 1, 2)
delimiter
cleaned_list = [x for x in some_list if x is not thing]
delimiter
list(itertools.product(*arrays))
delimiter
np.dot(np.atleast_2d(a).T, np.atleast_2d(b))
delimiter
[dict(t) for t in set([tuple(d.items()) for d in l])]
delimiter
df.values.tolist()
delimiter
cur.execute(sql, list(d.values()))
delimiter
sum([True, True, False, False, False, True])
delimiter
plt.show()
delimiter
plt.show()
delimiter
plt.show()
delimiter
[[0, -1, -2], [1, 0, -1], [2, 1, 0]]
delimiter
np.sqrt(tangent[:, (0)] * tangent[:, (0)] + tangent[:, (1)] * tangent[:, (1)])
delimiter
pd.to_datetime(pd.Series(date_stngs))
delimiter
sorted(list(y.items()), key=lambda x: (x[1], x[0]), reverse=True)
delimiter
[list(i) for i in set(tuple(i) for i in testdata)]
delimiter
plt.show()
delimiter
numpy.array([[key, val] for key, val in result.items()], dtype)
delimiter
window.destroy()
delimiter
matplotlib.pyplot.show()
delimiter
driver = webdriver.PhantomJS()
delimiter
df.values.flatten()
delimiter
multiprocessing.Process(target=foo, args=(x,)).start()
delimiter
dict((k, v) for k, v in parent_dict.items() if 2 < k < 4)
delimiter
sum(df.apply(lambda x: sum(x.isnull().values), axis=1) > 0)
delimiter
numpy.array([(key, val) for key, val in result.items()], dtype)
delimiter
plt.show()
delimiter
datetime.date(2010, 6, 16).isocalendar()[1]
delimiter
df.isnull().values.any()
delimiter
pd.concat([x] * 5)
delimiter
sorted(a, key=lambda i: list(i.values())[0], reverse=True)
delimiter
print(func.__name__)
delimiter
[x for x in lst if fn(x) != 0]
delimiter
list(itertools.chain(*a))
delimiter
Book.objects.create(**d)
delimiter
x = [int(i) for i in x.split()]
delimiter
pd.concat([distancesDF, datesDF.dates], axis=1)
delimiter
img.show()
delimiter
ax.set_ylim(0, 5)
delimiter
mypred = myplsda.predict(Xdata)
delimiter
plt.show()
delimiter
pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T
delimiter
[map(int, sublist) for sublist in lst]
delimiter
plt.show()
delimiter
print(list(itertools.chain.from_iterable(a)))
delimiter
[list(x) for x in zip(*sorted(zip(list1, list2), key=lambda pair: pair[0]))]
delimiter
sorted(unsorted_list, key=presorted_list.index)
delimiter
M.sum(axis=0).sum(axis=0)
delimiter
sorted(list(range(len(a))), key=lambda i: a[i], reverse=True)[:2]
delimiter
[value for pair in zip(a, b[::-1]) for value in pair]
delimiter
app.run()
delimiter
grouped.filter(lambda x: len(x) > 1)
delimiter
[(lambda x: x * x)(x) for x in range(10)]
delimiter
app.run()
delimiter
sorted(list(d.items()), key=lambda k_v: k_v[1])
delimiter
yourdatetime.date() == datetime.today().date()
delimiter
df.groupby(df.index.map(lambda t: t.minute))
delimiter
plt.show()
delimiter
self.showMaximized()
delimiter
[(i, j) for i, j in zip(lst, lst2)]
delimiter
result = [x for x in list_a if x[0] in list_b]
delimiter
conn.commit()
delimiter
np.where(out.ravel())[0]
delimiter
df.round()
delimiter
a[np.all(a != 0, axis=1)]
delimiter
[(x + y) for x in l2 for y in l1]
delimiter
A[(np.random.randint(A.shape[0], size=2)), :]
delimiter
plt.show()
delimiter
pd.concat([a, b], ignore_index=True)
delimiter
table.sort(key=lambda t: t.points)
delimiter
df.iloc[:, (np.r_[1:10, (15), (17), 50:100])]
delimiter
foo()
delimiter
[item[0] for item in queryresult]
delimiter
plt.show()
delimiter
[(a * b) for a, b in zip(lista, listb)]
delimiter
array([[0, 0], [1, 1], [2, 2]])
delimiter
server.serve_forever()
delimiter
numpy.nonzero(m.mask)
delimiter
n = int(input())
delimiter
Motifs.append(Motif)
delimiter
range(10, 0, -1)
delimiter
res_list = [x[0] for x in rows]
delimiter
plt.show()
delimiter
plt.show()
delimiter
[max(len(a), len(b)) for a, b in zip(*x)]
delimiter
zip(list(range(10)), list(range(10, 0, -1)))
delimiter
df.groupby(level=0, axis=1).mean()
delimiter
time.sleep(5)
delimiter
{k: v for k, v in list(hand.items()) if v}
delimiter
duck.quack()
delimiter
next((idx, x, y) for idx, (x, y) in enumerate(zip(list1, list2)) if x != y)
delimiter
pd.concat([x] * 5, ignore_index=True)
delimiter
my_string.splitlines()[0]
delimiter
dfts.groupby(lambda x: x.month).mean()
delimiter
(a.T * b).T
delimiter
[key for item in lst for key, value in list(my_dict.items()) if item in value]
delimiter
pd.read_json(elevations)
delimiter
plt.show()
delimiter
hash(pformat(a)) == hash(pformat(b))
delimiter
np.all(a == a[(0), :], axis=0)
delimiter
plt.show()
delimiter
plt.show()
delimiter
df2 = pd.DataFrame(index=df1.index)
delimiter
listofzeros = [0] * n
delimiter
[s for s in (square(x) for x in range(12)) if s > 50]
delimiter
sys.exit(0)
delimiter
plt.show()
delimiter
[max(abs(x) for x in arr[i:i + 4]) for i in range(0, len(arr), 4)]
delimiter
sys.exit()
delimiter
plt.show()
delimiter
plt.show()
delimiter
s = sorted(s, key=lambda x: (x[1], x[2]))
delimiter
df = df.reset_index()
delimiter
plt.show()
delimiter
[sum(map(int, s)) for s in example.split()]
delimiter
plt.show()
delimiter
response = requests.get(url, headers=HEADERS)
delimiter
any(e in lestring for e in lelist)
delimiter
plt.show()
delimiter
Blog.objects.filter(pk__in=[1, 4, 7])
delimiter
self.canvas.create_image(0, 0, image=image1, anchor=NW)
delimiter
plt.show()
delimiter
root.mainloop()
delimiter
last = len(s) - s[::-1].index(x) - 1
delimiter
items = [item for item in container if item.attribute == value]
delimiter
pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)
delimiter
df.sort_index(ascending=False)
delimiter
datetime.timedelta(-1, 86100).total_seconds()
delimiter
sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)
delimiter
fig.add_subplot(111)
delimiter
plt.show()
delimiter
[(y - x) for x, y in zip(L, L[1:])]
delimiter
[a for c in Cards for b in c for a in b]
delimiter
plt.show()
delimiter
rows = session.query(Congress).count()
delimiter
[j for i in zip(a, b) for j in i]
delimiter
pd.concat((df1, df2), axis=1).mean(axis=1)
delimiter
new_dict = {k: v for k, v in zip(keys, values)}
delimiter
map(lambda x: max(x, key=lambda y: y[1]), lists)
delimiter
list_.sort(key=lambda x: [x[0], len(x[1]), x[1]])
delimiter
next((key, value) for key, value in list(c.items()) if value > 1)
delimiter
df.loc[(df.index < start_remove) | (df.index > end_remove)]
delimiter
sorted(s, key=str.lower)
delimiter
np.linalg.solve(np.dot(a.T, a), np.dot(a.T, b))
delimiter
os.chdir(path)
delimiter
[int(x) for x in regex.findall(filename)]
delimiter
zip(*l)
delimiter
A[:, -2:]
delimiter
plt.show()
delimiter
dict((k, float(d2[k]) / d1[k]) for k in d2)
delimiter
a.append(b).reset_index(drop=True)
delimiter
print(np.array(list(mystr), dtype=int))
delimiter
ax.get_yaxis().set_ticklabels([])
delimiter
plt.show()
delimiter
dict(zip(l[::2], l[1::2]))
delimiter
dfts.groupby(lambda x: x.year).std()
delimiter
root.destroy()
delimiter
[(v, k) for k, v in d.items()]
delimiter
[f(x) for x in list]
delimiter
plt.show()
delimiter
plt.show()
delimiter
dict((key, sum(d[key] for d in dictList)) for key in dictList[0])
delimiter
plt.show()
delimiter
plt.show()
delimiter
plt.show()
delimiter
x = x[numpy.logical_not(numpy.isnan(x))]
delimiter
plt.show()
delimiter
cv2.destroyAllWindows()
delimiter
any(isinstance(el, list) for el in input_list)
delimiter
json_data = json.loads(json_string)
delimiter
t = sorted(list(a.items()), key=lambda x: x[1])
delimiter
func(*args, **kwargs)
delimiter
csvwriter.writerow(row)
delimiter
l = [[x for x in range(5)] for y in range(4)]
delimiter
[[y for x, y in sublist] for sublist in l]
delimiter
cb.ax.xaxis.set_major_formatter(plt.FuncFormatter(myfmt))
delimiter
list(range(11, 17))
delimiter
numpy.in1d(b, a)
delimiter
list(range(1, 11))
delimiter
plt.show()
delimiter
plt.show()
delimiter
plt.show()
delimiter
my_dict = {x[0]: x[1:] for x in my_list}
delimiter
plt.show()
delimiter
db.commit()
delimiter
sum(x[1] for x in structure)
delimiter
result = min(max_value, max(min_value, result))
delimiter
func(*args)
delimiter
os.kill(pid, signal.SIGUSR1)
delimiter
parser = argparse.ArgumentParser(allow_abbrev=False)
delimiter
[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]
delimiter
all(value == 0 for value in list(your_dict.values()))
delimiter
plt.show()
delimiter
sorted(map(list, list(totals.items())))
delimiter
pylab.setp(_self.ax.get_yticklabels(), fontsize=8)
delimiter
numpy.dstack((your_input_array, numpy.zeros((25, 54))))
delimiter
plt.show()
delimiter
__init__.py
delimiter
new_list = [x.split()[-1] for x in Original_List]
delimiter
min([x for x in num_list if x > 2])
delimiter
pd.concat([good, new], axis=0, ignore_index=True)
delimiter
plt.show()
delimiter
print(hex(new_int)[2:])
delimiter
max_item = max(a_list, key=operator.itemgetter(1))
delimiter
print(proc.communicate()[0])
delimiter
a[a != 0]
delimiter
dict(my_object)
delimiter
plt.show()
delimiter
theset = set(k.lower() for k in thedict)
delimiter
hex(sum(b << i for i, b in enumerate(reversed(walls))))
delimiter
my_list == list(range(my_list[0], my_list[-1] + 1))
delimiter
Book.objects.filter(pk=pk).update(**d)
delimiter
print(urllib.request.urlopen(request).read())
delimiter
[[Foo() for x in range(10)] for y in range(10)]
delimiter
yourdatetime.date() < datetime.today().date()
delimiter
np.concatenate(input_list).ravel().tolist()
delimiter
km.fit(x.reshape(-1, 1))
delimiter
plt.show()
delimiter
max(alkaline_earth_values, key=lambda x: x[1])
delimiter
sorted(subjects, operator.itemgetter(0), reverse=True)
delimiter
plt.figure(figsize=(1, 1))
delimiter
[(x + y) for x, y in zip(first, second)]
delimiter
Gtk.main()
delimiter
numpy.array(b).reshape(5, 5)
delimiter
plt.show()
delimiter
dic.setdefault(key, []).append(value)
delimiter
df = pd.DataFrame(np.random.random((1000, 100)))
delimiter
plt.show()
delimiter
result = [sum(b) for b in a]
delimiter
print([word for word in words if word[0].isupper()])
delimiter
df.loc[:, ((df != 0).any(axis=0))]
delimiter
plt.show()
delimiter
today = datetime.datetime.utcnow().date()
delimiter
s[0].upper() + s[1:]
delimiter
[y[1] for y in sorted([(myDict[x][2], x) for x in list(myDict.keys())])]
delimiter
p1.communicate()[0]
delimiter
cherrypy.quickstart()
delimiter
People.objects.all().order_by()
delimiter
list_of_lists = [list(k) for k in list_of_tuples]
delimiter
dict(pair for d in L for pair in list(d.items()))
delimiter
json.dumps({str(k): v for k, v in data.items()})
delimiter
sheet.write(1, 1, 2)
delimiter
alist.sort(key=lambda x: x.foo)
delimiter
all(a_list)
delimiter
plt.show()
delimiter
plt.show()
delimiter
plt.show()
delimiter
unittest.main()
delimiter
map(list, zip(*main_list))
delimiter
plt.show()
delimiter
plt.show()
delimiter
plt.show()
delimiter
B[np.argsort(A)] = np.sort(B)
delimiter
np.random.uniform(0, cutoffs[-1])
delimiter
[f.name for f in br.forms()]
delimiter
conn.commit()
delimiter
sorted_by_length = sorted(list_, key=lambda x: (x[0], len(x[1]), float(x[1])))
delimiter
self.request.get_all()
delimiter
np.savez(tmp, *[getarray[0], getarray[1], getarray[8]])
delimiter
[k for k, v in sorted(list(mydict.items()), key=lambda k_v: k_v[1][1])]
delimiter
list(i[0] == i[1] for i in zip(list1, list2))
delimiter
plt.show()
delimiter
lambda x, y: x + y
delimiter
print(all(word[0].isupper() for word in words))
delimiter
sorted(li, key=operator.itemgetter(1), reverse=True)
delimiter
sys.exit(main())
delimiter
plt.show()
delimiter
time.sleep(0.1)
delimiter
plt.show()
delimiter
print([y for x in list(dict.items()) for y in x])
delimiter
[x for x in list_of_nums if x != 2]
delimiter
pygame.display.flip()
delimiter
new_list = [x[:] for x in old_list]
delimiter
plt.scatter(*zip(*li))
delimiter
ax.scatter(XS, YS, ZS)
delimiter
numpy.dot(numpy.dot(a, m), a)
delimiter
randomList = [random.random() for _ in range(10)]
delimiter
[(a + i.reshape(2, 2)) for i in np.identity(4)]
delimiter
plt.show()
delimiter
plt.show()
delimiter
plt.show()
delimiter
self.sock.connect(self.url, header=self.header)
delimiter
urllib.request.urlopen(url).read()
delimiter
Activity.objects.filter(list__topic__user=my_user)
delimiter
mylist.sort(key=str.lower)
delimiter
plt.show()
delimiter
[(i, max(j)) for i, j in list(d.items())]
delimiter
sum(i * j for i, j in zip(a, b))
delimiter
ax.contour(x, y, z, levels, cmap=cmap, norm=norm, antialiased=True)
delimiter
os.path.join(*x.split(os.path.sep)[2:])
delimiter
time.sleep(1)
delimiter
[(x / y) for x, y in zip(a, b)]
delimiter
plt.show()
delimiter
get_client_ip(request)
delimiter
sorted(list(d.items()), key=lambda x: (x[1], x[0]))
delimiter
sum(isinstance(x, int) for x in a)
delimiter
list(zip(a, b, zip(c[0::2], c[1::2]), d))
delimiter
df = df.reset_index(drop=True)
delimiter
plt.show()
delimiter
result = {k: d2.get(v) for k, v in list(d1.items())}
delimiter
ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
plt.cla()
delimiter
set(d.keys())
delimiter
args[-1] + mySum(args[:-1])
delimiter
[False, False, True]
delimiter
plt.show()
delimiter
threading.Timer(delay, self.update).start()
delimiter
df.columns = df.columns.get_level_values(0)
delimiter
archive.write(pdffile, os.path.basename(pdffile))
delimiter
plt.show()
delimiter
t = tuple(x[0] for x in s)
delimiter
root.mainloop()
delimiter
plt.show()
delimiter
{{car.date_of_manufacture | datetime}}
delimiter
list_of_tuples = [tuple(k) for k in list_of_lists]
delimiter
x[::-1]
delimiter
sorted(list(u.items()), key=lambda v: v[1])
delimiter
len(set(a)) == len(a)
delimiter
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
delimiter
sys.exit()
delimiter
a = np.array(a)
delimiter
print(re.findall(pattern, x))
delimiter
df.sub(df.mean(axis=1), axis=0)
delimiter
[j for i in x for j in i]
delimiter
plt.show()
delimiter
self.assertEqual(response.status_code, 200)
delimiter
next(iter(dictionary.values()))
delimiter
os.read(f.fileno(), 50)
delimiter
np.split(a, [-1])
delimiter
plt.subplots_adjust(wspace=0, hspace=0)
delimiter
[i for s in [list(d.keys()) for d in LoD] for i in s]
delimiter
self.myList.extend([0] * (4 - len(self.myList)))
delimiter
[[i, i * 10] for i in range(5)]
delimiter
sorted(list(range(len(a))), key=lambda i: a[i])[-2:]
delimiter
random.randint(100000000000, 999999999999)
delimiter
[(c / t) for c, t in zip(conversions, trials)]
delimiter
np.sqrt(np.square(df).sum(axis=1))
delimiter
link.click()
delimiter
[(x[i] == y[i]) for i in range(len(x))]
delimiter
[list(t) for t in zip(*list_of_tuples)]
delimiter
string[0].isdigit()
delimiter
[[0, 0, 0], [1, 1, 1], [0, 0, 0]]
delimiter
np.array([0.0, pinf, ninf]) < 0
delimiter
{(x ** 2) for x in range(100)}
delimiter
connection.commit()
delimiter
numpy.dstack(numpy.meshgrid(x, y)).reshape(-1, 2)
delimiter
numpy.array(your_list)
delimiter
[x[0] for x in rows]
delimiter
plt.figure(figsize=(8, 8))
delimiter
array([True, True, True, True, True, True, True, True, True, True], dtype=bool)
delimiter
file.close()
delimiter
np.apply_along_axis(mahalanobis_sqdist, 1, d1, mean1, Sig1)
delimiter
my_array = numpy.array(list(gimme()))
delimiter
sum(ord(c) for c in string)
delimiter
sorted(a, key=lambda x: x[1])
delimiter
logging.disable(logging.CRITICAL)
delimiter
np.cumsum(a[::-1])[::-1] - np.cumsum(a)
delimiter
sum(i * i for i in l)
delimiter
[dict(zip(k, x)) for x in v]
delimiter
df.drop_duplicates()
delimiter
urllib.parse.unquote(string)
delimiter
lista_elegir[np.random.choice(len(lista_elegir), 1, p=probabilit)]
delimiter
x[[0, 1, -2, -1]]
delimiter
screen.blit(img, (0, 0))
delimiter
random_choice = random.choice(choices)
delimiter
(now - datetime.datetime(1970, 1, 1)).total_seconds()
delimiter
plt.show()
delimiter
plt.show()
delimiter
c[np.logical_or(a, b)]
delimiter
my_new_list = zip(my_list[0::2], my_list[1::2])
delimiter
[(x, lst2[i]) for i, x in enumerate(lst)]
delimiter
plt.show()
delimiter
plt.show()
delimiter
ax.yaxis.set_visible(False)
delimiter
data[i][j][k]
delimiter
reverse(str1[1:] + str1[0])
delimiter
z = [(i == j) for i, j in zip(x, y)]
delimiter
a[-1:] + a[:-1]
delimiter
plt.show()
delimiter
self.show()
delimiter
np.where(np.in1d(A, B))[0]
delimiter
map(lambda x: heapq.nsmallest(x, 2)[1], list_of_lists)
delimiter
Group.objects.get(id=1).members.all()[0]
delimiter
plt.show()
delimiter
driver.current_url
delimiter
AtB.loc[:2, :2]
delimiter
plt.show()
delimiter
pd.get_dummies(s.apply(pd.Series).stack()).sum(level=0)
delimiter
itertools.product([False, True], repeat=5)
delimiter
[x for x in a if x not in b]
delimiter
gtk.main()
delimiter
np.count_nonzero(~np.isnan(data))
delimiter
length = sum(len(s) for s in strings)
delimiter
df.iloc[:, ([2, 5, 6, 7, 8])]
delimiter
merged.reset_index()
delimiter
f.write(makeGrayPNG([[0, 255, 0], [255, 255, 255], [0, 255, 0]]))
delimiter
A = np.array(sorted(A, key=tuple))
delimiter
os.stat(filename).st_mtime
delimiter
plt.show()
delimiter
[func(a, b) for a, b in zip(arrA, arrB)]
delimiter
np.diag(np.rot90(array))
delimiter
lambda a, b: (a, b)
delimiter
set(a).intersection(b)
delimiter
datetime.datetime.combine(my_date, datetime.time.min)
delimiter
plt.show()
delimiter
[(v, k) for k, v in list(d.items())]
delimiter
[int(i) for i in str_list]
delimiter
sorted(l, key=asum)
delimiter
np.array(x).reshape(2, 2, 4)[:, :, (0)]
delimiter
df[df.columns[df.max() > 0]]
delimiter
[([0] * width) for y in range(height)]
delimiter
ax.legend()
delimiter
root.mainloop()
delimiter
fig.canvas.draw()
delimiter
the_list.sort(key=lambda item: (-len(item), item))
delimiter
time.sleep(0.5)
delimiter
T = [L[i] for i in Idx]
delimiter
float(math.factorial(171))
delimiter
len(set(list1).intersection(list2)) > 0
delimiter
df.index.to_series().diff()
delimiter
sorted(matrix, key=itemgetter(1))
delimiter
threading.Thread(target=play2).start()
delimiter
birthdays.sort(key=lambda d: (d.month, d.day))
delimiter
len(set(lst)) == len(lst)
delimiter
len(list(dictionary.values())) == len(set(dictionary.values()))
delimiter
plt.show()
delimiter
[x.lower() for x in words]
delimiter
df.groupby(key_columns).size()
delimiter
dict(zip(x, y))
delimiter
str = etree.tostring(root, pretty_print=True)
delimiter
print(sum(map(int, x[num - n:num])))
delimiter
f.close()
delimiter
plt.show()
delimiter
A[np.ix_([0, 2], [0, 1], [1, 2])]
delimiter
np.column_stack(np.where(b))
delimiter
list(accumulate(list(range(10))))
delimiter
plt.show()
delimiter
Group.objects.filter(member__in=[1, 2])
delimiter
entity.key.id()
delimiter
plt.show()
delimiter
sorted(list_of_dct, key=lambda x: order.index(list(x.values())[0]))
delimiter
df = df.ix[:, 0:2]
delimiter
regex.findall(string)
delimiter
[y for y in a if y not in b]
delimiter
a = a[:n] + k + a[n:]
delimiter
y = [i[0] for i in x]
delimiter
int(Decimal(s))
delimiter
plt.scatter(x, y, color=color)
delimiter
plt.show()
delimiter
df.isnull().sum()
delimiter
name[0].firstChild.nodeValue
delimiter
list(permutations(list(range(9)), 2))
delimiter
list(range(10))
delimiter
slice = [arr[i][0:2] for i in range(0, 2)]
delimiter
print(repr(data))
delimiter
{k: (d2[k] / d1[k]) for k in list(d1.keys()) & d2}
delimiter
numpy.sort(arr, axis=0)
delimiter
cb.ax.yaxis.set_major_formatter(plt.FuncFormatter(myfmt))
delimiter
plt.show()
delimiter
print(response.read())
delimiter
plt.show()
delimiter
a = [mynamedtuple(*el) for el in a]
delimiter
element.click()
delimiter
{{json.key1}}
delimiter
list(itertools.product(list(range(-x, y)), repeat=dim))
delimiter
redis_conn = redis.Redis(connection_pool=redis_pool)
delimiter
do_something()
delimiter
a = sorted(a, key=lambda x: float(x))
delimiter
numpy.concatenate(LIST, axis=0)
delimiter
any(substring in string for substring in substring_list)
delimiter
np.in1d(b, a).nonzero()[0]
delimiter
len(myArray)
delimiter
data[:, ([1, 2, 4, 5, 7, 8])]
delimiter
sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)
delimiter
[item for innerlist in outerlist for item in innerlist]
delimiter
plt.show()
delimiter
a[i] += 1
delimiter
pygame.display.set_mode(size, FULLSCREEN)
delimiter
cleaned = [x for x in your_list if x]
delimiter
User.objects.filter(userprofile__level__gte=0)
delimiter
list_of_lists = [[try_int(x) for x in lst] for lst in list_of_lists]
delimiter
app = Flask(__name__)
delimiter
ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)
delimiter
sorted(t, key=lambda i: (i[1], -i[2]))
delimiter
app.run(debug=True)
delimiter
logger = logging.getLogger(__name__)
delimiter
pyplot.show()
delimiter
nodes = [[Node() for j in range(cols)] for i in range(rows)]
delimiter
sys.stdout.flush()
delimiter
plt.show()
delimiter
plt.show()
delimiter
plt.show()
delimiter
print([u for v in [[i, i] for i in range(5)] for u in v])
delimiter
sys.stdout.flush()
delimiter
sorted(itertools.chain(args), cmp)
delimiter
plt.legend(frameon=False)
delimiter
cv2.waitKey(0)
delimiter
min(myList, key=lambda x: abs(x - myNumber))
delimiter
i, j = np.where(a == value)
delimiter
cookies = driver.get_cookies()
delimiter
pd.DataFrame(d)
delimiter
A[[0, 1], [0, 1]]
delimiter
sorted(yourdata, reverse=True)
delimiter
pd.DataFrame(df.values * df2.values, columns=df.columns, index=df.index)
delimiter
list(itertools.combinations(L, 2))
delimiter
[item for item in my_list if any(x in item for x in bad)]
delimiter
list(x * y for x, y in list(zip(a, b)))
delimiter
b = np.concatenate((a, a), axis=0)
delimiter
[[int(x)] for y in list_of_lists for x in y]
delimiter
gtk.main()
delimiter
result = sys.stdin.read()
delimiter
res = list(sorted(theDict, key=theDict.__getitem__, reverse=True))
delimiter
c = [b[i] for i in index]
delimiter
pickle.loads(s)
delimiter
figure(figsize=(11.69, 8.27))
delimiter
[list(v) for k, v in itertools.groupby(mylist, key=lambda x: x[:5])]
delimiter
str1.split()
delimiter
legend(numpoints=1)
delimiter
root.mainloop()
delimiter
any(x in string for x in search)
delimiter
df1.groupby([df1.index.year, df1.index.hour]).mean()
delimiter
len(max(i, key=len))
delimiter
sorted(iter(d.items()), key=lambda x: x[1])
delimiter
plt.show()
delimiter
y = map(operator.itemgetter(0), x)
delimiter
dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())
delimiter
vobj.adr
delimiter
np.equal.reduce([1, 0, 0, 1])
delimiter
i = np.array([[0], [1]])
delimiter
plt.show()
delimiter
xs.sort(lambda x, y: cmp(len(x), len(y)))
delimiter
df_result.apply(get_col_name, axis=1)
delimiter
uinfo.save()
delimiter
arr[[0, 1, 1], [1, 0, 2]]
delimiter
set([i for s in [list(d.keys()) for d in LoD] for i in s])
delimiter
[x for b in a for x in b]
delimiter
sorted(a.items()) == sorted(b.items())
delimiter
plt.grid(True)
delimiter
[int(d) for d in str(bin(x))[2:]]
delimiter
Reporter.objects.all().delete()
delimiter
df.groupby(level=[0, 1]).quantile()
delimiter
{{value | safe}}
delimiter
{k: int(v) for k, v in d.items()}
delimiter
df[[1]]
delimiter
[max(len(str(x)) for x in line) for line in zip(*foo)]
delimiter
a.fromlist([int(val) for val in stdin.read().split()])
delimiter
session.query(Tag).distinct(Tag.name).group_by(Tag.name).count()
delimiter
c = [[(i + j) for i, j in zip(e, b)] for e in a]
delimiter
plt.show()
delimiter
np.corrcoef(x)
delimiter
[sublist[::-1] for sublist in to_reverse[::-1]]
delimiter
[str(wi) for wi in wordids]
delimiter
keys, values = zip(*list(d.items()))
delimiter
os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)
delimiter
[[] for _ in range(n)]
delimiter
win.show_all()
delimiter
cursor.execute(sql, list(myDict.values()))
delimiter
len(s.split())
delimiter
pd.concat([df, df.dictionary.apply(str2dict).apply(pd.Series)], axis=1)
delimiter
plt.colorbar(im, ax=ax)
delimiter
df.reset_index(inplace=True)
delimiter
print([obj.attr for obj in my_list_of_objs])
delimiter
dates_dict.setdefault(key, []).append(date)
delimiter
[[-1, 2, 0], [0, 0, 0], [0, 2, -1], [-1, -2, 0], [0, -2, 2], [0, 1, 0]]
delimiter
next(iter(dict.values()))
delimiter
sorted(zip(a, b))
delimiter
max(len(word) for word in i)
delimiter
df.to_pickle(file_name)
delimiter
sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
delimiter
isinstance(a, dict)
delimiter
aapl.groupby((aapl.sign.diff() != 0).cumsum()).size()
delimiter
self.view.header().setModel(model)
delimiter
np.where((vals == (0, 1)).all(axis=1))
delimiter
pd.concat([A, B], axis=1)
delimiter
root.quit()
delimiter
sum(map(ord, string))
delimiter
l = (int(x) for x in s.split())
delimiter
time.sleep(1)
delimiter
root.mainloop()
delimiter
datetime.now() - datetime.now()
delimiter
connection.close()
delimiter
msglist = [hextotal[i:i + 4096] for i in range(0, len(hextotal), 4096)]
delimiter
text.config(state=DISABLED)
delimiter
new_list = my_list[-10:]
delimiter
array([[-1, -1], [0, 0], [1, 1]])
delimiter
y = [row[:] for row in x]
delimiter
datetime.datetime.combine(dateobject, datetime.time())
delimiter
mylist.sort(key=lambda x: x.lower())
delimiter
plt.show()
delimiter
sum(1 for i, j in zip(a, b) if i != j)
delimiter
sorted(set(my_list))
delimiter
p.properties()[s].get_value_for_datastore(p)
delimiter
np.random.randn(5) * 10
delimiter
db.session.commit()
delimiter
df.ix[:-1]
delimiter
Toy.objects.filter(toy_owners__parents=parent)
delimiter
curry = lambda f, a: lambda x: f(a, x)
delimiter
A.ravel()[A.shape[1] * i:A.shape[1] * (i + A.shape[1]):A.shape[1] + 1]
delimiter
plt.show()
delimiter
plt.show()
delimiter
ax.axes.get_yaxis().set_visible(False)
delimiter
df.stack().groupby(level=0).first()
delimiter
sck.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
delimiter
sorted(sorted(s), key=str.upper)
delimiter
[line.split() for line in f]
delimiter
weekly = [sum(visitors[x:x + 7]) for x in range(0, len(daily), 7)]
delimiter
plt.show()
delimiter
plt.show()
delimiter
print(zip(my_list[0::2], my_list[1::2]))
delimiter
file.close()
delimiter
json.dumps([dict(list(row.items())) for row in rs])
delimiter
[k for k, v in User._fields.items() if v.required]
delimiter
d = {t[0]: t[1:] for t in l}
delimiter
ax2.set_ylim([0, 5])
delimiter
sys.exit(0)
delimiter
browser.submit()
delimiter
sorted(Profile.objects.all(), key=lambda p: p.reputation)
delimiter
writer.writerows(zip(*[d[key] for key in keys]))
delimiter
sum(len(y) for y in x if len(y) > 1)
delimiter
b = np.delete(a, -1, 1)
delimiter
some_func(*params)
delimiter
app.run()
delimiter
((25 < a) & (a < 100)).sum()
delimiter
sum(x * y for x, y in zip(a, b))
delimiter
[k for d in list(foo.values()) for k in d]
delimiter
self.assertEqual(response.status_code, 200)
delimiter
float(a) / float(b)
delimiter
itertools.product(list(range(2)), repeat=4)
delimiter
time.sleep(1)
delimiter
{k: v for k, v in enumerate(range(10)) if v % 2 == 0}
delimiter
b.update(d)
delimiter
[s[:5] for s in buckets]
delimiter
a[np.in1d(a, b)]
delimiter
[x for x in j if x >= 5]
delimiter
d = pd.DataFrame(0, index=np.arange(len(data)), columns=feature_list)
delimiter
sorted(d, key=d.get)
delimiter
[m.group(1) for l in lines for m in [regex.search(l)] if m]
delimiter
sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)
delimiter
no_integers = [x for x in mylist if not isinstance(x, int)]
delimiter
plt.plot(x, y)
delimiter
plt.show()
delimiter
df.iloc[:, ([2, 5, 6, 7, 8])].mean(axis=1)
delimiter
plt.show()
delimiter
plt.draw()
delimiter
tuple(sorted(a.items()))
delimiter
plt.show()
delimiter
time.sleep(5)
delimiter
A[(np.random.choice(A.shape[0], 2, replace=False)), :]
delimiter
lst.sort(key=lambda x: x[2], reverse=True)
delimiter
output.append(max(flatlist, key=lambda x: x[1]))
delimiter
y = sorted(set(x), key=lambda s: s.lower())
delimiter
list(itertools.product(*a))
delimiter
str(n) == str(n)[::-1]
delimiter
changed_list = [(int(f) if f.isdigit() else f) for f in original_list]
delimiter
db.session.commit()
delimiter
np.arange(len(df.columns)) // 2
delimiter
root.mainloop()
delimiter
[(lambda x: x * x) for x in range(10)]
delimiter
[1, 1, 1, 10, 10, 5, 5, 5, 5, 5, 5]
delimiter
window.set_position(Gtk.WindowPosition.CENTER)
delimiter
df.iloc[:, ([2, 5, 6, 7, 8])].mean(axis=0)
delimiter
np.array(arr[:, (1)], dtype=np.float)
delimiter
mynewlist = list(myset)
delimiter
time.sleep(10)
delimiter
reactor.run()
delimiter
np.array(arr[:, (1)])
delimiter
plt.show()
delimiter
plt.show()
delimiter
random.choice([k for k in d for x in d[k]])
delimiter
session.commit()
delimiter
zip(*main_list)
delimiter
(e == np.array([1, 2])).all(-1)
delimiter
plt.show()
delimiter
logger.setLevel(logging.DEBUG)
delimiter
random.sample(range(1, 50), 6)
delimiter
ssh.close()
delimiter
a = a[-1:] + a[:-1]
delimiter
df.columns[df.max() > 0]
delimiter
df.info()
delimiter
list_of_tuples[0][0] = 7
delimiter
done = [(el, x) for el in [a, b, c, d]]
delimiter
plt.show()
delimiter
print([[l[:i], l[i:]] for i in range(1, len(l))])
delimiter
{k for d in LoD for k in list(d.keys())}
delimiter
sorted(lst, key=lambda x: (-1 * c[x], lst.index(x)))
delimiter
networkx.draw_networkx_labels(G, pos, labels)
delimiter
x = [i[0] for i in x]
delimiter
p.terminate()
delimiter
b = np.where(np.isnan(a), 0, a)
delimiter
plt.show()
delimiter
cv2.destroyAllWindows()
delimiter
webbrowser.open_new(url)
delimiter
db.session.delete(page)
delimiter
pixmap = QtGui.QPixmap(path)
delimiter
df[df.applymap(isnumber)]
delimiter
sum(1 for x in list(d.values()) if some_condition(x))
delimiter
root.mainloop()
delimiter
app.exec_()
delimiter
plt.show()
delimiter
Group.objects.get(id=1).members.all()[0]
delimiter
m[~m.mask]
delimiter
matrix = [([0] * 5) for i in range(5)]
delimiter
[item for item in a if sum(item) > 10]
delimiter
sorted(list(dictionary.items()), key=operator.itemgetter(1))
delimiter
[(x, f(x)) for x in iterable if f(x)]
delimiter
app.run(debug=True)
delimiter
glfw.Terminate()
delimiter
print(select([my_table, func.current_date()]).execute())
delimiter
element.click()
delimiter
plt.show()
delimiter
names = list(map(lambda x: x[0], cursor.description))
delimiter
process.stdin.close()
delimiter
session.commit()
delimiter
a = np.concatenate((a, [0]))
delimiter
app.run(threaded=True)
delimiter
pd.concat([df.head(1), df.tail(1)])
delimiter
app.debug = True
delimiter
model.predict(X_test)
delimiter
time.sleep(1)
delimiter
np.flatnonzero(x).mean()
delimiter
print(template.render())
delimiter
np.array(list(arr[:, (1)]), dtype=np.float)
delimiter
map(sum, zip(*lists))
delimiter
CustomPK._meta.pk.name
delimiter
[next(it) for _ in range(n)]
delimiter
cursor.close()
delimiter
driver.implicitly_wait(60)
delimiter
[1, 1, 0, 0, 1, 0]
delimiter
df.T.apply(tuple).apply(list)
delimiter
root.mainloop()
delimiter
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
delimiter
reverse_d = {value: key for key, values in list(d.items()) for value in values}
delimiter
plt.show()
delimiter
os.remove(filename)
delimiter
plt.show()
delimiter
df.reindex_axis(df.mean().sort_values().index, axis=1)
delimiter
print(sorted(xs, key=len))
delimiter
pdb.set_trace()
delimiter
df.groupby(by=df.columns, axis=1).mean()
delimiter
plt.show()
delimiter
numpy.apply_along_axis(numpy.linalg.norm, 1, a)
delimiter
myList[:] = [(x / myInt) for x in myList]
delimiter
plt.show()
delimiter
str_list = list([_f for _f in str_list if _f])
delimiter
df = df.reset_index()
delimiter
my_list[:]
delimiter
my_list = [[x for x in sublist if x not in to_del] for sublist in my_list]
delimiter
d.setdefault(x, []).append(foo)
delimiter
obj.save()
delimiter
driver.page_source
delimiter
list(chain.from_iterable(a))
delimiter
ForkedPdb().set_trace()
delimiter
sum(v for v in list(d.values()) if v > 0)
delimiter
writer.writeheader()
delimiter
print(max(x, key=sum))
delimiter
levels = [{}, {}, {}]
delimiter
plt.show()
delimiter
plt.show()
delimiter
list_dict = {t[0]: t for t in tuple_list}
delimiter
dict((k, v * dict2[k]) for k, v in list(dict1.items()) if k in dict2)
delimiter
math.cos(math.radians(1))
delimiter
sentence = [word.lower() for word in sentence]
delimiter
logger.setLevel(logging.DEBUG)
delimiter
zip(it, it, it)
delimiter
{_key: _value(_key) for _key in _container}
delimiter
[list(x) for x in list(results.values())]
delimiter
cv2.waitKey()
delimiter
np.where((a[0] == 2) & (a[1] == 5))
delimiter
data = [[0, 0], [0, 0], [0, 0]]
delimiter
fig.set_size_inches(w, h, forward=True)
delimiter
df.groupby(level=0, as_index=False).nth(0)
delimiter
df.iloc[2, 0]
delimiter
self.buttonBox.button(QtGui.QDialogButtonBox.Reset).clicked.connect(foo)
delimiter
s.reset_index(0).reset_index(drop=True)
delimiter
user2 = forms.ModelChoiceField(queryset=User.objects.all())
delimiter
con.commit()
delimiter
plt.show()
delimiter
GRAVITY = 9.8
delimiter
plt.show()
delimiter
app.run(debug=True)
delimiter
args = parser.parse_args()
delimiter
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
delimiter
db.close()
delimiter
pygame.display.flip()
delimiter
[i for i, v in enumerate(a) if v > 4]
delimiter
cv2.waitKey()
delimiter
[(i, j) for i, j in zip(a, x)]
delimiter
plt.show()
delimiter
files.sort(key=file_number)
delimiter
sortedlist = [(k, a[k]) for k in sorted(a)]
delimiter
df[pd.isnull(df).any(axis=1)]
delimiter
conn.commit()
delimiter
plt.show()
delimiter
a[1::2] = -1
delimiter
print(pattern.search(url).group(1))
delimiter
self.SetSizerAndFit(bsizer)
delimiter
print(sorted(student_tuples, key=lambda t: (-t[2], t[0])))
delimiter
sum(x == chosen_value for x in list(d.values()))
delimiter
plt.show()
delimiter
sum(l) / float(len(l))
delimiter
process.start()
delimiter
plt.show()
delimiter
arr[arr[:, (2)].argsort()]
delimiter
grouped.reset_index(level=0).reset_index(level=0)
delimiter
isinstance(s, str)
delimiter
plt.show()
delimiter
arr[-2:2]
delimiter
signal.signal(signal.SIGCHLD, signal.SIG_IGN)
delimiter
datetime.utcnow() + timedelta(minutes=5)
delimiter
[elem.tag for elem in a.iter()]
delimiter
[(x, y) for x, y in zip(myList, myList[1:]) if y == 9]
delimiter
app.mainloop()
delimiter
tst2 = str(tst)
delimiter
self.root.destroy()
delimiter
[0, 2, 4, 5]
delimiter
c[np.logical_and(a, b)]
delimiter
json_string = json.dumps([ob.__dict__ for ob in list_name])
delimiter
numpy.append(a, a[0])
delimiter
win.setWindowFlags(QtCore.Qt.WindowMinimizeButtonHint)
delimiter
[element for i, element in enumerate(centroids) if i not in index]
delimiter
np.isnan(np.array([np.nan, 0], dtype=np.float64))
delimiter
os.system(my_cmd)
delimiter
app.run()
delimiter
new_list = [d[key] for key in string_list]
delimiter
root.mainloop()
delimiter
os.path.join(root, name)
delimiter
plt.show()
delimiter
[{key: dict(value)} for key, value in B.items()]
delimiter
plt.show()
delimiter
pprint(dict(list(o.items())))
delimiter
print((a, b, c, d))
delimiter
plt.show()
delimiter
pd.concat([d1, df1], axis=1)
delimiter
(set(x) for x in d.values())
delimiter
unittest.main()
delimiter
datetime.datetime(2010, 7, 26, 0, 0)
delimiter
plt.show()
delimiter
pygame.display.flip()
delimiter
pd.concat([df2, df1], axis=1)
delimiter
sorted(s, key=str.upper)
delimiter
[item for item in my_list if some_condition()]
delimiter
my_list.pop(2)
delimiter
ordered = OrderedDict(sorted(list(mydict.items()), key=lambda t: t[0]))
delimiter
datetime.utcnow()
delimiter
pd.concat([df[:start_remove], df[end_remove:]])
delimiter
lines.sort()
delimiter
df.applymap(lambda x: isinstance(x, (int, float)))
delimiter
server.serve_forever()
delimiter
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
e = next(iter(s))
delimiter
sort()
delimiter
(e == np.array([1, 2])).all(-1).shape
delimiter
app.run(debug=True)
delimiter
plt.show()
delimiter
plt.clf()
delimiter
deletemy_list[index]
delimiter
[(myList[i - 1], myList[i]) for i in range(len(myList)) if myList[i] == 9]
delimiter
sum([(i * j) for i, j in list(itertools.combinations(l, 2))])
delimiter
plt.figure()
delimiter
logging.getLogger().setLevel(logging.DEBUG)
delimiter
new_index = max(0, min(new_index, len(mylist) - 1))
delimiter
sys.hash_info
delimiter
text_file.close()
delimiter
plt.show()
delimiter
numpy.in1d(b, a).all()
delimiter
array([True, False, False, True, True, False], dtype=bool)
delimiter
[key for key, value in list(my_dict.items()) if set(value).intersection(lst)]
delimiter
sys.stdout.flush()
delimiter
plt.show()
delimiter
Book.objects.filter(id=id).update()
delimiter
zip(*a)
delimiter
ax.yaxis.set_label_coords(0.5, 0.5)
delimiter
country, capital = random.choice(list(d.items()))
delimiter
unittest.main()
delimiter
int(math.ceil(x)) - 1
delimiter
[dict(d, count=n) for d, n in zip(l1, l2)]
delimiter
uniques = collections.defaultdict(set)
delimiter
C / C.astype(np.float).sum(axis=1)
delimiter
cv2.waitKey()
delimiter
r = [(1) for i in range(n)]
delimiter
sys.exit(0)
delimiter
{{grains.fqdn_ip}}
delimiter
sorted(data, key=data.get)
delimiter
fig, ax = plt.subplots(10, 10)
delimiter
scipy.spatial.distance.euclidean(A, B)
delimiter
subseqs = (seq[:i] for i in range(1, len(seq) + 1))
delimiter
proc.terminate()
delimiter
plt.show()
delimiter
plt.show()
delimiter
d = {(a.lower(), b): v for (a, b), v in list(d.items())}
delimiter
s.split()
delimiter
[np.unravel_index(np.argmin(a), (2, 2)) for a in A2]
delimiter
a.insert(0, k)
delimiter
list(map(list, set(map(lambda i: tuple(i), testdata))))
delimiter
plt.show()
delimiter
plt.show()
delimiter
plt.show()
delimiter
max(list(MyCount.keys()), key=int)
delimiter
numpy.fft.fft([1, 2, 1, 0, 1, 2, 1, 0])
delimiter
x = map(int, x.split())
delimiter
plt.show()
delimiter
{k: (float(d2[k]) / d1[k]) for k in d2}
delimiter
woduplicates = list(set(lseperatedOrblist))
delimiter
a.contains(b)
delimiter
results = Model.objects.filter(x=5).exclude(a=true)
delimiter
dt = pytz.utc.localize(dt)
delimiter
print(my_string[0:100])
delimiter
[lambda x: (x * x for x in range(10))]
delimiter
array([0, 1, 4, 5, 6, 1, 7, 8, 8, 1])
delimiter
a[np.in1d(a[:, (1)], b)]
delimiter
arr[mask] = arr[np.nonzero(mask)[0], idx[mask]]
delimiter
root.mainloop()
delimiter
alpha = img.split()[-1]
delimiter
df.sort(inplace=True)
delimiter
timestamp = (dt - datetime(1970, 1, 1)).total_seconds()
delimiter
plt.show()
delimiter
df.stack()
delimiter
print_tree(shame)
delimiter
tuple(zip(*t))
delimiter
datetime.datetime.fromtimestamp(calendar.timegm(d.timetuple()))
delimiter
print(response.geturl())
delimiter
plt.show()
delimiter
locals()[x]
delimiter
f.read()
delimiter
next((i for i, j in enumerate(lst) if j == 2), 42)
delimiter
dict(d)
delimiter
driver.current_window_handle
delimiter
f.close()
delimiter
df.unstack(level=1)
delimiter
np.concatenate((np.sort(a[~np.isnan(a)])[::-1], [np.nan] * np.isnan(a).sum()))
delimiter
a.where(~np.isnan(a), other=b, inplace=True)
delimiter
f.write(chr(i))
delimiter
50 - list1[0][0] + list1[0][1] - list1[0][2]
delimiter
[x for t in zip(list_a, list_b) for x in t]
delimiter
sorted(list(d.items()), key=lambda x: x[::-1])
delimiter
plt.show()
delimiter
plt.show()
delimiter
plt.show()
delimiter
df.iloc[:, (0)]
delimiter
random.choice(list(d.keys()))
delimiter
list(set(a).union(b))
delimiter
last_index = len(list1) - 1
delimiter
z = zip(x, y)
delimiter
locals()[x]
delimiter
a = list(a)
delimiter
A = [i for i in A if i not in B]
delimiter
unittest.main()
delimiter
plt.show()
delimiter
my_list = [item for item in my_list if item.isalpha()]
delimiter
plt.show()
delimiter
len(re.findall(pattern, string_to_search))
delimiter
driver.close()
delimiter
a[0:0] = k
delimiter
{k: [lookup[n] for n in v] for k, v in list(my_dict.items())}
delimiter
df.loc[:, (cols)] / df.loc[ii, cols].values
delimiter
np.amin(V, axis=0)
delimiter
b.append(c)
delimiter
setattr(test, attr_name, 10)
delimiter
pg.mixer.init()
delimiter
zip(*a)
delimiter
f(*((1, 4), (2, 5)))
delimiter
np.array(list(itertools.product([0, 1], repeat=n ** 2))).reshape(-1, n, n)
delimiter
plt.show()
delimiter
print(etree.tostring(root, pretty_print=True))
delimiter
l.sort(key=alphanum_key)
delimiter
plt.show()
delimiter
tuple_of_tuples = tuple(tuple(x) for x in list_of_lists)
delimiter
sorted(timestamp, reverse=True)
delimiter
lst = [[] for _ in range(a)]
delimiter
l[-1:] + l[:-1]
delimiter
str.isdigit()
delimiter
unittest.main()
delimiter
df.apply(pd.Series.nunique, axis=1)
delimiter
MyClass().mymethod()
delimiter
list(joined_dataset.values())
delimiter
plt.show()
delimiter
MyModel.objects.get(id=1).my_field
delimiter
model.fit(X_train, y_train)
delimiter
df.to_pickle(file_name)
delimiter
ax1.xaxis.get_major_formatter().set_powerlimits((0, 1))
delimiter
sum(1 for i in range(1, len(a)) if a[i - 1] * a[i] < 0)
delimiter
plt.show()
delimiter
plt.show()
delimiter
plt.show()
delimiter
getattr(foo, bar)(*params)
delimiter
{k: list(v) for k, v in groupby(sorted(d.items()), key=itemgetter(0))}
delimiter
a[np.in1d(a[:, (2)], list(b))]
delimiter
settime = time.mktime(ftime.timetuple())
delimiter
print(max(list(d.keys()), key=lambda x: d[x]))
delimiter
deriv_poly = [(poly[i] * i) for i in range(1, len(poly))]
delimiter
ab = [(a[i] * b[i]) for i in range(len(a))]
delimiter
y = str(int(x, 16))
delimiter
[(i + j) for i, j in zip(x[::2], x[1::2])]
delimiter
y = np.cumsum(x)
delimiter
print(max(d, key=d.get))
delimiter
multiprocessing.Process.__init__(self)
delimiter
root.mainloop()
delimiter
self.submenu2.menuAction().setVisible(False)
delimiter
y[:, (cols)].sum()
delimiter
[(item for sublist in list_of_lists) for item in sublist]
delimiter
[i for i in d for j in range(d[i])]
delimiter
writer.writerows(zip(*list(d.values())))
delimiter
sorted(L, key=itemgetter(1), reverse=True)
delimiter
b = a[:, :-1, :]
delimiter
sum(v[1] for d in myList for v in d.values())
delimiter
f, axs = plt.subplots(2, 2, figsize=(15, 15))
delimiter
len(s)
delimiter
print(df.to_string(index=False))
delimiter
plt.draw()
delimiter
ax.scatter(xs, ys, zs, c=cs, marker=m)
delimiter
sorted(a, key=lambda x: x[1], reverse=True)
delimiter
[y for sublist in l for x, y in sublist]
delimiter
plt.show()
delimiter
res.drop_duplicates()
delimiter
numpy.prod(a)
delimiter
urlfetch.set_default_fetch_deadline(60)
delimiter
session.commit()
delimiter
db.commit()
delimiter
output = [[word, len(word), word.upper()] for word in sent]
delimiter
dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
delimiter
np.dot(x, y)
delimiter
[[j for j in families[i] if i != j] for i in range(len(families))]
delimiter
row = [x.strip() for x in row]
delimiter
[i[0] for i in e]
delimiter
array([[1, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 0]])
delimiter
file.close()
delimiter
print(soup.prettify())
delimiter
self.est.fit(X, y)
delimiter
a = [[(0) for y in range(8)] for x in range(8)]
delimiter
numpy.apply_along_axis(numpy.linalg.norm, 1, dist)
delimiter
d.update((k, frozenset(v)) for k, v in d.items())
delimiter
plt.show()
delimiter
q = B.select().join(A).group_by(A).having(fn.Max(B.date) == B.date)
delimiter
plt.show()
delimiter
np.vstack(a)
delimiter
dict(map(lambda a: [a[1], a[0]], iter(d.items())))
delimiter
plt.show()
delimiter
cleanlist = [(0.0 if math.isnan(x) else x) for x in oldlist]
delimiter
deletedct[key]
delimiter
ctypes.addressof(bufstr)
delimiter
app.run()
delimiter
a_send = dict((k[0], v) for k, v in list(a.items()))
delimiter
plt.show()
delimiter
(df.notnull().cumsum(axis=1) == 4).idxmax(axis=1)
delimiter
entry_list.extend([entry.title.text for entry in feed.entry])
delimiter
plt.show()
delimiter
plt.legend()
delimiter
app = Flask(__name__)
delimiter
df = df.loc[:, ((df != 0).any(axis=0))]
delimiter
x_image = tf.reshape(tf_in, [-1, 2, 4, 1])
delimiter
[line[2:] for line in lines]
delimiter
list([a for a in A if a not in B])
delimiter
[max(len(b) for b in a) for a in zip(*x)]
delimiter
app.exec_()
delimiter
next((i for i, v in enumerate(L) if v != x), -1)
delimiter
zip(*l)
delimiter
df.stack().groupby(level=0).first().reindex(df.index)
delimiter
pd.concat([s1, s2], axis=1).reset_index()
delimiter
app.MainLoop()
delimiter
app.run(debug=True)
delimiter
map(float, i.split()[:2])
delimiter
plt.figure().canvas.draw()
delimiter
[item for pair in zip(a, b) for item in pair]
delimiter
logging.getLogger().setLevel(logging.DEBUG)
delimiter
p.start()
delimiter
y = [s for s in x if len(s) == 2]
delimiter
top_n.sort(key=lambda t: (-t[1], t[0]))
delimiter
deletemylist[:n]
delimiter
int(str1.split()[0])
delimiter
Employee.objects.select_related()
delimiter
b[a].shape
delimiter
print(json.dumps(data))
delimiter
test_rec[(test_rec.age == 1) & (test_rec.sex == 1)]
delimiter
match.group(1)
delimiter
list({(x[0], x[1]): x for x in L}.values())
delimiter
sys.stdout.isatty()
delimiter
btn.grid(column=x, row=y, sticky=N + S + E + W)
delimiter
plt.show()
delimiter
my_dict2 = dict((y, x) for x, y in my_dict.items())
delimiter
root.mainloop()
delimiter
f.read()
delimiter
pd.concat([df, df.sum(axis=1)], axis=1)
delimiter
np.searchsorted(A, np.intersect1d(A, B))
delimiter
session.commit()
delimiter
np.resize([1, -1], 10)
delimiter
plt.show()
delimiter
plt.show()
delimiter
equal([1, 2], a).all(axis=1)
delimiter
fig.subplots_adjust(wspace=0, hspace=0)
delimiter
print(sorted(d.keys()))
delimiter
plt.show()
delimiter
new_list = copy.deepcopy(old_list)
delimiter
np.linspace(0, 5, 10, endpoint=False)
delimiter
somelist.sort(key=lambda x: x.resultType)
delimiter
f.close()
delimiter
array[itemindex[0][0]][itemindex[1][0]]
delimiter
type(ham).__name__
delimiter
tuple([(10 * x) for x in img.size])
delimiter
plt.show()
delimiter
root.mainloop()
delimiter
root.mainloop()
delimiter
plt.show()
delimiter
[(x, y) for x, y in zip(myList, myList[1:]) if y == 9]
delimiter
print(os.path.abspath(__file__))
delimiter
urllib.request.install_opener(opener)
delimiter
scipy.stats.hypergeom.pmf(k, M, n, N)
delimiter
btn.clicked.connect(self.close)
delimiter
plt.show()
delimiter
cv2.destroyAllWindows()
delimiter
np.array([a, a, a])
delimiter
a[:, :2]
delimiter
[item for sublist in list_of_lists for item in sublist]
delimiter
main.mainloop()
delimiter
plt.show()
delimiter
pd.value_counts(d.values.ravel())
delimiter
np.tensordot(ind, dist, axes=[1, 1])[0].T
delimiter
plt.show()
delimiter
my_tuple = tuple([my_string] + my_list)
delimiter
[4957, 4957, 1945]
delimiter
plt.show()
delimiter
[2, 4, 6, 8]
delimiter
plt.show()
delimiter
n = int(input())
delimiter
good_data = np.array([x for x in data[(0), :] if x == 1.0])
delimiter
sorted(my_tuple, key=lambda tup: tup[1])
delimiter
ftp.quit()
delimiter
plt.show()
delimiter
xs.sort(key=len)
delimiter
mylist.sort()
delimiter
[sum(x, []) for x in zip(L1, L2)]
delimiter
all_keys = set().union(*(list(d.keys()) for d in mylist))
delimiter
lst.sort(reverse=True)
delimiter
workbook.close()
delimiter
list(sorted(iter))[-10]
delimiter
i = 5 + Tup()[0]
delimiter
numpy.concatenate((a, b))
delimiter
driver.quit()
delimiter
list(dict.items())
delimiter
lst = [[] for _ in range(a)]
delimiter
[(1, 4), (4, 8), (8, 10)]
delimiter
li = [x for x in li if condition(x)]
delimiter
zip(*heapq.nlargest(2, enumerate(a), key=operator.itemgetter(1)))[0]
delimiter
[mystr[i:i + 8] for i in range(0, len(mystr), 8)]
delimiter
sorted_list_of_values = [item[1] for item in sorted_list_of_keyvalues]
delimiter
logging.Logger.__init__(self, name, logging.DEBUG)
delimiter
StreetCat._meta.get_parent_list()
delimiter
plt.show()
delimiter
B = np.split(A, np.where(A[:, (0)] == 0.0)[0][1:])
delimiter
plt.show()
delimiter
list(dict(((x[0], x[1]), x) for x in L).values())
delimiter
numpy.nonzero(numpy.in1d(a2, a1))[0]
delimiter
list(zip(s[::2], s[1::2]))
delimiter
contour = cv2.convexHull(contour)
delimiter
sys.stdout.flush()
delimiter
l = [(x * 2) for x in l]
delimiter
list(your_iterator)
delimiter
new_dict = dict(zip(keys, values))
delimiter
d2 = dict((k, f(v)) for k, v in list(d1.items()))
delimiter
[dict(zip(r.dtype.names, x)) for x in r]
delimiter
[x for x in L if x >= 0]
delimiter
plt.show()
delimiter
[0, 1, 0, 1, 0, 0, 1, 0]
delimiter
time.sleep(2)
delimiter
app.mainloop()
delimiter
random.shuffle(a)
delimiter
isinstance(s, str)
delimiter
plt.show()
delimiter
data[(np.where(masks)[1]), :]
delimiter
next((x for x in range(10) if x > 5))
delimiter
YourApp().run()
delimiter
a = datetime.datetime.now().year
delimiter
[row[2:5] for row in LoL[1:4]]
delimiter
cursor.close()
delimiter
rates.sub(treas.iloc[:, (0)], axis=0).dropna()
delimiter
values = [d[k] for k in a]
delimiter
csv_file.close()
delimiter
d2 = {k: f(v) for k, v in list(d1.items())}
delimiter
sorted(list(mydict.values()), reverse=True)
delimiter
plt.show()
delimiter
mylist[0][0]
delimiter
multi_db = True
delimiter
lst.sort(key=lambda x: (-x[2], x[0]))
delimiter
Gtk.main()
delimiter
f.close()
delimiter
logging.disable(logging.NOTSET)
delimiter
plt.show()
delimiter
[len(x) for x in a[0]]
delimiter
ax.auto_scale_xyz([0, 500], [0, 500], [0, 0.15])
delimiter
plt.show()
delimiter
print(etree.tostring(f, pretty_print=True))
delimiter
[item for sublist in [[i[1:], [i[0]]] for i in l] for item in sublist]
delimiter
l = [(ord(a) ^ ord(b)) for a, b in zip(s1, s2)]
delimiter
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
df.set_index(s.index).sort()
delimiter
plt.show()
delimiter
circles = cv2.HoughCircles(gray, cv.CV_HOUGH_GRADIENT)
delimiter
pd.Series(np.concatenate([a, b]))
delimiter
df.to_csv()
delimiter
C = [i for i in A if i not in B]
delimiter
sum(map(sum, a))
delimiter
list(range(max(x[0], y[0]), min(x[-1], y[-1]) + 1))
delimiter
sorted(((v, k) for k, v in d.items()), reverse=True)
delimiter
transaction.commit()
delimiter
proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
delimiter
np.resize([1, -1], 11)
delimiter
plt.show()
delimiter
df.plot(x=df.index.astype(str))
delimiter
[(x - y) for x, y in zip(a[1:], a)]
delimiter
mylist = list(range(10))
delimiter
plt.show()
delimiter
list(zip(keys, values))
delimiter
plt.colorbar()
delimiter
set([1, 2, 2]).issubset([1, 2])
delimiter
plt.show()
delimiter
list(itertools.chain(*[item.split() for item in lst]))
delimiter
pygame.display.flip()
delimiter
np.isnan(a).any(1)
delimiter
models.PositiveSmallIntegerField(default=0)
delimiter
set(a).intersection(b, c)
delimiter
plt.show()
delimiter
al_arrays = [[l[i:i + 2] for i in range(0, len(l.strip()), 2)] for l in In_f]
delimiter
sorted(dct, key=dct.get)
delimiter
x, y = zip(*[(i, -1 * j) for i, j in enumerate(range(10))])
delimiter
np.where(np.any(a == 2, axis=0) & np.any(a == 5, axis=0))
delimiter
ax.set_ylim([0, 5])
delimiter
gpb = float(eval(input()))
delimiter
splitlists[-1].append(splitlists[0][0])
delimiter
plt.show()
delimiter
a = [a[i] for i in range(1, len(a)) if a[i][1] > a[i - 1][1]]
delimiter
wb.save(file)
delimiter
[i for i, (a, b) in enumerate(zip(vec1, vec2)) if a == b]
delimiter
driver = webdriver.Firefox()
delimiter
list(SomeModel.objects.filter(id=instance.id).values())[0]
delimiter
y = list(x)
delimiter
np.where(np.triu(np.ones(A.shape[0], dtype=bool), 1), A.T, A)
delimiter
f.close()
delimiter
list(dict.keys())[0]
delimiter
random.choice(string.ascii_letters[0:4])
delimiter
df.groupby(df.columns, axis=1).agg(numpy.max)
delimiter
numpy.array([v for v in vals if len(set(v)) == len(v)])
delimiter
np.where(~a.any(axis=1))
delimiter
listOfLists = [[] for i in range(N)]
delimiter
plt.show()
delimiter
df = pd.read_pickle(file_name)
delimiter
workbook.close()
delimiter
plt.show()
delimiter
[1, 1, 2, 2]
delimiter
sorted(trial_list, key=lambda x: trial_dict[x])
delimiter
app.run()
delimiter
plt.hist(x, bins=list(range(-4, 5)))
delimiter
np.array([j for i in arr for j in np.arange(i - 0.2, i + 0.25, 0.1)])
delimiter
CB.lines[0].set_linewidth(10)
delimiter
sum(map(sum, my_list))
delimiter
handler.setLevel(logging.DEBUG)
delimiter
print(np.split(a, b, axis=0))
delimiter
app.run(debug=True)
delimiter
np.diag(np.fliplr(array))
delimiter
[x[0] for x, y in zip(l1, l2) if x[0] == y[0]]
delimiter
ax.yaxis.set_major_formatter(formatter)
delimiter
logger = logging.getLogger(__name__)
delimiter
plt.show()
delimiter
tuple(l)
delimiter
writer.writerows([val])
delimiter
json.dump(data, f)
delimiter
a[i:j] = sorted(a[i:j])
delimiter
len(set(new_words))
delimiter
df = pd.concat([df1, df2], ignore_index=True)
delimiter
fig.legend(lines, labels, loc=(0.5, 0), ncol=5)
delimiter
[i for i in a if i not in b]
delimiter
f.close()
delimiter
[row for row in listOfLists if row[x].isdigit()]
delimiter
plt.show()
delimiter
set(data1).intersection(data2)
delimiter
time.sleep(1)
delimiter
__init__.py
delimiter
df.values.max()
delimiter
(f(x) for x in list)
delimiter
df.drop(grouped.get_group(group_name).index)
delimiter
ax.xaxis.set_major_formatter(plt.NullFormatter())
delimiter
sys.stdout.write(msg)
delimiter
workbook.close()
delimiter
np.kron(np.eye(n), a)
delimiter
df[0].values.tolist()
delimiter
plt.show()
delimiter
[(index, row.index(val)) for index, row in enumerate(mymatrix) if val in row]
delimiter
plt.show()
delimiter
np.take(a, idx, axis=1)
delimiter
foo(n - 1) + [1]
delimiter
zip(*data)
delimiter
ssh.close()
delimiter
df1.apply(lambda x: x.asof(df2.index))
delimiter
c = dict(list(a.items()) + list(b.items()))
delimiter
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
delimiter
numpy.array([v for v in vals if len(numpy.unique(v)) == len(v)])
delimiter
[(0, 0), (0, 1), (1, 0), (1, 1)]
delimiter
[key for key, values in list(rev_multidict.items()) if len(values) > 1]
delimiter
cv2.waitKey()
delimiter
plt.show()
delimiter
reversed(x)
delimiter
count = sum(len(v) for v in d.values())
delimiter
print(list(set(chain(*array))))
delimiter
plt.show()
delimiter
s1.dropna(inplace=True)
delimiter
plt.show()
delimiter
a, b = (int(x) for x in s.split())
delimiter
listener.close()
delimiter
plt.show()
delimiter
sys.exit()
delimiter
matplotlib.pyplot.scatter(x, y)
delimiter
rows_list.sort(key=operator.itemgetter(0, 1, 2))
delimiter
round(1.679, 2)
delimiter
ax = plt.gca()
delimiter
my_logger.setLevel(logging.DEBUG)
delimiter
[name for name in starring if name.strip()]
delimiter
now = datetime.datetime.now()
delimiter
{i: np.where(arr == i)[0] for i in np.unique(arr)}
delimiter
func(*r)
delimiter
plt.show()
delimiter
plt.show()
delimiter
plt.show()
delimiter
df.head(10)
delimiter
len(my_list)
delimiter
isinstance()
delimiter
root.mainloop()
delimiter
S2[:len(S1)] == S1
delimiter
Counter(v for sublist in list(d.values()) for v in sublist)
delimiter
Hsub = H[1:-1, 1:-1]
delimiter
server.serve_forever()
delimiter
set([a, b, c, a])
delimiter
np.where(x == 5)
delimiter
map(ord, hex_data)
delimiter
time.sleep(1)
delimiter
[y for y in x for x in data]
delimiter
tornado.ioloop.IOLoop.instance().start()
delimiter
plt.show()
delimiter
[list(zip(a, p)) for p in permutations(b)]
delimiter
print([y for x in l for y in (x, x + 1)])
delimiter
print(dict(zip(keys, [list(i) for i in zip(*data)])))
delimiter
any(i.isdigit() for i in s)
delimiter
list(range(1, 6)) + list(range(15, 20))
delimiter
a = [0] * 10
delimiter
bucket.copy_key(new_key, source_bucket, source_key)
delimiter
window.destroy()
delimiter
root.mainloop()
delimiter
print([x[0] for x in data])
delimiter
clf.fit(X, y)
delimiter
c[:] = b
delimiter
pdb.set_trace()
delimiter
a.argmax(axis=0)
delimiter
list = [[6, 5, 4], [4, 5, 6]]
delimiter
plt.show()
delimiter
df[self.target].str.contains(t).any()
delimiter
User.objects.filter(userprofile__level__lte=0)
delimiter
ma.array(np.resize(b, a.shape[0]), mask=[False, False, True])
delimiter
len(set(a))
delimiter
a = list(set(a))
delimiter
list(itertools.product(*s))
delimiter
set(d1.items()).issubset(set(d2.items()))
delimiter
db.session.query(Printer).all()
delimiter
plt.draw()
delimiter
plt.show()
delimiter
p.wait()
delimiter
cols = list(df.columns.values)
delimiter
plt.show()
delimiter
firstpart, secondpart = string[:len(string) / 2], string[len(string) / 2:]
delimiter
os.rename(file, new_name)
delimiter
my_model.save()
delimiter
match.group(1)
delimiter
img.save()
delimiter
plt.show()
delimiter
dict((m.get(k, k), v) for k, v in list(d.items()))
delimiter
lst.sort()
delimiter
[x[0] for x in listD[2]]
delimiter
value.isdigit()
delimiter
[tuple(l) for l in nested_lst]
delimiter
my_array[:, ([0, 1])] = my_array[:, ([1, 0])]
delimiter
s.reset_index().drop(1, axis=1)
delimiter
new_array = [x for x in main_array if x not in second_array]
delimiter
x = all((a, b, c, d, e, f))
delimiter
python - -version
delimiter
cursor.commit()
delimiter
random.seed()
delimiter
[(a + b) for a, b in zip(s[::2], s[1::2])]
delimiter
test[numpy.apply_along_axis(lambda x: x[1] in wanted, 1, test)]
delimiter
numpy.apply_along_axis(sum, 1, X)
delimiter
max_index = my_list.index(max_value)
delimiter
v.dot(np.rollaxis(a, 2, 1))
delimiter
print(sys.path)
delimiter
pygame.display.flip()
delimiter
x = [i for i in x if len(i) == 2]
delimiter
[word for word in words if any(not char.isdigit() for char in word)]
delimiter
plt.show()
delimiter
[(x + y) for x, y in zip(L1, L2)]
delimiter
out = p.communicate()
delimiter
[(e in lestring) for e in lelist if e in lestring]
delimiter
plt.figure(figsize=(6, 6))
delimiter
plt.draw()
delimiter
datetime.datetime.fromtimestamp(1284286794)
delimiter
k, v = next(iter(list(d.items())))
delimiter
plt.legend(numpoints=1)
delimiter
nested_list = [[s.upper() for s in xs] for xs in nested_list]
delimiter
o.save()
delimiter
print({word: word_list.count(word) for word in word_list})
delimiter
pdf.close()
delimiter
print(Event.objects.filter(date__lt=datetime.datetime.now()).delete())
delimiter
[elem for x in list for elem in (x, 0)][:-1]
delimiter
list(itertools.product(*list(mydict.values())))
delimiter
[int(n) for n in bin(21)[2:].zfill(8)]
delimiter
{key: list(set(a[key]).difference(b.get(key, []))) for key in a}
delimiter
sys.exit(1)
delimiter
pd.to_datetime(pd.Series(date_stngs))
delimiter
list(next(it) for _ in range(n))
delimiter
plt.show()
delimiter
plt.show()
delimiter
result.extend(item)
delimiter
ii = np.where(a == 4)
delimiter
timestamp = (dt - datetime(1970, 1, 1)) / timedelta(seconds=1)
delimiter
plt.show()
delimiter
array[itemindex[0][1]][itemindex[1][1]]
delimiter
plt.show()
delimiter
Person.objects.filter(**kwargs)
delimiter
line = f.readline()
delimiter
myfile.write(c_uncompData_p[:c_uncompSize])
delimiter
df[df.index.map(lambda x: x[0] in stk_list)]
delimiter
plt.show()
delimiter
[(2, 1, 1), (1, 2, 1), (1, 1, 2)]
delimiter
isinstance(s, str)
delimiter
set(L[:4])
delimiter
plt.show()
delimiter
f.close()
delimiter
ind[np.argsort(a[ind])]
delimiter
df1.reset_index()
delimiter
os.path.dirname(sys.executable)
delimiter
plt.draw()
delimiter
transmission_array.extend(zero_array)
delimiter
all(x == mylist[0] for x in mylist)
delimiter
plt.show()
delimiter
a[:] = [x for x in a if x <= 2]
delimiter
json.dumps(list)
delimiter
plt.show()
delimiter
myList = sorted(set(myList))
delimiter
a[0:1][0][0] = 5
delimiter
df.A.apply(lambda x: pd.Series(1, x)).fillna(0).astype(int)
delimiter
zip(a, b, c)
delimiter
plt.scatter(list(range(len(y))), y, c=z, cmap=cm.hot)
delimiter
app.run(debug=True)
delimiter
df.loc[ii, cols]
delimiter
plt.show()
delimiter
np.exp(-x)
delimiter
print(json.dumps(foo))
delimiter
{k: (v() if callable(v) else v) for k, v in a.items()}
delimiter
df.drop(x[x].index)
delimiter
hehe()
delimiter
Book.objects.create(**d)
delimiter
plt.show()
delimiter
dist = math.hypot(x2 - x1, y2 - y1)
delimiter
1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0
delimiter
sorted([-5, 2, 1, -8], key=abs)
delimiter
out = np.concatenate(input_list).ravel().tolist()
delimiter
[(i, j) for i, j in zip(a, x) if i >= 4]
delimiter
ax1.set_xticks([int(j) for j in range(-4, 5)])
delimiter
datetime.datetime(d.year, d.month, d.day)
delimiter
s = s[:pos] + s[pos + 1:]
delimiter
sorted(d, key=d.get)
delimiter
np.cumsum(a, axis=1, out=a)
delimiter
sorted(a, key=len)
delimiter
pd.concat((df1, df2), axis=1)
delimiter
len(d[obj]) == 2 and isinstance(d[obj][0], int) and isinstance(d[obj][1], int)
delimiter
inspect.getfile(C.__class__)
delimiter
sorted(x) == sorted(y)
delimiter
from_date = from_date.replace(hour=0, minute=0, second=0, microsecond=0)
delimiter
perm = sorted(range(len(foo)), key=lambda x: foo[x])
delimiter
print(os.path.dirname(os.path.abspath(sys.argv[0])))
delimiter
pd.concat(series_list, axis=1)
delimiter
sum([x for x in list if isinstance(x, (int, float))])
delimiter
numpy.where(a <= 2, a, 2)
delimiter
pd.DataFrame(s).T
delimiter
[[4], [5, 5], [6, 6, 6]]
delimiter
i = np.indices(B.shape)[0]
delimiter
a[-2:] + a[:-2]
delimiter
re.findall(pat, s)
delimiter
d = dict([(y, x) for x, y in enumerate(t)])
delimiter
x = Dish.query.filter(Dish.restaurants.any(name=name)).all()
delimiter
driver.implicitly_wait(10)
delimiter
dict((d1[key], value) for key, value in list(d.items()))
delimiter
np.tile(b, (2, 2, 2))
delimiter
result = [d[key] for key in d if key.startswith(query)]
delimiter
zip(*it)
delimiter
y = numpy.unique(x)
delimiter
set(x[0] for x in zip(a, a[1:]) if x[0] == x[1])
delimiter
sys.exit(0)
delimiter
root.mainloop()
delimiter
bigdata = pd.concat([data1, data2], ignore_index=True)
delimiter
posting_date = models.DateTimeField(auto_now_add=True)
delimiter
d = dict((m.get(k, k), v) for k, v in list(d.items()))
delimiter
app.run()
delimiter
np.kron(a, np.ones((B, B), a.dtype))
delimiter
a = zip(list(range(10)), list(range(10)))
delimiter
plt.show()
delimiter
f.write(bytes((i,)))
delimiter
server.serve_forever()
delimiter
plt.show()
delimiter
random.choice(mylist)
delimiter
a[i:j].sort()
delimiter
some_action.triggered.connect(functools.partial(some_callback, param1, param2))
delimiter
json.dump([], f)
delimiter
self.assertTrue(issubclass(QuizForm, forms.Form))
delimiter
session.query(Shots).filter_by(event_id=event_id).order_by(asc(Shots.user_id))
delimiter
f.write(hex(i))
delimiter
decimal.Decimal(str(random.random()))
delimiter
next(g)
delimiter
OrderedDict(sorted(list(d.items()), key=d.get))
delimiter
plt.show()
delimiter
sorted(a, key=lambda x: b.index(x[0]))
delimiter
plt.show()
delimiter
plt.show()
delimiter
db.commit()
delimiter
plt.xlim([0, bins.size])
delimiter
A.sum(axis=0, skipna=True)
delimiter
df.groupby(df.index).mean()
delimiter
numpy.argwhere(numpy.in1d(a, b))
delimiter
plt.show()
delimiter
datetime.datetime.utcfromtimestamp(1284286794)
delimiter
a.nonzero()
delimiter
bool(value)
delimiter
plt.show()
delimiter
time.sleep(1)
delimiter
set(a).intersection(b)
delimiter
urllib.request.install_opener(opener)
delimiter
plt.show()
delimiter
[[word, len(word), word.upper()] for word in sent]
delimiter
logger.setLevel(logging.DEBUG)
delimiter
pdb.set_trace()
delimiter
np.array([[int(i[0], 2)] for i in a])
delimiter
plt.show()
delimiter
[str(item[0]) for item in x if item and item[0]]
delimiter
df = df.reset_index()
delimiter
products = Product.objects.filter(categories__pk=1).select_related()
delimiter
{k: v for k, v in list(points.items()) if v[0] < 5 and v[1] < 5}
delimiter
f.close()
delimiter
json.dumps(c, default=lambda o: o.__dict__)
delimiter
sck.setproxy()
delimiter
list(range(N, -1, -1)) is better
delimiter
print(tuple(my_list))
delimiter
set(aa.items()).intersection(set(bb.items()))
delimiter
rows = [i for i in range(0, len(a)) if a[i][0] == value]
delimiter
HttpResponse(status=500)
delimiter
plt.show()
delimiter
plt.show()
delimiter
[(x + i * y) for i in range(1, 10)]
delimiter
len(df.columns)
delimiter
np.savez(tmp, *getarray[:10])
delimiter
sys.stdin.read(1)
delimiter
np.hstack([np.arange(i, j) for i, j in zip(start, stop)])
delimiter
app.run(threaded=True)
delimiter
n = int(input())
delimiter
A.ravel()[:A.shape[1] ** 2:A.shape[1] + 1]
delimiter
[(x + y) for x in l2 for y in l1]
delimiter
plt.show()
delimiter
time.sleep(spacing)
delimiter
plt.show()
delimiter
np.fromiter(a, dtype=np.float)
delimiter
~np.isnan(a).any(1)
delimiter
matplotlib.pyplot.show()
delimiter
dict(set.intersection(*(set(d.items()) for d in dicts)))
delimiter
s * (a + b) == s * a + s * b
delimiter
some_func(**mydict)
delimiter
my_list = sorted(list(dict.items()), key=lambda x: x[1])
delimiter
c = a.flatten()
delimiter
any(i in a for i in b)
delimiter
log.start()
delimiter
sum(x * y for x, y in zip(a, b))
delimiter
[0, 1, 0, 1, 2, 5, 6, 7, 8, 9]
delimiter
round(random.uniform(min_time, max_time), 1)
delimiter
A.ravel()[i:max(0, A.shape[1] - i) * A.shape[1]:A.shape[1] + 1]
delimiter
app.run()
delimiter
print([i for i in range(5)])
delimiter
df
delimiter
plt.show()
delimiter
logging.basicConfig(level=logging.WARNING)
delimiter
plt.show()
delimiter
plt.show()
delimiter
itertools.repeat(0, 10)
delimiter
ax.set_xlim([0, 100])
delimiter
{k: (float(d2[k]) / d1[k]) for k in d1.keys() & d2}
delimiter
dct[key].append(some_value)
delimiter
[([k] + [(sum(x) / float(len(x))) for x in zip(*v)]) for k, v in list(d.items())]
delimiter
[ord(c) for c in s]
delimiter
os.makedirs(newpath)
delimiter
results.sort(key=lambda r: r.person.birthdate)
delimiter
response = urllib.request.urlopen(req, json.dumps(data))
delimiter
screen_height = root.winfo_screenheight()
delimiter
a, b = np.sin(x), np.cos(x)
delimiter
form.save()
delimiter
b = a[:-1] + (a[-1] * 2,)
delimiter
plt.show()
delimiter
a = [str(wi) for wi in wordids]
delimiter
print(np.unravel_index(result.argmax(), result.shape))
delimiter
fcntl.ioctl(s.fileno(), SIOCSIFFLAGS, ifr)
delimiter
dir()
delimiter
auth.set_access_token(access_token, access_token_secret)
delimiter
zip(*[[5, 7], [6, 9], [7, 4]])
delimiter
df2 = df.astype(float)
delimiter
img.save()
delimiter
root.mainloop()
delimiter
d[i[0]] = int(i[1])
delimiter
foo[:, (1)]
delimiter
datetime.combine(date.today(), time()) + timedelta(hours=2)
delimiter
root.mainloop()
delimiter
a = np.array(a, dtype=np.float128)
delimiter
[[random.random() for i in range(N)] for j in range(N)]
delimiter
c = [(x | y) for x, y in zip(a, b)]
delimiter
input()
delimiter
print(list(enumerate(words)))
delimiter
pdb.set_trace()
delimiter
cnxn.commit()
delimiter
print(os.path.join(dirpath, filename))
delimiter
cursor.execute(query, data)
delimiter
root.quit()
delimiter
encoded_string = base64.b64encode(image_file.read())
delimiter
[(i, j) for i in range(10) for j in range(i)]
delimiter
browser = webdriver.Safari(quiet=True)
delimiter
results = [t[1] for t in mylist if t[0] == 10]
delimiter
driver.quit()
delimiter
zip(iter(x.items()), iter(y.items()))
delimiter
heapq.nlargest(6, your_list, key=itemgetter(1))
delimiter
plt.show()
delimiter
os.path.relpath(subdir2, subdir1)
delimiter
[[], [], [], [], [], [], [], [], [], []]
delimiter
sys.stdout.flush()
delimiter
df.ix[idx]
delimiter
setattr(self, key, value)
delimiter
[l[i::5] for i in range(5)]
delimiter
operator.itemgetter(*b)(a)
delimiter
[(m.start(0), m.end(0)) for m in re.finditer(pattern, string)]
delimiter
any(map(eval, my_list))
delimiter
df.values.T.tolist()
delimiter
[i for i in range(len(s1)) if s1[i] != s2[i]]
delimiter
[list(e) for e in zip(*[fl[i::2] for i in range(2)])]
delimiter
plt.show()
delimiter
l[1:]
delimiter
y[argrelmax(y)[0]]
delimiter
root.mainloop()
delimiter
cv2.waitKey()
delimiter
plt.show()
delimiter
my_list.sort()
delimiter
a[~(a == 5).any(1)]
delimiter
dict([(m.get(k, k), v) for k, v in list(d.items())])
delimiter
forminstance.is_valid()
delimiter
plt.show()
delimiter
socket.gethostname()
delimiter
np.repeat(a, [2, 2, 1], axis=0)
delimiter
done = [(i, x) for i in [a, b, c, d]]
delimiter
plt.setp(axs[1].xaxis.get_majorticklabels(), rotation=70)
delimiter
array([0, 100, 100, 100, 4, 5, 100, 100, 100, 9])
delimiter
plt.show()
delimiter
unique_a = np.unique(b).view(a.dtype).reshape(-1, a.shape[1])
delimiter
[i for i, x in enumerate(testlist) if x == 1]
delimiter
dict((key_from_value(value), value) for value in values)
delimiter
p.start()
delimiter
self.submenu2.setVisible(False)
delimiter
array([0, 0, 2, 1, 0, 1])
delimiter
np.vstack((np.cos(theta), np.sin(theta))).T
delimiter
pdb.set_trace()
delimiter
equal([1, 2], a).all(axis=1).any()
delimiter
[v for k, v in self.items() if v == value]
delimiter
g = df.groupby(df.index // 2)
delimiter
len(set(d.values())) == 1
delimiter
min(L, key=lambda theta: angular_distance(theta, 1))
delimiter
img.seek(1)
delimiter
l = [(x * x) for x in range(0, 10)]
delimiter
plt.show()
delimiter
plt.show()
delimiter
dictionary = dict([(List[i], List[i + 1]) for i in range(0, len(List), 2)])
delimiter
plt.show()
delimiter
df.applymap(time.isoformat).apply(pd.to_timedelta)
delimiter
df.groupby(by=df.columns, axis=1).apply(gf)
delimiter
l = map(lambda x: x * 2, l)
delimiter
new_list = [seq[0] for seq in yourlist]
delimiter
my_dictionary = {k: f(v) for k, v in list(my_dictionary.items())}
delimiter
app.run(port=port)
delimiter
map(lambda x: x + 1, L)
delimiter
sys.stdout.flush()
delimiter
df_col_merged = pd.concat([df_a, df_b], axis=1)
delimiter
s[::-1]
delimiter
ip.iptype()
delimiter
a[list(np.ogrid[[slice(x) for x in a.shape]][:-1]) + [i]]
delimiter
plt.show()
delimiter
self.layout.addWidget(self.button)
delimiter
img.save(sys.argv[2])
delimiter
db.session.commit()
delimiter
list(chain.from_iterable(zip(list_a, list_b)))
delimiter
{i: j for i, j in zip(list(range(1, 5)), list(range(7, 11)))}
delimiter
series = pd.Series(list(range(20)), dtype=float)
delimiter
plt.show()
delimiter
results = cursor.fetchall()
delimiter
m[m.mask]
delimiter
x[np.where(x == 5)]
delimiter
int(time.mktime(dt.timetuple()))
delimiter
plt.show()
delimiter
weekdays = models.PositiveIntegerField(choices=WEEKDAYS)
delimiter
clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
delimiter
{k: v for k, v in list(mydict.items()) if k >= 6}
delimiter
plt.show()
delimiter
plt.show()
delimiter
app.run()
delimiter
[(x * 2 if x % 2 == 0 else x) for x in a_list]
delimiter
browser.close()
delimiter
[(x * 1.0 / y) for x, y in zip(a, b)]
delimiter
pygame.display.update()
delimiter
root.mainloop()
delimiter
root.mainloop()
delimiter
x = [x for x in b.split() if x in a.split()]
delimiter
wx.Frame.__init__(self, parent)
delimiter
multiprocessing.cpu_count()
delimiter
plt.show()
delimiter
map(self.queryQ.put, self.getQueries())
delimiter
sorted(s, key=lambda x: int(x[-1]))
delimiter
func(1, *args, **kwargs)
delimiter
float(a)
delimiter
list(globals().keys())[2]
delimiter
d = dict.fromkeys(string.ascii_lowercase, 0)
delimiter
root.mainloop()
delimiter
plt.show()
delimiter
cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
delimiter
plt.show()
delimiter
result = [(x + dx, y + dy) for x, y in points for dx, dy in offsets]
delimiter
array([[True, True], [True, True]], dtype=bool)
delimiter
gca().xaxis.set_major_formatter(FuncFormatter(formatter))
delimiter
list(d.keys())
delimiter
min([x[::-1] for x in a])[::-1]
delimiter
plt.show()
delimiter
x = (x + y) % 48
delimiter
[ord(x) for x in letters]
delimiter
plt.show()
delimiter
zip((1, 2), (40, 2), (9, 80))
delimiter
r = dict((v, k) for k, v in d.items())
delimiter
self._bar()
delimiter
plt.show()
delimiter
plt.show()
delimiter
longest_strings = [s for s in stringlist if len(s) == maxlength]
delimiter
print([(x[0], x[-1]) for x in l])
delimiter
time.sleep(1)
delimiter
tables = cursor.fetchall()
delimiter
df.loc[(df == 1).any(axis=1)]
delimiter
newsampledata.reindex(newsampledata.index.repeat(n)).reset_index(drop=True)
delimiter
plt.show()
delimiter
time.sleep(1)
delimiter
a.sort(key=Counter(a).get, reverse=True)
delimiter
len(os.walk(path).next()[2])
delimiter
df.dtypes
delimiter
results = sorted(list(results.items()), key=lambda x: x[1], reverse=True)
delimiter
first, rest = l[0], l[1:]
delimiter
sorted((sorted(item) for item in data), key=lambda x: (len(x), x))
delimiter
sorted(os.listdir(whatever_directory))
delimiter
[i for i in x if 60 < i < 70]
delimiter
lst.sort()
delimiter
[(x[i] + x[i + 1]) for i in range(0, len(x), 2)]
delimiter
plt.show()
delimiter
self.grid_rowconfigure(1, weight=1)
delimiter
plt.show()
delimiter
sys.exit(app.exec_())
delimiter
json.loads(s)
delimiter
driver.quit()
delimiter
plt.show()
delimiter
[v[0] for v in sorted(iter(d.items()), key=lambda k_v: (-k_v[1], k_v[0]))]
delimiter
fu_list = [(k, fus_d.get(k), fus_s.get(k)) for k in fus_d.keys() | fus_s]
delimiter
functools.reduce(np.logical_or, (x, y, z))
delimiter
d = {int(k): [int(i) for i in v] for k, v in list(d.items())}
delimiter
cursor.execute(sql)
delimiter
singleitem = next(iter(mylist))
delimiter
sys.exit()
delimiter
[[(k, x[k], y[k]) for k in x if x[k] != y[k]] for x, y in pairs if x != y]
delimiter
linalg.svd(a[:, :, (1)])
delimiter
print(dict(new_dict))
delimiter
[int(s) for s in str.split() if s.isdigit()]
delimiter
np.moveaxis(np.indices((4, 5)), 0, -1)
delimiter
list({e.id: e for e in somelist}.values())
delimiter
plt.show()
delimiter
time.sleep(0.1)
delimiter
max(A, key=A.get)
delimiter
a[i, j] = x
delimiter
app.run()
delimiter
model.fit([X])
delimiter
plt.show()
delimiter
[dict(zip(keys, a)) for a in zip(values[::2], values[1::2])]
delimiter
[item for sublist in l for item in sublist]
delimiter
[item for sublist in list_of_lists for item in sublist if valid(item)]
delimiter
plt.show()
delimiter
df.index
delimiter
plt.show()
delimiter
f.write(doc.render())
delimiter
plt.show()
delimiter
shutil.copyfileobj(from_file, to_file)
delimiter
main()
delimiter
df.apply(lambda x: sum(x.isnull().values), axis=1)
delimiter
{k: v for k, v in points.items() if v[0] < 5 and v[1] < 5}
delimiter
myFunc(lambda a, b: iadd(a, b))
delimiter
pl.show()
delimiter
main()
delimiter
s.getsockname()[0]
delimiter
array([4, 5, 5, 6, 6, 6])
delimiter
os.killpg(self.process.pid, signal.SIGTERM)
delimiter
fh.close()
delimiter
list(range(0, 100, 5))
delimiter
[x for x in foo]
delimiter
plt.show()
delimiter
[x for x, y, z in G]
delimiter
b = np.delete(a, i, axis=0)
delimiter
root.mainloop()
delimiter
my_list = [col for row in matrix for col in row]
delimiter
list(set(dict_a.values()) & set(dict_b.values()))
delimiter
a = datetime.date.today().year
delimiter
map(list, list(totals.items()))
delimiter
np.argmax(np.max(x, axis=1))
delimiter
cursor.close()
delimiter
my_list = list(set(my_list))
delimiter
plt.show()
delimiter
f.close()
delimiter
Student.objects.filter(studentgroup__level__pk=1)
delimiter
self.window.keypad(1)
delimiter
a.flatten()
delimiter
files.sort(key=lambda x: os.path.getmtime(x))
delimiter
df[df.columns[2:5]]
delimiter
Farm.objects.filter(tree__in=TreeQuerySet)
delimiter
t.start()
delimiter
plt.show()
delimiter
df.replace(0, np.nan).bfill(1).iloc[:, (0)]
delimiter
root.mainloop()
delimiter
cherrypy.quickstart(Root())
delimiter
p.terminate()
delimiter
set([1])
delimiter
plt.draw()
delimiter
sys.stdout.flush()
delimiter
print(calendar.monthrange(now.year, now.month)[1])
delimiter
client.transport.write(message)
delimiter
cell.value = statN
delimiter
[row[i] for row in matrix]
delimiter
[(a - int(a)) for a in l]
delimiter
cbar.ax.tick_params(labelsize=10)
delimiter
vulnerability = models.ForeignKey(Vuln)
delimiter
[[[(0) for _ in range(n)] for _ in range(n)] for _ in range(n)]
delimiter
plt.show()
delimiter
A = np.squeeze(np.asarray(M))
delimiter
root.mainloop()
delimiter
pd.Series([np.array(e)[~np.isnan(e)] for e in x.values])
delimiter
curses.endwin()
delimiter
User.objects.filter(Q(income__gte=5000) | Q(income__isnull=True))
delimiter
random.choice(string.letters)
delimiter
[dict(zip(keys, values[i:i + n])) for i in range(0, len(values), n)]
delimiter
(local_dt - datetime.datetime.utcfromtimestamp(timestamp)).seconds
delimiter
res = np.zeros((arr.shape[0], m), arr.dtype)
delimiter
np.where(np.in1d(values, searchvals))
delimiter
logger.setLevel(logging.DEBUG)
delimiter
dictionary = dict(zip(List[0::2], List[1::2]))
delimiter
data = {tuple(sorted(item)) for item in lst}
delimiter
list1 = [i for i in range(n)]
delimiter
df.apply(lambda x: np.all(x == 0))
delimiter
{v[0]: data[v[0]] for v in list(by_ip.values())}
delimiter
sys.stdout.flush()
delimiter
Kid.objects.filter(id__in=toy_owners)
delimiter
os.stat(path).st_birthtime
delimiter
data = [[int(v) for v in line.split()] for line in lines]
delimiter
[list(l[0]) for l in mylist]
delimiter
mySet = set(itertools.product(list(range(1, 51)), repeat=2))
delimiter
json.dumps(s)
delimiter
sum(v[0] for v in list(d.values())) / float(len(d))
delimiter
datetime.datetime.combine(dateobject, datetime.time.min)
delimiter
numpy.array(list(c))
delimiter
hash(frozenset(list(my_dict.items())))
delimiter
gems = pygame.sprite.Group()
delimiter
original[::-1]
delimiter
root.mainloop()
delimiter
sum([(x * y) for x, y in zip(*lists)])
delimiter
result = np.zeros(b.shape)
delimiter
c = [tuple(x + b[i] for i, x in enumerate(y)) for y in a]
delimiter
keys, values = zip(*list(dictionary.items()))
delimiter
db.commit()
delimiter
dict([i for i in iter(d.items()) if i[0] in validkeys])
delimiter
plt.colorbar()
delimiter
bin(10)
delimiter
s.split()
delimiter
z = dict(list(x.items()) + list(y.items()))
delimiter
plt.show()
delimiter
plt.show()
delimiter
print(sys.path)
delimiter
sys.stdout.flush()
delimiter
somelist = [x for x in somelist if not determine(x)]
delimiter
plt.show()
delimiter
df2.reset_index()
delimiter
len(df.index)
delimiter
plt.show()
delimiter
cursor = cnx.cursor(buffered=True)
delimiter
obj = json.loads(string)
delimiter
np.corrcoef(x[0:len(x) - 1], x[1:])[0][1]
delimiter
rows.sort(key=itemgetter(1), reverse=True)
delimiter
sorted(lst, key=lambda x: (c[x], x), reverse=True)
delimiter
pd.DataFrame(s).T
delimiter
[i for i in range(10) if i % 2 == 0]
delimiter
__init__.py
delimiter
t.start()
delimiter
plt.gca().xaxis.set_major_formatter(FixedFormatter(ll))
delimiter
thread.exit()
delimiter
d = {k: frozenset(v) for k, v in list(d.items())}
delimiter
root.mainloop()
delimiter
sorted(data, key=itemgetter(1))
delimiter
print(json.dumps(data, indent=2, sort_keys=True))
delimiter
reactor.run()
delimiter
L = [L[i] for i in ndx]
delimiter
yourdate = dateutil.parser.parse(datestring)
delimiter
[1, 2]
delimiter
cv2.waitKey(0)
delimiter
x = np.maximum(x, y)
delimiter
list(flatten(elements))
delimiter
time.sleep(1)
delimiter
f.close()
delimiter
self._socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
delimiter
word[1:]
delimiter
my_handler = logging.StreamHandler(sys.stdout)
delimiter
print(date.today().year + 1)
delimiter
df.apply(lambda x: np.sqrt(x.dot(x)), axis=1)
delimiter
print(str(2) + str(1))
delimiter
designs = Design.objects.filter(author__user__profile__screenname__icontains=w)
delimiter
d = dict((y, x) for x, y in enumerate(t))
delimiter
zip(*s)[0]
delimiter
list(chain.from_iterable(list_of_lists))
delimiter
MyApp().run()
delimiter
server.serve_forever()
delimiter
np.concatenate((a, val))
delimiter
map(partial(f, x), y) == map(f, [x] * len(y), y)
delimiter
handles, labels = ax.get_legend_handles_labels()
delimiter
a, b, c = (int(i) for i in line.split())
delimiter
Y = X - X.mean(axis=1).reshape(-1, 1)
delimiter
f.close()
delimiter
sys.path.insert(1, os.path.dirname(os.path.realpath(__file__)))
delimiter
map(list, zip(charlist, numlist))
delimiter
time.sleep(5)
delimiter
np.hstack(b)
delimiter
test[numpy.logical_or.reduce([(test[:, (1)] == x) for x in wanted])]
delimiter
results = [s for s in strings if any(m in s for m in matchers)]
delimiter
s.sendmail(FROMADDR, TOADDR + CCADDR, msg.as_string())
delimiter
ndb.StringProperty(repeated=True)
delimiter
reverse_lst = lst[::-1]
delimiter
ax1.set_xticklabels([])
delimiter
deletelist[-n:]
delimiter
arr = [[], []]
delimiter
np.where(np.in1d(a, b))
delimiter
dict(zip(*([iter(l)] * 2)))
delimiter
L[:] = new_list
delimiter
strg[n:] + strg[:n]
delimiter
df[~df.applymap(np.isreal).all(1)]
delimiter
b = [int(i != 0) for i in a]
delimiter
driver = webdriver.Firefox()
delimiter
print(proc.communicate()[0])
delimiter
names = [description[0] for description in cursor.description]
delimiter
plt.show()
delimiter
plt.show()
delimiter
plt.show()
delimiter
dict((k, v) for k, v in list(points.items()) if all(x < 5 for x in v))
delimiter
inlinkDict[docid] = adoc[1:]
delimiter
(x * x for x in range(10))
delimiter
main()
delimiter
singleitem = mylist[-1]
delimiter
len(dict[key])
delimiter
array.append([int(x) for x in line.split()])
delimiter
[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
delimiter
pd.DataFrame(df.to_records())
delimiter
verts = [[(0) for x in range(100)] for y in range(10)]
delimiter
{k: v for k, v in zip(range(1, 5), count(7))}
delimiter
cursor.execute(sql)
delimiter
main(sys.argv[1:])
delimiter
date = models.DateTimeField(default=datetime.now, blank=True)
delimiter
sys.exit(app.exec_())
delimiter
A = [[(0) for i in range(n)] for j in range(2 ** n)]
delimiter
x = float(x)
delimiter
sorted(test, key=lambda x: isinstance(x, list) and len(x) or 1)
delimiter
root.mainloop()
delimiter
fig.show()
delimiter
((a[:, (np.newaxis), :] - v) ** 2).sum(axis=-1).shape
delimiter
plt.show()
delimiter
print(datetime.datetime.now(EST()))
delimiter
(array_2d == row).all(-1).sum()
delimiter
sorted([True, False, False])
delimiter
random.sample(range(len(mylist)), sample_size)
delimiter
array([[0, 1, 0], [1, 1, 1], [0, 1, 0]])
delimiter
np.argmax(np.max(x, axis=0))
delimiter
plt.show()
delimiter
df[df.index.levels[0].isin([int(i) for i in stk_list])]
delimiter
df.show()
delimiter
process.stdin.flush()
delimiter
np.vstack(counts_array)
delimiter
ax.xaxis.set_major_locator(ticker.LogLocator(numticks=6))
delimiter
datetime.datetime(2012, 4, 1, 0, 0).timestamp()
delimiter
[list(x) for x in zip(*sorted(zip(list1, list2), key=itemgetter(0)))]
delimiter
date_time_secs = time.mktime(datetimeobj.timetuple())
delimiter
os.makedirs(path_directory)
delimiter
m[:, (0)].reshape(5, 1).shape
delimiter
ax.set_axis_off()
delimiter
words = line.split()
delimiter
queryset.filter(created_at__gte=datetime.date.today())
delimiter
os.getpid()
delimiter
next((i for i, v in enumerate(l) if is_odd(v)))
delimiter
smtp.sendmail(send_from, send_to, msg.as_string())
delimiter
print(list(sk.d.items()))
delimiter
plt.scatter(x, y, color=c)
delimiter
settings.py
delimiter
print(pd.Series(df.values.tolist(), index=df.index))
delimiter
[[random.random() for x in range(N)] for y in range(N)]
delimiter
set(alllists).difference(set(subscriptionlists))
delimiter
plt.show()
delimiter
[values for key, values in list(rev_multidict.items()) if len(values) > 1]
delimiter
start_delta = datetime.timedelta(days=weekday, weeks=1)
delimiter
plt.tight_layout()
delimiter
pd.concat([df_current, df_future]).sort_index()
delimiter
bin(_)
delimiter
a = a.reshape((m, n)).T
delimiter
result = [list(someListOfElements) for _ in range(x)]
delimiter
x = list(set(x))
delimiter
plt.show()
delimiter
print(all(lst[i].lower() < lst[i + 1].lower() for i in range(len(lst) - 1)))
delimiter
max(l, key=lambda x: (x[1], random.random()))
delimiter
bin(6)[2:].zfill(8)
delimiter
dict(zip(it, it))
delimiter
data.apply(lambda r: sorted(r), axis=1).drop_duplicates()
delimiter
sum(int(c) for c in strs if c.isdigit())
delimiter
arr[np.maximum.accumulate(np.isnan(arr), axis=1)] = np.nan
delimiter
writer.writerow([val])
delimiter
cursor.execute(sql_and_params[0], sql_and_params[1:])
delimiter
df.sort_index(inplace=True)
delimiter
print(df.head())
delimiter
print(os.path.basename(sys.argv[0]))
delimiter
plt.show()
delimiter
self.somevalue = somevalue
delimiter
plt.show()
delimiter
[x for i in range(len(l)) for x in l[i]]
delimiter
np.vstack(dat_list)
delimiter
max(l, key=lambda x: x[1] + random.random())
delimiter
self.date = d.replace(tzinfo=pytz.utc)
delimiter
a.insert(0, a.pop())
delimiter
new = np.reshape(a, (-1, ncols))
delimiter
min(list(range(len(values))), key=lambda i: (values[i], -i))
delimiter
timestamp = dt.replace(tzinfo=timezone.utc).timestamp()
delimiter
print([x for x in A if all(y in x for y in B)])
delimiter
plt.show()
delimiter
ax.set_xticklabels(xlbls)
delimiter
type(iter(d.values()))
delimiter
df = df / df.max().astype(np.float64)
delimiter
conn.commit()
delimiter
plt.show()
delimiter
[(lambda x: x * i) for i in range(4)]
delimiter
df = pd.read_sql(sql, cnxn)
delimiter
test.__name__
delimiter
plt.show()
delimiter
os.isatty(sys.stdin.fileno())
delimiter
wordcount = len(s.split())
delimiter
scipy.optimize.leastsq(residuals, p_guess, args=(x, y))
delimiter
print(decrement())
delimiter
df.corr().mask(np.equal.outer(df.index.values, df.columns.values))
delimiter
random.choice(mylist)
delimiter
tuple_list = [(a, some_process(b)) for a, b in tuple_list]
delimiter
zeros = np.where(a == 0)[0]
delimiter
{{OBJNAME.get_FIELDNAME_display}}
delimiter
p.stdin.close()
delimiter
f.write(s)
delimiter
test = sorted(test, key=lambda x: len(x) if type(x) == list else 1)
delimiter
text_file.close()
delimiter
sys.setrecursionlimit()
delimiter
root.mainloop()
delimiter
holes = [(table[i][1] + 1, table[i + 1][0] - 1) for i in range(len(table) - 1)]
delimiter
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
delimiter
time = timeit.timeit(lambda : module.expensive_func(data))
delimiter
{k: (v * dict2[k]) for k, v in list(dict1.items()) if k in dict2}
delimiter
json.dumps(fu)
delimiter
map.put(key, new_value)
delimiter
root.mainloop()
delimiter
dic = dict((y, x) for x, y in enumerate(al, 1))
delimiter
plt.show()
delimiter
arr[[1, 4, 5]]
delimiter
logger = logging.getLogger(__name__)
delimiter
fig.tight_layout()
delimiter
cherrypy.engine.start()
delimiter
root.mainloop()
delimiter
df.columns = pd.MultiIndex.from_tuples(df.columns.to_series())
delimiter
somelist[:] = [x for x in somelist if not determine(x)]
delimiter
{x[0]: len(list(x[1])) for x in itertools.groupby(sorted(mylist))}
delimiter
(lambda x, f: list(y[1] for y in f(x)))(lst, lambda x: (sorted(y) for y in x))
delimiter
connection.commit()
delimiter
sum(a)
delimiter
pdb.set_trace()
delimiter
np.split(a, np.nonzero(np.diff(a))[0] + 1)
delimiter
self.button.clicked.connect(self.calluser)
delimiter
blog.comment_set.all()
delimiter
cap = cv2.VideoCapture(0)
delimiter
[array([0]), array([47, 48, 49, 50]), array([97, 98, 99])]
delimiter
ax.set_xticklabels(x)
delimiter
ma.array(a, mask=np.isnan(a)).mean(axis=0)
delimiter
pd.crosstab(df.A, df.B).apply(lambda r: r / len(df), axis=1)
delimiter
pd.DataFrame([record_1])
delimiter
app.run(debug=True)
delimiter
scipy.stats.hypergeom.cdf(k, M, n, N)
delimiter
[np.nonzero(np.in1d(x, c))[0] for x in [a, b, d, c]]
delimiter
pd.DataFrame(np.where(df, 1, 0), df.index, df.columns)
delimiter
f = lambda x, y: x + y
delimiter
data = json.load(f)
delimiter
tuple(tup[0] for tup in A)
delimiter
datetime.fromtimestamp(1268816500)
delimiter
plt.show()
delimiter
len(set(a)) == len(a)
delimiter
np.isnan(a)
delimiter
np.cov(x)
delimiter
np.linalg.norm(x, ord=1)
delimiter
[1, 4, 5, 6, 7]
delimiter
inspect.getmembers(my_module, inspect.isclass)
delimiter
s.map(lambda x: x[:2])
delimiter
ioloop.IOLoop.instance().start()
delimiter
[list(g) for k, g in itertools.groupby(iterable)]
delimiter
np.equal.reduce([False, 0, 1])
delimiter
f.write(json.dumps(data, ensure_ascii=False))
delimiter
Counter(map(tuple, list1))
delimiter
os.path.dirname(fullpath)
delimiter
list(range(len(strs) - 1, -1, -1))
delimiter
csv_file.writerows(the_list)
delimiter
python - -version
delimiter
np.cumsum(np.concatenate(([0], np.bincount(v))))[v]
delimiter
[k for k, g in groupby(sorted(chain.from_iterable(iter(content.values()))))]
delimiter
np.asarray([func(i) for i in arr])
delimiter
numpy.in1d(a, b).nonzero()
delimiter
df.fillna(0)
delimiter
ax.set_yticks([])
delimiter
current_module = sys.modules[__name__]
delimiter
server.starttls()
delimiter
np.hstack([X, Y])
delimiter
plt.figure()
delimiter
sys.exit(1)
delimiter
env.skip_bad_hosts = True
delimiter
not any(my_list)
delimiter
map(max, zip(*alist))
delimiter
Book.objects.filter(Q(author__id=1) & Q(author__id=2))
delimiter
Thread(target=cherrypy.quickstart, args=[Root()]).start()
delimiter
app.mainloop()
delimiter
f = os.path.join(path, f)
delimiter
df[last_row.argsort()]
delimiter
dict(zip(l[::2], l[1::2]))
delimiter
[(i ** 2) for i in list]
delimiter
numpy.where(mask, 1, numpy.where(numpy_array == 0, 0, 2))
delimiter
QApplication.desktop()
delimiter
plt.show()
delimiter
sys.exit()
delimiter
server.serve_forever()
delimiter
mydict = dict((rows[0], rows[1]) for rows in reader)
delimiter
numpy.empty((10, 4, 100))
delimiter
{k: v for k, v in list(dict.items()) if v > something}
delimiter
admin.site.register(User, UserAdmin)
delimiter
fig.autofmt_xdate()
delimiter
plt.show()
delimiter
[k for k, count in list(Counter(L).items()) if count > 1]
delimiter
entry = [str(x) for x in cols.findAll(text=True)]
delimiter
plt.show()
delimiter
etree.tostring(e, pretty_print=True)
delimiter
admin.site.register(Person, PersonAdmin)
delimiter
pygame.display.set_mode((1, 1))
delimiter
sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)
delimiter
y.astype(int)
delimiter
print(m.group(1))
delimiter
data = numpy.genfromtxt(yourFileName, skiprows=n)
delimiter
localtime(now()).replace(hour=0, minute=0, second=0, microsecond=0)
delimiter
df2.reindex(df.index)
delimiter
plt.show()
delimiter
plt.show()
delimiter
np.random.random((N, N))
delimiter
app = Flask(__name__)
delimiter
setattr(i, x, f(getattr(i, x)))
delimiter
max(x, key=x.get)
delimiter
plt.show()
delimiter
zip(*sorted(zip(x, y), key=ig0))
delimiter
all_challenges = session.query(Challenge).join(Challenge.attempts).all()
delimiter
[dictio for dictio in dictlist if dictio[key] in valuelist]
delimiter
sum(abs(x - y) for x, y in zip(sorted(xs), sorted(ys)))
delimiter
[[int(y) for y in x] for x in values]
delimiter
[OrderedDict((k, d[k](v)) for k, v in l.items()) for l in L]
delimiter
l = np.array([list(method().values()) for _ in range(1, 11)])
delimiter
ax.xaxis.set_major_locator(locator)
delimiter
sys.stdout.flush()
delimiter
outfile.write(infile.read())
delimiter
os.path.dirname(sys.argv[0])
delimiter
button.clicked.connect(self.commander(command))
delimiter
__init__.py
delimiter
input_str = sys.stdin.read()
delimiter
print(re.findall(pattern, x))
delimiter
[i for i, item in enumerate(a) if item in b]
delimiter
[tuple(l) for l in nested_lst]
delimiter
[transform(x) for x in results if condition(x)]
delimiter
min(x for x in lst if isinstance(x, str))
delimiter
server.serve_forever()
delimiter
os.path.abspath(math.__file__)
delimiter
sum(map(int, l))
delimiter
im = Image.fromarray(my_array)
delimiter
list_.sort(key=lambda x: x[0])
delimiter
do_something()
delimiter
[[(i * j) for i, j in zip(*row)] for row in zip(matrix1, matrix2)]
delimiter
result = sorted(iter(promotion_items.items()), key=lambda pair: list(pair[1].items()))
delimiter
sys.exit(app.exec_())
delimiter
getattr(model, fieldtoget)
delimiter
output.close()
delimiter
sorted(list(d.items()), key=operator.itemgetter(1, 0))
delimiter
foo()
delimiter
[int(i) for i in str(number)]
delimiter
plt.show()
delimiter
os.system(cmd)
delimiter
pd.DataFrame(a, df.index, df.columns)
delimiter
(a1[:, (numpy.newaxis)] == a2).all(axis=2).astype(int)
delimiter
gtk.main()
delimiter
s1.reset_index(drop=True) * s2.reset_index(drop=True)
delimiter
df.applymap(np.isreal)
delimiter
[(i * y + x) for i in range(10)]
delimiter
df.reindex_axis(sorted(df.columns), axis=1)
delimiter
l = list(set(l))
delimiter
p = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
delimiter
logging.basicConfig(level=logging.WARN)
delimiter
logging.Formatter.__init__(self, msg)
delimiter
plt.show()
delimiter
datetime.utcfromtimestamp(float(self.timestamp))
delimiter
curses.doupdate()
delimiter
pixmap4 = pixmap.scaled(64, 64, QtCore.Qt.KeepAspectRatio)
delimiter
A = A - A.multiply(B)
delimiter
plt.show()
delimiter
sys.exit(0)
delimiter
revdict = dict((v, k) for k, v in list(ref.items()))
delimiter
zip(*lists)
delimiter
plt.show()
delimiter
plt.show()
delimiter
dict((k, 2) for k in a)
delimiter
a[:, ::2] + a[:, 1::2]
delimiter
np.array(list(g))
delimiter
win.show_all()
delimiter
plt.show()
delimiter
list1.sort(key=convert)
delimiter
[a for a in s if s.count(a) == 1][0]
delimiter
numpy.nonzero(numpy.in1d(a, b))
delimiter
browser.quit()
delimiter
plt.subplots_adjust(top=0.75)
delimiter
session.commit()
delimiter
dict([(t.__name__, t) for t in fun_list])
delimiter
sorted(temp, key=itemgetter(1), reverse=True)
delimiter
l = [x for x in l if x.strip()]
delimiter
a[np.arange(np.shape(a)[0])[:, (np.newaxis)], np.argsort(a)]
delimiter
root.mainloop()
delimiter
b.sort(key=lambda x: a.index(x))
delimiter
np.put(arr, np.where(~np.in1d(arr, valid))[0], 0)
delimiter
b[a[1, 1]]
delimiter
z = arr[:, (5)].sum()
delimiter
ftp.quit()
delimiter
ast.literal_eval(reclist)
delimiter
sorted(d, key=lambda x: (-x[1], x[0]))
delimiter
df.append(new_df, ignore_index=True)
delimiter
df.sort_index(inplace=True)
delimiter
set(x[0] for x in list1).intersection(y[0] for y in list2)
delimiter
print(etree.tostring(root, pretty_print=True))
delimiter
string.split(pattern, 1)[0]
delimiter
root.mainloop()
delimiter
sys.stdin.isatty()
delimiter
os.kill(pid, signal.SIGTERM)
delimiter
os.path.join(directory, filename)
delimiter
RotatingFileHandler(filename, maxBytes=10 * 1024 * 1024, backupCount=5)
delimiter
plt.legend()
delimiter
a[-1] * (a[-1] + a[0]) / 2 - sum(a)
delimiter
your_list = [int(i) for i in f.read().split()]
delimiter
sympy.sstr(_)
delimiter
plt.show()
delimiter
[x for d in thedict.values() for alist in d.values() for x in alist]
delimiter
pd.concat([data, ts]).sort_index().interpolate().reindex(ts.index)
delimiter
print(repr(the_string))
delimiter
list({len(s): s for s in jones}.values())
delimiter
np.tile(np.arange(y), x)
delimiter
print(list(itertools.combinations(a, i)))
delimiter
newprefix = list(prefix)
delimiter
ax.set_ylim(0, 1)
delimiter
python - mserver
delimiter
sum(jdcal.gcal2jd(dt.year, dt.month, dt.day))
delimiter
User.query.join(User.person).filter(Person.id.in_(p.id for p in people)).all()
delimiter
Project.objects.filter(action__person=person)
delimiter
menu = gtk.Menu()
delimiter
x = min(float(s) for s in l)
delimiter
threading.Thread.__init__(self)
delimiter
sorted(list(c.items()), key=itemgetter(0))
delimiter
np.polyfit(x, y, 4)
delimiter
sorted(a, key=lambda v: (v, random.random()))
delimiter
[i for i, x in enumerate(lst) if x < a or x > b]
delimiter
plt.show()
delimiter
np.count_nonzero(boolarr)
delimiter
y = (i[0] for i in x)
delimiter
plt.show()
delimiter
queryset.filter(created_at__range=(start_date, end_date))
delimiter
QtCore.Qt.ItemIsEnabled
delimiter
time.sleep(10)
delimiter
datetime.datetime(1970, 1, 1) + datetime.timedelta(seconds=-2082816000)
delimiter
data = numpy.loadtxt(yourFileName, skiprows=n)
delimiter
a.transpose(2, 0, 1)
delimiter
df.to_dict()
delimiter
b = np.fill_diagonal(np.zeros_like(a), value)
delimiter
python - pip
delimiter
f(tup1[0], tup1[1], tup2[0], tup2[1])
delimiter
print(bytes.decode(encoding))
delimiter
sys.stdout.flush()
delimiter
plt.show()
delimiter
plt.show()
delimiter
plt.setp([ax.get_xticklines(), ax.get_yticklines()], color=color)
delimiter
z = merge_two_dicts(x, y)
delimiter
f(*args)
delimiter
cursor.close()
delimiter
a.index(max(a))
delimiter
p.wait()
delimiter
ma.vstack([a, ma.array(np.resize(b, a.shape[0]), mask=[False, False, True])])
delimiter
__init__.py
delimiter
G[i, j] = C_abs[i, j] + C_abs[j, i]
delimiter
{x: (0) for x in string.printable}
delimiter
tuple(s[i:i + 2] for i in range(0, len(s), 2))
delimiter
[map(int, x) for x in values]
delimiter
aList, bList = [[x for x in a if x[0] == i] for i in (0, 1)]
delimiter
pool = Pool(4, initializer, ())
delimiter
app.mainloop()
delimiter
browser = webdriver.Safari()
delimiter
print(math.ceil(4.2))
delimiter
tf.sqrt(tf.reduce_mean(tf.square(tf.sub(targets, outputs))))
delimiter
ones = [(x, y) for x, y in l if y == 1]
delimiter
gtk.main()
delimiter
[(s + mystring) for s in mylist]
delimiter
ser.readline()
delimiter
result = sum(x for x in range(1, 401, 4))
delimiter
doctest.testmod()
delimiter
os.chmod(path, mode)
delimiter
[[0.4, 0.6, 0.0, 0.0], [0.2, 0.4, 0.4, 0.0], [0.0, 0.0, 0.4, 0.6]]
delimiter
df.corr().iloc[:-1, (-1)]
delimiter
[0] * 4
delimiter
sorted(l, key=lambda i: hypot(i[0] - pt[0], i[1] - pt[1]))
delimiter
session = Session.get_by_id(sid)
delimiter
ar = [r[0] for r in cur.fetchall()]
delimiter
frozenset(list(a.items()))
delimiter
norm.ppf(norm.cdf(1.96))
delimiter
plt.show()
delimiter
root = tree.getroot()
delimiter
sorted(set().union(*input_list))
delimiter
plt.gca().set_position([0, 0, 1, 1])
delimiter
d = {k: [] for k in keys}
delimiter
f.close()
delimiter
forms.ModelForm.__init__(self, *args, **kwargs)
delimiter
socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
delimiter
file.read(1)
delimiter
f.seek(0)
delimiter
print(nat.index(nat.Germany))
delimiter
plt.show()
delimiter
plt.subplots_adjust(bottom=0.2)
delimiter
random.choice(string.ascii_letters + string.digits)
delimiter
form = MyModelForm(request.POST, instance=my_record)
delimiter
a = [map(int, row.split()) for row in stdin]
delimiter
list(itertools.accumulate(lst, lambda a, b: tuple(map(sum, zip(a, b)))))
delimiter
plt.show()
delimiter
main()
delimiter
simplelist.append(x)
delimiter
[word for line in f for word in line.split()]
delimiter
print(arr[[1, 4, 5]])
delimiter
integers = [(int(i) - 1) for i in line.split()]
delimiter
plt.show()
delimiter
p = ax.scatter(xs, ys, zs, c=cs, marker=m)
delimiter
list(itertools.chain.from_iterable(list(d.values())))
delimiter
collections.Counter(a)
delimiter
self.show()
delimiter
[numbers[i % len(numbers)] for i in range(start, start + len(numbers))]
delimiter
plt.show()
delimiter
json.dumps([dict(mpn=pn) for pn in lst])
delimiter
plt.imshow(cv2.cvtColor(cube, cv2.COLOR_BGR2RGB))
delimiter
print(list_end_counter([1, 2, 1, 1, 1, 1, 1, 1]))
delimiter
map(itemgetter(1), elements)
delimiter
root.deiconify()
delimiter
test.reshape((4, 4))[:, :2].reshape((2, 4))
delimiter
dt = tz.localize(naive, is_dst=True)
delimiter
print(json.dumps(result))
delimiter
print(applejuice.__name__)
delimiter
sys.path.append(module_path)
delimiter
d += datetime.timedelta(1)
delimiter
subprocess.call(cmd, stdin=f)
delimiter
map(lambda y: [np.mean(y[i:i + length]) for i in range(0, len(y), length)], a)
delimiter
testarray = ast.literal_eval(teststr)
delimiter
bool(random.getrandbits(1))
delimiter
(arr == arr[0]).all()
delimiter
[(0, 0, 1, 1), (0, 1, 0, 1)]
delimiter
test.__defaults__
delimiter
sys.exit(main(sys.argv[1], sys.argv[2]))
delimiter
A = np.delete(A, 50, 1)
delimiter
print(json.dumps(result))
delimiter
my_dictionary = dict(map(lambda k_v: (k_v[0], f(k_v[1])), iter(my_dictionary.items())))
delimiter
zipfile.ZipFile(path)
delimiter
[sum(zip(*x)[1]) for x in data]
delimiter
data.groupby(level=[0, 1]).sum()
delimiter
plt.show()
delimiter
sys.exit(1)
delimiter
img = Image.open(file)
delimiter
res_list = [i[0] for i in rows]
delimiter
sys.exit(1)
delimiter
plt.show()
delimiter
plt.show()
delimiter
np.polyfit(X, Y, 1)
delimiter
score = sum([(x * y) for x, y in zip(a, b)])
delimiter
frame = pd.read_csv(path, names=columns)
delimiter
b = [i for sub in a for i in sub]
delimiter
os.close(fh2)
delimiter
plt.show()
delimiter
cursor.commit()
delimiter
[[y for y in x if y not in to_del] for x in my_list]
delimiter
print(sum(map(ord, my_string)))
delimiter
a[key].append(1)
delimiter
c.most_common(1)
delimiter
sum(d.values())
delimiter
[(int(i) if i.isdigit() else float(i)) for i in s]
delimiter
plt.show()
delimiter
plt.minorticks_off()
delimiter
output.close()
delimiter
ax.get_xaxis().get_major_formatter().set_scientific(False)
delimiter
app = Flask(__name__)
delimiter
tree.delete(*tree.get_children())
delimiter
[n for i, n in enumerate(xs) if i == 0 or n != xs[i - 1]]
delimiter
plt.show()
delimiter
r = np.ptp(a, axis=1)
delimiter
d.update((b, a[:, (i)]) for i, b in enumerate(a))
delimiter
cbar.set_ticklabels([mn, md, mx])
delimiter
next((i for i, val in enumerate(lst) if np.all(val == array)), -1)
delimiter
reactor.run()
delimiter
root.mainloop()
delimiter
df.groupby(df.index.year // 10 * 10).sum()
delimiter
x = [[foo for i in range(10)] for j in range(10)]
delimiter
self.response.out.write(self.request.body)
delimiter
plt.show()
delimiter
Category.objects.filter(category__isnull=True)
delimiter
ax.w_yaxis.set_ticklabels([])
delimiter
[len(x) for x in a[0]]
delimiter
plt.show()
delimiter
os.path.join(mydir, myfile)
delimiter
plt.show()
delimiter
plt.show()
delimiter
driver.quit()
delimiter
list1[0][2]
delimiter
dummy = np.array([[1, 1, 0, 0], [0, 0, 1, 1]]).T
delimiter
[v for i, v in enumerate(myList) if i not in toRemove]
delimiter
(df == 1).sum()
delimiter
asyncio.get_event_loop().run_forever()
delimiter
np.flatnonzero(x[:-1] != x[1:]).mean() + 0.5
delimiter
datetime(date.year, date.month, date.day)
delimiter
plt.show()
delimiter
map(lambda f: f(*args), funcs)
delimiter
numpy.zeros((i, j, k))
delimiter
y = [i[0] for i in x]
delimiter
plt.show()
delimiter
df.ix[:5, :10]
delimiter
[x for x in a if x <= 1 or x >= 4]
delimiter
proc.communicate()
delimiter
f(*args, **kwargs)
delimiter
c = [item for pair in zip(a, b) for item in pair]
delimiter
ax.lines.pop(0)
delimiter
sorted(Thing.objects.all(), key=lambda t: t.name)
delimiter
ssh.close()
delimiter
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
delimiter
root.mainloop()
delimiter
a[:, (0)][mask]
delimiter
plt.plot(x[i:i + 2], y[i:i + 2])
delimiter
l = [i.split() for i in l]
delimiter
reactor.run()
delimiter
ax.set_yticklabels([])
delimiter
self.searchqueryset.filter(group__isnull=True)
delimiter
some_list.remove(thing)
delimiter
datetime.datetime(1, 1, 1) + datetime.timedelta(microseconds=ticks / 10)
delimiter
[x for x in l if x % 2 == 0]
delimiter
logger.setLevel(logging.DEBUG)
delimiter
np.cross(a, b, axis=0)
delimiter
c = dict(list(a.items()) | list(b.items()))
delimiter
self.canvas.pack()
delimiter
root.mainloop()
delimiter
plt.show()
delimiter
[1, 1, 1] < [1, 1, 2]
delimiter
df.iloc[i]
delimiter
M = list(set(L))
delimiter
df[df.apply(lambda x: min(x) == max(x), 1)]
delimiter
app.run(debug=True)
delimiter
logger = logging.getLogger(__name__)
delimiter
my_list.sort(key=nonesorter)
delimiter
FieldSet = dict((k, v) for k, v in FieldSet.items() if len(v) != 1)
delimiter
__init__.py
delimiter
assertTrue(math.isnan(nan_value))
delimiter
sum(v for k, v in c.items() if v > 1)
delimiter
s.send(my_bytes)
delimiter
pylab.show()
delimiter
np.place(a, np.isnan(a), 0)
delimiter
writer.writerows(cursor.fetchall())
delimiter
array([[0, 1, 2], [0, 2, 0], [0, 1, 2], [1, 2, 0], [2, 1, 2]])
delimiter
y.mean(axis=1).mean(axis=-1)
delimiter
ZipFile.write(a, compress_type=zipfile.ZIP_DEFLATED)
delimiter
sys.stdout.flush()
delimiter
pylab.show()
delimiter
setattr(self, k, v)
delimiter
x.reshape(2, 2, 5).transpose(1, 0, 2).reshape(4, 5)
delimiter
l = [item.lower() for item in l]
delimiter
[item for item in my_list if some_condition()]
delimiter
session.query(q).limit(10)
delimiter
tuple([tuple(row) for row in myarray])
delimiter
help(my_func)
delimiter
p1.start()
delimiter
Post.objects.filter(createdAt__lte=datetime.now() - timedelta(days=plan.days))
delimiter
coord = tuple(sum(x) for x in zip(coord, change))
delimiter
sorted(lst, key=lambda L: (L.lower(), L))
delimiter
plt.show()
delimiter
time.mktime(time.gmtime(0))
delimiter
plt.show()
delimiter
getattr(foo_obj, command)()
delimiter
df = pd.DataFrame.from_dict(data)
delimiter
print(result.group(0))
delimiter
time.sleep(1)
delimiter
form = MyModelForm(instance=someinst)
delimiter
self.Bind(wx.EVT_PAINT, self.OnPaint)
delimiter
{l[1]: l for l in lol}
delimiter
any(k in s for k in keywords)
delimiter
len(a) == len(b) and all(a.count(i) == b.count(i) for i in a)
delimiter
a[a == 2] = 10
delimiter
sorted(lst, key=operator.itemgetter(1), reverse=True)
delimiter
cols = list(df.columns.values)
delimiter
ax.legend()
delimiter
Gtk.main()
delimiter
myscript.py
delimiter
nx.draw(G)
delimiter
signal.signal(signal.SIGINT, signal_handler)
delimiter
root.mainloop()
delimiter
df = df.append(pd.read_sql(querystring, cnxn, params=[i]))
delimiter
n = sum([(len(v) + 1) for k, v in list(dict_test.items())])
delimiter
[random.choice(list_of_lists) for _ in range(sample_size)]
delimiter
mySet = set((x, y) for x in range(1, 51) for y in range(1, 51))
delimiter
bool_list = [False] * len(bool_list)
delimiter
numpy.intersect1d(a, b)
delimiter
A[np.ix_([0, 2], [0, 1], [1, 2])]
delimiter
spDF.rdd.first()
delimiter
[i for i, (a, b) in enumerate(zip(vec1, vec2)) if a == b]
delimiter
root = Tk()
delimiter
json.loads(s)
delimiter
dict(j for i in L for j in list(i.items()))
delimiter
ax.set_xticks([])
delimiter
outfile.write(line)
delimiter
df = pd.DataFrame(data=matrix.toarray(), columns=names, index=raw)
delimiter
plt.show()
delimiter
print([s[i] for i in index])
delimiter
print((i, [round(255 * x) for x in rgb]))
delimiter
[-2, -2, -2, -2, -8, -8, -8, -8, -8, -8]
delimiter
ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
plt.show()
delimiter
cv2.waitKey(0)
delimiter
list(range(11, 17))
delimiter
Thread(target=fct).start()
delimiter
[len(x) for x in s.split()]
delimiter
[y for y in a if y not in b]
delimiter
df.insert(idx, col_name, value)
delimiter
[(x + 1) for x in y]
delimiter
defaultdict(lambda : defaultdict(dict))
delimiter
db.session.add(query)
delimiter
Group.objects.get(id=1).members.filter(is_main_user=True)[0]
delimiter
sqs.filter(has_been_sent=True)
delimiter
plt.show()
delimiter
plt.show()
delimiter
df.sort_index()
delimiter
np.linspace(0, 5, 10)
delimiter
numpy.transpose([numpy.tile(x, len(y)), numpy.repeat(y, len(x))])
delimiter
np.array(x).reshape(2, 2, 4)
delimiter
admin.site.unregister(Site)
delimiter
plt.figure(figsize=(5, 6))
delimiter
{i: (0) for i in range(0, 10)}
delimiter
os.setsid()
delimiter
drawPropagation(1.0, 1.0, numpy.linspace(-2, 2, 10))
delimiter
[item for sublist in (list_of_lists for item in sublist)]
delimiter
[a for a in A.objects.all() if a.b_set.count() < 2]
delimiter
z = merge_dicts(a, b, c, d, e, f, g)
delimiter
logging.basicConfig(level=logging.DEBUG)
delimiter
int(s[1:], 2) / 2.0 ** (len(s) - 1)
delimiter
os.path.splitext(os.path.basename(f))
delimiter
[x[0] for x in a]
delimiter
plt.show()
delimiter
list(my_dict.items())
delimiter
plt.show()
delimiter
array([0, 1, 0, 0, 0, 0, 0, 0, 0, 0])
delimiter
plt.show()
delimiter
numpy.argwhere(a.max() == a)
delimiter
lines.sort()
delimiter
np.random.seed(1)
delimiter
plt.show()
delimiter
filtered_dict = {k: v for k, v in my_dict.items() if not st.isdisjoint(v)}
delimiter
simplelist = [SimpleClass(count) for count in range(4)]
delimiter
(lambda x, y: x + y)(1, 2)
delimiter
plt.show()
delimiter
array([0, 0, 1, 0, 0, 1, 0])
delimiter
ax.set_xticks([])
delimiter
doctest.testmod()
delimiter
max(enumerate(props), key=lambda tup: len(tup[1]))
delimiter
(M == 0).T.nonzero()
delimiter
a[np.lexsort(a[:, ::-1].T)]
delimiter
plt.plot(x, y)
delimiter
numpy.mean(gp2)
delimiter
a[key].append(2)
delimiter
my_dict2 = {y: x for x, y in my_dict.items()}
delimiter
func(*args, **kwargs)
delimiter
df.iloc[:, ([0])]
delimiter
sum([True, True, True, False, False])
delimiter
[key for key, val in list(dct.items()) if val]
delimiter
root.mainloop()
delimiter
[heapq.nsmallest(x, 2)[1] for x in list_of_lists]
delimiter
a = [(b + 4 if b < 0 else b) for b in a]
delimiter
b = a[:]
delimiter
assert rdd.squares().collect() == rdd.map(lambda x: x * x).collect()
delimiter
L.append([7, 8, 9])
delimiter
zipfile.ZipFile(zipbytes)
delimiter
random_key = os.urandom(16)
delimiter
np.allclose(a, b)
delimiter
fig = plt.figure()
delimiter
any(np.array_equal(np.array([[0, 0], [0, 0]]), x) for x in my_list)
delimiter
[(x, y) for x, y in numpy.ndindex(a.shape)]
delimiter
admin.site.register(User, UserAdmin)
delimiter
l = ast.literal_eval(s)
delimiter
plt.draw()
delimiter
self.process.terminate()
delimiter
soup = BeautifulSoup(html)
delimiter
sorted(chain(a, b), key=lambda x: x.name)
delimiter
pd.DataFrame(s.groupby(level=0).apply(list).to_dict())
delimiter
name = sys.argv[1]
delimiter
Gtk.main()
delimiter
admin.site.register(YourModel, YourModelAdmin)
delimiter
a[i, j] = 5
delimiter
sum(1 for row in rows for i in row if i)
delimiter
c.bin[2:]
delimiter
gtk.main()
delimiter
[0] * 10000
delimiter
locals().update(my_dict)
delimiter
plt.show()
delimiter
{k: sum(v) for k, v in list(trimmed.items())}
delimiter
time.sleep(1)
delimiter
print(getattr(somemodule, class_name))
delimiter
plt.show()
delimiter
time.sleep(1500)
delimiter
print(pdf_file.read())
delimiter
(dist ** 2).sum(axis=1) ** 0.5
delimiter
df_row_merged = pd.concat([df_a, df_b], ignore_index=True)
delimiter
print(sys.stdin.read())
delimiter
p.wait()
delimiter
sheet.write(1, 0, 1)
delimiter
lst = [os.path.splitext(x)[0] for x in accounts]
delimiter
odeint(func, y0, t, a, b, c)
delimiter
np.dot(I, np.ones((7,), int))
delimiter
fig.colorbar(p)
delimiter
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
delimiter
df.to_csv(f, index=False, header=False)
delimiter
bids.append(int(bid))
delimiter
connection.close()
delimiter
Some_Model.objects.filter(id__in=ids_list).delete()
delimiter
platform.architecture()
delimiter
plt.show()
delimiter
my_list2, my_list1 = map(list, zip(*my_list))
delimiter
sum(1 for c in string if c.islower())
delimiter
[a[i // 2] for i in range(len(a) * 2)]
delimiter
[1505]
delimiter
pickle.dumps(threading.Lock())
delimiter
open(f.name).read()
delimiter
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.jet)
delimiter
df.loc[(df.isnull().any(axis=1)), :] = np.nan
delimiter
df.toPandas()
delimiter
int(sum(jdcal.gcal2jd(dt.year, dt.month, dt.day)))
delimiter
a_lower = dict((k.lower(), v) for k, v in list(a.items()))
delimiter
{tuple(x) for x in l1}.intersection(map(tuple, l2))
delimiter
print(celery.current_task.task_id)
delimiter
starf = [int(i) for i in starf]
delimiter
sum(zip(*structure)[1])
delimiter
x.reshape(2, 2, 5).transpose(1, 0, 2)
delimiter
locals()[4]
delimiter
S1.intersection(S2)
delimiter
plt.gca().invert_yaxis()
delimiter
[list(itertools.chain(*x)) for x in zip(L1, L2)]
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
delimiter
plt.show()
delimiter
{k: [(a + b) for a, b in zip(*v)] for k, v in list(d.items())}
delimiter
text = str(combobox1.currentText())
delimiter
datetime.datetime.combine(birthdate, datetime.time())
delimiter
A * B[:, (np.newaxis)]
delimiter
np.dot(np.dot(I, np.ones((7,), int)), mat)
delimiter
z = int(str(x) + str(y))
delimiter
np.mgrid[0:5, 0:5].transpose(1, 2, 0).reshape(-1, 2)
delimiter
list(dict.keys())
delimiter
plt.show()
delimiter
cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 2)
delimiter
[(2 * x) for x in some_list if x > 2]
delimiter
Toy.objects.filter(owner__parent__id=1)
delimiter
random.uniform(-1, 1)
delimiter
plt.show()
delimiter
B = numpy.array([A[0, 0, 1], A[2, 1, 2]])
delimiter
json.dump(data, outfile, ensure_ascii=False)
delimiter
data = [[int(i) for i in line.split()] for line in original]
delimiter
subsampled = df.ix[(choice(x) for x in list(grouped.groups.values()))]
delimiter
plt.show()
delimiter
self.response.out.write(key)
delimiter
plt.show()
delimiter
print(os.path.join(subdir, file))
delimiter
greet_selves()
delimiter
plt.show()
delimiter
[next(iter(s)) for _ in range(10)]
delimiter
cidrs = netaddr.ip_range_to_cidrs(ip_start, ip_end)
delimiter
response = requests.post(url, data=data)
delimiter
ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
[os.path.split(r)[-1] for r, d, f in os.walk(tree) if not d]
delimiter
pprint([OrderedDict(zip(names, subl)) for subl in list_of_lists])
delimiter
(df != 0).any(axis=0)
delimiter
plt.show()
delimiter
tornado.ioloop.IOLoop.instance().start()
delimiter
plt.show()
delimiter
re.findall(rx, st, re.VERBOSE)
delimiter
max(a, key=sum)
delimiter
plt.show()
delimiter
root.mainloop()
delimiter
plt.show()
delimiter
a[([i for i in range(a.shape[0]) if i != 1]), :, :]
delimiter
myfile.close()
delimiter
f.subs(x, 1)
delimiter
[(x, y) for x in a for y in b]
delimiter
sys.stdout.buffer.write(pdf_file.read())
delimiter
webbrowser.open(filename)
delimiter
print(requests.get(url, data=data, cookies=cookies).text)
delimiter
datetime.datetime(ddd.year, ddd.month, ddd.day)
delimiter
sorted(list(range(len(s))), key=lambda k: s[k])
delimiter
plt.show()
delimiter
reactor.run()
delimiter
foo()
delimiter
sys.stdout = sys.__stdout__
delimiter
[str(n) for n in range(10)]
delimiter
print(os.path.join(directory, file))
delimiter
plt.show()
delimiter
filtered_dict = {k: v for k, v in list(d.items()) if filter_string in k}
delimiter
set(dic1.keys()) == set(dic2.keys())
delimiter
MyMIDI.addNote(track, channel, pitch, time, duration, volume)
delimiter
root.mainloop()
delimiter
int(float(s))
delimiter
msg.attach(MIMEText(text))
delimiter
reactor.run()
delimiter
print(doctree.toprettyxml())
delimiter
combined = list(itertools.chain.from_iterable(lists))
delimiter
file_contents = f.read()
delimiter
print(line.rstrip())
delimiter
list(l) == [0] * len(l)
delimiter
dict(mylist)
delimiter
np.concatenate((A[::-1, :], A), axis=0)
delimiter
mylist[0][:1]
delimiter
fig.autofmt_xdate()
delimiter
[random.random() for _ in range(0, 10)]
delimiter
print(numpy.array([X()], dtype=object))
delimiter
plt.show()
delimiter
plt.show()
delimiter
plt.show()
delimiter
map(truediv, a, b)
delimiter
a = np.frombuffer(Data)
delimiter
df[(df <= 2).all(axis=1)]
delimiter
np.allclose(ans1, ans2)
delimiter
f.write(e8)
delimiter
[i for i in range(len(word)) if word[i] == letter]
delimiter
print(soup.prettify())
delimiter
d = collections.defaultdict(lambda : [0, []])
delimiter
thing.save()
delimiter
plt.show()
delimiter
[random.sample(s, 1)[0] for _ in range(10)]
delimiter
app.run()
delimiter
max(PlayerList, key=lambda p: max(p[1:]))[0]
delimiter
set(a) & set(b)
delimiter
sys.exit(0)
delimiter
plt.show()
delimiter
db.session.commit()
delimiter
np.linalg.norm(A - B, axis=-1)
delimiter
[0, 16, 17, 18]
delimiter
random.shuffle(array)
delimiter
json.dumps({str(k): v for k, v in list(data.items())})
delimiter
sorted(d, key=d.get, reverse=True)
delimiter
c = [(i, 0) for i in a]
delimiter
Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
delimiter
np.isnan(np.array([np.nan, 0], dtype=object))
delimiter
MyList = [inst1, inst2]
delimiter
result = (list_[0][0] + list_[1][0]) * (list_[0][1] + list_[1][1])
delimiter
zip(*elements)[1]
delimiter
print(df.applymap(lambda x: str(x).isdigit()))
delimiter
q = Model.objects.filter(Q(field1=f1) | Q(field2=f2)).distinct()
delimiter
sum(sum(1 for i in row if i) for row in rows)
delimiter
zip(keys, values)
delimiter
repr(s)
delimiter
plt.show()
delimiter
json1_data = json.loads(json1_str)[0]
delimiter
rdd = sc.parallelize([(1, 2)])
delimiter
ax.legend()
delimiter
sum([v[0] for v in list(d.values())]) / float(len(d))
delimiter
time.sleep(1)
delimiter
time.sleep(0.1)
delimiter
smaller_array = np.delete(array, index)
delimiter
sys.stdout.flush()
delimiter
total = sum(int(r[1]) for r in csv.reader(fin))
delimiter
ax.set_xlim(0, 7)
delimiter
plt.hist(b, bins)
delimiter
[(m.get(k, k), v) for k, v in list(d.items())]
delimiter
[(mylist[i:] + [newelement] + mylist[:i]) for i in range(len(mylist), -1, -1)]
delimiter
x.pop(random.randrange(len(x)))
delimiter
df = df / df.loc[df.abs().idxmax()].astype(np.float64)
delimiter
plt.show()
delimiter
df.reset_index(level=0, inplace=True)
delimiter
plt.show()
delimiter
sorted(lst, reverse=True, key=operator.itemgetter(0))
delimiter
np.argwhere(a[:, (1)] == -1)[np.argmin(a[a[:, (1)] == -1, 0])]
delimiter
print([tryeval(x) for x in L])
delimiter
python - mplatform
delimiter
[(m + str(n)) for m, n in zip(b, a)]
delimiter
sum(int(n) for n in str(2 ** 1000))
delimiter
new_list.append(fruit)
delimiter
random.choice(words)
delimiter
time.sleep(1)
delimiter
myfunc(*args)
delimiter
time.sleep(1)
delimiter
foo()
delimiter
s.dropna()
delimiter
br.set_handle_robots(False)
delimiter
plt.show()
delimiter
[int(s) for s in I.split() if s.isdigit()]
delimiter
random.shuffle(l)
delimiter
df_example.iloc[([1, 4]), :-1].T.corr()
delimiter
max(d, key=d.get)
delimiter
print(first_list + list(set(second_list) - set(first_list)))
delimiter
ax.legend()
delimiter
lambda i: i[0]
delimiter
np.array(m2)[:, (1)] > 10
delimiter
np.concatenate((A[::-1, :], A[1:, :]), axis=0)
delimiter
np.mean(a, axis=1)
delimiter
array([True, True, True, False, False, False, False], dtype=bool)
delimiter
app.run()
delimiter
do_something_with(line)
delimiter
r = requests.post(url, data=json.dumps(data), headers=headers)
delimiter
existing = db.session.query(Task).filter_by(challenge_slug=slug)
delimiter
[x[0] for x in tuple_list]
delimiter
new_list = [(a, new_b) for a, b in tuple_list]
delimiter
A = np.random.randn(1000, 1000)
delimiter
ax.set_xlim([0, 1])
delimiter
sorted(list(a.items()), key=itemgetter(1), reverse=True)
delimiter
time.sleep(1)
delimiter
fig.show()
delimiter
plt.show()
delimiter
sorted(l, key=lambda s: (s.isdigit(), s))
delimiter
ax.plot_wireframe(T, z, abs(U), cstride=1000)
delimiter
root.mainloop()
delimiter
max(x, key=lambda i: x[i])
delimiter
arr = np.append(arr, np.array([[4, 5, 6]]), axis=0)
delimiter
[list(map(int, x)) for x in values]
delimiter
r = requests.post(url, files=files)
delimiter
code.interact(local=locals())
delimiter
_w()
delimiter
pdb.set_trace()
delimiter
matplotlib.pyplot.show()
delimiter
schema = models.TextField(default=get_default_json)
delimiter
np.isclose([10000000000.0, 1e-07], [10000100000.0, 1e-08])
delimiter
int(x) / int(y) == math.floor(float(x) / float(y))
delimiter
_cxn.commit()
delimiter
gtk.main()
delimiter
set.intersection(*(set(x) for x in d.values()))
delimiter
sum(i for i in a)
delimiter
pygame.display.set_mode(size)
delimiter
df.sub(df.a, axis=0)
delimiter
dict((k, mydict[k]) for k in keys_to_select if k in mydict)
delimiter
str(1).zfill(2)
delimiter
print(line.rstrip())
delimiter
out = [a, b, c, d, e, f]
delimiter
reactor.run()
delimiter
list1.sort(key=int)
delimiter
plt.show()
delimiter
ax.plot(x, y)
delimiter
sorted(lst, key=lambda x: (-counts[x], firstidx[x]))
delimiter
sys.stdout.write(chr(x))
delimiter
sorted(lst, key=str.lower)
delimiter
set(zip(*[lst[i:] for i in range(n)]))
delimiter
A = [(A[i + 1] + A[i]) for i in range(len(A) - 1)]
delimiter
[numbers[i] for i in range(len(numbers)) if i not in indices]
delimiter
print(os.path.join(path, filename))
delimiter
[i for e in bad for i in my_list if e in i]
delimiter
(s * 5).tolist()
delimiter
myDict[item[1]] += item[2]
delimiter
scipy.sparse.csr_matrix(df.values)
delimiter
bin(0)
delimiter
new_data = np.vectorize(boolstr_to_floatstr)(data).astype(float)
delimiter
time.sleep(1)
delimiter
plt.show()
delimiter
db.rollback()
delimiter
np.any(my_array[:, (0)] == value)
delimiter
os.getpid()
delimiter
rand_smpl = [mylist[i] for i in sorted(random.sample(range(len(mylist)), 4))]
delimiter
list([x for x in l if x not in f])
delimiter
lst = [int(i) for i in str(num)]
delimiter
obj.save()
delimiter
res = list(set(a) ^ set(b))
delimiter
sys.stdout.write(str(x))
delimiter
l.sort(key=sum_nested)
delimiter
np.fill_diagonal(df.values, 0)
delimiter
__init__.py
delimiter
cherrypy.quickstart(HelloWorld())
delimiter
[i for i, j in enumerate(a) if j == m]
delimiter
mySet = set([myString])
delimiter
self.matches = [s for s in self.options if s and s.startswith(text)]
delimiter
MyModel.objects.all()
delimiter
plt.show()
delimiter
length = len(list(clusterList))
delimiter
norm = [(float(i) / sum(raw)) for i in raw]
delimiter
data.append(json.loads(line))
delimiter
sorted(zipped, key=operator.itemgetter(1))
delimiter
c = sum(1 for word in words if word[0] == word[-1])
delimiter
cnx.commit()
delimiter
np.eye(foo.shape[1]) * foo[:, (np.newaxis)]
delimiter
app.run()
delimiter
plt.show()
delimiter
[map(dict.get, list(range(1, 6))) for _ in range(10)]
delimiter
author = models.ForeignKey(User, null=True, blank=True)
delimiter
corrs = df.corr()
delimiter
re.sub(reg, rep, text)
delimiter
Py_Finalize()
delimiter
conn.commit()
delimiter
self.cdr = cdr
delimiter
x = np.array([(1, 0), (0, 1)])
delimiter
plt.show()
delimiter
gtk.main_iteration()
delimiter
new = [int(i) for i in old]
delimiter
hismgr = get_ipython().history_manager
delimiter
any(x in set(b) for x in a)
delimiter
print(settings.BASE_DIR)
delimiter
requests.get(url, params=query)
delimiter
A[B == x].sum()
delimiter
ax.set_xticklabels([])
delimiter
sys.stdin.isatty()
delimiter
ax.xaxis.set_major_formatter(xfmt)
delimiter
sys.stdout.flush()
delimiter
np.where(np.eye(A.shape[0], dtype=bool), A, A.T + A)
delimiter
self.Bind(wx.EVT_LEFT_DCLICK, self.OnDoubleClick)
delimiter
datetime.datetime.now() - datetime.timedelta(minutes=15)
delimiter
sys.stdout.flush()
delimiter
app.exec_()
delimiter
ma.array(a, mask=np.isnan(a))
delimiter
[(j - i) for i, j in zip(t[:-1], t[1:])]
delimiter
writer.writerow(row)
delimiter
all(b >= a for a, b in zip(the_list, it))
delimiter
zip(*A)
delimiter
plt.show()
delimiter
plt.show()
delimiter
[word for word in l if word.isalnum()]
delimiter
c = [x for x in b if x in _auxset]
delimiter
[list(x[1]) for x in itertools.groupby(data, lambda x: x == 0) if not x[0]]
delimiter
list(itertools.chain(*[([k] * v) for k, v in list(d.items())]))
delimiter
self.save()
delimiter
print(time.mktime(d.timetuple()))
delimiter
np.roll(a, 1)
delimiter
round(number * 2) / 2.0
delimiter
pprint(sys.path)
delimiter
A[i, j]
delimiter
print(doc.toprettyxml())
delimiter
parts = [your_string[i:i + n] for i in range(0, len(your_string), n)]
delimiter
app.logger.setLevel(logging.DEBUG)
delimiter
random.shuffle(lst)
delimiter
data_slices.sort(key=lambda s: s[-1].start)
delimiter
reactor.run()
delimiter
sorted(mydict, key=lambda key: mydict[key])
delimiter
plt.show()
delimiter
results = list(map(int, results))
delimiter
df.where((df > df.shift(1)).values & DataFrame(df.D == 1).values)
delimiter
user.put()
delimiter
cv.WaitKey(0)
delimiter
dfrm.drop(dfrm.index[len(dfrm) - 1])
delimiter
df.stack().reset_index(level=[0, 1], drop=True)
delimiter
img.show()
delimiter
t1start <= t2start <= t1end or t2start <= t1start <= t2end
delimiter
df.iloc[indexers]
delimiter
plt.legend(loc=4)
delimiter
Cordi1 = [[int(i) for i in line.split()] for line in data]
delimiter
Foo.foo()
delimiter
json_string = json.dumps(list_name, default=obj_dict)
delimiter
[x for b in a for x in b]
delimiter
unittest.main()
delimiter
plt.show()
delimiter
br.select_form(nr=1)
delimiter
ax.xaxis.set_visible(False)
delimiter
image = gtk.image_new_from_pixbuf(pixbuf)
delimiter
plt.show()
delimiter
{key: val for key, val in parent_dict.items() if 2 < key < 4}
delimiter
cursor = db.cursor(dictionary=True)
delimiter
numpy.in1d(a, b)
delimiter
plt.show()
delimiter
sorted(mylist, key=cmp_to_key(locale.strcoll))
delimiter
np.array([(arr + i) for i in np.arange(-0.2, 0.25, 0.1)]).T.ravel()
delimiter
tf.constant(1) + tf.constant(2)
delimiter
min([t for t in l if not math.isnan(t[1])], key=itemgetter(1))
delimiter
sorted(l1 + l2)
delimiter
zeros = [([0] * M) for _ in range(N)]
delimiter
driver.switch_to_alert().accept()
delimiter
sys.exit()
delimiter
dict([k_v for k_v in list(d1.items()) if k_v[0] in d2 and d2[k_v[0]] == k_v[1]])
delimiter
random.sample(list(range(1, 10)), 5)
delimiter
Series([str(x) for x in htmldata])
delimiter
print([(lst[i], lst[i + 1]) for i in range(0, len(lst), 2)])
delimiter
session.commit()
delimiter
ftp.quit()
delimiter
a.transpose(2, 1, 0)
delimiter
lst.append(os.path.splitext(x)[0])
delimiter
re.split(seperator, f.read())
delimiter
myTextCtrl.SetFont(font1)
delimiter
a == a[(0), :]
delimiter
plt.show()
delimiter
zip(l, l[1:])
delimiter
print([(s, s in st1) for s in re.findall(pat, st2)])
delimiter
df.idxmax(axis=1)
delimiter
plt.show()
delimiter
[x for y in l for x in y]
delimiter
list(range(x1, x2 + 1))
delimiter
root.mainloop()
delimiter
method()
delimiter
writer.writerow([])
delimiter
pd.concat([df_a, df_b], axis=1)
delimiter
time.sleep(0.1)
delimiter
{tuple(key): value for key, value in zip(bins, count)}
delimiter
p.start()
delimiter
map(int, bin(6)[2:])
delimiter
[10, 9, 8, 4, 7]
delimiter
calendar.timegm(time.gmtime())
delimiter
conn.commit()
delimiter
{key: list(set.difference(set(a[key]), b.get(key, []))) for key in a}
delimiter
print(file_contents)
delimiter
print(list(chain.from_iterable((x, x + 1) for x in l)))
delimiter
nx.draw_spring(G)
delimiter
df.index
delimiter
[[[x, y] for x in list1] for y in list2]
delimiter
ssh.connect(IP[0], username=user[0], pkey=mykey)
delimiter
df[(df.iloc[:, -12:] == -1).all(axis=1)]
delimiter
a.__init__(*args, **kwargs)
delimiter
a[~np.isnan(a).any(1)]
delimiter
plt.show()
delimiter
list(StreetCat._meta.parents.keys())[-1]
delimiter
print(f.read())
delimiter
sorted(a) == sorted(b)
delimiter
set(data1) & set(data2)
delimiter
pl.show()
delimiter
ax.get_xticklines()[i].set_visible(False)
delimiter
time.sleep(0.5)
delimiter
df.dot(weight)
delimiter
chr(128512)
delimiter
array[(i[0]), (i[1]), (i[2]), ..., (i[n - 1])]
delimiter
plt.show()
delimiter
[6, 7, 8, 9]
delimiter
A2, B2 = zip(*sorted(zip(A, B), key=lambda x: x[1]))
delimiter
len([x for x in frequencies if x > 0])
delimiter
x[:, 1::2]
delimiter
df[0].apply(lambda x: (0, 0) if x is np.nan else x)
delimiter
plt.show()
delimiter
app.run()
delimiter
inlinkDict[docid] = adoc[1:] if adoc[1:] else 0
delimiter
the_regex = re.compile(re.escape(the_value))
delimiter
myArray = np.zeros((6, 6))
delimiter
C = np.hstack((A, B[:, 1:]))
delimiter
sys.exit(1)
delimiter
print(date(today.year + 1, today.month, today.day))
delimiter
sum(Decimal(n) * Decimal(10) ** Decimal(i) for i, n in zip(count(0, -1), a))
delimiter
plt.show()
delimiter
MyClass.__dict__
delimiter
x1 = sorted(x, key=lambda t: t[2], reverse=True)
delimiter
df = pd.DataFrame([df.sum()] * len(df))
delimiter
pd.crosstab(df.saleid, df.upc)
delimiter
plt.show()
delimiter
print(data.reshape(-1, 2).mean(axis=1))
delimiter
screen = pygame.display.set_mode((1600, 900))
delimiter
max(n for n in range(1000) if str(n) == str(n)[::-1] and is_prime(n))
delimiter
np.maximum.accumulate(Q[:, ::-1], axis=1)[:, ::-1]
delimiter
clf.fit(X_train, y_train)
delimiter
np.random.seed(1)
delimiter
rect = picture.get_rect()
delimiter
main()
delimiter
datetime.time()
delimiter
test.f(0)
delimiter
df.stack().between(2, 10, inclusive=False).unstack()
delimiter
y = [j for i in x for j in i]
delimiter
hex(x)[2:]
delimiter
im = Image.open(image_file)
delimiter
session.delete(instance)
delimiter
result.append(b[index])
delimiter
server.starttls()
delimiter
np.concatenate(counts_array).reshape(len(counts_array), -1)
delimiter
plt.show()
delimiter
name = sys.argv[1:]
delimiter
plt.show()
delimiter
itemindex = numpy.where(array == item)
delimiter
s.groupby(level=0).apply(list)
delimiter
df.convert_objects(convert_numeric=True)
delimiter
pobj.stdin.flush()
delimiter
plt.show()
delimiter
plt.show()
delimiter
foo()
delimiter
multiprocessing.Process.__init__(self)
delimiter
[sum(x) for x in zip(*lists_of_lists)]
delimiter
u = User.objects.filter(userjob__job=a).filter(userjob__job=c)
delimiter
pd.concat([pd.Series(initial_value), cum_growth]).reset_index(drop=True)
delimiter
np.concatenate(input_list).ravel()
delimiter
a[0]
delimiter
app.run()
delimiter
mp.Process(target=foo, args=(x,)).start()
delimiter
sys.stdout.write(line)
delimiter
df.drop(df.columns[i], axis=1)
delimiter
plt.show()
delimiter
ax.xaxis.set_major_locator(locator)
delimiter
A.ravel()[np.in1d(A, B)] = 0
delimiter
my_list.sort(key=my_key)
delimiter
cv2.waitKey(0)
delimiter
os.path.expanduser(path)
delimiter
time.sleep(1)
delimiter
plt.show()
delimiter
df.ix[:5, :10]
delimiter
a.ravel()
delimiter
ax.set_xticklabels(nonRepetitive_x)
delimiter
deletepkt[TCP].chksum
delimiter
[x for i, x in enumerate(numbers) if i not in indices]
delimiter
A[0][0:4]
delimiter
conn.rollback()
delimiter
a[[0, 1], [1, 2], [2, 2]]
delimiter
set.intersection(*map(set, d))
delimiter
df.columns.droplevel(1)
delimiter
[2, 6, 8, 7, 9, 6, 5, 4, 2]
delimiter
[[]] * 10
delimiter
time.sleep(0.1)
delimiter
print(r.dtype)
delimiter
ax.axes.get_xaxis().set_visible(False)
delimiter
str.isalpha()
delimiter
sys.exit(app.exec_())
delimiter
{i: functools.reduce(dict.__getitem__, keys, d[i]) for i in d}
delimiter
os.chown(path, uid, gid)
delimiter
set(map(tuple, listB)) <= set(map(tuple, listA))
delimiter
(x for x in List)
delimiter
print(sum(num for num in numbers if num % 2 == 1))
delimiter
dict(zip(i, i))
delimiter
np.array([a, a]).shape
delimiter
[[], [], []]
delimiter
myplsda = PLSRegression().fit(X=Xdata, Y=dummy)
delimiter
instance.__class__.__name__
delimiter
json.dump(data, outfile)
delimiter
time.sleep(60)
delimiter
print(max(group, key=lambda k: len(list(k[1]))))
delimiter
f.close()
delimiter
some_func(*params)
delimiter
column_names = [item[0] for item in cursor.description]
delimiter
numpy.clip(x, 0, 255)
delimiter
x.reshape(2, 2, 5)
delimiter
lines.sort(key=itemgetter(2), reverse=True)
delimiter
sorted({x for v in content.values() for x in v})
delimiter
set(tuple(i) for i in l)
delimiter
console = logging.StreamHandler()
delimiter
set([1, 2])
delimiter
self.ham = dict()
delimiter
certificat = signers[0]
delimiter
unravel_index(a.argmax(), a.shape)
delimiter
[e for i, e in enumerate(main_list) if i in indexes]
delimiter
cv2.rectangle(image, (x, y), (x + w, y + h), (255, 255, 0), 5)
delimiter
self.ui.closeButton.clicked.connect(self.closeIt)
delimiter
sum(int(x) for x in digit if x.isdigit())
delimiter
app.run()
delimiter
AtB = A.stack(0).dot(twos).unstack()
delimiter
r = requests.post(url, files=files, data=data, headers=headers)
delimiter
plt.plot(x, y)
delimiter
root.mainloop()
delimiter
[k for k, v in colour.items() if v == min_val]
delimiter
plt.show()
delimiter
[y for y in a if y not in b]
delimiter
np.fft.fft(xfiltered)
delimiter
root.mainloop()
delimiter
matplotlib.pyplot.plot(raw_audio_data)
delimiter
root.grid_rowconfigure(1, weight=1)
delimiter
palette.append((0, 0, 0))
delimiter
today + datetime.timedelta(days=1)
delimiter
newNums = [i for i, x in enumerate(nums) if x == 12]
delimiter
[peaks([x, y]) for x, y in zip(xscat, yscat)]
delimiter
print(json.dumps(dict(table_data)))
delimiter
sorted(li1, key=k)
delimiter
list(range(0, 6, 2))
delimiter
admin.site.register(Foo, FooAdmin)
delimiter
plt.axvline(x=2.20589566)
delimiter
df.column_A.apply(to_binary)
delimiter
df.max()
delimiter
plt.show()
delimiter
yacc.yacc(debug=0, write_tables=0)
delimiter
nx.draw_networkx_edges(G, pos, edgelist=black_edges, arrows=False)
delimiter
sys.exit()
delimiter
good_data = [data[(n), :][flag == 1].tolist() for n in range(data.shape[0])]
delimiter
img[:, :, (0)] = 0
delimiter
self.SetSizer(sizer)
delimiter
sum(x > 0 for x in frequencies)
delimiter
json.dumps(geodata)
delimiter
print(A.reshape(-1, k)[np.arange(n * m), B.ravel()])
delimiter
np.in1d(A, B).any()
delimiter
plt.show()
delimiter
y = set(x.flatten())
delimiter
date.today() > self.date
delimiter
pygame.init()
delimiter
plt.show()
delimiter
canvas.create_image(0, 0, anchor=NW, image=displayPlantImage)
delimiter
age = models.IntegerField(blank=True, null=True)
delimiter
root.mainloop()
delimiter
[(key, len(list(it))) for key, it in itertools.groupby(list_one)]
delimiter
df.isnull()
delimiter
df1.apply(lambda s: df2.corrwith(s))
delimiter
self.response.out.write(html)
delimiter
plt.plot(list(range(10)))
delimiter
[int(x) for line in data for x in line.split()]
delimiter
ax.plot(x, y, color=uniqueish_color())
delimiter
QtGui.QMainWindow.__init__(self, parent)
delimiter
print(etree.tostring(root, pretty_print=True))
delimiter
sdb.close()
delimiter
np.mgrid[[slice(row[0], row[1], n * 1j) for row, n in zip(bounds, n_bins)]]
delimiter
results = [r for k in keywords for r in re.findall(k, message.lower())]
delimiter
getattr(this_prize, choice)
delimiter
root.mainloop()
delimiter
time.sleep(0.2)
delimiter
int(bin(n)[:1:-1], 2)
delimiter
plt.show()
delimiter
requests.post(url, data=body, headers=headers)
delimiter
print([hex(x) for x in numbers])
delimiter
zip(string, string[1:], string[2:])
delimiter
win.show_all()
delimiter
sum(Decimal(i) for i in a)
delimiter
np.split(x.reshape(x.shape[0], -1), 9, axis=1)
delimiter
conn.close()
delimiter
G = nx.balanced_tree(10, 10)
delimiter
process.terminate()
delimiter
f.close()
delimiter
xxxxx.yyyyy.zzzzz
delimiter
d = os.path.dirname(os.getcwd())
delimiter
list2 == sorted(list2, key=lambda c: list1.index(c))
delimiter
dict((y, x) for x, y in t)
delimiter
myothermodule.py
delimiter
print(repr(s))
delimiter
plt.show()
delimiter
print(list(range(n, (m + 1) * n, n)))
delimiter
type(theobject).__name__ in dir(__builtins__)
delimiter
root.mainloop()
delimiter
func()
delimiter
[[cell for cell in row] for row in X]
delimiter
s[::-1]
delimiter
text_file.close()
delimiter
print([[x for x in a if len(x) == i] for i in set(len(k) for k in a)])
delimiter
y = x.astype(int)
delimiter
plt.show()
delimiter
root.mainloop()
delimiter
signal.signal(signal.SIGINT, quit_gracefully)
delimiter
self.request.user
delimiter
Mainscreen()
delimiter
ax.xaxis.set_major_formatter(myFmt)
delimiter
ax.set_yticklabels([])
delimiter
sys.stdout.flush()
delimiter
self.assertEqual(my_patch_method, patch_my_lib().target_method.__func__)
delimiter
logging.getLogger().setLevel(logging.INFO)
delimiter
current_time = (datetime.now() - timedelta(seconds=10)).time()
delimiter
pgdb.paramstyle
delimiter
time.sleep(5)
delimiter
[L[i] for i in [2, 1, 0]]
delimiter
fig.tight_layout()
delimiter
plt.show()
delimiter
plt.show()
delimiter
self.f.close()
delimiter
x[1::2, 1::2]
delimiter
arr[arr > 0].min()
delimiter
etree.tostring(div)
delimiter
painter.restore()
delimiter
zlib.decompress(data)
delimiter
plt.show()
delimiter
array([[0], [7], [1], [0], [4], [0], [0], [0], [0], [1], [0], [0], [0]])
delimiter
out = mat[0] * (len(ixs) - len(nzidx)) + mat[ixs[nzidx]].sum(axis=0)
delimiter
[str[start:start + num] for start in range(0, len(str), num)]
delimiter
np.asarray(V).min(0)
delimiter
base = df.index.get_loc(18)
delimiter
[[0, 0], [1, 1]]
delimiter
ax2.set_xlim([0, 5])
delimiter
plt.show()
delimiter
MY_SORTED_TUPLE = tuple(sorted(MY_TUPLE, key=lambda item: item[1]))
delimiter
x = dict(zip(list(range(0, 10)), itertools.repeat(0)))
delimiter
list(item[1] for item in pkgutil.iter_modules())
delimiter
datetime.datetime.date(2011, 1, 1)
delimiter
i, = np.where(a == value)
delimiter
cv2.destroyAllWindows()
delimiter
b = numpy.append(a, numpy.zeros([len(a), 1]), 1)
delimiter
A[np.random.choice(A.shape[0], num_rows_2_sample)]
delimiter
fig, ax = plt.subplots(figsize=(6, 1))
delimiter
pil_im.show()
delimiter
mlab.show()
delimiter
ax.set_yticks([])
delimiter
pd.concat([s1, s2], axis=1)
delimiter
file.write(str(m))
delimiter
sys.stdout.flush()
delimiter
Activity.objects.filter(list__topic=my_topic)
delimiter
app.exec_()
delimiter
np.logical_or.reduce((x, y, z))
delimiter
writer.writerow([item])
delimiter
print(rawstr(test7))
delimiter
{{settings.MY_SETTING_NAME}}
delimiter
[s.strip() for s in data_string.splitlines()]
delimiter
fo.write(fp.read())
delimiter
sess.run(assign_op)
delimiter
ts.reindex(pd.date_range(min(date_index), max(date_index)))
delimiter
bbox_data = ax.transData.inverted().transform(bbox)
delimiter
print(alphs[:i] + alphs[i::-1])
delimiter
plt.show()
delimiter
[dict(zip(d, v)) for v in product(*list(d.values()))]
delimiter
self.text.pack()
delimiter
a = numpy.frombuffer(buffer, float)
delimiter
mylist = list(set(mylist))
delimiter
print(sorted(list(a.items()), key=lambda t: get_key(t[0])))
delimiter
np.in1d(a, b).reshape(a.shape).any(axis=1)
delimiter
self.assertEqual(my_patch_method, patch_my_lib().target_method.__func__)
delimiter
deletemy_dict[k]
delimiter
plt.show()
delimiter
squared = [(x ** 2) for x in lst]
delimiter
threading.Thread(target=play1).start()
delimiter
x = np.random.rand(5, 1)
delimiter
plt.show()
delimiter
os.path.sep
delimiter
csv_writer.writerows(cursor)
delimiter
app.run()
delimiter
df2.reset_index(drop=True)
delimiter
print(lxml.etree.tostring(order, pretty_print=True))
delimiter
globals()
delimiter
print(max(result, key=lambda a: a[1]))
delimiter
all_data.append(data)
delimiter
matplotlib.pylab.show()
delimiter
input_file.close()
delimiter
self.setWindowFlags(PyQt4.QtCore.Qt.WindowStaysOnTopHint)
delimiter
deleteL[index]
delimiter
print(f.read())
delimiter
d = dict((v[0], v[1:]) for v in arr)
delimiter
print(lxml.etree.tostring(tree))
delimiter
pygame.init()
delimiter
list(d.values())
delimiter
[item for item in lis if item[1] not in seen and not seen.add(item[1])]
delimiter
any(([1, 2] == x).all() for x in a)
delimiter
[(x + b[i]) for i, x in enumerate(a)]
delimiter
[(tuple[a], tuple[a + 1]) for a in range(0, len(tuple), 2)]
delimiter
np.array(a).reshape(-1, 100)[::2].ravel()
delimiter
df.index.values
delimiter
[((i // 2) ** 2 if i % 2 else i // 2) for i in range(2, 20)]
delimiter
zip(*([iter(l)] * 2))
delimiter
os.kill(os.getppid(), signal.SIGHUP)
delimiter
len(sum4) - np.count_nonzero(sum4)
delimiter
gtk.gdk.pixbuf_new_from_array(arr, gtk.gdk.COLORSPACE_RGB, 8)
delimiter
print(etree.tostring(e, pretty_print=True))
delimiter
print(equations((x, y)))
delimiter
ham.__class__.__name__
delimiter
os.kill(12765, 0)
delimiter
calendar.timegm(dt.utctimetuple())
delimiter
sum(int(i) for i in data)
delimiter
pdb.set_trace()
delimiter
[[[flatten[int(i * 2)]]] for i in range(int(len(flatten) / 2))]
delimiter
plt.show()
delimiter
results = [int(i) for i in results]
delimiter
func(*args, **kwargs)
delimiter
[m.group(1) for m in (re.search(regex, l) for l in lines) if m]
delimiter
print(sum(sum(map(int, r.findall(line))) for line in data))
delimiter
[x[1] for x in L]
delimiter
plt.tight_layout()
delimiter
df.genres.apply(pd.Series).stack().drop_duplicates().tolist()
delimiter
nms.dropna(thresh=2)
delimiter
admin.site.register(Person, PersonAdmin)
delimiter
ax1.set_xticklabels([])
delimiter
result = copy.deepcopy(source_dict)
delimiter
soup = BeautifulSoup.BeautifulSoup(urllib.request.urlopen(url).read())
delimiter
[([0.0] * 10) for _ in range(10)]
delimiter
a[1, 1]
delimiter
eliminated.append(x)
delimiter
print(etree.tostring(x, pretty_print=True))
delimiter
emp.delete()
delimiter
[myDictionary.get(key) for key in keys]
delimiter
urllib.parse.unquote(url)
delimiter
max((t for t in yourlist if t[2] >= 100), key=itemgetter(1))
delimiter
urllib.parse.unquote(urllib.parse.unquote(s))
delimiter
app.exec_()
delimiter
list(sys.modules.keys())
delimiter
code.interact()
delimiter
range(N, -1, -1)
delimiter
ws.cell(row=i + 2, column=1).value = statN
delimiter
plt.show()
delimiter
a = a.reshape((a.shape[0], -1, n))
delimiter
procs.append(multiprocessing.Process(target=worker))
delimiter
setattr(current_module, new_name, func)
delimiter
print(f.read())
delimiter
groupby(a, [0, 1])
delimiter
list(metadata.tables.keys())
delimiter
webbrowser.open_new_tab(url)
delimiter
plt.show()
delimiter
s.reset_index(drop=True, inplace=True)
delimiter
reactor.run()
delimiter
dict((item[0], (item[1], z[item[0]])) for item in l)
delimiter
pd.crosstab(df.A, df.B).apply(lambda r: r / r.sum(), axis=1)
delimiter
process.terminate()
delimiter
soup.body.insert(len(soup.body.contents), yourelement)
delimiter
json.loads(_)
delimiter
x.do_something()
delimiter
total = sum([int(i) for i in cost])
delimiter
writer.writerows(all)
delimiter
random.shuffle(lst)
delimiter
n ^= (1 << upper) - 1 & ~((1 << lower) - 1)
delimiter
my_series.sort()
delimiter
time.sleep(1)
delimiter
deletemyList[i]
delimiter
session.commit()
delimiter
max(x, key=sum)
delimiter
[(x ** 2) for x in range(10)]
delimiter
sum(a * b for a, b in zip(it, it))
delimiter
df.a = df.a / 2
delimiter
example2()
delimiter
time.sleep(1)
delimiter
[(float(c) / t) for c, t in zip(conversions, trials)]
delimiter
self.assertEqual(4, 2 + 2)
delimiter
user.save()
delimiter
window.after(1, lambda : window.focus_force())
delimiter
time.sleep(1)
delimiter
[list(t) for t in set(tuple(element) for element in xx)]
delimiter
print(et.tostring(tree, pretty_print=True, xml_declaration=True))
delimiter
root.mainloop()
delimiter
log = logging.getLogger(__name__)
delimiter
sys.stdout.flush()
delimiter
np.cos(-1.5)
delimiter
time.time() * 1000
delimiter
ctypes.cast(s, ctypes.c_void_p).value
delimiter
df.ix[pd.to_datetime(df.Date).order().index]
delimiter
sorted(l, key=lambda x: (x[:-1], x[-1].isdigit()))
delimiter
result = array[:, (idx)]
delimiter
print(os.path.join(root, name))
delimiter
sys.exit(0)
delimiter
sum(map(int, str(n)))
delimiter
q.T.reshape(-1, k, n).swapaxes(1, 2).reshape(-1, k)
delimiter
sys.exit(0)
delimiter
cols_to_use = df2.columns.difference(df.columns)
delimiter
round(math.degrees(math.asin(0.5)), 2)
delimiter
min(enumerate(a), key=itemgetter(1))[0]
delimiter
print(list(sampleDict.values())[0].keys()[0])
delimiter
initgstreamer()
delimiter
time.sleep(4)
delimiter
test_df.where(~(test_df < 4))
delimiter
l = list(map(lambda x: 2 * x, l))
delimiter
plt.show()
delimiter
im.show()
delimiter
app.run()
delimiter
myShelvedDict.update(myDict)
delimiter
{v: (v ** 2) for v in l}
delimiter
im = Image.open(tempimg)
delimiter
plt.show()
delimiter
app.run()
delimiter
Lmerge = [(i1 + i2) for i1, i2 in zip(L1, L2)]
delimiter
[[try_int(x) for x in lst] for lst in list_of_lists]
delimiter
subprocess.Popen(executable, creationflags=DETACHED_PROCESS, close_fds=True)
delimiter
app.run()
delimiter
np.array(my_list, dtype=np.float)
delimiter
{{request.session.foo}}
delimiter
driver.quit()
delimiter
plt.show()
delimiter
n.index(min(n))
delimiter
t.start()
delimiter
x = [(0) for i in range(10)]
delimiter
file_handle.close()
delimiter
a.__setitem__(slice(0, 1), [1])
delimiter
[data[i:i + n] for i in range(0, len(data), n)]
delimiter
server.serve_forever()
delimiter
a.take(np.arange(start, end), axis=axis)
delimiter
vet = [random.randint(1, 10) for _ in range(100000)]
delimiter
plt.xticks(ticks, labels)
delimiter
sum(map(float, s.split()))
delimiter
print(ET.tostring(newdom, pretty_print=True))
delimiter
array([0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0])
delimiter
f.set_size_inches(11.69, 8.27)
delimiter
x1, y1, a1, b1, x2, y2 = (int(eval(input())) for _ in range(6))
delimiter
df._get_numeric_data()
delimiter
circle1.set_visible(False)
delimiter
ast.literal_eval(a)
delimiter
logging.getLogger().handlers[0].setLevel(logging.DEBUG)
delimiter
pyplot.draw()
delimiter
df.iloc[:, (your_col_index)]
delimiter
coautorshipDictionary = {int(k): int(v) for k, v in json.load(json_data)}
delimiter
plt.show()
delimiter
items = [some(a.split(), d, n) for a, d, n in (list(m.values()) for m in dl)]
delimiter
isinstance(now, datetime.datetime)
delimiter
ax.set_xticklabels([])
delimiter
server.serve_forever()
delimiter
np.repeat(np.arange(x), y)
delimiter
df1.ix[0, 1]
delimiter
plt.show()
delimiter
a_lower = {k.lower(): v for k, v in list(a.items())}
delimiter
your_list = map(int, your_string)
delimiter
plt.show()
delimiter
[list(g) for k, g in itertools.groupby(sorted(iterable))]
delimiter
sys.stdout.flush()
delimiter
cv2.findContours(img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
delimiter
User.objects.filter(active=True)
delimiter
[key for key, val in list(dct.items()) if val == True]
delimiter
data = np.concatenate((im, indices), axis=-1)
delimiter
mimetypes.init()
delimiter
cv2.destroyAllWindows()
delimiter
random.randrange(1, 10)
delimiter
numpy.histogram(a, bins=(25, 100))
delimiter
my_list = my_list[:8] + new_array
delimiter
dictionary[key] = value
delimiter
app.run()
delimiter
print(list(range(0, (m + 1) * n, n))[1:])
delimiter
df.columns = [strip_non_ascii(x) for x in df.columns]
delimiter
a_order, a_sorted = zip(*sorted(enumerate(a), key=lambda item: item[1]))
delimiter
L.grid(row=6, column=0)
delimiter
all_descendants = list(elem.iter())
delimiter
cv2.waitKey(0)
delimiter
mc = MyClass()
delimiter
sorted(A, key=operator.itemgetter(2, 0, 1))
delimiter
df = pd.concat([df, s1, s2], axis=1).reset_index(drop=True)
delimiter
[[int(j) for j in i] for i in a]
delimiter
[0, 0, 0, 0, 0, 0, 0, 0, 0],
delimiter
myRoundedList = [round(elem, 2) for elem in myList]
delimiter
db.commit()
delimiter
madata.mean(axis=1)
delimiter
a = np.array([[1, 2], [10, 20], [100, 200]])
delimiter
set(list1).intersection(list2)
delimiter
np.bincount(accmap, weights=a)
delimiter
isinstance(d[obj], list)
delimiter
time.sleep(1)
delimiter
self.canvas.pack(fill=BOTH, expand=YES)
delimiter
plt.show()
delimiter
plt.scatter(x, y)
delimiter
verts = [(0) for x in range(1000)]
delimiter
[(1) for _ in range(6)]
delimiter
np.linalg.norm(x)
delimiter
connection.connect()
delimiter
time.sleep(100)
delimiter
[(1, 2, 2), (5,), (1, 1, 1, 1, 1), (1, 1, 1, 2)]
delimiter
sorted(Author.objects.all(), key=lambda a: a.full_name)
delimiter
jsonify(eqtls=[e.serialize() for e in my_list_of_eqtls])
delimiter
sum(len(i) for i in x if len(i) > 1)
delimiter
[[k for k in x if x[k] != y[k]] for x, y in pairs if x != y]
delimiter
admin.site.register(Product, ProductAdmin)
delimiter
norm = [(float(i) / max(raw)) for i in raw]
delimiter
df.iloc[[2, 4]]
delimiter
next(s for s in list_of_string if s)
delimiter
Gtk.main()
delimiter
[x for x in mylist if x in pattern]
delimiter
fcntl.flock(fd, fcntl.LOCK_EX)
delimiter
plt.show()
delimiter
[x[:] for x in [[foo] * 10] * 10]
delimiter
root = tk.Tk()
delimiter
arr = arr[:, :, 0::2]
delimiter
df[(df.A == 0) & (df.B == 2) & (df.C == 6) & (df.D == 0)]
delimiter
[set(i) for i in OrderedDict.fromkeys(frozenset(item) for item in L)]
delimiter
MyModel2.mymodel1.through.objects.all()
delimiter
_.sum()
delimiter
df.groupby(df.index.year)
delimiter
[i for i in range(4) if i <= 1 or i >= 4]
delimiter
plt.show()
delimiter
time.sleep(10)
delimiter
df.mean(axis=1)
delimiter
sorted(a, key=lambda x: aux.index(x[0]))
delimiter
np.where(a == a.max())
delimiter
hasattr(Dynamo, key) and callable(getattr(Dynamo, key))
delimiter
[math.log10(i) for i in x]
delimiter
do_something()
delimiter
np.where(condition(zeta), func1(zeta), func2(zeta))
delimiter
numpy.array(list(result.items()), dtype)
delimiter
a.mean(axis=-1).mean(axis=-1)
delimiter
pdb.set_trace()
delimiter
sys.modules
delimiter
plt.show()
delimiter
np.argwhere(arr)
delimiter
im = Image.open(BytesIO(base64.b64decode(data)))
delimiter
print(json.dumps(json_output, indent=4))
delimiter
print(a.pop(0))
delimiter
data = np.atleast_2d(np.loadtxt(filename))
delimiter
Employee.objects.active()
delimiter
[(not x) for x in some_list]
delimiter
print(hex(int(string, base=16)))
delimiter
df.dropna(thresh=len(df) - 7)
delimiter
session.query(Location, func.count(Work.id)).outerjoin(Work).group_by(Location)
delimiter
indices = [i for i, x in enumerate(myList) if re.search(pattern, x)]
delimiter
cursor.execute(sql, args)
delimiter
plt.show()
delimiter
plt.hist(x, bins=n, range=(a, b))
delimiter
plt.show()
delimiter
plt.show()
delimiter
[(x + 1 if x >= 45 else x + 5) for x in l]
delimiter
reactor.run()
delimiter
ret = pycb()
delimiter
list(chain(*(i if isinstance(i, tuple) else (i,) for i in l)))
delimiter
print(chr(1081))
delimiter
print(cursor.fetchall())
delimiter
crypthash.hexdigest()
delimiter
[func(x, y) for x, y in zip(xs, ys)]
delimiter
pygame.mixer.music.play()
delimiter
[filterList(numbers, ranges[i], ranges[i + 1]) for i in range(len(ranges) - 1)]
delimiter
index, value = max(enumerate(my_list), key=operator.itemgetter(1))
delimiter
f.close()
delimiter
int(value or 0)
delimiter
MyModel.objects.filter(name__exact=models.F(title)).exists()
delimiter
{{my_num | intcomma}}
delimiter
map(set, list(d.values()))
delimiter
list(df.index.values)
delimiter
plt.show()
delimiter
plt.draw()
delimiter
[k for k, v in numbers.items() if v == max(numbers.values())]
delimiter
f.write(os.linesep.join(data))
delimiter
dictionary[new_key] = dictionary.pop(old_key)
delimiter
root.mainloop()
delimiter
[i for i, (m, n) in enumerate(zip(bool_array[:-1], bool_array[1:])) if m != n]
delimiter
fh.close()
delimiter
sys.stdout.flush()
delimiter
plt.figure()
delimiter
print((key, value))
delimiter
sys.modules
delimiter
lst[0] in lst[1:]
delimiter
the_list.sort(key=len, reverse=True)
delimiter
filtered_dict = {k: v for k, v in d.items() if filter_string in k}
delimiter
plt.show()
delimiter
str(chr(97))
delimiter
myList.append(i)
delimiter
globals()[name] = 10
delimiter
Model.__table__.create(session.bind)
delimiter
time.sleep(1)
delimiter
df.index = list(range(len(df)))
delimiter
giant = max(nx.connected_component_subgraphs(G), key=len)
delimiter
conn.commit()
delimiter
print(np.sort(np.partition(x, -10)[-10:]))
delimiter
[list(group) for k, group in groupby(l, bool) if k]
delimiter
good_data = [data[(n), :][flag == 1] for n in range(data.shape[0])]
delimiter
input()
delimiter
np.cumsum(a)
delimiter
datetime.datetime.now() + datetime.timedelta(days=1)
delimiter
[l for l in a if l in b]
delimiter
df1.loc[(df1 > s).any(axis=1) == True].index.tolist()
delimiter
list([a for a in x if a != 2])
delimiter
instance = ClassObject()
delimiter
plt.show()
delimiter
ar.reshape(ar.shape[0], -1)
delimiter
[random.uniform(lbound, rbound) for i in range(n)]
delimiter
sys.path.append(root)
delimiter
list(double([1, 2]))
delimiter
any(key.startswith(mystr) for key in mydict)
delimiter
Py_Finalize()
delimiter
{{form.as_table}}
delimiter
plt.show()
delimiter
webdriver.Firefox(firefox_profile=fp)
delimiter
[1, 0, 1, 1]
delimiter
server.serve_forever()
delimiter
[int(digit) for digit in bin(n)[2:]]
delimiter
D = np.vstack((np.hstack((A, B)), np.hstack((B.T, C))))
delimiter
a = a + [0] * (maxLen - len(a))
delimiter
list(d.keys())
delimiter
signal.signal(signal.SIGCHLD, signal.SIG_IGN)
delimiter
plt.show()
delimiter
[True] * 5000
delimiter
d.sort(key=itemgetter(1), reverse=True)
delimiter
sorted(items, key=cmp_to_key(comparer))
delimiter
self.setupUi(self)
delimiter
br.select_form(nr=0)
delimiter
np.asarray(map(func, arr))
delimiter
x, y = -y, x
delimiter
print((cities[0][1], cities[1][1]))
delimiter
plt.show()
delimiter
conset = set(map(lambda x: tuple(sorted(x)), consarray))
delimiter
coords = np.c_[xx.ravel(), yy.ravel()]
delimiter
a, b, c
delimiter
f(*((1, 4),))
delimiter
__init__.py
delimiter
Achievement.objects.get(name=str(b))
delimiter
np.ma.array(np.tile(arr, (cond.shape[0], 1)), mask=~cond).argmax(axis=1)
delimiter
plt.imshow(lena, cmap=plt.cm.gray)
delimiter
server.serve_forever()
delimiter
iqr = q75 - q25
delimiter
array2[:, :, :, :] = array1.copy()
delimiter
gtk.main()
delimiter
df.T
delimiter
[item for item in my_list if item not in to_be_removed]
delimiter
df.loc[(df != 0).any(axis=1)]
delimiter
f.close()
delimiter
requests.get(url, auth=auth)
delimiter
browser.quit()
delimiter
cherrypy.request.params.get(key_name)
delimiter
((a == b) | numpy.isnan(a) & numpy.isnan(b)).all()
delimiter
plt.show()
delimiter
np.random.permutation(arr)
delimiter
conPG.commit()
delimiter
[item for item in my_list if 1 <= item <= 5]
delimiter
print([next(c) for _ in range(10)])
delimiter
ax.set_xlim([0, len(df)])
delimiter
kOUT = np.zeros((N + 1, N + 1))
delimiter
app.MainLoop()
delimiter
plt.show()
delimiter
ax.yaxis.set_visible(False)
delimiter
not set(list1).isdisjoint(list2)
delimiter
time.sleep(60)
delimiter
shutil.copy(filename, dest_dir)
delimiter
_(a + b * c)
delimiter
f.close()
delimiter
csv_output.writerows(zip(*rows))
delimiter
my_list.sort(key=lambda x: order.index(x[0]))
delimiter
np.sin(-1.5)
delimiter
__init__.py
delimiter
list(string.ascii_lowercase)
delimiter
simulation.someloop()
delimiter
conn.close()
delimiter
arr[arr < 0] = 0
delimiter
plt.show()
delimiter
sys.stderr.write(str(e))
delimiter
session.query(RssFeed).all()
delimiter
server.serve_forever()
delimiter
buffer1[:] = buffer2
delimiter
A = np.array([C[:, (B == i)].sum(axis=1) for i in range(M)])
delimiter
plt.show()
delimiter
math.hypot(p2[0] - p1[0], p2[1] - p1[1])
delimiter
plt.show()
delimiter
dic = {x: i for i, x in enumerate(al, 1)}
delimiter
m = {k: (float(d) / len(cs)) for k, d in sum(cs).items()}
delimiter
f.close()
delimiter
np.where(a == a.max(axis=1, keepdims=True), a, 0)
delimiter
mlab.show()
delimiter
self.est.fit(X, y)
delimiter
os.makedirs(dirname)
delimiter
self.Bind(wx.EVT_LEFT_DOWN, self._onMouseDown)
delimiter
tar.close()
delimiter
plt.show()
delimiter
pygame.display.update()
delimiter
__init__.py
delimiter
tuple(l)
delimiter
ax.scatter(x, y, z, depthshade=0)
delimiter
plt.show()
delimiter
unittest.main()
delimiter
timediff.total_seconds()
delimiter
[abs(a - b) for a, b in zip(l, l[1:] + l[:-1])]
delimiter
self.d.setdefault(index, []).append(value)
delimiter
plt.show()
delimiter
df.mean().sort_values()
delimiter
pygame.display.update()
delimiter
[-2, -1, 0, 1, 2]
delimiter
sorted(li, key=operator.itemgetter(1))
delimiter
random.choice(string.ascii_lowercase)
delimiter
window.mainloop()
delimiter
plt.close()
delimiter
[(k, list(g)) for k, g in groups]
delimiter
app.exec_()
delimiter
sum(my_list)
delimiter
{{model.datetime | time}}
delimiter
tuple(map(tuple, arr))
delimiter
tuples_filtered = [tup for tup in tuples if tup[0] in filter_set]
delimiter
plt.show()
delimiter
list(itertools.combinations(list(range(6)), 2))
delimiter
plt.show()
delimiter
s.sort(key=operator.itemgetter(1, 2))
delimiter
roundrobin(my_list, my_list)
delimiter
root.mainloop()
delimiter
sys.exit()
delimiter
today = date.today()
delimiter
json.dumps(result)
delimiter
pyplot.close()
delimiter
plt.show()
delimiter
br.submit()
delimiter
log.start()
delimiter
list(map(len, s.split()))
delimiter
print(item.strip())
delimiter
plt.show()
delimiter
sys.stdout = sys.stdout.detach()
delimiter
[(items[:i] + items[i + 1:]) for i in range(len(items))]
delimiter
np.arange(a.shape[0])[~np.in1d(a, b)].tolist()
delimiter
df.apply(lambda x: x.value_counts()).T.stack()
delimiter
app.run()
delimiter
np.argwhere(M == 0)
delimiter
out_file.close()
delimiter
x = dict((i, set()) for i in range(10))
delimiter
reactor.run()
delimiter
s = s[0].lower() + s[1:]
delimiter
picturetags.py
delimiter
map(list, df.values)
delimiter
jsonData = json.dumps(data)
delimiter
dframe = pd.concat([dframe, to_be_appended], axis=1)
delimiter
list(set(list1 + list2))
delimiter
plt.step(x, y)
delimiter
C = np.dot(A, B)[:, :, (0), :]
delimiter
sorted(iter(adict.items()), key=itemgetter(1), reverse=True)
delimiter
func(*args, **kwargs)
delimiter
driver.close()
delimiter
(df == 0).sum(axis=1)
delimiter
s.isnull().sum()
delimiter
[item for item in my_list if any(x in item for x in bad)]
delimiter
output.append([items[0], int(items[1]), int(items[2])])
delimiter
ax.annotate(str(j), xy=(i, j + 0.5))
delimiter
word in wordList[:4]
delimiter
pprint.pprint(filtered)
delimiter
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
forms.ModelForm.__init__(self, *args, **kwargs)
delimiter
es.refresh()
delimiter
conn.rollback()
delimiter
np.insert(a, 1, np.array((1, 1)), 1)
delimiter
df.apply(np.prod, axis=1)
delimiter
p.pattern
delimiter
df.T.drop_duplicates().T
delimiter
self.thread.start()
delimiter
p.stdout.close()
delimiter
self.figure.canvas.draw()
delimiter
[key for key, group in groupby(li) if all(i == 0 for i, j in enumerate(group))]
delimiter
matrix.append([0] * columns)
delimiter
a[:] = []
delimiter
os.path.dirname(sys.argv[0])
delimiter
ax.set_ylim([-0.5, 0.5])
delimiter
print(os.getcwd())
delimiter
transaction.commit()
delimiter
lst.append(z)
delimiter
a[0:1] = [[5]]
delimiter
sorted(counter.items())
delimiter
[0, 0, 0, 0, 1, 0, 0, 0, 0],
delimiter
df_with_x7.show()
delimiter
datetime.timestamp()
delimiter
a[2:10] = []
delimiter
driver.quit()
delimiter
map(str.upper, letters)
delimiter
plt.show()
delimiter
pkg_resources.get_distribution(name).activate()
delimiter
sum(map(lambda x, y: bool(x - y), [1, 2], [1]))
delimiter
zip(t[::2], t[1::2])
delimiter
time.sleep(1)
delimiter
parts = [s[indices[i]:indices[i + 1]] for i in range(len(indices) - 1)]
delimiter
[4, 5, 5, 6, 6, 6]
delimiter
list(chain.from_iterable((i, i ** 2) for i in range(1, 6)))
delimiter
hash_dict = dict(itertools.groupby(list(dic.values()), key=hash))
delimiter
{{add(a, b)}}
delimiter
time.sleep(1)
delimiter
a.sort(axis=1)
delimiter
plt.show()
delimiter
newD = {k: round(v) for k, v in list(d.items())}
delimiter
f.close()
delimiter
masked_a = numpy.ma.array(a, mask=numpy.repeat(a[:, (0)] == 1, a.shape[1]))
delimiter
f.close()
delimiter
hash(frozenset(iter(self.__dict__.items())))
delimiter
len(a[0])
delimiter
data2 = np.asarray(data2, dtype=np.int16)
delimiter
plt.show()
delimiter
cv2.bitwise_and(gray, gray, mask=mask)
delimiter
fig, ax = plt.subplots()
delimiter
plt.show()
delimiter
np.hstack((a, b, c)).ravel()
delimiter
x_ = tf.reshape(x, [-1, 1, 10, 1])
delimiter
plt.show()
delimiter
lowest_dirs.append(os.path.split(root)[-1])
delimiter
print(soup.get_text().strip())
delimiter
ax.set_xlim(-5, 5)
delimiter
time.sleep(1)
delimiter
data = OrderedDict(sorted(list(data.items()), key=lambda x: x[1][0]))
delimiter
foo = foo.upper()
delimiter
time.sleep(1)
delimiter
db.close()
delimiter
min(max_val, max(min_val, val))
delimiter
item = gtk.MenuItem()
delimiter
{key_for_value(value): value for value in values}
delimiter
tuple(list(x[0]) + [x[1]])
delimiter
np.take(A, np.arange(ncols) % A.shape[1], axis=1)
delimiter
my_list2, my_list1 = zip(*my_list)
delimiter
Gtk.main()
delimiter
all(key in dict_obj for key in properties_to_check_for)
delimiter
Clock.schedule_once(partial(self.update, message), 0)
delimiter
random.uniform(1.5, 1.9)
delimiter
datetime.timedelta(seconds=10) + datetime.timedelta(hours=5)
delimiter
np.equal.reduce([True, 1])
delimiter
[[x, y] for x in list1 for y in list2]
delimiter
[x for x in lelist if lestring.count(x)]
delimiter
termios.tcsetattr(fd, termios.TCSAFLUSH, old_settings)
delimiter
L = [bytes_obj[i:i + 1] for i in range(len(bytes_obj))]
delimiter
a.transpose(0, 2, 1).ravel()
delimiter
pickle.loads(pickle.dumps(PickalableC()))
delimiter
random.shuffle(thelist)
delimiter
print(a if b else 0)
delimiter
self.appExeCB.addItems(list(self.items.keys()))
delimiter
plt.xticks(xvalues, xlabels)
delimiter
[(x * 0.1) for x in range(0, 10)]
delimiter
np.argwhere(np.all(e - array([1, 2]) == 0, axis=2))
delimiter
help(my_list)
delimiter
strip_list = [item.strip() for item in lines]
delimiter
[int_or_float(el) for el in lst]
delimiter
shutil.copy2(file, dest_dir)
delimiter
filtered_list = [i for i, v in zip(list_a, filter) if v]
delimiter
self.Center()
delimiter
moneyx = float(money.read())
delimiter
print(sys.argv)
delimiter
plt.show()
delimiter
cv2.imwrite(name, imagem)
delimiter
toolz.unique(obj_list, key=lambda x: x.my_attr)
delimiter
operator.itemgetter(1)(row)
delimiter
a[np.argsort(ma[:, (1)])]
delimiter
my_array = numpy.array(my_list, dtype=numpy.float64)
delimiter
app.run(port=port, debug=False)
delimiter
x[:] = [value for value in x if len(value) == 2]
delimiter
os.startfile(filename)
delimiter
plt.show()
delimiter
sys.argv[2]
delimiter
not any(dict.values())
delimiter
[(item, value) for item, value in config.items(section)]
delimiter
np.hstack(a.flat)
delimiter
my_list.sort(key=operator.itemgetter(1))
delimiter
array = [[int(x) for x in line.split()] for line in f]
delimiter
globals()
delimiter
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
delimiter
self.thread.start()
delimiter
app.run()
delimiter
json.load(request.body)
delimiter
{c: s.count(c) for c in chars}
delimiter
tk.mainloop()
delimiter
pdb.set_trace()
delimiter
B_p.to_csv(sys.stdout, index=False)
delimiter
{str(k): convert_value(v) for k, v in list(d.items())}
delimiter
QtCore.Qt.ItemIsEnabled
delimiter
data = [map(int, line.split()) for line in f]
delimiter
urllib.parse.urlencode(f)
delimiter
d = dict(zip([o.name for o in object_list], object_list))
delimiter
writer.writerows(lines)
delimiter
keys = [i for i, v in scores.items() if v == max_value]
delimiter
[i[0] for i in x]
delimiter
plt.show()
delimiter
session.commit()
delimiter
map(lambda frame: frame.query(expr), [df, df2])
delimiter
berlin_now = datetime.now(tz)
delimiter
prod(list(range(1, 5)))
delimiter
keys.update(list(d.keys()))
delimiter
(df != 0).dot(df.columns)
delimiter
print(object.__repr__())
delimiter
thread.start()
delimiter
self.x += STEP
delimiter
plt.show()
delimiter
plt.show()
delimiter
all_the_ways = [(2, 1, 2), (2, 2, 1)]
delimiter
int(b, 2)
delimiter
f = figure(figsize=(5, 1))
delimiter
ssh.close()
delimiter
fp.close()
delimiter
list({x.tag: x for x in myList}.values())
delimiter
p.delete()
delimiter
all(i.count(1) == n for i in l)
delimiter
df.reset_index()
delimiter
result = np.arange(20, dtype=np.float).reshape((2, 10))
delimiter
datetime.datetime.fromtimestamp(0) + datetime.timedelta(seconds=2147570047)
delimiter
pd.crosstab(df.A > 0, df.B > 0)
delimiter
self.get()
delimiter
plt.show()
delimiter
app.exec_()
delimiter
ContactForm.get_reason_display()
delimiter
len(x) >= 4
delimiter
my_list = [json.loads(line) for line in f]
delimiter
session.query(func.count(User.id)).scalar()
delimiter
l.append(elt2)
delimiter
all(v == 0 for v in values)
delimiter
plt.show()
delimiter
result.wait()
delimiter
ssh.close()
delimiter
zip(*([iter(L)] * 2))
delimiter
img = Image.open(file)
delimiter
df2.show()
delimiter
(dict(zip(dicts, x)) for x in itertools.product(*list(dicts.values())))
delimiter
[x for x in strings if x]
delimiter
sum(v) == sum(v + [n])
delimiter
df.eq(df.iloc[:, (0)], axis=0).all(1)
delimiter
list(d.values())
delimiter
module1.Relay()
delimiter
print(arg, getattr(args, arg))
delimiter
[word for word in words if not word.isdigit()]
delimiter
plt.show()
delimiter
data2 = sorted(data, key=operator.itemgetter(1))
delimiter
plt.show()
delimiter
plt.show()
delimiter
ax.set_xticklabels(labels)
delimiter
print(etree.tostring(root))
delimiter
df = pd.DataFrame(data[1:], columns=data[0])
delimiter
mod = sys.modules[__module__]
delimiter
im2.putdata(list_of_pixels)
delimiter
np.sqrt(s.multiply(s).sum(1))
delimiter
np.tile(data, 5)
delimiter
[0, 0, 1, 1, 1, 1, 1, 0, 0],
delimiter
plt.show()
delimiter
w.writerow(my_dict)
delimiter
pdb.set_trace()
delimiter
QtGui.QMainWindow.__init__(self, parent)
delimiter
print(output.stdout.read())
delimiter
show()
delimiter
print(tuple(itertools.chain.from_iterable(product)))
delimiter
l.sort(key=key)
delimiter
df.groupby([df.a.apply(tuple)])
delimiter
c.save()
delimiter
plt.show()
delimiter
d = dict(zip((o.name for o in object_list), object_list))
delimiter
plt.show()
delimiter
np.repeat(data, 5)
delimiter
pd.concat([df[col].apply(pd.Series) for col in cols], axis=1, keys=cols)
delimiter
pprint.pprint(a, width=1)
delimiter
sum((Counter(d) for d in list(data.values())), Counter())
delimiter
test.__kwdefaults__
delimiter
print(sum(1 for x in arr if x is False))
delimiter
cherrypy.engine.start()
delimiter
plt.show()
delimiter
db.session.add(product_obj)
delimiter
df.iloc[-6:-1, (2)]
delimiter
extmodule.dontoverride()
delimiter
sum([[False, False, True], [True, False, True]])
delimiter
np.linalg.lstsq(A.T, y)
delimiter
value_at_index = list(dic.values())[index]
delimiter
[0, 0, 0, 1, 1, 1, 0, 0, 0],
delimiter
plt.show()
delimiter
random.shuffle(temp)
delimiter
buckets = [0] * 100
delimiter
d2 = dict((k, f(v)) for k, v in list(d.items()))
delimiter
np.putmask(elevation, elevation > 0, np.nan)
delimiter
plt.draw()
delimiter
sorted(vec, key=itemgetter(1), reverse=True)[:5]
delimiter
gtk.main()
delimiter
func(*args, **kwargs)
delimiter
[name for name, age in list(mydict.items()) if age == search_age]
delimiter
somelist.sort(key=predefined_list.index)
delimiter
df = df.apply(myfillna)
delimiter
signal.signal(signal.SIGINT, signal.SIG_DFL)
delimiter
pyplot.show()
delimiter
func.__code__.co_code
delimiter
cursor.execute(sql)
delimiter
self.canvas.draw()
delimiter
deletemyList[-2:], myList[:2]
delimiter
print(np.allclose(sola, solb))
delimiter
zip(*l)
delimiter
df.iloc[:5, :5]
delimiter
set(a) & set(b) & set(c)
delimiter
datetime.datetime(2010, 9, 29, 11, 15)
delimiter
gevent.monkey.patch_all(httplib=True)
delimiter
plt.show()
delimiter
cursor.execute(query, l)
delimiter
self.actionthread.start()
delimiter
instance.instance_method()
delimiter
dict((x, i) for i, x in enumerate(t))
delimiter
pygame.init()
delimiter
ranges = [(n, min(n + step, stop)) for n in range(start, stop, step)]
delimiter
app.register_blueprint(someappmod)
delimiter
sum(int(x) for x in s if x.isdigit())
delimiter
sys.stdout.flush()
delimiter
[x for y in collection for x in y]
delimiter
frame.grid(row=0, column=0)
delimiter
os.path.dirname(sys.argv[0])
delimiter
outfile.close()
delimiter
[(i, [j for j in L if j != i]) for i in L]
delimiter
remote_file.close()
delimiter
np.sum(my_list)
delimiter
[int(i) for i in str(bin(x))[2:]]
delimiter
list(itertools.chain(*list(d.values())))
delimiter
moo.py
delimiter
d = dict((x.key, x) for x in object_list)
delimiter
((x, y) for x in a for y in b)
delimiter
select(L, [2, 5])
delimiter
transposed_l.sort(key=lambda x: x[1], reverse=True)
delimiter
nonVarargMethod(args[0], args[1], args[2])
delimiter
f(*list(range(5000)))
delimiter
print(line)
delimiter
(dict(zip(dicts, x)) for x in product(*iter(dicts.values())))
delimiter
plt.show()
delimiter
shutil.copy(full_file_name, dest)
delimiter
random.seed([x])
delimiter
array([1.05206154, 1.96929465, 0.94590444]), 1
delimiter
plt.show()
delimiter
plt.show()
delimiter
server.stop()
delimiter
ax.yaxis.set_visible(False)
delimiter
{f(k): v for k, v in d.items()}
delimiter
a = [t[1] for t in enumerate(a[1:]) if t[1][1] > a[t[0] - 1][1]]
delimiter
doctest.testmod()
delimiter
[[2, 4, 6], [8, 10, 12], [6, 8, 12]]
delimiter
session.rollback()
delimiter
[i for i, d in enumerate(lod) if 2 in d]
delimiter
OrderedDict(sorted(list(d.items()), key=lambda t: t[0]))
delimiter
file.write(str(formatted))
delimiter
plt.show()
delimiter
DataFrame(values, columns=columns)
delimiter
file = service.files().insert(body=body, media_body=media_body).execute()
delimiter
os.chdir(path)
delimiter
ax.plot_surface(X, Y, Z, facecolors=cm.Oranges(V))
delimiter
sorted(qs, key=lambda x: x.id == id)
delimiter
self.assertEqual(5, self.testme)
delimiter
float(math.factorial(170))
delimiter
hand = dict((k, v) for k, v in hand.items() if v != 0)
delimiter
pdb.set_trace()
delimiter
[item for sub_list in a[1:] for item in sub_list].count(1)
delimiter
kethread.start()
delimiter
json.loads(s)
delimiter
df1.reset_index()
delimiter
B = A[[0, 2], [0, 1], [1, 2]]
delimiter
writer.writerow(row)
delimiter
edges.append((m.group(1), m.group(2)))
delimiter
set.intersection(*map(set, p))
delimiter
print(repr(line))
delimiter
sys.exit()
delimiter
[main_list[x] for x in indexes]
delimiter
df.apply(func, axis=1)
delimiter
sys.exit()
delimiter
f.newmethod()
delimiter
os.remove(filename)
delimiter
print(top[0][1])
delimiter
{k: v for k, v in list(d.items()) if k.startswith(s)}
delimiter
root.mainloop()
delimiter
conn.commit()
delimiter
s = sum(a * b for a, b in zip(list_1, list_2))
delimiter
list(range(10, 0, -1))
delimiter
l1.sort()
delimiter
plt.show()
delimiter
nans, x = np.isnan(y), lambda z: z.nonzero()[0]
delimiter
df.drop_duplicates()
delimiter
db.session.commit()
delimiter
main()
delimiter
list(my_dataframe.columns.values)
delimiter
a[:, :, ::-1, ::-1]
delimiter
C = np.sum(A[:, :, :, (np.newaxis)] * B[:, (np.newaxis), :, :], axis=2)
delimiter
ax1.set_xticklabels([])
delimiter
b = [x[:] for x in a]
delimiter
datetime.utcfromtimestamp(timestamp1)
delimiter
plt.show()
delimiter
self.button.clicked.connect(self.handleButton)
delimiter
np.repeat(np.repeat(a, 2, axis=0), 2, axis=1)
delimiter
a_b = list(set(a) - set(b))
delimiter
new_list.append(f(x))
delimiter
plt.show()
delimiter
plt.show()
delimiter
QtGui.QFrame.__init__(self)
delimiter
pycurl_connect.perform()
delimiter
((s.iloc[::2].values + s.iloc[1::2]) / 2).reset_index(drop=True)
delimiter
list(g)
delimiter
plt.show()
delimiter
(vals == (0, 1)).all(axis=1)
delimiter
np.unravel_index(np.argmax(corr_img), corr_img.shape)
delimiter
element.click()
delimiter
plt.show()
delimiter
writer.writerow(map(quote, row))
delimiter
time.sleep(0.25)
delimiter
deletemy_dict[x]
delimiter
Entry.objects.filter(weekdays=HasBit(WEEKDAYS.fri))
delimiter
any(a_list)
delimiter
ftp.set_pasv(False)
delimiter
d = dict(zip(l, t))
delimiter
__init__.py
delimiter
{i[0]: i[1:] for i in list1}
delimiter
foo(*t)
delimiter
array = np.fromiter(iter(result.items()), dtype=dtype, count=len(result))
delimiter
dict(my_list)
delimiter
ea.Reload()
delimiter
sorted(items, cmp=comparer)
delimiter
plt.show()
delimiter
pd.value_counts(d.values.ravel())
delimiter
int(list(filter(str.isdigit, str1)))
delimiter
[(x, y) for x, y in pairs if x != y]
delimiter
q = Model.objects.filter(Q(field1=f1) | Q(field2=f2))
delimiter
result[k].append(v)
delimiter
process.terminate()
delimiter
print(sys.argv[1])
delimiter
plt.plot(dat0[:, (0)], dat0[:, (1)])
delimiter
aapl.index.to_series().diff().median() / (60 * 60 * 10 ** 9)
delimiter
bids = [int(bid) for bid in bids]
delimiter
output = [value for value, count in list(counts.items()) if count > 1]
delimiter
app.exec_()
delimiter
plt.figure()
delimiter
time.sleep(1)
delimiter
A[0] is A[0]
delimiter
singleitem = mylist.pop()
delimiter
data = np.loadtxt(filename, ndmin=2)
delimiter
min(timeit.repeat(lambda : dict((k, v) for d in (x, y) for k, v in list(d.items()))))
delimiter
now_aware = unaware.replace(tzinfo=pytz.UTC)
delimiter
writer.writerows(data)
delimiter
brr[:] = brr[::-1]
delimiter
ax.set_xlim(0, 10)
delimiter
list2b == sorted(list2b, key=lambda c: list1.index(c))
delimiter
print(sys.argv[1].lower())
delimiter
A[:, (2)]
delimiter
plt.show()
delimiter
ctypes.addressof(bufstr)
delimiter
sys.stdout.write(RESET)
delimiter
q = Queue(maxsize=0)
delimiter
np.concatenate([a[a == i][:2] for i in np.unique(a)])
delimiter
root.mainloop()
delimiter
unittest.TextTestRunner().run(suite)
delimiter
nodebox.__version__
delimiter
[(x + y) for x, y in l]
delimiter
urllib.parse.quote(item.url)
delimiter
new_dict = dict((k, v) for k, v in list(old_dict.items()) if v in allowed_values)
delimiter
ax.yaxis.tick_left()
delimiter
func(that, session, *args, **kwargs)
delimiter
reactor.run()
delimiter
sum(letterGoodness.get(c, 0) for c in yourstring.upper())
delimiter
all_ingredients = Ingredient.objects.filter(recipe__book=my_book)
delimiter
lock = threading.Lock()
delimiter
canvas_obj = self.canvas.create_image(250, 250, image=tkimage)
delimiter
self.button.grid(row=2, column=2, sticky=W)
delimiter
cs.collections[0].get_paths()
delimiter
np.any(a == 2, axis=0) & np.any(a == 5, axis=0)
delimiter
q, bins = pd.qcut(a, 2, retbins=True)
delimiter
f.pack_propagate(0)
delimiter
Matrix = [[(0) for x in range(w)] for y in range(h)]
delimiter
n * factorial(n - 1)
delimiter
{k: v for k, v in list(metadata.items()) if v}
delimiter
self.axes = self.figure.add_subplot(111)
delimiter
s.groupby(s.notnull()[::-1].cumsum()[::-1]).transform(lambda g: g[-1] / g.size)
delimiter
k, v = list(d.items())[0]
delimiter
session.query(JT.aID).filter(not_(JT.bID.in_(ids))).all()
delimiter
datetime.datetime.today().replace(hour=0, minute=0, second=0, microsecond=0)
delimiter
plt.show()
delimiter
arr.sum(axis=0, keepdims=True)
delimiter
print((date_string, dt.date()))
delimiter
[sum(l) for l in l_o_l]
delimiter
np.average(list(map(float, meanNumbers.split())))
delimiter
fig.canvas.draw()
delimiter
result = set(d[0]).intersection(*d)
delimiter
plt.show()
delimiter
self.after(100, self.periodiccall)
delimiter
df.fillna(0, inplace=True)
delimiter
[(sum(x) / len(x)) for x in zip(*a)]
delimiter
instance.__class__.__name__
delimiter
plt.show()
delimiter
threading.Thread.__init__(self)
delimiter
A.shape
delimiter
d = dict(zip(keys, values))
delimiter
client.close()
delimiter
np.repeat(data, data[:, (-1)], axis=0)
delimiter
comport = sys.argv[2]
delimiter
print(now.year, now.month, now.day, now.hour, now.minute, now.second)
delimiter
plt.show()
delimiter
l = [(2 * x) for x in l]
delimiter
all_data = np.concatenate((my_data, new_col), 1)
delimiter
outfile.write(line)
delimiter
connection.commit()
delimiter
line = ser.readline()
delimiter
self.setLayout(self.layout)
delimiter
plt.tight_layout()
delimiter
ax.set_xlim(0, 1)
delimiter
len(your_list) != len(set(your_list))
delimiter
ax2.set_zorder(-1)
delimiter
foo = [{} for _ in range(n)]
delimiter
list(s)
delimiter
dict((k, [v[1] for v in itr]) for k, itr in grob)
delimiter
lambda x: np.dot(A, x) - b
delimiter
getattr(foo, bar)(*params, **keyword_params)
delimiter
Html_file.close()
delimiter
(a > 1) & (a < 5)
delimiter
f(*args, **kwargs)
delimiter
ax1.set_xlim(-4, 4)
delimiter
list(accumu([4, 6, 12]))
delimiter
plt.show()
delimiter
np.multiply(a, b[:, (np.newaxis)])
delimiter
app.run(debug=True)
delimiter
dev.leds()
delimiter
df = pd.concat(list_of_dataframes)
delimiter
y = [int(val) for val in x]
delimiter
plt.plot(x, y)
delimiter
np.where(np.any(a == 2, axis=0) & np.any(a == 5, axis=0))
delimiter
my_list = list(range(1, 1001))
delimiter
new_list_of_lists = map(list, map(intify, list_of_lists))
delimiter
sorted(L, key=operator.itemgetter(1))
delimiter
threading.Timer(2, interrupt).start()
delimiter
list(itertools.chain(*lst))
delimiter
np.arange(new[0]) % old[0]
delimiter
app.run()
delimiter
driver.quit()
delimiter
print(len(path) - 1)
delimiter
print(b[0])
delimiter
[(2, 5), (12, 17)]
delimiter
print(df.loc[i].reset_index())
delimiter
B = np.reshape(A, (-1, ncols))
delimiter
ip = self.request.remote_addr
delimiter
writer.writerows(a)
delimiter
df = df.drop_duplicates()
delimiter
mylist.insert(0, mylist.pop(5))
delimiter
f = lambda x: x * 2
delimiter
f.close()
delimiter
ax.plot(x, y)
delimiter
plt.show()
delimiter
answer.extend(map(str, list(range(int(start), int(end) + 1))))
delimiter
make_adder(5)
delimiter
pyplot.show()
delimiter
list(filter(func, data))
delimiter
plt.show()
delimiter
df = pd.DataFrame(data)
delimiter
{k: d1[k] for k in set(d1).intersection(l1)}
delimiter
nx.topological_sort(G)
delimiter
x = x.split()
delimiter
sys.stdout.close()
delimiter
idx = np.where(xvalues == xvalues[-2])
delimiter
f.close()
delimiter
[(x, y) for x in L for y in L]
delimiter
contents = f.readlines()
delimiter
c = random.choice(a)
delimiter
d = datetime.today() - timedelta(days=days_to_subtract)
delimiter
L.sort()
delimiter
time.sleep(60)
delimiter
driver.quit()
delimiter
plt.show()
delimiter
print(ZipFile(path).namelist())
delimiter
assertTrue(text in self.driver.page_source)
delimiter
np.in1d(a[:, (2)], list(b))
delimiter
df.loc[mask]
delimiter
{k: v for k, v in list(d1.items()) if k in l1}
delimiter
help(bar)
delimiter
setattr(self, key, kwargs[key])
delimiter
L[i:i + 2] = reversed(L[i:i + 2])
delimiter
user.save()
delimiter
pylab.text(max_x, max_y, str((max_x, max_y)))
delimiter
df_with_no_strings = df[~rows_with_strings]
delimiter
deletefoo.fields[-1]
delimiter
df = pd.read_csv(filename, error_bad_lines=False)
delimiter
results.setdefault(i, []).append(benchmark(i))
delimiter
pivoted.cumsum()
delimiter
plt.show()
delimiter
list(str(n) for n in range(10))
delimiter
pool = mp.Pool(processes=1)
delimiter
A[B == 1.0].sum()
delimiter
print(s[1:])
delimiter
br.set_handle_referer(True)
delimiter
plt.show()
delimiter
l = [dict(zip([1], [x])) for x in range(1, 100)]
delimiter
cv2.destroyAllWindows()
delimiter
sys.exit(app.exec_())
delimiter
pkl_file.close()
delimiter
list(gen_items())
delimiter
any(map(lambda v: v in list2, list1))
delimiter
print(some_object.__repr__())
delimiter
np.where((A > 2) & (A < 8))
delimiter
print(et.tostring(tree))
delimiter
HttpResponse(json.dumps(data))
delimiter
sys.exit(0)
delimiter
app.debug = True
delimiter
s.getvalue()
delimiter
ax.set_yticks(ax.get_yticks()[:-1])
delimiter
pool.terminate()
delimiter
a, b, c = func()
delimiter
[(1, 2)]
delimiter
numpy.logical_not(array)
delimiter
json.dumps(dict(foo=42))
delimiter
print(sorted([Card(c[0], c[1]) for e in a for c in e]))
delimiter
print(json.dumps(data, indent=4))
delimiter
myf.close()
delimiter
plt.scatter(x, y, color=next(colors))
delimiter
root.mainloop()
delimiter
len(s) - len(s.lstrip())
delimiter
map(s.__setitem__, a, m)
delimiter
plt.show()
delimiter
f([1, 1, 2], [1, 1])
delimiter
cls.dosomethingelse()
delimiter
ax.set_ylim(ylim)
delimiter
WSGIApplicationGroup % {GLOBAL}
delimiter
yourmodule.py
delimiter
info = json.loads(json.loads(get_info()))
delimiter
plt.show()
delimiter
unittest.main()
delimiter
fig.subplots_adjust(hspace=0.5)
delimiter
output.write(new_line)
delimiter
a = numpy.array(b)
delimiter
painter.restore()
delimiter
globals()
delimiter
driver.switch_to_window(window_after)
delimiter
f.close()
delimiter
ax2.set_rlim([0, 1])
delimiter
ax.xaxis.set_major_formatter(formatter)
delimiter
st = st[:-1]
delimiter
total = sum(int(v) for name, v in table)
delimiter
plt.show()
delimiter
sys.exit(0)
delimiter
np.hstack(np.meshgrid(*L)).swapaxes(0, 1).reshape(ndims, -1).T
delimiter
[(sum(group) / size) for group in zip(*(data[x::size] for x in range(size)))]
delimiter
print(os.lseek(fd, 0, os.SEEK_CUR))
delimiter
plt.show()
delimiter
list(product([a, b, c, d], [x]))
delimiter
a.sum(1) / (a != 0).sum(1)
delimiter
webdriver.Firefox(firefox_profile=fp)
delimiter
sum(1 for x in l if x)
delimiter
plt.show()
delimiter
print(chr(4))
delimiter
sys.stdout.flush()
delimiter
pd.concat([data, ts]).sort_index().interpolate()[ts.index]
delimiter
math.sqrt(x)
delimiter
lambda x, y: (x + y, x - y)
delimiter
json.dump(data, fp, sort_keys=True, indent=4)
delimiter
ax.xaxis.set_minor_locator(mdates.MonthLocator())
delimiter
print((lbl.winfo_width(), lbl.winfo_height()))
delimiter
a[np.mod(np.arange(a.size), 4) != 0]
delimiter
np.where(np.isclose(a, val, tol))
delimiter
ax.plot(x, y)
delimiter
do_stuff()
delimiter
root.mainloop()
delimiter
print(p.communicate(answer)[0])
delimiter
session.commit()
delimiter
widget.show()
delimiter
plt.show()
delimiter
[p for p in process_list if all(e not in p for e in exclude_list)]
delimiter
bad = [x for x in mylist if x not in goodvals]
delimiter
plt.show()
delimiter
num_list[-9:]
delimiter
map(f, my_list)
delimiter
plt.tight_layout()
delimiter
self.redirect(newurl)
delimiter
np.vstack([np.array(u) for u in set([tuple(p) for p in points])])
delimiter
d = dict((m.get(k, k), v) for k, v in list(d.items()))
delimiter
[rex.split(i) for i in sequence_list]
delimiter
D[(idx), :]
delimiter
db.session.commit()
delimiter
hash(repr(d))
delimiter
unittest.main()
delimiter
{d[0]: d[1:] for d in data}
delimiter
np.delete(a, list(range(0, a.shape[0], 8)), axis=0)
delimiter
list(reversed(sorted(a.keys())))
delimiter
dict((v, v ** 2) for v in l)
delimiter
age_list = [int(a[0]) for a in ages_iterator]
delimiter
potion_names = [p.name for p in list_of_potions]
delimiter
ax.xaxis.set_minor_locator(minor_locator)
delimiter
print(today.replace(year=today.year + 1))
delimiter
pd.concat([s, pd.rolling_mean(s, window=4, min_periods=1)], axis=1)
delimiter
self.button[i].grid(sticky=W + E + N + S, row=row, column=col, padx=1, pady=1)
delimiter
time.sleep(5)
delimiter
np.tensordot(a, b, axes=1)
delimiter
(df - 0.2).round()
delimiter
print(etree.tostring(root))
delimiter
plt.show()
delimiter
im = Image.open(f)
delimiter
df.mask(np.random.choice([True, False], size=df.shape, p=[0.2, 0.8]))
delimiter
[x for x in l1 if tuple(x) in intersection]
delimiter
a, b = 5, 8
delimiter
subprocess.Popen(cmd, shell=True, stdout=f, stderr=f)
delimiter
ct.reindex_axis(a_x_b, axis=1).fillna(0)
delimiter
print(a[1][1])
delimiter
sum(1 + count(i) for i in l if isinstance(i, list))
delimiter
print(func(*args))
delimiter
np.random.shuffle(dataset)
delimiter
map(dict, list(dict(sorted(map(sorted, map(dict.items, s)))).items()))
delimiter
plt.show()
delimiter
df.fillna(df.mean())
delimiter
app.run(threaded=True)
delimiter
a.split()
delimiter
plt.show()
delimiter
sys.exit(1)
delimiter
print(m.group())
delimiter
max(index for index, value in data if value == max_value)
delimiter
mylist.sort(key=lambda val: SORT_ORDER[val[1]])
delimiter
row.append(row[0])
delimiter
[name for name in names if any([(p in name) for p in pattern])]
delimiter
count = np.all(listScore == np.array([2, 0]), axis=1).sum()
delimiter
plt.show()
delimiter
list(filter(func, data))
delimiter
arr = np.arange(10).reshape(5, 2)
delimiter
random.shuffle(data)
delimiter
plt.show()
delimiter
f.seek(0)
delimiter
max(s, key=lambda x: x.arity())
delimiter
writer.writerow(row + [row[0]])
delimiter
x = np.fromfile(f, dtype=np.int)
delimiter
sys.stdout = old_stdout
delimiter
pd.to_timedelta(df)
delimiter
sys.exit(1)
delimiter
np.all(a == b)
delimiter
a.take(np.arange(1, 2), axis=1)
delimiter
f.close()
delimiter
dict((x, a.get(x, 0) + b.get(x, 0)) for x in set(a) | set(b))
delimiter
base64.urlsafe_b64decode(uenc)
delimiter
my_func.__doc__
delimiter
WD = os.path.dirname(os.path.realpath(sys.argv[0]))
delimiter
DELTAFETCH_ENABLED = True
delimiter
b.widget().deleteLater()
delimiter
dis.dis(withlocals)
delimiter
np.isclose(a, b)
delimiter
cleaned_list = [_f for _f in some_list if _f]
delimiter
ymin, ymax = axes.get_ylim()
delimiter
self.matches = [s for s in self.options if text in s]
delimiter
pylab.show()
delimiter
lst = [float(x) for x in lst]
delimiter
[tuple(g[1]) for g in itertools.groupby(enumerate(l), lambda i_x: i_x[0] - i_x[1])]
delimiter
wr.writerows(RESULTS)
delimiter
ax.set_ylim([-10, 10])
delimiter
np.hstack((test, test[:, ([0])]))
delimiter
sps_data = sps_data[np.argsort(label_idx)]
delimiter
cursor.execute(sql, args)
delimiter
result = list([_f for _f in orig if _f])
delimiter
self.root.after(1, self.openfile)
delimiter
functools.partial(self, obj)
delimiter
matrix[0].pop()
delimiter
foo()
delimiter
sorted_docs_info = collections.OrderedDict(sorted(docs_info.items()))
delimiter
plt.show()
delimiter
file.close()
delimiter
deleteL[:]
delimiter
next(g)
delimiter
[(a + b) for a, b in zip(A, B)]
delimiter
time.sleep(0.1)
delimiter
time.sleep(interval)
delimiter
time.sleep(1)
delimiter
buckets = [[(0) for col in range(5)] for row in range(10)]
delimiter
load_source(module_name, path_to_file)
delimiter
1, 0, 0, 1, 0, 0, 1, 0, 0
delimiter
set(map(frozenset, lst))
delimiter
print(list(csv.reader(f)))
delimiter
dx, dy = -dy, dx
delimiter
bin(8)
delimiter
plt.show()
delimiter
g0.plot()
delimiter
a[:1000] = [0] * 1000
delimiter
items.sort()
delimiter
s1.combine_first(s2)
delimiter
A[tuple(rc1)], A[tuple(rc2)] = A[tuple(rc2)], A[tuple(rc1)]
delimiter
plt.legend()
delimiter
[list(g) for _, g in groupby(bool_array)]
delimiter
df = df.divide(df.sum(axis=1), axis=0)
delimiter
sys.stdout.flush()
delimiter
[word for word in l if word.isalpha()]
delimiter
np.array([np.where(np.in1d(array, matched))[0] for array in arrays])
delimiter
print(len(set(map(len, my_lists))) <= 1)
delimiter
sys.stdout.flush()
delimiter
dict(d)
delimiter
process.close()
delimiter
list = [(str(a[i]) + str(b[i])) for i in range(len(a))]
delimiter
longest = s1 if len(s1) > len(s2) else s2
delimiter
deleted[max(d, key=d.get)]
delimiter
ax.margins(0.1, 0.1)
delimiter
[i for i, (l1, l2) in enumerate(zip(list1, list2)) if l1 >= 1 and l2 == 0]
delimiter
db.session.commit()
delimiter
plt.show()
delimiter
{k: list(g) for k, g in groupby(sorted(l, key=len), len)}
delimiter
x[np.isnan(x)] = 0
delimiter
fig.subplots_adjust(wspace=0)
delimiter
ax2.set_xticklabels([])
delimiter
df.drop_duplicates()
delimiter
a[[[0] * 5, [1] * 5], index]
delimiter
button.click()
delimiter
smile = [[255], [129], [165], [129], [165], [189], [129], [255]]
delimiter
ax.set_ylim((valmin, valmax))
delimiter
np.delete(a, [2, 4, 5])
delimiter
im.show()
delimiter
cv.CvtColor(img, gray, cv.CV_BGR2GRAY)
delimiter
x[2:6] = []
delimiter
driver = webdriver.Chrome(chrome_options=chromeOptions)
delimiter
sys.exit(main(sys.argv))
delimiter
self.assertEqual(json.loads(call_args[0]), expected)
delimiter
plt.show()
delimiter
a[numpy.nonzero(numpy.in1d(a, b))]
delimiter
int_list = [int(i) for i in line]
delimiter
the_sum = sum(a[k] * b[k] for k in keys)
delimiter
pickle.dumps(data, 0)
delimiter
self.Bind(wx.EVT_LEFT_DOWN, self.OnLeftDown)
delimiter
exit(0)
delimiter
any(c.isalpha() for c in string_2)
delimiter
sum(map(int, zip(*table)[-1]))
delimiter
self.legend.figure.canvas.draw()
delimiter
[[] for _ in range(2)]
delimiter
{k: mylist.count(k) for k in set(mylist)}
delimiter
sum(val for val in l1 if isinstance(val, numbers.Number))
delimiter
sum(counter_list, Counter())
delimiter
plt.show()
delimiter
x.astype(int)
delimiter
sys.executable
delimiter
sys.stdout.flush()
delimiter
con.commit()
delimiter
logging.Handler.__init__(self)
delimiter
tom = [a, b, c]
delimiter
pdb.set_trace()
delimiter
ax.xaxis.set_major_locator(ScaledLocator(dx=6))
delimiter
result = sum(timedeltas, datetime.timedelta())
delimiter
ts[datetime(2011, 1, 8):][0]
delimiter
(CENTROIDS - x.mean()) / x.std()
delimiter
cv.CvtColor(cv_img, cv_img, cv.CV_RGB2BGR)
delimiter
sys.stdout.flush()
delimiter
print([((a + b) / 2) for a, b in zip(data[::2], data[1::2])])
delimiter
session.commit()
delimiter
cv2.destroyAllWindows()
delimiter
[a for a, b in zip(nums, nums[1:] + [not nums[-1]]) if a != b]
delimiter
django.setup()
delimiter
ax.bar(list(range(len(dates))), values)
delimiter
plt.show()
delimiter
sys.exit(0)
delimiter
ax2 = ax.twinx()
delimiter
bool(list(someDict.keys()) & set(someSet))
delimiter
dist = math.hypot(x2 - x1, y2 - y1)
delimiter
rdd1.cartesian(rdd2)
delimiter
someclassname.ask()
delimiter
rbs = np.array([ish[4] for ish in realbooks])
delimiter
plt.show()
delimiter
a.sort(key=lambda x: x[0])
delimiter
[e for e in lelist if e in lestring]
delimiter
pygame.draw.circle(screen, (0, 0, 0), (100, 100), 15, 1)
delimiter
np.where(np.all(np.all(win_img == pattern, axis=-1), axis=-1))
delimiter
MyModel.objects.filter(pk=instance.id).update(**data)
delimiter
log.setLevel(logging.DEBUG)
delimiter
d = dict(zip([o.name for o in object_list], object_list))
delimiter
f.read()
delimiter
time.sleep(10)
delimiter
subprocess.call(args, stdout=FNULL, stderr=FNULL, shell=False)
delimiter
[t for t in enumerate(l)]
delimiter
plt.xlim(-2 * np.pi, 2 * np.pi)
delimiter
[np.ma.array(arr, mask=~c).argmax() for c in cond]
delimiter
a = [1, 2]
delimiter
print(cls.__name__)
delimiter
lst.sort()
delimiter
dict((k, v) for k, v in dictionary.items() if begin <= k <= end)
delimiter
FO.close()
delimiter
print(args)
delimiter
[y for y in x for x in data]
delimiter
y = [x for x in list(dict.keys()) if dict[x] > 0.0]
delimiter
print(a[key])
delimiter
qs.distinct()
delimiter
b = [a.ix[i] for i in a.index if sorted1[i] >= sorted2[i]]
delimiter
bids.sort(key=int, reverse=True)
delimiter
[v for k, v in enumerate(mylist) if k % 2 == 0]
delimiter
unp = msgpack.unpackb(f.read())
delimiter
mydict[new_key] = mydict.pop(old_key)
delimiter
setattr(self, key, value)
delimiter
a = dict.fromkeys(list(range(n)))
delimiter
plt.show()
delimiter
np.in1d(data, np.hstack(test)).reshape(data.shape)
delimiter
(len(word) for word in wordslist)
delimiter
self.data += self.ser.read()
delimiter
main()
delimiter
ws.add_image(img)
delimiter
df.reset_index(level=1, drop=True, inplace=True)
delimiter
df.stack()[df.stack().values == 1].reset_index()
delimiter
urllib.parse.quote_plus(a)
delimiter
any(char.isdigit() for char in s)
delimiter
ax.yaxis.set_ticks([0, 2, 4, 8])
delimiter
bttn_0.grid(row=5, column=0, pady=5, columnspan=2)
delimiter
driver = webdriver.Firefox(firefox_profile=profile)
delimiter
d = dict((str(n), list(range(20))) for n in range(1000000))
delimiter
df.T.drop_duplicates().T
delimiter
pylab.show()
delimiter
lines.sort(key=lambda x: int(x.split()[0]))
delimiter
[0] + [(i + 1) for i in [4, 9, 12, 14, 18]] + [len(bool_array)]
delimiter
datetime.datetime.combine(tdate, datetime.time())
delimiter
subprocess.call(my_cmd, stdout=outfile)
delimiter
x = np.random.randint(0, 20, 1000000)
delimiter
pd.isnull(df).any(1).nonzero()[0]
delimiter
plt.plot(x, y)
delimiter
print(pix[x, y])
delimiter
app.debug = True
delimiter
os.path.abspath(checkIP.__file__)
delimiter
pprint.pprint(obj)
delimiter
client.set_option(new_url)
delimiter
A[0:4][1]
delimiter
re.sub(pattern, replacement, text)
delimiter
master.grid_columnconfigure(0, weight=1)
delimiter
root.mainloop()
delimiter
plt.show()
delimiter
ast.literal_eval(some_string)
delimiter
a.__getitem__(slice(0, 1)).__setitem__(0, 5)
delimiter
bids.append(bid)
delimiter
os.path.dirname(os.path.dirname(file))
delimiter
Thread(target=p.start).start()
delimiter
list(foo)
delimiter
os.remove(f)
delimiter
((m.get(k, k), v) for k, v in list(d.items()))
delimiter
ax.xaxis.set_major_formatter(tkr.FuncFormatter(formatter))
delimiter
y = x.subs({a: b, b: a}, simultaneous=True)
delimiter
writer.writerow(row)
delimiter
OrderedDict((k, queue[key]) for k in key_order)
delimiter
my_model.save()
delimiter
[{y: x[y].lower()} for x in messages for y in x]
delimiter
integer.setParseAction(lambda t: int(t[0]))
delimiter
[list(x) for x in a_strpadded]
delimiter
print(np.where(a == a.min()))
delimiter
[item for item in l for repetitions in range(2)]
delimiter
[x for x in matrix if x[2] == 1.0]
delimiter
[min(j) for i, j in itertools.groupby(A, key=lambda x: x[:7])]
delimiter
RGB_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
delimiter
urllib.request.urlretrieve(stream_url, target_path)
delimiter
d.update((k, v * 0.5) for k, v in list(d.items()))
delimiter
plt.show()
delimiter
res = os.system(sys.argv[1], sys.argv[2])
delimiter
signal.signal(signal.SIGINT, signal_handler)
delimiter
self.Bind(wx.EVT_PAINT, self._onPaint)
delimiter
fcntl.flock(g, fcntl.LOCK_UN)
delimiter
print(json.dumps(json.loads(json_string)))
delimiter
[listofLines[i] for i in sortedIndex]
delimiter
plt.show()
delimiter
numpy.zeros((10, 4, 100))
delimiter
br.set_response(resp)
delimiter
[b.append(item) for item in a if item not in b]
delimiter
time.mktime(d.timetuple())
delimiter
(n + 1) ** 2 == n ** 2 + (2 * n + 1)
delimiter
sys._getframe().__code__.co_argcount
delimiter
gems.add(gem)
delimiter
dict(zip(keys, values))
delimiter
session.close()
delimiter
sys.exit(app.exec_())
delimiter
split_str.groupby([0, 1])[2].apply(fnc)
delimiter
sys.stdout.flush()
delimiter
myfile.write(buffer(c_uncompData_p.raw, 0, c_uncompSize))
delimiter
np.asarray(t)
delimiter
pd.DataFrame(series_data, columns=series_name)
delimiter
plt.show()
delimiter
sys.getsizeof(x)
delimiter
myl[:] = [(x if x != 4 else 44) for x in myl]
delimiter
df.mycolumn.map(func)
delimiter
nested_lst_of_tuples = [tuple(l) for l in nested_lst]
delimiter
appcfg.py
delimiter
app.MainLoop()
delimiter
cmap(np.linspace(0.2, 0.8, 100))
delimiter
self._driver.quit()
delimiter
len(a) - len(a.lstrip())
delimiter
plt.show()
delimiter
self.append(x)
delimiter
sorted(l) == list(range(min(l), max(l) + 1))
delimiter
file_obj.seek(0)
delimiter
print(get_ip())
delimiter
plt.show()
delimiter
grouped.apply(wavg)
delimiter
results = cursor.fetchone()
delimiter
s.lower()
delimiter
map(ord, s)
delimiter
app.run(port=0, debug=True)
delimiter
plt.show()
delimiter
a[:, (b)]
delimiter
sorted(L, key=operator.itemgetter(1))
delimiter
len(mylist) - mylist[::-1].index(myvalue) - 1
delimiter
len(s)
delimiter
plt.show()
delimiter
self.grid_columnconfigure(0, weight=1)
delimiter
n = str(input())
delimiter
map(sum, l) == [n] * len(l)
delimiter
f.write(content)
delimiter
mratings.mean(axis=1)
delimiter
plt.show()
delimiter
plt.show()
delimiter
fu_list = [(k, fus_d.get(k), fus_s.get(k)) for k in s]
delimiter
np.sum(c[:, 1:] == c[:, :-1], axis=1)
delimiter
sum(n * (n - 1) // 2 for n in list(index2count.values()))
delimiter
p[0], p[1]
delimiter
MyClass.Property1
delimiter
a = [int(x) for x in input().split()]
delimiter
all_strings = [s for string_list in list(my_dict.values()) for s in string_list]
delimiter
vsampled = numpy.interp(numpy.arange(t[0], t[-1]), t, v)
delimiter
population = list(itertools.chain(fhd, fhet, fhr))
delimiter
p.getfitness()
delimiter
worst = sorted(Player(v, k) for k, v in list(d.items()))
delimiter
[6, 5, 1]
delimiter
json.dumps(list)
delimiter
f(*args, **kwargs)
delimiter
df_test.iloc[0]
delimiter
pdb.set_trace()
delimiter
cv2.drawContours(image, [ctr], 0, (255, 255, 255), 1)
delimiter
np.random.seed(0)
delimiter
df.head()
delimiter
sorted(iter(d.items()), key=operator.itemgetter(1))
delimiter
list(range(0, 100 + 1, 5))
delimiter
sorted(a, key=lambda x: order_dict[x[0]])
delimiter
plt.show()
delimiter
plt.draw()
delimiter
plt.show()
delimiter
p.terminate()
delimiter
iter_length = len(list(iterable))
delimiter
root.config(menu=menu)
delimiter
np.argwhere(np.isnan(x))
delimiter
assert response.status_code == 200
delimiter
[ks[i] for i in range(len(ks)) if i == 0 or ks[i] != ks[i - 1]]
delimiter
print(df.applymap(lambda x: str(x).isdigit()).T)
delimiter
re.findall(p, test_str)
delimiter
sum(x ** 2) * (x[1] - x[0])
delimiter
json.dump(data, jsonFile)
delimiter
(x * 2 for x in [2, 2])
delimiter
a = [i[0] for i in sorted(zip(a, ind), key=lambda x: x[1])]
delimiter
plt.show()
delimiter
json.dumps(cls=MyEncoder)
delimiter
do_stuff()
delimiter
print(a[:, (0)])
delimiter
template.render(context)
delimiter
workbook.close()
delimiter
arr[np.argsort(arr[:, (1)])]
delimiter
result = datetime.datetime.now() - datetime.timedelta(seconds=X)
delimiter
list.__setitem__(index, value)
delimiter
test_df.where(test_df >= 4)
delimiter
zip([a, b, c, d], repeat(x))
delimiter
session.query(RssFeed).get(1)
delimiter
new_list
delimiter
ivd = {v: k for k, v in list(d.items())}
delimiter
plt.show()
delimiter
sorted(set(mylist), key=lambda x: mylist.index(x))
delimiter
random.shuffle(x)
delimiter
os.system(cmd)
delimiter
lasts.append(bpos)
delimiter
df.agg(*[count(c).alias(c) for c in df.columns]).show()
delimiter
array([0, 2, 1], dtype=int64)
delimiter
m.group(1)
delimiter
logging.getLoggerClass().root.handlers[0].baseFilename
delimiter
np.digitize([1.5], a, right=True)[0]
delimiter
math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)
delimiter
result = max(iter(your_dict.items()), key=operator.itemgetter(1))[0]
delimiter
items = sorted(list(ipCount.items()), key=lambda item: socket.inet_aton(item[0]))
delimiter
myA[(myA > val).nonzero()[0][:2]] = 0
delimiter
intbids = [int(bid) for bid in bids]
delimiter
isinstance(a, Test1)
delimiter
server.quit()
delimiter
dict((k, mydict[k]) for k in keys_to_select)
delimiter
[((index % 8 + 2) * item) for index, item in enumerate(range(1, 21))]
delimiter
df.convert_objects(convert_numeric=True)
delimiter
(lambda a, b: a(a, b))(lambda a, b: b * a(a, b - 1) if b > 0 else 1, num)
delimiter
sys.getsizeof(s)
delimiter
list(itertools.chain.from_iterable(a))
delimiter
df1 = df[(df.a != -1) & (df.b != -1)]
delimiter
df
delimiter
app.mainloop()
delimiter
writer.writerows([[item] for item in new_text_list])
delimiter
list(set(dict_a.values()).intersection(list(dict_b.values())))
delimiter
[my_tuple[isinstance(x, str)].append(x) for x in a_list]
delimiter
[[f for f in family if f != i] for i, family in enumerate(families)]
delimiter
print(f())
delimiter
ax.yaxis.set_major_locator(yloc)
delimiter
os.path.dirname(str(__file__, encoding))
delimiter
best = sorted([Player(v, k) for k, v in list(d.items())], reverse=True)
delimiter
plt.show()
delimiter
print(p.communicate()[0])
delimiter
numpy.dstack((A, B)).transpose(0, 2, 1).reshape(A.shape[0] * 2, A.shape[1])
delimiter
{{request.META.HTTP_NAME}}
delimiter
all(x == mylist[0] for x in mylist)
delimiter
ax.xaxis.set_major_locator(ticker.LogLocator(base=1000.0))
delimiter
Counter(elem[0] for elem in list1)
delimiter
time.sleep(1)
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
slice = arr[0:2, 0:2]
delimiter
a.reshape(-1, m / k, k).swapaxes(0, 1).reshape(-1, k)
delimiter
df.append(row, ignore_index=True)
delimiter
result = sum(some_list[1:])
delimiter
res = [(i if i < 4 else 0) for i in range(1, 6)]
delimiter
print(ET.tostring(root))
delimiter
averages = [((x + y) / 2.0) for x, y in zip(my_list[:-1], my_list[1:])]
delimiter
json_object = json.load(raw)
delimiter
plt.show()
delimiter
indices = np.where(np.in1d(x, y))[0]
delimiter
get_keyring()
delimiter
print([x for x in a if x in b])
delimiter
new_dict.setdefault(v, []).append(k)
delimiter
newList = [[ch, len(ch), ch.upper()] for ch in sent]
delimiter
np.sum(boolarr)
delimiter
form = UserForm(user=request.user)
delimiter
file.close()
delimiter
ROOT_DIR = os.path.dirname(os.path.abspath(__file__))
delimiter
my_dataframe.columns.values.tolist()
delimiter
[k for k in seq if counts[k] == 1]
delimiter
result = [r for r in x if not any(z in r for z in y)]
delimiter
sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)
delimiter
df.applymap(np.isreal).all(1)
delimiter
self.Bind(wx.EVT_SIZE, self.OnSize)
delimiter
print(f.readlines())
delimiter
db.CommitTrans()
delimiter
list(im.getdata())
delimiter
plt.show()
delimiter
[(x + y) for x, y in zip(string, string[i:])]
delimiter
np.array(a)
delimiter
cherrypy.session.regenerate()
delimiter
list_of_lists = [[] for _ in columns]
delimiter
print(recursive_dict_eval(my_dict))
delimiter
plt.tight_layout()
delimiter
list(conn.execute(query).keys())
delimiter
nf.write(str(random.randint(0, 1000)))
delimiter
plt.show()
delimiter
set(itertools.permutations(lst))
delimiter
pipe.close()
delimiter
datetime.timedelta(0, 540)
delimiter
t.start()
delimiter
f = lambda x, y: x[0] + x[1] + (y[0] + y[1])
delimiter
list_1, list_2 = zip(*((x, y) for x, y in zip(list_1, list_2) if f(x)))
delimiter
os.path.abspath
delimiter
df = pd.concat(dfs)
delimiter
ax.set_xticks(xticks)
delimiter
path = os.path.dirname(os.path.realpath(__file__))
delimiter
db.session.commit()
delimiter
numpy.array([sub_array for sub_array in counts_array])
delimiter
mysocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
delimiter
self.Bind(wx.EVT_CHAR_HOOK, self.onKey)
delimiter
t = s.reshape(-1, 2)
delimiter
{{(news.description | truncatewords): 50}}
delimiter
sum(map(sum, input))
delimiter
plt.show()
delimiter
list(range(2, 2))
delimiter
list1.sort(key=int)
delimiter
sys.stdout.flush()
delimiter
cluster.fit(X)
delimiter
print(et.tostring(tree, pretty_print=True))
delimiter
print({k: v for k, v in mime_types.items()})
delimiter
fig.tight_layout()
delimiter
QtWidgets.QMainWindow.__init__(self, parent)
delimiter
list(filter(os.path.isdir, [os.path.join(d, f) for f in os.listdir(d)]))
delimiter
date_list = [(base - datetime.timedelta(days=x)) for x in range(0, numdays)]
delimiter
print(np.array(list(mystr)))
delimiter
conn.close()
delimiter
print(json.dumps(info))
delimiter
print(list(range(n, (m + 1) * n, n)))
delimiter
set(mylist)
delimiter
plt.colorbar()
delimiter
pyplot.show()
delimiter
print(is_cardano_triplet(2, 1, 5))
delimiter
btn.grid(column=x, row=y, sticky=N + S + E + W)
delimiter
raw_img_data = img.tostring()
delimiter
a.__class__.print_x(b)
delimiter
model.fit(X, y)
delimiter
keep.update(yoursequenceofvalues)
delimiter
df.groupby(lambda x: x, axis=1).sum()
delimiter
ax.xaxis.set_major_formatter(mdates.AutoDateFormatter(locator))
delimiter
image.save(image_out_path)
delimiter
main()
delimiter
res = pd.DataFrame(json.loads(out))
delimiter
l = list(gen_items())
delimiter
mymodel.objects.get(pk=a[i])
delimiter
[int(t) for t in (True, True, False)]
delimiter
config.write(configfile)
delimiter
frame.pack()
delimiter
logger.setLevel(logging.DEBUG)
delimiter
df[df.columns[2]]
delimiter
documents = [sub_list[0] for sub_list in documents]
delimiter
sorted(x) == sorted(y)
delimiter
plt.show()
delimiter
logging.getLogger().addHandler(logging.StreamHandler())
delimiter
time.sleep(1)
delimiter
data = [([0] * cols) for i in range(rows)]
delimiter
s.start()
delimiter
urllib.request.urlopen(req)
delimiter
frw.close()
delimiter
plt.show()
delimiter
pool.apply_async(test, (t,), dict(arg2=5))
delimiter
profile.save()
delimiter
np.logical_or(np.logical_or(x, y), z)
delimiter
df = df.astype(str)
delimiter
good_data = data[:, (data[0] == 1)]
delimiter
(x.count(item) for item in set(x))
delimiter
[_f for _f in lis if _f]
delimiter
df = pd.read_sql(query.statement, query.session.bind)
delimiter
w.pack()
delimiter
con.commit()
delimiter
subList = [theList[n:n + N] for n in range(0, len(theList), N)]
delimiter
root.mainloop()
delimiter
result_dict = [u.__dict__ for u in my_query.all()]
delimiter
list(OrderedDict.fromkeys(my_list))
delimiter
arr[np.isnan(arr).cumsum(1) > 0] = np.nan
delimiter
y = numpy.r_[0, x[:-1]]
delimiter
[item for item in full_list if all(x not in omit for x in item)]
delimiter
df = df[df.line_race.notnull()]
delimiter
self.thread.start()
delimiter
time.sleep(1)
delimiter
isinstance(s, str)
delimiter
img[..., ::-1]
delimiter
app.mainloop()
delimiter
(x * sin(y)).subs([(x, y), (y, x)], simultaneous=True)
delimiter
df.append(duplicates).sort_index()
delimiter
set(second_list).difference(map(f, first_list))
delimiter
df.drop(remove, axis=1, inplace=True)
delimiter
f.apply(clean, axis=1)
delimiter
max((v, i) for i, v in enumerate(a))[1]
delimiter
self.a, self.b = a, b
delimiter
self.grid_columnconfigure(1, weight=1)
delimiter
conn.commit()
delimiter
print(datetime.now())
delimiter
np.sum(np.abs(x) ** 2, axis=-1) ** (1.0 / 2)
delimiter
pylab.show()
delimiter
logging.getLogger().addHandler(handler)
delimiter
cnxn.commit()
delimiter
datetime.date(2015, 8, 9).isocalendar()[1]
delimiter
br.set_handle_equiv(True)
delimiter
combs.extend(els)
delimiter
DateR = re.compile(Date)
delimiter
ax.set_ylim(0, 1)
delimiter
datetime.datetime.now() - datetime.timedelta(minutes=15)
delimiter
my_randoms = random.sample(range(1, 101), 10)
delimiter
np.random.uniform(-10, 10, size=(1, 5, 1))
delimiter
dict((key, getattr(self, key)) for key in keys)
delimiter
new_list_of_dict = [new_dict(d) for d in list_of_dict]
delimiter
df = pd.concat([pd.read_sql_query(q, connection) for q in queries])
delimiter
np.array([x for x in set(tuple(x) for x in A) & set(tuple(x) for x in B)])
delimiter
{{d.content}}
delimiter
np.array([[0], [1]])
delimiter
bytearray(100)
delimiter
[0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
delimiter
conn.commit()
delimiter
results = [int(match.group(1)) for match in matches]
delimiter
root.mainloop()
delimiter
os.uname()[1]
delimiter
f.write(etree.tostring(root, pretty_print=True))
delimiter
[val for i, val in enumerate(values) if i not in indices]
delimiter
[some_string[i:i + 2] for i in range(0, len(some_string), 2)]
delimiter
termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)
delimiter
ds.to_netcdf(new_file)
delimiter
cython.uchar
delimiter
plt.show()
delimiter
zf.close()
delimiter
a[:, :, ([5])].shape
delimiter
tuple(x for sublist in base_lists for x in sublist)
delimiter
expense.save()
delimiter
urllib.parse.unquote(url)
delimiter
pygame.display.flip()
delimiter
plt.show()
delimiter
conn.commit()
delimiter
pd.DataFrame([data])
delimiter
admin.site.register(User, UserProfileAdmin)
delimiter
list(groupings.values())
delimiter
np.argmin(df.applymap(np.isreal).all(1))
delimiter
list(flatten(a))
delimiter
df.max() > 0
delimiter
plt.show()
delimiter
print(et.tostring(tree, pretty_print=True))
delimiter
max(array.flatten())
delimiter
df.append([df_try] * 5, ignore_index=True)
delimiter
result = [i for k, g in groupby(lst, bool) for i in ((sum(g),) if k else g)]
delimiter
plt.show()
delimiter
my_process.kill()
delimiter
print(linalg.solve(A, x))
delimiter
[s[i:i + 2] for i in range(0, len(s), 2)]
delimiter
data = request.stream.read()
delimiter
sum(delta_list, timedelta()) / len(delta_list)
delimiter
data = (float(row[1]) for row in incsv)
delimiter
[1, 2, 1, 1, 2, 1, 2, 2, 1, 2]
delimiter
time.sleep(0.001)
delimiter
db.session.commit()
delimiter
val, idx = min((val, idx) for idx, val in enumerate(my_list))
delimiter
sys.exit(app.exec_())
delimiter
ax2.yaxis.set_major_locator(matplotlib.ticker.LinearLocator(nticks))
delimiter
plt.show()
delimiter
sys.stdout.write(line)
delimiter
time.sleep(0.1)
delimiter
print(new_func.__name__)
delimiter
plt.show()
delimiter
lambda x, i=i: x % i == 0
delimiter
obj = result.json()
delimiter
root.mainloop()
delimiter
exit()
delimiter
self.view.setModel(model)
delimiter
conn.commit()
delimiter
np.dot(a, b)
delimiter
print(json.loads(json_string))
delimiter
a[np.arange(a.shape[0])[:, (np.newaxis)], i]
delimiter
pyplot.plot([point[0], point2[0]], [point[1], point2[1]])
delimiter
MyApp().run()
delimiter
c = b[1:]
delimiter
pool = multiprocessing.Pool(2)
delimiter
ax1.set_yticklabels([])
delimiter
subprocess.call(cmd)
delimiter
set(pd.DataFrame(df.genres.tolist()).stack().tolist())
delimiter
array([0, 7, 1, 0, 4, 0, 0, 0, 0, 1, 0, 0, 0])
delimiter
np.ravel_multi_index(X.T, dims)
delimiter
[x for t in zip(*lists) for x in t]
delimiter
print(np.sort(np.partition(y, -10, axis=1)[:, -10:], axis=1))
delimiter
df.index.get_loc(ds)
delimiter
[entry for tag in tags for entry in entries if tag in entry]
delimiter
outputfile.close()
delimiter
pd.concat([s1, s2], axis=1)
delimiter
cipher.decrypt(base64.b64decode(text))
delimiter
len(set(map(len, (a, b, c)))) == 1
delimiter
list(bin(6)[2:])
delimiter
self.Bind(wx.EVT_ENTER_WINDOW, self._onMouseEnter)
delimiter
sorted(top_n, key=lambda t: (-t[1], t[0]))
delimiter
setattr(self, key, initial_data[key])
delimiter
b.__class__.__class__
delimiter
soup = BeautifulSoup.BeautifulSoup(html_string)
delimiter
[item for item in l for _ in range(r)]
delimiter
yaml.dump(dataMap, f, default_flow_style=False)
delimiter
rdd = df.rdd.map(list)
delimiter
d += dt.timedelta(days=1)
delimiter
root.destroy()
delimiter
[1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
delimiter
ax6.set_yticks(np.linspace(0, 1, 7))
delimiter
request = urllib.request.Request(url)
delimiter
print(df.to_html())
delimiter
permissions = Permission.objects.filter(user=user)
delimiter
[(n - 9 * int((n - 1) / 9)) for n in list1]
delimiter
requests.post(url, params=params, data=json.dumps(data), headers=headers)
delimiter
c = dict(a, **b)
delimiter
array([[[4, 5], [12, 14], [24, 27]], [[0, 0], [6, 7], [-8, -9]]])
delimiter
plt.show()
delimiter
df[(df.a > 0) & df.index.isin([0, 2, 4])]
delimiter
f.close()
delimiter
plt.show()
delimiter
sort(data, key=datekey, reverse=True)
delimiter
time.sleep(1)
delimiter
profile.save()
delimiter
plt.show()
delimiter
sys.stdout = self._stdout
delimiter
session.commit()
delimiter
c = [x[0] for x in A]
delimiter
json.dumps(o)
delimiter
sorted(unsorted_list, key=order.__getitem__)
delimiter
self.lc.Bind(wx.EVT_LIST_BEGIN_DRAG, self.onDrag)
delimiter
[(A[x], B[x % len(B)]) for x in range(len(A))]
delimiter
value = list(d.values())[index]
delimiter
plt.show()
delimiter
pattern.match(string)
delimiter
g.add_nodes_from(l)
delimiter
np.log(df / df.shift())
delimiter
br.set_cookiejar(cj)
delimiter
plt.show()
delimiter
files = sorted((f for f in files if firstFile <= int(f) < lastFile), key=int)
delimiter
time.sleep(2)
delimiter
l[len(l):-len(l) - 1:-1]
delimiter
sum(1 for _ in iterable)
delimiter
df = pd.DataFrame(list_of_series, columns=cols)
delimiter
d = {k: (lambda s, k=k: s * A[k]) for k in range(n)}
delimiter
ax1.set_xlim([0, 5])
delimiter
signchange[0] = 0
delimiter
[(p[0], sum(p[1:]) / 2.0) for p in PlayerList]
delimiter
plt.show()
delimiter
set(a).intersection(b)
delimiter
summary_dict = {c: [] for c in new.columns[1:]}
delimiter
df.merge(s.to_frame(), left_index=True, right_index=True)
delimiter
[[i for i in sublist if counts[i] == 1] for sublist in mylist]
delimiter
np.matmul(a, b)
delimiter
buckets = [[0] * 100] * 100
delimiter
ax.set_ylim(-5, 5)
delimiter
next((a for a in s if s.count(a) == 1))
delimiter
bigList.sort(key=operator.itemgetter(*args))
delimiter
print(sum(1 for elem in list1 if elem[0] == entry[0]))
delimiter
map(tuple, map(flatten, zip(a, b, c)))
delimiter
print(etree.tostring(root, pretty_print=True))
delimiter
finder.score_ngrams(bigram_measures.pmi)
delimiter
print(np.nanmean(arr, axis=0))
delimiter
ivd = dict((v, k) for k, v in list(d.items()))
delimiter
a[np.arange(np.shape(a)[0])[:, (np.newaxis)], np.argsort(a)]
delimiter
keys = set(l1).intersection(d1)
delimiter
df = pd.concat([df, dummy_df], axis=1)
delimiter
doc.toxml()
delimiter
isinstance(fn, collections.Callable)
delimiter
df.reindex(prev_dates.union(df.index))
delimiter
foo.save()
delimiter
len(words)
delimiter
MainWindow.show()
delimiter
map(centroids.__delitem__, sorted(index, reverse=True))
delimiter
a = [0, 1]
delimiter
testDf.iloc[:, 1:].stack().groupby(level=0).nunique()
delimiter
np.where(np.all(a == b, axis=1))
delimiter
s = set(lst)
delimiter
plt.show()
delimiter
print([item for item, count in list(collections.Counter(a).items()) if count > 1])
delimiter
outfile.writelines(lines)
delimiter
iqr = np.subtract(*np.percentile(x, [75, 25]))
delimiter
product([[1, 2], [4, 5]])
delimiter
print({k: round(v) for k, v in x.items()})
delimiter
array([[1, 0, 1], [2, 0, 1]])
delimiter
Foo.allocate_ids(max=26740080011050)
delimiter
sys.exit(test())
delimiter
x_pieces = [x[i:i + step] for i in range(0, len(x), step)]
delimiter
hex(random.randint(0, 16777215))[2:].upper()
delimiter
numpy.vstack((a, b, c)).T
delimiter
server.serve_forever()
delimiter
B = list(A[0])
delimiter
b = [x for x in a if x not in itemsToRemove]
delimiter
plt.show()
delimiter
df = pd.DataFrame(df_dict)
delimiter
intersect = {key: [o, spec2[key]] for key, o in list(spec1.items()) if key in spec2}
delimiter
root.mainloop()
delimiter
fruits = {k: [] for k in names}
delimiter
args = parser.parse_args()
delimiter
plt.show()
delimiter
d.setdefault(x, []).append(y)
delimiter
json.JSONEncoder.default(self, obj)
delimiter
(x - y for x, y in it.izip(a[1:], a))
delimiter
c = a[(np.searchsorted(a[:, (0)], b)), :]
delimiter
np.concatenate([[88], a, [77]])
delimiter
plt.show()
delimiter
plt.show()
delimiter
pylab.show()
delimiter
time.sleep(0.01)
delimiter
plt.show()
delimiter
r.setdefault(key, []).append(lst2dct(val))
delimiter
admin.site.register(Email, EmailAdmin)
delimiter
len(arr)
delimiter
size = fields.IntegerRangeField(min_value=1, max_value=50)
delimiter
print(element.tag, element.text, element.tail)
delimiter
app.exec_()
delimiter
reactor.run()
delimiter
help(assign2)
delimiter
d = dict([(k, v) for k, v in zip(l[::2], l[1::2])])
delimiter
np.array([[d[str(i)], d[str(j)]] for i, j in A])
delimiter
self.response.out.write(simplejson.dumps(data))
delimiter
tst.save()
delimiter
list(range(0, 10, 2))
delimiter
df[(df[[0, 1]] > 0).all(1)]
delimiter
cnxn.commit()
delimiter
df.where(~outliers_low, down_quantiles, axis=1)
delimiter
datetime.datetime(*d.timetuple()[:6])
delimiter
GC.remove_edge(clique[0], clique[1])
delimiter
ax1.set_ylim(0, 1)
delimiter
gca().xaxis.set_major_formatter(xfmt)
delimiter
myMethod(myVariable, *myTuple)
delimiter
print(np.unravel_index(result.argmax(), result.shape))
delimiter
ipdb.set_trace()
delimiter
plt.show()
delimiter
cursor = conn.cursor(MySQLdb.cursors.DictCursor)
delimiter
np.fill_diagonal(out, np.diag(A))
delimiter
big = np.random.randint(-10, 10, size=10000000)
delimiter
b = [list(x) for x in b_set]
delimiter
ax.plot(x, y)
delimiter
json.dumps(o)
delimiter
x ** 2 + 1
delimiter
ax.yaxis.set_major_formatter(mpl.ticker.FuncFormatter(mjrFormatter))
delimiter
msg.send()
delimiter
print(somefake.readlines())
delimiter
C = [[(0) for row in range(len(A))] for col in range(len(B[0]))]
delimiter
db.Close()
delimiter
ax.get_xaxis().set_minor_locator(mpl.ticker.AutoMinorLocator())
delimiter
pd.DataFrame(data, tid1, ucat)
delimiter
file = forms.FileField(required=False)
delimiter
logging.getLogger(__name__).setLevel(logging.WARNING)
delimiter
my_dict = {k: [] for k in keys}
delimiter
input_seq[ix1], input_seq[ix2] = input_seq[ix2], input_seq[ix1]
delimiter
math.sqrt((p0[0] - p1[0]) ** 2 + (p0[1] - p1[1]) ** 2)
delimiter
app.mainloop()
delimiter
ax.scatter(x, y)
delimiter
d = {c: i for i, c in enumerate(ascii_lowercase, 1)}
delimiter
conn.commit()
delimiter
self.assertTrue(issubclass(QuizForm, forms.Form))
delimiter
cursor.execute(sql, args)
delimiter
conn.execute(sql, list)
delimiter
dict_compare(dict_a, dict_b)
delimiter
np.arange(new[1]) % old[1]
delimiter
root.mainloop()
delimiter
aapl.index.to_series().diff().mean() / (60 * 60 * 10 ** 9)
delimiter
shapesMatch([(0, 0), (1, 0), (1, 1), (2, 1), (2, 2), (0, 2)], l_shape)
delimiter
(my_array[:, (np.newaxis)] == my_array).all(axis=2).sum(axis=1)
delimiter
[d[k] for k in lst]
delimiter
[i for i, x in enumerate(t) if x]
delimiter
traceback.print_stack()
delimiter
time.sleep(1)
delimiter
Entry.objects.bulk_create([Entry(id=x) for x in list])
delimiter
jsonify(json_list=qryresult.all())
delimiter
dict(a)
delimiter
print(soup.prettify())
delimiter
{{myexample}}
delimiter
b = dict(zip(i, i))
delimiter
self.transport.write(self.message.encode())
delimiter
np.sort(m)[:, -N:]
delimiter
array([[4, 5], [1, 4]])
delimiter
foo.__class__.__class__
delimiter
set(listA) & set(listB)
delimiter
dict(list(x.items()) | list(y.items()))
delimiter
[e for l in lst for e in l]
delimiter
[y for y in listOfLists if y[x].isdigit()]
delimiter
result.append(os.path.join(root, name))
delimiter
setattr(self, pointer, group)
delimiter
plt.ylim(-6, 6)
delimiter
a[[0, 1], [1, 2], 2]
delimiter
raise NotImplementedError()
delimiter
sum(1 for _ in takewhile(lambda x: x == a[0], a))
delimiter
i = int(math.floor(x) - 1)
delimiter
[(x, y) for x, y, label in data_one]
delimiter
jdf = df._jdf
delimiter
pprint(dict(grouped_by_soundex))
delimiter
portalocker.lock(file, flags)
delimiter
print(m.group(1))
delimiter
hand = {k: v for k, v in hand.items() if v != 0}
delimiter
ftp.quit()
delimiter
red, green, blue, alpha = img.split()
delimiter
nx.draw_networkx(G)
delimiter
pl.show()
delimiter
f = open(os.path.join(sub_dir, file))
delimiter
[[copy.deepcopy(foo) for x in range(10)] for y in range(10)]
delimiter
dict((x1, (x0, x2)) for x0, x1, x2 in zip(x[:-2], x[1:-1], x[2:]))
delimiter
df.div(df.sum(1), axis=0)
delimiter
image = cv2.cvtColor(image, cv2.cv.CV_BGR2RGB)
delimiter
dill.pickles(f)
delimiter
m = sqrt(a ** 2 + b ** 2)
delimiter
plt.show()
delimiter
sys.stdout.close()
delimiter
df.reindex(df.index.drop(1))
delimiter
x[index] if len(x) > index else default
delimiter
self.show()
delimiter
cursor.execute(query_insert, data * 2)
delimiter
canvas.config(scrollregion=canvas.bbox(ALL))
delimiter
list(itertools.chain(*list(foo.values())))
delimiter
plt.show()
delimiter
logging.handlers.pop()
delimiter
result = [numbers[i] for i in indices]
delimiter
Hsub = H[1:H.shape[0] - 1, 1:H.shape[1] - 1]
delimiter
logging.config.stopListening()
delimiter
ax.plot(list(range(10)), list(range(10)))
delimiter
[0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1]
delimiter
app.run(debug=True)
delimiter
random.seed(SEED)
delimiter
plt.show()
delimiter
print(proc.stdout.readline())
delimiter
pd.DataFrame(L)
delimiter
plt.show()
delimiter
cursor.execute(sql, (val1, val2))
delimiter
random.choice(string.ascii_letters)
delimiter
User.query.filter_by(**kwargs)
delimiter
array([0, 1, 0, 0])
delimiter
df.drop(df.columns[[1, 69]], axis=1, inplace=True)
delimiter
a = np.delete(a, zero_row, 0)
delimiter
file_writer.writerow([x[i] for x in lol])
delimiter
g.filter(lambda x: len(x) > 1)
delimiter
df.T.groupby(level=0).first().T
delimiter
sorted_df = df.sort_values(df.last_valid_index(), axis=1)
delimiter
[[0, 1, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [0, 1, 0]]
delimiter
tornado.ioloop.IOLoop.instance().start()
delimiter
[sympy.diff(sum(m * m.T), i) for i in m]
delimiter
programs = tapjoy - game1, tapjoy - game2
delimiter
arr[[2, 1]]
delimiter
t.start()
delimiter
np.in1d(fake, [0, 2, 6, 8]).reshape(fake.shape)
delimiter
thread.start_new_thread(interrupt_user, ())
delimiter
requests.post(url, data=data)
delimiter
sys.stdout.flush()
delimiter
5.55 % 1
delimiter
json_string = json.dumps(row)
delimiter
s.flush()
delimiter
sys.stdout.flush()
delimiter
plt.show()
delimiter
len(os.listdir(directory))
delimiter
print(socket.gethostbyname_ex(socket.gethostname())[2])
delimiter
cgi.parse_qs(qs)
delimiter
all(0 < n < 50 for n in thetuple)
delimiter
list_of_nums[:] = [x for x in list_of_nums if x != 2]
delimiter
lambda m: replacement_dict.get(m.group(), m.group())
delimiter
sum([i for i in l1 if isinstance(i, int)])
delimiter
[[k, len(list(g))] for k, g in groupby(strs)]
delimiter
ax1.set_yticks([int(j) for j in range(0, 4)])
delimiter
plt.subplot(122), plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
delimiter
im = cv2.imread(path, -1)
delimiter
zip(xnew[1:], ynew[1:])
delimiter
f = lambda x, a=a: x ** a
delimiter
pygame.mixer.music.play()
delimiter
django.setup()
delimiter
datetime.date.today()
delimiter
zip(*filterer(list1, list2))
delimiter
max(l1, l2, key=len)
delimiter
numpy.sqrt(numpy.sum((A - B) ** 2))
delimiter
ax.plot(x, y, z)
delimiter
__init__.py
delimiter
np.argsort(K)[-5:]
delimiter
getattr(module_a, mod)()
delimiter
c[a & b]
delimiter
lol = lambda lst, sz: [lst[i:i + sz] for i in range(0, len(lst), sz)]
delimiter
output_file.close()
delimiter
GPIO.output(4, False)
delimiter
[2, 5, 7, 8, 9, 12]
delimiter
min(alist, key=itemgetter(1))[1], max(alist, key=itemgetter(1))[1]
delimiter
main()
delimiter
setattr(self, k, v)
delimiter
a[~np.isnan(a).any(axis=1)]
delimiter
scipy.signal.ltisys.lti
delimiter
dfUnstacked2.columns
delimiter
meta.Session.commit()
delimiter
self.layout.addWidget(self.button)
delimiter
np.tensordot(A, B, axes=[[0, 1], [0, 2]])
delimiter
root.mainloop()
delimiter
result = set(d[0]).intersection(*d[:1])
delimiter
self.root.mainloop()
delimiter
gevent.wait()
delimiter
sess.run(y, feed_dict={i: d for i, d in zip(inputs, data)})
delimiter
c = list(chain(*zip(a, b)))
delimiter
response = requests.post(url, data=json.dumps(payload), headers=headers)
delimiter
math.isnan(x)
delimiter
logger.setLevel(logging.INFO)
delimiter
255, 255, 255
delimiter
{k: v for k, v in d.items() if k.startswith(s)}
delimiter
plt.show()
delimiter
(dict(x=x[ii], y=y[ii], z=z[ii]) for ii in range(10))
delimiter
time.sleep(1000)
delimiter
new_module = __import__(modulename)
delimiter
driver.quit()
delimiter
print(my_list)
delimiter
result = json.dumps(response[1])
delimiter
s = map(sum, zip(*([s] * 2)))
delimiter
max_index = max(max_index, index)
delimiter
print(repr(input()))
delimiter
timeit(lambda : list(test(12, 5)), number=1)
delimiter
root.mainloop()
delimiter
striped = [l.split() for l in [c.strip() for c in file_desc.readlines()] if l]
delimiter
test.dosomethingelse()
delimiter
time.sleep(1)
delimiter
plt.show()
delimiter
np.exp(2j * np.pi * np.random.rand(n, 1)).view(dtype=np.float64)
delimiter
setattr(self, k, kwargs[k])
delimiter
d.setdefault(k, []).append(v)
delimiter
b2[np.in1d(b1, a)]
delimiter
[x for t in a for x in t]
delimiter
root.mainloop()
delimiter
f.close()
delimiter
temp = lambda x, i=i: x + i
delimiter
s * a == s * a + s * 0
delimiter
plt.plot(*zip(*a))
delimiter
dict.fromkeys(my_list)
delimiter
plt.show()
delimiter
ax.axes.get_yaxis().set_visible(False)
delimiter
object = object.__iadd__(value)
delimiter
myList[:] = [x for x in myList if x not in totoss]
delimiter
time.sleep(60)
delimiter
dict(lst)
delimiter
a = a[0:100]
delimiter
parser.parse_args()
delimiter
workbook.close()
delimiter
__init__.py
delimiter
numpy.random.seed(42)
delimiter
canvas.pack(side=LEFT, expand=True, fill=BOTH)
delimiter
self.write(jsonp)
delimiter
conn.commit()
delimiter
self.grid_rowconfigure(0, weight=1)
delimiter
Foobar.objects.filter(Q(blah=1) ^ Q(bar=2))
delimiter
deletemylist[-2:]
delimiter
plt.show()
delimiter
time.sleep(5)
delimiter
s = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
delimiter
plt.show()
delimiter
worker.start()
delimiter
plt.figure()
delimiter
child.kill()
delimiter
[item for item in yourlist if item % 2]
delimiter
[int(i in locs) for i in range(size)]
delimiter
time.sleep(2)
delimiter
s.groupby(s.index.weekday).transform(lambda x: pd.rolling_mean(x, window=n))
delimiter
plt.show()
delimiter
[x for x in matrix if x[2] == 0.0]
delimiter
ax.xaxis.set_major_formatter(ScaledFormatter(dx=6))
delimiter
s.quit()
delimiter
doc = lxml.html.fromstring(res.content)
delimiter
time.time()
delimiter
set(a[i] for i in range(1, len(a)) if a[i] == a[i - 1])
delimiter
A[np.isnan(A)] = 0.0
delimiter
new_list = [dict((transform[k], v) for k, v in list(d.items())) for d in old_list]
delimiter
sys.path.append(root)
delimiter
plt.show()
delimiter
max(t, key=lambda e: (-e[1], e[2]))
delimiter
regex.findall(s)
delimiter
result_list = list(map(list, deduped))
delimiter
f.seek(0)
delimiter
display.sendstop()
delimiter
input.close()
delimiter
counter_list = [item for item in counter_list if item]
delimiter
driver.implicitly_wait(secs)
delimiter
data.groupby([lambda x: x.year, lambda x: x.time])
delimiter
plt.show()
delimiter
plt.xticks(list(range(10)), labels)
delimiter
res = service.cse().list(q=search_term, cx=my_cse_id).execute()
delimiter
os.rmdir(temp_dir)
delimiter
plt.show()
delimiter
subprocess.call(cmd, shell=True)
delimiter
cur.execute(query, (sortname, limit1, limit2))
delimiter
print([d.isoformat() for d in get_week(datetime.datetime.now().date())])
delimiter
root.mainloop()
delimiter
bisect.bisect_left(mylist, compareValue)
delimiter
spam_list = [spam_list[i] for i in spam_order]
delimiter
ax.set_xlim([0, N])
delimiter
fh4.close()
delimiter
plot(x, y)
delimiter
np.vstack({tuple(row) for row in a})
delimiter
ser.read(5)
delimiter
random.sample(list(range(1, 10)), 10 - 1)
delimiter
l = L[1::2]
delimiter
plt.show()
delimiter
b = a[:, :, ::-1]
delimiter
parser.parse_args()
delimiter
[(a % 1) for a in l]
delimiter
se2.commit()
delimiter
[j for i in x for j in i]
delimiter
print(np.allclose(cols, cols2))
delimiter
data.sort(key=lambda entry: entry[1], reverse=True)
delimiter
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
db.session.commit()
delimiter
time.sleep(1)
delimiter
l[::-1]
delimiter
rolling_corr.iloc[-200:].mean(axis=0)
delimiter
list(itertools.permutations(set([1, 1, 2, 2])))
delimiter
[t for t in mylist if t[0] == 10]
delimiter
df.isnull().values.ravel().sum()
delimiter
unittest.main()
delimiter
a[a < 0] += 1
delimiter
new_list = [foo for foo in foos if foo.location == 2]
delimiter
a.reshape(-1, m / k, k).transpose(1, 0, 2).reshape(-1, k)
delimiter
socket.setdefaulttimeout(15)
delimiter
print(list(chain.from_iterable(A)))
delimiter
[hex(ord(c)) for c in chars]
delimiter
HttpResponse(response.content)
delimiter
os.startfile(file)
delimiter
Gtk.main_iteration()
delimiter
A = [operation(A[i], A[i + 1]) for i in range(len(A) - 1)]
delimiter
print(etree.tostring(builder, pretty_print=True))
delimiter
root.mainloop()
delimiter
4 * scipy.integrate.nquad(f, [[0, 1], [0, 1]])[0] / 12.565472446489999
delimiter
sys.stdout.flush()
delimiter
array([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]])
delimiter
plt.show()
delimiter
a = set()
delimiter
print(etree.tostring(new_root, pretty_print=True))
delimiter
a = list(set(a))
delimiter
A.sort(key=lambda x: B.count(x))
delimiter
my_dict = {x[0]: {k: v for k, v in zip(my_headers, x[1:])} for x in my_list}
delimiter
end_date = date_1 + datetime.timedelta(days=10)
delimiter
random.sample(the_list, 50)
delimiter
a, b, c, d = [x[i:i + step] for i in range(0, len(x), step)]
delimiter
ax.hist(mydata, weights=np.zeros_like(data) + 1.0 / data.size)
delimiter
x, y = y, x
delimiter
wx.Frame.__init__(self, parent, ID, title, pos, size, style)
delimiter
grayimg = cv2.cvtColor(image, cv2.cv.CV_BGR2GRAY)
delimiter
df_new.head()
delimiter
min(li, key=lambda x: x.number)
delimiter
datetime.fromtimestamp(timestamp2)
delimiter
df.ix[idx]
delimiter
rest = text.split(sep, 1)[0]
delimiter
cursor.executemany(sql, rows)
delimiter
a.append(s)
delimiter
df.replace(d)
delimiter
unique_a.view(a.dtype).reshape((unique_a.shape[0], a.shape[1]))
delimiter
f.close()
delimiter
self.Bind(wx.EVT_LEAVE_WINDOW, self._onMouseLeave)
delimiter
plt.show()
delimiter
set(range(1, 101)) - s
delimiter
list1.sort(key=natural_sort_key)
delimiter
sns.kdeplot(x, shade=True)
delimiter
set(list2).issubset(list1)
delimiter
local_file.close()
delimiter
json_string = json.dumps(foo.__dict__)
delimiter
self.queue.pop()
delimiter
list = map(str.strip, list)
delimiter
session.flush()
delimiter
[list(t) for t in zip(*l)]
delimiter
res_list = [x for x, _ in rows]
delimiter
x[5:]
delimiter
plt.show()
delimiter
shutil.rmtree(name)
delimiter
np.flipud(your_array)
delimiter
p.wait()
delimiter
df.apply(lambda row: row[1] if row[0] > 0 else row[2], 1)
delimiter
vbar.pack(side=RIGHT, fill=Y)
delimiter
set(a[i] for i in range(1, len(a)) if a[i] == a[i - 1])
delimiter
np.multiply(np.arange(1, 5), np.cumprod([1, 2, 2, 2])[np.newaxis].T)
delimiter
timestamps.sort()
delimiter
QtCore.QObject.__init__(self)
delimiter
list(k for k, g in itertools.groupby(x for x in numbers if x != 0))
delimiter
fvtool(Hd1, Hd2)
delimiter
[int(i) for i in x[num - n:num]]
delimiter
res = cv2.matchTemplate(img, template, cv2.TM_CCORR_NORMED)
delimiter
y = x.reshape(x.shape[0] / 2, 2, x.shape[1], 2)
delimiter
a = datetime.datetime.today().year
delimiter
con = MySQLdb.connect()
delimiter
newList = [(x / myInt) for x in myList]
delimiter
self.setWindowState(QtCore.Qt.WindowMinimized)
delimiter
cv2.destroyAllWindows()
delimiter
datetime.datetime(1890, 1, 1, 0, 0)
delimiter
pd.read_csv(Reader(gen()))
delimiter
plt.show()
delimiter
session.query(MyTable.col1).count()
delimiter
array([[18, 6], [19, 5], [17, 9], [10, 5]]),
delimiter
df.iloc[:, ([1])]
delimiter
val0 = f(list[0])
delimiter
plt.show()
delimiter
signal.signal(signal.SIGQUIT, handler)
delimiter
self.top_frame.grid_columnconfigure(1, weight=1)
delimiter
sorted((i, j) for i, j in zip(x, y))
delimiter
args = parser.parse_args()
delimiter
plt.show()
delimiter
lambda x, y: x + y
delimiter
open(location, mode).write(content)
delimiter
db.commit()
delimiter
time.mktime(dt.timetuple()) + dt.microsecond / 1000000.0
delimiter
((0, 1),) * 5
delimiter
[False] * 10
delimiter
clusters = [X[labels == i] for i in range(n_clusters_)]
delimiter
x2[:, (0)] = np.roll(x2[:, (0)], -2)
delimiter
plt.show()
delimiter
self.root.mainloop()
delimiter
ax1.plot(x[i:i + 2], y[i:i + 2])
delimiter
f(*args, **kw)
delimiter
datetime.datetime.today().weekday()
delimiter
os.path.dirname(file)
delimiter
stream.close()
delimiter
added.sort(key=lambda x: os.stat(os.path.join(path_to_watch, x)).st_mtime)
delimiter
f.close()
delimiter
my_model.save()
delimiter
c.ravel()
delimiter
ctx.Process(target=foo, args=(x,)).start()
delimiter
obj.refresh_from_db()
delimiter
[i for i in my_list if my_counter[i] > 1]
delimiter
infile.close()
delimiter
client.images.data(img)
delimiter
np.random.seed(1977)
delimiter
df.iloc[df.index.get_indexer([2, 7])]
delimiter
df.stack()
delimiter
numpy.array(list(c))
delimiter
self.frame.pack()
delimiter
G.remove_nodes_from(to_remove)
delimiter
reactor.run()
delimiter
print(line)
delimiter
df.apply(lambda f: to_number(f[0]), axis=1).sum()
delimiter
plt.xlim(0, 10000)
delimiter
matplotlib.pyplot.plot_date(dates, values)
delimiter
wx.Frame.__init__(self, *args, **kwargs)
delimiter
arr = arr[:, :, ::2]
delimiter
df = pd.DataFrame.from_dict(map(dict, df_list))
delimiter
func(*args, **kwargs)
delimiter
self.checkqueue()
delimiter
print(rdd.collect())
delimiter
np.all(a == 0)
delimiter
process_file(sys.argv[1])
delimiter
dirname2 = os.path.split(dir)[1]
delimiter
ax1.yaxis.set_visible(False)
delimiter
time.time()
delimiter
plt.show()
delimiter
NOT_DONE_YET
delimiter
inspect.signature(datetime.datetime.now)
delimiter
print(np.allclose(rows, rows2))
delimiter
time.sleep(0.5)
delimiter
f()
delimiter
{t[0]: t[1:] for t in s}
delimiter
con.commit()
delimiter
df1.ix[:, (1)]
delimiter
admin.site.register(Session, SessionAdmin)
delimiter
new_lst.sort()
delimiter
print([v for v in simplex.vertices])
delimiter
os.kill(cpid, signal.SIGKILL)
delimiter
tiffiles.sort(key=getint)
delimiter
arr.argsort()[:n]
delimiter
random.shuffle(lst)
delimiter
my_array.pop()
delimiter
fliplr(m.swapaxes(0, 1))
delimiter
dict(map(lambda l: l.split(), s.splitlines()))
delimiter
df.index = pd.to_datetime(df.index)
delimiter
[sum(e) for e in zip(*data)]
delimiter
time.sleep(10)
delimiter
plt.show()
delimiter
doc = lxml.html.parse(url)
delimiter
pd.DataFrame(list(d.items()))
delimiter
C = [[(0) for col in range(len(B[0]))] for row in range(len(A))]
delimiter
pd.value_counts(list(concat(df.categories.values.tolist())))
delimiter
fh.close()
delimiter
random.shuffle(x)
delimiter
result = sorted(mylist, key=lambda x: d[x[0]])
delimiter
list_of_hets.append(hets)
delimiter
np.unravel_index([0, 18, 26], a.shape)
delimiter
urllib.request.urlopen(url).geturl()
delimiter
np.where((a >= 6) & (a <= 10))
delimiter
print(a.dtype)
delimiter
df[df.isnull().any(axis=1)]
delimiter
index = numpy.clip(index, 0, len(my_list) - 1)
delimiter
[i for i in range(10) if i == 9]
delimiter
input()
delimiter
plt.subplot(212, sharex=ax1, sharey=ax1)
delimiter
list(s)[0]
delimiter
glOrtho(self.left, self.right, self.bottom, self.top, 1, -1)
delimiter
time += datetime.timedelta(hours=1)
delimiter
main()
delimiter
[random.random() for _ in range(100000)]
delimiter
driver = webdriver.Chrome(chrome_options=chrome_options)
delimiter
f.close()
delimiter
stokes_list = np.vstack((stokes_list, stokes_line))
delimiter
app.mainloop()
delimiter
ax.plot(x, y)
delimiter
plt.show()
delimiter
df.stack().apply(pd.Series).unstack().swaplevel(0, 1, 1).sort_index(1)
delimiter
offset = dt.astimezone(cet).utcoffset()
delimiter
plt.show()
delimiter
out_file.write(replace_all(text, spelling_dict))
delimiter
ax1.set_ylim([0, 5])
delimiter
f.close()
delimiter
top5 = itertools.islice(my_list, 5)
delimiter
list_2 = [i for i in list_1 if isinstance(i, (int, float))]
delimiter
plt.show()
delimiter
reverse_dict = {value: keypath for keypath, value in keypaths(example_dict)}
delimiter
G = nx.DiGraph()
delimiter
out = np.linalg.norm(row.data)
delimiter
contains_non_string = s[s.apply(type) != str].any()
delimiter
np.array(_)
delimiter
self.listbox.selection_set(first=0)
delimiter
np.fromiter((row[index] for row, index in zip(X, Y)), dtype=int)
delimiter
sorted(l, key=lambda x: (x[:-1], x[-1].isdigit()))
delimiter
help(func)
delimiter
np.subtract.outer(a, b)
delimiter
min(a, key=lambda t: t[1])
delimiter
self.check_object_permissions(self.request, obj)
delimiter
plt.show()
delimiter
list(tuple(mydata.transpose()))
delimiter
tuples = list(genreDictionary.items())
delimiter
a[..., (numpy.newaxis)] * b[(numpy.newaxis), ...]
delimiter
self.lock.acquire()
delimiter
self.value = value
delimiter
theproc.communicate()
delimiter
[item for item in theList if item in theDict]
delimiter
user.save()
delimiter
df1.count()
delimiter
setattr(self, k, v)
delimiter
print(sorted(set(my_list)))
delimiter
s = pd.Series([1, 5, 20, -1])
delimiter
self.Bind(wx.EVT_MOTION, self.OnMouseMove)
delimiter
user.save()
delimiter
do_it_lots()
delimiter
np.where((vals[:, (0)] == 0) & (vals[:, (1)] == 1))[0]
delimiter
numpy.array([[elem for elem in x_row] for x_row in X])
delimiter
lst.extend(data)
delimiter
request.remote_addr
delimiter
round(1.5145, 2)
delimiter
print([m.start(1) for m in matches])
delimiter
time.sleep(0.5)
delimiter
ax.set_xlim([datetime.date(2014, 1, 26), datetime.date(2014, 2, 1)])
delimiter
some_class(*os.path.split(somefile))
delimiter
set(word_list).intersection(a_string.split())
delimiter
plt.pause(1)
delimiter
self.baseDict[key]
delimiter
cl.getlevel(2)
delimiter
ordered = OrderedDict((k, mydict[k]) for k in myorder)
delimiter
np.MAXDIMS
delimiter
time.sleep(0.2)
delimiter
zip(s, s[1:], s[2:])
delimiter
__init__.py
delimiter
plt.show()
delimiter
decimal.Decimal(1.1)
delimiter
uni = [k for k, v in a.items() if countMap[v] == 1]
delimiter
lowercase = [c for c in s if c.islower()]
delimiter
self.__dict__.update(*args, **kwargs)
delimiter
x = x[:50]
delimiter
z = dict(list(x.items()) + list(y.items()))
delimiter
ax.margins(0.05)
delimiter
[a[i:i + 2] for i in range(0, len(a), 2)]
delimiter
sys.exit(0)
delimiter
logging.basicConfig()
delimiter
plt.show()
delimiter
[_f for _f in lst if _f]
delimiter
sys.exit(1)
delimiter
[y for x in list(d.values()) for y in x]
delimiter
sorted([(0, 0, 0, int(random.getrandbits(4))) for x in range(10)])
delimiter
min(a, b) / max(a, b)
delimiter
self.client.post(url, data=post_data)
delimiter
d = {t[0]: t[1:] for t in arr}
delimiter
plt.show()
delimiter
admin.autodiscover()
delimiter
x, y, z = (v + 2 for v in l)
delimiter
min(list(d.items()), key=lambda x: x[1])
delimiter
print(pix[x, y])
delimiter
curses.endwin()
delimiter
words_list.extend(contents[i].split())
delimiter
plt.show()
delimiter
os.path.normpath(os.path.join(os.getcwd(), os.path.dirname(__file__)))
delimiter
f.close()
delimiter
d = pd.concat([d, temp])
delimiter
quantiles = df.quantile([0.01, 0.25, 0.5, 0.75, 0.99])
delimiter
rows = session.query(func.count(Congress.id)).scalar()
delimiter
self.label.pack()
delimiter
file = models.FileField(blank=True, null=True)
delimiter
text_area.pack()
delimiter
plt.plot(list(range(5)))
delimiter
[tuple(zip(*x)) for x in lst]
delimiter
root.mainloop()
delimiter
plt.show()
delimiter
print(Foo.bar)
delimiter
[a.index(item) for item in b]
delimiter
writer.writerow(list(d.keys()))
delimiter
sock.bind((MCAST_GRP, MCAST_PORT))
delimiter
shutil.copy(file, dest_dir)
delimiter
map(lambda x: x ** 2, list)
delimiter
update_fitness()
delimiter
new_list = [f(x) for x in it.takewhile(lambda x: condition(x), l)]
delimiter
tk.Tk.__init__(self, *args, **kwargs)
delimiter
plt.show()
delimiter
[i[0] for i in list(zip(listOfTuples, bools)) if i[1] == True]
delimiter
os.path.dirname(__file__)
delimiter
ax.plot_surface(X, Y, Z)
delimiter
cv2.waitKey(0)
delimiter
arbiter.run()
delimiter
__init__.py
delimiter
screen.fill((255, 255, 255))
delimiter
data.append([int(v) for v in line.split()])
delimiter
pygame.display.flip()
delimiter
list(map(fs.format, sum(map(str.split, l), [])))
delimiter
plt.xticks([])
delimiter
plt.show()
delimiter
sys.exit(1)
delimiter
[b for a in ((x, -x) for x in range(1, 10 + 1)) for b in a]
delimiter
print(soup.get_text())
delimiter
list(r.keys())
delimiter
plt.show()
delimiter
df.reset_index(inplace=True)
delimiter
[item for item in my_list if any(x in item for x in bad)]
delimiter
[[10, 6, 45, 18, 49], [5, 6, 45, 6, 14]]
delimiter
time.sleep(1)
delimiter
skipsdist = BOOL
delimiter
csv_writer.writerow([x for x in line])
delimiter
mars.circle(228, 1)
delimiter
print([len(x) for x in partition(list(range(105)), 10)])
delimiter
[4, 4, 2, 1, 2]
delimiter
plt.ylim([-4, 2])
delimiter
foo.__getitem__(slice(a, b, c))
delimiter
output_list = list(set(itertools.chain(first_list, second_list)))
delimiter
plt.show()
delimiter
plt.show()
delimiter
plt.contour(xi, yi, zi, 20, linewidths=1)
delimiter
math.modf(x)
delimiter
pfile.seek(0)
delimiter
USE_TZ = False
delimiter
time.sleep(5)
delimiter
f = np.vectorize(f, otypes=[np.float])
delimiter
func(*args, **kwargs)
delimiter
new_list = sorted_set(my_list)
delimiter
base64.b64decode(coded_string)
delimiter
a[(a != 5).all(1)]
delimiter
plt.figure()
delimiter
[(i, sublist.index(item)) for i, sublist in enumerate(list)]
delimiter
[v for k, v in d.items() if k not in (2, 5)]
delimiter
filtered_list = list([x for x in input_list if x % 2 == 0])
delimiter
server.serve_forever()
delimiter
data = np.array([float(f) for f in file(filename).read().split()])
delimiter
main()
delimiter
result = [r for r in x if all(z not in r for z in y)]
delimiter
any(kidname == row[ct] for row in csv.reader(file))
delimiter
plt.show()
delimiter
newd = dict.fromkeys(origdict)
delimiter
--honour - stdin
delimiter
[[int(i) for i in line.split()] for line in data]
delimiter
logger = logging.getLogger(__name__)
delimiter
sum(1 for _ in itertools.takewhile(str.isspace, a))
delimiter
con.commit()
delimiter
test.reshape(-1, 2)[::2].reshape(-1, 4)
delimiter
w.show_all()
delimiter
JsonResponse(list(data), safe=False)
delimiter
[(k, v)] = list(d.items())
delimiter
driver.refresh()
delimiter
{}
delimiter
time.sleep(1)
delimiter
result.stack()
delimiter
app.run()
delimiter
plt.show()
delimiter
type(d.copy())
delimiter
grouped.boxplot()
delimiter
tuple(sum(z) for z in zip(a, b))
delimiter
ax.add_patch(circ)
delimiter
[[True, False], [False, True]]
delimiter
plt.imshow(rotate_lena, cmap=plt.cm.gray)
delimiter
aa = dict([(k, d[k]) for k in f])
delimiter
sum(strat(line) for line in f)
delimiter
[[10, 6, 45, 18, 49], [5, 6, 45, 6, 14]]
delimiter
print(pd.concat([d1, df], axis=1))
delimiter
cv2.waitKey(0)
delimiter
nx.draw(G, pos)
delimiter
float_to_hex(17.5)
delimiter
number = list(filter(str.isdigit, filename))
delimiter
[x[0] for x in listD[1]]
delimiter
print(sorted(list(d.items()), key=lambda x: x[1], reverse=True)[0])
delimiter
result = [a for a in A if a not in subset_of_A]
delimiter
main()
delimiter
a, b = map(int, sys.stdin.readline().split())
delimiter
content = text.selection_get()
delimiter
[(x * y) for x, y in zip(lis[0], cyc)]
delimiter
app.run()
delimiter
ext_id = db.Column(db.Integer, primary_key=True, autoincrement=False)
delimiter
Toy.objects.filter(owner__parent=parent)
delimiter
np.in1d(arr1, arr2)
delimiter
plt.figure()
delimiter
sock.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)
delimiter
json.dump(feeds, feedsjson)
delimiter
data[:, (set_col)] = val
delimiter
time.sleep(1)
delimiter
Mailbox.quit()
delimiter
background = pygame.transform.scale(background, (1200, 800))
delimiter
all(word[i + 1] >= word[i] for i in range(len(word) - 1))
delimiter
plt.show()
delimiter
list(sum(list(dict.items()), ()))
delimiter
parser = argparse.ArgumentParser()
delimiter
sorted(l, key=alphanum_key)
delimiter
list.focus_set()
delimiter
df.values[:] = df.sum()
delimiter
[m.group(0) for m in matches]
delimiter
os.makedirs(dir_path)
delimiter
newstr = oldstr[:4] + oldst[5:]
delimiter
logging.basicConfig(level=your_level)
delimiter
locale.setlocale(locale.LC_ALL, saved)
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
newData = np.array([d[:4] for d in data])
delimiter
A.a.__get__(a, A)
delimiter
vf(numpy.outer(phases, numpy.arange(1, 4)))
delimiter
print(date.isoformat())
delimiter
plt.show()
delimiter
df.a.value_counts()
delimiter
fib = lambda n: reduce(lambda x, n: [x[1], x[0] + x[1]], list(range(n)), [0, 1])[0]
delimiter
mydict = default.copy()
delimiter
Y[:, (1)]
delimiter
df = df.loc[:, (~df.columns.duplicated())]
delimiter
np.where(idx)
delimiter
plt.show()
delimiter
array([0, 0, 0, 0])
delimiter
logger.setLevel(logging.DEBUG)
delimiter
session.commit()
delimiter
[[w for w in L if len(w) == num] for num in set(len(i) for i in L)]
delimiter
links = [rel.get_accessor_name() for rel in a._meta.get_all_related_objects()]
delimiter
hex(291)
delimiter
setattr(c, key, value)
delimiter
result_list = [elements[i] for i in indices]
delimiter
dictget = lambda d, *k: [d[i] for i in k]
delimiter
os.kill(pid, signal.SIGTERM)
delimiter
plt.show()
delimiter
A[np.arange(A.shape[0]), (A != 0).cumsum(1).argmax(1)] = 0
delimiter
sys.exit(0)
delimiter
SomeModel.objects.filter(id__in=ids_list).delete()
delimiter
plt.show()
delimiter
con.commit()
delimiter
{{a.name}}
delimiter
cygstart / cygdrive / c / Python27 / python.exe
delimiter
y = [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0]
delimiter
unittest.main()
delimiter
print(response.content)
delimiter
L4 = [item for item in L1 if item not in unwanted]
delimiter
p1 = Process(target=f, args=(d,))
delimiter
np.dot(a, b)
delimiter
gtk.main()
delimiter
plt.show()
delimiter
sum(x > i for i in x)
delimiter
draw = ImageDraw.Draw(im)
delimiter
map(itemgetter(0), G)
delimiter
print(getattr(test, a_string))
delimiter
plt.figure(figsize=(4, 4))
delimiter
{i: words.count(i) for i in set(words)}
delimiter
sys.setrecursionlimit(10000)
delimiter
res = df - df.shift()
delimiter
df = df.reset_index()
delimiter
sum((doSomething(x) for x in originalList), [])
delimiter
[([0] * cols) for x in range(rows)]
delimiter
[pair for pair in itertools.combinations(li, 2) if sum(pair) == 10]
delimiter
print(max(max(x) if isinstance(x, list) else x for x in my_list))
delimiter
root.update_idletasks()
delimiter
(s.iloc[::2].values + s.iloc[1::2]) / 2
delimiter
shuffle(x)
delimiter
plt.show()
delimiter
plt.show()
delimiter
Reporter.objects.all().delete()
delimiter
conn.commit()
delimiter
ax = fig.add_subplot(111)
delimiter
d = {k: [] for k in keys}
delimiter
stack[-1]
delimiter
some_list.append(dic)
delimiter
blogpost.tags[:] = []
delimiter
plt.show()
delimiter
result[np.lexsort((result[:, (0)], result[:, (0)]))]
delimiter
[i for i in range(10) if i not in digits]
delimiter
root.mainloop()
delimiter
loop.run_forever()
delimiter
print(json.dumps(data))
delimiter
dateutil.parser.parse(date_string)
delimiter
plt.show()
delimiter
new_string, np.tensordot(tensor1, tensor2, axes)
delimiter
last = df.index[-1]
delimiter
writer.writerow([latlon])
delimiter
parser = parse_args(sys.argv[1:])
delimiter
output = proc.communicate()[0]
delimiter
args = parser.parse_args()
delimiter
itertools.chain(*lists)
delimiter
fout.writelines(data[1:])
delimiter
noise = np.random.normal(0, 1, 100)
delimiter
root.mainloop()
delimiter
ax.xaxis.set_major_locator(mdates.YearLocator())
delimiter
time.sleep(1)
delimiter
sys.stdout.flush()
delimiter
contained = [x for x in d if x in paid[j]]
delimiter
self.send(data)
delimiter
pygame.display.flip()
delimiter
zeroMatrix = [([0] * Np) for i in range(Np)]
delimiter
plt.show()
delimiter
[i for i in zip(narrative, subject, activity, filer)]
delimiter
self.progressbar.pack(padx=10, pady=10)
delimiter
chain.from_iterable(combinations(s, r) for r in range(len(s) + 1))
delimiter
print(f.read())
delimiter
OrderedDict(itertools.islice(iter(d.items()), 500))
delimiter
sheet.merge(top_row, bottom_row, left_column, right_column)
delimiter
seq_iter = x if isinstance(x, dict) else range(len(x))
delimiter
resultlist.append(M[:])
delimiter
outfile.write(line)
delimiter
df1.date = pd.to_datetime(df1.date)
delimiter
figure(1, figsize=(6, 6))
delimiter
self.timer.cancel()
delimiter
writer.writerow([val])
delimiter
print(matrix.data)
delimiter
os.remove(filename)
delimiter
a[np.argpartition(-a, np.arange((~np.isnan(a)).sum()))]
delimiter
ws0.write(row, col, value, style)
delimiter
print(line.strip())
delimiter
unittest.main()
delimiter
x, y = map(list, zip(*[(e, -e) for e in range(10)]))
delimiter
writer.writerow([word])
delimiter
ax.legend(handles, labels)
delimiter
session.query(SomeClass).all()
delimiter
[p[0] for p in datapoints[0:5]]
delimiter
admin.site.unregister(User)
delimiter
threading.Thread.__init__(self)
delimiter
np.sum(M, axis=(0, 1))
delimiter
bool(np.where(np.array([0, 0])))
delimiter
print(Temperature.value)
delimiter
ROOT_PATH = os.path.split(os.path.abspath(__file__))[0]
delimiter
result = [x for x in orig if x]
delimiter
istr.close()
delimiter
scipy.stats.chi2_contingency(data)
delimiter
[True, True, False].count(True)
delimiter
df.loc[df.Col4.isin(target_array)].index
delimiter
list(chain.from_iterable(zip_longest(d, reversed(e))))
delimiter
deletemydict[key]
delimiter
print(cls.__base__)
delimiter
root.mainloop()
delimiter
sys.stdout.flush()
delimiter
list_1, list_2 = list(list_1), list(list_2)
delimiter
my_dictionary = dict(line.split() for line in f)
delimiter
objs.append(MyClass())
delimiter
ans = [i for i in xy if i[1] > 0]
delimiter
[len(max(i, key=len)) for i in tableData]
delimiter
msg.attach(html_text)
delimiter
smtp.sendmail(send_from, send_to, msg.as_string())
delimiter
[int(s[x[1]:x[2]]) for x in parser.parse(s)[1]]
delimiter
setattr(self, attr, val)
delimiter
np.arange(1000000).dtype
delimiter
f.seek(0)
delimiter
label.destroy()
delimiter
out = [(1 if num & 1 << 7 - n else 0) for n in range(8)]
delimiter
np.pi
delimiter
n.append(float(row[8]))
delimiter
my_list.remove(item)
delimiter
file.close()
delimiter
a[:5, :5]
delimiter
time.sleep(1)
delimiter
sys.exit(app.exec_())
delimiter
time.sleep(0.1)
delimiter
df[(df <= 2).any(axis=1)]
delimiter
Counter(words).most_common(10)
delimiter
list(wrapper(raisinggenfunc()))
delimiter
plt.show()
delimiter
nine_hours_from_now = datetime.now() + timedelta(hours=9)
delimiter
ax1.set_xlim(0, 1)
delimiter
root.mainloop()
delimiter
do_something()
delimiter
root.mainloop()
delimiter
urllib.request.build_opener(HTTPCookieProcessor).open(url)
delimiter
df2.reset_index(drop=True, inplace=True)
delimiter
plt.show()
delimiter
sys.exit(app.exec_())
delimiter
row.save()
delimiter
list_of_tuples
delimiter
logging.basicConfig(level=logging.INFO)
delimiter
print(self.request.body)
delimiter
plt.colorbar(im, cax=cax)
delimiter
shutil.copy(str(my_file), str(to_file))
delimiter
plt.show()
delimiter
print(d[key])
delimiter
response = urllib.request.urlopen(req)
delimiter
buffer.append(np.ndarray((len(my_buf),), buffer=my_buf, dtype=datatype))
delimiter
func1(1, 2)
delimiter
[(i ** 2) for i in l]
delimiter
myDict[x] += 1
delimiter
pylab.show()
delimiter
s.sendmail(me, to, msg.as_string())
delimiter
users_list = [int(x) for x in users_list]
delimiter
ax.set_yticks([])
delimiter
base_dir = os.path.dirname(os.path.realpath(__file__))
delimiter
p = [(i + 1) for i, (x, y) in enumerate(zip(a, a[1:])) if x > y]
delimiter
plt.show()
delimiter
c = (a + b)[:len(b)]
delimiter
mask = numpy.repeat(a[:, (0)] == 1, a.shape[1])
delimiter
plt.colorbar()
delimiter
time.sleep(1)
delimiter
json.dumps(new_D)
delimiter
printx2()
delimiter
sys.exit(0)
delimiter
num = int(your_str, 8)
delimiter
map(list, list_of_tuples)
delimiter
delta.total_seconds()
delimiter
list(k for k, _ in itertools.groupby(k))
delimiter
str(dec)
delimiter
top.mainloop()
delimiter
MyModel.filter(id__in=ids)
delimiter
df.loc[~(df == 0).all(axis=1)]
delimiter
img.putalpha(alpha)
delimiter
plt.show()
delimiter
self.__class__(os.path.expanduser(str(self)))
delimiter
plt.show()
delimiter
plt.subplots_adjust(left=0.2, top=0.8)
delimiter
QtCore.Qt.ItemIsEditable | QtCore.Qt.ItemIsEnabled
delimiter
pd.DataFrame(df.values.reshape(-1, 2, df.shape[1]).mean(1))
delimiter
doc_df = pd.DataFrame(list(iter_docs(etree)))
delimiter
sys.path.append(submod_path)
delimiter
wM.reset()
delimiter
A.stack(0).dot(twos).unstack()
delimiter
print(parser.parse_args())
delimiter
now.replace(hour=0, minute=0, second=0, microsecond=0)
delimiter
print(df.sort_index(axis=1))
delimiter
file.write(content)
delimiter
a, b, c, d, e = my_string.split()[:5]
delimiter
dir(__builtins__)
delimiter
forms.ModelForm.__init__(self, *args, **kwargs)
delimiter
unique_filename = uuid.uuid4()
delimiter
connection.close()
delimiter
window.show_all()
delimiter
word[1:]
delimiter
sys.exit(app.exec_())
delimiter
root.mainloop()
delimiter
model.objects.filter(id=i[1]).update(order=i[0])
delimiter
x.ravel().tolist()[0]
delimiter
diff = set(dictb.keys()) - set(dicta.keys())
delimiter
socket.getfqdn()
delimiter
rows = csv.reader(f1, delimiter=dialect.delimiter)
delimiter
A[np.arange(A.shape[0]), A.shape[1] - 1 - (A[:, ::-1] != 0).argmax(1)] = 0
delimiter
pd.DataFrame(zip(a, b), columns=[a.name, b.name])
delimiter
db.commit()
delimiter
p1 = Process(target=func1)
delimiter
content = urlopen(url).read()
delimiter
main()
delimiter
imshow(data)
delimiter
pylab.plot(x, y)
delimiter
[x for x in collection]
delimiter
browser.implicitly_wait(10)
delimiter
canvas.save()
delimiter
logging.getLogger().handlers[0].setFormatter(formatter)
delimiter
root.mainloop()
delimiter
bit_array.setall(0)
delimiter
app.run(debug=False)
delimiter
2 ** np.arange(m)
delimiter
[(2 ** i) for i, v in enumerate(bin(109)[:1:-1]) if int(v)][::-1]
delimiter
matched = np.array(list(set(arrays[0]).intersection(*arrays[1:])))
delimiter
map(sum, data)
delimiter
cursor.execute(query)
delimiter
x[0][0].append(value1)
delimiter
A[:, (np.arange(ncols) % A.shape[1])]
delimiter
screen.blit(transsurface, (0, 0))
delimiter
sum(1 for x in frequencies if x > 0)
delimiter
con.close()
delimiter
plt.figure()
delimiter
len([_f for _f in a_list if _f]) > 0
delimiter
os.unlink(filename)
delimiter
transmission_array.append(1)
delimiter
sorted(lst, key=lambda L: (L.lower(), L))
delimiter
yvalues[idx]
delimiter
print((k, v))
delimiter
print(os.path.dirname(os.path.realpath(sys.argv[0])))
delimiter
magnitudes = np.sqrt((vectors ** 2).sum(-1))[..., (np.newaxis)]
delimiter
sid = session.key().id()
delimiter
yticks[-1].set_visible(False)
delimiter
x = np.delete(a, zero_row, 0)
delimiter
User.objects.create_user(**data)
delimiter
b = [(n >> i & 1) for i in range(7, -1, -1)]
delimiter
element = ET.parse(fp)
delimiter
logger.setLevel(logging.INFO)
delimiter
ax.invert_yaxis()
delimiter
locals()
delimiter
OrderedDict(sorted(list(d.items()), key=lambda t: len(t[0])))
delimiter
B = [i for i in A]
delimiter
sys.stdout.flush()
delimiter
logging.basicConfig(stream=sys.stdout, level=logging.INFO)
delimiter
{x: 1, y: 2}
delimiter
data[i][0] = math.sin(data[i][0])
delimiter
signal.pause()
delimiter
os.path.join(*choices[:-1])
delimiter
a[:, (np.newaxis), :] - v
delimiter
[tuple(y for y in x if y) for x in a]
delimiter
print(max(flatten(l)))
delimiter
functools.reduce(operator.add, map(collections.Counter, dict1))
delimiter
setattr(A, the_name, classmethod(func))
delimiter
max([l1, l2], key=len)
delimiter
f.seek(0)
delimiter
cv2.destroyAllWindows()
delimiter
random.shuffle(shufflethis)
delimiter
ax.xaxis.set_major_formatter(ticks)
delimiter
somedict = {x: (1) for x in somelist}
delimiter
next(i for i, j in enumerate(lst) if j)
delimiter
pd.concat([total, xtabs], axis=1)
delimiter
list(set(tuple(sorted(s)) for s in all_the_ways))
delimiter
np.sum(arr, axis=0)
delimiter
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
id = models.CharField(max_length=10)
delimiter
values, vectors = scipy.sparse.linalg.eigs(P, k=1, sigma=1)
delimiter
[x for i, x in enumerate(myList) if i not in toRemove]
delimiter
solve(eqs, [x, y])
delimiter
np.intersect1d(A, B)
delimiter
sys.path.append(os.path.abspath(path))
delimiter
admin.site.register(Item, ItemAdmin)
delimiter
conv.ravel()
delimiter
ax1.imshow([[0, 1], [2, 0]])
delimiter
e[np.all(e - np.array([1, 2]) == 0, axis=2)]
delimiter
sc.parallelize(List(line)).collect()
delimiter
time.timetuple()
delimiter
s.multiply(sparse.csr_matrix(1 / np.sqrt(s.multiply(s).sum(1))))
delimiter
A[:] = [1, 2]
delimiter
print(sum(i == 1 for i in flatten_list(x)))
delimiter
obj.save()
delimiter
print(str(socket.gethostbyname(socket.getfqdn())))
delimiter
np.std(sample)
delimiter
os.path.abspath(os.path.dirname(__file__))
delimiter
plt.show()
delimiter
np.isnan(y), lambda z: z.nonzero()[0]
delimiter
b = np.array([list(word) for word in a])
delimiter
help(parrot.Norwegian)
delimiter
(lambda a, b: a(a, b))(X, b)
delimiter
plt.grid()
delimiter
A[0:2, 0:2]
delimiter
round(2606.89579999999, 2)
delimiter
model.fit(S)
delimiter
output.write(bytearray(int(i, 16) for i in yoursequence))
delimiter
thumb = base64.b64encode(im.tostring())
delimiter
np.take(a, b, axis=1)
delimiter
matches = [m.span() for m in re.finditer(pattern, text)]
delimiter
data.sort(key=lambda x: sorted(tally[i] for i in x))
delimiter
(np.cumsum(np.bincount(v, minlength=u.size)) - 1)[v]
delimiter
cursor.close()
delimiter
pipeline.fit_transform(data)
delimiter
ax.plot_surface(X, Y, Z)
delimiter
lambda i: isinstance(i, (int, float))
delimiter
{x: (x + 6) for x in range(1, 5)}
delimiter
np.concatenate([[0.2], linspace(1, 60, 60), [60.8]])
delimiter
print(sys.argv[0])
delimiter
a.shape = a = a.reshape((a.shape[0], -1, n))
delimiter
all(x > limit for x in my_list)
delimiter
a[1:] -= a[:-1]
delimiter
ax.plot_trisurf(triang, z_refi, cmap=cm.jet, lw=0.0)
delimiter
process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
delimiter
plt.show()
delimiter
_cache.clear()
delimiter
plt.show()
delimiter
all(getattr(self, key) == val for key, val in list(kwargs.items()))
delimiter
a[:, ::2] + a[:, 1::2]
delimiter
{k: v}
delimiter
s.close()
delimiter
pdb.set_trace()
delimiter
df.apply(lambda x: x.argmax(), axis=1)
delimiter
a = [[], [], [], []]
delimiter
posts = Post.objects.filter(likes__21__exists=True)
delimiter
sys.stdout.flush()
delimiter
list(starmap(add, zip(lst, lst[1:])))
delimiter
b = [(n >> i & 1) for i in range(0, n.bit_length() - 1)]
delimiter
plt.show()
delimiter
resp = requests.post(url, data=values, allow_redirects=True)
delimiter
{tuple(x) for x in l1} & {tuple(x) for x in l2}
delimiter
time.sleep(0.5)
delimiter
plt.pcolormesh(x, y, z, cmap=mpl.cm.Reds)
delimiter
label.pack(fill=BOTH, expand=1)
delimiter
np.isnan([nan, nan]).any()
delimiter
list(y)
delimiter
cb.ax.xaxis.set_ticks(minorticks, minor=True)
delimiter
result = requests.get(LOGIN_URL, auth=(USERNAME, PASSWORD))
delimiter
plt.show()
delimiter
self.canvas.pack()
delimiter
alist = [row for row in alist if 2 not in row]
delimiter
one, two, three = list(range(1, 4))
delimiter
root.mainloop()
delimiter
MPI_Finalize()
delimiter
posts = Post.objects.filter(tags__in=tags)
delimiter
cursor.execute(sql)
delimiter
file.close()
delimiter
form.save()
delimiter
plt.plot(x_list, y_list)
delimiter
first_element = myList[i][0]
delimiter
sorted(zip(listofTimes, listofLines))
delimiter
set(list1 + list2)
delimiter
A = np.array(A)
delimiter
session.commit()
delimiter
df2.T.drop_duplicates().T
delimiter
plt.show()
delimiter
pipe.stdin.close()
delimiter
(a[n:n + 1] + [default])[0]
delimiter
pprint.pprint(obj, compact=True)
delimiter
A.sum(axis=0)
delimiter
ax.get_yaxis().set_minor_locator(mpl.ticker.AutoMinorLocator())
delimiter
ts[datetime(2011, 1, 8):]
delimiter
b = numpy.vstack((numpy.zeros(a.shape, int), a))
delimiter
print(list(map(lambda x, y: x + [y], A, list(range(1, len(A) + 1)))))
delimiter
conn.commit()
delimiter
pylab.show()
delimiter
sum(functools.reduce(operator.mul, data) for data in zip(*lists))
delimiter
sys.exit(1)
delimiter
print(s.seconds / 60)
delimiter
[(i, lst.count(i)) for i in set(lst)]
delimiter
line[5:]
delimiter
sorted(a, key=my_key)
delimiter
arr = np.array(list_of_arrays)
delimiter
print(match.group(2))
delimiter
session.commit()
delimiter
sum(i for i in range(a, b + 1) if i % 2 == 0)
delimiter
nx.draw_networkx_labels(G, pos_higher, labels)
delimiter
conn.escape_string()
delimiter
os.path.dirname(f)
delimiter
random.shuffle(migrant)
delimiter
numpy.setxor1d(a, b)
delimiter
df.cumsum()
delimiter
plt.show()
delimiter
arr.sum(axis=(0, 1)).shape
delimiter
[x for x in x if x[id] == 20]
delimiter
plt.show()
delimiter
repr(a)
delimiter
f.seek(0)
delimiter
sort(arr, arr.size)
delimiter
ordered_dictionary = [OrderedDict(zip(names, subl)) for subl in list_of_lists]
delimiter
plt.show()
delimiter
element = ET.parse(fp).getroot()
delimiter
df.drop(df.columns[11:], axis=1)
delimiter
2 ** 2 ** numpy.arange(5)
delimiter
pl.show()
delimiter
a.insert(0, a.pop())
delimiter
root.mainloop()
delimiter
r.mainloop()
delimiter
app.run()
delimiter
print(MyClass())
delimiter
self.show()
delimiter
data = numpy.array(f.read().split(), dtype=float).reshape(7000, 8)
delimiter
df.mean(axis=1)
delimiter
new_dict[key].extend(value)
delimiter
print(get_lists_with_sum(11, 8))
delimiter
session.expunge_all()
delimiter
xx, yy = np.mgrid[:5, :5]
delimiter
A[::-1, :]
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
itertools.chain.from_iterable(lists)
delimiter
np.mean(t, axis=1)
delimiter
root.mainloop()
delimiter
session.query(WhateverClass).filter(WhateverClass._containerClassId == 5).all()
delimiter
driver.quit()
delimiter
h.setLevel(logging.DEBUG)
delimiter
np.cos(np.pi * x) * np.sin(np.pi * y)
delimiter
self.clickcursor.execute(query)
delimiter
pd.value_counts(list(chain(*df.categories.values.tolist())))
delimiter
plt.show()
delimiter
A[A == NDV] = numpy.nan
delimiter
print(any(l[i:i + len(pat)] == pat for i in range(len(l) - len(pat) + 1)))
delimiter
pygame.init()
delimiter
x[np.r_[0:2, -2:0]]
delimiter
print(s.tell())
delimiter
time.sleep(5)
delimiter
dest = dict(list(orig.items()) + list(extra.items()))
delimiter
print(my_new_list)
delimiter
df.loc[row, key] = data[key]
delimiter
pipeline.steps[1][1]
delimiter
dir(request.body)
delimiter
df[(df > 16) & mask]
delimiter
xvfb.wait()
delimiter
print(new_string)
delimiter
files = [f for f in os.listdir(dirToScreens) if path.isfile(f)]
delimiter
[random.randrange(1, 10) for _ in range(0, 4)]
delimiter
root.mainloop()
delimiter
sys.stdout.flush()
delimiter
plt.show()
delimiter
sum(1 for i in x if i)
delimiter
x = (x + y) % 48
delimiter
isascii = lambda s: len(s) == len(s.encode())
delimiter
users = models.ManyToManyField(Users)
delimiter
[l[i:i + n] for i in range(0, len(l), n)]
delimiter
pprint.pprint(obj, depth=1)
delimiter
req.close()
delimiter
hash(self.__key__())
delimiter
a.__getitem__(slice(0, 1)).__getitem__(0).__setitem__(0, 5)
delimiter
app = create_app()
delimiter
len(set(a)) == len(a) == max(a) and min(a) == 1
delimiter
time.sleep(1)
delimiter
print(etree.tostring(page, pretty_print=True))
delimiter
sess.run(train_op)
delimiter
label.pack()
delimiter
site.delete(os.path.join(path, ftpfile.name))
delimiter
(dt - datetime(1970, 1, 1)).total_seconds()
delimiter
ax1.set_zorder(1)
delimiter
np.any((0 < x) & (x < 1))
delimiter
gtk.main()
delimiter
[a for a, b in zip(aa, bb) if a == b]
delimiter
issubclass(C, A)
delimiter
fig.tight_layout()
delimiter
df = pd.concat([df, pd.DataFrame(new_data)])
delimiter
matplotlib.get_backend()
delimiter
conn.commit()
delimiter
[s[i:i + 2] for i in range(0, len(s), 2)]
delimiter
os.path.basename(f.name)
delimiter
p.start()
delimiter
any(x[1:] == x[:-1] for x in zip(*arr))
delimiter
df.stack().reset_index(1)
delimiter
self.assertEqual(0, os.getpid())
delimiter
my_array[:, (0)], my_array[:, (1)] = my_array[:, (1)], my_array[:, (0)].copy()
delimiter
df.shape[1]
delimiter
len(df)
delimiter
utc_dt = datetime(1970, 1, 1) + timedelta(seconds=timestamp)
delimiter
cts.minute == 0 and cts.second == 0
delimiter
[0] * 10
delimiter
pyplot.show()
delimiter
fragments
delimiter
locations = sorted(list(range(len(A))), key=A.__getitem__)
delimiter
sys.stdout.flush()
delimiter
root = tree.getroot()
delimiter
ax.xaxis.set_major_locator(myLocator)
delimiter
print(min(Mylist, key=lambda x: x[1]))
delimiter
tup[0] = tup[0].__iadd__((4, 5, 6))
delimiter
Gtk.main()
delimiter
python - devel
delimiter
ax.set_xlim(1, 11)
delimiter
plt.draw()
delimiter
{i: a[i] for i in np.nonzero(a)[0]}
delimiter
[i.strip() for i in txt.split(default_sep)]
delimiter
p.wait()
delimiter
tmp[:, :-1] += a[:, 1:]
delimiter
plt.show()
delimiter
l2 = zip(l1[0::2], l1[1::2])
delimiter
plt.show()
delimiter
newD = dict(zip(list(d.keys()), [round(v) for v in list(d.values())]))
delimiter
self.save()
delimiter
gtk.main_quit()
delimiter
A[((0,), (1,)), B]
delimiter
int(t[0], 2) + int(t[1], 2) / 2.0 ** len(t[1])
delimiter
print([(int(i) + 1) for i in s.split()])
delimiter
df.apply(calculateC2, axis=1)
delimiter
window.show()
delimiter
pdb.set_trace()
delimiter
str = str[:1].upper() + str[1:]
delimiter
collections.OrderedDict(sorted(result.items()))
delimiter
(10)()
delimiter
f.close()
delimiter
plt.show()
delimiter
x = (x + y) % 48
delimiter
df_with_x5.show()
delimiter
array2 = [i for i in array2 if i not in array1]
delimiter
t2c.main()
delimiter
sorted(get, key=sortkey)
delimiter
plt.show()
delimiter
sys.exit(app.exec_())
delimiter
requests.get(url)
delimiter
os.remove(filename)
delimiter
watchout()
delimiter
skycake()
delimiter
plt.show()
delimiter
func(self, *args, **kwargs)
delimiter
show()
delimiter
foo.update(list(range(2, 6)))
delimiter
pg.mixer.set_num_channels(50)
delimiter
df.mask(np.arange(df.shape[0]) >= np.arange(df.shape[1])[:, (np.newaxis)])
delimiter
[os.path.join(root, *choices[:i + 1]) for i in range(len(choices))]
delimiter
print(iter2(A.copy(), rc1, rc2))
delimiter
df.loc[target_index]
delimiter
b = a[0:2]
delimiter
dsp.close()
delimiter
root.mainloop()
delimiter
np.nanmean(data, axis=0)
delimiter
Counter(test.split()).most_common()
delimiter
print(df.sum().sum())
delimiter
isinstance(dates, pd.DatetimeIndex)
delimiter
df.columns = [str(i) for i in df.columns.values.tolist()]
delimiter
canvas.pack()
delimiter
(my_array[:-1] * my_array[1:] < 0).sum()
delimiter
reactor.run()
delimiter
isdeployed.strip()
delimiter
print(a[0][0])
delimiter
list(set(a) & set(b))
delimiter
ws.write(rowi, coli, converters[coli](value))
delimiter
array([[-1, -2, -1, 2], [1, 0, 1, 4]])
delimiter
plt.show()
delimiter
sys.exit()
delimiter
do_something()
delimiter
x[::2, 1::2]
delimiter
[a[i] for i in np.argsort(a)[-2:]]
delimiter
plt.show()
delimiter
np.allclose(r1, r2)
delimiter
emp.save()
delimiter
f.seek(0)
delimiter
os.makedirs(dir)
delimiter
os.makedirs(mypath)
delimiter
list1, list2 = f()
delimiter
pygame.joystick.init()
delimiter
plt.gcf().canvas.get_supported_filetypes_grouped()
delimiter
df.reindex(stk_list, level=0)
delimiter
deletec[0]
delimiter
plt.show()
delimiter
os.remove(i)
delimiter
plt.show()
delimiter
func()
delimiter
print(etree.tostring(root, pretty_print=True))
delimiter
d = dict(map(str.split, list1))
delimiter
np.array([arr[([0, n]), :], arr[:, ([0, n])].T]).ravel()
delimiter
random.choice([True, False])
delimiter
[x for x, _ in lst]
delimiter
(abs(x) + x) / 2
delimiter
mydtype = np.dtype((np.void, arr.dtype.itemsize * arr.shape[1] * arr.shape[2]))
delimiter
cgi.parse_qsl(qs)
delimiter
dict1.update([(key, dict2[key]) for key in list(dict2.keys())])
delimiter
pd.read_csv(StringIO(s), parse_dates=[0], date_parser=parser)
delimiter
blogpost.tags[:] = new_tags
delimiter
redirect(request.path)
delimiter
sys.path.append(os.path.normpath(os.path.join(SCRIPT_DIR, PACKAGE_PARENT)))
delimiter
csvdata_old = csvdata.copy()
delimiter
losses = tf.reshape(tf.concat(1, losses), [-1, size])
delimiter
root.mainloop()
delimiter
dict(zip(range(1, 5), count(7)))
delimiter
plt.show()
delimiter
x, y = zip(*[l.split() for l in f])
delimiter
len(set(map(tuple, M))) == len(M)
delimiter
Superlist.__init__
delimiter
plt.show()
delimiter
admin.site.register(Product, padmin)
delimiter
test()
delimiter
plt.show()
delimiter
s = sorted(s, key=operator.itemgetter(1, 2))
delimiter
y[(1 < x) & (x < 5)]
delimiter
pg.init()
delimiter
first_elements, second_elements = map(list, zip(*data))
delimiter
key_precedence = dict((x, n) for n, x in enumerate(string_list))
delimiter
ax.set_zlim(-10, 0)
delimiter
writer.writerow(row)
delimiter
result.extend(list(t))
delimiter
logger.setLevel(logging.DEBUG)
delimiter
time.sleep(1)
delimiter
plt.show()
delimiter
[tuple(x) for x in data_set.to_records(index=False)]
delimiter
plt.show()
delimiter
plt.show()
delimiter
fts = ustyle.create_featuretypestyle()
delimiter
a.add([1, 2])
delimiter
os.path.join(os.path.dirname(parent), template)
delimiter
time.mktime(datetime_object.timetuple())
delimiter
employee.license_set.all()
delimiter
inspect.getargspec(g)
delimiter
cherrypy.quickstart(Root())
delimiter
conn.close()
delimiter
ax = fig.add_subplot(111)
delimiter
os.close(f)
delimiter
[j for i in sequence_list for j in rex.split(i)]
delimiter
result[:a.shape[0], :a.shape[1]] = a
delimiter
func()
delimiter
widget2.grid(row=0, column=1)
delimiter
numpy.linalg.norm(A - B, numpy.inf)
delimiter
f.seek(0, 0)
delimiter
nx.draw(G)
delimiter
QtNetwork.QSslSocket.supportsSsl()
delimiter
p = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)
delimiter
plt.show()
delimiter
set(map(itemgetter(0), l1)) & set(map(itemgetter(0), l2))
delimiter
etree.fromstring(s, parser=utf8_parser)
delimiter
m2[np.array(m2[:, (1)] > 10)[:, (0)]]
delimiter
request.user_agent
delimiter
pckl_file.close()
delimiter
shutil.rmtree(sub_folder)
delimiter
[(my_array + [i]) for i in input_elements]
delimiter
pygame.font.init()
delimiter
sympy.solve(l - r, c)
delimiter
np.random.seed(0)
delimiter
self.worker.start()
delimiter
a = [[(0) for _ in range(ROWS)] for _ in range(COLUMNS)]
delimiter
print(sys._getframe().f_code.co_name)
delimiter
[(x ** 2) for x in range(10) if x < 7]
delimiter
thingy1.f()
delimiter
self.panel = wx.Panel(self)
delimiter
f = anotherdecorator(lambda x: x * 2)
delimiter
np.ma.array(a, mask=mask)
delimiter
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
json.dump(data, sys.stdout, indent=2)
delimiter
[x for x in lst if float(x.split()[-1]) not in s]
delimiter
sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))
delimiter
StringIO()
delimiter
ax2.set_ylim([0, 1])
delimiter
r.destroy()
delimiter
str1.replace(str2, str2.upper())
delimiter
self.transport.write(data.encode())
delimiter
np.array(lists)
delimiter
[(y if y not in b else other_value) for y in a]
delimiter
array([[100, 200], [255, 255]], dtype=uint16)
delimiter
np.in1d(a, [14, 16, 18])
delimiter
t.start()
delimiter
parser.parse_args(read_my_file(sys.argv[1:]))
delimiter
l1 = np.array([a1, b1])
delimiter
root.mainloop()
delimiter
plt.show()
delimiter
browser.get(url)
delimiter
measure.grid(row=0, column=0)
delimiter
root.mainloop()
delimiter
session.commit()
delimiter
os.close(fh2)
delimiter
value = next(v for i, v in enumerate(d.values()) if i == index)
delimiter
m[:, :1].shape
delimiter
pl.show()
delimiter
{x[0] for x in list1} & {y[0] for y in list2}
delimiter
out_im.putpalette((0, 0, 0, 255, 0, 0, 0, 255, 0, 255, 255, 0))
delimiter
tmp[:, 1:] += a[:, :-1]
delimiter
os.path.abspath(os.path.expanduser(path))
delimiter
fwrite.close()
delimiter
f = lambda X, model, **kw: cost(X, model, sparse=np.random.rand(10, 10), **kw)
delimiter
e = next(iter(S))
delimiter
plt.show()
delimiter
sorted(L, key=lambda x: x[0] / (x[1] * 1.0))
delimiter
self.main()
delimiter
(df * weight[0]).sum(1)
delimiter
pygame.draw.rect(screen, black, (0, 0, width, height), 0)
delimiter
int(n)
delimiter
test()
delimiter
dest = dict(chain.from_iterable(map(dict.items, list_of_dicts)))
delimiter
self.__dict__.update(b)
delimiter
pickle.load(f)
delimiter
df[df.apply(pd.Series.nunique, axis=1) == 1]
delimiter
sorted(l1)
delimiter
driver = webdriver.Firefox(capabilities=caps, firefox_profile=profile)
delimiter
msg.send()
delimiter
plt.hist(a, bins)
delimiter
p.poll()
delimiter
logger.setLevel(logging.DEBUG)
delimiter
f.close()
delimiter
f.close()
delimiter
x = Example()
delimiter
file.write(port.read())
delimiter
pygame.quit()
delimiter
210.184175597721, 210.184175597721, 210.184175597721, 210.184175597721
delimiter
print(test())
delimiter
QtGui.QWidget.__init__(self)
delimiter
time.sleep(5)
delimiter
metadata.reflect(engine)
delimiter
map(lambda x: f(x, fixed), srclist)
delimiter
f.close()
delimiter
br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)
delimiter
os.path.getsize(path)
delimiter
plt.show()
delimiter
f.close()
delimiter
os.unlink(path)
delimiter
ax.add_patch(circle1)
delimiter
df.columns = col_list
delimiter
gtk.main()
delimiter
QTcpSocket.__init__(self)
delimiter
A = dot(A, R.T)
delimiter
[(x + y) for x, y in grouper(2, q)]
delimiter
ssh.close()
delimiter
{(x, y) for x in r for y in r if x + 2 == y}
delimiter
date = models.DateTimeField()
delimiter
wx.Icon(sys.argv[0], wx.BITMAP_TYPE_ICO)
delimiter
[([0] * 8) for x in range(8)]
delimiter
unittest.main(argv=[sys.argv[0]])
delimiter
array2 = [int(x == 4) for x in array1]
delimiter
plt.show()
delimiter
root.mainloop()
delimiter
html.escape(string)
delimiter
max(item[1] for item in alkaline_earth_values)
delimiter
sorted(list(d.items()), lambda a, b: b[1] - a[1] or a[0] - b[0])
delimiter
numbers = [n for n in numbers if n >= 20]
delimiter
[(next(z) if i < 0 else i) for i in y]
delimiter
proc.wait()
delimiter
arr.tolist()
delimiter
print(Model.objects.get(pk=1).ranking)
delimiter
equation1(**dict_of_parameters)
delimiter
n = np.apply_along_axis(np.linalg.norm, 1, a)
delimiter
[(x, y) for x, y in zip(it, it1)]
delimiter
my_list.insert(index, item)
delimiter
set([(4, 5), (2, 2, 5), (1, 20), (2, 10)])
delimiter
f2.close()
delimiter
writer.writerow(row)
delimiter
self.assertEqual(2, 0)
delimiter
f1.writelines(lines)
delimiter
A.extend(B)
delimiter
connection.close()
delimiter
root.deiconify()
delimiter
cv2.rectangle(eroded, (0, 0), (x, y), (255, 255, 255), 1)
delimiter
df = pandas.concat([df1, df2], axis=1)
delimiter
X_test = scaler.transform(X_test)
delimiter
a[a.argsort()[-10:]]
delimiter
QtGui.QTableView.__init__(self, *args, **kwargs)
delimiter
[[4, 2, 6], [8, 10, 12], [6, 8, 6]]
delimiter
list(x)
delimiter
test[1].index + pd.DateOffset(hours=16)
delimiter
[((x + (x - 1)) / 2) for x in list_of_nums]
delimiter
print(input[indices[(0 <= indices) & (indices < 5)]])
delimiter
f.close()
delimiter
d.pop(your_key)
delimiter
plt.show()
delimiter
result = (M[:, :9] * N[:9, :].T).sum(1)
delimiter
queue.Queue(maxsize=0)
delimiter
(lambda i: lambda x: x % i)(i)
delimiter
session.query(inc_type_md_col).filter(cnt_col > 0)
delimiter
zip(itertools.repeat(ls[0]), ls[1:])
delimiter
plt.colorbar()
delimiter
window.show_all()
delimiter
ax.set_ylim([0, 5])
delimiter
self.process.start()
delimiter
result = [key for key, value in dict.items() if value == min_value]
delimiter
dict.fromkeys(list(range(2)), object())
delimiter
plt.plot(x, y1)
delimiter
main()
delimiter
f.flush()
delimiter
plt.show()
delimiter
[v[0] for v in sorted(list(dict.items()), key=lambda k_v: (-k_v[1], k_v[0]))]
delimiter
print(template.render())
delimiter
print(json.dumps(jsonobj))
delimiter
string.ascii_uppercase + string.digits
delimiter
any((myrow1 == x).all() for x in myarray)
delimiter
pandas.read_csv(s)
delimiter
x, y = y, x + y
delimiter
y = [i[j] for i in x for j in range(len(i))]
delimiter
my_list = list(my_set)
delimiter
first_type if all(type(x) is first_type for x in iseq) else False
delimiter
time.sleep(5)
delimiter
any(t.isupper() for t in month[1:])
delimiter
random.choice(string.ascii_letters + string.digits)
delimiter
list([x for x in mylist if x in pattern])
delimiter
sum(i * j for i, j in zip(v1, v2))
delimiter
sum(map(lambda x, y: bool(x - y), a, b))
delimiter
tfactory = TTransport.TBufferedTransportFactory()
delimiter
print(list(Counter(l).items()))
delimiter
s = sum(b for a, b in zip(list_1, list_2) if a)
delimiter
sys.exit(1)
delimiter
model.objects.all()
delimiter
data = np.random.randint(0, 10, size=(100000, 2))
delimiter
print(sys.version)
delimiter
a.append((1, 2, 4))
delimiter
df = df.reindex(columns=cols)
delimiter
exp.evalf(subs={a: 6, b: 5, c: 2})
delimiter
tup = tuple((element.foo, element.bar) for element in alist)
delimiter
settings.__dict__
delimiter
A.data = np.array([10, 6])
delimiter
master.mainloop()
delimiter
params = {arg: self.request.get_all(arg) for arg in self.request.arguments()}
delimiter
dict(list(i.items())[0] for i in L)
delimiter
A = P * D.sum(axis=1) - D.dot(P)
delimiter
plt.hist(x, bins=20)
delimiter
subprocess.Popen(cmd).communicate()
delimiter
test()
delimiter
map(max, arr)
delimiter
mail.Send()
delimiter
data = np.arange(-50, 50, 10)
delimiter
df.eq(df.iloc[:, (0)], axis=0)
delimiter
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
plt.show()
delimiter
stdout, stderr = process.communicate()
delimiter
sorted(d, key=lambda i: int(d[i]))
delimiter
self._droplock()
delimiter
new_foo.append(item)
delimiter
e = [x[0] for x in eagles]
delimiter
[key for key, group in groupby(li) if len(tuple(group)) == 1]
delimiter
np.unravel_index(match_indices, result.shape)
delimiter
pd.DataFrame(res)
delimiter
session.commit()
delimiter
[(val, np.sum(A[B == val])) for val in np.unique(B)]
delimiter
plt.show()
delimiter
plt.show()
delimiter
itertools.product(list(C.items()), repeat=2)
delimiter
instance.save()
delimiter
hey()
delimiter
hist(b.ravel().astype(np.uint8), bins=255, range=(0, 255))
delimiter
{k: v for k, v in list(dictionary.items()) if begin <= k <= end}
delimiter
first = l.pop(0)
delimiter
tkmc.close()
delimiter
cleaned = [i for i in (word.strip() for word in words) if i]
delimiter
f.close()
delimiter
G.data = np.ones(G.nnz)
delimiter
time.sleep(1)
delimiter
ax = fig.add_subplot(111)
delimiter
lambda a, b: b * a(a, b - 1) if b > 0 else 1, b
delimiter
sys.getsizeof(s)
delimiter
[list(s) for s in sets]
delimiter
ser.close()
delimiter
clf.fit(X, y)
delimiter
plt.subplots_adjust(bottom=0.17)
delimiter
bool(my_list)
delimiter
os._exit(1)
delimiter
__init__.py
delimiter
[(x + 1 if x >= 45 else x + 5) for x in l]
delimiter
tornado.ioloop.IOLoop.instance().start()
delimiter
print(list(mydict.keys())[list(mydict.values()).index(16)])
delimiter
plt.show()
delimiter
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
delimiter
id(copy_my_list[0]) == id(my_list[0])
delimiter
x.append(i)
delimiter
df1.sort(axis=1) == df2.sort(axis=1)
delimiter
my_list = list(my_set)
delimiter
solve(my_func, 16)
delimiter
int(a)
delimiter
df.groupby(df.columns.tolist(), as_index=False).size()
delimiter
frame.show()
delimiter
__init__.py
delimiter
setattr(self, name, number)
delimiter
a = db.ReferenceProperty(A)
delimiter
d + datetime.timedelta(hours=8)
delimiter
sys.path.pop(0)
delimiter
b.remove(i)
delimiter
print([x for x in words if len(x) > average])
delimiter
sorted(text, key=lambda x: (str.lower(x), x))
delimiter
plt.show()
delimiter
distance[0][1][2]
delimiter
fig.set_size_inches(18.5, 10.5, forward=True)
delimiter
{k: v for k, v in zip(list(range(1, 5)), list(range(7, 11)))}
delimiter
p.start()
delimiter
self.setWindowFlags(QtCore.Qt.Tool)
delimiter
print([x for x in a if counts[x] >= 2])
delimiter
sys.stderr = sys.__stderr__
delimiter
__init__.py
delimiter
QMainWindow.__init__(self, parent)
delimiter
x2[:, (4)] = np.roll(x2[:, (4)], 2)
delimiter
print(is_list_of_strings(i))
delimiter
time.sleep(5)
delimiter
e / e.sum(axis=1, keepdims=True)
delimiter
subprocess.Popen(cmd)
delimiter
plt.show()
delimiter
x = x[:-1]
delimiter
__builtins__.set
delimiter
ax = fig.add_subplot(111)
delimiter
not set(a).isdisjoint(b)
delimiter
br.submit()
delimiter
print(w.readline().strip())
delimiter
l.sort(key=lambda x: x[1])
delimiter
ax2.set_ylim(0, 10)
delimiter
platform.system()
delimiter
setattr(obj, prop_list[0], something)
delimiter
centroids.append((x, y))
delimiter
plt.show()
delimiter
random.sample(list(enumerate(a)), 5)
delimiter
dtwithoutseconds = dt.replace(second=0, microsecond=0)
delimiter
plt.show()
delimiter
sys.version
delimiter
received_json_data = json.loads(request.body)
delimiter
soup = BeautifulSoup(page)
delimiter
line = line[2:]
delimiter
main.run()
delimiter
p.start()
delimiter
lst[:] = [v for v in lst if pred(v)]
delimiter
[x for x in L if not any(set(x) <= set(y) for y in L if x is not y)]
delimiter
plt.subplots_adjust(wspace=0.001)
delimiter
n[:] = [[(b - 1) for b in a] for a in n]
delimiter
data_file = models.FileField(upload_to=content_path)
delimiter
urllib.request.urlopen(request).read()
delimiter
self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
delimiter
logger.setLevel(logging.DEBUG)
delimiter
np.random.uniform(5, 10)
delimiter
key = next(iter(d))
delimiter
plt.show()
delimiter
clf.fit(X)
delimiter
reactor.run()
delimiter
unittest.main()
delimiter
df = df.loc[mask]
delimiter
plt.show()
delimiter
main()
delimiter
df.head()
delimiter
j2 = [i for i in j if i >= 5]
delimiter
time.sleep(0.5)
delimiter
rf.merge_arrays((arr, x), flatten=True)
delimiter
set(x) == set(y)
delimiter
X_test = sc.transform(X_test)
delimiter
json.dumps(d)
delimiter
form = MyForm(questions=your_list_of_questions)
delimiter
print(Matrix[x][y])
delimiter
ser.close()
delimiter
isinstance(b, Test2)
delimiter
normal_dist.set_shape([input_data.get_shape()[1], labels.get_shape()[1]])
delimiter
sys.stdout.write(REVERSE + CYAN)
delimiter
a = np.array([d])
delimiter
IOLoop.instance().start()
delimiter
married = models.CharField(max_length=1, choices=MAYBECHOICE)
delimiter
print([obj.name for obj in gc.get_objects() if isinstance(obj, potions)])
delimiter
QtCore.Qt.ItemIsEditable | QtCore.Qt.ItemIsEnabled
delimiter
csv_writer.writerow([i[0] for i in cursor.description])
delimiter
values = [max(x, 0) for x in values]
delimiter
HttpResponse(simplejson.dumps(data_dict))
delimiter
list(csv.reader(s, skipinitialspace=True))
delimiter
[x[0] for x in listD[0]]
delimiter
workbook.close()
delimiter
print(hex(new_int))
delimiter
df
delimiter
mylist[:] = [(not x) for x in mylist]
delimiter
ax.set_axis_bgcolor((1, 0, 0))
delimiter
random.sample(s, 1)[0]
delimiter
c = [item for t in zip(a, b) for item in t]
delimiter
ax.margins(0.2)
delimiter
setup.py
delimiter
ordered = [item for item in ordered if item in unordered]
delimiter
[OrderedDict(row) for i, row in df.iterrows()]
delimiter
c = dict.fromkeys(s, 0)
delimiter
print(datetime.utcfromtimestamp(tai_timestamp))
delimiter
a[:, (0), (0)], b[:, (0), (0)] = b[:, (0), (0)], a[:, (0), (0)].copy()
delimiter
fout.close()
delimiter
data.reset_index(drop=True)
delimiter
vals = numpy.delete(vals, numpy.where(a), axis=0)
delimiter
[sum(int(c) for c in str(num)) for num in list1]
delimiter
list(map(hash, list(range(1, 6))))
delimiter
nx.has_path(G, 1, 5)
delimiter
user.save()
delimiter
date = models.DateTimeField(default=datetime.now, blank=True)
delimiter
df1.combine_first(df2)
delimiter
s.tolist()
delimiter
wx.Frame.__init__(self, parent, id, title)
delimiter
plt.show()
delimiter
A - mean.reshape(mean.shape[0], 1)
delimiter
app.run()
delimiter
plt.show()
delimiter
plt.show()
delimiter
len(alist) - alist[-1::-1].index(value) - 1
delimiter
file.write(unicode_text)
delimiter
root.mainloop()
delimiter
regr.fit(Xtrain, ytrain)
delimiter
plt.show()
delimiter
df.rolling(window=10).mean().applymap(round).shift()
delimiter
os.kill(process.pid, signal.SIGINT)
delimiter
circular()
delimiter
final_l = []
delimiter
[i for i in range(len(bv)) if bv[i]]
delimiter
plt.draw()
delimiter
f.write(line)
delimiter
query = session.query(TestUser).filter(TestUser.numbers.any(25)).all()
delimiter
self.process.terminate()
delimiter
sorted(A, key=A.get)
delimiter
df = pd.DataFrame(data, columns=columns)
delimiter
plt.figure(figsize=[6, 6])
delimiter
driver = webdriver.Chrome(chrome_options=options)
delimiter
hist(b.ravel().astype(np.uint8), bins=255)
delimiter
my_list = list(the_tuple)
delimiter
ax1.xaxis.set_visible(False)
delimiter
self.root.mainloop()
delimiter
login(request, user)
delimiter
result = re.sub(regex, subst, file_contents)
delimiter
Foo._bar()
delimiter
[random.shuffle(x) for x in workList]
delimiter
plt.show()
delimiter
pi = (a + b) ** 2 / (4 * t)
delimiter
l = l[0] + (l[1],)
delimiter
plt.show()
delimiter
df.to_excel(ew)
delimiter
a[..., ([1, 1])]
delimiter
[(s[i], i) for i in indices]
delimiter
d = dict(list(row.items()))
delimiter
rgb = np.dstack((r, g, b))
delimiter
ax.xaxis.set_ticks(x)
delimiter
a - a.min(axis=0)
delimiter
infloop()
delimiter
sys.exit(app.exec_())
delimiter
root.mainloop()
delimiter
np.minimum(arr, 255, out=arr)
delimiter
sorted(list(range(len(K))), key=lambda x: K[x])[-5:]
delimiter
plt.xlim(-1, 1)
delimiter
tf.multiply(x, y).eval()
delimiter
elements.append(table)
delimiter
primes = list(range(2, 20))
delimiter
found = any(word in line.split() for line in file)
delimiter
pdb.set_trace()
delimiter
app.MainLoop()
delimiter
form = CModelForm(UPOST(request.POST, c_instance), instance=c_instance)
delimiter
time.sleep(1)
delimiter
df.a / df.b.replace({(0): np.nan})
delimiter
zip(np.nonzero(starts)[0], np.nonzero(ends)[0])
delimiter
print(pandas.concat([s1, s2], axis=1).min(axis=1))
delimiter
my_dict.clear()
delimiter
xlbook.close()
delimiter
[seq[i:i + n] for i in range(len(seq) - n + 1)]
delimiter
h = {k: v for k, v in l}
delimiter
[len(list(group)) for key, group in groupby(a)]
delimiter
do_something()
delimiter
1 - residual / sum((y - y.mean()) ** 2)
delimiter
ax.set_xlim(ts.index.min(), ts.index.min() + 24)
delimiter
df.fillna(0, inplace=True)
delimiter
all(x <= y for x, y in zip(L, L[1:]))
delimiter
time.sleep(1)
delimiter
plt.show()
delimiter
y = int(x, 16)
delimiter
layout.setContentsMargins(20, 0, 20, 0)
delimiter
[8, 5, 6]
delimiter
root.mainloop()
delimiter
os.rename(tmpFile, myFile)
delimiter
lst.sort(key=itemgetter(1), reverse=True)
delimiter
admin.site.register(TestModel, TestModelAdmin)
delimiter
print(etree.tostring(tag, pretty_print=True))
delimiter
root = Tk()
delimiter
plt.tight_layout()
delimiter
os.killpg(os.getpgid(p.pid), signal.SIGTERM)
delimiter
sys.exit(app.exec_())
delimiter
((a[:, (np.newaxis), :] - v) ** 2).sum(axis=-1).min(axis=0).sum()
delimiter
time.sleep(x)
delimiter
[index[start:end] for start, end in zip(slices[::2], slices[1::2])]
delimiter
uniq_animal_groups = [list(t) for t in set(map(tuple, animal_groups))]
delimiter
df.append(dm2)
delimiter
df = df.reset_index()
delimiter
(1 for i in x if 60 < i < 70)
delimiter
plt.plot(x, y)
delimiter
a, b, c = do_something()
delimiter
bane.astype(np.float).view(np.complex64)
delimiter
self.configure(width=width, height=height)
delimiter
plt.clabel(cs, inline=1, fontsize=9)
delimiter
keys.sort(lambda x, y: cmp(dict[x], dict[y]))
delimiter
[0, 1, 2, 4]
delimiter
time.sleep(1)
delimiter
random.sample(zip(xs, ys), 1000)
delimiter
app.MainLoop()
delimiter
[j() for j in [(lambda i=i: i) for i in range(10)]]
delimiter
line = sys.stdin.readline()
delimiter
time.sleep(1)
delimiter
split = pd.concat([df, TScolumns], axis=1)
delimiter
logger.setLevel(logging.DEBUG)
delimiter
plt.show()
delimiter
print(numpy.round(dataAC, 10)[:, :4])
delimiter
lst = []
delimiter
[y for x in data for y in x]
delimiter
a[0].append(1)
delimiter
obj = PageModel.get_by_id(page_id)
delimiter
M = np.column_stack((x ** 2, x, np.ones_like(x)))
delimiter
solve(eqs2, [x, y])
delimiter
[item for item in mylist if item[0][0] == letter]
delimiter
plt.show()
delimiter
fh.close()
delimiter
ax.set_yticklabels([])
delimiter
df.append(data)
delimiter
print(Foo.bar.__get__(f, Foo))
delimiter
all(e == a[0] for e in a)
delimiter
next(x for x in (f(y) for f in hundreds) if x)
delimiter
self.process.wait()
delimiter
pygame.joystick.quit()
delimiter
worksheet.save()
delimiter
row0 = ynew[0].toarray()
delimiter
d[i[i < d.shape[0]]]
delimiter
self._socket.bind((self._host, self._port))
delimiter
f.write(text)
delimiter
print(str(n)[::-1])
delimiter
b = [(n >> i & 1) for i in range(n.bit_length() - 1, -1, -1)]
delimiter
[sorted(item, key=priority.get) for item in my_lists]
delimiter
test[n:]
delimiter
sys.stdout.flush()
delimiter
zip(*[(lst[i:] + lst[:i]) for i in range(n)])
delimiter
print([(x - i) for i, x in enumerate(a)])
delimiter
lists[0].append(1)
delimiter
Image.fromarray(result).save(sys.argv[2])
delimiter
dict(zip(l[::2], l[1::2]))
delimiter
sess.close()
delimiter
result = [r[0] for r in result]
delimiter
plt.show()
delimiter
plt.show()
delimiter
any([(x[1:] == x[:-1]) for x in zip(*arr)])
delimiter
dsub = df1.reset_index(drop=True).sub(df2.reset_index(drop=True))
delimiter
doctest.testmod()
delimiter
logging.getLogger().getEffectiveLevel()
delimiter
df
delimiter
MyThread().start()
delimiter
round(2.607, 2)
delimiter
[k for k, n in Counter(seq).items() if n == 1]
delimiter
root.mainloop()
delimiter
indices = [i for i, x in enumerate(myList) if re.search(regex, x)]
delimiter
np.abs(A[:, (np.newaxis)] - B)
delimiter
self.timer.stop()
delimiter
username = request.user.username
delimiter
pd.read_csv(f, **kwargs)
delimiter
soup = BeautifulSoup.BeautifulSoup(html)
delimiter
sys.path.append(path)
delimiter
deletemy_list[1]
delimiter
foo((noniterable,))
delimiter
app.root.mainloop()
delimiter
print(sorted(iter(counter.items()), key=lambda x: x[::-1]))
delimiter
vectors /= np.sqrt((vectors ** 2).sum(-1))[..., (np.newaxis)]
delimiter
s.find_longest_match(0, len(a), 0, len(b))
delimiter
{k: v for k, v in list(dict.items()) if v > something}
delimiter
db.session.commit()
delimiter
results = sorted(list(results.items()), cmp=lambda a, b: b[1] - a[1])
delimiter
[k for k, g in groupby(data)]
delimiter
my_func(*arr.T)
delimiter
sys.exit(app.exec_())
delimiter
sum(map(len, [s for s in x if len(s) > 1]))
delimiter
test_rec[indices]
delimiter
Color(*Color2.as_list())
delimiter
xbook.close()
delimiter
plt.colorbar()
delimiter
combined = [item for sublist in lists for item in sublist]
delimiter
deletec[:]
delimiter
root.mainloop()
delimiter
ws.cell(row=index, column=2).value = x1
delimiter
datetime(1970, 1, 1)
delimiter
my_dict = json.load(f)
delimiter
dot(x, y)
delimiter
print(match.groups())
delimiter
Y = X - X.mean(axis=1, keepdims=True)
delimiter
df.where(df.eq(df.max(1), 0), -1)
delimiter
f_out.close()
delimiter
plt.show()
delimiter
maxlen = len(max(a, key=len))
delimiter
data = pickle.load(f)
delimiter
Response(serializer.data, status=status.HTTP_201_CREATED)
delimiter
plot_data = [[]] * len(positions)
delimiter
application = django.core.handlers.wsgi.WSGIHandler()
delimiter
sum(map(r, v)) == -n
delimiter
np.cross(c, d).reshape(5, 4)
delimiter
e = Example(size=10)
delimiter
result.append(x[:2].tolist())
delimiter
method()
delimiter
self.ProgressBar.SetValue(0)
delimiter
func(*args, **kwargs)
delimiter
df.loc[df.index.tolist() + missing]
delimiter
result[:-1]
delimiter
df.loc[set(df.index) - set(blacklist)]
delimiter
time.sleep(1)
delimiter
np.where(a == a.max())
delimiter
[f(a) for f in funcs for a in args]
delimiter
current_module = sys.modules[__name__]
delimiter
response = mechanize.urlopen(request, data=data)
delimiter
sys.path.append(path)
delimiter
print(f.stdout.readline())
delimiter
tup = tuple([(element.foo, element.bar) for element in alist])
delimiter
sys.exit(app.exec_())
delimiter
print(c.most_common()[0])
delimiter
plt.show()
delimiter
main()
delimiter
df.iloc[np.argmin(np.abs(df.index.to_pydatetime() - dtObj))]
delimiter
a[:] = [s.strip() for s in a]
delimiter
p[s] == np.arange(n)
delimiter
random.shuffle(newcolors)
delimiter
t + np.roll(t, -1)
delimiter
l.sort(operator.itemgetter(0), reverse=True)
delimiter
al[0], al[1] = float(strs[0]), float(strs[1])
delimiter
str(random.random())[2:]
delimiter
r = requests.post(URL, data=payload)
delimiter
list(set().union(a, b, c))
delimiter
main()
delimiter
self.graph = self.ax.hexbin(self.xData, self.yData)
delimiter
csvwriter.writerow(row)
delimiter
c.setopt(c.HEADERFUNCTION, storage.write)
delimiter
admin.site.unregister(Group)
delimiter
sys.stderr = sys.__stderr__
delimiter
R = np.array(mean_data)[:, (0)]
delimiter
numpy.invert(array)
delimiter
sum(1 for x in gen)
delimiter
print(a[x][y])
delimiter
a[1].append(2)
delimiter
np.log(df.col1 / df.col1.shift())
delimiter
addrport = ADDRPORT(addrbytes, portshort)
delimiter
L = [[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 1, 1, 0]]
delimiter
make_adder(5)(10)
delimiter
cbar.set_ticks([mn, md, mx])
delimiter
mag = np.sqrt(x.dot(x))
delimiter
np.random.seed(1977)
delimiter
lol = [list(range(10)), list(range(2, 12)), list(range(5, 15))]
delimiter
split_curve(np.array([0, 1]), np.array([0, 1]), 2)
delimiter
sys.stderr.close()
delimiter
print(my_new_list)
delimiter
Base.metadata.create_all(engine)
delimiter
window.show_all()
delimiter
a.append(str(wi))
delimiter
plt.show()
delimiter
logging.Handler.__init__(self)
delimiter
ax7.yaxis.set_label_coords(-0.2, 0.5)
delimiter
ax2.set_xlim(0, 10)
delimiter
t.date()
delimiter
len(set(perms))
delimiter
np.random.choice(array1, 5, replace=False)
delimiter
getattr(module, class_name)
delimiter
plt.imshow(crop_lena, cmap=plt.cm.gray)
delimiter
plt.show()
delimiter
con.close()
delimiter
df = pd.DataFrame(data)
delimiter
big_df = pd.concat(df_list)
delimiter
data = [tuple(line) for line in csv.reader(f)]
delimiter
wx.Panel.__init__(self, parent)
delimiter
a[-9:]
delimiter
ax.grid(True)
delimiter
plt.show()
delimiter
df.reindex(s.index)
delimiter
a.repeat(2, axis=0).repeat(2, axis=1)
delimiter
signal.signal(signal.SIGALRM, signal_handler)
delimiter
a.reshape(-1, 100)[::2].ravel()
delimiter
a[np.arange(len(a)), [1, 0, 2]]
delimiter
sys.exit()
delimiter
Project.objects.all()
delimiter
isinstance(f, float)
delimiter
plt.plot(x, y2)
delimiter
form = MyForm(request.user)
delimiter
print(df.astype(float).sum().astype(int).astype(str))
delimiter
entry.focus_set()
delimiter
[myfunc(a, b) for a, b in zip(data[::2], data[1::2])]
delimiter
plt.show()
delimiter
pd.DataFrame(a.reshape(A.shape[0], -1), A.index)
delimiter
mask = np.in1d(a[:, (0)], b)
delimiter
time.sleep(0)
delimiter
y[y.nonzero()]
delimiter
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
delimiter
driver = webdriver.Firefox()
delimiter
print(list(f()))
delimiter
list(Blog.objects.values())
delimiter
ax.xaxis.set_major_formatter(dates.AutoDateFormatter(locator))
delimiter
tornado.ioloop.IOLoop.instance().start()
delimiter
print(cmod.greet(a))
delimiter
im_data = output.getvalue()
delimiter
print(random.choice(a))
delimiter
writer.writerows(new_data)
delimiter
np.array_split(a, 2, axis=1)
delimiter
f.write(leds[0])
delimiter
(vals[:, (0)] == 0) & (vals[:, (1)] == 1)
delimiter
{key: data[key] for key in one_by_ip}
delimiter
ax.xaxis.set_major_locator(mdates.YearLocator())
delimiter
tk.mainloop()
delimiter
item_labels.sort(key=lambda t: c[t[1]])
delimiter
br.title()
delimiter
list(set(theList).intersection(theDict))
delimiter
Decimal(1) / Decimal(7)
delimiter
heapq.nsmallest(l, 2)
delimiter
max(i[0] for i in oceans[regcode - 1])
delimiter
sorted(a, key=lambda x: (x[0].isdigit(), x))
delimiter
plt.show()
delimiter
a.dot(v)
delimiter
set([x for x in l if l.count(x) > 1])
delimiter
f.seek(0, 2)
delimiter
root = Tk()
delimiter
admin.site.register(User, UserAdmin)
delimiter
logging.basicConfig(level=logging.DEBUG)
delimiter
orcl.close()
delimiter
root.grid_columnconfigure(0, weight=1)
delimiter
df.apply(lambda s: s.value_counts().get(0, 0), axis=1)
delimiter
first2pairs = {k: mydict[k] for k in sorted(mydict.keys())[:2]}
delimiter
plt.colorbar()
delimiter
ax.set_xticklabels(x_labels)
delimiter
dict(form=form)
delimiter
plt.xlim(0, data.shape[0])
delimiter
df = df[df.line_race != 0]
delimiter
plt.contourf(xi, yi, zi, v, cmap=plt.cm.jet)
delimiter
zip(*data)
delimiter
print(row[0].read())
delimiter
L.append(l)
delimiter
any(i.isdigit() for i in string)
delimiter
f.seek(-len(line), os.SEEK_CUR)
delimiter
QtGui.QWidget.__init__(self)
delimiter
sum(s[i:].startswith(subs) for i in range(len(s)))
delimiter
logging.getLogger().addFilter(Aggregator)
delimiter
len([x for x in myList if x in myDict]) > 0
delimiter
print(date.isoformat())
delimiter
table.create()
delimiter
HttpResponse(status=500)
delimiter
sys.exit(0)
delimiter
my_dict[key].append(value)
delimiter
df.drop(drops, inplace=True)
delimiter
writer.writerow(dict(zip(fieldnames, row)))
delimiter
print({k: [d[k] for d in dd if k in d] for k in all_keys})
delimiter
sys.stdout.flush()
delimiter
layout.addWidget(btn)
delimiter
sorted(a.keys())
delimiter
A[np.lexsort((A[:, (0)], A[:, (1)]))]
delimiter
session.commit()
delimiter
plt.hist(np.clip(values_A, bins[0], bins[-1]), bins=bins)
delimiter
plt.show()
delimiter
time.sleep(0.1)
delimiter
lst[:] = [word for words in lst for word in words.split()]
delimiter
requests.delete(url, data=json.dumps(data))
delimiter
earth.speed(0)
delimiter
mars.speed(0)
delimiter
df.stack().value_counts()
delimiter
b.sort(key=float)
delimiter
autoreconf - i
delimiter
hdf5.close()
delimiter
reactor.run()
delimiter
dict(i=i, j=j, k=k)
delimiter
sorted(lst, key=lambda x: (counts[x], -firstidx[x]), reverse=True)
delimiter
changewriter.writerow([productcode, amountentered] + changecoins)
delimiter
os.system(cmd)
delimiter
plt.gcf().canvas.get_supported_filetypes()
delimiter
plt.show()
delimiter
threading.Thread.__init__(self)
delimiter
answer = [0, 1, 1, 1, 1, 0]
delimiter
s.setsockopt(socket.SOL_SOCKET, socket.SO_LINGER, linger_struct)
delimiter
main()
delimiter
w, h = draw.textsize(text, font)
delimiter
sys.stdout.write(line)
delimiter
x[y.nonzero()] = y[y.nonzero()]
delimiter
self.assertEqual(response.status_code, 200)
delimiter
pd.concat([pd.DataFrame(out, df.index, a), df], axis=1)
delimiter
urllib.request.urlopen(req)
delimiter
self.__getitem__(slice(start, stop))
delimiter
itertools.chain(*([i] * i for i in range(1, 5)))
delimiter
[range(2, 5), range(12, 17), 20]
delimiter
time.sleep(1)
delimiter
mySet = {x[0] for x in TUPLES}
delimiter
print(os.listdir(path))
delimiter
cursor.execute(sql, args)
delimiter
extra_logger.setLevel(logging.INFO)
delimiter
pylab.show()
delimiter
v = int(float(s)) if int(float(s)) == float(s) else float(s)
delimiter
id_map = {k: v for v, k in enumerate(df.phone_no.unique(), 1)}
delimiter
deletefoo.fields[index]
delimiter
fig.canvas.draw()
delimiter
print((char, char.isalpha()))
delimiter
plt.show()
delimiter
plt.draw()
delimiter
distances = np.sqrt((x - x0) ** 2 + (y - y0) ** 2 + (z - z0) ** 2)
delimiter
getattr(someobject, foostring)
delimiter
np.append(a, z, axis=1)
delimiter
map(str.strip, my_list)
delimiter
list(ordered_dict.values())[2]
delimiter
np.concatenate((arr[([0, n]), :].ravel(), arr[1:-1, ([0, n])].ravel()))
delimiter
np.random.seed(1)
delimiter
f.close()
delimiter
list(set(a))
delimiter
[int(i) for i in bin(x)[2:]]
delimiter
HttpResponse(line)
delimiter
br.set_cookiejar(cj)
delimiter
plot_data = [[] for _ in positions]
delimiter
a = np.array([np.array(list()) for _ in y])
delimiter
(np.abs(a - val) <= tol).argmax()
delimiter
plt.show()
delimiter
__init__.py
delimiter
[seen[c] for c in list]
delimiter
QApplication.restoreOverrideCursor()
delimiter
plt.show()
delimiter
sys.stdout.flush()
delimiter
QtGui.QWidget.__init__(self)
delimiter
widget.destroy()
delimiter
pd.concat([df.iloc[:, :1], df.shift(1), df.shift(2).iloc[:, 4:]], axis=1)
delimiter
transmission_array.append(0)
delimiter
app = Flask(__name__)
delimiter
np.insert(B, np.arange(len(A)), A)
delimiter
plt.show()
delimiter
df
delimiter
ax.set_ylim((0, 10))
delimiter
mylist.append(item)
delimiter
inverse = numpy.linalg.inv(x)
delimiter
df.show()
delimiter
button1.config(height=WHATEVER, width=WHATEVER2)
delimiter
a[-1]
delimiter
[x for x in ls if ls.count(x) == 1]
delimiter
ones = [x for x in l if x[1] == 1]
delimiter
main()
delimiter
f.close()
delimiter
fout.close()
delimiter
json_data = json.loads(response.text)
delimiter
self.fig.canvas.draw()
delimiter
termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)
delimiter
reverse_dict.setdefault(value, []).append(keypath)
delimiter
mlab.show()
delimiter
list(itertools.chain(*l2))
delimiter
new_list.append(item[1])
delimiter
out = [l for l in out if l]
delimiter
json.loads(text)
delimiter
nltk.tokenize.sent_tokenize(text)
delimiter
widget_set = {tuple(sorted(widget.items()))}
delimiter
self.response.out.write(photo.imageblob)
delimiter
time.sleep(2)
delimiter
(x[i:j] for i, j in itertools.combinations(range(len(x) + 1), 2))
delimiter
[i for i, j in zip(x, y) if i == j]
delimiter
driver.switch_to_window(driver.window_handles[0])
delimiter
ts.ix[ts.index.indexer_between_time(datetime.time(9), datetime.time(18))]
delimiter
max(max(p[1:]) for p in PlayerList)
delimiter
print(os.walk(DIR_PATH).next()[1])
delimiter
pool = Pool(processes=4)
delimiter
plt.show()
delimiter
print(aslocaltimestr(datetime.utcnow()))
delimiter
plt.show()
delimiter
ser.read(bytesToRead)
delimiter
aa = [d[k] for k in f]
delimiter
np.transpose(arr, [2, 0, 1]).reshape(5, -1)
delimiter
f(lambda x, y: x + y, 1, 2)
delimiter
print(etree.tostring(bar, pretty_print=False, with_tail=True))
delimiter
results[i].append(benchmark(i))
delimiter
unique_list.append(sorted(item))
delimiter
plt.show()
delimiter
newdict = {k: olddict[k] for k in goodkeys}
delimiter
db.close()
delimiter
plt.gca().add_artist(myline)
delimiter
plt.show()
delimiter
plt.show()
delimiter
isinstance(n, int)
delimiter
img = cv2.cvtColor(img, cv2.COLOR_BGRA2BGR)
delimiter
extractedData = data[:, ([1, 9])]
delimiter
pylab.show()
delimiter
[x[0] for x in G]
delimiter
result = [y for y in (expensive(x) for x in mylist) if y]
delimiter
self.connection.commit()
delimiter
np.concatenate([a[(np.newaxis), :], b[(np.newaxis), :]], axis=0)
delimiter
objects = ndb.get_multi([ndb.Key(Model, k) for k in ids])
delimiter
filtered = [i for i in full if not regex.search(i)]
delimiter
avgs = [((a + b) / 2) for a, b in zip(*([iter(data)] * 2))]
delimiter
tekstboks2.pack()
delimiter
plt.subplot(211)
delimiter
list(permutations(list_of_tuples))
delimiter
self.ax.set_xlim(0, R + pR)
delimiter
deleted[k]
delimiter
httpd.serve_forever()
delimiter
x.shape
delimiter
ts1.corr(ts2)
delimiter
pkgutil - -pkgs
delimiter
res.reset_index()
delimiter
z = [x] + (y if isinstance(y, list) else [y])
delimiter
formatdate(time.mktime(dt.timetuple()))
delimiter
np.array_equiv(A, B)
delimiter
relative_paths = [os.path.relpath(path, common_prefix) for path in paths]
delimiter
myArray[1][1] == 2.71828
delimiter
deque_slice = collections.deque(itertools.islice(my_deque, 10, 20))
delimiter
fro.close()
delimiter
zip(*([s] * 2))
delimiter
list(itertools.chain.from_iterable(L))
delimiter
clf = linear_model.LinearRegression()
delimiter
x = str(something)
delimiter
print((value, count))
delimiter
[(len(list(g)), k) for k, g in itertools.groupby(l)]
delimiter
test.append(pd.Series(200, index=[101]))
delimiter
[1] * 5
delimiter
str(int(value))
delimiter
Dataset.objects.filter(i_end_int__gte=x, i_begin_int__lte=x)
delimiter
zip(a, x)
delimiter
plt.plot(x, y)
delimiter
next(gen)
delimiter
print(first.lower() <= second.lower() <= third.lower())
delimiter
list(chain.from_iterable(a))
delimiter
[(x * (2 - x % 2)) for x in a_list]
delimiter
ax.plot(x, y)
delimiter
instance.save()
delimiter
random.shuffle(array)
delimiter
X_train, y_train, X_val, y_val, X_val, y_val
delimiter
p.wait()
delimiter
list1 = [_f for _f in list1 if _f]
delimiter
print(len(unique_values))
delimiter
ax.set_xticks(np.arange(data.shape[1]) + 0.5, minor=False)
delimiter
self.__init__(*args, **kwargs)
delimiter
Response(status=204)
delimiter
rec = lambda x: sum(map(rec, x)) if isinstance(x, list) else x
delimiter
plt.figure(figsize=plt.figaspect(1))
delimiter
sys.stdout.flush()
delimiter
plt.draw()
delimiter
print(self.bar)
delimiter
nlargest(5, vector, key=itemgetter(1))
delimiter
random.shuffle(s)
delimiter
new_re_df = [s.iloc[np.where(ts.astype(int) == int(i))] for i in ts]
delimiter
bin(10)
delimiter
list(product(x, chain.from_iterable(y)))
delimiter
msg.attach(MIMEText(text))
delimiter
maxLPFt = max(lpfData, key=operator.itemgetter(1))[1]
delimiter
BillboardTracker.objects.filter(expiry_date__le=datetime.now())
delimiter
func2(**locals())
delimiter
bsizer.Add(yourTxtCtrl, 1, wx.EXPAND)
delimiter
sum(n for _, n in structure)
delimiter
ssh.close()
delimiter
do_something()
delimiter
a[index] += 1
delimiter
matplotlib.pyplot.show()
delimiter
handler.setLevel(logging.DEBUG)
delimiter
json.dumps(data, ensure_ascii=False)
delimiter
a.add(2)
delimiter
zip(s, s)
delimiter
x[np.isnan(x)] = something_not_nan
delimiter
uncompressedData = bz2.BZ2File(zipFile).read()
delimiter
self.grid_columnconfigure(2, weight=1)
delimiter
B = np.linalg.inv(A.T).T
delimiter
nums = [int(n) for n in text.split()]
delimiter
[(sum(e) / len(e)) for e in zip(*data)]
delimiter
df1[df1 == 1].count()
delimiter
os.getlogin()
delimiter
process.wait()
delimiter
sys.exit(1)
delimiter
words = f.read().split()
delimiter
cursor.close()
delimiter
body = body.replace(block.text, hilited)
delimiter
b += int(a)
delimiter
br.add_handler(PrettifyHandler())
delimiter
reactor.run()
delimiter
writer.writerow(csvdata)
delimiter
a = np.hstack(([0.2], np.linspace(1, 60, 60), [60.8]))
delimiter
current_command()
delimiter
pylab.hist([random_triangular(1, 6, 5) for t in range(10000)])
delimiter
moving_average(a, n=4)
delimiter
tf.py_func(func, inp, Tout, stateful=stateful, name=name)
delimiter
result = set(x for l in array for x in l)
delimiter
plt.show()
delimiter
timeit([x for x in a if x in b])
delimiter
ax = fig.add_subplot(111)
delimiter
plt.show()
delimiter
QtGui.QMainWindow.__init__(self)
delimiter
d = dict((k, v) for k, v in list(d.items()) if k)
delimiter
sys.exit(app.exec_())
delimiter
print(soup.prettify())
delimiter
fh.close()
delimiter
plt.show()
delimiter
df.apply(lambda x: x.apply(lambda x: [] if math.isnan(x) else x))
delimiter
app.run(server=server)
delimiter
arr.sum(axis=1).shape
delimiter
r = [[] for i in range(4)]
delimiter
df.append(df.sum(numeric_only=True), ignore_index=True)
delimiter
a.get() + b.get()
delimiter
lst.append(lambda x: f(x, i))
delimiter
app.root.mainloop()
delimiter
[x for x in L if x >= 0]
delimiter
print(key, value)
delimiter
setattr(module, name, value)
delimiter
print(df.applymap(lambda x: x > 1))
delimiter
[x[1] for x in sorted(random.sample(enumerate(myList), K))]
delimiter
logging.set_up_done = True
delimiter
np.hstack(results)
delimiter
(a == b).sum()
delimiter
newsampledata.sample(n, replace=True).reset_index(drop=True)
delimiter
[sum(map(f, x)) for x in data]
delimiter
sns.heatmap(data, ax=ax)
delimiter
tornado.ioloop.IOLoop.instance().start()
delimiter
time.sleep(0.1)
delimiter
list(dict((tuple(x[:2]), x) for x in L).values())
delimiter
[wordList[i] for i in indexList]
delimiter
print(s.recv(1024))
delimiter
sum(a[i] != b[i] for i in range(len(a)))
delimiter
do_something_with(lines)
delimiter
window.Minimize()
delimiter
fig.canvas.draw()
delimiter
fig.canvas.draw_idle()
delimiter
dict.__init__(self, *args, **kwargs)
delimiter
self.table.setColumnCount(5)
delimiter
foundItems = (key for key, vals in list(mydict.items()) if item in vals)
delimiter
root.destroy()
delimiter
signal.signal(signal.SIGINT, signal.SIG_DFL)
delimiter
ax.pcolormesh(x, y, z, cmap=mpl.cm.Reds)
delimiter
unittest.main(*args, **kwargs)
delimiter
result = map(sum, a)
delimiter
pd.concat([pd.DataFrame(a), pd.DataFrame(b)], axis=1)
delimiter
lst.extend([5, 6, 7])
delimiter
col.find_one()
delimiter
numbers = iter(list(range(100)))
delimiter
my_queue.put(x)
delimiter
len({s[i:i + n] for i in range(len(s) - n + 1)})
delimiter
shutil.copyfileobj(buf, fd)
delimiter
ftp.cwd(path)
delimiter
[x for item in l for x in repeat(item, 2)]
delimiter
dict(zip(headers, zip(*sdata)))
delimiter
pattern.format(s)
delimiter
random.shuffle(x)
delimiter
virtualenv
delimiter
pd.isnull(df).any()
delimiter
tasklist.append(newtask)
delimiter
[x for x in lst if x.lower() not in seen and not seen.add(x.lower())]
delimiter
array([[1, 0, 0], [0, 1, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0], [0, 1, 0]])
delimiter
log = logging.getLogger(__name__)
delimiter
app.run()
delimiter
html = urllib.request.urlopen(url).read()
delimiter
sys.exit(0)
delimiter
list(takewhile(lambda x: x < 5, list(range(5))))
delimiter
p.kill()
delimiter
np.array_equal(A, B)
delimiter
plt.show()
delimiter
Base.metadata.create_all(engine)
delimiter
new_array = np.array(df.index.to_pydatetime(), dtype=numpy.datetime64)
delimiter
output.close()
delimiter
grid = QtGui.QGridLayout()
delimiter
nodes.CallBlock([call], [], [], [])
delimiter
requests.post(url, data=data, headers=headers)
delimiter
grades = [x.strip() for x in files.readlines()]
delimiter
lambda i: isinstance(i, int)
delimiter
any(isinstance(e, list) for e in my_list)
delimiter
time.sleep(5)
delimiter
ssh_client = paramiko.SSHClient()
delimiter
elapsed_time = time.time() - start_time
delimiter
{{value | unlocalize}}
delimiter
test[(1), :]
delimiter
df[0].to_json()
delimiter
s.getvalue()
delimiter
t = tuple(lst)
delimiter
math.ceil(x / 500.0) * 500.0
delimiter
print(ET.tostring(graph, pretty_print=True))
delimiter
zip(*[s, s])
delimiter
im = Image.open(StringIO.StringIO(buffer))
delimiter
test[:, (0)]
delimiter
c = list(itertools.chain.from_iterable(zip(a, b)))
delimiter
[item for item, flag in zip(s, b) if flag == 1]
delimiter
reactor.run()
delimiter
_draw_point(renderer, position, j, i)
delimiter
os.path.dirname(sys.executable)
delimiter
print(min(strings, key=len))
delimiter
ax.set_xlim(0.5, 5)
delimiter
[(x + (y,)) for x, y in zip(a, h)]
delimiter
self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
delimiter
sorted(mydict.items())
delimiter
self.log.setLevel(logging.INFO)
delimiter
np.multiply(np.arange(1, 5), 2 ** np.arange(0, 4)[np.newaxis].T)
delimiter
[0, 1, 2]
delimiter
plot(x, y, color=color)
delimiter
sorted_by_medals = sorted(list_of_medals, key=lambda tup: (-tup[1], tup[0]))
delimiter
Image.open(file).verify()
delimiter
[x for pair in zip(l, l) for x in pair]
delimiter
func(*args, **kwargs)
delimiter
reactor.run()
delimiter
{randint(0, 9): (v + 1) for v in list(mydict.values())}
delimiter
R = np.array(mean_data[:, (0)])
delimiter
layout.addWidget(QtGui.QLineEdit(self))
delimiter
fcntl.flock(self.__lock_file.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
delimiter
sys.exit(0)
delimiter
r.grid(sticky=(N, E, S, W))
delimiter
cv2.destroyAllWindows()
delimiter
plt.show()
delimiter
matches.append(os.path.join(root, filename))
delimiter
regex.findall(filename)
delimiter
a + b
delimiter
print((m.span(), m.group(0)))
delimiter
list(s)
delimiter
[a for a, b in list(params.items())]
delimiter
cur.close()
delimiter
datetime.datetime.combine(tdate, datetime.time.min)
delimiter
c = tuple(x - y for x, y in zip(a, b))
delimiter
plt.show()
delimiter
[e for sub in a for e in sub]
delimiter
pygame.quit()
delimiter
p.start()
delimiter
dall.update(d)
delimiter
X - np.dot(A, B)
delimiter
Blender.Redraw()
delimiter
im.wcs[::2, ::2]
delimiter
min_keys = [k for k, x in list(d.items()) if not any(y < x for y in list(d.values()))]
delimiter
server_socket.close()
delimiter
print([key for key, group in groupby(x) if len(list(group)) > 1])
delimiter
app.run(debug=True)
delimiter
func()
delimiter
requests.get(url, verify=path_to_bundle)
delimiter
all(x[i] - x[i - 1] == x[i + 1] - x[i] for i in range(1, len(x) - 1))
delimiter
app.run()
delimiter
s.seek(0, os.SEEK_END)
delimiter
pd.__version__
delimiter
mainwin.mainloop()
delimiter
plt.show()
delimiter
map(tuple, np.array(list(combinations(list(range(N - 1, -1, -1)), M)))[::-1])
delimiter
print(f.read())
delimiter
plt.bar(x, y)
delimiter
widget.deleteLater()
delimiter
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
delimiter
df.columns = df.columns.str.lower()
delimiter
size = fields.IntegerRangeField(min_value=-100, max_value=100)
delimiter
pd.concat([df, dict_col.apply(pd.Series)], axis=1)
delimiter
main()
delimiter
app.run()
delimiter
ax2.xaxis.set_visible(False)
delimiter
now = datetime.datetime.now()
delimiter
app.MainLoop()
delimiter
os.remove(os.path.join(dir, f))
delimiter
(dt - datetime.datetime.utcfromtimestamp(0)).total_seconds()
delimiter
func(that, session=session, *args, **kwargs)
delimiter
date = datetime.datetime.fromtimestamp(your_timestamp / 1000.0)
delimiter
print(np.mgrid[:5, :5])
delimiter
sys.stdout.flush()
delimiter
root.mainloop()
delimiter
numpy.random.seed(0)
delimiter
window.mainloop()
delimiter
pprint(stiff)
delimiter
AB = [(A[i] + B[i]) for i in range(len(A))]
delimiter
wx.Frame.__init__(self, *args, **kwargs)
delimiter
plt.subplot(2, 1, 2)
delimiter
sys.exit(app.exec_())
delimiter
a[np.array(n1)[:, (np.newaxis)], np.array(n2)[(np.newaxis), :]]
delimiter
plt.legend(loc=0)
delimiter
f_in.close()
delimiter
print(a[s])
delimiter
[[y for y in x if y not in to_del] for x in my_list]
delimiter
time.sleep(0.05)
delimiter
[t for t in tuples if all(f(t) for f in filters)]
delimiter
json.loads(json.loads(b))
delimiter
plt.show()
delimiter
[(1, 5), (8, 11), (200, 202)]
delimiter
my_dict = {k: (v if len(v) > 1 else v[0]) for k, v in list(tmp.values())}
delimiter
dict1.update((k, dict2[k]) for k in keys)
delimiter
list(itertools.combinations(items, 2))
delimiter
pid, stdin, stdout, stderr
delimiter
MyDiccoSorted = sorted(list(MyDicco.items()), key=lambda x: x[1][0])
delimiter
time.mktime(datetime.datetime.now().timetuple()) * 1000
delimiter
ax.collections
delimiter
data = [float(fractions.Fraction(x)) for x in data]
delimiter
doc = lxml.etree.parse(xml)
delimiter
(s[i:j] for i in range(length) for j in range(i + 1, length + 1))
delimiter
my_list.remove(4)
delimiter
scipy.array(x).ravel().tolist()
delimiter
name = models.CharField(max_length=255)
delimiter
itertools.chain.from_iterable([i] * i for i in range(1, 5))
delimiter
l.append(x[:len(x) - k])
delimiter
b = a[0][:]
delimiter
data = p.stdout.readline()
delimiter
plt.show()
delimiter
[element for tupl in tupleOfTuples for element in tupl]
delimiter
GC.remove_edge(clique[0], clique[1])
delimiter
new_list = [{transform[k]: v for k, v in list(d.items())} for d in old_list]
delimiter
pylab.show()
delimiter
np.place(arr, ~np.in1d(arr, valid), 0)
delimiter
conn.send(stranza)
delimiter
pil_im = Image.open(strio)
delimiter
fig.canvas.draw()
delimiter
plt.show()
delimiter
(A == B).all()
delimiter
startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
delimiter
date += datetime.timedelta(days=1)
delimiter
cbar.set_clim(newimg.min(), newimg.max())
delimiter
writer.writerows(sheet.row_values(row) for row in range(sheet.nrows))
delimiter
f = (lambda a, b, c: lambda x: a + b * c - x)(a, b, c)
delimiter
[a for a in x if a != 2]
delimiter
s1[s1.isin(s2)]
delimiter
pygame.event.poll()
delimiter
data = json.loads(resp.text)
delimiter
sorted(lst)[-20:]
delimiter
pptable(x_axis, y_axis, a.tolist())
delimiter
rescaled = np.uint8(b)
delimiter
exec(open(filename).read())
delimiter
s.reset_index()
delimiter
list(set([(a, l.count(a)) for a in l]))
delimiter
b = np.fill_diagonal(np.zeros((N, N)), value)
delimiter
QtCore.QThread.__init__(self)
delimiter
session = request.session
delimiter
numpy.matrix(numpy.identity(n), copy=False)
delimiter
list(itertools.product(*arrays))
delimiter
bytearray(random.getrandbits(8) for _ in range(size))
delimiter
fig.subplots_adjust(bottom=0.2)
delimiter
a.A * ~mask.A
delimiter
sorted(array, key=lambda x: x[:24])
delimiter
print(mirror([mirror(sublist) for sublist in inputs]))
delimiter
deletemydict[k]
delimiter
object_list.sort(key=lambda x: string_list.index(x.key))
delimiter
list(itertools.zip_longest(fillvalue=0, *lists))
delimiter
driver.find_element_by_id(tc.value).click()
delimiter
cherrypy.engine.block()
delimiter
pixbuf = pixbuf.scale_simple(width, height, gtk.gdk.INTERP_BILINEAR)
delimiter
plt.draw()
delimiter
pprint({k: getattr(f.__code__, k) for k in dir(f.__code__)})
delimiter
[x for x in lst if x % 2]
delimiter
plt.scatter(x, y, c=t, cmap=cm.jet)
delimiter
deletemy_dict[key[-1]]
delimiter
time.sleep(0.1)
delimiter
print(uuid.uuid4())
delimiter
A[~np.isnan(A)].mean()
delimiter
P[np.arange(n), x, y]
delimiter
form = ContactForm()
delimiter
numbers.append(random.randint(a, b))
delimiter
client.close()
delimiter
s.index(t.lower())
delimiter
pygame.mouse.get_pos()
delimiter
t = s.reshape(-1, k)
delimiter
random.shuffle(l, random.random)
delimiter
temp.iloc[[0, 1, 4]].index.tolist()
delimiter
urlfetch.set_default_fetch_deadline(60)
delimiter
print([(x - empty) for x in test])
delimiter
sys.exit(0)
delimiter
float(s)
delimiter
time.sleep(1)
delimiter
plot(x, sin(x) * cos(x))
delimiter
[x for x in range(m) for y in range(n)]
delimiter
request = client.read_holding_registers(0, 4, unit=1)
delimiter
zlib.decompress(data)
delimiter
print(line.rstrip())
delimiter
sorted(list(counts.items()), reverse=True, key=lambda tup: tup[1])[:top]
delimiter
df.stack(0).reset_index(1)
delimiter
app.exec_()
delimiter
datetime.now()
delimiter
time.sleep(1)
delimiter
log.start()
delimiter
out = (m[1:] > m[:-1]).sum() + m[0]
delimiter
plt.show()
delimiter
list(filter(os.path.isdir, os.listdir(os.getcwd())))
delimiter
df.columns[df.isnull().any()].tolist()
delimiter
ax.scatter(x, y, zflat)
delimiter
mean, sigma = a.mean(), a.std()
delimiter
tk.Text.__init__(self, *args, **kwargs)
delimiter
df.groupby(df.index).max()
delimiter
a = np.arange(10)
delimiter
d = ast.literal_eval(some_string)
delimiter
dict(list(dict1.items()) + list(dict2.items()))
delimiter
plt.show()
delimiter
obj = session.query(ObjectRes).order_by(ObjectRes.id.desc()).first()
delimiter
plt.ylim([-0.5, 1.5])
delimiter
indices = [i for i, x in enumerate(myList) if re.match(regex, x)]
delimiter
Series(df.values.ravel()).unique()
delimiter
plt.ylim(-1, 1)
delimiter
driver.close()
delimiter
pyodbc.connect(connect_string, autocommit=True)
delimiter
self.widget_name.deleteLater()
delimiter
len(set(len(x) for x in l)) <= 1
delimiter
val = img.getpixel((x, y))
delimiter
a = [a]
delimiter
filename = str(uuid.uuid4())
delimiter
D()
delimiter
foo = decorator(foo)
delimiter
time.sleep(2)
delimiter
a = [0] * 10000000
delimiter
df.reindex(columns=cols)
delimiter
tags = json.loads(s, object_pairs_hook=collections.OrderedDict)
delimiter
A = map(lambda t: list(t), A)
delimiter
img = client.images.get(IMAGE_ID)
delimiter
text.splitlines()[0]
delimiter
self.response.out.write(template.render(path, template_values))
delimiter
raise FileNotFoundError(errno.ENOENT, os.strerror(errno.ENOENT), filename)
delimiter
file.close()
delimiter
time.sleep(0.01)
delimiter
print(getglobals(f))
delimiter
max(set(lst), key=lst.count)
delimiter
ExampleApp().run()
delimiter
author = models.CharField(max_length=60)
delimiter
sys.stdout.flush()
delimiter
plt.axis([min(x_arr), max(x_arr), max(y_arr), 0])
delimiter
[myfunc(x, y) for x, y in myiter(data)]
delimiter
all(bb[k] == v for k, v in aa.items() if k in bb)
delimiter
plt.show()
delimiter
datetime.date.fromordinal(datetime.date.today().toordinal() - 1)
delimiter
plt.plot(x, y)
delimiter
root.destroy()
delimiter
set(x)
delimiter
x[:, (i)] = np.roll(x[:, (i)], i)
delimiter
p1.stdout.close()
delimiter
print(cmp(list1, list2))
delimiter
self.main.show()
delimiter
plt.show()
delimiter
Gtk.main()
delimiter
dict(zip(unique, counts))
delimiter
sorted(lst, key=str.lower, reverse=True)
delimiter
sorted(myList, key=itemgetter(1))
delimiter
p.wait()
delimiter
results = dict.fromkeys(inputs, [])
delimiter
[indexes[x] for x in l]
delimiter
f = x ** 2 + 1
delimiter
self.list_of_strings.append(str_to_add)
delimiter
words[word[0] + word[-1]].append(word)
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
delimiter
self.a = a, self.b = b
delimiter
sock.setsockopt(socket.IPPROTO_TCP, TCP_KEEPALIVE, interval_sec)
delimiter
plt.show()
delimiter
plt.show()
delimiter
(i * i for i in range(5))
delimiter
call([command, parameter])
delimiter
pyplot.show()
delimiter
d[key][0] = x
delimiter
(dt.replace(month=dt.month % 12 + 1, day=1) - timedelta(days=1)).day
delimiter
plt.close()
delimiter
dtyp = np.dtype(list(zip(X.dtypes.index, X.dtypes)))
delimiter
driver = webdriver.PhantomJS()
delimiter
print(match.group(0))
delimiter
time.sleep(float(sys.argv[1]))
delimiter
np.where(~a.any(axis=1))[0]
delimiter
[z0] * len(seconds)
delimiter
a[-1] * (a[-1] + 1) / 2 - sum(a)
delimiter
50 - List1[0][0] + List[0][1] - List[0][2]
delimiter
ax.plot(x, y)
delimiter
shutil.copy2(src, dst)
delimiter
client.disconnect()
delimiter
df = df.loc[mask]
delimiter
m.save()
delimiter
[i for i, _ in itertools.groupby(ks)]
delimiter
entity.key().id_or_name()
delimiter
ax.set_ylim([-1, 10])
delimiter
np.reshape(data, newshape=(len(data) / 5, 5))
delimiter
self.Bind(wx.EVT_ERASE_BACKGROUND, self._onEraseBackground)
delimiter
1, 0, 1, 0, 0, 0, 0, 0, 1, 0
delimiter
plt.show()
delimiter
pd.rolling_mean(aapl, 200).plot()
delimiter
counts = Counter(sentence.lower().split())
delimiter
df[~pd.isnull(df[list_of_cols]).all(axis=1)]
delimiter
df.apply(lambda x: x.apply(lambda x: [] if isnan(x) else x))
delimiter
min(t, key=lambda i: (i[1], -i[2]))
delimiter
ax.autoscale()
delimiter
response = br.submit()
delimiter
string_list.sort(key=lambda s: len(s), reverse=True)
delimiter
plt.show()
delimiter
next((i, d) for i, d in enumerate(lod) if 1 in d)
delimiter
sorted(l, key=lambda name_score: int(name_score[1]), reverse=True)
delimiter
rows = table.tbody.find_all(True, recursive=False)
delimiter
time.sleep(0.1)
delimiter
replace(my_dict)
delimiter
json.dumps(c.__dict__)
delimiter
response = urllib.request.urlopen(req).read()
delimiter
np.random.shuffle(arr)
delimiter
f.write(data)
delimiter
foo = Foo()
delimiter
first2vals = [mydict[k] for k in sorted(mydict.keys())[:2]]
delimiter
root.mainloop()
delimiter
next([i for i in userInput if i in wordsTask])
delimiter
QtGui.QDialog.__init__(self, parent)
delimiter
numpy.linalg.lstsq(a, b)
delimiter
browser.submit()
delimiter
[(entry if tag in entry else []) for tag in tags for entry in entries]
delimiter
plt.show()
delimiter
element.clear()
delimiter
conn.commit()
delimiter
A.test()
delimiter
QMainWindow.__init__(self)
delimiter
s.sendmail(sender, recipients, msg.as_string())
delimiter
map(id, a)
delimiter
proc.stdin.close()
delimiter
y *= np.hanning(len(y))
delimiter
a.shape
delimiter
np.where(np.triu(np.ones(A.shape[0], dtype=bool), 1), A.T, A)
delimiter
np.reshape(self.data, newshape=(self.data.shape[0] / 5, 5))
delimiter
print(sum(iter(lambda : len(sys.stdin.read(4096)), 0)))
delimiter
contents = self.view.substr(sublime.Region(0, self.view.size()))
delimiter
sorted(new_lst, reverse=True)
delimiter
gevent.sleep(5)
delimiter
print(expr.evalf(subs=dict(a=2, b=4, n=5)))
delimiter
np.where(arr == arr.min())
delimiter
a.__getitem__(slice(0, 1)).__setitem__(0, 1)
delimiter
lst_gen = sum([(i, i * i) for i in range(1, 10)], ())
delimiter
os.lseek(fd, 0, os.SEEK_SET)
delimiter
logging.getLogger().setLevel(logging.DEBUG)
delimiter
parser = argparse.ArgumentParser()
delimiter
dict.fromkeys(my_list, 0)
delimiter
plt.show()
delimiter
pool.join()
delimiter
bin(int(binascii.hexlify(st), 16))
delimiter
np.sqrt(((A - B) ** 2).sum(-1))
delimiter
print(json.dumps(out))
delimiter
plt.show()
delimiter
list({t[1]: t for t in reversed(l)}.values())
delimiter
ax.add_artist(rect)
delimiter
web.HTTPError.__init__(self, status, headers, data)
delimiter
ax.set_xticks(list(range(0, 11)))
delimiter
img = cv2.imdecode(nparr, cv2.CV_LOAD_IMAGE_COLOR)
delimiter
value.Increament()
delimiter
it = heapq.nlargest(20, allrows, key=lambda x: x[2])
delimiter
df1.merge(df2)
delimiter
[(((x - 1) % 8 + 2) * x) for x in range(1, 21)]
delimiter
pyl.draw()
delimiter
converted_text = pattern.sub(lambda m: format_term(m.group(0)), text)
delimiter
ax[1].autoscale(True)
delimiter
time.sleep(1)
delimiter
Z = Y.transpose(1, 2, 0)
delimiter
{k: d1[k] for k in d1.keys() & l1}
delimiter
plt.show()
delimiter
x.loc[(x.B >= 111.0) & (x.B <= 500.0)]
delimiter
dict(y, **x)
delimiter
list_.sort(key=lambda x: len(x[1]))
delimiter
array([[1, 2], [0, 2]])
delimiter
Note.objects.filter(created__year=years.year)
delimiter
np.nonzero(starts)[0], np.nonzero(ends)[0]
delimiter
plt.show()
delimiter
print(p.stdout.read())
delimiter
print(handle.read())
delimiter
[el for el in lst if isinstance(el, collections.Iterable) and st in el]
delimiter
random.shuffle(keys)
delimiter
print(test[numpy.in1d(test[:, (1)], wanted)])
delimiter
int(numberA), int(numberB)
delimiter
np.linalg.lstsq(a, b)
delimiter
somelist.sort(cmp=lambda x, y: cmp(x.resultType, y.resultType))
delimiter
common_keys = list(dict_a.keys() & dict_b.keys())
delimiter
set(df.Col1).union(set(df.Col2))
delimiter
s.decode(encoding)
delimiter
[c for c in words if not c.isalpha() and not c.isdigit() and not c.isspace()]
delimiter
[d[x] for x in a]
delimiter
float(1.001).is_integer()
delimiter
foo()
delimiter
self.user.get_full_name()
delimiter
self.Bind(wx.EVT_CHAR_HOOK, self.hotkey)
delimiter
arr[1, -2]
delimiter
image[idx] = chex[idx]
delimiter
print([tuple(t[1] for t in v) for k, v in groupby(myList, key=itemgetter(0))])
delimiter
p.kill()
delimiter
ax1.legend(loc=2)
delimiter
match = re.search(re.escape(string), text)
delimiter
f.close()
delimiter
list(my_dataframe)
delimiter
finalPath = os.path.abspath(os.path.join(p.netloc, p.path))
delimiter
root.mainloop()
delimiter
[k for k, v in list(my_counter.items()) if v > 1]
delimiter
df = pd.concat(list_of_series, axis=1).transpose()
delimiter
driver.switch_to_window(driver.window_handles[1])
delimiter
sys.stdout.write(chr(c + 48))
delimiter
equation1(*list_of_parameters)
delimiter
bool(set(a) & set(b))
delimiter
os.kill(pid, 0)
delimiter
self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
print(line)
delimiter
Player.objects.filter(Q(games1__pk=self.pk) | Q(games2__pk=self.pk))
delimiter
values = json.loads(data)
delimiter
np.triu(A.T, 1) + A
delimiter
x = rnorm(n=100, mean=0, sd=1)
delimiter
l.append((4, 5))
delimiter
ax.set_xlim([-1, 10])
delimiter
[[j.span() for j in rex.finditer(i)] for i in sequence_list]
delimiter
browser.set_window_size(1400, 1000)
delimiter
map(math.log10, x)
delimiter
sorted(tuples, key=lambda x: (x[0], x[2]))
delimiter
A[np.isnan(A)] = 0
delimiter
froms[p[0]].append(p)
delimiter
result = np.array([list(g) for _, g in groupby(a)])
delimiter
BeautifulSoup(r.content).title.text
delimiter
out = np.concatenate(input_list).ravel()
delimiter
(area_width - string_width) / 2
delimiter
urlparse.urljoin(url, urlparse.urlparse(url).path)
delimiter
mrg.drop(drops, axis=1)
delimiter
list(compress(seq, criteria))
delimiter
x = 256 * ord(pS[0]) + ord(pS[1])
delimiter
xvfb.terminate()
delimiter
(e.T / e.sum(axis=1)).T
delimiter
pylab.show()
delimiter
[0, 1, 0, 9, 0, 25, 0, 49, 0, 81]
delimiter
quit_gracefully()
delimiter
a += b[idx].sum(0)
delimiter
d = np.array(dataPoints.tolist())
delimiter
posts = TodaysObject.objects.filter(datafilter)
delimiter
first2vals = [v for v in list(mydict.values())[:2]]
delimiter
np.random.shuffle(A)
delimiter
plt.legend()
delimiter
data[0]
delimiter
s.close()
delimiter
cls.objects.get(pk=self.pk)
delimiter
d2 = dict((k, v) for k, v in list(d1.items()) if v > 0)
delimiter
[1, 1]
delimiter
z = dict(itertools.chain(iter(x.items()), iter(y.items())))
delimiter
np.median([2, 0, 1, 0, 0])
delimiter
B[X.ravel()] = A.ravel()
delimiter
print([k for k, v in d.items() if v == 1])
delimiter
draw()
delimiter
runserver.py
delimiter
plt.plot(x, f(x), zorder=1)
delimiter
redirect(client.authorize_url)
delimiter
urllib.request.urlopen(url, postData)
delimiter
plt.show()
delimiter
df[df.ix[:, 2:].abs().lt(1).all(1)]
delimiter
k.set_contents_from_string(data_file.readlines())
delimiter
df.reindex(idx)
delimiter
subprocess.Popen([name], stdout=devnull, stderr=devnull).communicate()
delimiter
reactor.run()
delimiter
gtk.main()
delimiter
print(dt.year, dt.month, dt.day)
delimiter
assert Implementation().frobnicate()
delimiter
timedelta(hours=6) / 2
delimiter
self.modules = []
delimiter
df1.merge(df2)
delimiter
setattr(self, k, v)
delimiter
os.unlink(path)
delimiter
plt.show()
delimiter
sys.exit(app.exec_())
delimiter
l[i].append(j)
delimiter
ax.plot(list(range(10)))
delimiter
np.argwhere(M.T == 0).squeeze()
delimiter
df_html = df.to_html()
delimiter
print(list(set(tuple(i) for i in a)))
delimiter
browser.get(url)
delimiter
x.reshape(2, 2, 2, 2).swapaxes(1, 2).reshape(4, -1)
delimiter
mpl_plt.show()
delimiter
con.close()
delimiter
locals().update(parm)
delimiter
result = DataFrame(result).reset_index(drop=True)
delimiter
type(b) is Test1
delimiter
map(list, set(map(tuple, k)))
delimiter
d = {t.key: t for t in [t0, t1, t2]}
delimiter
b.shape
delimiter
any(x in someDict for x in someList)
delimiter
dists /= dists.max(axis=(0, 1))
delimiter
d = dict((k, tuple(v)) for k, v in d1.items())
delimiter
time.sleep(0.5)
delimiter
plt.show()
delimiter
array1.reshape(array2.shape)
delimiter
l.pop(0)
delimiter
b = map(lambda x: x[:9], g)
delimiter
os.path.join(path, format)
delimiter
app.mainloop()
delimiter
plt.clf()
delimiter
np.random.choice(np.flatnonzero(b == b.max()))
delimiter
instance.save()
delimiter
print(np.allclose(r[1], b))
delimiter
list(d.keys())
delimiter
parse_freebase_quadruple_tsv_file(file_name)
delimiter
first2pairs = {k: mydict[k] for k in list(mydict.keys())[:2]}
delimiter
writer.close()
delimiter
[(i, z) for i in [1, 2] for z in zs_i]
delimiter
((x, y) for x in range(width) for y in range(height))
delimiter
pylab.show()
delimiter
ax.set_yticks([])
delimiter
cursor.execute(sql, args)
delimiter
d[cols[0]] = dict((headers[idx], v) for idx, v in enumerate(cols[1:]))
delimiter
sys.exit(app.exec_())
delimiter
group[group.apply(lambda x: len(x) > 1)]
delimiter
root.mainloop()
delimiter
random.shuffle(itrange)
delimiter
winfile.close()
delimiter
self.exec_()
delimiter
result[i].append(j)
delimiter
avgs[np.where(binplace == 1)]
delimiter
self.user_set.all()
delimiter
sys.exit()
delimiter
sess.run(train_op)
delimiter
random.randint(1, 6)
delimiter
server.mainloop()
delimiter
tree = soupparser.parse(StringIO(text))
delimiter
a = numpy.nan_to_num(a)
delimiter
my_file.copy(to_file)
delimiter
Py_Finalize()
delimiter
find_eulerian_tour(cg4)
delimiter
df[-mask.any(axis=1)]
delimiter
capture = cv.CaptureFromCAM(-1)
delimiter
deletetest[2]
delimiter
b += [c]
delimiter
plt.gcf().axes[0].xaxis.set_major_formatter(formatter)
delimiter
rdd = df.rdd
delimiter
plt.show()
delimiter
print(doc.toxml())
delimiter
plt.plot(xs, density(xs))
delimiter
numpy.column_stack((a, b, c))
delimiter
A - mean[:, (np.newaxis)]
delimiter
grid[[a[second_mask] for a in np.where(mask)]] = 100
delimiter
func()
delimiter
fcntl.ioctl(s.fileno(), SIOCGIFFLAGS, ifr)
delimiter
auth_login(request, user)
delimiter
a[0, 1, 2]
delimiter
print((key, values))
delimiter
frame.axes.get_xaxis().set_ticks([])
delimiter
ax2.contour(theta_edges[:-1], r_edges[:-1], H)
delimiter
BASE_DIR = os.path.dirname(os.path.dirname(__file__))
delimiter
print(t.total_seconds())
delimiter
map(len, s.split())
delimiter
max(set(list), key=list.count)
delimiter
ax1.yaxis.tick_left()
delimiter
foo = _log_error(logger)(partial(bar, someparam))
delimiter
input_list = [int(a) for a in input_list]
delimiter
urllib.request.install_opener(opener)
delimiter
self.box.grid(column=0, row=0)
delimiter
sys.exit(0)
delimiter
request.session.set_expiry(request.session.get_expiry_age())
delimiter
dict([(an_object.name, an_object) for an_object in object_list])
delimiter
sys.exit()
delimiter
render_to_response(your_custom_template, ctx)
delimiter
df.ix[0]
delimiter
draw.text((10, 0), txt, (0, 0, 0), font=font)
delimiter
layout.addWidget(self.lineedit)
delimiter
ax.add_patch(polygon1)
delimiter
a.split()
delimiter
[9.444064187694842, 1.2256912728995506]
delimiter
{{jsonData | safe}}
delimiter
not seen.add(x)
delimiter
f.close()
delimiter
{x: (x * x) for x in range(10)}
delimiter
bydiscra = sorted(promotion_items, key=bydra)
delimiter
sys.stdout.write(data)
delimiter
plot(X, Y)
delimiter
wx.Dialog.__init__(self, *args, **kwds)
delimiter
datetime.timedelta(hours=-5)
delimiter
time.mktime(now.timetuple())
delimiter
table = [row for row in data]
delimiter
time.sleep(10)
delimiter
tuple(l.T)
delimiter
mngr.window.setGeometry(newX, newY, dx, dy)
delimiter
isinstance(b, Test1)
delimiter
my_file.seek(0, os.SEEK_END)
delimiter
[s[i:j] for i, j in zip_longest(start, end)]
delimiter
np.random.shuffle(b)
delimiter
writer.writerows(new_rows)
delimiter
print(list(matdata.keys()))
delimiter
con.close()
delimiter
reverse(str1[1:]) + str1[0]
delimiter
fig.canvas.draw()
delimiter
print(simplejson.loads(json_string))
delimiter
__init__.py
delimiter
self.canvas.draw()
delimiter
{{form.certification()}}
delimiter
[ComVisible(true)]
delimiter
df = pd.concat(list(pd.read_csv(Reader(gen()), chunksize=10000)), axis=1)
delimiter
len(haystack) - len(parts[-1]) - len(needle)
delimiter
sorted(l, key=lambda x: (x[:-1], x[-1].isdigit(), x))
delimiter
dict(widget_set.pop())
delimiter
plt.show()
delimiter
s.group(0)
delimiter
list(q)[0]
delimiter
print(lilfoo.baaz)
delimiter
sorted(l, key=lambda x: float(x[1]))
delimiter
self.button.pack()
delimiter
print(regex.search(data).groups())
delimiter
sys.exit()
delimiter
diag = [mat[i][i] for i in range(len(mat))]
delimiter
ax.plot_surface(X, Y, Z)
delimiter
matching_lines = [line for line in string_list if filter_func(line)]
delimiter
plt.show()
delimiter
print([n for n in (x.giveMyNum() for x in q) if n > 1])
delimiter
L2.sort(key=lambda x: L.index(x))
delimiter
int(log10(x)) + 1
delimiter
mySet = set(x[0] for x in TUPLES)
delimiter
suspect = {}
delimiter
os.kill(9999999999999, 0)
delimiter
user.profile.save()
delimiter
Foo.__init__.__self__.__class__
delimiter
print(track.permalink_url)
delimiter
a, b = int(a), a - int(a)
delimiter
plt.show()
delimiter
newlist.append(i)
delimiter
np.frombuffer(test)
delimiter
dict([(k, v) for k, v in list(mydict.items()) if k >= 6])
delimiter
l[:1] + [b for a, b in zip(l, l[1:]) if a != b]
delimiter
left.remove(left[0])
delimiter
local_file.write(f.read())
delimiter
[seq for seq in my_list if [item for item in seq if some_condition()]]
delimiter
[(2 ** i) for i, v in enumerate(bin(109)[:1:-1]) if int(v)]
delimiter
server.serve_forever()
delimiter
print(key, d[key])
delimiter
model_to_dict(instance, fields=[field.name for field in instance._meta.fields])
delimiter
sys.exit(0)
delimiter
{k: min(h1.get(k) or h2[k], h2.get(k) or h1[k]) for k in list(h1.keys()) + list(h2.keys())}
delimiter
platform.system()
delimiter
sorted(A, key=A.get, reverse=True)[:5]
delimiter
stdout, stderr = p.communicate()
delimiter
[age] = [t[1] for t in mylist if t[0] == 10]
delimiter
comb = list(comb)
delimiter
Publication.objects.all().delete()
delimiter
[(a, b) for a in A for b in B if a in b]
delimiter
number = random.randint(5, 20)
delimiter
some_queue.get()
delimiter
re.findall(s, text)
delimiter
np.min(np.nonzero(np.hstack((B, 1))))
delimiter
m = coo_matrix((v, (l - 1, c - 1)), shape=(l.max(), c.max()))
delimiter
uppers = [l for l in letters if l.isupper()]
delimiter
func(func, *args, **kwargs)
delimiter
pygame.display.flip()
delimiter
reactor.run()
delimiter
c.setopt(pycurl.WRITEFUNCTION, lambda bytes: len(bytes))
delimiter
unsure_rows[key].append(row[key])
delimiter
(item for sublist in list_of_lists)
delimiter
numpy.digitize(b, a)
delimiter
cleaned = [_f for _f in map(str.strip, words) if _f]
delimiter
ax.set_xlim(-10, 10)
delimiter
app.MainLoop()
delimiter
p = sparse.dia_matrix(1.0 / np.array(x), shape=(len(x), len(x)))
delimiter
numpy.array([0.24])[0] == 0.24
delimiter
type(list(d.values()))
delimiter
X = 1
delimiter
self.assertEqual(content, expected_content)
delimiter
s = pd.Series([0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1])
delimiter
glob.glob(name)[0]
delimiter
result_dict = [u.__dict__ for u in my_query.fetchall()]
delimiter
curses.endwin()
delimiter
time.sleep(1)
delimiter
getattr(filters, method)(**options)
delimiter
driver.switch_to_window(driver.window_handles[-1])
delimiter
{k: map(sum, zip(*v)) for k, v in list(d.items())}
delimiter
a[:, (1)]
delimiter
reactor.run()
delimiter
newNums = [i for i, x in enumerate(nums) if x == 12]
delimiter
os.close(fh1)
delimiter
fig = plt.figure(figsize=(6, 6))
delimiter
now = datetime.now()
delimiter
s.play()
delimiter
werte[1:-1][(diff(werte)[:-1] > 0) * (diff(werte)[1:] < 0)]
delimiter
numpy.unravel_index(A.argmin(), A.shape)
delimiter
f.__dict__.update(b)
delimiter
sys.stdout.buffer.write(pdf_file.read())
delimiter
ax.xaxis.set_minor_locator(MultipleLocator(0.2))
delimiter
df = df[df.columns[:11]]
delimiter
[True, True, False, True, True]
delimiter
f = lambda *x: sum(x) - 1
delimiter
print(dir(__builtins__))
delimiter
contents = urllib.request.urlopen(request).read()
delimiter
print(args)
delimiter
ax.yaxis.set_ticks([16, 8, 4, 2, 1, 0])
delimiter
numpy.reshape(array, array.shape + (1,))
delimiter
min(timeit.repeat(lambda : dict((k, v) for k, v in zip(keys, values))))
delimiter
user = models.ForeignKey(User)
delimiter
deletex[i + 1:]
delimiter
self.setWindowFlags(Qt.FramelessWindowHint)
delimiter
list[0].pop(0)
delimiter
req.close()
delimiter
[x[0] for x in sorted(data, key=lambda x: x[1], reverse=True)[0:6]]
delimiter
pdb.set_trace()
delimiter
degs = degrees(rads)
delimiter
[elem[:12] for elem in g]
delimiter
plt.show()
delimiter
setattr(module_obj, method_name, func)
delimiter
self.clickcnx.close()
delimiter
dict1 = {x: dict1[x] for x in keys}
delimiter
df.reindex(approach1(df.A.values, df.B.values))
delimiter
re.findall(pattern, s)
delimiter
pd.tslib.repr_timedelta64
delimiter
app.run(debug=True)
delimiter
next((x for x in lst if x % 2 == 0))
delimiter
self.assertDictEqual(a, b)
delimiter
problem = importlib.import_module(sys.argv[1])
delimiter
b.insert(bisect(b, a), a)
delimiter
union([(10, 12), (9, 16)])
delimiter
f.write(line)
delimiter
build_stylus()
delimiter
br.set_response(response)
delimiter
contours, _ = cv2.findContours(img, cv2.RETR_LIST, cv2.cv.CV_CHAIN_APPROX_NONE)
delimiter
[k for k, v in list(mydict.items()) if list(mydict.values()).count(v) > 1]
delimiter
pygame.init()
delimiter
dev.leds(verbose=True)
delimiter
[sum(sublist) for sublist in zip(*myListOfLists)]
delimiter
last_row = df.ix[df.last_valid_index()]
delimiter
pygame.init()
delimiter
ax = fig.add_subplot(111)
delimiter
res = cv2.bitwise_and(closex, closey)
delimiter
print(__file__)
delimiter
plt.show()
delimiter
eval(x)
delimiter
cv2.destroyAllWindows()
delimiter
c = [[(x + b[i]) for i, x in enumerate(y)] for y in a]
delimiter
funkytown._asdict()
delimiter
my_string = my_string.replace(k, v)
delimiter
fig, ax = plt.subplots()
delimiter
print(read_records(data))
delimiter
Foo().bar()
delimiter
glUniform1i(self.tex2D, 0)
delimiter
list.__getitem__(self, index)
delimiter
print(parser.parse(treebank.sents()[0]))
delimiter
numpy.vstack((x, y))
delimiter
[[], []]
delimiter
ax.set_xticks(xticks)
delimiter
button.clicked.connect(lambda : self.commander(command))
delimiter
l[0][0] += 1
delimiter
height = img.get_height()
delimiter
tree.removeItemWidget(i, 0)
delimiter
fig.canvas.draw()
delimiter
sys.getsizeof(i)
delimiter
print(fibonacci(int(eval(input()))))
delimiter
birth_years = dict(zip(name, year))
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
d = {b: a[:, (i)] for i, b in enumerate(a)}
delimiter
tk.mainloop()
delimiter
f.write(content)
delimiter
TextCtrlInstance.GetValue()
delimiter
np.flatnonzero(~a[:-2] & a[1:-1] & a[2:])
delimiter
asdf.save()
delimiter
plt.ylim(10, 40)
delimiter
libdl.dlclose(handle)
delimiter
Z = func(X, Y)
delimiter
plt.show()
delimiter
ax.set_yticklabels(y_label, fontsize=20)
delimiter
cursor.execute(qry, list(myDict.keys()) + list(myDict.values()))
delimiter
os._exit(0)
delimiter
random.shuffle(r)
delimiter
my_treeview.setEditTriggers(QAbstractItemView.NoEditTriggers)
delimiter
total = value[c1 - 1] + value[c2 - 1]
delimiter
plt.show()
delimiter
df.groupby(level=0, sort=False).transform(lambda x: sorted(x, key=pd.isnull))
delimiter
print(lxml.etree.tostring(doc))
delimiter
m.mask = np.repeat(i == j, k.size, axis=2)
delimiter
subversion.search(s).group()
delimiter
raise AssertionError(expression2)
delimiter
calendar.monthrange(2012, 2)[1]
delimiter
frames.append(pandas.DataFrame(row))
delimiter
np.sqrt((a * a).sum(axis=1))
delimiter
QtGui.QWidget.__init__(self)
delimiter
print(os.path.abspath(my_module.__file__))
delimiter
plt.show()
delimiter
self.view.setModel(self.model)
delimiter
random.shuffle(word)
delimiter
img_as_np = np.asarray(img.getdata()).reshape(img.size[1], img.size[0], -1)
delimiter
data.setdefault(k, []).append(v)
delimiter
self.func(*args, **self.kwargs)
delimiter
print(y.max())
delimiter
df.apply(OrderedDict)
delimiter
print(list(date_range(5, 2)))
delimiter
QMainWindow.__init__(self, *args)
delimiter
phrase.strip().capitalize()
delimiter
min_keys = [k for k in d if d[k] == min_value]
delimiter
list(choice(json_obj[k]).values())[0]
delimiter
df.head()
delimiter
df.plot(subplots=True)
delimiter
[tuple(d.values()) for d in l]
delimiter
time.sleep(1)
delimiter
sys.path.insert(0, p)
delimiter
plt.show()
delimiter
sys.stdout.write(next(spinner))
delimiter
new_lst.append(x)
delimiter
sys.stdout.flush()
delimiter
curses.endwin()
delimiter
PyErr_Clear()
delimiter
np.asarray(np.bmat([[A, Z], [Z, B]]))
delimiter
ax.add_patch(polygon2)
delimiter
sock.bind((UDP_IP, UDP_PORT))
delimiter
nodeenv - -python - virtualenv
delimiter
p.wait()
delimiter
[(sum(group) / size) for group in zip(*([iter(data)] * size))]
delimiter
list(itertools.product(*l))
delimiter
helloworld.helloworld()
delimiter
plt.show()
delimiter
pd.to_numeric(s)
delimiter
sum(x > 7 for x in a)
delimiter
abs(n)
delimiter
df = pd.read_csv(io.StringIO(string), delim_whitespace=True)
delimiter
ax = pylab.gca()
delimiter
p.stdin.close()
delimiter
file.close()
delimiter
threading.Timer(60, f).start()
delimiter
plt.show()
delimiter
self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
x[0].append([])
delimiter
l = list(t)
delimiter
obj.func1()
delimiter
list_of_nums = [x for x in list_of_nums if x != 2]
delimiter
HttpResponse(html)
delimiter
sys.stdout.flush()
delimiter
sum(bool(x) for x in l)
delimiter
c = np.in1d(a, b)
delimiter
diag = [row[i] for i, row in enumerate(mat)]
delimiter
[0, 0, 0, 0, 1, 1],
delimiter
pygame.quit()
delimiter
self.sections.clear()
delimiter
all(a % i for i in range(2, a))
delimiter
sys.stderr = logger
delimiter
sys.exit(100)
delimiter
time.sleep(10)
delimiter
[[item for item in seq if some_condition] for seq in my_list]
delimiter
list(range(start, end, step))
delimiter
conn.close()
delimiter
proc.wait()
delimiter
plt.plot()
delimiter
plt.show()
delimiter
PyObject_HEAD_INIT(NULL)
delimiter
age = models.IntegerField()
delimiter
print(response.status_code)
delimiter
main()
delimiter
sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][0], reverse=True)
delimiter
f.write(bytes(bin_array))
delimiter
sum([i for i in l1 if isinstance(i, int)])
delimiter
np.meshgrid(x, x, sparse=True)
delimiter
df.iloc[0:2, :]
delimiter
logging.getLogger().addHandler(console_handler)
delimiter
app.MainLoop()
delimiter
max([x for x in ls if x < 0])
delimiter
data = numpy.arange(5 * 4).reshape(5, 4)
delimiter
all(x * y > 0 for x, y in zip(l1, l2))
delimiter
app.MainLoop()
delimiter
f = lambda x: x[0] * x[0] * x[0] + x[1] * x[1]
delimiter
datetime.datetime.date(2011, 1, 1)
delimiter
self.grid_columnconfigure(0, weight=1)
delimiter
sleep(1)
delimiter
plt.xlim(0, 125)
delimiter
min_unfairness = min(num[i + k - 1] - num[i] for i in range(n - k + 1))
delimiter
logger = logging.getLogger(__name__)
delimiter
print([int(x) for x in T1])
delimiter
A[~np.in1d(A.dot(cumdims), B.dot(cumdims))]
delimiter
[x for x, y in groupby(L) if len(list(y)) < 2]
delimiter
plt.scatter(x, y)
delimiter
TimeModel.objects.create(time=td.total_seconds())
delimiter
__init__.py
delimiter
df.columns[pd.isnull(df).any()].tolist()
delimiter
a = [([0] * 8) for _ in range(8)]
delimiter
print(binascii.hexlify(content))
delimiter
now.replace(minute=0, hour=0, second=0, microsecond=0)
delimiter
p.wait()
delimiter
plt.show()
delimiter
sys.exit()
delimiter
writer.writerows(rows)
delimiter
time.sleep(5)
delimiter
lines = set(f.readlines())
delimiter
float(x)
delimiter
sys.path.append(dirname(__file__))
delimiter
all(x == L[0] for x in L)
delimiter
[a for a in s if s.count(a) == 1]
delimiter
fig, ax = plt.subplots()
delimiter
np.multiply(a, b)
delimiter
result = [separator.join(map(str, x)) for x in product(*lists)]
delimiter
[name for name in data1 if name in data2]
delimiter
reversed_arr = np.swapaxes(np.swapaxes(arr, 0, k)[::-1], 0, k)
delimiter
df.drop_duplicates()
delimiter
server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
delimiter
writer.close()
delimiter
print(imap_conn.list())
delimiter
plt.show()
delimiter
os.path.dirname(sys.argv[0])
delimiter
json.dumps(data)
delimiter
[[random.random() for i in range(N)] for j in range(M)]
delimiter
src.close()
delimiter
gtk.main()
delimiter
len(a) / np.sum(1.0 / a)
delimiter
datetime.date.fromtimestamp(ts).month
delimiter
df.divide(df.ix[0] / 100)
delimiter
df.apply(lambda x: sum(x.isnull().values), axis=0)
delimiter
print(json.dumps(e, cls=new_alchemy_encoder(), check_circular=False))
delimiter
print(d.get(frozenset((2, 1))))
delimiter
time.sleep(5)
delimiter
l = [d for d in days if d.weekday() in [1, 2]]
delimiter
barbar.py
delimiter
[x for i, x in enumerate(y) if i != 1]
delimiter
s.lstrip(punctuation)
delimiter
data = urllib.request.urlopen(url).read()
delimiter
wav_file.close()
delimiter
ax.legend()
delimiter
x()
delimiter
os.rename(os.path.join(base, old_name), os.path.join(base, new_name))
delimiter
plt.show()
delimiter
ax.scatter(x, y, c=c, cmap=cmap)
delimiter
chain.from_iterable(combinations(s, r) for r in range(1, len(s) + 1))
delimiter
np.vstack(a)
delimiter
ftpc.close()
delimiter
fig.tight_layout()
delimiter
ax.set_ylim(0, 10)
delimiter
Response(serializer.data)
delimiter
ax.set_xlim(0, 20)
delimiter
plt.legend()
delimiter
kNN1.fit(data, class_labels)
delimiter
df.index
delimiter
reg = conn.fetchall()
delimiter
a = a[(a >= -100) & (a <= 100)]
delimiter
datetime.datetime.fromtimestamp(1004256400)
delimiter
p2 = Process(target=f, args=(d,))
delimiter
self.finish()
delimiter
p.terminate()
delimiter
a.reshape(-1, np.prod(a.shape[-2:]))[:, ::-1].reshape(a.shape)
delimiter
df.max(1)
delimiter
matches.append([os.path.join(root, filename), error])
delimiter
sock.connect((address, port))
delimiter
func()
delimiter
__init__.py
delimiter
fig.close()
delimiter
time.sleep(5)
delimiter
R2a.__init__(self)
delimiter
map(int, sum(map(lambda x: list(str(x)), lst), []))
delimiter
plt.plot(x, x)
delimiter
app.mainloop()
delimiter
Series(df.Letter.values, index=df.Position).to_dict()
delimiter
df.prod(axis=1)
delimiter
l.sort()
delimiter
dicts.flatMap(lambda x: list(x.items()))
delimiter
sorted(li, key=lambda x: x[1])
delimiter
[myfunc(a, b) for a, b in zip(idata, idata)]
delimiter
sum(data[x::size] for x in range(size)) / size
delimiter
root.overrideredirect(True)
delimiter
[np.max(arr) for arr in np.split(v, np.where(mask)[0] + 1)]
delimiter
r = client.post(URL, data=login_data, headers=dict(Referer=URL))
delimiter
setattr(self, name, value)
delimiter
print(top[0][1][2])
delimiter
random.seed(1)
delimiter
np.histogramdd(data, bins=(2, 2, 2))[0]
delimiter
numpy.count_nonzero((25 < a) & (a < 100))
delimiter
a += numpy.histogram(b, numpy.arange(len(a) + 1))[0]
delimiter
surface = pygame.Surface((100, 100))
delimiter
sorted(arr[ind])
delimiter
response = view(request)
delimiter
a[np.isfinite(a)]
delimiter
ax.xaxis.set_major_locator(MultipleLocator(20))
delimiter
np.eye(d.shape[1]) * d[:, :, (np.newaxis)]
delimiter
time.sleep(1)
delimiter
plt.show()
delimiter
imageblob = db.BlobProperty()
delimiter
dict(d1, **d2)
delimiter
clf.fit(X_train, y_train)
delimiter
local_dt = datetime.datetime.fromtimestamp(timestamp)
delimiter
[(0) for _ in range(10000)]
delimiter
string.format_map({k: Pluralizer(v) for k, v in list(data.items())})
delimiter
[c for c in df]
delimiter
ax.set_navigate(False)
delimiter
data = json.loads(response.body)
delimiter
dict((c, string.count(c)) for c in string)
delimiter
sys.path.insert(0, p)
delimiter
self.stdout.write(data)
delimiter
dropped_copies = [[x[i] for x in copies[i]] for i in range(2)]
delimiter
temp[::-1].sort()
delimiter
[peaks([x, y]) for x, y in zip(xscat, yscat)]
delimiter
[1, 4, 7]
delimiter
fig.tight_layout()
delimiter
[(arr[i], arr[-i - 1]) for i in range(len(arr) // 2)]
delimiter
sys.exit(app.exec_())
delimiter
df.loc[df.A.isin(a)]
delimiter
list(_)
delimiter
print(output[0])
delimiter
[[1, 5], [6, 11]]
delimiter
time.sleep(5)
delimiter
print(argparse._sys.argv[0])
delimiter
pd.DataFrame(data)
delimiter
suite = unittest.TestSuite()
delimiter
root.mainloop()
delimiter
driver.manage().timeouts().pageLoadTimeout(15, TimeUnit.SECONDS)
delimiter
matches.extend(isbn.findall(line))
delimiter
y[:, ::2]
delimiter
OrderedDict(items)
delimiter
beginnings = numpy.where(diffs == 1)
delimiter
time.sleep(0.1)
delimiter
a = np.array(a)
delimiter
application = wsgi.WSGIHandler()
delimiter
a = a.clip(min=0)
delimiter
threading.Thread.__init__(self)
delimiter
lambda x, y: set([x]) == (y if b else lambda x, y: x in y)
delimiter
main()
delimiter
plt.show()
delimiter
random.randrange(100, 20001, 100)
delimiter
plt.figure(figsize=(10, 7))
delimiter
print(m.group(1))
delimiter
cv2.waitKey(0)
delimiter
pos = nx.spring_layout(G, k=0.15, iterations=20)
delimiter
f.close()
delimiter
results.append((url, urlopen(url).read()))
delimiter
ax2.set_xlim([0, repeat_length])
delimiter
root.mainloop()
delimiter
array = list(range(numCase))
delimiter
list(solve(4))
delimiter
plt.show()
delimiter
convertfile.write(line)
delimiter
match.start(1)
delimiter
plt.show()
delimiter
np.put(a, np.ravel_multi_index(idx.T, a.shape), 5)
delimiter
stackless.run()
delimiter
np.argmax(np.random.multinomial(1, a, 1))
delimiter
lin.split()
delimiter
print(dict(zip(keys, zip(*data))))
delimiter
result = [dishes[key] for key in list(crucial.keys()) & list(dishes.keys())]
delimiter
df
delimiter
A.dot(B).dot(C)
delimiter
sorted(points)
delimiter
1 / 2
delimiter
solution.sort_index()
delimiter
df.isnull().any()
delimiter
data = data.groupby(data.index).sum()
delimiter
memory2.clear()
delimiter
numpy.hstack((x, y))
delimiter
sums = [sum(subseq) for subseq in subseqs]
delimiter
name.ljust(15)[:15]
delimiter
[datetime.date(2010, 2, 27), datetime.date(2010, 2, 28)]
delimiter
f2.write(lines[i + 2])
delimiter
print(os.walk(DIR_PATH).next()[2])
delimiter
sys.stdout.write(os.read(stdout.fileno(), 1024))
delimiter
[line[i:i + n] for i in range(0, len(line), n)]
delimiter
PROJECT_PATH = os.path.dirname(os.path.abspath(__file__))
delimiter
Point(x, y)
delimiter
ax = fig.add_subplot(211)
delimiter
queryset = MyModel.objects.all()
delimiter
db.session.add(new_provider)
delimiter
threading.Thread(target=play_audio).start()
delimiter
Counter(words).most_common(10)
delimiter
np.where(np.array([0, 1]))
delimiter
[100, 10, 20]
delimiter
cur.execute(query, args)
delimiter
df = df.sort()
delimiter
max(l_one + l_two)
delimiter
gnuplot.stdin.flush()
delimiter
ppf(q, loc=0, scale=1)
delimiter
to_file.write(replacement_line)
delimiter
ax.yaxis.set_major_locator(MultipleLocator(0.5))
delimiter
pylab.show()
delimiter
hatch_path_stroke.width(1.0)
delimiter
ctypes.c_void_p(offset)
delimiter
__init__.py
delimiter
s.apply(pd.to_datetime, dayfirst=True)
delimiter
locals()[string1 + string2]()
delimiter
print ()
delimiter
popt, pcov = scipy.optimize.curve_fit(func, x, ynoisy)
delimiter
np.mean(gp)
delimiter
df[df.groupby(level=0).transform(np.size).gt(1).values]
delimiter
combo.focus_set()
delimiter
ws.write(rowi, coli, float_if_possible(value))
delimiter
sys.exit(app.exec_())
delimiter
fig.canvas.draw()
delimiter
df.sort_index(inplace=True)
delimiter
np.count_nonzero(a[:2, :2])
delimiter
df[cols] = np.where(df[cols] < 0, np.nan, df[cols])
delimiter
remove_extras_and_sort(my_list)
delimiter
signal.signal(signal.SIGINT, signal_handler)
delimiter
d[len(lst)] += 1
delimiter
sets = [(myList[i - 1], j) for i, j in enumerate(myList) if j == 9]
delimiter
time.sleep(10)
delimiter
game = models.ForeignKey(Game)
delimiter
new_instance.save()
delimiter
br.set_handle_redirect(True)
delimiter
p[i:j] = list(sorted(p[i:j]))
delimiter
text_classifier.fit(X_vectorized, y_train)
delimiter
salesdata.Outlet_Size.dropna().unique()
delimiter
l.extend(map(int, (w for w in line.split() if w.isdigit())))
delimiter
{{person.get_gender_display}}
delimiter
instance.save()
delimiter
files.extend(glob(os.path.join(dir, pattern)))
delimiter
[os.path.splitext(os.path.basename(fn))[0] for fn in a]
delimiter
ppp_data.rename(columns=dict(zip(columns[2:], names)), inplace=True)
delimiter
lines = random.sample(f.readlines(), 5)
delimiter
f.write(text)
delimiter
sumlog([5, 4, 1, 0, 2]) < sumlog([5, 1, 4, 0.0001, 1])
delimiter
LOGNORM.DIST(x, Ln(mean), standard_dev, FALSE)
delimiter
LOGNORM.DIST(x, Ln(mean), standard_dev, TRUE)
delimiter
self.attr2 = attr2
delimiter
bottle.run()
delimiter
a.any(axis=1)
delimiter
array([2, 2, 2, 2, 1, 2, 1, 2])
delimiter
print(file(path).read())
delimiter
nx.draw(G, pos=pos, with_labels=True)
delimiter
open_smbus.restype = ctypes.c_void_p
delimiter
expit(0.458)
delimiter
a.max(axis=0)[0]
delimiter
time.sleep(1)
delimiter
letter2, letter1, letter4, letter5
delimiter
cur.close()
delimiter
os.path.split(s)
delimiter
ax.add_patch(rect1)
delimiter
sys.path.append(path)
delimiter
time.sleep(1)
delimiter
any(char.isdigit() for char in inputString)
delimiter
t1 = set(frozenset(i) for i in t)
delimiter
Py_Finalize()
delimiter
out_file.write(line)
delimiter
print(xls.sheet_names())
delimiter
list(itertools.product(*l))
delimiter
bool(np.array([0, 0]))
delimiter
(1, 2)[0:1]
delimiter
pickle.loads(pickle.dumps(C()))
delimiter
list(itertools.chain.from_iterable(a))
delimiter
DBSession.close()
delimiter
output_stream.close()
delimiter
sorted_li = sorted(li, key=lambda x: (-x[1], x[0]))
delimiter
plt.show()
delimiter
cherrypy.engine.exit()
delimiter
tmp_file = os.path.join(settings.MEDIA_ROOT, path)
delimiter
os.execl(sys.executable, sys.executable, *sys.argv)
delimiter
queryset.filter(mycolname__len__gte=10)
delimiter
file_out[-1] = file_out[-1][:-1]
delimiter
A[(0, 1, 2), (0, 1, 0)]
delimiter
reactor.run()
delimiter
list_.sort(key=lambda x: float(x[1]))
delimiter
[0.0, 0.0, 0.0, 0.4, 0.6]
delimiter
print(match.group(), match.start(), match.end())
delimiter
e = Example()
delimiter
ipshell()
delimiter
values[np.where((coo == [1, 2]).all(1))].mean()
delimiter
list(adjacent_tuples(list(range(8)), 4))
delimiter
self.Bind(wx.EVT_LEFT_UP, self.OnLeftUp)
delimiter
app.run()
delimiter
base = df.index.get_indexer_for(df[df.A == 2].index)
delimiter
self._tree = (lambda f: f(f))(lambda t: defaultdict(lambda : t(t)))
delimiter
print(json.dumps(data, ensure_ascii=False))
delimiter
doctest.testmod()
delimiter
oceans = [[], [], [], [], []]
delimiter
logging.basicConfig(level=logging.DEBUG)
delimiter
(m[1:] > m[:-1]).sum() + m[0]
delimiter
cords_set.add((x, y))
delimiter
print(list(message.keys()))
delimiter
t = dt.time(0, 0, 0)
delimiter
df.tail(1).index
delimiter
syncdict.update([(key, 0)])
delimiter
plt.show()
delimiter
f.close()
delimiter
self.window2.show()
delimiter
(s + mystring for s in mylist)
delimiter
other_list.remove(other_list[index])
delimiter
(a[n:] + [default])[0]
delimiter
maxlen = max(len(sublist) for sublist in a)
delimiter
x, y = zip(*lst)
delimiter
distribution = scipy.stats.gengamma(100, 70, loc=50, scale=10)
delimiter
run()
delimiter
str(dt)
delimiter
[(x - 1) for x in perm_index[i][1:]]
delimiter
s.sendmail(from_email, emails, msg.as_string())
delimiter
self.entry.pack()
delimiter
sub_dict = dict([(key, round(a[key] - b.get(key, 0), 1)) for key in a])
delimiter
True
delimiter
sent_detector.tokenize(your_text)
delimiter
tuples = [tuple(x) for x in subset.values]
delimiter
list_of_groups = zip(*((iter(the_list),) * group_size))
delimiter
o = urlparse.urlparse(self.request.url)
delimiter
app.exec_()
delimiter
time.sleep(1)
delimiter
a /= a.sum(axis=1)[:, (numpy.newaxis)]
delimiter
layout.addWidget(grview)
delimiter
A[0:4, (1)]
delimiter
module.workflow_set.filter(trigger_roles__in=[self.role], allowed=True)
delimiter
do_something_with(wrapper[0])
delimiter
[([0] * len(row) if 0 in row else row) for row in matrix]
delimiter
plt.show()
delimiter
matchingVals = [x for x in a if x > 2]
delimiter
datetime.time(0)
delimiter
r = requests.delete(URL_delete, params=mydata)
delimiter
app.register_blueprint(heysyni)
delimiter
print(os.getcwd())
delimiter
plt.subplots_adjust(right=0.75)
delimiter
any(sublst == lst[i:i + n] for i in range(len(lst) - n + 1))
delimiter
out.remove(x)
delimiter
winsound.Beep(Freq, Dur)
delimiter
print(sorted(inputWords, key=lambda word: [alphabet.index(c) for c in word]))
delimiter
urllib.parse.unquote(s)
delimiter
testit()
delimiter
task.cancel()
delimiter
bothlists[x[0]].append(x)
delimiter
request.data
delimiter
dgtsv = lapack.dgtsv_
delimiter
requests.delete(url, **kwargs)
delimiter
ax.autoscale()
delimiter
new_list = map(operator.itemgetter(1), old_list)
delimiter
glVertex2i(10, 10)
delimiter
zip(*lis)
delimiter
df.ix[:, ((df == 0).all())]
delimiter
cv2.destroyAllWindows()
delimiter
print(np.where(~mask)[0])
delimiter
ax.legend()
delimiter
plt.imshow(im2, cmap=plt.cm.gray)
delimiter
p = Process(target=fn)
delimiter
popen.wait()
delimiter
self.periodiccall()
delimiter
plt.ylim([-400, 400])
delimiter
[Teaser(Context(result)) for result in self.post.results]
delimiter
mp.Process(target=run, args=(_QUEUE, cb, func, args, kwargs)).start()
delimiter
print((dt.datetime.combine(dt.date(1, 1, 1), t) + delta).time())
delimiter
len([_f for _f in a_list if _f]) == len(a_list)
delimiter
plt.show(block=True)
delimiter
s.multiply(1 / np.sqrt(s.multiply(s).sum(1)))
delimiter
sys.stdout.flush()
delimiter
os.path.exists(my_path)
delimiter
ax.set_ylim([-2, 2])
delimiter
mp.Process.__init__(self)
delimiter
m[:, ([0])].shape
delimiter
filepath = os.path.abspath(filepath)
delimiter
self.button.clicked.connect(self.testMethod)
delimiter
topdirs = [os.path.split(x)[0] for x in dirs]
delimiter
print((m.group(1), m.group(2)))
delimiter
a.reshape(2, 2, 2, 2).sum(axis=1).sum(axis=2)
delimiter
x.reshape(4, 2, 2)
delimiter
raise ValueError
delimiter
sorted(s1, key=prefixed_digits())
delimiter
plt.show()
delimiter
df.index = pd.DatetimeIndex(df.index)
delimiter
list(range(1, 6)) + list(range(15, 20))
delimiter
df.index.level_map
delimiter
br.select_form(nr=0)
delimiter
pd.rolling_apply(df, 12, lambda x: np.prod(1 + x) - 1)
delimiter
temp.append(sub_list[0])
delimiter
admin.site.register(Employee, EmployeeAdmin)
delimiter
i += 1
delimiter
print(np.sqrt(np.sum((p[:, (np.newaxis)] - p[(np.newaxis), :]) ** 2, axis=-1)))
delimiter
set(x for x, count in common if count == common[0][1])
delimiter
cat_sorted = zip(*sorted(zip(*cat), key=itemgetter(2)))
delimiter
print(my_list)
delimiter
signal.signal(signal.SIGALRM, handler)
delimiter
plt.show()
delimiter
pd.DataFrame(MM, dtype=int, columns=Col)
delimiter
conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
db.session.add(region2)
delimiter
time.sleep(2)
delimiter
print_matrix(spiral(5, 5))
delimiter
map(list, list(result.items()))
delimiter
mylist = [(w[0] + w[1]) for w in words]
delimiter
img.fill(255)
delimiter
random.randrange(5, 10)
delimiter
__mycode = True
delimiter
max(iter(stats.items()), key=operator.itemgetter(1))[0]
delimiter
args = parser.parse_args()
delimiter
print(line)
delimiter
some_module.py
delimiter
list(obj.children)
delimiter
print(map(str, young_fellas))
delimiter
do_something()
delimiter
sorted(list(the_dict.items()), key=lambda x: x[1], reverse=True)[:10]
delimiter
a = [two for one, two in zip(a, a[1:]) if two[1] > one[1]]
delimiter
f.close()
delimiter
df = df[dupemask]
delimiter
cursor = db.cursor()
delimiter
plt.xlim(x.min(), x.max())
delimiter
os.remove(temp_file)
delimiter
app.MainLoop()
delimiter
pd.concat([df, df1], axis=0, ignore_index=True)
delimiter
ax.grid()
delimiter
tuple.__new__(cls, (x, y))
delimiter
sessions.append(sessionmaker(bind=engine)())
delimiter
f.geturl()
delimiter
v, b, n = j[4:7][::-1]
delimiter
np.array([[x] for x in a1])
delimiter
log.start()
delimiter
print(test2())
delimiter
form.save()
delimiter
plt.subplots_adjust(bottom=0.1)
delimiter
df
delimiter
app.run(debug=True)
delimiter
rnd = np.random.rand(n)
delimiter
sometuple + (someitem,)
delimiter
x[x.columns[0]]
delimiter
driver.quit()
delimiter
id = Column(Integer, primary_key=True)
delimiter
app.MainLoop()
delimiter
knapp.pack(pady=10)
delimiter
views / __init__.py
delimiter
ssh = paramiko.SSHClient()
delimiter
QMainWindow.__init__(self, parent)
delimiter
func(*args)
delimiter
int(n ** 0.5) + 1
delimiter
main()
delimiter
list(chain.from_iterable((i, i * i) for i in range(1, 10)))
delimiter
bar = foo(bar)
delimiter
L += [4] * 10
delimiter
ufunc.reduceat(mat.data, mat.indptr[:-1])
delimiter
pygame.init()
delimiter
response.set_data(json.dumps(d))
delimiter
df[col_values] = df[col_values].astype(float)
delimiter
f.write(text)
delimiter
df.to_json()
delimiter
print(time.mktime(new.timetuple()))
delimiter
session.add(obj)
delimiter
plt.show()
delimiter
termios.tcsetattr(sys.stdin, termios.TCSADRAIN, new_settings)
delimiter
self.entry.focus()
delimiter
k.reshape(k.shape + (1,))
delimiter
reactor.run()
delimiter
a, b, c
delimiter
result = first_date + np.arange(24) * datetime.timedelta(hours=1)
delimiter
dictionary[next(iter(dictionary))]
delimiter
powd = DataFrame(data2)
delimiter
deletec[:2]
delimiter
input()
delimiter
print(int(date[:4]) + 1)
delimiter
__main__()
delimiter
QtGui.QMainWindow.__init__(self)
delimiter
df.mean()
delimiter
print(sys.path)
delimiter
t = threading.Thread(target=task, args=(data,))
delimiter
pd.DataFrame.from_dict(d)
delimiter
yx.sort()
delimiter
color = ebar[0].get_color()
delimiter
window.show_all()
delimiter
f.close()
delimiter
browser.quit()
delimiter
filtered_list = [x for x in input_list if x % 2 == 0]
delimiter
newdf.head()
delimiter
d = datetime.date.today()
delimiter
d = dict((t.key, t) for t in [t0, t1, t2])
delimiter
print(list(tb_notes.select().execute()))
delimiter
writer.writerow(row)
delimiter
result.append(([key] * len(values), values))
delimiter
plt.axis([0, 10, 0, 1])
delimiter
pickle.load(f)
delimiter
p.communicate()
delimiter
all_potion_names = list(all_potions.keys())
delimiter
wkt = dane[0][0].read()
delimiter
sys.path.append(os.path.dirname(__file__))
delimiter
[(lower + x * (upper - lower) / length) for x in range(length)]
delimiter
time.sleep(1)
delimiter
get_object_or_404(Book, pk=id)
delimiter
inspect.stack()[2]
delimiter
fig.canvas.draw()
delimiter
dists.shape
delimiter
plt.xlim(0, 20)
delimiter
list(_)
delimiter
time.mktime(dt.timetuple())
delimiter
plt.draw()
delimiter
print(txtrecord.to_text())
delimiter
HttpResponse(status=410)
delimiter
ax.set_xlim(0, 6)
delimiter
name[0][0][-1][-1]
delimiter
pool.append(Process(target=pool_func, args=(q,)))
delimiter
sys.stdout.writelines(sorted_lines)
delimiter
p.terminate()
delimiter
thestring[:-len(ending)]
delimiter
output_list = [x for x in input_list if isinstance(x, list)]
delimiter
dftmtx(2)
delimiter
img = pygame.image.load(filename)
delimiter
socket.close()
delimiter
last_lines.append(line)
delimiter
X.dot(A.T)
delimiter
foo()
delimiter
blob.delete()
delimiter
zeros = [([0] * N) for _ in range(M)]
delimiter
list(chain.from_iterable(ls[:1] + ls[2:]))
delimiter
root.mainloop()
delimiter
[item for item in sequence if item < value]
delimiter
sys.exit(0)
delimiter
lock.acquire()
delimiter
v.setdefault(value, []).append(key)
delimiter
dict_setitem(self, key, value)
delimiter
[1][0][0]
delimiter
res = requests.post(url, files=files, data=data, headers=headers)
delimiter
items = SomeModel.objects.all()
delimiter
b_t = np.vstack((b, np.ones_like(b)))
delimiter
user.save()
delimiter
plt.tight_layout()
delimiter
pylab.xlim([-2.5, 2.5])
delimiter
sudo(command, user=sudouser)
delimiter
plt.show()
delimiter
dict([(k, v) for k, v in d.items() if k >= begin and k <= end])
delimiter
Dataset.objects.filter(i_begin_int__lte=170, i_end_int__gte=170)
delimiter
data.append(sheet1.cell(i, 1).value)
delimiter
time.mktime(then.timetuple()) * 1000.0 + then.microsecond / 1000.0
delimiter
not sum([(not i in A) for i in B]) if len(A) == len(B) else False
delimiter
plt.show()
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
df.reset_index(inplace=True)
delimiter
[a.join(b) for a, b in zip(df.a[10:20], df.b[10:20])]
delimiter
plt.ylim(0, 5)
delimiter
print(sys.argv[0])
delimiter
newMyList = [(v, k) for v, k in myList if not k in myDict]
delimiter
top.mainloop()
delimiter
[[i for i, n in enumerate(li) if n == x] for x in sorted(set(li))]
delimiter
print(k, d2.get(k, 0))
delimiter
reactor.run()
delimiter
limit = int(limit)
delimiter
sheet.set_portrait(False)
delimiter
simplejson.JSONEncoder.default(self, obj)
delimiter
plt.pcolor(data, vmin=0.01, vmax=0.99, cmap=my_cmap)
delimiter
df.Group.value_counts()
delimiter
foo()
delimiter
df.a.sort_values()
delimiter
Number(randint(1, 100))
delimiter
result = [makedict(elem) for elem in yourlist]
delimiter
plt.show()
delimiter
server.serve_forever()
delimiter
regex.findall(s)
delimiter
any((a[:] == [1, 20]).all(1))
delimiter
plt.gcf().show()
delimiter
iter(self.books.values())
delimiter
listbox.pack()
delimiter
probas_ = clf.predict_proba(Kt)
delimiter
ax.add_patch(rect2)
delimiter
json_obj = json.dumps(a_dict, ensure_ascii=False)
delimiter
tuple(map(operator.add, a, b))
delimiter
allow_unicode = True
delimiter
s.replace(d)
delimiter
pd.DataFrame(stdf.tolist())
delimiter
print([element for element, count in Counter(list1).most_common()])
delimiter
plt.gcf().autofmt_xdate()
delimiter
[(next(car) if item else next(a)) for item in lyst]
delimiter
pd.concat(g for i, g in grouped if len(g) > 2)
delimiter
proc.stdin.close()
delimiter
alist = [arr[(0), :], arr[1:, (-1)], arr[(-1), :-1], arr[1:-1, (0)]]
delimiter
main()
delimiter
app.mainloop()
delimiter
cherrypy.engine.start()
delimiter
extra_logger.setLevel(logging.DEBUG)
delimiter
[match for match in matches]
delimiter
s[::-1]
delimiter
toarchive.filter(date__gt=interval).delete()
delimiter
root = tk.Tk()
delimiter
plt.show()
delimiter
data.pop()
delimiter
fig = plt.figure()
delimiter
df_c = pd.concat([df_a.reset_index(drop=True), df_b], axis=1)
delimiter
[(x + 1) for x in L]
delimiter
sum(i for i in range(a, b + 1) if not i % 2)
delimiter
z = dict(x, **y)
delimiter
np.sum(a), np.nonzero(np.any(a, axis=0))[0]
delimiter
conn.close()
delimiter
eliminated = eliminated.append(x)
delimiter
rect.set_visible(True)
delimiter
[vali[i] for i, vali in enumerate(f(*vals))]
delimiter
pd.melt(piv)
delimiter
urllib.request.install_opener(my_opener)
delimiter
obj = json.loads(json_string)
delimiter
s = s.lower()
delimiter
globals()[module_name] = __import__(module_name)
delimiter
sys.stdout.flush()
delimiter
results.extend(re.findall(key, message, re.IGNORECASE))
delimiter
print([list(v) for k, v in groupby(sorted_list, key=move)])
delimiter
print(dumps(a.__dict__))
delimiter
angle = atan2(a.x * b.y - a.y * b.x, a.x * b.x + a.y * b.y)
delimiter
api = falcon.API()
delimiter
plt.show()
delimiter
weekly.append(sum(visitors[x:x + 7]))
delimiter
randomvalue = myRandom.randint(0, 10)
delimiter
df[column_list].iloc[row_index_list].mean(axis=0)
delimiter
func()
delimiter
L4 = [n for n in L1 if n not in tmpset]
delimiter
shutil.copyfile(path, os.path.join(*path_rel))
delimiter
counter_list = [item for item in counter_list if len(item) != 0]
delimiter
{{f.following_set.count()}}
delimiter
stripped_list = [j.strip() for j in initial_list]
delimiter
plt.show()
delimiter
np.isclose([10000000000.0, 0], [1.00001e-10, 0])
delimiter
workbook.close()
delimiter
print(df2.set_index([0, 1]))
delimiter
df
delimiter
ax.imshow(pawprint)
delimiter
g.plot()
delimiter
df[(df != 0).all(1)]
delimiter
list.remove(item_to_be_removed)
delimiter
set(x[0] for x in zip(a, a[1:]) if x[0] == x[1])
delimiter
print(os.path.getmtime(os.path.join(SOME_DIR, filename)))
delimiter
win = gtk.Window()
delimiter
plt.show()
delimiter
ctypes.cast(x, ctypes.POINTER(ctypes.c_ulong))
delimiter
now_epoch = (datetime.utcnow() - datetime(1970, 1, 1)).total_seconds()
delimiter
vec.fit_transform(measurements).toarray()
delimiter
map(bool, a).index(True)
delimiter
l[0][1]
delimiter
print(a[:-10:-1])
delimiter
bottleneck.partsort(a, a.size - 10)[-10:]
delimiter
l = list(zip_longest(x, x, fillvalue=[]))
delimiter
draw.ellipse((x - r, y - r, x + r, y + r), fill=(255, 0, 0, 0))
delimiter
__init__.py
delimiter
[(A[k], B[k]) for k in A if k in B]
delimiter
RNA_integers = [RNA_dictionary[i] for i in RNA_list if i in RNA_dictionary]
delimiter
p.stdout.close()
delimiter
min(items, key=lambda item: p1.compute_distance_to(item.loc))
delimiter
arr = numpy.random.randint(2, size=(n,))
delimiter
list(chain.from_iterable(l))
delimiter
round(random.random() * (m_time - min_time) + min_time, 1)
delimiter
plt.show()
delimiter
cv2.destroyAllWindows()
delimiter
np.allclose(C0, C2)
delimiter
ax.plot(data)
delimiter
mydog.findall(s)[0]
delimiter
uniq_animal_groups = set(map(tuple, animal_groups))
delimiter
ax.set_xticklabels([])
delimiter
QtCore.Qt.ItemIsEnabled
delimiter
writer.writerow(the_list)
delimiter
string = float(string) if string.isdigit() else string
delimiter
logger.setLevel(logging.DEBUG)
delimiter
a / (a - 1)
delimiter
A[1], A[0], A[1] = A[0], A[1], A[1]
delimiter
next(e in lestring for e in lelist if e in lestring)
delimiter
print(np.all(norm1 == norm2))
delimiter
canvas.pack()
delimiter
django.setup()
delimiter
print(df2.reindex(df.index[df.index.isin(df2.index)]))
delimiter
ii = np.nonzero(a == 4)
delimiter
subprocess.Popen(command, stdout=subprocess.PIPE).communicate()[0]
delimiter
json.loads(data, object_hook=_json_object_hook)
delimiter
sys.stdout.flush()
delimiter
a[::2] = 1
delimiter
value = my_dic.get(100, 0)
delimiter
fig = plt.figure()
delimiter
numpy.isnan(myarray).any()
delimiter
b = a[:]
delimiter
do_something_with(result)
delimiter
ax.set_yticks([0.5, 1.0])
delimiter
cnx.sendInitPresence()
delimiter
np.average(a, axis=-1).repeat(a.shape[-1]).reshape(a.shape)
delimiter
classifier.fit(X, y)
delimiter
log.setLevel(logging.DEBUG)
delimiter
print(trks.name())
delimiter
plt.draw()
delimiter
a.setdefault(key, [])
delimiter
axcut.set_visible(False)
delimiter
array([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0, 0.0]])
delimiter
reactor.run()
delimiter
pd.isnull(df).any(axis=1)
delimiter
win.run()
delimiter
urlsIwant = [x for x in allurls if any(w in x for w in words)]
delimiter
new_list.extend(i)
delimiter
text_file.close()
delimiter
np.exp(-4 * np.log(2) * ((x - x0) ** 2 + (y - y0) ** 2) / fwhm ** 2)
delimiter
A.objects.filter(id=some_a.id).update(hidden=True)
delimiter
s.apply(lambda x: Series(1, index=x)).fillna(0)
delimiter
self.SetSizerAndFit(sizer)
delimiter
pkl_file.close()
delimiter
print(m.group(1))
delimiter
resp.text, resp.status_code, list(resp.headers.items())
delimiter
self.tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
X_train = scaler.fit_transform(X_train)
delimiter
f.close()
delimiter
request.user.get_profile().token
delimiter
session.commit()
delimiter
self.frame.pack(fill=BOTH, expand=YES)
delimiter
count = sum(1 for line in myfile)
delimiter
fig = plt.figure()
delimiter
time.sleep(10)
delimiter
random.choice(list(range(100, 20100, 100)))
delimiter
[f(aItem, bItem) for aItem, bItem in zip(a, b)]
delimiter
G = nx.Graph()
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
delimiter
match.group(0)
delimiter
print(sum(map(lambda x: x * x, l)))
delimiter
normalizedscores = {u: (float(l) / maxscore) for u, l in list(linkscores.items())}
delimiter
resp = urllib.request.urlopen(req)
delimiter
all_data = []
delimiter
a.extend(a, b)
delimiter
dict((k, sum(d[k] for d in dict1)) for k in dict1[0])
delimiter
urllib.request.urlopen(url).read()
delimiter
datetime.timedelta(0)
delimiter
M = scipy.sparse.csr_matrix(M)
delimiter
runserver.py
delimiter
dict(itertools.islice(iter(dictionary.items()), begin, end + 1))
delimiter
main1()
delimiter
[a for a, a in list(params.items())]
delimiter
tk.Tk.__init__(self, *args, **kwargs)
delimiter
{{(user | hash): item}}
delimiter
len(set(sum(sl) for sl in L)) == 1
delimiter
[id(x) for x in test]
delimiter
[x for x in L if x not in delitems]
delimiter
sum(i != j for i, j in zip(a, b))
delimiter
a.reshape(-1, R)
delimiter
random.shuffle(myList)
delimiter
conn.commit()
delimiter
self.thisptr.clone()
delimiter
np.average(df.y - df.x, weights=df.index.asi8)
delimiter
[line for time, line in sorted(zip(listofTimes, listofLines))]
delimiter
VVg = np.sum(np.dot(GinvVV[:, :-1], GRZVV.T), axis=-1) * VV
delimiter
frame.axes.get_yaxis().set_ticks([])
delimiter
e.pack()
delimiter
self.window1.show()
delimiter
foo()
delimiter
resp.peercert
delimiter
df.iloc[0]
delimiter
cursor.execute(insert_query, data)
delimiter
pygame.display.flip()
delimiter
spherical_dist(locations_1, locations_2[:-1])
delimiter
plt.show()
delimiter
G = nx.Graph()
delimiter
print(repr(line))
delimiter
sock.connect((host, port))
delimiter
possibles.update(locals())
delimiter
que = multiprocessing.Manager().Queue()
delimiter
fh.write(base64.decodestring(imgData))
delimiter
fig = plt.figure()
delimiter
re.compile(regex).groups
delimiter
[(v * v) for v in vals]
delimiter
MyApp().run()
delimiter
print(self.time)
delimiter
[char for char in yourstring]
delimiter
sum(1 for item in arr if item == 0 and type(item) is type(0))
delimiter
time.sleep(1)
delimiter
np.stack(np.nonzero(df.values)).T
delimiter
user.user_trips.all()
delimiter
list(map(lambda f, a: f(a), *zip(*itertools.product(funcs, args))))
delimiter
print(result.group(1))
delimiter
app = wx.App(False)
delimiter
browser.select_form(nr=0)
delimiter
print(r.data())
delimiter
print(sorted(a, key=Counter(a).get, reverse=True))
delimiter
pandas.DataFrame.from_records([s.to_dict() for s in signals])
delimiter
df.groupby(level=0, as_index=False).nth(2)
delimiter
proc.stdin.flush()
delimiter
dictionary = json.loads(cur.fetchone()[0])
delimiter
proc.wait()
delimiter
c = (len(a) * a - sum(a)) / b
delimiter
ax.set_title(title)
delimiter
[0][0][0]
delimiter
field.setAlignment(QtCore.Qt.AlignCenter)
delimiter
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
delimiter
__init__.py
delimiter
a.func(**kwargs)
delimiter
bool(number % 2)
delimiter
A[np.lexsort(A.T)]
delimiter
sample(10, [2, 4, 8, 16])
delimiter
sum(a, b)
delimiter
len(np.atleast_1d(a))
delimiter
df = pd.DataFrame(data.tolist(), columns=data.dtype.names)
delimiter
tornado.ioloop.IOLoop.instance().start()
delimiter
os.makedirs(dst)
delimiter
list(map(len, s.split()))
delimiter
user.put()
delimiter
a = sorted(list(a.items()), key=lambda x: x[1])
delimiter
plt.xlim(X[0] - day, X[-1] + day)
delimiter
plt.plot(list(range(10)))
delimiter
a = numpy.tile([1, -1], 15)
delimiter
server.quit()
delimiter
plt.show()
delimiter
plt.show()
delimiter
mylist = [mylist[i] for i in myorder]
delimiter
name = models.CharField(max_length=100)
delimiter
p1.join()
delimiter
new_array = map(list, old_array)
delimiter
infile.close()
delimiter
Base.metadata.bind = engine
delimiter
list_of_lines = [next(f) for _ in range(chunk_len)]
delimiter
plt.show()
delimiter
print(key, sum(r[2] for r in rows))
delimiter
content = content_file.read()
delimiter
ax.set_ylim(0, 10)
delimiter
conda - -version
delimiter
Page.query.get(page_id).query.delete()
delimiter
field_names = [i[0] for i in cursor.description]
delimiter
np.allclose(result_data, result_data2)
delimiter
time.sleep(1800)
delimiter
project_root = os.path.dirname(os.path.abspath(__file__))
delimiter
c.fetchall()
delimiter
print(len(unicode_string))
delimiter
pl.plot(X, Cosine)
delimiter
plt.show()
delimiter
hex(15)
delimiter
[0, 1, 1, 0, 0, 0],
delimiter
Peak()
delimiter
agent_list = [list(ast.literal_eval(line)) for line in f]
delimiter
app.MainLoop()
delimiter
ax = fig.add_subplot(111)
delimiter
cnxn = pyodbc.connect(connectString)
delimiter
plt.subplot(122)
delimiter
mylist.count(mylist[0]) == len(mylist)
delimiter
p.join()
delimiter
r = requests.post(url, files=files, headers=headers)
delimiter
scrapyd
delimiter
new_dict[v].append(k)
delimiter
avg.append(sum(d[key]) / len(d[key]))
delimiter
list(merge(list1, list2))
delimiter
urllib.request.install_opener(opener)
delimiter
{{form.content()}}
delimiter
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
delimiter
df.dropna(thresh=df.shape[1] - 7)
delimiter
lines.sort(key=extract_time, reverse=True)
delimiter
fig, ax = plt.subplots()
delimiter
sleep(1)
delimiter
plt.show()
delimiter
a = np.array(df.C)
delimiter
plt.show()
delimiter
lambda name: (name[0], -len(name), name)
delimiter
print(nodes[0].firstChild.nodeValue)
delimiter
__init__.py
delimiter
sorted(list(d.items()), key=foo)
delimiter
bytearray(hex_data)
delimiter
final_data[cnames[i]] = np.zeros((nalpha, nmach, nbeta, nalt))
delimiter
hello.helloworld()
delimiter
Motifs.insert(x, Motif)
delimiter
main()
delimiter
tree = ET.fromstring(msg)
delimiter
list(zip(foo, bar))
delimiter
[x for x in range(LOW, HIGH) if len(set(str(x))) == len(str(x))]
delimiter
db.session.commit()
delimiter
self._file.close()
delimiter
request.user
delimiter
categories = {k: (sum(v) / len(v)) for k, v in list(categories.items())}
delimiter
logging.setLoggerClass(ColoredLogger)
delimiter
d > timedelta(minutes=1)
delimiter
print(json.dumps(obj, indent=2))
delimiter
time.sleep(5)
delimiter
np.allclose(omega, slicing_summing(a, b, c))
delimiter
Popen(cmd, shell=True, cwd=newpath)
delimiter
rdd.collect()
delimiter
window.show()
delimiter
[a for b, b in list(params.items())]
delimiter
hex(int(time.time()))
delimiter
response = requests.get(url, headers=headers)
delimiter
mlab.show()
delimiter
type(a)(b)
delimiter
ax.plot(x, y)
delimiter
dicts = [dict(zip(fields, d)) for d in data]
delimiter
plt.plot(x, y)
delimiter
print(team.__dict__ == team2.__dict__)
delimiter
std_2 = numpy.std(list_size_2, axis=1)
delimiter
w.pack()
delimiter
sum(len(word) for word in wordslist)
delimiter
ax.plot(x, y)
delimiter
df.TIMESTAMP.dt.hour
delimiter
ax.margins(0.1)
delimiter
time.sleep(1)
delimiter
PyArray_ENABLEFLAGS(arr, NPY_ARRAY_OWNDATA)
delimiter
sum(num for num in numbers if num % 2 == 1)
delimiter
np.append(xs, arr[i])
delimiter
s = numpy.fromstring(s, numpy.int16) / 10 * 5
delimiter
start_time = start_time.replace(minute=ceil_to, second=0, microsecond=0)
delimiter
dict_with_ints = dict((k, int(v)) for k, v in dict_with_strs.items())
delimiter
layout.addWidget(self.button)
delimiter
[k for k, v in list(self.__class__.__dict__.items()) if type(v) is property]
delimiter
distance = skfmm.distance(m)
delimiter
urllib.request.urlopen(url)
delimiter
counts.sort(key=operator.itemgetter(1))
delimiter
transaction.commit()
delimiter
ax.set_yticks([1, 2, 8])
delimiter
my_array = my_array.reshape((50, 50))
delimiter
test.pop()
delimiter
int(x)
delimiter
p.close()
delimiter
plt.xlim([-400, 400])
delimiter
print(my_list[1::2])
delimiter
ax2.yaxis.set_visible(False)
delimiter
len(x) >= 4
delimiter
process.stdin.flush()
delimiter
app.ActiveWorkbook.ActiveSheet.Cells(r, c).Formula
delimiter
[(0 if i < 0 else i) for i in a]
delimiter
subprocess.check_call(cmd, startupinfo=startupinfo)
delimiter
smagnoni
delimiter
d.setdefault(year, []).append(value)
delimiter
[0, 0, 0, 0, 0],
delimiter
plt.show()
delimiter
[child for child in soup.td.children if isinstance(child, str)]
delimiter
dg.Items.Add(value)
delimiter
ax.get_xaxis().set_ticklabels([])
delimiter
s.save()
delimiter
app.register_blueprint(mod)
delimiter
divtd(datetime.timedelta(hours=12), datetime.timedelta(hours=2))
delimiter
df_out = pd.concat([df, df_v], 1)
delimiter
time.sleep(1)
delimiter
sum(map(operator.mul, vector1, vector2))
delimiter
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
delimiter
df.T.squeeze()
delimiter
dict((x, data.count(x)) for x in data)
delimiter
fileMenu = Menu(menubar, tearoff=False)
delimiter
B in (A[i:i + len(B)] for i in range(len(A)))
delimiter
buf.seek(0)
delimiter
sum(itertools.starmap(operator.mul, itertools.combinations(l, 2)))
delimiter
my_shelf.close()
delimiter
strat2.execute()
delimiter
main()
delimiter
msg = MIMEText(fp.read())
delimiter
yourProcess.terminate()
delimiter
x2 = sorted(x1, key=lambda t: t[1])
delimiter
conn.close()
delimiter
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
delimiter
np.diagonal(np.dot(b, a)).T
delimiter
plt.subplots_adjust(top=0.85)
delimiter
pygame.display.flip()
delimiter
writer.UpdatePipeline()
delimiter
A[([0, 2]), :, 1:]
delimiter
plt.show()
delimiter
ax1.plot(X, Y)
delimiter
do_something()
delimiter
data.columns = [x.lower() for x in data.columns]
delimiter
mlab.show()
delimiter
[doSomethingWith(ch) for ch in s]
delimiter
df.values.tolist()
delimiter
s.sum()
delimiter
plt.draw()
delimiter
page = urllib.request.urlopen(url)
delimiter
matplotlib.pylab.show(block=False)
delimiter
xcode - select - -install
delimiter
img.putdata(data)
delimiter
max([a for a in yourlist if a[2] >= 100], key=itemgetter(1))
delimiter
(df == 1).any(axis=1)
delimiter
args = main_parser.parse_args()
delimiter
plt.close()
delimiter
ax.set_yticks(np.arange(data.shape[0]) + 0.5, minor=False)
delimiter
eval(input())
delimiter
bar()
delimiter
df = DataFrame(data)
delimiter
random.shuffle(list(range(n)))[:k]
delimiter
time.sleep(20)
delimiter
pdb.set_trace()
delimiter
mat = hstack([mat[:, 0:i], mat[:, i + 1:]])
delimiter
self.response.out.write(zipstream.getvalue())
delimiter
parse_qs(urlparse(url).query)
delimiter
set([1, 2]) in {1, 2, frozenset([1, 2])}
delimiter
gtk.gdk.notify_startup_complete()
delimiter
numpy.where(your_array_name != 0, 1, 0).sum()
delimiter
setattr(self, property, getattr(self, property) + amount)
delimiter
self.cursor.execute(query)
delimiter
random.choice(states.split())
delimiter
pyplot.show()
delimiter
random.sample(list(D.items()), K)
delimiter
active_id = hex(ewmh.EWMH().getActiveWindow().id)
delimiter
self.foo.kill()
delimiter
results = [[1, 0, 1], [0, 1, 0], [1, 1, 0]]
delimiter
classifier.classify(test_sent_features)
delimiter
scipy.signal.filtfilt
delimiter
p.stdout.close()
delimiter
results = map(int, results)
delimiter
cursor.close()
delimiter
a = forms.CharField(max_length=20)
delimiter
sum(p) * (c[1] - c[0])
delimiter
self.process.stdin.flush()
delimiter
pipeline.fit(X, y)
delimiter
f.write(response.content)
delimiter
im.save(newpathname)
delimiter
Counter(chain.from_iterable(map(set, listOfLists)))
delimiter
temp_list = [i for i in squares()]
delimiter
window.SetFocus()
delimiter
mask1 &= ~mask2
delimiter
self.grid_columnconfigure(0, weight=1)
delimiter
evt.Skip()
delimiter
(idx[1::2] - idx[::2]).max()
delimiter
inv.fill((255, 255, 255, 255))
delimiter
print(collections.Counter(words))
delimiter
uniq = [x for x in a if x not in seen and not seen.add(x)]
delimiter
pd.concat([T, df])
delimiter
getattr(obj, name)
delimiter
session.commit()
delimiter
line = line.rstrip()
delimiter
someMethod.__code__.co_argcount
delimiter
sorted(li, key=itemgetter(1))
delimiter
plt.clf()
delimiter
serve_pil_image(img)
delimiter
cursor = db.test.find(timeout=False)
delimiter
solution.loc[df.index]
delimiter
foo[i], foo[j] = foo[j], foo[i]
delimiter
plt.show()
delimiter
find_majority([1, 1, 1, 1, -1, -1, -1, 0])
delimiter
clf.fit(X, y)
delimiter
driver.manage().window().maximize()
delimiter
matches = [x for x in a if x in str]
delimiter
sorted(templist, key=int, reverse=True)
delimiter
unittest.main()
delimiter
d = defaultdict(lambda : defaultdict(lambda : defaultdict(list)))
delimiter
cursor.close()
delimiter
plt.draw()
delimiter
graph = facebook.GraphAPI(oauth_access_token)
delimiter
y[:][::2]
delimiter
logger.setLevel(logging.DEBUG)
delimiter
commands[com](*args)
delimiter
file.flush()
delimiter
np.add.reduceat(X[:, (idx0)], cut_idx, axis=1)
delimiter
logger.setLevel(logging.DEBUG)
delimiter
dict(zip(tokens[0::2], tokens[1::2]))
delimiter
len(set(items)) == 1
delimiter
setattr(self, name, value)
delimiter
pd.DataFrame([s1, s2]).min()
delimiter
time.sleep(0.1)
delimiter
cnxn.close()
delimiter
args = parser.parse_args()
delimiter
plt.show()
delimiter
df.astype(int)
delimiter
ax.legend()
delimiter
kana = a + k + g + s + z + t + d + n + h + b + p + m + y + n
delimiter
l1.append([4, 5, 6])
delimiter
time.sleep((future - t).seconds)
delimiter
signal.signal(signal.SIGALRM, original_handler)
delimiter
x, y = a[0:2]
delimiter
print(response.text)
delimiter
min(items, key=lambda x: abs(x - pivot))
delimiter
time.sleep(1)
delimiter
root.mainloop()
delimiter
print(f.getvalue())
delimiter
numpy.all(product1 == product2)
delimiter
User.query.get(id)
delimiter
plt.draw()
delimiter
values = [d[k] for k in keys]
delimiter
df.where(df.a.isNull()).count()
delimiter
a.symmetric_difference(b)
delimiter
{v: k for k, vs in list(extension_to_type_mapping.items()) for v in vs}
delimiter
cv2.waitKey(0)
delimiter
self.request.query_string
delimiter
new = str[:1] + new + str[6:]
delimiter
print(sys.exit.__doc__)
delimiter
im.show()
delimiter
print(f(4))
delimiter
json.dumps(data)
delimiter
header = input.readline()
delimiter
plt.show()
delimiter
x[(list(range(0, i)) + list(range(i + 1, x.shape[0]))), :, :]
delimiter
main()
delimiter
proc.stdin.close()
delimiter
out, err = p.communicate()
delimiter
pygame.sprite.Sprite.__init__(self)
delimiter
testdataframe2.plot(style=styles2, ax=ax)
delimiter
np.log(absd, absd)
delimiter
plt.contour(data)
delimiter
ax.patch.set_visible(False)
delimiter
map = [[a, b] for a, b in map if a > 0 and b > 0]
delimiter
print(Digit[i])
delimiter
{{car.date_of_manufacture | strftime}}
delimiter
df.iloc[:, (n)]
delimiter
ax.get_xaxis().set_ticks([2, 4, 6, 8])
delimiter
xprt.excel()
delimiter
run()
delimiter
data.append(ruamel.yaml.load(open(file_name)))
delimiter
~a.any(axis=1)
delimiter
subprocess.Popen(cmd_str, shell=True)
delimiter
pool.terminate()
delimiter
process.terminate()
delimiter
Test.__init__()
delimiter
con.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER)
delimiter
print(line)
delimiter
result = self.cur.executemany(sql, data)
delimiter
plt.figure()
delimiter
np.argwhere((Ax == Bx.min()) & (Ay == By.min()))
delimiter
s.stack().reset_index(level=1, drop=True)
delimiter
plt.show()
delimiter
plt.ylim(0, 20)
delimiter
cv2.destroyAllWindows()
delimiter
print(datetime.fromtimestamp(timestamp))
delimiter
obj.save()
delimiter
time.sleep(wtime)
delimiter
ax = fig.add_subplot(111)
delimiter
plt.show()
delimiter
plt.ylim(-1, 1)
delimiter
d = [(0.25 * math.sin(math.radians(i))) for i in range(0, 1024)]
delimiter
os.path.join(dir_name, base_filename + suffix)
delimiter
sizer.Add(buttons, 0, wx.EXPAND | wx.ALL, 5)
delimiter
plt.figure()
delimiter
m = re.search(reg, s)
delimiter
cherrypy.tree.mount(root)
delimiter
print(hash.hexdigest()[:10])
delimiter
smtp.starttls()
delimiter
pd.to_datetime(dte.stack()).unstack()
delimiter
msg.attach(body)
delimiter
cax.get_xaxis().set_visible(False)
delimiter
plt.xticks([])
delimiter
a = [x for x in names if any(pat in x for pat in pattern)]
delimiter
sys.exit(0)
delimiter
indices = tf.where(where)
delimiter
print(link.text)
delimiter
plt.show()
delimiter
plt.show()
delimiter
arr.T.reshape(5, -1)
delimiter
ax.set_xlim(0, 24)
delimiter
print(x[np.unique(a)])
delimiter
errf.close()
delimiter
proc.terminate()
delimiter
ax.set_ylim(-40, 40)
delimiter
abort(404)
delimiter
print((a, b, c))
delimiter
connection.commit()
delimiter
df = df2.transpose()
delimiter
c.py
delimiter
bmp.Bind(wx.EVT_ENTER_WINDOW, onWindow)
delimiter
[(not i) for i in mylist]
delimiter
pdfkit.from_string(html_text, output_filename)
delimiter
issubclass(A, A)
delimiter
abs(b - c) < abs(b) / 1000000000000
delimiter
u = Union(a, b)
delimiter
pygame.display.update()
delimiter
s += str(n)
delimiter
df.rename(index=lambda x: tup)
delimiter
seaborn.voilinplot(ax=ax, data=df, **violin_options)
delimiter
ax.set_xlim([-0.5, 4.5])
delimiter
[x for y in zip(list, list) for x in y]
delimiter
df1.corr()
delimiter
initpyxmod()
delimiter
plt.show()
delimiter
dat1 = pd.concat([dat1, dat2], axis=1)
delimiter
map(f, list(range(10)))
delimiter
line = line.rstrip()
delimiter
self.assertEqual([attr, val], [attr, getattr(self.nu, val)])
delimiter
filename = sys.argv[-1]
delimiter
Base.metadata.create_all(engine)
delimiter
fig.savefig(os.path.join(my_path, my_file))
delimiter
instance.__dict__
delimiter
sum(tuples, ())
delimiter
df
delimiter
sys.argv[1:]
delimiter
k = lambda x: x[1]
delimiter
list(k for k, g in itertools.groupby(numbers))
delimiter
ax.set_xlim((0, 10))
delimiter
ax.yaxis.set_major_locator(ticker.MultipleLocator(1))
delimiter
object.__getattribute__(self, name)
delimiter
cmp(x.lower(), y.lower())
delimiter
print ()
delimiter
fps = cap.get(cv2.cv.CV_CAP_PROP_FPS)
delimiter
logger.addHandler(handler)
delimiter
dict(zip_longest(x, y))
delimiter
df.apply(update_vals, axis=1)
delimiter
cleared, dominated
delimiter
fill_between(x.values, y.min(), y.values, alpha=0.5)
delimiter
plt.show()
delimiter
print(name.lower())
delimiter
sys.stdout.write(line)
delimiter
b.doSomething()
delimiter
sock.connect((host, port))
delimiter
bulk.execute()
delimiter
gevent.wait()
delimiter
libxslt - devel
delimiter
(OrderedDict(row) for i, row in df.iterrows())
delimiter
mylist[:]
delimiter
menu.remove(i)
delimiter
logger.setLevel(logging.INFO)
delimiter
globals()[n] = 1
delimiter
new_array = list(set(main_array) - set(second_array))
delimiter
np.corrcoef(df1.s1, df1.s2)
delimiter
row.delete()
delimiter
[[ix.upper() for ix in x] for x in nested_list]
delimiter
array2 = np.tile(array1, (20, 20, 1, 1))
delimiter
cv2.destroyAllWindows()
delimiter
req.close()
delimiter
s[-1].isdigit()
delimiter
print(arr[idx])
delimiter
pd.Series(*zip(*((b, a) for a, b in data)))
delimiter
ind = np.flatnonzero(mask)
delimiter
conn.close()
delimiter
df.iloc[:5, :4]
delimiter
tangent = np.array([1 / ds_dt] * 2).transpose() * velocity
delimiter
app.run(threaded=True)
delimiter
l.sort(key=asum)
delimiter
width, height = img.size
delimiter
print(etree.tostring(document, xml_declaration=True))
delimiter
print(unicode_text.encode(sys.getfilesystemencoding()))
delimiter
root.overrideredirect(True)
delimiter
sys.exit(1)
delimiter
{key: list(set(a[key]) - set(b.get(key, []))) for key in a}
delimiter
epoch_time = int(time.time())
delimiter
time.sleep(0.01)
delimiter
time.sleep(5)
delimiter
np.reshape(self.data, newshape=(len(self.data) / 5, 5))
delimiter
[flatten[int(i * 2)] for i in range(int(len(flatten) / 2))]
delimiter
Fraction(*(0.25).as_integer_ratio())
delimiter
signal.signal(signal.SIGINT, self.handler)
delimiter
np.may_share_memory(a, a[:, 1::2])
delimiter
o = numpy.delete(n, deletions, axis=0)
delimiter
sum(r(i)) == -n
delimiter
foo.bar()
delimiter
unittest.main()
delimiter
np.linspace(x[0], x[-1], 10)
delimiter
B[:, :, (2)] = 0
delimiter
df.values
delimiter
s1[s1.index.isin(s2.index) & s1.isin(s2)]
delimiter
nobj.__dict__ = oobj.__dict__.copy()
delimiter
sys.exit(0)
delimiter
(a > 2).sum()
delimiter
df.ix[d1:d2]
delimiter
print(oct(9))
delimiter
norm.ppf(0.95, loc=10, scale=2)
delimiter
[(s % x) for x in itertools.product(l1, l2)]
delimiter
r.json()
delimiter
print(re.search(find, l).group(0))
delimiter
max(self.left.depth(), self.right.depth()) + 1
delimiter
print(os.name)
delimiter
cv2.FONT_HERSHEY_SIMPLEX
delimiter
self.root.mainloop()
delimiter
qdict.update(dict)
delimiter
df.stack(level=1).reset_index(level=1, drop=True).reset_index()
delimiter
writer.writerow(row)
delimiter
outFile = sys.argv[2]
delimiter
root = Tk()
delimiter
server = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
delimiter
print(s.group())
delimiter
root.mainloop()
delimiter
etree_to_dict(tree.getroot())
delimiter
np.repeat(np.arange(4), 4)
delimiter
img_io.seek(0)
delimiter
data.columns = map(str.lower, data.columns)
delimiter
df.groupby(diff_to_previous.cumsum())
delimiter
print(ElementTree.tostring(xmlET))
delimiter
button.pack()
delimiter
parser.feed(data)
delimiter
new_list
delimiter
ax2.yaxis.get_major_ticks()[0].label1.set_visible(False)
delimiter
{data[k].append(v) for k, v in list(line_dict.items())}
delimiter
[s[i:j] for i in range(length) for j in range(i + 1, length + 1)]
delimiter
list(split_on_members(l, s))
delimiter
serializer = PhotoSerializer(data=request.DATA, files=request.FILES)
delimiter
sorted(the_list, key=splitter)
delimiter
music.play()
delimiter
db.session.commit()
delimiter
my_func(*my_list)
delimiter
a[idx[:, (0)], idx[:, (1)], idx[:, (2)]] = 5
delimiter
classifier.fit(X, Y, sample_weight=weights)
delimiter
indices = np.arange(len(arr))
delimiter
r = requests.post(url, data=json.dumps(payload))
delimiter
plt.show()
delimiter
add_matrices(c, d)
delimiter
sns.set()
delimiter
data.reshape(2, -1).mean(0)
delimiter
random.shuffle(x)
delimiter
d[tup[0]][tup[1]] = [tup[2]]
delimiter
np.dot(a, b) == np.tensordot(a, b, axes=([-1], [2]))
delimiter
lcmm(*list(range(1, 21)))
delimiter
len(list(d.items())[0][1])
delimiter
y.do_something()
delimiter
QtGui.QWidget.__init__(self, parent)
delimiter
df.values is df.values
delimiter
ax.set_yticks([0.2, 0.55, 0.76])
delimiter
print(evil_vals[0] in list(dict_with_evil_keys.keys()))
delimiter
woduplicates = set(lseparatedOrblist)
delimiter
df[(df == pd.Series(conditions)).all(axis=1)]
delimiter
ax.legend()
delimiter
self.clslength()
delimiter
e2 = np.array([0, 1, 0])
delimiter
Books.objects.exclude(authors__in=bad_authors)
delimiter
thread.start()
delimiter
round(2.615, 2)
delimiter
admin.site.register(Game, MyModelAdmin)
delimiter
self.proc.wait()
delimiter
reactor.run()
delimiter
output = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
delimiter
self.linenumbers.config(state=DISABLED)
delimiter
matrix = [list(line.strip()) for line in matrixfile]
delimiter
zlib.decompress(decrypt(data))
delimiter
shapely.ops.unary_union(list(shapely.ops.polygonize(lines)))
delimiter
print(df.values.tolist())
delimiter
print(list(d.values()))
delimiter
[x for x in library if terms.issubset(x)]
delimiter
out = proc.communicate()[0]
delimiter
counter += 1
delimiter
plt.show()
delimiter
assert expression1, expression2
delimiter
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
todb.commit()
delimiter
args = parser.parse_args()
delimiter
fig, ax = plt.subplots()
delimiter
db.session.remove()
delimiter
sleep(1)
delimiter
Gtk.Entry.__init__(self)
delimiter
sys.stdout.flush()
delimiter
print([type(x) for x in htmldata])
delimiter
model.fit(X)
delimiter
pl.pop()
delimiter
process.wait()
delimiter
workbook.close()
delimiter
print(sys.version)
delimiter
x.total_seconds()
delimiter
os.path.dirname(sys.executable)
delimiter
(dict(zip(keys, row)) for row in zip(nums, chars))
delimiter
im.shape
delimiter
any(1 in x for x in d)
delimiter
multiprocessing.Process.__init__(self)
delimiter
plt.show()
delimiter
data = numpy.asarray(im)
delimiter
df.columns = columns
delimiter
map(len, s.split())
delimiter
sorted(s)
delimiter
checkbox.Click()
delimiter
pdb.Pdb.interaction(self, *args, **kwargs)
delimiter
decompressedString = zlib.decompress(compressedString)
delimiter
data = json.loads(mtext)
delimiter
self.func(*args, **kwargs)
delimiter
print(buffalo)
delimiter
time.ctime()
delimiter
zip(it, it)
delimiter
model.fit(X_train, y_train)
delimiter
do_something()
delimiter
bytes(10)
delimiter
msg.attach(attachment)
delimiter
redirect(redirect_url())
delimiter
list(itertools.chain(*[([k] * v) for k, v in sorted(d.items())]))
delimiter
lki.sort(key=itemgetter(1))
delimiter
cur = db.cursor()
delimiter
app = Flask(__name__)
delimiter
name = models.CharField(max_length=100)
delimiter
x[~np.any(np.isnan(x), axis=1)]
delimiter
min(itertools.product(*lists), key=distance)
delimiter
df.AC = df.AC.astype(float)
delimiter
result = json.dumps(d, ensure_ascii=False)
delimiter
df.plot(subplots=True, layout=(1, 2))
delimiter
print(match.groups())
delimiter
df2 = df.stack().reset_index(1)
delimiter
[0, 1, 1, 1, 1],
delimiter
print(df.groupby(df.A // 2).A.apply(pd.Series.sample, n=2))
delimiter
User.objects.count()
delimiter
json.dump(LoL, myfile)
delimiter
cleantext = BeautifulSoup(raw_html).text
delimiter
groups_no_a = [group for group in groups if a.isdisjoint(group)]
delimiter
random.sample(deq, 10)
delimiter
print(dt - datetime.fromtimestamp(s))
delimiter
CHOICES = [(i, i) for i in range(11)]
delimiter
imRes = cv2.resize(im, maxsize, interpolation=cv2.CV_INTER_AREA)
delimiter
q, bins = pd.qcut(a, 2, retbins=True)
delimiter
ax.set_xlim(-40, 40)
delimiter
app.url_map
delimiter
ax1.set_ylim(0, 1.2)
delimiter
ax.xaxis.set_visible(False)
delimiter
sys.exit(0)
delimiter
deletel[100:]
delimiter
self.response.out.write(simplejson.dumps([p.to_dict() for p in photos]))
delimiter
array.tolist()
delimiter
a.flat[np.abs(a - a0).argmin()]
delimiter
object.__getattribute__(self, attr)
delimiter
plt.show()
delimiter
session.commit()
delimiter
df.reset_index(drop=True).T
delimiter
final_image = cv2.warpPerspective(image, H, (2150, 2800))
delimiter
fig.subplots_adjust(wspace=0.5)
delimiter
self.transport.write(data)
delimiter
out = [(1 if num & 1 << bits - 1 - n else 0) for n in range(bits)]
delimiter
mainloop()
delimiter
tuple(A[:, (0)])
delimiter
ssh.close()
delimiter
print(connection.getresponse().read())
delimiter
is_cardano_triplet(2, 1, 5)
delimiter
random.shuffle(new_lst)
delimiter
FFnetlayer0 = FFnetlayer0.reshape(-1, 2)
delimiter
max(i + 1 for i in range(20) if n % (2 << i) == 0)
delimiter
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
new_data = [float(n) for n in data]
delimiter
L[-1:], L[:-1] = L[:1], L[1:]
delimiter
request.resolver_match.app_name
delimiter
[6, 7, 8]
delimiter
df.columns = df.columns.str.strip()
delimiter
pylab.show()
delimiter
plt.pause(0.05)
delimiter
image = cv2.imread(image_path, cv2.IMREAD_UNCHANGED)
delimiter
fig.canvas.draw()
delimiter
property_asel = [property_a[i] for i in good_indices]
delimiter
linregress(X, Y)
delimiter
image = tk.PhotoImage(data=b64_data)
delimiter
np.fill_diagonal(corrs.values, -2)
delimiter
f.close()
delimiter
a.remove(x)
delimiter
ax.plot(x, y)
delimiter
sess.run(init_op)
delimiter
print(channel.recv(1024))
delimiter
r = requests.post(url, data=json.dumps(payload), headers=headers)
delimiter
numpy.count_nonzero(boolarr)
delimiter
np.random.shuffle(x)
delimiter
print(etree.tostring(root, pretty_print=True))
delimiter
p.stdin.close()
delimiter
[a for b, a in list(params.items())]
delimiter
rowmax = df.max(axis=1)
delimiter
time.sleep(2)
delimiter
Y == np.array([6, 7, 8, 9])
delimiter
MM().__dict__
delimiter
l1.extend([4, 5, 6])
delimiter
self.assertEqual(a, b)
delimiter
logger.addHandler(mh)
delimiter
shutil.copyfileobj(source_file, target_file)
delimiter
input()
delimiter
user.save()
delimiter
lookup.setdefault(key(item), []).append(item)
delimiter
f.close()
delimiter
skrift2.pack(pady=10)
delimiter
writer.save()
delimiter
df.col2.replace(-1, np.nan).interpolate().astype(int)
delimiter
isinstance(a, Test2)
delimiter
session2.add(obj1)
delimiter
dff.drop(c, axis=1, inplace=True)
delimiter
array([8.0, 5.5])
delimiter
m.groups()[0]
delimiter
do_something()
delimiter
wr.writerow([item])
delimiter
product(list(range(2)), repeat=k)
delimiter
x + ((0, 0),)
delimiter
[chr(ord(uc)) for uc in udata]
delimiter
np.take(mat, ixs, axis=0).sum(axis=0)
delimiter
int_arr[-2, -2] + int_arr[0, 0] - int_arr[-2, 0] - int_arr[0, -2]
delimiter
self.socket.close()
delimiter
conn.set_timeout(self.timeout)
delimiter
result = func()
delimiter
main()
delimiter
print(round(a, 2))
delimiter
sys.getsizeof(10 ** 10 ** 7)
delimiter
all(x == items[0] for x in items)
delimiter
df2 = df.transpose()
delimiter
label.mainloop()
delimiter
proc.wait()
delimiter
csum = np.cumsum(b)
delimiter
ax.set_xticklabels(dates, rotation=90)
delimiter
plt.plot(x, y)
delimiter
self.response.out.write(row)
delimiter
y.astype(int)
delimiter
db.collection.find().limit(1).skip(Math.floor(Math.random() * N))
delimiter
dlg.ShowModal()
delimiter
main()
delimiter
signal.signal(signal.SIGALRM, handler)
delimiter
rnd = np.random.rand(n) / np.sqrt(2.0 * np.pi)
delimiter
datetime.date(2011, 1, 1)
delimiter
my_instance = my_class()
delimiter
fig.subplots_adjust(bottom=0.2)
delimiter
abs(A[0] - B[0]) + abs(A[1] - B[1])
delimiter
np.any((x, y, z), axis=0)
delimiter
set_trace()
delimiter
form.populate_obj(user)
delimiter
app.run()
delimiter
os.path.dirname(filepath)
delimiter
max(map(len, tup))
delimiter
plt.axvline(x=0.22058956)
delimiter
a.f4(1)
delimiter
set([1])
delimiter
rs = (grequests.get(u) for u in urls)
delimiter
ax.add_patch(patch)
delimiter
sum(1 for _ in assignments(12, 5))
delimiter
time.sleep(10)
delimiter
print(OpenSSL.crypto.dump_certificate(OpenSSL.crypto.FILETYPE_TEXT, x509))
delimiter
QtGui.QFrame.__init__(self)
delimiter
sys.path.insert(0, self.install_lib)
delimiter
setup()
delimiter
np.median(x, axis=0)
delimiter
np.where(cond, arr, -inf).argmax(axis=1)
delimiter
newstr = oldstr[:midlen] + oldstr[midlen + 1:]
delimiter
db.close()
delimiter
print((a, b, c, d))
delimiter
sorteditems = sorted(iter(mydict.items()), key=itemgetter(1))
delimiter
set_contents_from_string(data_file.read())
delimiter
decorator_to_enhance(func, *args, **kwargs)
delimiter
plt.show()
delimiter
np.random.seed(seed)
delimiter
df.show()
delimiter
A.view(dtype=np.complex64)
delimiter
l.sort()
delimiter
x.pop(0)
delimiter
self.__dict__.update(d)
delimiter
d.setdefault(k, []).append(v)
delimiter
frame.pack()
delimiter
A[:, (np.mod(np.arange(ncols), A.shape[1]))]
delimiter
print([x for x in p.findall(s) if x])
delimiter
plt.close()
delimiter
data = json.loads(input_str)
delimiter
self.assertEqual(callresult, [xargs, yargs])
delimiter
list(metadata.tables.keys())
delimiter
print(datetime.datetime.utcfromtimestamp(dt))
delimiter
mlab.show()
delimiter
print(clf.coef_)
delimiter
fopen.close()
delimiter
setattr(someobject, name, user)
delimiter
label_indices = [(labels == i).nonzero() for i in range(1, numL + 1)]
delimiter
op.worksheet.Worksheet.iter_rows()
delimiter
docvec = model.docvecs[99]
delimiter
set([2, 1]) in list
delimiter
CATSDllApiProto = ctypes.WINFUNCTYPE(ctypes.c_uint8, ctypes.c_double)
delimiter
db.close()
delimiter
urllib.request.install_opener(opener)
delimiter
(list(g) for k, g in grouped)
delimiter
res = np.array(sorted(a, key=lambda x: -x[0]))
delimiter
plt.figure(figsize=(5.15, 5.15))
delimiter
d.copy()
delimiter
self.thread.start()
delimiter
ax.set_ylim([177, 196])
delimiter
c = numpy.linalg.lstsq(b.T, a.T)[0].T
delimiter
QtGui.QWidget.__init__(self)
delimiter
plt.show()
delimiter
hasproperty = np.all(C)
delimiter
result = dict(setup1)
delimiter
g.add_edge(a[0], a[1])
delimiter
signal.signal(signal.SIGINT, signal_handler)
delimiter
os.setsid()
delimiter
self.response.out.write(str(datetime.datetime.now() - starttime))
delimiter
isinstance(obj, ModuleType)
delimiter
[(x * x) for x in range(10)]
delimiter
[x for x in ls if c[x] == 1]
delimiter
y = dict((k.lower(), v) for k, v in x.items())
delimiter
os.isatty(sys.stdout.fileno())
delimiter
img_resized = image.resize((188, 45), Image.ANTIALIAS)
delimiter
np.isnan(np.nan)
delimiter
config.write(configfile)
delimiter
d = eval(some_string)
delimiter
display.flush()
delimiter
min(s.find(i) for i in a if i in s)
delimiter
round(x / 500.0) * 500.0
delimiter
f(a, b)
delimiter
images.reshape((images.shape[0], -1))
delimiter
self.assertEqual(len(result), 2)
delimiter
javasphinx - apidoc - -help
delimiter
self.response.out.write(row)
delimiter
self.d = self.d + 1
delimiter
formset.save()
delimiter
np.random.seed(1977)
delimiter
keys = [k for k, v in list(dict.items()) if v == maxval]
delimiter
lines = tuple(lines)
delimiter
map(tuple, (N - 1 - np.array(list(combinations(list(range(N)), M))))[::-1])
delimiter
os.path.relpath(filename, blog_images)
delimiter
batch.execute(http=http)
delimiter
bin(1)
delimiter
d.dot(d.T)
delimiter
setattr(namespace, dest, value)
delimiter
ax.set_ylim([0, 2])
delimiter
pd.Series(dict(col1=a, col2=b))
delimiter
data = np.array(data)
delimiter
plt.show()
delimiter
y = r * np.sin(t)
delimiter
print(any(x in regx.split(string) for x in search))
delimiter
ent2.grid(row=1, column=1)
delimiter
[tuple(chain.from_iterable(prod)) for prod in product(*lists)]
delimiter
{{mywidget.script()}}
delimiter
{{item}}
delimiter
dateutil.parser.parse(date_string)
delimiter
app.run()
delimiter
print(etree.tostring(elem))
delimiter
[0, 1, 1, 0, 0, 1],
delimiter
ax.get_yticklabels()[i].set_visible(False)
delimiter
sys.modules[__name__] = Foo()
delimiter
l.append([])
delimiter
app.run(debug=True)
delimiter
plt.close()
delimiter
backup.close()
delimiter
t5.start()
delimiter
fro.readline()
delimiter
view_func(request, *args, **kwargs)
delimiter
lines = sorted(shopping.readlines())
delimiter
a = dict((key, value) for key, value in a.items() if key not in exclusion)
delimiter
s[0].lower() + s[1:]
delimiter
csum = np.cumsum(a[:, (1)])
delimiter
pkgutil.iter_modules()
delimiter
pattern = re.compile(pattern_string)
delimiter
ax.set_yticks(np.linspace(0, 200, 11))
delimiter
Tablename.objects.filter(fieldname__lt=value)
delimiter
map(list, my_array)
delimiter
float(x)
delimiter
print(data.split())
delimiter
set(d[0]).intersection(*d[1:])
delimiter
np.full((200, 20, 10, 20), 0)
delimiter
plt.setp(ax.get_xticklabels()[-1], visible=False)
delimiter
str(0.1)
delimiter
setattr(self, key, dictionary[key])
delimiter
plt.subplots_adjust(hspace=0.001)
delimiter
dict(zip(headers, sdata))
delimiter
termios.tcsetattr(fd, termios.TCSADRAIN, old)
delimiter
func(*parameters)
delimiter
plt.tight_layout()
delimiter
parser = argparse.ArgumentParser()
delimiter
Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec = values
delimiter
PrintLn(Abs(vf))
delimiter
image.show()
delimiter
os.remove(path)
delimiter
print(urlparse.urlunparse(url_parts))
delimiter
list(chain(*x))
delimiter
np.array(list(itertools.zip_longest(fillvalue=np.nan, *ll))).T
delimiter
logging.getLogger().addHandler(handler)
delimiter
root.mainloop()
delimiter
a[len(a) - 1:-len(a) - 1:-1]
delimiter
foo(*t)
delimiter
numpy.random.shuffle(ids)
delimiter
my_list.append(int(i))
delimiter
df.loc[~df.index.isin(t)]
delimiter
ax.set_xticklabels(x_labels)
delimiter
set(my_list) - {i for e in bad for i in my_list if e in i}
delimiter
list(x[x > 0].stack().index)
delimiter
dll.add.restype = c_double
delimiter
numpy.where(M == 0)
delimiter
[(x + 1) for x in mylist]
delimiter
assert not os.path.exists(f.name)
delimiter
pprint([(my_array + [i]) for i in input_elements])
delimiter
mydict[key].append(line.strip())
delimiter
server.serve_forever()
delimiter
x[x & x - 1 == 0]
delimiter
shallow_copy_of_set = old_set.copy()
delimiter
random.choice(files)
delimiter
deletesys.path[0]
delimiter
model4.py
delimiter
scipy.signal.lfilter
delimiter
Department._objects.filter(group__exact=self.group)
delimiter
next(i for i, j in list(enumerate(s))[::-1] if j == x)
delimiter
result = json.loads(result)
delimiter
server.close()
delimiter
driver.close()
delimiter
outer_list.sort(key=MyOrdering)
delimiter
plt.plot(y)
delimiter
fig = plt.figure(figsize=(5, 5))
delimiter
reactor.run()
delimiter
r = random.choice(numbers)
delimiter
logging.disable(logging.CRITICAL)
delimiter
ax2.imshow([[0, 1], [2, 0]])
delimiter
time.sleep(5)
delimiter
the_sum += A[k] * B[k]
delimiter
type(a.tolist()[0])
delimiter
[(slice(*map(int, a)) if len(a) > 1 else int(a[0])) for a in ranges]
delimiter
np.random.seed(seed)
delimiter
ftp.login()
delimiter
[(x < 0 and x + 4 or x) for x in [1, -2, 2]]
delimiter
maze_dict[r, c] = [(r - 1, c), (r, c + 1)]
delimiter
e.update()
delimiter
sys.stdout.flush()
delimiter
simplejson.JSONEncoder.default(self, obj)
delimiter
mylist.sort(key=lambda v: v.x ** 2 + v.y ** 2)
delimiter
ax.imshow(data)
delimiter
figure(figsize=(4, 4))
delimiter
time.time()
delimiter
asin(2).evalf()
delimiter
f.close()
delimiter
xDate = sys.argv[1]
delimiter
plt.plot(x, y)
delimiter
fxn()
delimiter
dict(zip(x, map(x.count, x)))
delimiter
session.commit()
delimiter
painter.setPen(Qt.QColor(100, 100, 100))
delimiter
self.assertEqual(1, 0)
delimiter
connection.close()
delimiter
wx.Yield()
delimiter
[i for i, j in c.most_common()]
delimiter
plt.clf()
delimiter
print(json.load(json_file))
delimiter
os.remove(os.path.join(parent, fn))
delimiter
l = list(t)
delimiter
np.dot(a, a)
delimiter
r = requests.post(url, files=files, data=values)
delimiter
threading.Thread.__init__(self)
delimiter
model = sm.Logit(y, x.astype(float)).fit()
delimiter
array([[24, 20, 21], [4, 0, 1], [9, 5, 6]])
delimiter
os.remove(os.path.join(dirpath, file))
delimiter
fib = lambda n: n if n < 2 else fib(n - 1) + fib(n - 2)
delimiter
root.columnconfigure(0, weight=1)
delimiter
Image.open(path)
delimiter
dx, dy = 1, 0
delimiter
gluLookAt(eX, eY, eZ, cX, cY, cZ, 0, 1, 0)
delimiter
set([])
delimiter
np.diagonal(np.dot(np.rollaxis(a, 2), a), 0, 2).T
delimiter
res = [([x] * len(y), y) for x, y in d.items()]
delimiter
func(*posargs, **fkwargs)
delimiter
print(rawstr(test4))
delimiter
b[x, y] = z
delimiter
self.sftp.putfo(fileobj, path)
delimiter
[n.name for n in tf.get_default_graph().as_graph_def().node]
delimiter
im.show()
delimiter
inset.set_ylim(axis.get_ylim())
delimiter
screen.blit(background, (0, 0))
delimiter
dict.__setitem__(self, key, value)
delimiter
Hn = np.fft.fft(Moisture_mean_x[0])
delimiter
print(str(names)[1:-1])
delimiter
ssh.close()
delimiter
res.cluster.value_counts()
delimiter
list(itertools.chain(pat.split(line) for line in data))
delimiter
[(i * j) for i, j in combinations(array, 2)]
delimiter
my_objects.append(MyClass(i))
delimiter
plt.draw()
delimiter
[[0.4, 0.6, 0.0, 0.0], [0.2, 0.4, 0.4, 0.0], [0.0, 0.0, 0.4, 0.6]]
delimiter
self.setLayout(self.layout)
delimiter
a.writerows(data)
delimiter
df.values - df2.values
delimiter
json.dump(data, f, ensure_ascii=False)
delimiter
theano.printing.debugprint(f)
delimiter
fig, ax = plt.subplots()
delimiter
ax.lines.remove(lines[0])
delimiter
test.py
delimiter
smtp.sendmail(from_addr, to_addr, m.as_string())
delimiter
ch.setLevel(logging.DEBUG)
delimiter
mask = cv2.cvtColor(mask, cv2.COLOR_GRAY2BGR)
delimiter
db.create_all()
delimiter
ax = fig.add_subplot(111)
delimiter
help(dir)
delimiter
plt.show()
delimiter
button.pack()
delimiter
T = map(lambda i: L[i], Idx)
delimiter
f = lambda x, y: x if x > 100 and y < 50 else y
delimiter
line[len(prefix):]
delimiter
proc.stdin.flush()
delimiter
{{a}}
delimiter
self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
print(s, s[-1].isdigit())
delimiter
t.pack()
delimiter
self.Layout()
delimiter
app.logger.handlers[:] = []
delimiter
data.split()
delimiter
today.day
delimiter
dVal.apply(lambda series: series / dX)
delimiter
plt.show()
delimiter
abc = dict((c, string.count(c)) for c in string)
delimiter
do_something()
delimiter
diag_T = np.ravel(T.diagonal().copy())
delimiter
result[key] += int(row[0])
delimiter
ax.xaxis.set_visible(False)
delimiter
names = pd.concat(names, frame, ignore_index=True)
delimiter
print(my_list)
delimiter
scores.close()
delimiter
Response(serializer.data)
delimiter
writer.writerow(row)
delimiter
threading.Timer(1, greeting, (oh_hi,)).start()
delimiter
[row[s] for row in LoL[r]]
delimiter
np.random.choice(np.squeeze(a))
delimiter
list(dict1.items()) ^ list(dict2.items())
delimiter
blowfish()
delimiter
np.in1d(a, b)
delimiter
(k, v), = list(d.items())
delimiter
output.append(float(row[4]))
delimiter
log = logging.getLogger(__name__)
delimiter
sys.argv[i]
delimiter
a.remove(set([2]))
delimiter
self.table.setRowCount(5)
delimiter
array([1, 1, 1, 1, 0])
delimiter
y = np.hsplit(x, np.arange(10, 129, 10))
delimiter
self.queue.add(item)
delimiter
print(list(a[b]))
delimiter
print(b.__class__.__name__)
delimiter
int(n) == n
delimiter
x[::2]
delimiter
plt.plot(data)
delimiter
{{form.as_div}}
delimiter
files = list(filter(path.isfile, os.listdir(dirToScreens)))
delimiter
pd.to_datetime(df.Date).order().index
delimiter
func(func, *args, **kwargs)
delimiter
{str(key): value for key, value in zip(bins, count)}
delimiter
m.put()
delimiter
skrift1.pack(pady=5)
delimiter
tekstboks.pack(pady=5)
delimiter
t.start()
delimiter
plt.show()
delimiter
time.sleep(5)
delimiter
os.system(cmd)
delimiter
plt.show()
delimiter
self.add(record)
delimiter
subprocess.call(args)
delimiter
f.close()
delimiter
right.remove(right[0])
delimiter
time.sleep(1)
delimiter
main()
delimiter
admin.site.register(ItemPending, ItemAdminPending)
delimiter
out.extend(map(str, list(range(a, b + 1))))
delimiter
pygame.init()
delimiter
ax.invert_yaxis()
delimiter
a.xaxis.set_major_formatter(ticker.NullFormatter())
delimiter
foo.__class__
delimiter
id = models.AutoField(primary_key=True)
delimiter
threading.Thread(target=play_audio).start()
delimiter
sum(isinstance(i, int) for i in a)
delimiter
print(map(lambda x, y: x + [y], A, list(range(1, len(A) + 1))))
delimiter
sys.stdout.write(message)
delimiter
pylab.plot(x, y)
delimiter
proc = subprocess.Popen(command, startupinfo=startupinfo)
delimiter
print(conn.notices[-1])
delimiter
self.method()
delimiter
df.index.values
delimiter
bmp.Bind(wx.EVT_LEAVE_WINDOW, onWindow)
delimiter
data = np.loadtxt(f)
delimiter
order_array = np.array(rows_list)
delimiter
screen = pygame.display.set_mode(size)
delimiter
instance.save()
delimiter
ax.plot(xx, yy)
delimiter
sum(map(pow, l, count(1)))
delimiter
ts = time.mktime(dtt)
delimiter
print(map(hex, a))
delimiter
abs_path = os.path.abspath(file.name)
delimiter
logging.basicConfig(level=logging.INFO)
delimiter
res = urllib.request.urlopen(req)
delimiter
(myset - (myset - set([b]))).pop() is a
delimiter
app.MainLoop()
delimiter
app.logger.addHandler(stream_handler)
delimiter
f.read()
delimiter
self.root.after(1000, self.update_clock)
delimiter
min(s.find(i) for i in a)
delimiter
session.query(Foo).filter(tuple_(Foo.a, Foo.b, Foo.c).in_(items))
delimiter
data = f.readframes(chunk)
delimiter
QtCore.QVariant()
delimiter
[2, 5, 6, 7, 8, 10]
delimiter
zipped = zip(mylist[0::2], mylist[1::2])
delimiter
time.sleep(1)
delimiter
print(pd.concat([df, df1]))
delimiter
sys.exit(2)
delimiter
plt.show()
delimiter
board[i].append(0)
delimiter
f(*args, **kwargs)
delimiter
print(datetime.timedelta(days=1))
delimiter
[item for item in my_list if item not in to_be_removed]
delimiter
items = sorted(list(d.items()), key=keyfunc)
delimiter
plt.scatter(x, y, c=z, s=20)
delimiter
query_set.filter(deleted_at__isnull=True)
delimiter
plot(data)
delimiter
a = set(a)
delimiter
self.bottom_frame.grid_columnconfigure(0, weight=1)
delimiter
y = np.arange(10, 20)
delimiter
settings.py
delimiter
mech.set_handle_robots(False)
delimiter
df = df.sortlevel(level=1, axis=1)
delimiter
file.seek(-len(line), 1)
delimiter
[k for k in x if type(k) == str]
delimiter
list1.sort()
delimiter
app.root.mainloop()
delimiter
a = [row for row in a if all(row[j] <= 0 for j in range(0, len(row), 2))]
delimiter
loop.run()
delimiter
exit(0)
delimiter
cv2.waitKey()
delimiter
zip(list_a, list_b)
delimiter
print(dss)
delimiter
ax.set_xticks([])
delimiter
rank = models.IntegerField()
delimiter
plt.show()
delimiter
string[0].isdigit()
delimiter
application = django.core.handlers.wsgi.WSGIHandler()
delimiter
data = response.json()
delimiter
sys.stdout = FlushFile(sys.__stdout__)
delimiter
d = {x: y for x, y in zip(m[::2], m[1::2])}
delimiter
app.exec_()
delimiter
app = QtGui.QApplication([])
delimiter
x[np.ix_(np.arange(x.shape[0]), x_range, y_range)]
delimiter
cygstart / cygdrive / c / Python27 / Scripts / ipython.exe
delimiter
a = np.where(np.eye(7), np.nan, 1)
delimiter
opener = urllib.request.build_opener()
delimiter
areas.apply(multiply_by_demand).unstack(0)
delimiter
btn.pack()
delimiter
df[(df.values > 1.5).any(1)]
delimiter
[([k] * v) for k, v in list(Counter(L).items())]
delimiter
os.listdir(base)
delimiter
yourcode()
delimiter
indices = np.where(a >= 1.5)
delimiter
window.show()
delimiter
x = list(x)
delimiter
plt.subplot(122)
delimiter
content = urllib.request.urlopen(req).read()
delimiter
unittest.main()
delimiter
sift = cv2.xfeatures2d.SIFT_create()
delimiter
np.where(np.isnan(a), ma.array(a, mask=np.isnan(a)).mean(axis=0), a)
delimiter
{k: v for k, v in somedict.items() if key_criteria_func(k)}
delimiter
print(df)
delimiter
np.roll(a, -1)
delimiter
[(new_element if i in indices else e) for i, e in enumerate(lst)]
delimiter
plt.show()
delimiter
map(int, list(bin(YOUR_NUMBER)[2:]))
delimiter
d = {name: int(value) for name, value in splitstrs}
delimiter
plot(x, y)
delimiter
plt.ylim(1, 0)
delimiter
print(np.may_share_memory(a, b))
delimiter
plt.show()
delimiter
pd.DataFrame(d)
delimiter
print(datetime.datetime.fromtimestamp(dt))
delimiter
gevent.joinall([job1, job2])
delimiter
plt.show()
delimiter
shutil.rmtree(self.name)
delimiter
b.shape
delimiter
elementwiseApply(add, [[0, 0, 0], [0, 0], 0], [[4, 4, 4], [4, 4], 4])
delimiter
[x for x in list_1 if isinstance(x, numbers.Number)]
delimiter
datetime.datetime.utcfromtimestamp(x.tolist() / 1000000000.0)
delimiter
f.write(mytext)
delimiter
set([0, 9, 4, 6, 7])
delimiter
apps.get_models()
delimiter
print(match.group(0))
delimiter
time.sleep(1)
delimiter
ax.scatter(x, y, z)
delimiter
list(set(q) & set(w))
delimiter
user.save()
delimiter
response
delimiter
cbar = fig.colorbar(result)
delimiter
self.frame.Show()
delimiter
prettyHTML = soup.prettify()
delimiter
root.mainloop()
delimiter
plt.show()
delimiter
np.count_nonzero(np.bitwise_xor(a, b) & r != 0)
delimiter
list[:10]
delimiter
run_cmd()
delimiter
file.writelines(data)
delimiter
self.show()
delimiter
sys.stdout.flush()
delimiter
example1()
delimiter
assertDictEqual(dict1, dict2)
delimiter
df.sort(axis=1, inplace=True)
delimiter
Eat = 0
delimiter
text = sys.stdin.read()
delimiter
min(max(num, start), end)
delimiter
extension = os.path.splitext(filename)[1][1:]
delimiter
index_list.append([(i + temp) for i in range(items)])
delimiter
plt.show()
delimiter
df.Cat1 = np.where(df.Cat1.isnull(), df.Cat2, df.Cat1)
delimiter
unique_longest_strings = list(set(longest_strings))
delimiter
df = pd.DataFrame.from_records(data)
delimiter
Tkinter.Frame.__init__(self, root)
delimiter
logger = logging.getLogger(__name__)
delimiter
(lambda : 1)() == (lambda : 1)()
delimiter
app.jinja_env.filters.update(my_filters)
delimiter
stopword_pattern = re.compile(stopstring)
delimiter
startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
delimiter
data.append(row)
delimiter
[LoL[i][s] for i in range(len(LoL))[r]]
delimiter
df[df.index.levels[0].isin(stk_list)]
delimiter
DBSession = scoped_session(sessionmaker(bind=engine))
delimiter
plt.pause(0.5)
delimiter
print(time.mktime(datetime.datetime.now().timetuple()))
delimiter
getattr(parent, collection).append(child)
delimiter
result.append(b[index - 1])
delimiter
row = [item[0] for item in cursor.fetchall()]
delimiter
plt.show()
delimiter
B, C = A[::2], A[1::2]
delimiter
proc.communicate()
delimiter
np.arange(1, a.shape[1], 2)
delimiter
plt.show()
delimiter
ax.lines = []
delimiter
df1.ix[0,]
delimiter
x = all(list_of_bools)
delimiter
print([(k, len(index[k])) for k in sorted(index.keys())])
delimiter
my_model.duration = datetime.timedelta(days=20, hours=10)
delimiter
np.argwhere(np.in1d(a, np.intersect1d(a, b)) == False).flatten().tolist()
delimiter
print((len(s), len(data), data))
delimiter
sorted(qs, key=lambda n: (n[0], int(n[1:])))
delimiter
dict(enumerate(google_price_data, start=1))
delimiter
json.load(f)
delimiter
print(decoded.strip())
delimiter
[k for k, v in list(d1.items()) if v == max(d1.values())][0]
delimiter
print(row.get_text())
delimiter
process.exit()
delimiter
sys.stdout.flush()
delimiter
gtk.main()
delimiter
[x for x in seq if x not in seen and not seen.add(x)]
delimiter
p.start()
delimiter
print(socket.gethostname())
delimiter
driver.close()
delimiter
anyTrue = any(somePredicate(elem) for elem in someIterable)
delimiter
loop.close()
delimiter
weekdays[datetime.now().weekday()]
delimiter
data_json = simplejson.dumps(data_dict)
delimiter
getattr(obj, name)
delimiter
np.unique(a.round(decimals=4))
delimiter
set(x * x for x in range(10))
delimiter
sys.exit(1)
delimiter
d.setdefault(item[0], []).append(item[1:])
delimiter
plt.show()
delimiter
[dict(zip(keys, row)) for row in zip(nums, chars)]
delimiter
f.seek(old_file_position, os.SEEK_SET)
delimiter
mylist.pop(0)
delimiter
new_d = pd.Series(d)
delimiter
df = df.applymap(str)
delimiter
df = pd.DataFrame([])
delimiter
fig.autofmt_xdate()
delimiter
a.append(1)
delimiter
q = {(i, j): (0) for i in range(5) for j in range(4)}
delimiter
print(request.get_message().request_body.flatten().data)
delimiter
models.py
delimiter
func()
delimiter
plt.plot(x, g(x), zorder=1)
delimiter
set(d2.items()).issubset(set(d1.items()))
delimiter
session.query(BlogPost).filter_by(visible=True)
delimiter
Gtk.main_quit()
delimiter
twrv.start()
delimiter
tasks[sys.argv[1]]()
delimiter
users = db.session.query(User).all()
delimiter
random.shuffle(items)
delimiter
f.close()
delimiter
self.show()
delimiter
subprocess.call(row, shell=True)
delimiter
print([columns[0] for column in cursor.fetchall()])
delimiter
np.minimum.accumulate(a)
delimiter
interleaveHelper(lst[:len(lst) / 2], lst[len(lst) / 2:])
delimiter
int(input(msg))
delimiter
print(json.dumps(somedict))
delimiter
time.sleep(1)
delimiter
pl.show()
delimiter
sys.exit(0)
delimiter
name.__class__.__class__
delimiter
session.query(ZKUser).filter(ZKGroup.id.in_([1, 2])).all()
delimiter
len([char for char in unistr if unicodedata.combining(char) == 0])
delimiter
x.as_matrix()
delimiter
[elem for elem in some_iterable]
delimiter
imshow(gray1, cmap=cm.gray, alpha=0.5)
delimiter
dict(dict_list)
delimiter
c.flatten()
delimiter
plt.show()
delimiter
matched[0]
delimiter
zipDocment.extractall()
delimiter
np.sort(reference)
delimiter
v = data[row][col]
delimiter
list_2 = [num for num in list_1 if isinstance(num, (int, float))]
delimiter
sys.stdout.write(alphabet[bisect.bisect(f_list, random.random()) - 1])
delimiter
session.rollback()
delimiter
map(numpy.random.shuffle, a)
delimiter
[item for item in x if not y.intersection(item)]
delimiter
nextmonth = datetime.date.today() + relativedelta.relativedelta(months=1)
delimiter
x[index] if -len(l) <= index < len(l) else default
delimiter
result = [r for r, in result]
delimiter
app.MainLoop()
delimiter
list_of_tuples = [(x, y) for x, y, label in data_one]
delimiter
bisect.bisect(grid, value)
delimiter
print(Matrix[0][0])
delimiter
frame.grid(row=0, column=0, sticky=N + S + E + W)
delimiter
print(sys.argv[0])
delimiter
a.deiconify()
delimiter
self.conn.send(msg)
delimiter
print(calendar.timegm(d.timetuple()))
delimiter
keys = set().union(*all_dicts)
delimiter
Py_Finalize()
delimiter
x ** 2
delimiter
ax.grid()
delimiter
shutil.move(name, dst)
delimiter
text = dlg.ui.lineEdit.text()
delimiter
plt.show()
delimiter
sys.exit(app.exec_())
delimiter
app.logger.setLevel(logging.DEBUG)
delimiter
start_server()
delimiter
np.random.shuffle(a.flat)
delimiter
shutil.copytree(from_path, to_path)
delimiter
cogrouped.mapValues(lambda x: (list(x[0]), list(x[1]))).collect()
delimiter
curses.endwin()
delimiter
l.sort(key=itemgetter(1), reverse=True)
delimiter
pd.DataFrame(data)
delimiter
[10, 40, 60, 90, 100]
delimiter
np.random.choice(array1, 5)
delimiter
{k: (p[k] - m[k] ** 2) for k in m}
delimiter
f = open(fpath)
delimiter
t.start()
delimiter
plt.figure()
delimiter
object.__setattr__(self, name, value)
delimiter
[[m[row][col] for col in range(0, width)] for row in range(0, height)]
delimiter
json_data.close()
delimiter
self.setSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Fixed)
delimiter
os.isatty(sys.stdout.fileno())
delimiter
list(b)
delimiter
logging.Handler.__init__(self)
delimiter
os.killpg(process.pid, signal.SIGKILL)
delimiter
scaling = np.array([dx, dy, dz])
delimiter
complete_path = os.path.join(root_path, sanitised_path)
delimiter
print(f())
delimiter
Photo.objects.filter(tags=t1).filter(tags=t2)
delimiter
data = [[eval(x) for x in y] for y in data]
delimiter
list(s)
delimiter
writes.writerows(mygen(reader))
delimiter
QtCore.Qt.ItemIsEnabled
delimiter
plt.pcolormesh(X, Y, Z)
delimiter
assert f([[0, 100], [0, 10], [10, 20], [15, 40]]) == [[0, 10], [15, 40]]
delimiter
ser.close()
delimiter
primes = {x for x in range(2, 101) if all(x % y for y in range(2, min(x, 11)))}
delimiter
dups = [x for x in list_a if list_a.count(x) > 1]
delimiter
email.send()
delimiter
print(r.url)
delimiter
list(chain.from_iterable(sorted(sub) if len(sub) > 1 else sub for sub in G))
delimiter
row.remove(row.getchildren()[1])
delimiter
Py_Finalize()
delimiter
x = np.linspace(-np.pi, np.pi, 100)
delimiter
print(model.summary())
delimiter
result = sorted(iter(dictionary.items()), key=lambda k_v: (k_v[0].field, k_v[1]))
delimiter
ax.set_xticks(np.arange(0, 6, 1))
delimiter
math.isnan(b)
delimiter
df2.plot(ax=axes[0, 1])
delimiter
json.dumps(a, default=encode_b)
delimiter
pd.end_time = pandas.to_datetime(pd.end_time)
delimiter
x = tf.Variable(tf.constant(0, shape=[2, 2]))
delimiter
int((value - epoch).total_seconds())
delimiter
ax.xaxis.set_visible(False)
delimiter
a = dict.fromkeys(a, 0)
delimiter
self.root.destroy()
delimiter
self.Acceuil.show()
delimiter
lst.append(st[i:i + 10])
delimiter
current_module.new_name = func
delimiter
self.configure(image=self.image)
delimiter
animals.sort(key=lambda name: (name[0], -len(name), name))
delimiter
HttpResponse(status=204)
delimiter
array([1]), array([0])
delimiter
print(datetime.now() - datetime.combine(bday, time()))
delimiter
[k for k, v in sorted(iter(d.items()), key=lambda k_v: (-k_v[1], k_v[0]))]
delimiter
plt.show()
delimiter
np.where(a > 0)
delimiter
isinstance(y, float)
delimiter
zip(*a)
delimiter
classifier.fit(X_train, y_train)
delimiter
ax.set_xlim([-2, 2])
delimiter
sys.exit(0)
delimiter
np.split(data, np.where(np.diff(data) != stepsize)[0] + 1)
delimiter
conn.commit()
delimiter
[self[n] for n in range(start, stop)]
delimiter
parser = argparse.ArgumentParser()
delimiter
sys.argv[1]
delimiter
d = make_defaultdict(2, list)
delimiter
print((x, y))
delimiter
sum(dict[i] for i in range(1, 5))
delimiter
subprocess.call(cmd, shell=True)
delimiter
arr.sum(axis=(0, 1))
delimiter
wordset = set(wordlist)
delimiter
shutil.copy(src, dst)
delimiter
b.remove(e)
delimiter
dict(MyClass(5, 6, 7))
delimiter
new_file.close()
delimiter
raw_bytes = (ctypes.c_ubyte * 20).from_buffer_copy(str_bytes)
delimiter
dict(itertools.chain.from_iterable(list(dct.items()) for dct in dicts))
delimiter
plt.show()
delimiter
A[i, j] = D[i, j]
delimiter
self._body
delimiter
self.setLayout(layout)
delimiter
[k for k in itertools.chain(*(list(d.keys()) for d in list(foo.values())))]
delimiter
pyplot.show()
delimiter
serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
s = pd.Series(np.random.randn(5))
delimiter
main()
delimiter
array([[1.0, 0.0, 0.0, 1.0], [0.0, 1.0, 0.0, 1.0], [0.0, 0.0, 1.0, 1.0]])
delimiter
form = waypointForm(user)
delimiter
app.MainLoop()
delimiter
sys.stdout.write(mystdout.get_text())
delimiter
l.index(d)
delimiter
filtered_numbers = [n for n in numbers if len(repr(n)) == len(set(repr(n)))]
delimiter
modernthingy = zopethingy.asdatetime()
delimiter
[list(x) for x in dt.T.itertuples()]
delimiter
df.apply(func, axis=1)
delimiter
print([x for x in range(2, 100) if not [t for t in range(2, x) if not x % t]])
delimiter
soup = BeautifulSoup(f)
delimiter
A[1:1] = B
delimiter
new_df = pd.concat([new_df, extract_df], ignore_index=True)
delimiter
np.diff(m.tocsr().indptr)
delimiter
db.session.commit()
delimiter
foo()
delimiter
self.ax.axis([-10, 10, -10, 10])
delimiter
[j() for j in [create_lambda(i) for i in range(10)]]
delimiter
print(list_end_counter([1, 2, 1, 1, 1]))
delimiter
df = pd.DataFrame(data[1:], columns=data[0])
delimiter
ax.get_yticklines()[i].set_visible(False)
delimiter
unittest.main()
delimiter
Clock.schedule_interval(self.update, 2)
delimiter
foo = d.get(x, bar)
delimiter
plot_df.plot(subplots=True)
delimiter
plt.draw()
delimiter
[(ix, iy) for ix, row in enumerate(a) for iy, i in enumerate(row) if i == 0]
delimiter
self.set_tab_reorderable(tab.child, True)
delimiter
df.apply(pd.value_counts)
delimiter
self.origstream.write(self.escape_char)
delimiter
notlast = lambda lst: itertools.islice(lst, 0, len(lst) - 1)
delimiter
p1.start()
delimiter
s = set(A() for i in range(1000000))
delimiter
images[idx].reshape(90, 90)
delimiter
cv2.destroyAllWindows()
delimiter
writer.writerow(row)
delimiter
dict((key, value) for key, value in a.items() if key == 1)
delimiter
ran_floats = [random.uniform(low, high) for _ in range(size)]
delimiter
results = map(lambda x: (x[0], x[1:]), reader)
delimiter
session.commit()
delimiter
axis.set_major_formatter(ScalarFormatter())
delimiter
response = serializers.BooleanField(required=True)
delimiter
df = df.iloc[:, ([j for j, c in enumerate(df.columns) if j != i])]
delimiter
date = models.DateTimeField(default=datetime.now, blank=True)
delimiter
x, y = (val - delta for val, delta in zip((x, y), (1, 2)))
delimiter
[np.argmin(a) for a in A2]
delimiter
df
delimiter
query = query % conn.escape(args)
delimiter
setattr(Foo, v, 0)
delimiter
process.start()
delimiter
np.abs(a - b) < atol + rtol * np.abs(b)
delimiter
map(list.__add__, L1, L2)
delimiter
cnxn.commit()
delimiter
list(range(x1, x2 + 1))
delimiter
np.delete(arr, 2, axis=1)
delimiter
plt.scatter(X, Y)
delimiter
everyone = [friendlies + enemies]
delimiter
cls(a, b)
delimiter
jsonFile.close()
delimiter
ax.set_xticklabels(alphab)
delimiter
__init__.py
delimiter
scipy.linalg.cython_blas
delimiter
admin.site.register(Contest, ContestAdmin)
delimiter
files_list.sort(key=operator.itemgetter(1))
delimiter
l2 = [l1.index(x) for x in sorted(l1)]
delimiter
plt.show()
delimiter
print(list(db.keys()))
delimiter
lowess(y, x)
delimiter
print(time.time())
delimiter
y = tuple([(z * 10) for z in img.size])
delimiter
mydict = {x[0]: x[1]}
delimiter
pumpedThread.start()
delimiter
Fraction(0.185).limit_denominator()
delimiter
c.update(line.split())
delimiter
b = cosfromsin(x, a)
delimiter
map(str, numbers)
delimiter
lbl7.grid(row=1, column=0)
delimiter
np.where(cond, arr, -100).argmax(1)
delimiter
threading.Thread.__init__(self)
delimiter
app.run(processes=2)
delimiter
time.sleep(0.1)
delimiter
send_file(tempcreator.somePath)
delimiter
grequests.map(rs)
delimiter
print(neigh.predict_proba([[0.9]]))
delimiter
directory_list.append(os.path.join(root, name))
delimiter
foo(a[:, :, (np.newaxis)] - b[:, (np.newaxis)])
delimiter
tree.write(filename, pretty_print=True)
delimiter
timestamp = (utc_naive - datetime(1970, 1, 1)).total_seconds()
delimiter
i += 1
delimiter
abc = dict((c, string.count(c)) for c in set(string))
delimiter
timestamp = dt.timestamp()
delimiter
tree = html.fromstring(page)
delimiter
plt.show()
delimiter
__init__.py
delimiter
axe.set_xticklabels(df.index, rotation=0)
delimiter
self._dynprop
delimiter
dict[array[i][0]] = array[i][1]
delimiter
subprocess.call(command.split(), shell=False)
delimiter
print(_[0][0].decode(_[0][1]))
delimiter
[c for c in col_names if not any(f in c for f in filter_array)]
delimiter
b = word in wordList[:1] + wordList[2:]
delimiter
scatter([(a, b) for a, b in zip(x, y) if a > 0 and a < 10])
delimiter
ZipFile.write(os.path.basename(a), compress_type=zipfile.ZIP_DEFLATED)
delimiter
mydict = dict.fromkeys(string.printable, 0)
delimiter
int(math.log(n, 2))
delimiter
print([a[i], a[i + 1]])
delimiter
v.split()
delimiter
json.dumps(pyDict)
delimiter
self.Bind(wx.EVT_LEFT_UP, self._onMouseUp)
delimiter
fig.autofmt_xdate()
delimiter
results = cur.fetchall()
delimiter
MyApp().run()
delimiter
self.assertEqual(response.status_code, 200)
delimiter
A[(0, 2), :, 1:]
delimiter
[a[row, col] for row, col in enumerate(col_index)]
delimiter
popt, pcov = curve_fit(goal, xdata, ydata, p0=[1] * 5)
delimiter
metadata.create_all(engine)
delimiter
plt.show()
delimiter
self.setupUi(self)
delimiter
print((name, val))
delimiter
[hex(ord(c)) for c in data]
delimiter
[2, 1, 0]
delimiter
sm[(np.random.sample(sm.shape[0], K, replace=False)), :]
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
time.sleep(60)
delimiter
list(filterer(list1, list2))
delimiter
data = {tuple(item) for item in map(sorted, lst)}
delimiter
con.close()
delimiter
sorted(gen)
delimiter
my_handler.setLevel(logging.INFO)
delimiter
plt.close()
delimiter
session2.commit()
delimiter
np.fill_diagonal(a, 0)
delimiter
[item for t in tuples for item in t]
delimiter
qs.filter(name__startswith=self.kwargs.name)
delimiter
(foo().bar() if condition else foo()).baz()
delimiter
hscrollbar.grid(row=1, column=0, sticky=E + W)
delimiter
time.sleep(2)
delimiter
pd.concat([df.T[x] for x in df.T], ignore_index=True)
delimiter
round(0, 4)
delimiter
cor.loc[:, :] = np.tril(cor.values, k=-1)
delimiter
logging.getLogger(my_module.__name__).setLevel(logging.DEBUG)
delimiter
print(df.groupby(ind).head())
delimiter
np.where(a == a.max())
delimiter
print(map(joiner, sixgrams))
delimiter
time.mktime(time.strptime(time1, format))
delimiter
a[(0), :, :], a[(1), :, :], a[(2), :, :]
delimiter
plt.show()
delimiter
f.close()
delimiter
asyncio.get_event_loop().run_until_complete(hello())
delimiter
ax.yaxis.set_minor_locator(MultipleLocator(0.2))
delimiter
[(i in fruit_dict2) for i in fruits]
delimiter
workbook.close()
delimiter
plt.show()
delimiter
print(my_list[-1])
delimiter
html = driver.page_source
delimiter
fig = PLT.figure()
delimiter
fruitdict[i] = locals()[i]
delimiter
plt.show()
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
your_method()
delimiter
np.sum(arr[1:-1, 1:-1])
delimiter
plt.colorbar()
delimiter
print(flatten_count(x, 1))
delimiter
np.getbufsize()
delimiter
self.decorator(func)
delimiter
item_set[category].append(item)
delimiter
plt.xticks()
delimiter
list(zip(lst[:-2], lst[1:-1], lst[2:]))
delimiter
ax = fig.add_subplot(111)
delimiter
result = [(x * P) for x in S]
delimiter
bar[a:b:c].foo()
delimiter
json.JSONEncoder.default(self, obj)
delimiter
pl.clf()
delimiter
data = [(line[0], line[1:]) for line in csv.reader(f)]
delimiter
writer.writerow(row)
delimiter
print(cv2.__version__)
delimiter
[log(y, 10) for y in x]
delimiter
df
delimiter
[x for i, x in enumerate(unculledlist) if i % 6 % 2 == 0 if i % 5 % 2 == 0]
delimiter
time.sleep(delay)
delimiter
startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
delimiter
[x for x in lst if x % 2 == 0]
delimiter
new_df.iloc[0, 0] = 1
delimiter
s.setsockopt(SOL_SOCKET, SO_BROADCAST, 1)
delimiter
min(l1, l2)
delimiter
os.remove(file_list.pop())
delimiter
self.crawler.engine.unpause()
delimiter
ax2.set_yticklabels(y_label2, fontsize=20)
delimiter
self.driver.quit()
delimiter
ax.legend(numpoints=1)
delimiter
con.commit()
delimiter
soup = BeautifulSoup(html)
delimiter
threading.Thread.__init__(self)
delimiter
string[start:end]
delimiter
tuple(d[k] for k in keys)
delimiter
etree.fromstring(xml_response)
delimiter
conn.close()
delimiter
subprocess.call(cmd, stdin=subprocess.PIPE)
delimiter
{k: d1[k] for k in list(d1.keys()) & l1}
delimiter
json_docs = [json.dumps(doc, default=json_util.default) for doc in cursor]
delimiter
plt.show()
delimiter
df.columns[np.argsort(df.values)]
delimiter
df.groupby(level=0, group_keys=False).apply(first_last)
delimiter
plt.show()
delimiter
g.sum()
delimiter
[[400, 200]]
delimiter
df1.loc[df2.index[0]] = df2.iloc[0]
delimiter
get_color(1)
delimiter
fig.set_figwidth(24)
delimiter
[a[x:x + seg_length] for x in range(0, len(a), seg_length)]
delimiter
ax = fig.add_subplot(111)
delimiter
print([zip(A, item) for item in product(B, repeat=len(A))])
delimiter
print(sys.stdin.readline())
delimiter
random.shuffle(data)
delimiter
self.layout().addWidget(self.child)
delimiter
logger.setLevel(logging.DEBUG)
delimiter
np.count_nonzero(df.isnull())
delimiter
start_time = time.time()
delimiter
intbids.append(int(bid))
delimiter
[dict(template, **{k: value}) for value in add]
delimiter
print(time.mktime(d.timetuple()))
delimiter
[Request(self.start_url, callback=self.parse_listings, follow=True)]
delimiter
time.sleep(20)
delimiter
ws.cell(row=1, column=1).style.border.top.border_style = borders.BORDER_MEDIUM
delimiter
[(x + y) for x, y in zip_longest(reversed(P), reversed(Q), fillvalue=0)][::-1]
delimiter
unittest.main()
delimiter
x[mask] = np.nan
delimiter
table.append(row)
delimiter
len()
delimiter
workbook.close()
delimiter
nsolve([x * y - 1, 4 * x ** 2 + y ** 2 - 5], [x, y], [1, 1])
delimiter
reactor.run()
delimiter
print(math.ceil(v * 100) / 100)
delimiter
example[4:1]
delimiter
out = [np.sum(data[c]) for c in contribs]
delimiter
plt.show()
delimiter
conn.rollback()
delimiter
next(x for x in list_of_tuples if value in x)
delimiter
screen.blit(image, (0, 0))
delimiter
arr.resize((arr.shape[0] * 2, arr.shape[1]))
delimiter
b.close()
delimiter
a[tuple(idx.T)] = 5
delimiter
fig = plt.figure()
delimiter
libc.cprogram(wts, res, kks, byref(n), ex)
delimiter
c = np.concatenate((a, b))
delimiter
time.sleep(1)
delimiter
df.reindex([2, 0, 1])
delimiter
np.array(map(str, a))
delimiter
buff += sys.stdin.read(1)
delimiter
lst.sort()
delimiter
{{a.some_other_field}}
delimiter
mydic = {}
delimiter
datetime.datetime(2001, 12, 11, 0, 0)
delimiter
ax.set_aspect(2)
delimiter
[len(list(group)) for value, group in itertools.groupby(b_List) if value]
delimiter
output = stdout.read()
delimiter
db_col_data = json.dumps(latest_data)
delimiter
do_stuff()
delimiter
sum(len(v) for v in d.values())
delimiter
print(new_list)
delimiter
result.append((btoa[k], k))
delimiter
admin.site.unregister(User)
delimiter
[0, 1, 1, 1, 0],
delimiter
self.assertEqual(response.status_code, 200)
delimiter
pixels.append(((x, y), pixel[:-1]))
delimiter
dist = numpy.linalg.norm(a - b)
delimiter
x.reshape(-1, np.prod(x.shape[-2:])).shape
delimiter
newshapeA = A.shape + (1,) * (N + 1 - A.ndim)
delimiter
predictions = [t.predict(testData) for t in trees]
delimiter
data.append(json.loads(line))
delimiter
List_name = df_name.values.tolist()
delimiter
json_output = json.dumps(my_query)
delimiter
y = set(x.flat)
delimiter
[sum(int(i) for i in num) for num in list]
delimiter
time.sleep(1)
delimiter
print(np.allclose(coeffs1, coeffs2))
delimiter
np.random.seed(seed)
delimiter
kOUT = np.zeros(N + 1, dtype=object)
delimiter
cython.ushort
delimiter
cython.longlong
delimiter
cython.ulonglong
delimiter
[(i - 1) for i in l]
delimiter
plt.show()
delimiter
urllib.request.install_opener(opener)
delimiter
browser._update_state(response)
delimiter
OrderedDict(lla[::-1])
delimiter
trainer = BackpropTrainer(n, dataset=ds, learningrate=0.1, verbose=True)
delimiter
self.close()
delimiter
image.close()
delimiter
df[~df.index.isin(df_a.index + df_b.index)]
delimiter
ent.grid(row=0, column=1)
delimiter
i.setGridIntersection(i.pos())
delimiter
main()
delimiter
coords.reshape(-1, 2)
delimiter
cv2.waitKey(0)
delimiter
hsz = wx.BoxSizer(wx.HORIZONTAL)
delimiter
df.groupby(dr5minute.asof).agg(ohlcsum)
delimiter
sum(1 for _ in iter)
delimiter
self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
seen.add(i)
delimiter
plt.imshow(rotate_lena_noreshape, cmap=plt.cm.gray)
delimiter
s.send(data)
delimiter
VVg1 = np.sum(np.multiply(EVV1[:n, :], VV[:, (np.newaxis)]), axis=0)
delimiter
[tuple(sequence[i:i + n]) for i in range(count)]
delimiter
c = copy.deepcopy(a)
delimiter
print(sys.path)
delimiter
list(d.items())
delimiter
urllib.parse.quote(a)
delimiter
[dict(template, z=value) for value in add]
delimiter
wrapped()
delimiter
sorted(lst, key=lambda x: x[1], reverse=True)
delimiter
df.iloc[:, 2:] = a
delimiter
print(int(Nationality.PL))
delimiter
as_strided(a, shape=(2, 2, 2, 2), strides=(2 * s, 0, s, 0)).reshape(4, 4)
delimiter
f.read()
delimiter
root.destroy()
delimiter
map(min, zip(*alist))
delimiter
dict(lst)
delimiter
main()
delimiter
print(ET.tostring(tree))
delimiter
driver = webdriver.Chrome(chrome_options=options)
delimiter
filtered_d = dict((k, d[k]) for k in keys if k in d)
delimiter
[token for token in text.split() if token.isdigit()]
delimiter
print(np.fft.fft(x))
delimiter
d[k].append(v)
delimiter
main()
delimiter
a_unique_max[np.argsort(perm[last])]
delimiter
lst.sort(key=lambda x: x[1])
delimiter
ax.scatter(x, y, z)
delimiter
print((cities[0][0], cities[1][0]))
delimiter
p.Start()
delimiter
dict(zip(keys, values))
delimiter
max_value = max(my_list)
delimiter
user = models.ForeignKey(User)
delimiter
listings = list(get_listings())
delimiter
reversed(sorted(a.keys()))
delimiter
signal.signal(signal.SIGALRM, _handle_timeout)
delimiter
[1, 1, 0, 1, 0, 1]
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
cv2.waitKey(0)
delimiter
self._s.get(k.lower())
delimiter
lst[1::2]
delimiter
lots_list.sort(mycmp)
delimiter
f1.write(line)
delimiter
self.socket.close()
delimiter
mobile = models.CharField(max_length=16)
delimiter
len(df.columns)
delimiter
print(get_drives())
delimiter
res = [s[i - 2:i + 1] for i in range(2, len(s)) if s[i] == s[i - 2]]
delimiter
str(float(your_string_goes_here))
delimiter
df[~df.field.isin(ban_field)]
delimiter
slices = diagonal.reshape(-1, 2)
delimiter
__init__.py
delimiter
gtk.main()
delimiter
test()
delimiter
self.send_response(200)
delimiter
pl.figure(1)
delimiter
result = cursor.fetchall()
delimiter
np.concatenate((a1, b1))
delimiter
my_list2 = [i[0] for i in my_list]
delimiter
[1][0][1]
delimiter
vectors / norms.reshape(1, -1)
delimiter
settings_dir = os.path.dirname(__file__)
delimiter
print(line)
delimiter
m.create_all()
delimiter
lines.append(ax.plot(np.arange(1000) / 2.0))
delimiter
sys.exit(1)
delimiter
self.button.clicked.connect(self.handleButton)
delimiter
result.update((k, dol1[k] + dol2[k]) for k in set(dol1).intersection(dol2))
delimiter
sys.stdout.flush()
delimiter
response = requests.delete(url, data=json.dumps(payload), headers=headers)
delimiter
a[0:1][0] = 1
delimiter
df = pd.DataFrame([series])
delimiter
print(nplats[index], nplons[index])
delimiter
print([tuple(x for x in y if x) for y in a])
delimiter
history.append(next(sequence))
delimiter
zip(t[::2], t[1::2])
delimiter
print(max(foo))
delimiter
sys.modules[__name__].__file__
delimiter
test()
delimiter
itertools.zip_longest(fillvalue=fillvalue, *args)
delimiter
Z[(raw[:, 0:2] - minimum(raw[:, 0:2], axis=0)).T.tolist()] = raw[:, (2)]
delimiter
sns.kdeplot(x, shade=True)
delimiter
c.save()
delimiter
plt.close()
delimiter
Counter(words).most_common(10)
delimiter
df.plot()
delimiter
app.mainloop()
delimiter
celery.config_from_object(celeryconfig)
delimiter
time.sleep(random.random())
delimiter
dic.setdefault(key, []).append(item[-1])
delimiter
list(itertools.product((0, 1), repeat=4))
delimiter
print(find_nearest(array, value))
delimiter
logfile.close()
delimiter
plt.legend()
delimiter
pygame.sprite.Sprite.__init__(self, self.groups)
delimiter
print(len(someList))
delimiter
d[pair[0]] = int(pair[1])
delimiter
items = sorted(list(ipCount.items()), key=my_key)
delimiter
page = html.fromstring(urllib.request.urlopen(url).read())
delimiter
list = x.split()
delimiter
nic.EnableDHCP()
delimiter
map(id, a[1:])
delimiter
logging.basicConfig(level=logging.ERROR)
delimiter
lst.count(1) > 1
delimiter
msg.send()
delimiter
sorted(adict, key=adict.get, reverse=True)
delimiter
convert_file(sys.argv[1], sys.argv[2])
delimiter
wb.save(filename=dest_filename)
delimiter
sorted(l1, key=lambda id_and_name: id_and_name[0])
delimiter
[0, 0, 0, 0, 0, 0, 1, 1],
delimiter
beat(app=app).run()
delimiter
new_dic.setdefault(1, {})[2] = 5
delimiter
matrix.append([0] * ncols)
delimiter
print(f(2))
delimiter
random.shuffle(values)
delimiter
splitlists = [mylist[i:i + n] for i in range(0, len(mylist), n - 1)]
delimiter
pd.DataFrame(dfN, columns=wordlist).fillna(0)
delimiter
print(line)
delimiter
next(key for key, value in d.items() if value == my_value)
delimiter
data = File.read(16 * 1024 * 1024)
delimiter
plt.show()
delimiter
time.sleep(sleep_time)
delimiter
dict(((a, b, c), 1) for a in A for b in B for c in C)
delimiter
pygame.display.set_mode((infoObject.current_w, infoObject.current_h))
delimiter
os.path.dirname(foo.__file__)
delimiter
plt.contour(r * np.cos(t), r * np.sin(t), z)
delimiter
nx.draw_networkx(G, pos)
delimiter
plot(b[:, (0)], b[:, (1)])
delimiter
label.pack()
delimiter
len(gc.get_referrers(my_obj))
delimiter
data.get(num, data[min(list(data.keys()), key=lambda k: abs(k - num))])
delimiter
np.random.seed(0)
delimiter
json.dumps(row)
delimiter
print(line)
delimiter
make_list = ArrayField(models.CharField(max_length=200), blank=True)
delimiter
mod == __import__(module_name)
delimiter
self.assertEqual(res, 7)
delimiter
file1.close()
delimiter
subset = df2.columns[-k:]
delimiter
A = (B == np.arange(M)[:, (np.newaxis)]).dot(C.T)
delimiter
lst.attr.get(idx, default_value)
delimiter
screen.fill((0, 0, 0))
delimiter
df = df.merge(df.apply(calculate, axis=1), left_index=True, right_index=True)
delimiter
[(1, 4), (6, 8), (10, 10)]
delimiter
lbl6.grid(row=0, column=0)
delimiter
np.empty((M, N, L))
delimiter
sorted(lst)
delimiter
Route.objects.filter(stops_forwards__contains=[285])
delimiter
plt.show()
delimiter
random.shuffle(random_order)
delimiter
sess.run(train_op)
delimiter
items.sort()
delimiter
writer.writerow([test_data[0][1]])
delimiter
signal.signal(signal.SIGINT, self.old_handler)
delimiter
dir(settings)
delimiter
python - V
delimiter
print(etree.tostring(root, pretty_print=True))
delimiter
pprint.pprint(list(cursor))
delimiter
QtGui.QWidget.__init__(self, parent)
delimiter
df.stack().dropna().reset_index(drop=True)
delimiter
pygame.display.list_modes()
delimiter
list(chain(repeat(0, a.count(0)), compress(a, a)))
delimiter
file_date_tuple_list.sort(key=lambda x: x[1], reverse=True)
delimiter
plt.gcf().canvas.draw()
delimiter
sum(totals.values())
delimiter
data = json.loads(result.text, object_pairs_hook=OrderedDict)
delimiter
myscript.py | xclip
delimiter
np.random.seed(0)
delimiter
pg.display.flip()
delimiter
[[next(b) for _ in range(x)] for x in l]
delimiter
webbrowser.open(url)
delimiter
simplejson.JSONEncoder.default(self, obj)
delimiter
start_date = local_tz.localize(start_date)
delimiter
dict.__init__(self, *args, **kwargs)
delimiter
sum(n * (n - 1) // 2 for n in list(index2count.values()))
delimiter
print(match.group(1))
delimiter
d.save()
delimiter
ax.legend()
delimiter
csv.writer(f, quoting=csv.QUOTE_NONE).writerows(cursor)
delimiter
self.driver.implicitly_wait(20)
delimiter
writer.writerows(data)
delimiter
all_words = set(gen_words(txt))
delimiter
df.join(s)
delimiter
s[s == 12].index
delimiter
all(x != y for x, y in itertools.combinations(objs, 2))
delimiter
test_f()
delimiter
ax.patch.set_visible(False)
delimiter
fh.write(h.hexdigest())
delimiter
ax[1].plot(np.arange(2) / p, c=c)
delimiter
time.sleep(1)
delimiter
writer.writerows(zip_list)
delimiter
sys.path
delimiter
bar.sort(reverse=True)
delimiter
app.mainloop()
delimiter
a.reshape(-1, R).mean(axis=1)
delimiter
np.where(np.logical_and(a >= 6, a <= 10))
delimiter
pool = Pool(processes=5)
delimiter
{{my_json | safe}}
delimiter
root.grid_rowconfigure(0, weight=1)
delimiter
writer.writerow(reorderfunc(row))
delimiter
allsum = mask.sum()
delimiter
print(my_file.read())
delimiter
fib(n - 1) + fib(n - 2)
delimiter
platform.architecture()
delimiter
min(x, key=lambda t: (t[1], -t[0]))
delimiter
ax.plot(list(range(10)))
delimiter
[x for x in A if x not in subset_of_A]
delimiter
subprocess.Popen(cmd)
delimiter
greeter.greet()
delimiter
sys.maxsize + 1
delimiter
self._handle.close()
delimiter
output, err = process.communicate()
delimiter
base64.b64encode(chr(255))
delimiter
list(ordered_dict.keys())[2]
delimiter
np.diag(A.dot(B.T))
delimiter
pylab.show()
delimiter
keys.add(parts[1])
delimiter
myreportscode.py
delimiter
plt.xlim(0, 4)
delimiter
main()
delimiter
buff.seek(0)
delimiter
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
time.sleep(0.5)
delimiter
any(first == c for c in letter)
delimiter
vectors.T / norms.reshape(-1, 1)
delimiter
wx.Frame.__init__(self, wx.GetApp().TopWindow, title=self.title)
delimiter
sorted(list(some_dict.items()), key=operator.itemgetter(1), reverse=True)[:10]
delimiter
array([[11.4, 4.0], [12.0, 5.0]]),
delimiter
self.text.focus()
delimiter
[e.value for e in Color]
delimiter
path, file = os.path.split(path_and_file)
delimiter
writer.writerow(row)
delimiter
cb = plt.colorbar(sc, ax=ax1, aspect=10)
delimiter
f.write(file_str)
delimiter
copy.copy()
delimiter
load_documentation()
delimiter
{{toctree(collapse=False)}}
delimiter
g[:] = (elem[:12] for elem in g)
delimiter
print((i, p))
delimiter
df = pd.DataFrame({i: list(range(1000)) for i in range(100)})
delimiter
fig = plt.figure()
delimiter
sum(1 for i in set(list_of_purple_items) if i not in main_set)
delimiter
users = User.objects.filter(event__in=events)
delimiter
int(utc_mktime(dt.timetuple()))
delimiter
scroll = Gtk.ScrolledWindow(hexpand=True, vexpand=True)
delimiter
f2.close()
delimiter
datetime.timedelta(2.5)
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
norm.cdf(norm.ppf(0.95))
delimiter
not float(your_number).is_integer()
delimiter
arr.append([0, 0, 0, 0])
delimiter
df.as_matrix(columns=df.columns[1:])
delimiter
self.setdefault(key, self.default_factory(key))
delimiter
array([[1, 1], [2, 2]])
delimiter
common_keys = [k for k in dict1 if k in dict2]
delimiter
l.last_index()
delimiter
rule_list = [cls() for cls in Rule.__subclasses__()]
delimiter
collections.Counter(dictionary).most_common(2)
delimiter
[0, 0, 0, 1, 1, 1, 0, 0],
delimiter
set(tuple(element) for element in xx)
delimiter
f.close()
delimiter
time.sleep(2)
delimiter
ax1.plot(list(range(2)), list(range(2)), linewidth=2)
delimiter
c[tuple(list1[0])]
delimiter
tornado.ioloop.IOLoop.instance().start()
delimiter
all(item1 == item2 for item1, item2 in zip(list1, list2))
delimiter
sorted_rows[i[0]].append((i[1], i[2]))
delimiter
sc = plt.scatter([1, 1], [data.min(), data.max()])
delimiter
Response(serializer.data, status=status.HTTP_200_OK)
delimiter
AC_SUBST([PYTHON_CFLAGS])
delimiter
some_list.append(some_list)
delimiter
imagedata.put()
delimiter
a[~b] = np.nan
delimiter
conn.commit()
delimiter
pool = Pool(processes=1)
delimiter
p = numpy.vstack([p, q])
delimiter
transaction.commit()
delimiter
np.random.seed(seed)
delimiter
ax.xaxis.set_major_formatter(hfmt)
delimiter
deletemylist[:]
delimiter
pyplot.show()
delimiter
p.start()
delimiter
os.path.join(expanded, filename)
delimiter
opener = urllib.request.build_opener(MyHTTPHandler)
delimiter
win.set_app_paintable(True)
delimiter
app.exec_()
delimiter
IOLoop.instance().start()
delimiter
l = [y for x, y in sorted(zip([key(i) for i in l], l))]
delimiter
all_my_models = MyModel.objects.all()
delimiter
sm = plt.cm.ScalarMappable(cmap=my_cmap)
delimiter
fsock.close()
delimiter
QtGui.QWidget.__init__(self, parent)
delimiter
plt.draw()
delimiter
[(x + y) for x, y in zip_longest(P, Q, fillvalue=0)]
delimiter
MPI_Finalize()
delimiter
s.close()
delimiter
print(x.apply(lambda a: list([v for v in a if v == v])))
delimiter
ax.add_patch(rect)
delimiter
array([[0], [0], [0], [1], [1], [0]])
delimiter
sorted(trial_list, key=trial_dict.get)
delimiter
inspect.getouterframes(inspect.currentframe())[1][1:4][2]
delimiter
set(a_list).intersection(a_string.split())
delimiter
cv2.waitKey(0)
delimiter
app.run(debug=True)
delimiter
sys.stdout.flush()
delimiter
print(soup.prettify())
delimiter
object.__getattribute__(self, name)
delimiter
pfile.close()
delimiter
zin.close()
delimiter
x == y and type(x) == type(y)
delimiter
print(hashlib.sha1(json.dumps(b, sort_keys=True)).hexdigest())
delimiter
print(line)
delimiter
[(4 if x == 1 else x) for x in a]
delimiter
sys.stdout.flush()
delimiter
list(chain(*zip_longest(d, e[::-1])))
delimiter
colorbar()
delimiter
p.terminate()
delimiter
new_list
delimiter
float.hex(8.25)
delimiter
layout.addWidget(self.button)
delimiter
np.hstack([np.repeat(a, len(a), 0), np.tile(b, (len(b), 1))])
delimiter
server.quit()
delimiter
a.sort()
delimiter
json.dumps(dict)
delimiter
self.layout.addWidget(self.button)
delimiter
a[slice(*b)]
delimiter
reactor.run()
delimiter
s[start:end]
delimiter
sys.exit(app.exec_())
delimiter
rank = models.IntegerField(default=0)
delimiter
xax.setTicks(ticks)
delimiter
indata = fp.read()
delimiter
pd.stats.moments.rolling_std(timeseries, periods, ddof=0)
delimiter
sorted(list(a_dict.items()), key=lambda k_v1_v2: k_v1_v2[1][1])
delimiter
df.T.apply(lambda x: x.nunique(), axis=1)
delimiter
print(cls.__name__)
delimiter
print(request.LANGUAGE_CODE)
delimiter
self.cls.instances[key]
delimiter
q = Queue.Queue()
delimiter
self.save_m2m()
delimiter
self.show()
delimiter
[random.random() for i in range(N)]
delimiter
requests.get(url, cookies=load_cookies(filename))
delimiter
id = db.Column(db.Integer, primary_key=True)
delimiter
[(i[0] + j[0], i[1] + j[1]) for i, j in zip(a, b)]
delimiter
[i for i in L1 if i in L2]
delimiter
admin.site.register(User, UserAdmin)
delimiter
os.path.basename(fullpath)
delimiter
main()
delimiter
a[1:4].sort()
delimiter
np.where(detected_minima)
delimiter
sorted(s1, key=trailing_digits)
delimiter
ssc.awaitTermination()
delimiter
ax = fig.add_subplot(111)
delimiter
ax.w_xaxis.set_major_formatter(ticker.FuncFormatter(format_date))
delimiter
myFunction()
delimiter
response = subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT)
delimiter
text = text.translate(replace_punctuation)
delimiter
print(now - dateutil.relativedelta.relativedelta(months=1))
delimiter
main()
delimiter
root.clear()
delimiter
Article.objects.all().delete()
delimiter
sqlContext.createDataFrame(rdd)
delimiter
screen_width = root.winfo_screenwidth()
delimiter
dupl = np.where(mask)[1]
delimiter
self.lc.Bind(wx.EVT_MOTION, self.OnMouseMotion)
delimiter
a = [x[:] for x in [[0] * cols] * rows]
delimiter
[f(x) for x in l if f(x)]
delimiter
result = child.communicate()[0]
delimiter
test.myfun(f)
delimiter
args = parser.parse_args()
delimiter
mylogger.setLevel(logging.INFO)
delimiter
foo.mymethod(1, 2)
delimiter
df.loc[df.loc[:, (columns)].eq(value).all(axis=1)]
delimiter
data.groupby(data.date.dt.year)
delimiter
dir()
delimiter
df.groupby([times.hour, times.minute]).value_col.sum()
delimiter
df = DataFrame(np.random.randn(1000, 2))
delimiter
plt.show()
delimiter
app.run()
delimiter
[dict(items) for items in product(*flat)]
delimiter
print(sum(1 for _ in f))
delimiter
r = np.hypot(x, y)
delimiter
print(cts.minute == 0)
delimiter
reactor.run()
delimiter
mydict = {rows[0]: rows[1] for rows in reader}
delimiter
pprint(d, width=40)
delimiter
binary_string = binascii.unhexlify(hex_string)
delimiter
dict(a)
delimiter
d = d.replace(tzinfo=tz)
delimiter
a.sum(axis=0)
delimiter
proc.kill()
delimiter
p = Process(target=f, args=(arr,))
delimiter
main()
delimiter
plt.show()
delimiter
random.uniform(0, numpy.nextafter(0, 1))
delimiter
[e for e in lelist if e in lestring]
delimiter
ax.grid(True)
delimiter
plt.show()
delimiter
print(iorf.fup(2))
delimiter
x.pop()
delimiter
random.shuffle(idx)
delimiter
ax0.yaxis.set_ticks(np.arange(70000, 80000, 2500))
delimiter
response = requests.post(url, files=files)
delimiter
plt.show()
delimiter
source.close()
delimiter
curses.endwin()
delimiter
mpmath.besselk(0, 1714)
delimiter
int(1 / 2)
delimiter
self.a, self.b = a, b
delimiter
name = models.CharField(max_length=64)
delimiter
deleteglobals()[name]
delimiter
plt.figure()
delimiter
df.subtract(df2, fill_value=0).reindex_like(df).astype(int)
delimiter
[x for x in lst if x % 2 == 0]
delimiter
print(z[k.astype(int)])
delimiter
bigfloat.exp(5000, bigfloat.precision(100))
delimiter
con.commit()
delimiter
[(), (0,), (1,), (2,), (0, 1), (0, 2), (1, 2), (0, 1, 2)]
delimiter
xarr, yarr = array[(0), :], array[(1), :]
delimiter
ax.add_patch(polygon)
delimiter
plt.imshow(np.array(img.tolist()))
delimiter
sys.exit(start_ipython())
delimiter
time.sleep(timeout)
delimiter
set.union(*lis)
delimiter
__init__.py
delimiter
sorted(a, key=a.count, reverse=True)
delimiter
driver.add_cookie(cookie)
delimiter
{{count}}
delimiter
sys.exit()
delimiter
itertools.chain(*itertools.zip_longest(*iters))
delimiter
[i for i, j in mylist]
delimiter
strata = np.array(strata)
delimiter
self.show()
delimiter
ax = fig.add_subplot(111)
delimiter
mylist.sort(key=sort_func)
delimiter
client.close()
delimiter
self.__dict__[key]
delimiter
ax1 = fig.add_subplot(111)
delimiter
thread.start()
delimiter
requests.post(url, params=params, json=data)
delimiter
d[k].append(v)
delimiter
os.chdir(os.path.dirname(__file__))
delimiter
grid.cbar_axes[1].colorbar(im1)
delimiter
main()
delimiter
main()
delimiter
root.withdraw()
delimiter
plt.plot(y)
delimiter
np.split(indices, np.where(np.diff(args))[0] + 1)
delimiter
tree.xpath(xpathselector)
delimiter
Bar.objects.filter(pk=foo.id).update(a=bar.id)
delimiter
simplejson.loads(_)
delimiter
q.queue.clear()
delimiter
msg = email.message_from_string(msgtxt)
delimiter
{{a.some_field}}
delimiter
gc.collect()
delimiter
f.write(g)
delimiter
[tup[0] for tup in mylist]
delimiter
df = pandas.read_csv(filename, skiprows=skip)
delimiter
session2.commit()
delimiter
app.mainloop()
delimiter
l = nx.topological_sort(g)
delimiter
np.insert(a, 1, np.array((1, 1)), 0)
delimiter
len(zdumps(z))
delimiter
dir(MyClass)
delimiter
list(dict((len(i), i) for i in l).values())
delimiter
calendar.day_name[1]
delimiter
time.sleep(0.1)
delimiter
main()
delimiter
HttpResponseRedirect(user.redirect_to())
delimiter
df.dictionary.apply(str2dict).apply(pd.Series)
delimiter
f.save()
delimiter
[woman for woman in list(graph.keys()) if woman not in list(match.keys())]
delimiter
stream.close()
delimiter
time.sleep(0.5)
delimiter
g = myfunct()
delimiter
text = str(combobox1.currentText())
delimiter
timeout.cancel()
delimiter
plt.gcf().autofmt_xdate()
delimiter
a[[0, 1], [1, 1], [2, 2]]
delimiter
a = [[]] * 2
delimiter
plt.show()
delimiter
outfile.close()
delimiter
time.sleep(0.02)
delimiter
w.start()
delimiter
myfile.write(template.format(**context))
delimiter
sec_since_epoch = (date_obj.date() - date(1970, 1, 1)).total_seconds()
delimiter
self.foo.wait()
delimiter
arr = np.empty((N, M))
delimiter
print(list(mydict.keys())[list(mydict.values()).index(16)])
delimiter
foo(a=1, b=2)
delimiter
items = [item.time for item in objects]
delimiter
{k: v for k, v in list(d.items()) if k.startswith(s)}
delimiter
words.add(line.strip())
delimiter
ax.add_line(Line2D([-50, 0, 50], [-50, 0, 0], linewidth=80))
delimiter
print(i, repr(binify(i)))
delimiter
screen.blit(picture, rect)
delimiter
server.sendmail(FROM, TO, message)
delimiter
entryFrame.grid(row=0, column=1)
delimiter
[l[:1], l[1:]]
delimiter
curses.endwin()
delimiter
output.close()
delimiter
time.sleep(1)
delimiter
range(-20, 0, -1)
delimiter
tree = etree.HTML(result.read(), etree.HTMLParser())
delimiter
window.show_all()
delimiter
plt.plot(x, y)
delimiter
plt.clf()
delimiter
X.argmin(axis=1)
delimiter
nf.write(str(random.randint(0, 1000)))
delimiter
isinstance(x, collections.Iterable)
delimiter
reduce(lambda d, key: d[key], path, aDict).update(aSecondDict)
delimiter
plt.show()
delimiter
locale.currency(188518982.18, grouping=True)
delimiter
os.unlink(self.dest)
delimiter
func(*args, **kwargs)
delimiter
int(round(2606.89579999999, 2) * 100)
delimiter
x.append(1)
delimiter
x.astype(int)
delimiter
inspect.getmembers(MyClass, lambda a: not inspect.isroutine(a))
delimiter
output.close()
delimiter
lpr.stdin.write(your_data_here)
delimiter
plt.show()
delimiter
print({key: a[key] for key in a if key not in keys})
delimiter
invite_reason = models.CharField(max_length=64)
delimiter
sys.exit(app.exec_())
delimiter
ModelA.objects.filter(Q(instance_of=ModelB))
delimiter
profile.save()
delimiter
map(dict.fromkeys, l)
delimiter
call_with_dict(some_func, my_dict)
delimiter
self.SetSize((self.Size[0], self.figurecanvas.Size[1]))
delimiter
{c.name: getattr(self, c.name) for c in self.__table__.columns}
delimiter
out = np.vstack((lats, lons, vals))
delimiter
ax.axis([0, 10, 0, 10])
delimiter
s[0].astype(int)
delimiter
json.dumps(recursive_asdict(data))
delimiter
root.mainloop()
delimiter
f()
delimiter
tuple([x[0] for x in G])
delimiter
print(requests.post(target_url, data=xml, headers=headers).text)
delimiter
(a * 67108864.0 + b) / 9007199254740992.0
delimiter
RichIPythonWidget.__init__(self, *args, **kw)
delimiter
((a + a[:0:-1]) * len(a))[::len(a)][:len(a)]
delimiter
print(document.text_content())
delimiter
self.newargument = myarg
delimiter
first_element = myList[i[0]]
delimiter
title = models.CharField(max_length=60)
delimiter
f.flush()
delimiter
[[m[row][col] for row in range(0, height)] for col in range(0, width)]
delimiter
series.dt.date.astype(str).to_json()
delimiter
plt.colorbar()
delimiter
mask[::4] = 0
delimiter
a.append(2)
delimiter
x = {k: v for k, v in spec1.items() if k in spec2 and spec2[k] == v}
delimiter
[entry for tag in tags for entry in entries if tag in entry]
delimiter
p.Start()
delimiter
plt.subplot(121)
delimiter
urllib.request.install_opener(opener)
delimiter
screen.blit(surf1, (100, 100, 100, 100))
delimiter
print(urlparse.parse_qs(qs))
delimiter
combo.pack()
delimiter
path = path.to.module.__file__
delimiter
a = numpy.array([Register() for _ in range(4)])
delimiter
sorted(list(mydict.items()), key=itemgetter(1))
delimiter
[0][1][0]
delimiter
bar = dict(foo)
delimiter
reverse(text[1:]) + text[0]
delimiter
DELTAFETCH_ENABLED = True
delimiter
Py_Finalize()
delimiter
ws.cell(row=2, column=2).value = 2
delimiter
df.rename(columns=lambda x: int(x) if type(x) == float else x)
delimiter
sys.exit(app.exec_())
delimiter
timediff = datetime.datetime.now() - self.pub_date
delimiter
rgb_uint8 = (np.dstack((r, g, b)) * 255.999).astype(np.uint8)
delimiter
link.click()
delimiter
entry.pack()
delimiter
np.allclose(C0, C1)
delimiter
sys.stdout.flush()
delimiter
plt.plot(x, density(x))
delimiter
f.write(bin_array)
delimiter
ax.yaxis.set_major_formatter(mpl.ticker.ScalarFormatter())
delimiter
plt.hist(data, bins=bins, alpha=0.5)
delimiter
ax.get_xaxis().set_minor_locator(mpl.ticker.AutoMinorLocator())
delimiter
urlfetch.set_default_fetch_deadline(60)
delimiter
ax2.get_position()
delimiter
any([(i in fruit_dict2) for i in fruits])
delimiter
os.chdir(path_dir)
delimiter
derefrenced_spams = prefetch_refprops(Spams, models.Spam.eggs)
delimiter
dt = datetime.fromtimestamp(mktime(struct))
delimiter
plt.show()
delimiter
a = sps.csr_matrix((a.data, a.indices, a.indptr), shape=(10000, 10020))
delimiter
tk.Tk.__init__(self)
delimiter
set(itertools.combinations(S, m))
delimiter
self.grid_columnconfigure(1, weight=1)
delimiter
xs.intersection(y)
delimiter
my_file.seek(0, 0)
delimiter
time.sleep(remain)
delimiter
value = cache.get(key) or cache.setdefault(cache, func(key))
delimiter
{k: mylist.count(k) for k in set(mylist)}
delimiter
obj.foo42()
delimiter
proc.wait()
delimiter
a, b, c = [(lambda n=n: n * n) for n in l]
delimiter
min_x, max_x, min_y, max_y = temp[0][0], temp[0][-1], temp[1][0], temp[1][-1]
delimiter
x.__add__(x)
delimiter
np.frombuffer(ftdi.read(RXcount), dtype=np.uint8)
delimiter
self.ax = self.fig.add_subplot(111)
delimiter
plt.close()
delimiter
setattr(someobject, key, value)
delimiter
plt.axvline(x=xc)
delimiter
zip(*args)
delimiter
frame.values[0][0]
delimiter
itertools.cycle(list(range(2, 10)))
delimiter
conn.close()
delimiter
time.sleep(1)
delimiter
print({v[0]: v[1:] for v in list(d.values())})
delimiter
indices = np.where(a == a.max())
delimiter
d = np.diag(a[:, (0)])
delimiter
time.sleep(1)
delimiter
plt.colorbar()
delimiter
s.reset_index().groupby(s.index.names).first()
delimiter
ax.add_collection(coll)
delimiter
self.__class__.__name__
delimiter
[(v + 1 if i % 2 != 0 else v) for i, v in enumerate(list1)]
delimiter
k, v = list(d.items())[0]
delimiter
uuid.UUID(int=rd.getrandbits(128))
delimiter
deletethe_dict[key]
delimiter
df.groupby(by=[df.index.year, df.index.month]).sum().transpose()
delimiter
__init__.py
delimiter
[x for x in lst if [(x[A], x[C]) not in seen, seen.add((x[A], x[C]))][0]]
delimiter
A[(2), (2), :, :]
delimiter
cvuint8.dtype
delimiter
self.__dict__.update(s)
delimiter
admin.site.register(TwitterUser, TwitterUserAdmin)
delimiter
new_list
delimiter
do_something_with_frame(frame)
delimiter
[0, 0, 0, 1, 0, 1, 0, 0],
delimiter
my_type = field.get_internal_type()
delimiter
data = json.loads(contactFile.read())
delimiter
ciao.ciao()
delimiter
server.starttls()
delimiter
pprint(sorted(flatten(THIS)))
delimiter
r = size ** (1 / (n - 1))
delimiter
signal.alarm(0)
delimiter
numpy.apply_along_axis(lambda row: numpy.linalg.norm(row, ord=1), 1, a)
delimiter
numpy.where(numpy.all(a_view == may_b, axis=1))[0]
delimiter
[x for x in a if x not in b]
delimiter
next(x for x in lst if matchCondition(x))
delimiter
queryset.filter(id__in=articles)
delimiter
modernthingy = datetime.datetime.fromtimestamp(zopethingy.timeTime())
delimiter
session.query(Page.url).filter(tuple_(Page.url_crc, Page.url).in_(keys))
delimiter
f.write(str(x))
delimiter
solve([5, 10], [1, 4])
delimiter
main_sizer = wx.BoxSizer(wx.VERTICAL)
delimiter
list(chain(*a))
delimiter
pd.DataFrame(x.T).T.drop_duplicates(keep=False).as_matrix()
delimiter
lines = lines[:-1]
delimiter
transaction.rollback()
delimiter
lst.sort(key=lambda c: POS[c])
delimiter
fin = cv2.warpPerspective(img, h, (back.shape[1], back.shape[0]))
delimiter
ax.xaxis.set_major_locator(locator)
delimiter
C = np.dot(A, B)
delimiter
ip_list
delimiter
time.sleep(1)
delimiter
ax.w_xaxis.set_major_locator(ticker.FixedLocator(some_dates))
delimiter
root.mainloop()
delimiter
[sum(x) for x in zip(*lis)]
delimiter
time.sleep(1)
delimiter
result = json.load(urllib.request.urlopen(url))
delimiter
name = models.CharField(max_length=100)
delimiter
-r72 - g595x842
delimiter
plt.figure()
delimiter
pd.options.display.max_colwidth
delimiter
ax.set_rmax(1)
delimiter
[1][1][0]
delimiter
np.random.seed(5)
delimiter
result = {k: (v / len(list_of_dicts)) for k, v in list(summed.items())}
delimiter
next(iter(q))
delimiter
libxml2 - devel
delimiter
file_2.write(file_1.read())
delimiter
[x for y in z if sum(y) > 10 for x in y if x < 10]
delimiter
locale.setlocale(locale.LC_ALL, saved)
delimiter
tuple(itertools.chain.from_iterable(t))
delimiter
[hex(i) for i in data]
delimiter
ax.plot_surface(x, y, z, rstride=4, cstride=4, facecolors=bm)
delimiter
plt.show()
delimiter
modules[module] = sys.modules[module]
delimiter
sys.getsizeof(string_drawer)
delimiter
doc = yaml.load(f)
delimiter
plt.subplot(121)
delimiter
df = df[(df.one > 0) | (df.two > 0) | (df.three > 0) & (df.four < 1)]
delimiter
max(im.getcolors(im.size[0] * im.size[1]))
delimiter
root.mainloop()
delimiter
pd.Series(a, a._fields)
delimiter
l = [max(g, key=lambda x: x[1])[0] for _, g in groups]
delimiter
True
delimiter
__init__.py
delimiter
chain.delay()
delimiter
x.reshape((x.shape[0], -1)).mean(axis=1)
delimiter
list(dd.values())
delimiter
ax.plot(x)
delimiter
logging.basicConfig(filename=settings.log_file, level=logging.DEBUG)
delimiter
app = application(urls, globals())
delimiter
deletex[:N]
delimiter
fh.seek(0)
delimiter
etree.fromstring(goodxml)
delimiter
newdict = {x: [] for x in range(10)}
delimiter
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
delimiter
app.run(debug=True)
delimiter
xl.Quit()
delimiter
urllib.request.install_opener(opener)
delimiter
a.func(b=b, c=c)
delimiter
window.show()
delimiter
print(Outputstring)
delimiter
self.y += STEP
delimiter
np.random.seed(1)
delimiter
{i: [] for i in x}
delimiter
diag = [row[-i - 1] for i, row in enumerate(mat)]
delimiter
os.makedirs(savedir)
delimiter
maxLPFt = max(lpfData, key=operator.itemgetter(1))
delimiter
data = np.random.rand(10, 15, 5)
delimiter
type(f).__str__ is not object.__str__
delimiter
(-avgDists).argsort()[:n]
delimiter
lambda x, i=i: x % i == 0
delimiter
~pd.isnull(df[list_of_cols]).all(axis=1)
delimiter
text.collocations(num=20)
delimiter
plt.show()
delimiter
s += timedelta(minutes=minutes, seconds=seconds * 100)
delimiter
L.append([])
delimiter
tqdm_notebook().pandas(*args, **kwargs)
delimiter
np.array([[int(i) for i in line.split()] for line in data])
delimiter
ax.clear()
delimiter
basemodule.dontoverride()
delimiter
pdb.set_trace()
delimiter
[zip(x, main2) for x in itertools.combinations(main1, len(main2))]
delimiter
my_failing_task()
delimiter
unixtime = time.mktime(d.timetuple())
delimiter
ax1.imshow(source, cmap=plt.cm.gray)
delimiter
key in self.__dict__
delimiter
pool.close()
delimiter
complete_path = os.path.join(root_path, sanitised_filename)
delimiter
type(plain_string), type(unicode_string)
delimiter
self.rect.set_xy((self.x0, self.y0))
delimiter
[(x[0], len(x[1]), x[1][0][0]) for x in l]
delimiter
browser.close()
delimiter
m.dot(m.T)
delimiter
[0][0][1]
delimiter
Decimal(math.factorial(171))
delimiter
Base.metadata.create_all()
delimiter
fliplr(matrix)
delimiter
tornado.ioloop.IOLoop.instance().start()
delimiter
matrix[0][1]
delimiter
app.run()
delimiter
toppings = models.ManyToManyField(Topping)
delimiter
berlin.delete()
delimiter
ax.plot(xp, yp, zs=zp)
delimiter
UserProfile.objects.create(user=instance)
delimiter
dict((c, string.count(c)) for c in set(string))
delimiter
plt.imshow(data, vmin=-10, vmax=10)
delimiter
pd.concat([price, vol], axis=1)
delimiter
all([(xdiff[0] == xdiff[n]) for n in range(1, len(xdiff))])
delimiter
print(len(japanese))
delimiter
master.mainloop()
delimiter
s[::-1].replace(old[::-1], new[::-1], count)[::-1]
delimiter
print(im.size)
delimiter
plusone.append(int(value))
delimiter
DialApp().run()
delimiter
a_b = [e for e in a if not e in b]
delimiter
print(sys.exc_info()[0])
delimiter
extension = os.path.splitext(filename)[1]
delimiter
df.rename(columns, inplace=True)
delimiter
l[1::2] = [(x * 2) for x in l[1::2]]
delimiter
plt.show()
delimiter
ts.index.freq
delimiter
np.nonzero(np.all((lower_bound < m2D) & (higher_bound > m2D), axis=1))[0][0]
delimiter
file.seek(0)
delimiter
self.data.columnconfigure(0, weight=1)
delimiter
d = ordereddict(dic, relax=True)
delimiter
plt.plot(x, y)
delimiter
p.start()
delimiter
[len(t) for t in tuples]
delimiter
file.write(line)
delimiter
self.window.unfullscreen()
delimiter
df1.to_sparse().info()
delimiter
self.capture = cv.CaptureFromCAM(0)
delimiter
print(zed())
delimiter
layout.setSpacing(10)
delimiter
func(parameters[0], parameters[1], parameters[2])
delimiter
sheet1.write(i, 0, n, fmt)
delimiter
dic[keys[-1]] = value
delimiter
cbar = fig.colorbar(im)
delimiter
count.most_common()[:10]
delimiter
plt.subplots_adjust(bottom=0.2)
delimiter
random.shuffle(l)
delimiter
conn = pyodbc.connect(odbc_conn_str)
delimiter
heapq.nsmallest(1, ((k, i) for i, k in enumerate(s)))
delimiter
models.py
delimiter
answer = [v for v in itertools.product(*ranges) if sum(v) == 100]
delimiter
s = c.connect()
delimiter
fig = plt.figure()
delimiter
[i for i, v in enumerate(list1) if v >= 1 and list2[i] == 0]
delimiter
print([(num if num > 0 else z.pop(0)) for num in y])
delimiter
print([i for i in results])
delimiter
print(np.argmax(counts))
delimiter
data[:5]
delimiter
index1 = np.array([[0, 0], [1, 1]])
delimiter
print(rsp.content)
delimiter
[id(x) for x in l2]
delimiter
sys.modules[module_name]
delimiter
moduleA.py
delimiter
ScrolledText(root).pack()
delimiter
content = f.read()
delimiter
pygame.display.flip()
delimiter
len(max(sum(tableData, []), key=len))
delimiter
list_of_lists
delimiter
counter.save()
delimiter
f.close()
delimiter
sys.exit()
delimiter
my_list.remove(new_dict)
delimiter
complete_path = os.path.join(root_path, sanitised_path, sanitised_filename)
delimiter
b = copy.deepcopy(a)
delimiter
self.queue.pop()
delimiter
list(df.T.to_dict().values())
delimiter
show()
delimiter
window.show_all()
delimiter
print(line)
delimiter
root.mainloop()
delimiter
zip(*(x[i:] for i in range(n)))
delimiter
flask.jsonify(**course_list)
delimiter
[1] * 6
delimiter
ax.set_xticklabels(final_labels)
delimiter
print(list(map(int, chain.from_iterable(line.split() for line in f))))
delimiter
json_data = json.dumps(data)
delimiter
x.reshape(x.shape[:-2] + (-1,)).shape
delimiter
response.render()
delimiter
not any(el == 0 for sublist in maze for el in sublist)
delimiter
button.pack()
delimiter
{{message | safe}}
delimiter
min(s, key=lambda c: (-s.count(c), s.index(c)))
delimiter
False
delimiter
libfoo.dylib
delimiter
SCRIPT_DIR = os.path.abspath(os.path.dirname(__file__))
delimiter
t.grid(sticky=(N, E, S, W))
delimiter
ax.set_xticklabels(label_text)
delimiter
os.remove(os.path.join(dir, file))
delimiter
ax.imshow(im, *args, **kwargs)
delimiter
fp.close()
delimiter
random.shuffle(temp)
delimiter
p.stdin.write(cmd)
delimiter
data = urllib.request.urlopen(req).read()
delimiter
[]
delimiter
category = models.ForeignKey(Category)
delimiter
ofimg[0].getHomography()
delimiter
main.show()
delimiter
t.start()
delimiter
self.write(response.content)
delimiter
txt_frm.grid_columnconfigure(0, weight=1)
delimiter
df.sort_index(inplace=True)
delimiter
answer = msvcrt.getch()
delimiter
x, y = zip(*xy)
delimiter
soup.contents[0]
delimiter
httpd.serve_forever()
delimiter
n.show()
delimiter
print(instance.name)
delimiter
figure.canvas.draw()
delimiter
httpd.serve_forever()
delimiter
Thread.__init__(self)
delimiter
p.stdin.flush()
delimiter
json_object = json.loads(json_raw[0])
delimiter
df.append(s)
delimiter
sys.exit()
delimiter
writer.writerow([date, value])
delimiter
ax.set_axis_off()
delimiter
threading.Thread(target=run_all).start()
delimiter
(2 - N) % 7
delimiter
PYTHONUNBUFFERED = TRUE
delimiter
df.A.apply(pd.value_counts).fillna(0).astype(int)
delimiter
print(sys.exc_info())
delimiter
d = [a, b, c]
delimiter
num1, num2 = int(num1), int(num2)
delimiter
rmfield = lambda a, *f: a[[n for n in a.dtype.names if n not in f]]
delimiter
self.__dict__.update(adict)
delimiter
np.allclose(D0, D2)
delimiter
df_b.combine_first(df_a)
delimiter
tmp = proc.stdout.read()
delimiter
print(sum([i[list(i.keys())[0]][1] for i in myList]))
delimiter
fig = plt.figure()
delimiter
[item for item in full_list if not omit & set(item)]
delimiter
datetime.datetime(now.date(), datetime.time(tzinfo=now.tzinfo))
delimiter
plt.figure(figsize=(5, 5))
delimiter
self.canvas.configure(yscrollcommand=self.vsb.set)
delimiter
result.write(new_text)
delimiter
p = subprocess.Popen([cmd_list], shell=False)
delimiter
print(list_of_hets)
delimiter
print(df.to_string())
delimiter
A.T[B == 1].T
delimiter
foo = (x ** 2 for x in count())
delimiter
execution.history()
delimiter
x[x].index
delimiter
Row(**row_dict)
delimiter
root.mainloop()
delimiter
TotSize[:] = map(sum, data)
delimiter
print(parse_qsl(urlparse(url)[4]))
delimiter
print(list(d.values()))
delimiter
max(values[i + 1] - values[i] for i in range(0, len(values) - 1))
delimiter
random.shuffle(l)
delimiter
result = [split_result[0], split_result[1], [i for i in split_result[2:] if i]]
delimiter
print(list_end_counter([1, 2, 1, 1]))
delimiter
plt.show()
delimiter
deletex[index]
delimiter
print(parse_python_source(os.path.join(d, f)))
delimiter
hello(sys.argv[1], sys.argv[2])
delimiter
object_list.sort(key=lambda x: key_precedence[x.key])
delimiter
ax = fig.add_subplot(111)
delimiter
i = max(i - 1, 0)
delimiter
file.close()
delimiter
map(sum, zip(*([iter(q)] * 2)))
delimiter
list(set(A).intersection(B))
delimiter
pl.show()
delimiter
np.where(x == np.max(x))
delimiter
ax.set_ylim(y_min, y_max)
delimiter
print([attr.get(idx, default_value) for attr in attrs])
delimiter
self.y = math.sin(a) * original_x + math.cos(a) * original_y
delimiter
subprocess.Popen([file], shell=True)
delimiter
sys.setrecursionlimit(10000)
delimiter
my_array[:, (1)] = temp
delimiter
sorted(l, key=lambda *args: random.random())
delimiter
[[[0] * n] * n] * n
delimiter
fig = plt.figure(figsize=(4, 4))
delimiter
response = DeviceView.as_view()(request, pk=1)
delimiter
path = os.path.abspath(args.file.name)
delimiter
pyplot.show()
delimiter
fig.canvas.draw()
delimiter
root_id = hex(ewmh.EWMH().root.id)
delimiter
S.pop()
delimiter
a = set([1])
delimiter
len(list(flatten(mylist[0:1])))
delimiter
ax.add_patch(angle_plot)
delimiter
__init__.py
delimiter
plt.xlim((-1, 4))
delimiter
invite_reason = models.CharField(max_length=64)
delimiter
time.mktime(time.localtime(calendar.timegm(utc_time)))
delimiter
sys.stdout = sys.__stdout__
delimiter
app.mainloop()
delimiter
s.listen(1)
delimiter
pylab.show()
delimiter
B.sendall(A.recv(4096))
delimiter
br.set_cookiejar(cookiejar)
delimiter
y = np.array([2, 1, 5, 2])
delimiter
conn.autocommit = True
delimiter
priors = df[datetime.datetime.now() - df.placed_at >= timedelta(90)]
delimiter
plt.plot(z, t)
delimiter
time.sleep(1)
delimiter
set(dict1.items()).symmetric_difference(list(dict2.items()))
delimiter
pygame.init()
delimiter
os.dup2(si.fileno(), sys.stdin.fileno())
delimiter
print((item, value))
delimiter
tree = etree.parse(filename, parser)
delimiter
datetime.now(timezone.utc).isoformat()
delimiter
plt.show()
delimiter
rdd.zipWithIndex().filter(lambda tup: tup[1] > 0).map(lambda tup: tup[0])
delimiter
tuple(lines[0])
delimiter
serializer.save()
delimiter
map(lambda x: x.title(), s)
delimiter
int(ceil(adjusted_dom / 7.0))
delimiter
{{post.tags}}
delimiter
time.sleep(5)
delimiter
time.sleep(0.01)
delimiter
df.drop(df[df.amount == 0].sample(frac=0.5).index)
delimiter
fileContent = file.read()
delimiter
print(l[x][y])
delimiter
words = sorted(set(stream.read().split()))
delimiter
YourModel.objects.filter(query)
delimiter
arr[[1, 1]]
delimiter
f.close()
delimiter
etree.XMLParser(recover=True)
delimiter
f(x=100)
delimiter
insert_ids.append(cur.lastrowid)
delimiter
result = np.concatenate((a, val))
delimiter
datetime.datetime.strptime(dt, fmt)
delimiter
myRoundedList.sum()
delimiter
ax.add_patch(rectangle)
delimiter
pygame.init()
delimiter
tuple.__new__(*args, **kwargs)
delimiter
A[A == pinf] = 0.0
delimiter
imagem = cv2.bitwise_not(imagem)
delimiter
print(calendar.monthrange(2012, 1)[1])
delimiter
dict((k, D[k] - v) for v, k in enumerate(albums_today))
delimiter
z = np.ones((5, 1, 1))
delimiter
(b - b[0] == 0).all()
delimiter
help(foo.__name__)
delimiter
print([_ for _ in range(5)])
delimiter
a[slice(1, 2)]
delimiter
fig.canvas.draw()
delimiter
plt.show()
delimiter
print(sp.communicate()[0].split())
delimiter
QtGui.QWidget.__init__(self)
delimiter
driver = webdriver.Firefox(firefox_profile=firefoxProfile)
delimiter
DataFrame(dict([(k, Series(v)) for k, v in d.items()]))
delimiter
print(line)
delimiter
plt.imshow(img, cmap=plt.cm.gray)
delimiter
np.split(np.asarray(quaternion0), 4, -1)
delimiter
os.remove(path)
delimiter
con.commit()
delimiter
json.loads(json.dumps(my_dict))
delimiter
d[k].setdefault(kk, 0)
delimiter
df = pd.concat(pool.map(process, links), ignore_index=True)
delimiter
threading.Thread(target=post_request, args=(q,)).start()
delimiter
param = np.apply_along_axis(func1d, axis=2, arr=data)
delimiter
ax2.xaxis.set_visible(False)
delimiter
button.configure(bg=colour)
delimiter
result = np.sum(product, axis=1)
delimiter
a.extend(memoryview(b)[14:20])
delimiter
ds = xr.open_dataset(path_file)
delimiter
plt.show()
delimiter
a = a.ravel().view((np.str, a.itemsize * a.shape[1]))
delimiter
np.hstack((x, np.prod(x, axis=1, keepdims=True)))
delimiter
sum(dct.get(k, 0) for k in lst)
delimiter
print(json.dumps(dict(r.headers)))
delimiter
pd.DataFrame(data=[l])
delimiter
app.run()
delimiter
c = list(map(operator.or_, a, b))
delimiter
B = np.random.rand(2, 4)
delimiter
server.starttls()
delimiter
tk.mainloop()
delimiter
ob_list = data.objects.filter(name__in=my_list)
delimiter
unittest.main()
delimiter
results.sort(key=lambda x: x[0], reverse=True)
delimiter
getattr(obj, name)
delimiter
os.sysconf(2)
delimiter
pygame.quit()
delimiter
data = pd.DataFrame(list(data.items()))
delimiter
self.progbar.pack()
delimiter
self.Bind(wx.EVT_CLOSE, self._on_close)
delimiter
self.Bind(wx.EVT_TEXT, self.OnFiltr, self.filtr)
delimiter
pylab.show()
delimiter
button.clicked.connect(myFunction)
delimiter
user = models.ForeignKey(User, unique=True)
delimiter
session.sendmail(sender, recipients, message)
delimiter
b / (b - 1)
delimiter
{k: list(map(add_element, v)) for k, v in list(dicty.items())}
delimiter
df = pd.DataFrame.from_dict(d)
delimiter
cur.close()
delimiter
signal.signal(signal.SIGINT, signal.SIG_DFL)
delimiter
t.start()
delimiter
print(type(Foo.__dict__))
delimiter
__init__.py
delimiter
plt.colorbar(im, cax=cax)
delimiter
self.log = logging.getLogger(self.__class__.__name__)
delimiter
browser = webdriver.Firefox()
delimiter
df_Quota = pd.DataFrame()
delimiter
index_sets = [np.argwhere(i == a) for i in np.unique(a)]
delimiter
canvas.pack()
delimiter
output = process.stdout.read()
delimiter
result = np.minimum(arr, 255)
delimiter
x = x or y
delimiter
plt.bar(idx, c[0], color=hexencode(c[1]), edgecolor=hexencode(c[1]))
delimiter
f(a, b)
delimiter
numpy.linalg.norm(a - b, ord=1)
delimiter
plt.show
delimiter
out = a[np.sort(sidx[np.searchsorted(a, b, sorter=sidx)])]
delimiter
[1, 1, 0, 1]
delimiter
file.write(html)
delimiter
print(int(s))
delimiter
df = df.append(data)
delimiter
ax1.scatter(X, Y, Z)
delimiter
p.start()
delimiter
main()
delimiter
os.kill(8861, 0)
delimiter
list(zip(*itertools.zip_longest(*ll)))
delimiter
curses.endwin()
delimiter
list(set(a) & set(b))
delimiter
s.diff().fillna(0)
delimiter
[(row if all(row) else [0] * len(row)) for row in matrix]
delimiter
widget.setWindowFlags(QtCore.Qt.Window)
delimiter
update_list(l, [4, 5, 6])
delimiter
traceback.print_stack()
delimiter
args[0].__disown__()
delimiter
LOCALIZED = True
delimiter
not any(data)
delimiter
match(a, b)
delimiter
print(whisper())
delimiter
plt.show()
delimiter
time.sleep(120)
delimiter
Response(serializer.data)
delimiter
cnx.commit()
delimiter
t + np.r_[t[1:], t[0]]
delimiter
request.add_data(edata)
delimiter
userProfile.save()
delimiter
[a for a in alphastartgen(8)]
delimiter
{i[0]: map(int, j) for i, j in p}
delimiter
lines = f.readlines()
delimiter
self.fig.canvas.draw()
delimiter
cursor.fetchall()
delimiter
dockerpty.PseudoTerminal(client, container).start()
delimiter
canvas.grid()
delimiter
pyflakes - -version
delimiter
root.mainloop()
delimiter
json.dumps(arrays)
delimiter
peoples = Person.objects.all()
delimiter
plt.show()
delimiter
fun()
delimiter
plt.show()
delimiter
datetime.datetime.strptime(date_string, format1).strftime(format2)
delimiter
json.dumps(my_dict)
delimiter
dict(zip(freq[1::2], freq[0::2]))
delimiter
[(l[i], l[(i + 1) % n]) for i in range(n)]
delimiter
plt.colorbar(sm)
delimiter
self.autocomplete()
delimiter
my_list
delimiter
numbers[start:] + numbers[:start]
delimiter
__init__.py
delimiter
plt.show()
delimiter
last_row.argsort()
delimiter
C = 1 - np.prod(D, axis=1)
delimiter
fp.close()
delimiter
simplejson.dumps(d, ignore_nan=True)
delimiter
app.MainLoop()
delimiter
w.show()
delimiter
o.write(line)
delimiter
fox.quit()
delimiter
plt.show()
delimiter
A = coo_matrix((values, coords.T))
delimiter
person.put()
delimiter
Base.metadata.create_all()
delimiter
module.main()
delimiter
sys.stdin.readline()
delimiter
name = db.StringProperty()
delimiter
display(w)
delimiter
sys.path.append(path)
delimiter
sys.stdout.close()
delimiter
foo.bar
delimiter
view_func(request, *args, **kwargs)
delimiter
plt.legend()
delimiter
self._build_data()
delimiter
parser.print_help()
delimiter
from_file.readline()
delimiter
HttpResponse(escape(repr(request)))
delimiter
plt.show()
delimiter
ax.get_yaxis().set_label_coords(-0.1, 0.5)
delimiter
list(chain(*a))
delimiter
print(cursor.lastrowid)
delimiter
all(not X for X in dict.values())
delimiter
transmission_array.extend([1] * 400 * slot_duration)
delimiter
plt.setp(cg.ax_heatmap.yaxis.get_majorticklabels(), rotation=0)
delimiter
result = bytes.fromhex(some_hex_string)
delimiter
app.mainloop()
delimiter
print(sorted(sub_strings, key=lambda x: levenshtein_distance(x, s))[0])
delimiter
f.close()
delimiter
input_file.close()
delimiter
PLT.show()
delimiter
self.sock.bind((self.host, self.port))
delimiter
path = os.path.realpath(path)
delimiter
merged_df = pd.concat(dfs, axis=1)
delimiter
deserialized_object.save()
delimiter
app.logger.setLevel(logging.ERROR)
delimiter
logger.setLevel(logging.DEBUG)
delimiter
Counter(list(d.values()))
delimiter
a[0] = 5
delimiter
my_tuple = tuple(my_list)
delimiter
[(v1 * list1[j]) for i, v1 in enumerate(list1) for j in range(i)]
delimiter
fact = lambda x: 1 if x == 0 else x * fact(x - 1)
delimiter
random.randint(10 ** (x - 1), 10 ** x - 1)
delimiter
writer.writerows(out_data)
delimiter
client.connect()
delimiter
plt.show()
delimiter
df[df.a < df.a.quantile(0.95)]
delimiter
list_of_lists
delimiter
new_list = list(set([date for date in dates if dates.count(date) > 1]))
delimiter
time.mktime(dt_obj.timetuple())
delimiter
len(buf.read())
delimiter
print(np.abs(s[0] - s[1]) / std)
delimiter
df[0:2]
delimiter
df.mean()
delimiter
func()
delimiter
print((lambda x: chr(ord(x) + 1))(i))
delimiter
tkinter.deletefilehandler(file)
delimiter
time.sleep(random.randint(1, 4))
delimiter
unittest.main()
delimiter
client.load_system_host_keys()
delimiter
app = QtGui.QApplication([])
delimiter
(index for index, value in enumerate(obj))
delimiter
imgc = cv2.imread(file, 0)
delimiter
vbox.setContentsMargins(0, 0, 0, 0)
delimiter
df = np.dot(df, p_value)
delimiter
pool.apply_async(test2, (t,), [dict(arg2=5)])
delimiter
type(b)(a)
delimiter
Session.objects.filter(pk__in=user_sessions)
delimiter
object.save()
delimiter
print(rawstr(test6))
delimiter
[sum(g) for b, g in itertools.groupby(bits) if b]
delimiter
sys.exit(app.exec_())
delimiter
print(subg.edges())
delimiter
[it for it in l for _ in range(2)]
delimiter
a = df.iloc[:, 2:].values
delimiter
pickle.dump(data1, output)
delimiter
server.quit()
delimiter
plt.show()
delimiter
len(tested) == len(input)
delimiter
pool = mp.Pool(processes=4)
delimiter
plt.gcf().set_size_inches(10, 10)
delimiter
pygame.draw.circle(surf1, (0, 0, 200, 100), (100, 100), 100)
delimiter
print([b(5, 8) for b in bases])
delimiter
cv.Remap(image, remapped, mapX, mapY, cv.CV_INTER_LINEAR)
delimiter
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
print(df.loc[mask])
delimiter
im.show()
delimiter
a[tuple(idx)] = 5
delimiter
df_output_lines = [s.split() for s in fixed_df_output.splitlines()]
delimiter
centroids = [prefs[random.choice(users)] for i in range(k)]
delimiter
root.grid_columnconfigure(0, weight=1)
delimiter
info = collection.find_one(obj_id)
delimiter
a = np.array([[1, 1], [2, 2], [4, 4]])
delimiter
plt.show()
delimiter
logger.removeHandler(hdl)
delimiter
euclid(nums[1], gcd(nums[:2]))
delimiter
fig = plt.figure()
delimiter
df[(df.foo == 222) | (df.bar == 444)]
delimiter
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
delimiter
plt.clabel(CS, inline=1, fontsize=10)
delimiter
plt.ylim(plt.ylim()[0], 1.0)
delimiter
plt.show()
delimiter
br.submit()
delimiter
plt.show()
delimiter
sys.stdout.write(os.read(fd, 1024))
delimiter
sys.exit(1)
delimiter
df = pd.concat([df, market], axis=1)
delimiter
func(*args, **kwargs)
delimiter
all(v in value for v in input_list)
delimiter
gc.garbage
delimiter
numpy.kron(a, [[1, 1], [1, 1]])
delimiter
print(d[k])
delimiter
self.top.destroy()
delimiter
plt.show()
delimiter
plt.show()
delimiter
print(list(range(len(words))))
delimiter
cf.insert(uuid.uuid4(), [{k: str(v) for k, v in d.items()} for d in x])
delimiter
np.isfinite(b)
delimiter
json.dumps(object())
delimiter
time.sleep(1)
delimiter
pickle.dumps(defdict)
delimiter
a[b[:, (0)], b[:, (1)]]
delimiter
isinstance(v, type(LAMBDA)) and v.__name__ == LAMBDA.__name__
delimiter
layout.addWidget(self.browser)
delimiter
ax.set_yticklabels([])
delimiter
message = sys.stdin.readlines()
delimiter
persons = Person.objects.all().order_by(now, anniversary)
delimiter
s.fill((255, 255, 255))
delimiter
(dist ** 2).sum(axis=2) ** 0.5
delimiter
myNames = [line.strip() for line in f]
delimiter
l1.extend([7, 8, 9])
delimiter
g2 = [elem[:12] for elem in g]
delimiter
any(isinstance(e, list) for e in my_list)
delimiter
solve(eqn, Rsense)
delimiter
t.start()
delimiter
a.execute(sql)
delimiter
self.label.pack()
delimiter
trimmed_text = text.strip()
delimiter
f.close()
delimiter
any(thelist.count(x) > 1 for x in thelist)
delimiter
help(list)
delimiter
self.add_tag(tag)
delimiter
listening_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
delimiter
j2 = [x for x in j if x >= 5]
delimiter
np.reshape(x, (-1, 1))
delimiter
[i for i, letter in enumerate(s) if letter == ch]
delimiter
self.worker.start()
delimiter
df.stack()
delimiter
sum(map(mul, a, b))
delimiter
[datetime.datetime(2012, 1, 5, 0, 0)]
delimiter
app = Flask(__name__)
delimiter
fun(ctypes.c_void_p(indata.ctypes.data), ctypes.c_void_p(outdata.ctypes.data))
delimiter
ent6.grid(row=1, column=1)
delimiter
admin.site.register(Group, GroupAdmin)
delimiter
self.send_response(200)
delimiter
plt.show()
delimiter
scipy.optimize
delimiter
df.to_csv(f, header=False, index=False)
delimiter
print(hex(-1 & 4294967295))
delimiter
deletel[0]
delimiter
win.show_all()
delimiter
print((i, line))
delimiter
this_array[indices[0]:indices[-1] + 1].fill(new_v)
delimiter
plt.show()
delimiter
dropped_copies = [(lambda i: (x[i] for x in copies[i]))(i) for i in range(2)]
delimiter
df_subset.apply(lambda x: x.C * x.E, axis=1).sum()
delimiter
os.kill(pid, 0)
delimiter
os.isatty(0)
delimiter
print(re.findall(p, test_str))
delimiter
res = cv2.bitwise_and(img, img, mask=mask)
delimiter
result = p.communicate()[0]
delimiter
cursor.fetchall()
delimiter
serializer = CommentSerializer(comment, data=request.data, partial=True)
delimiter
[entry for tag in tags for entry in entries if tag in entry]
delimiter
shelf.close()
delimiter
graph = facebook.GraphAPI(access_token)
delimiter
self.ax.set_ylim(0, R + pR)
delimiter
s.connect((HOST, PORT))
delimiter
a[(0), :, :]
delimiter
cdf1.update(cdf2, overwrite=False)
delimiter
print(os.path.abspath(__file__))
delimiter
sys.stdout.flush()
delimiter
self.pack(fill=BOTH, expand=1, padx=5, pady=5)
delimiter
pts = [(1, 1), (10, 1), (10, 10), (1, 10)]
delimiter
print(br.response().read())
delimiter
characters += sum(len(word) for word in wordslist)
delimiter
print(df.loc[:, (~mask)])
delimiter
radioValue = butRadio.value_selected
delimiter
datetime.now(timezone.utc).astimezone().isoformat()
delimiter
splitted = [i.strip() for i in re.split(pattern, s) if i.strip()]
delimiter
any(np.allclose(row, x) for x in myarray)
delimiter
f.seek(0)
delimiter
Companies.objects.filter(q)
delimiter
print(s.getvalue())
delimiter
ind[np.where(np.diff(ind) == 0)]
delimiter
server.sendmail(self.EMAIL_FROM, self.EMAIL_TO, msg.as_string())
delimiter
p.stdout.close()
delimiter
l.extend(map(int, r.findall(line)))
delimiter
dict.__setitem__(self, keys[-1], value)
delimiter
app.run(debug=True)
delimiter
a[0]
delimiter
sum([i for i in l1 if isinstance(i, numbers.Number)])
delimiter
t.start()
delimiter
{k: min(i for i in (h1.get(k), h2.get(k)) if i) for k in list(h1.keys()) | h2}
delimiter
lst.sort(key=operater.itemgetter(2), reverse=True)
delimiter
col = A.getcol(colindex)
delimiter
app = QtGui.QApplication([])
delimiter
result = [sum(el) for el in itertools.zip_longest(fillvalue=0, *lists)]
delimiter
unittest.main()
delimiter
d = {r[0]: tuple(r[1:-1]) for r in reader}
delimiter
self.instance.status
delimiter
signal.signal(signal.SIGINT, signal_handler)
delimiter
plt.show()
delimiter
virtualenv - -help
delimiter
f = lambda r: r * (sp.j0(r) + sp.jn(2, r))
delimiter
pygame.display.init()
delimiter
a = np.loadtxt(stdin, dtype=np.int)
delimiter
random.shuffle(lis)
delimiter
x[0] + x[-1]
delimiter
a = k + a
delimiter
sizer.Add(text, 0, wx.ALL, 5)
delimiter
sys.exit(app.exec_())
delimiter
people_list.append(person)
delimiter
ax = fig.add_subplot(111)
delimiter
plot(tmp.max(axis=0))
delimiter
mat = sparse.coo_matrix(points, (I, J))
delimiter
im.show()
delimiter
admin.site.register(LocationCode, LocationAdmin)
delimiter
config.write()
delimiter
self.initUI()
delimiter
siympify(y)
delimiter
A[i, j] = C[j, B == i].sum()
delimiter
ax.xaxis.set_major_locator(mdates.AutoDateLocator())
delimiter
logging.Handler.__init__(self)
delimiter
text.pack()
delimiter
print(table.ascii_table(data, has_header=True))
delimiter
jsonify(json_list=[i.serialize for i in qryresult.all()])
delimiter
self.schedule.run()
delimiter
plt.colorbar()
delimiter
plt.draw()
delimiter
max(0, min(a[1], b[1]) - max(a[0], b[0]))
delimiter
json.dumps(o)
delimiter
df.head()
delimiter
element_counts = collections.Counter(itertools.chain.from_iterable(allsets))
delimiter
{(x, x + 2) for x in r if x + 2 in r}
delimiter
cherrypy.quickstart(HelloWorld())
delimiter
calendar.timegm(dt.utctimetuple())
delimiter
turtle.circle(circumfrence / 2)
delimiter
temp_list = (x * x for x in range(0, 10))
delimiter
X_train_array = X_train.toarray()
delimiter
cv.WaitKey(0)
delimiter
sc.addFile(some_path)
delimiter
print(len(a) - a.index(min(a)) - 1)
delimiter
PyMem_DEL(self)
delimiter
sys.path.insert(0, lib_path)
delimiter
tk.Label(frame, text=t).grid(row=row, column=1)
delimiter
any(v > 0 for v in pairs.values())
delimiter
help(pyudt)
delimiter
self.pack()
delimiter
data = pd.DataFrame(json.loads(line) for line in f)
delimiter
print(line, file=file)
delimiter
[1, 1, 1],
delimiter
trainer.trainEpochs(1000)
delimiter
g.filter(lambda x: len(x) >= 10)
delimiter
self.grid_rowconfigure(0, weight=1)
delimiter
list(range(len(sent)))
delimiter
link.click()
delimiter
print(v, type(v))
delimiter
webbrowser.open(whatever)
delimiter
[0, 0, 0, 1, 0, 1]
delimiter
np.arange(x[0], x[0] + 60, 10)
delimiter
np.allclose(a, b)
delimiter
plt.ion()
delimiter
ax.imshow(im)
delimiter
model1.objects.all()
delimiter
print(json.dumps(df.T.as_matrix().tolist(), indent=4))
delimiter
getattr(module, name)
delimiter
os.chdir(currdir)
delimiter
self._autosave()
delimiter
QAbstractTableModel.__init__(self, parent)
delimiter
print(template.render())
delimiter
plt.figure()
delimiter
self.factories.append(factory)
delimiter
mpl.pyplot.legend(**dict(list(defaults.items()) + list(kwargs.items())))
delimiter
plt.savefig(file_path, dpi=80)
delimiter
httpd.serve_forever()
delimiter
(numpy.diff(numpy.sign(a)) != 0) * 1
delimiter
thread.start()
delimiter
max(knapsack(i - 1, W), values[i] + knapsack(i - 1, W - weights[i]))
delimiter
timedelta(hours=6)
delimiter
ax.set_ylim([-2, 2])
delimiter
pil_img = PIL.Image.open(filename)
delimiter
numpy.transpose(matrix7, axes=(1, 0, 2)).tolist()
delimiter
plt.draw()
delimiter
b = a[..., ::-1]
delimiter
paramdata.columns
delimiter
setattr(self, key, value)
delimiter
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
delimiter
sum(v[1][1] for v in itertools.chain(*[list(d.items()) for d in myList]))
delimiter
browser.close()
delimiter
f.close()
delimiter
all([])
delimiter
max(b, key=inverse)
delimiter
setpath(d.setdefault(p[0], {}), p[1:], k)
delimiter
df.groupby(date).mean()
delimiter
val, _ = funky_func()
delimiter
wrpcap(OUTFILE, paks)
delimiter
ax1 = fig.add_subplot(2, 1, 1)
delimiter
ax.yaxis.set_major_locator(mtick.LinearLocator(5))
delimiter
f.write(bin_data)
delimiter
set(tuple(sorted(elt)) for elt in example)
delimiter
b = [dict(a)]
delimiter
plt.plot(x, y)
delimiter
fact = lambda x: 1 if x == 0 else x * fact(x - 1)
delimiter
main()
delimiter
string_key = entity.key().urlsafe()
delimiter
conn.request()
delimiter
cax.get_yaxis().set_visible(False)
delimiter
a[:len(bbins)] += bbins
delimiter
f()
delimiter
Entry.objects.filter(created__range=(start_date, end_date))
delimiter
y = x.astype(np.float)
delimiter
np.hstack(x).shape
delimiter
plt.show()
delimiter
cursor.execute(sql, [id])
delimiter
data = [(item + 256 if item < 0 else item) for item in data]
delimiter
x[0] + x[-1]
delimiter
MyDiccoSorted = sorted(list(MyDicco.items()), key=lambda s: s[1][2])
delimiter
time.sleep(5)
delimiter
self.label.setAlignment(QtCore.Qt.AlignCenter)
delimiter
sorted(sentence, reverse=True)[0]
delimiter
list(list(zip(r, p)) for r, p in zip(repeat(a), permutations(b)))
delimiter
self.transport.write(line)
delimiter
np.array_equal(np.asarray(foo_cv), foo_np_view)
delimiter
self.timer.join()
delimiter
plt.show()
delimiter
sys.exit(0)
delimiter
screen.blit(surf, (100, 100))
delimiter
print(list(iter(root.children[1])))
delimiter
np.hstack((vector1.reshape(-1, 1), matrix2))
delimiter
out_file.write(line)
delimiter
unittest.main()
delimiter
books_array = numpy.array(list_of_lists)
delimiter
root.mainloop()
delimiter
self.post(*args, **kwargs)
delimiter
ax2 = fig.add_subplot(2, 1, 2)
delimiter
imshow(np.asarray(pil_im))
delimiter
circle.grid(row=1, column=1)
delimiter
df.apply(lambda x: x[np.where(x > 0)[0][0]], axis=1)
delimiter
Fraction.from_float(0.25)
delimiter
max(sum(1 for i in g) for k, g in groupby(L))
delimiter
pyl.show()
delimiter
self.stream.close()
delimiter
array ^= numpy.random.rand(len(array)) < prob
delimiter
plt.show()
delimiter
shutil.copyfileobj(f_in, f_out)
delimiter
f()
delimiter
plt.show()
delimiter
self.__dict__.update(state)
delimiter
matplotlib.pyplot.show()
delimiter
time.sleep(2)
delimiter
df.groupby[di.month].Category.apply(pd.value_counts)
delimiter
[next(gen) for _ in range(6)]
delimiter
plt.show()
delimiter
print(sorted(list(globalHotItems.items()), key=lambda x: x[1])[-4:])
delimiter
abs(x=5)
delimiter
plt.subplots_adjust(right=0.85)
delimiter
biggest = [x[0] for x in d.most_common(6)]
delimiter
float(s)
delimiter
main()
delimiter
list(IT.izip_longest(*readers))
delimiter
myChoice = random.choice(answer)
delimiter
letters = [choice(ascii_lowercase) for _ in range(5)]
delimiter
self.foo()
delimiter
dot(A, x)
delimiter
webapp2.RequestHandler.dispatch(self)
delimiter
s.listen(1)
delimiter
a.max(axis=1)
delimiter
seq[::2], seq[1::2]
delimiter
sys.exit(app.exec_())
delimiter
print([r.lower() for r in row])
delimiter
df.apply(print_row, axis=1)
delimiter
pyplot.show()
delimiter
r = np.sqrt(x * x + y * y)
delimiter
queryset = queryset.filter(full_name__icontains=string)
delimiter
plt.subplots_adjust(top=0.9)
delimiter
document.close()
delimiter
plt.show()
delimiter
element.clear()
delimiter
server.serve_forever()
delimiter
Thread.__init__(self)
delimiter
ax.xaxis.set_major_locator(MultipleLocator(1.0))
delimiter
now_plus_10m = now + datetime.timedelta(minutes=10)
delimiter
s == s[::-1]
delimiter
ax.plot_surface(x_surf, y_surf, z_surf, cmap=theCM)
delimiter
reactor.run()
delimiter
A = np.array(mean_data).mean(axis=0)
delimiter
new_rows.append([str(elt).expandtabs() for elt in row])
delimiter
even = [n for n in numbers[:numbers.index(412)] if not n % 2]
delimiter
s = requests.Session()
delimiter
t.start()
delimiter
Image.fromarray(imarray)
delimiter
the_dict = json.loads(JSON_Datalist)
delimiter
[(i, sum(j)) for i, j in list(d.items())]
delimiter
sys.stdout.flush()
delimiter
item = singlet_list[0] if len(singlet_list) == 1 else False
delimiter
figure(figsize=(5, 10))
delimiter
self.Bind(wx.EVT_PAINT, self.OnPaint)
delimiter
cbgen(int(x), base, iexps), cbgen(x - int(x), base, fexps)
delimiter
root.mainloop()
delimiter
shutil.rmtree(temp_dir)
delimiter
dataframe.iloc[:, ([0, 1, 4])]
delimiter
curses.curs_set(0)
delimiter
QtCore.QVariant()
delimiter
b = a * (a > 0)
delimiter
os.nice(1)
delimiter
result.drop(0, axis=1, inplace=True)
delimiter
dot_product = sum(dict_1[key] * dict_2.get(key, 0) for key in dict_1)
delimiter
sorted(dictionary, key=dictionary.get, reverse=True)[:10]
delimiter
response = requests.get(url)
delimiter
self.show_all()
delimiter
blobs = BlobInfo.all().run()
delimiter
[x.time for x in list_of_objects]
delimiter
pd.MultiIndex.from_tuples(list(product(*categories)), names=names)
delimiter
Acut[np.isnan(Acut)] = np.nanmean(Acut)
delimiter
total += float(current_number)
delimiter
s[~s.isnull()]
delimiter
[0, 0, 0, 0]
delimiter
changes.setdefault(k, []).append(v)
delimiter
pd.read_excel(filename)
delimiter
[0] * (len(a) - len(c)) + c
delimiter
logger.addHandler(handler)
delimiter
plt.figure(1, figsize=(size_x, size_y), dpi=98)
delimiter
aobj.__class__
delimiter
django.contrib.auth.middleware.AuthenticationMiddleware
delimiter
b.swapaxes(0, 1)
delimiter
res = [((s[i] + s[i + 1]) / 2) for i in range(0, len(s) - 1, 2)]
delimiter
doublepp = np.ctypeslib.ndpointer(dtype=np.uintp)
delimiter
serializer.save()
delimiter
themod.__dict__.update(thedict)
delimiter
logger.setLevel(logging.DEBUG)
delimiter
np.searchsorted(np.sort(x), x)
delimiter
plt.axvline(x_position)
delimiter
mylist.insert(0, mylist.pop(mylist.index(targetvalue)))
delimiter
ax.plot_surface(X, Y, F)
delimiter
Done
delimiter
min(map(lambda x: string.index(x) if x in string else len(string), specials))
delimiter
random.shuffle(all)
delimiter
now = datetime.datetime.utcnow().replace(tzinfo=utc)
delimiter
subprocess.Popen(cmd).wait()
delimiter
threading.Thread.__init__(self)
delimiter
plt.scatter(x, y, c=t, cmap=cm.cmap_name)
delimiter
driver = webdriver.PhantomJS()
delimiter
filter_func(parent_dict, lambda x: 2 < x < 4)
delimiter
response
delimiter
[1][0][2]
delimiter
last_wednesday = today - timedelta(days=offset)
delimiter
sorted(A, key=lambda e: e not in B)
delimiter
sys.path.append(os.path.abspath(scriptpath))
delimiter
tuple(numpy.subtract((10, 10), (4, 4)))
delimiter
image.image.save(file_name, files.File(lf))
delimiter
seq2str(img.getdata())
delimiter
b.sort()
delimiter
threading.Thread.__init__(self)
delimiter
list(compress(list_a, fil))
delimiter
moduleA.py
delimiter
moduleB.py
delimiter
ar = [[str(item) for item in results] for results in cur.fetchall()]
delimiter
plt.show()
delimiter
x = EqM_list(someiter)
delimiter
data = [x for x in data if type(x) == float]
delimiter
sorted(set(a_list))
delimiter
service.files().delete(fileId=dir_id).execute()
delimiter
gtk.main()
delimiter
f.close()
delimiter
plt.show()
delimiter
f.close()
delimiter
str1.split()
delimiter
ax.set_xlim(-0.5, 1.5)
delimiter
print(mystring[2:4])
delimiter
[i for i in l for r in range(2)]
delimiter
x = f.readlines()
delimiter
tree = etree.parse(StringIO(your_xml_string), magical_parser)
delimiter
map(f, tuple_list)
delimiter
bare_argspec = inspect.getargspec(func)
delimiter
pixels = list(im.getdata())
delimiter
[(x - y) for x, y in it.izip(a[1:], a)]
delimiter
b = word in (w for i, w in enumerate(wordList) if i != 1)
delimiter
self.assertEqual(actual, expected)
delimiter
ax2.set_ylim(0, 1.2)
delimiter
print(map(itemgetter(0), next(bykey)[1]))
delimiter
subA.tick_params(labelsize=6)
delimiter
queryset = User.objects.all()
delimiter
fun(**{b.decode(): v for b, v in list(dic.items())})
delimiter
x = EqM_list(iter(d.keys()))
delimiter
app.run()
delimiter
sympy.solve([sympy.Eq(b - a ** 2.552 - c), sympy.Eq(b, 2)], rational=False)
delimiter
globals().update({name: module_dict[name] for name in to_import})
delimiter
np.random.seed(seed=0)
delimiter
zip(*(s[i:] for i in range(n)))
delimiter
print(r.status_code)
delimiter
new_list.append(temp_list)
delimiter
object.__new__(cls, *args, **kwargs)
delimiter
A = (A - mean(A, axis=0)) / std(A, axis=0)
delimiter
list(itertools.product(a, b))
delimiter
[0.00148820116, 0.000295700572, 0.00441516179],
delimiter
df.iloc[:, (0)]
delimiter
getattr(self, name)
delimiter
ax1 = fig.add_subplot(1, 2, 1)
delimiter
print(ruamel.yaml.dump(d, Dumper=ruamel.yaml.RoundTripDumper))
delimiter
np.sum(x, axis=-1)[:, (np.newaxis)] - np.cumsum(x, axis=-1)
delimiter
ax.yaxis.set_major_locator(MultipleLocator(1.0))
delimiter
b, g, r = img[:, :, (0)].copy(), img[:, :, (1)].copy(), img[:, :, (2)].copy()
delimiter
smtp.sendmail(from_addr, to_addr, message.as_string())
delimiter
lst.sort(key=lambda x: x[2], reversed=True)
delimiter
process.kill()
delimiter
views.py
delimiter
conn.send(data)
delimiter
hist([(t.hour + t.minute / 60.0) for t in ts], bins=24 * 60 / 15)
delimiter
session.add(p)
delimiter
c.append(quad(f, -1, 1, args=list(range(1, n + 1)))[0])
delimiter
content = some_file.read()
delimiter
print([result.get(timeout=10) for result in results])
delimiter
print(lxml.html.tostring(doc))
delimiter
df = df.append(df)
delimiter
[11, 11, 11, 1, 18, 14, 14, 9, 9]
delimiter
logging.getLogger().addHandler(setupcon.ColoredHandler())
delimiter
arr[indices[:, (0)], indices[:, (1)]]
delimiter
users.create()
delimiter
ws = wb.worksheets[0]
delimiter
parrot(**d)
delimiter
ax = fig1.gca()
delimiter
app.mainloop()
delimiter
self.pack()
delimiter
itertools.count(1000000000000)
delimiter
sum(a)
delimiter
time.sleep(2)
delimiter
os._exit(0)
delimiter
print(sess.run([x, y]))
delimiter
self.queries.append(a[1])
delimiter
json.dumps([str(nparray.dtype), base64.b64encode(nparray), nparray.shape])
delimiter
ax.set_zticks(np.arange(0, 9, 0.5))
delimiter
print(list(itertools.chain(*kana)))
delimiter
sys.stdout.flush()
delimiter
img = np.empty((100, 100, 1), dtype=np.uint16)
delimiter
k.append(j)
delimiter
client.send(message)
delimiter
newobjs._register(obj)
delimiter
p.kill()
delimiter
math.exp(-np.logaddexp(0, -x))
delimiter
ax.boxplot(data)
delimiter
win.show_all()
delimiter
args = parser.parse_args(get_xyz_cmd_line(sys.argv[1:]))
delimiter
reactor.run()
delimiter
json.dumps()
delimiter
master.mainloop()
delimiter
cropped = pygame.Surface((80, 80))
delimiter
pandas.merge(df.stack(0).reset_index(1), id, left_index=True, right_index=True)
delimiter
Ainv = np.array(map(np.linalg.inv, A))
delimiter
milestones_list = milestones_df.index.tolist()
delimiter
time.sleep(1)
delimiter
plt.gcf().show()
delimiter
os.symlink(linkto, dst)
delimiter
print(yaml.dump(data, Dumper=yaml.RoundTripDumper, indent=4))
delimiter
mainloop()
delimiter
numpy.array([network.activate(x) for x, _ in train])
delimiter
print(os.path.join(path, file))
delimiter
Thread.__init__(self)
delimiter
np.dstack(np.nonzero(df.values))[0]
delimiter
hash(str(d))
delimiter
print(response.read())
delimiter
QtGui.QTabWidget.addTab(self, widget, title)
delimiter
result_list = list(result.values())
delimiter
print(cls.__name__)
delimiter
X, Y = np.meshgrid(XB, YB)
delimiter
print(icon_info.get_filename())
delimiter
pylab.draw()
delimiter
print(celery.AsyncResult.task_id)
delimiter
a.argsort()[-10:]
delimiter
window.activateWindow()
delimiter
print(f.read())
delimiter
content_sizer = wx.BoxSizer(wx.HORIZONTAL)
delimiter
deleteL[::2]
delimiter
arr[1, -1]
delimiter
print(sum(a))
delimiter
np.argsort(b)[c]
delimiter
time.sleep(0.5)
delimiter
[(x * 2) for x in [2, 2]]
delimiter
console.setFormatter(color_formatter)
delimiter
ax = fig.add_subplot(111)
delimiter
signal.signal(signal.SIGINT, old_action)
delimiter
silhouette_score(iris.data, iris.target, sample_size=50)
delimiter
print(fout.read())
delimiter
plt.ylim([0, 1])
delimiter
sys.exit()
delimiter
map(lambda x: group(x, a), sum_vals)
delimiter
[(stuff + stuff[:n / 2 - 1])[i:i + n / 2] for i in range(n)]
delimiter
math.acos(dotproduct(v1, v2) / (length(v1) * length(v2)))
delimiter
reactor.run()
delimiter
rest = (n - last_digit) / 10
delimiter
x = math.ceil(x * 100.0) / 100.0
delimiter
root.mainloop()
delimiter
view.configure_traits()
delimiter
M.reshape(-1, 2, 2).sum(axis=0)
delimiter
a = np.random.randint(0, 9, 10)
delimiter
tuple(l)
delimiter
admin.site.register(Session, SessionAdmin)
delimiter
row[0, col.argsort()]
delimiter
ax.add_artist(circle)
delimiter
wb.Close()
delimiter
np.where(np.diff(x) > 0.5)[0]
delimiter
self.text_ent.grid(row=1, column=0)
delimiter
5 + np.random.sample(10) * 5
delimiter
ax.xaxis.set_major_formatter(formatter)
delimiter
math.radians(45.0)
delimiter
max(depth(self.left), depth(self.right)) + 1
delimiter
flask.request.user_agent.string
delimiter
print(list(reader))
delimiter
next(iter(list(c.items())))
delimiter
sorted(2 * list(range(5)))
delimiter
session.query(Action).filter_by(name=name).one()
delimiter
ShowAppsView.as_view()(self.request)
delimiter
df.to_excel(writer)
delimiter
name = models.CharField(max_length=64)
delimiter
df.loc[cond1 | cond2]
delimiter
ax.legend(loc=0)
delimiter
print(list_end_counter([1, 1, 2, 2, 2, 2]))
delimiter
os.chown(path, uid, gid)
delimiter
app.exec_()
delimiter
[(int(lst[x]) if x in indices else lst[x]) for x in range(len(lst))]
delimiter
my_dictionary_list
delimiter
x.__enter__()
delimiter
a % b
delimiter
i = [int(x) for x in s.split()]
delimiter
dict(zip(x, y))
delimiter
webbrowser.open(url, new=0, autoraise=True)
delimiter
ax.set_xlim(-10, 10)
delimiter
show()
delimiter
df.apply(fillnull)
delimiter
[k for k in list(mydict.keys()) if k >= 6]
delimiter
show(p)
delimiter
rows = [[field[k][i] for k in list(field.keys())] for i in range(2)]
delimiter
window.show()
delimiter
clientsocket.send(p)
delimiter
process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
delimiter
a + b
delimiter
print(os.path.join(dir, file))
delimiter
datetime.datetime.utcfromtimestamp(seconds)
delimiter
self.y = 0
delimiter
e.toxml()
delimiter
[ast.literal_eval(el) for el in lst]
delimiter
next(y)
delimiter
book = Workbook()
delimiter
fullpower = quad(f, 1e-09, np.inf)[0]
delimiter
Thread.__init__(self)
delimiter
plt.draw()
delimiter
print(np.partition(x, -10)[-10:])
delimiter
plt.plot(x)
delimiter
req.get_method()
delimiter
t.start()
delimiter
time.sleep(1)
delimiter
print([abs(v - l[(i + 1) % len(l)]) for i, v in enumerate(l)])
delimiter
print(df)
delimiter
[(k, adict[k]) for k in sorted(adict, key=adict.get, reverse=True)]
delimiter
s.replace(0, np.nan).dropna().astype(s.dtype)
delimiter
sp.wait()
delimiter
test.ix[i::4]
delimiter
sock.settimeout(5)
delimiter
cj = cookielib.CookieJar()
delimiter
pd.DataFrame(data, df.index, u)
delimiter
file.seek(0, os.SEEK_END)
delimiter
parser.parse(open(filename))
delimiter
a[0][0]
delimiter
str(f)
delimiter
sizer.Add(input, 1, wx.EXPAND | wx.ALL, 5)
delimiter
ax.plot_surface(Rnew * np.cos(Tnew), Rnew * np.sin(Tnew), Znew)
delimiter
result = np.average(_array[::][1:], axis=1)
delimiter
imgc = cv2.imread(file)
delimiter
plt.legend()
delimiter
any(map(my_dict.__contains__, my_list))
delimiter
mpl.rcParams.update(manager._rcparams)
delimiter
list(_)
delimiter
np.dot(W, B)
delimiter
[[z[i] for z in foo] for i in (0, 1)]
delimiter
ax.plot(list(range(10)))
delimiter
plt.show()
delimiter
B = A[::2, :, 1:2]
delimiter
os.chdir(path)
delimiter
board4 = [[1, 0, 0, 1], [0, 1, 1, 0], [0, 0, 1, 0], [0, 1, 0, 0]]
delimiter
ab[x].sort()
delimiter
arr[20:] = [0] * (len(arr) - 20)
delimiter
S2.startswith(S1)
delimiter
self.initialized = True
delimiter
np.clip(arr, 0, 255, arr)
delimiter
{{forloop.counter0}}, {{j}}
delimiter
new_column.index
delimiter
{t: [next(it) for _ in range(next(it))] for t in it}
delimiter
app.mainloop()
delimiter
br.set_handle_gzip(True)
delimiter
plt.show()
delimiter
df.apply(lambda x: x.between(2, 10, inclusive=False))
delimiter
s.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)
delimiter
n, bins, patches = plt.hist(x, histedges_equalA(x, nbin), normed=False)
delimiter
plt.subplot(111)
delimiter
time.sleep(2)
delimiter
all(item[2] == 0 for item in items)
delimiter
self._background_task()
delimiter
circ = np.linspace(0, 2 * pi)
delimiter
ax.set_xticks(numpy.arange(0, 1, 0.1))
delimiter
c.showPage()
delimiter
theproc.communicate()
delimiter
hottest_cakes = Cake.objects.filter(id__in=hottest_cake_ids)
delimiter
plt.subplots_adjust(left=0.25, bottom=0.25)
delimiter
myApp.setWindowFlags(QtCore.Qt.Tool)
delimiter
driver = webdriver.Firefox(firefox_profile=profile)
delimiter
s.bind((HOST, PORT))
delimiter
H = nx.DiGraph()
delimiter
main()
delimiter
df.rename(columns=lambda x: x[1:], inplace=True)
delimiter
print(html.tostring(table, pretty_print=True))
delimiter
sys.excepthook = info
delimiter
results = [t.age for t in mylist if t.person_id == 10]
delimiter
mat.data -= numpy.repeat(vec.toarray()[0], numpy.diff(mat.indptr))
delimiter
i = int(round(float(s)))
delimiter
subprocess.Popen.communicate()
delimiter
sys.modules.pop(module_name)
delimiter
[x for i, x in enumerate(y) if i != 0 and x != 6]
delimiter
d.execute()
delimiter
print(todayDate.replace(day=1))
delimiter
f.close()
delimiter
socket.setdefaulttimeout(60)
delimiter
[t for t in my_set if my_list.count(t) > 1]
delimiter
bar()
delimiter
A = numpy.array([[2, -1, 0], [-1, 2, -1], [0, -1, 2]], numpy.float)
delimiter
{{value.name}}
delimiter
child_process.kill()
delimiter
L1.sort(key=lambda x: L.index(x))
delimiter
func(*args, **kwargs)
delimiter
list(filter(f, list(range(2, 25))))
delimiter
iv = bytes([random.randint(0, 255) for i in range(16)])
delimiter
map(operator.add, a, b)
delimiter
self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
main()
delimiter
layout.addWidget(self.de)
delimiter
print(r.content)
delimiter
[(seen.add(obj.id) or obj) for obj in mylist if obj.id not in seen]
delimiter
multiprocessing.cpu_count()
delimiter
plt.boxplot(boxes, vert=0)
delimiter
self.setGridIntersection(self.pos())
delimiter
self.layout.addWidget(self.view)
delimiter
delta = datetime.datetime.now() - previousTime
delimiter
Entry.objects.bulk_create(aList)
delimiter
[a.join(b) for a, b in zip(df.a, df.b)]
delimiter
show()
delimiter
s.close()
delimiter
C = map(sub, A, B)
delimiter
func()
delimiter
sys.stdout.flush()
delimiter
np.maximum.reduceat(v, idx)
delimiter
window.show()
delimiter
my_list = [dict(out[v]) for v in sorted(out)]
delimiter
[k for k, g in groupby(a) if len(list(g)) >= 2]
delimiter
output.close()
delimiter
print(cur.fetchall()[0])
delimiter
tree = ET.ElementTree(ET.fromstring(xmlstring))
delimiter
type.__new__(cls, name, bases, dct)
delimiter
time.sleep(0.11)
delimiter
sorted(list(x.items()), key=lambda kv: kv[1])
delimiter
ctypes.c_ulong(-1)
delimiter
result = [line.upper() for line in lines]
delimiter
f.axes[0].set_position([0.05, 0.05, 0.4, 0.4])
delimiter
t = [x for x in q if x in w]
delimiter
list2b = [c for c in list2 if c in list1]
delimiter
print(match.group(1))
delimiter
self.set.remove(d)
delimiter
the_list.sort()
delimiter
names = [row[0] for row in curs.fetchall()]
delimiter
time.sleep(1)
delimiter
python - -version
delimiter
Py_Finalize()
delimiter
1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0
delimiter
w.writerow(row)
delimiter
rfecv.fit(X_train, y_train)
delimiter
df[~((df.A == 0) & (df.B == 2) & (df.C == 6) & (df.D == 0))]
delimiter
[df.loc[list(p)] for p in permutations(age.get_group(21).index)]
delimiter
print(sess.run(Z))
delimiter
label.pack()
delimiter
self.__dict__.update(kwargs)
delimiter
db.close()
delimiter
ssh.close()
delimiter
fatal.setLevel(logging.FATAL)
delimiter
process.stdin.write(data)
delimiter
gtk.main_iteration(block=False)
delimiter
solve(do_something(something))
delimiter
clf = pickle.load(f)
delimiter
weights = np.array([[1, 1, 1], [1, 0, 1], [1, 1, 1]]),
delimiter
a = MyClass()
delimiter
reactor.run()
delimiter
wb = openpyxl.load_workbook(file)
delimiter
df[sheet] = pd.read_csv(csv)
delimiter
df[df.duplicated(keep=False)]
delimiter
pyplot.show()
delimiter
data = json.loads(elevations)
delimiter
deletelist1[:]
delimiter
data.sort(key=keyfunc)
delimiter
array([[1, 0], [1, 2]])
delimiter
x.shape
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_IP)
delimiter
print(im.format, im.size, im.mode)
delimiter
br.set_handle_robots(False)
delimiter
wx.Panel.__init__(self, parent)
delimiter
sys.exit(app.exec_())
delimiter
root.mainloop()
delimiter
model = get_object_or_404(Customer, id=id, user=1)
delimiter
Py_Initialize()
delimiter
ax.xaxis_date()
delimiter
print(f(a))
delimiter
A = np.zeros((6, 6))
delimiter
s.logout()
delimiter
race = models.CharField(choices=RACES, max_length=5)
delimiter
set(range(1, 101)) - s
delimiter
list_one.append(list_two)
delimiter
classroom.py
delimiter
(l[i:i + n] for i in range(0, len(l), n))
delimiter
o = [(l[i], l[i + 1]) for i in range(0, len(l), 2)]
delimiter
rreverse(s[1:]) + s[0]
delimiter
os.waitpid(p.pid, 0)
delimiter
FI.close()
delimiter
session.commit()
delimiter
frame.groupby([pd.DatetimeIndex([x.date() for x in frame.index])]).sum()
delimiter
count_nan = len(df) - df.count()
delimiter
max_validation = lambda x, y, z: x < y < z
delimiter
q.filter(or_(*conditions))
delimiter
query = Session.query(Table).filter(clauses)
delimiter
zip(range(1, 7, 2), range(2, 8, 2))
delimiter
response = urllib.request.urlopen(req)
delimiter
any(np.array_equal(np.array([a, a]), x) for x in my_list)
delimiter
uuid.UUID(value)
delimiter
[1, 2, 2]
delimiter
f = Foo()
delimiter
res.append(lst[i])
delimiter
json.dumps(self.json)
delimiter
time.sleep(0.5)
delimiter
any(len(set(x)) == 1 for x in zip(*arr))
delimiter
struct.pack(new_format, *args)
delimiter
server.set_debuglevel(1)
delimiter
plt.show()
delimiter
[[0], [1], [2], [42], [4]]
delimiter
(u + x) * (a + d + g) + (v + y) * (b + e + h) + (w + z) * (c + f + i)
delimiter
print(cur.fetchall())
delimiter
np.vstack(j).T
delimiter
zcat.wait()
delimiter
time.sleep(0.25)
delimiter
df[df.Phrase.str.len() != 0]
delimiter
f.close()
delimiter
sys.exit(app.exec_())
delimiter
print(my_list)
delimiter
sys.getsizeof(a)
delimiter
f2.close()
delimiter
plt.draw()
delimiter
self.canvas.pack()
delimiter
signal.signal(signal.SIGINT, signal.SIG_IGN)
delimiter
sys.getsizeof(n.__dict__)
delimiter
out.extend(map(str, list(range(r[0], r[-1] + 1))))
delimiter
QtCore.QAbstractItemModel.__init__(self)
delimiter
gtk.main_quit()
delimiter
GL = [list(v) for k, v in it.groupby(sorted(L, key=sorter), key=sorter)]
delimiter
numpy.atleast_2d(x[x[:, (2)] == 1])
delimiter
sum(int(x) for x in s if x.isdecimal())
delimiter
__init__.py
delimiter
plt.xticks(rotation=70)
delimiter
cur.connection.close()
delimiter
test.myfun(test.f)
delimiter
self.assertEqual(r, a)
delimiter
cur.execute(sql, list(values.values()))
delimiter
pygame.display.flip()
delimiter
[prod(x) for i in range(2, len(lst) + 1) for x in combinations(lst, i)]
delimiter
order = models.PositiveIntegerField(default=0)
delimiter
instance.save()
delimiter
rdd.mapPartitions(f).collect()
delimiter
q = Queue.Queue()
delimiter
{b.pop(0): {b.pop(0) for _ in range(1)} for _ in range(1)}
delimiter
a[::-2]
delimiter
test_handler()
delimiter
print(in_nested_list(x, [1, 2]))
delimiter
id = Column(Integer, primary_key=True)
delimiter
root.quit()
delimiter
data[abs(data - np.mean(data)) < m * np.std(data)]
delimiter
pip2 - -version
delimiter
print(A[idx])
delimiter
zip(a, b, c)
delimiter
result.append([list[index][0], list[index + 1][1]])
delimiter
plt.scatter(x, y, c=t)
delimiter
list(Counter(words).values())
delimiter
ax.set_axis_off()
delimiter
xDate = sys.argv[1]
delimiter
caketaste()
delimiter
timedelta(seconds=_diff.total_seconds())
delimiter
ctx.set_font_size(font_size)
delimiter
admin.site.unregister(User)
delimiter
Foo.allocate_ids(max=26740080011040)
delimiter
fig.canvas.draw()
delimiter
max((len(v), k) for k, v in flows.items())
delimiter
set(a).intersection(b)
delimiter
ax.spines[direction].set_visible(True)
delimiter
sys.exit(exit_code)
delimiter
len(self.children) == 0
delimiter
sorted(_, key=lambda x: sum(x))
delimiter
[([x] * i) for i, x in zip(A, B)]
delimiter
plt.figure()
delimiter
sys.path
delimiter
plt.imshow(Z)
delimiter
sliced = [list(islice(it, 0, i)) for i in seclist]
delimiter
sys.exit(0)
delimiter
PyInit_gstreamer()
delimiter
[bar() for i in range(10)]
delimiter
foo(1, 2)
delimiter
app.run(extra_files=extra_files)
delimiter
sys.stdout.flush()
delimiter
t, z, y, x = np.indices(temp.shape)
delimiter
file(filename).read()
delimiter
np.where((abcd <= data2a) & (abcd >= data2b), 1, 0).sum()
delimiter
print(len(letters) > len(no_rep))
delimiter
print([[x for x in a if len(x) == i + 1] for i in range(m)])
delimiter
ax.set_aspect(1)
delimiter
i += 1
delimiter
ax.set_xlim(0, 10)
delimiter
print([A[p][i] for i, p in enumerate(P)])
delimiter
filtered_list = list(filter_list(full_list, excludes))
delimiter
json.JSONEncoder.__init__(self, *args, **kwargs)
delimiter
sys.exit(app.exec_())
delimiter
list_of_lists = [list(elem) for elem in list_of_tuples]
delimiter
s = random.randint(0, 2 ** 10000 - 1)
delimiter
pd.concat(pd.read_html(url), ignore_index=False)
delimiter
urllib.parse.urlencode(a)
delimiter
np.array(__, dtype=float)
delimiter
curses.echo()
delimiter
urllib.parse.urlencode(url_dict, True)
delimiter
conn.close()
delimiter
s1.reset_index(drop=True)
delimiter
f.close()
delimiter
inpaint_mask = cv.CreateImage(cv.GetSize(im), 8, 1)
delimiter
time.sleep(1)
delimiter
dW = masked.sum(axis=1)
delimiter
loop.close()
delimiter
np.where(a[:, (1)] == 2)
delimiter
tokenize.sent_tokenize(p)
delimiter
ordering = {word: i for i, word in enumerate(predefined_list)}
delimiter
colnames = df.columns.tolist()
delimiter
print(f(1))
delimiter
login()
delimiter
keys = set(chain.from_iterable(dicts))
delimiter
plt.show()
delimiter
min(iList, key=lambda i: i.number)
delimiter
tk.Label(self.frame, text=t).grid(row=row, column=1)
delimiter
QtWidgets.QGraphicsScene.mouseMoveEvent(self, event)
delimiter
zip((x.count(item) for item in set(x)), set(x))
delimiter
print(f.read())
delimiter
start_date + relativedelta(months=2)
delimiter
csv_reader = csv.reader(f)
delimiter
pygame.quit()
delimiter
response.close()
delimiter
first, rest = seq[0], seq[1:]
delimiter
root.mainloop()
delimiter
print(repr(f.readline()[:1]))
delimiter
QtCore.QVariant()
delimiter
msg = msg.rstrip()
delimiter
list(map(itemgetter(0), G))
delimiter
results = sorted(list(results_dict.items()), key=lambda x: abs(x[0]))
delimiter
logger.setLevel(logging.DEBUG)
delimiter
[list(islice(b, x)) for x in l]
delimiter
pprint.pprint(row)
delimiter
connect.commit()
delimiter
self.Bind(wx.EVT_KEY_DOWN, self.OnKey)
delimiter
pickle.dump(a, f)
delimiter
items = [[1, 2, 0], [1, 2, 1], [1, 2, 0]]
delimiter
time.sleep(2)
delimiter
pprint(sys.path)
delimiter
retdict = json.loads(content)
delimiter
list(itertools.dropwhile(math.isnan, reversed(r)))[::-1]
delimiter
isinstance(obj, int)
delimiter
print(select([func.count()]).select_from(table))
delimiter
time.sleep(1)
delimiter
a + b
delimiter
ax.set_xlim(0, 25)
delimiter
plt.show()
delimiter
deletex[2]
delimiter
fig = plt.figure()
delimiter
srcList = list(set(srcText.split()))
delimiter
a = b
delimiter
result.setdefault(column, []).append(value)
delimiter
next(x for x in range(10) if x == 7)
delimiter
str(tdo)
delimiter
bisect.bisect_left(l, 4)
delimiter
list(df.T.to_dict().values())
delimiter
clen = ctypes.c_ulonglong(0)
delimiter
signal.signal(signal.SIGTERM, signal_handler)
delimiter
o5.method()
delimiter
self.crawler.start()
delimiter
[np.insert(j, 0, i) for i, j in product(a, np.array((b, c)).T)]
delimiter
df.groupby(df.index)
delimiter
date -= timedelta(days=5)
delimiter
result = [el.text_content() for el in result]
delimiter
selfref_list.append(selfref_list)
delimiter
plt.figure(figsize=(7.15, 5.15))
delimiter
os.path.split(fullpath)
delimiter
celery.control.revoke(uuid, terminate=True)
delimiter
{{42.55 | round}}
delimiter
print(user.username, user.get_full_name(), user.email)
delimiter
cls(*args, **kwargs)
delimiter
[(x ** 2) for x in range(5)]
delimiter
res4 = inner1d(U.transpose(0, 2, 1), V.T)
delimiter
yourThread.daemon = True
delimiter
print(pattern.search(text).group(1))
delimiter
label.pack()
delimiter
plot.show()
delimiter
sys.stdout = sys.__stdout__
delimiter
df.ix[row.name]
delimiter
numpy.array(strings, dtype=float)
delimiter
my_dict[key] += 1
delimiter
writer.writerow(keys)
delimiter
deleteall[max(current - 2, 0):current]
delimiter
value = int(value)
delimiter
print(num)
delimiter
f.read()
delimiter
wb = load_workbook(filename=BytesIO(input_excel.read()))
delimiter
sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))
delimiter
a[[ind]]
delimiter
list(enumerate(reversed(test)))
delimiter
pdb.set_trace()
delimiter
any(c.isalpha() for c in string_1)
delimiter
neurons.append(neuron)
delimiter
all_ranges = list(gen_range(100000000, 600000000, 100))
delimiter
f.close()
delimiter
print([tuple((a, b + 1) for a, b in group) for group in t])
delimiter
event_full_datetime = models.DateTimeField()
delimiter
print(numpy.argmax(a_by_a, axis=1))
delimiter
do_something(my_object)
delimiter
G_ij = K(X_i, Y_j)
delimiter
controller1.py
delimiter
np.dot(a, weights)
delimiter
tar.close()
delimiter
deletea[k]
delimiter
plt.show()
delimiter
script = os.path.abspath(sys.argv[0])
delimiter
print(np.where(mask)[0])
delimiter
zdf2 = bcolz.ctable.fromdataframe(df2)
delimiter
d2 = copy.deepcopy(d)
delimiter
deletesys.argv[1]
delimiter
len([x for x in str_.split() if x in list(dict_1.values())])
delimiter
cur.close()
delimiter
r = urllib.request.urlopen(req)
delimiter
logging.getLogger()
delimiter
media_frame.stack().map(m).unstack()
delimiter
DataFrame.mode()[0]
delimiter
d = dict(l)
delimiter
app.test_request_context().push()
delimiter
np.split(index[sort_idx], np.cumsum(cnt[:-1]))
delimiter
df
delimiter
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
mylist.pop()
delimiter
c = b[index]
delimiter
[do_stuff(a, b) for a, b in itertools.permutations(A, 2)]
delimiter
sys.exit(app.exec_())
delimiter
a = numpy.arange(25).reshape(5, 5)
delimiter
self.figurecanvas.draw()
delimiter
df = pd.read_csv(StringIO(text), parse_dates=[0])
delimiter
followers_df.reset_index()
delimiter
timestamps, elements = zip(*sorted(zip(timestamps, elements)))
delimiter
urls = sys.argv[2:]
delimiter
print(sys.version)
delimiter
set(yourString) & set(badChars)
delimiter
np.arange(10)[::-1]
delimiter
plt.yticks(np.arange(y.min(), y.max(), 0.005))
delimiter
arr = np.empty(dims, dtype=kerneldt)
delimiter
[e for e, g in groupby(sorted(my_list))]
delimiter
heapq.heappush(heap, (-prod, n, n))
delimiter
unittest.main()
delimiter
foo(*values)
delimiter
self.__dict__.update(cls.__dict__)
delimiter
matched[1] += 1
delimiter
bucket.delete()
delimiter
sys.stderr.write(str(prompt))
delimiter
plt.subplots_adjust(bottom=0.2)
delimiter
writer.writerow(item)
delimiter
pdb.Pdb.__init__(self)
delimiter
df.CITY
delimiter
self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
delimiter
foo()
delimiter
print(json.dumps(OrderedDict(table_data)))
delimiter
plt.show()
delimiter
d = {key: value for key, value in zip(keys, values)}
delimiter
fig.clf()
delimiter
id = Column(Integer, primary_key=True)
delimiter
root = tk.Tk()
delimiter
result = op_func(a, b)
delimiter
sns.kdeplot(np.array(data), bw=0.5)
delimiter
sum(delta_list, timedelta()) / len(delta_list)
delimiter
deletedictionary[old_key]
delimiter
plt.show()
delimiter
parser.parse_args(f.read().split(), namespace)
delimiter
Thread(target=run, args=(args.arg1, args.arg2))
delimiter
newList
delimiter
pkt[TCP].payload = send_hdr
delimiter
termios.tcsetattr(fd, termios.TCSAFLUSH, new_settings)
delimiter
threading.Thread.__init__(self)
delimiter
socket.connect((HOST, PORT))
delimiter
myList.index([x for x in myList if x != 0][0])
delimiter
loop.run_forever()
delimiter
print(msg.as_string())
delimiter
lambda partition: target == sum(map(int, partition))
delimiter
classifier.classify(featurized_test_sentence)
delimiter
setattr(self, Properties_Pointers[i], group)
delimiter
sorted(lst, key=lambda x: -x[1])
delimiter
tuples_list = list(tuples2)
delimiter
plt.scatter(list(range(len(y))), y, s=60, c=z, cmap=cm.hot)
delimiter
plt.gca().add_artist(circle)
delimiter
help(uuid.UUID.__init__)
delimiter
fly.set_data([fdata[0][0], fdata[0][-1]], [fdata[1][0], fdata[1][-1]])
delimiter
numbers_float = map(float, line.split())
delimiter
fig.show()
delimiter
pandas.DataFrame(data).groupby(0).mean()
delimiter
self.id = self.get_next_id()
delimiter
_to.update(_from)
delimiter
print(difflib.get_close_matches(target_word, list_of_possibles))
delimiter
[(x + y) for x, y in zip(*([iter(q)] * 2))]
delimiter
do_something()
delimiter
s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
delimiter
custom_API()
delimiter
np.delete(x, indx)
delimiter
QtWidgets.QListView.__init__(self, parent)
delimiter
[(1 if p < 0.5 else 2) for p in classifications]
delimiter
result = map(lambda x: x * P, S)
delimiter
a = a[:]
delimiter
print(os.read(f.fileno(), 50))
delimiter
len(mylist)
delimiter
p.terminate()
delimiter
f.close()
delimiter
abs((10 ** 0.5) ** 2 - 10) < 1e-10
delimiter
vals[idx].tolist()
delimiter
[np.argmin(a) for a in A1]
delimiter
logger.setLevel(logging.WARNING)
delimiter
oname.text
delimiter
stations = OrderedDict((el, idx) for idx, el in enumerate(lines))
delimiter
signal.signal(signal.SIGUSR1, handler)
delimiter
np.sum(np.dot(xdiff, L_inv.T) ** 2, axis=1)
delimiter
plt.subplot(212)
delimiter
my_string.split()[:5]
delimiter
ax.xaxis_date()
delimiter
time.sleep(0.5)
delimiter
fig.autofmt_xdate()
delimiter
MyClass.__init__(a)
delimiter
cursor.execute(sql, data)
delimiter
threading.Thread.__init__(self)
delimiter
thread.start()
delimiter
main()
delimiter
geoms.append(p)
delimiter
np.argsort(x, axis=1)[:, 0:k]
delimiter
threads.setdefault(row[2], []).append(row)
delimiter
array([[11], [12]])
delimiter
plt.pause(1)
delimiter
pd.rolling_mean(data, window=5, center=True)
delimiter
main()
delimiter
[x for x in tokenize(txt)]
delimiter
print(d[key])
delimiter
soup.prettify()
delimiter
df.drop(idx)
delimiter
termios.tcsetattr(fd, termios.TCSADRAIN, new)
delimiter
b = (x ** 2 for x in a)
delimiter
x = x[:50]
delimiter
lst.sort(key=itemgetter(1))
delimiter
5 // 2
delimiter
results[i].append(benchmark(i))
delimiter
f.close()
delimiter
yourlist.append(yourdict.copy())
delimiter
self.socket.connect((server_ip, server_port))
delimiter
threading.Thread(target=listen_to_audio).start()
delimiter
merge(DataFrame(tmp, index=[0]), data)
delimiter
zip(*lst)[0]
delimiter
tick_params(labeltop=True, labelright=True)
delimiter
parser = argparse.ArgumentParser()
delimiter
client.load_system_host_keys()
delimiter
np.vstack([get_col(col) for col in cols]).T
delimiter
time.sleep(0.5)
delimiter
a = np.array([0, 0, 0, 0, 0, 0])
delimiter
bbins = np.bincount(b)
delimiter
sorted(set(val for row in content.values() for val in row))
delimiter
msg.attach(part)
delimiter
xi, yi = np.meshgrid(xi, yi)
delimiter
r = redis.Redis(connection_pool=pool)
delimiter
pl.xlim(0, df2.shape[1])
delimiter
QWidget.__init__(self)
delimiter
plt.show()
delimiter
data = list(datareader)
delimiter
form = UserForm(request.POST, user=request.user)
delimiter
sum(dict(structure).values())
delimiter
driver.set_window_position(0, 0)
delimiter
sheet = book.sheet_by_index(0)
delimiter
np.unpackbits(b)[:n].reshape(shape).view(np.bool)
delimiter
copy.deepcopy()
delimiter
l.sort(key=itemgetter(0))
delimiter
id = Column(Integer, primary_key=True)
delimiter
os.startfile(d)
delimiter
pg.QtGui.QApplication.exec_()
delimiter
f.write(doc.toxml())
delimiter
ax1.yaxis.set_major_locator(matplotlib.ticker.LinearLocator(nticks))
delimiter
plt.show()
delimiter
python - config - -cflags
delimiter
python - config - -ldflags
delimiter
main()
delimiter
br.select_form(nr=0)
delimiter
min_keys = [k for k in d if all(d[m] >= d[k] for m in d)]
delimiter
print(zip(*p))
delimiter
itertools.product(universe, repeat=2)
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
sys.path.append(os.path.basename(os.path.dirname(__file__)))
delimiter
list(zip_longest(*([iter(chain([0], *liPos))] * 2)))
delimiter
plt.figure(1)
delimiter
f.seek(0)
delimiter
df = pd.read_csv(yourdata, dtype=dtype_dic)
delimiter
plt.show()
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
gen.__code__.co_name
delimiter
df.columns = df.iloc[1]
delimiter
sys.stdout.flush()
delimiter
session.add_all([a, b])
delimiter
Foo.__str__ is not object.__str__
delimiter
QtGui.QWidget.__init__(self)
delimiter
app.logger.setLevel(logging.INFO)
delimiter
signal.signal(signal.SIGUSR1, debug)
delimiter
HttpResponseRedirect(url)
delimiter
fig = plt.figure()
delimiter
l = [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1]
delimiter
list(product(*iterables))
delimiter
parser.parse(some_file)
delimiter
print(max(path.nodes, key=lambda item: item.y))
delimiter
requests.get(url, cookies=load_cookies_from_lwp(filename))
delimiter
time.sleep(60)
delimiter
tf.matmul(x, tf.transpose(y))
delimiter
writer = csv.writer(fout)
delimiter
self.someSignal.connect(self.someSlot)
delimiter
a2.ravel()[:] = m.reshape(2, -1).T.tolist()
delimiter
np.where(binplace == 1)
delimiter
pprint.pprint(value)
delimiter
print([list(g[1]) for g in groupby(sorted(l, key=len), len)])
delimiter
instance = form.save(commit=False)
delimiter
fig, ax = plt.subplots()
delimiter
fig, ax = plt.subplots()
delimiter
Books.objects.filter(q)
delimiter
random_number = random.random() * 2 - 1
delimiter
datetime.time(0, 0, 0)
delimiter
sys.path.append(lib_path)
delimiter
print(my_list)
delimiter
ax.set_aspect(1)
delimiter
input.close()
delimiter
p.terminate()
delimiter
print(numpy.linalg.norm(x))
delimiter
plt.close()
delimiter
myfunc(*mylist)
delimiter
fig.show()
delimiter
fig.autofmt_xdate()
delimiter
f = sys.stdin
delimiter
input()
delimiter
Znew = griddata(Xmesh.flatten(), Ymesh.flatten(), Z.flatten(), Xnew, Ynew)
delimiter
signed_angle = atan2(b.y, b.x) - atan2(a.y, a.x)
delimiter
dis.dis(lambda : i)
delimiter
root.mainloop()
delimiter
blobs = BlobInfo.all().fetch(500)
delimiter
first_elements, second_elements = zip(*data)
delimiter
sorted([i for i in lst if i > 0]) + sorted([i for i in lst if i < 0])
delimiter
y = math.cos(1 * math.pi / 180)
delimiter
s = math.sqrt(max(radius * radius - i * i, 0.0))
delimiter
print(urllib.request.urlopen(ipcheck_url).read())
delimiter
c.execute(query)
delimiter
xml_etree = ET.parse(xml_filename, parser=parser)
delimiter
cs.send(c + 1)
delimiter
timestamp.sort(reverse=True)
delimiter
fig = plt.figure()
delimiter
base64.b64encode(stream.getvalue()).decode()
delimiter
out_file.write(indata)
delimiter
print([num for num in a if counts[num] > 1])
delimiter
QtGui.QWidget.__init__(self, parent)
delimiter
[np.where((B == x).sum(axis=1))[0] for x in A]
delimiter
file.write(line)
delimiter
d.update([a, b, c])
delimiter
selected_array = my_array[mask]
delimiter
results = Orchard.objects.filter(**options)
delimiter
plt.show()
delimiter
(v1 == v2).all()
delimiter
self.timer.start(10)
delimiter
reactor.run()
delimiter
[c for c in col_names if all([(f not in c) for f in filter_array])]
delimiter
f.axes[5].set_position([0.95, 0.05, 0.05, 0.4])
delimiter
df2 = df[df.Group.isin(groups)]
delimiter
out.shape
delimiter
clp.CloseClipboard()
delimiter
self.crawler.install()
delimiter
np.count_nonzero(A == B)
delimiter
pipe.communicate()
delimiter
plt.imshow(data.T)
delimiter
ax.plot_wireframe(X, -Y, Z, rstride=1, cstride=1)
delimiter
df.shape[0] - df.dropna().shape[0]
delimiter
str(self.person)
delimiter
fstools.py
delimiter
entry_list = [entry.title.text for entry in feed.entry]
delimiter
args = parser.parse_args()
delimiter
f(*args, **kwargs)
delimiter
ax.set_ylim(bot, top)
delimiter
f = lambda x: 2 * x
delimiter
os.waitpid(cpid)
delimiter
SumLine.extend(ast.literal_eval(x))
delimiter
print(list(Counter(L).items()))
delimiter
x[np.lexsort((x[:, (0)], x[:, (1)]))]
delimiter
ax.set_xlim(x_min, x_max)
delimiter
print(cert.get_issuer().as_text())
delimiter
p.terminate()
delimiter
plt.show()
delimiter
Base.metadata.create_all(engine)
delimiter
root.destroy()
delimiter
self.f(*args, **kwargs)
delimiter
infile.close()
delimiter
self.graph, = self.ax.hexbin(self.xData, self.yData)
delimiter
i += 1
delimiter
array([[0, 0, 1, 1], [0, 1, 1, 0]])
delimiter
result.append(myDict)
delimiter
plt.draw()
delimiter
time.sleep(0.01)
delimiter
sys.stdout.write(out)
delimiter
zip(a[0], a[1])
delimiter
globals().update(test.__dict__)
delimiter
log.start()
delimiter
foo()
delimiter
np.ma.median(y, axis=0).filled(0)
delimiter
dict_of_lists = merge_with(list, *csv.DictReader(open(f)))
delimiter
[0, 1, 0, 2, 1, 1, 1, 0],
delimiter
object.__new__(cls, x)
delimiter
sandboxed()
delimiter
inspect.getargspec(func)
delimiter
np.where(np.in1d(a, b))[0]
delimiter
max(depth(d[k], level + 1) for k in d)
delimiter
result = [_f for _f in map(expensive, mylist) if _f]
delimiter
sys.stdout.flush()
delimiter
results = cursor.fetchall()
delimiter
print(r.cookies)
delimiter
x.append(y)
delimiter
node_count = len(db.nodes)
delimiter
list(itertools.chain(*a))
delimiter
socket.close()
delimiter
estimated_mu, estimated_sigma = stats.norm.fit(logdata)
delimiter
time.sleep(5)
delimiter
created_date = Column(DateTime, default=datetime.datetime.utcnow)
delimiter
options, args = parser.parse_args()
delimiter
f.close()
delimiter
print([(dotted[n][:-1] + (i,)) for s in signs for n, i in enumerate(s)])
delimiter
n, bins, patches = plt.hist(x, histedges_equalN(x, 10), normed=True)
delimiter
signal.signal(signal.SIGINT, signal.SIG_DFL)
delimiter
next(g)
delimiter
repr(self.contained)
delimiter
web.show()
delimiter
hasattr(obj, name) and type(getattr(obj, name)) == types.MethodType
delimiter
time.sleep(1)
delimiter
pool.terminate()
delimiter
time.sleep(self.interval)
delimiter
ftp.close()
delimiter
fig = plt.figure()
delimiter
plt.tight_layout(rect=[0.05, 0.15, 0.95, 0.95])
delimiter
hex(x)[2:]
delimiter
matplotlib.get_backend()
delimiter
plt.draw()
delimiter
unittest.TextTestRunner().run(suite)
delimiter
p = Pool(5)
delimiter
layout.addWidget(self.button)
delimiter
pygame.mixer.init()
delimiter
bytearray(os.urandom(1000000))
delimiter
objs = [MyClass() for i in range(10)]
delimiter
chain.from_iterable(combinations(s, r) for r in range(1, len(s) + 1))
delimiter
wrapper_object.blink()
delimiter
rsa = M2Crypto.RSA.load_pub_key(pk)
delimiter
self.progress.pack()
delimiter
self.output.append(data)
delimiter
lst[0].append(1)
delimiter
print([(k, len(d[k])) for k in sorted(d.keys())])
delimiter
print(x.apply(lambda y: list(filter(np.isfinite, y))))
delimiter
repeated_items = [list(row[1] * row[2]) for row in df.itertuples()]
delimiter
sorted(list(dct.items()), key=lambda p: p[1], reverse=True)
delimiter
os.dup2(cat.stdin.fileno(), sys.stderr.fileno())
delimiter
plt.colorbar()
delimiter
min(data, key=lambda t: t[1])
delimiter
print(tuple([k] + [v for d in L for v in list(d.values())]))
delimiter
f.write(bytes(int(x, 0) for x in L))
delimiter
my_tuple[isinstance(x, str)].append(x)
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
self.window.set_default_size(self.width, self.height)
delimiter
a[len(a)]
delimiter
df[~df.isnull().all(axis=1)]
delimiter
event_box.set_events(gtk.gdk.BUTTON_PRESS_MASK)
delimiter
list2 = [dict2[k] for k in commons]
delimiter
smtpObj.sendmail(sender, receivers, message)
delimiter
f.read()
delimiter
top.mainloop()
delimiter
browser = webdriver.Firefox()
delimiter
tt = t.reshape(-1)
delimiter
stats = df.describe()
delimiter
main()
delimiter
img = Image.open(BytesIO(response.content))
delimiter
[int(elem) for elem in testList]
delimiter
[functools.reduce(dict.__getitem__, keys, d[i]) for i in d]
delimiter
plt.show()
delimiter
datetime.time
delimiter
diags.sum(axis=1)
delimiter
m.groups()[0].strip()
delimiter
input_file.close()
delimiter
plt.show()
delimiter
[myFunc(p, additionalArgument) for p in pages]
delimiter
inspect.ismethod(d.__setitem__)
delimiter
plt.show()
delimiter
a = np.arange(100).reshape(2, 50)
delimiter
d = json.loads(s)
delimiter
x_new = x[np.sum(x, axis=1) > 0.5]
delimiter
results_df = pd.concat(results)
delimiter
sys.exit(1)
delimiter
a, b = divmod(a, 1)
delimiter
p.terminate()
delimiter
doctest.testmod()
delimiter
lists[1].append(url)
delimiter
np.random.shuffle(a)
delimiter
pdb.set_trace()
delimiter
Job.fetch(job_id, connection=conn)
delimiter
HttpResponse(status=500)
delimiter
print(s, len(s))
delimiter
self.SetClientSize((self.bmp.GetWidth(), self.bmp.GetHeight()))
delimiter
foo.wait()
delimiter
plt.show()
delimiter
id = models.CharField(max_length=255, default=create_id)
delimiter
x = np.linspace(0, 1, 20)
delimiter
main()
delimiter
QtGui.QMainWindow.__init__(self)
delimiter
array_proxy()
delimiter
os.kill(int(pid), signal.SIGTERM)
delimiter
print(ET.tostring(dom))
delimiter
main()
delimiter
signal.signal(signal.SIGUSR2, lambda sig, frame: code.interact())
delimiter
f(*args, **kwargs)
delimiter
ax.scatter(X[:, (0)], X[:, (1)], s=s)
delimiter
plt.show()
delimiter
self.a = a
delimiter
[np.bincount(xs, minlength=10) for xs in itertools.combinations(list(range(10)), 2)]
delimiter
numpy.linalg.norm(A - B)
delimiter
plt.subplots_adjust(0, 0, 1, 1, 0, 0)
delimiter
self.driver.close()
delimiter
max(lengths(l))
delimiter
x = {i: set() for i in range(10)}
delimiter
print(line)
delimiter
args[-1] + mySum(*args[:-1])
delimiter
myDict[name]
delimiter
len(s)
delimiter
arr = numpy.array([(base + datetime.timedelta(hours=i)) for i in range(24)])
delimiter
fig = plt.figure(1)
delimiter
df.replace(to_remove, np.nan, inplace=True)
delimiter
data.sort()
delimiter
255, 255, 255
delimiter
ax2.set_xlim(ax1.get_xlim())
delimiter
self.calendar.pack()
delimiter
some_list[:target_len] + [0] * (target_len - len(some_list))
delimiter
ax2.plot(x2, x2, alpha=0)
delimiter
a = str(datetime.now())
delimiter
time.sleep(1)
delimiter
object.__repr__(self)
delimiter
max(len(str1), len(str2))
delimiter
t.start()
delimiter
print(func_name)
delimiter
plt.contour(xi, yi, zi, con_levels, linewidths=1)
delimiter
cv2.circle(cimg, (i[0], i[1]), i[2], (0, 255, 0), 2)
delimiter
df.sort_index(inplace=True)
delimiter
result = map(f, [x, y, z])
delimiter
utc_dt = local_dt.astimezone(pytz.utc)
delimiter
df = pd.concat([df1, df2], ignore_index=True)
delimiter
axcut.set_visible(True)
delimiter
mydriver = webdriver.Firefox()
delimiter
np.random.seed(0)
delimiter
file_out.write(line)
delimiter
json.loads(page_detail_string)
delimiter
sys.__stdin__ = dummyStream()
delimiter
ax.clear()
delimiter
nan in np.array([nan])
delimiter
list1.append(i)
delimiter
self.data.append(data)
delimiter
set(b.items()) ^ set(a.items())
delimiter
print(response.status, response.reason)
delimiter
s.dt.to_pydatetime()
delimiter
dictionary[round(a, 4)]
delimiter
meta.create_all()
delimiter
app.exec_()
delimiter
data[data[data[:, (0)] == 0, 1] == 0]
delimiter
f.close()
delimiter
df2.fillna(0, inplace=True)
delimiter
dill.pickles(f)
delimiter
list(set(a) - set(b))
delimiter
rdd = df.rdd.map(tuple)
delimiter
all([(len(i) == len(set(i))) for i in zipt])
delimiter
stock_vals[stock_name][day_index]
delimiter
myDict = dict(list(element.attributes.items()))
delimiter
appname = get_application_id()
delimiter
cs = m.contourf(x, y, nc_new, numpy.arange(0.0, 1.0, 0.1), cmap=plt.cm.RdBu)
delimiter
np.hstack([R, phase])
delimiter
{{test | tojson | safe}}
delimiter
out = ohc.fit_transform(X)
delimiter
print(repr(a))
delimiter
np.where(np.diff(x) > 0.5)[0] + 1
delimiter
zip(a, b)
delimiter
0j
delimiter
expand = [(a * int(b) if len(b) > 0 else a) for a, b in test]
delimiter
blog_post = models.ForeignKey(BlogPost)
delimiter
x[nonzeros].dot(mat[nonzeros])
delimiter
pygame.init()
delimiter
found = any(word == line.strip() for line in file)
delimiter
A[:, (0)]
delimiter
self.file.close()
delimiter
ContentType.objects.get_for_model(obj)
delimiter
np.bmat([[A, D], [C, B]]).A
delimiter
self.panel.SetSizer(main_sizer)
delimiter
os.chdir(curdir)
delimiter
fig, ax = plt.subplots(1, 1, figsize=(12, 5))
delimiter
array([1, 2])
delimiter
p4in.close()
delimiter
pp.sort(key=lambda p: math.atan2(p[1] - cent[1], p[0] - cent[0]))
delimiter
Py_DECREF(v)
delimiter
l[:] = [(x * 5) for x in l]
delimiter
l1.append([7, 8, 9])
delimiter
min(dictionary.values())
delimiter
[elem for i, elem in enumerate(inputlist) if i not in excluded_indices]
delimiter
Bar.objects.foo_active()
delimiter
df.index + pd.offsets.MonthEnd(0)
delimiter
print(list(locals().keys()))
delimiter
server.quit()
delimiter
plt.xticks(x)
delimiter
list(replaceiniter(range(11), lambda x: x % 2))
delimiter
np.any(a == 5, axis=0)
delimiter
[list(g) for k, g in groupby(a, lambda x: x != 0) if k]
delimiter
cursor.execute(*sql_and_params)
delimiter
session.query(User, User.entries_count(Entry.date > start_date))
delimiter
root.mainloop()
delimiter
df1.groupby(level=0)[cols].apply(find_window)
delimiter
k += 1
delimiter
a.shape
delimiter
plt.show()
delimiter
d = {m.get(key, key): value for key, value in list(d.items())}
delimiter
utc_now = datetime.datetime.utcnow
delimiter
pool = Pool(processes=2)
delimiter
map(dictionary.__delitem__, lst)
delimiter
reduce(dict.get, path, aDict).update(aSecondDict)
delimiter
n * n
delimiter
LOGGER.setLevel(logging.WARNING)
delimiter
self.root.mainloop()
delimiter
cookiejar.set_cookie(cookie)
delimiter
np.power(df, 2)
delimiter
GC.remove_edge(*clique[0:2])
delimiter
a[::-1]
delimiter
random.shuffle(b)
delimiter
plt.show()
delimiter
time.sleep(1)
delimiter
save_as = True
delimiter
sum(map(lambda x, y: x * y, l1, l2))
delimiter
print(thingy.attrib)
delimiter
min(a, key=itemgetter(1))
delimiter
ax = fig.add_subplot(111)
delimiter
vscrollbar.grid(row=0, column=1, sticky=N + S)
delimiter
time.sleep(1)
delimiter
print(np.loadtxt(io.BytesIO(trace.text)))
delimiter
os.nice(20)
delimiter
df = pd.read_csv(filename, skiprows=lines2skip)
delimiter
array([nan + 0j, nan + nanj, nan + nanj, nan + nanj, nan + nanj])
delimiter
dis.dis(f)
delimiter
sys.excepthook = handle_exception
delimiter
f.close()
delimiter
dis.dis(lambda x: x)
delimiter
logging.Handler.close(self)
delimiter
ax.set_yticks(list(range(0, 90, 10)))
delimiter
main()
delimiter
found = re.findall(regex, my_txt)
delimiter
print(f.decorator)
delimiter
df.matches.sum()
delimiter
print(numpy.sum(c * a))
delimiter
plt.show()
delimiter
plt.pcolormesh(X[i - 2:i], Y[i - 2:i], C[i - 2:i])
delimiter
sys.path.insert(0, self.path)
delimiter
random.shuffle(thelist)
delimiter
module1.Relay(1, 1)
delimiter
User.objects.filter(id=self.request.user.id)
delimiter
time.sleep(5)
delimiter
[list(i) for i in set([tuple(sorted(i)) for i in a])]
delimiter
lbl8.grid(row=2, column=0)
delimiter
ao[:, :-1] += ai[:, 1:]
delimiter
fpid.close()
delimiter
f(1, 2)
delimiter
print(sys.path)
delimiter
print(np.allclose(a2, a))
delimiter
sorted(templist, key=int)
delimiter
tt = np.linspace(0, 19, 20)
delimiter
ord(chars[0])
delimiter
func(arg)
delimiter
print(a[:, (1)])
delimiter
(d1.year - d2.year) * 12 + d1.month - d2.month
delimiter
self.children = {}
delimiter
queryset = Model.objects.all()
delimiter
show()
delimiter
input.close()
delimiter
unitary = [linalg.expm(-(1j) * t * h) for t in t_list]
delimiter
plt.draw()
delimiter
user.save()
delimiter
parser = argparse.ArgumentParser()
delimiter
my_func()
delimiter
show()
delimiter
result = bool_indices.apply(lambda x: df.loc[x, col_values].sum())
delimiter
cv2.cv.CreateMat(500, 500, template.dtype)
delimiter
time.mktime(t.timetuple()) + t.microsecond / 1000000.0
delimiter
conn.close()
delimiter
df.loc[lhs, column] = rhs
delimiter
callback(self)
delimiter
plt.clf()
delimiter
response
delimiter
np.vstack((a, a, a))
delimiter
height = img.shape[0]
delimiter
zip(list(range(len(a))), a)
delimiter
os.path.join(root, file)
delimiter
output.close()
delimiter
print(self.__name__)
delimiter
canvas.grid(row=1, column=1, sticky=Tkconstants.NSEW)
delimiter
hosts = sorted(celery.current_app.control.inspect().ping().keys())
delimiter
obj.save()
delimiter
decorator
delimiter
x = [(bah * 2) for bah in buh]
delimiter
self._socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
delimiter
s.connect((ip_addr, port))
delimiter
a.py
delimiter
list(results.values())
delimiter
X_imputed_df = pd.DataFrame(X_imputed, columns=X_train.columns)
delimiter
Counter(A.flat).most_common(1)
delimiter
scores.append(clf.score(X[outer_test], Z[outer_test]))
delimiter
plt.show()
delimiter
jsonFile.seek(0)
delimiter
sorted(lst, key=lambda x: (x < 0, x))
delimiter
lis.append(lambda i=i: i)
delimiter
(get_comments.s(url) | render_template.s()).apply_async()
delimiter
a = numpy.empty([210, 8])
delimiter
communication_set.save()
delimiter
self.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.Popup)
delimiter
words = sorted(wordset)
delimiter
plt.gca().yaxis.set_major_locator(MaxNLocator(nbins=6))
delimiter
pivoted.cumsum() + (pivoted == -1)
delimiter
pd.isnull(np.array([np.nan, 0], dtype=object))
delimiter
C = A * B
delimiter
time.sleep(1)
delimiter
ax = fig.add_subplot(111, frameon=False, xticks=[], yticks=[])
delimiter
pygame.display.quit()
delimiter
file.flush()
delimiter
print(Y.transpose())
delimiter
root.mainloop()
delimiter
self.create(request, *args, **kwargs)
delimiter
type(li)(map(double, li))
delimiter
plt.legend()
delimiter
p = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE)
delimiter
category = forms.ChoiceField(choices=CATEGORIES, required=True)
delimiter
pygame.display.set_mode()
delimiter
arr[arr > 255] = x
delimiter
cursor.execute(sql)
delimiter
test_moduleB.py
delimiter
main.py
delimiter
plt.gca().add_artist(leg2)
delimiter
plt.gca().add_artist(leg4)
delimiter
plt.gca().add_artist(leg6)
delimiter
[1][1][1]
delimiter
x.pattern
delimiter
zip([iter(l)] * 2)
delimiter
len(set(hashlib.sha256(str(i)).hexdigest()[:5] for i in range(0, 2000)))
delimiter
name = models.CharField(max_length=200)
delimiter
print(time.time())
delimiter
Counter(list(c.values()))
delimiter
results = pbex.run()
delimiter
data = json.load(f)
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
ax.set_xlim(0, m.shape[1])
delimiter
numpy.random.rand(count)
delimiter
result = next(x for x in my_list if works(x))
delimiter
ts = pd.Series([2, 1, 2, 1, 5], index=date_index)
delimiter
np.savetxt(s, x)
delimiter
s.close()
delimiter
t = datetime.datetime(2009, 4, 1)
delimiter
ax2.xaxis.set_visible(False)
delimiter
Gtk.main()
delimiter
root.mainloop()
delimiter
img.write(pdf_path)
delimiter
self.entry.focus_set()
delimiter
print(result.groups())
delimiter
worker.send(msg, zmq.NOBLOCK)
delimiter
{{(request.user.username | multiply): 5}}
delimiter
AB = np.matmul(A, B)
delimiter
list(itertools.product(list(range(5)), list(range(5))))
delimiter
rendered_output = template.render(context)
delimiter
my_date = datetime.date.today()
delimiter
a.insert(len(a), 5)
delimiter
data_dict = defaultdict(list)
delimiter
self.stateChanged.connect(self.handleStateChanged)
delimiter
temp = tuple(map(sorted, zip(*alist)))
delimiter
print(x[0], len(list(x[1])))
delimiter
somelist.sort(key=ordering.get)
delimiter
assert text in self.driver.page_source == True
delimiter
isinstance(value, list)
delimiter
population = [a for n, a in zip(pops, alleles) for _ in range(n)]
delimiter
__import__(module)
delimiter
etree.tostring(tree)
delimiter
a[:2, (2)] = 0
delimiter
app.run(debug=True, use_reloader=False)
delimiter
lista = [x for x in db]
delimiter
indices_zero = numpy.arange(len(array))[bindices_zero]
delimiter
[(1.0 * conversions[n] / trials[n]) for n in range(len(trials))]
delimiter
self._dealer = dealer
delimiter
func(*args, **kwargs)
delimiter
shutil.copyfileobj(key, rsObject.stream())
delimiter
tk.Tk.__init__(self, *args, **kwargs)
delimiter
--Commentasfkjaskfj
delimiter
fig, ax = plt.subplots(1, 1)
delimiter
resultqueue.join()
delimiter
np.isnan(a[2]).nonzero()
delimiter
cells = [n for n in B.nodes() if n[0] not in nodes]
delimiter
setattr(obj.a, p, value)
delimiter
add_something(l)
delimiter
plt.show()
delimiter
res = (list(range(s, s + step + 1, step)) for s in range(start, stop, step))
delimiter
app.MainLoop()
delimiter
type(())
delimiter
L.sort()
delimiter
print(contruct.__version__)
delimiter
print(m.group())
delimiter
array([[100, 200], [255, 255]], dtype=uint16)
delimiter
print(json.dumps(parsed, indent=4, sort_keys=True))
delimiter
Av = np.hstack(A)
delimiter
ent7.grid(row=2, column=1)
delimiter
list(zip(*(d[k][n] for k in keys for n in d[k])))
delimiter
MyObject.objects.bulk_create(my_objects)
delimiter
value = models.CharField(max_length=240, db_index=True)
delimiter
np.mean([0, 1, 2])
delimiter
theclass.run()
delimiter
signal.signal(signal.SIGINT, s)
delimiter
u = np.random.random(100)
delimiter
[(key, list(val)) for key, val in itertools.groupby(lst, lambda x: x[0:5])]
delimiter
self.x.pack(side=LEFT)
delimiter
find_majority([-1, -1, 0, 0, 0])
delimiter
print(dom.toxml())
delimiter
sorted(xs, key=len)
delimiter
[func(elem) for elem in lst]
delimiter
ax.add_patch(polA)
delimiter
ax.add_patch(polB)
delimiter
out.close()
delimiter
df.head(5)
delimiter
df.iloc[:, (0)]
delimiter
pylab.show()
delimiter
my_category.category.all()
delimiter
window.unfullscreen()
delimiter
ax.xaxis.set_ticks_position(direction)
delimiter
plt.figure()
delimiter
lxml.html.tostring(root)
delimiter
os.unlink(f.name)
delimiter
excel.Quit()
delimiter
(A + B).min(axis=1)
delimiter
connection.close()
delimiter
task.AsyncResult(task.request.id).state
delimiter
numbers = list(map(int, s.split()))
delimiter
df
delimiter
model.fit_transform(X, y)
delimiter
list(range(0, n + 1, 2))
delimiter
main()
delimiter
time.sleep(1)
delimiter
results.sort(key=lambda x: x[1])
delimiter
listmatrixMap(lambda val, r, c: ((r, c), val), a, indices=True)
delimiter
yaml.dump(self.__dict__)
delimiter
parser = argparse.ArgumentParser()
delimiter
app.run()
delimiter
ax.set_yticklabels(row_labels, minor=False)
delimiter
diff_file.write(difftext)
delimiter
diff(unwrap(phase(hilbert(filtered_data))))
delimiter
data.depth * len(data.getbands())
delimiter
t.start()
delimiter
ntxt.write(rline)
delimiter
server.quit()
delimiter
QtGui.QApplication.sendEvent(clipboard, event)
delimiter
pd.groupby(b, by=[b.index.month, b.index.year])
delimiter
some_file.seek(0)
delimiter
df[~df.index.isin(dropThis)]
delimiter
token.save(force_insert=True)
delimiter
browser.close()
delimiter
strange_sandwich()
delimiter
[lst[indices[i]:indices[i + 1]] for i in range(n)]
delimiter
idx = np.argsort(a[1])
delimiter
MyClass = funkyDecorator(MyClass)
delimiter
pygame.display.flip()
delimiter
self.f.make_a_doo()
delimiter
b = copy.deepcopy(a)
delimiter
df.round()
delimiter
self._rooms = dict()
delimiter
itertools.chain(*zip(*iters))
delimiter
sizer.Add(notebook, 1, wx.EXPAND)
delimiter
list()
delimiter
s = urllib.request.urlopen(form_url)
delimiter
os.getpid()
delimiter
set([4, 5, 6])
delimiter
output.append(acids[0])
delimiter
np.diff(m.tocsc().indptr)
delimiter
yacc.errok()
delimiter
print(locals())
delimiter
print(repr(tokzr_SENT(inp1)))
delimiter
plt.xlim(np.log10(ilim))
delimiter
print(ET.tostring(f))
delimiter
f.write(ip)
delimiter
main()
delimiter
func(*parameters)
delimiter
main()
delimiter
app.run()
delimiter
label.pack()
delimiter
[a for i in items if C]
delimiter
fo.close()
delimiter
plt.show()
delimiter
encodedWindow = base64.b64encode(s.getvalue())
delimiter
session.add(stud)
delimiter
data = json.loads(response.get_data(as_text=True))
delimiter
logger.setLevel(logging.DEBUG)
delimiter
print(item)
delimiter
foo(*params)
delimiter
df.sort_index(inplace=True)
delimiter
logger.setLevel(level)
delimiter
p.start()
delimiter
globals[key] = value
delimiter
df[~df.field.isin(ban_field)]
delimiter
plt.show()
delimiter
QApplication.restoreOverrideCursor()
delimiter
ax2 = fig.add_subplot(1, 2, 2)
delimiter
items.remove(item)
delimiter
db.session.commit()
delimiter
installer.uninstall()
delimiter
plt.show()
delimiter
dict(heapq.nlargest(5, list(names_dict.items()), key=itemgetter(1)))
delimiter
arr[idx[:, (0)], idx[:, (1)]]
delimiter
df.apply(lambda x: (x - np.mean(x)) / (np.max(x) - np.min(x)))
delimiter
main()
delimiter
self.data[column].add(row)
delimiter
df.isnull().sum()
delimiter
GL.glOrtho(-1.0, 1.0, -1.0, 1.0, -1.0, 1.0)
delimiter
service = __create_service()
delimiter
widget.show()
delimiter
print(A.T)
delimiter
b.swapaxes(0, -1)
delimiter
stream.Close()
delimiter
escaped = re.escape(a_string)
delimiter
C.objects.create(a=a1, b=b)
delimiter
inputElement.submit()
delimiter
os.unlink(tmpfile_name)
delimiter
sorted_files = sorted(all_files, key=os.path.getsize)
delimiter
print(G.nodes())
delimiter
S = [5, 5]
delimiter
data = re.findall(pattern, line)
delimiter
root.mainloop()
delimiter
parser = etree.XMLParser(remove_blank_text=True, strip_cdata=False)
delimiter
datetime.datetime.fromtimestamp(0) + datetime.timedelta(seconds=2047570047)
delimiter
ax = fig.add_subplot(111)
delimiter
print(df)
delimiter
self.filelist.append(zinfo)
delimiter
mlab.axes()
delimiter
gtk.main()
delimiter
self.setCentralWidget(self.button)
delimiter
type(a)
delimiter
xs = dict((i, []) for i in range(2))
delimiter
newprefix = prefix[:]
delimiter
lstbox.grid(column=0, row=0, columnspan=2)
delimiter
map(lambda *x: sum(x), list(range(10)), list(range(10, 0, -1)), list(range(0, 20, 2)))
delimiter
wx.Button.__init__(self, *a, **k)
delimiter
matrix = np.random.randint(2, size=(row, col))
delimiter
development.py
delimiter
p.wait()
delimiter
low_bit_list = [(byte & 1) for byte in bytearray(fh.read())]
delimiter
rev_sorted = sorted(paired, reverse=True, key=lambda x: x[1])
delimiter
f.write(line)
delimiter
pool.close()
delimiter
ax = fig.add_subplot(111)
delimiter
sum(map(doSomething, originalList), [])
delimiter
result.append(func(e))
delimiter
self.Bind(wx.EVT_BUTTON, self.OnClick, b)
delimiter
exit(0)
delimiter
[False, False, False, False, False],
delimiter
queue = deque([])
delimiter
tk.Tk.__init__(self, *args, **kwargs)
delimiter
__init__.py
delimiter
self.buttonStart.clicked.connect(self.worker.run)
delimiter
Base.metadata.create_all(bind=db.engine)
delimiter
foo(n - 1) + [1]
delimiter
connection.start()
delimiter
webdriver.ActionChains(driver).move_to_element(el).click(el).perform()
delimiter
app.run()
delimiter
m1 = np.zeros((50, 50))
delimiter
driver.quit()
delimiter
year = datetime.datetime.today().year
delimiter
f.writelines(file_lines)
delimiter
np.where(self == value)
delimiter
root.mainloop()
delimiter
session.commit()
delimiter
y[0] = 0
delimiter
print(response.read())
delimiter
time.sleep(10)
delimiter
t0 = math.pow(math.tan(phi1), 2)
delimiter
searchfile.close()
delimiter
[add_number(xi) for xi in my_list]
delimiter
ax.add_line(line_2)
delimiter
sys.path
delimiter
plt.gca().add_patch(rect)
delimiter
f.close()
delimiter
A, = np.array(M.T)
delimiter
sys.path.pop(0)
delimiter
stream = sys.argv[1:] and open(sys.argv[1]) or sys.stdin
delimiter
int(bin(n)[:1:-1], 2)
delimiter
doc = etree.parse(url)
delimiter
optimize.fmin(func, x0=[y_estimate, z_estimate], args=data)
delimiter
elm = driver.find_element_by_xpath(expression)
delimiter
result = (x.sum() ** 2 - x.dot(x)) / 2
delimiter
assert diff_month(datetime(2010, 10, 1), datetime(2009, 8, 1)) == 14
delimiter
session.query(Workflow).get(id)
delimiter
filtered_output.write(line)
delimiter
psutil.cpu_times()
delimiter
msglist.append(hextotal[start:start + 4096])
delimiter
data.write(c + n)
delimiter
b1.insert(END, item)
delimiter
x.append((i, j))
delimiter
dict(zip(fields, row))
delimiter
True
delimiter
test[:, ([0])]
delimiter
y = np.array([-1, 1, 1, 1, -1, 1])
delimiter
controller2.py
delimiter
controllerapi.py
delimiter
utilities.py
delimiter
extfoo.py
delimiter
array = np.ones((n, n))
delimiter
words = {line.strip() for line in file_a}
delimiter
Cmd.cmd.__func__()
delimiter
Base.metadata.create_all(engine)
delimiter
data = pd.concat([data, stock_data], axis=1)
delimiter
self.window.fullscreen()
delimiter
data = cursor.fetchone()[0]
delimiter
math.degrees(math.atan(1.18))
delimiter
Category.objects.get(pk=2).get_descendants(include_self=True)
delimiter
client.close()
delimiter
self.root.mainloop()
delimiter
cv.SetCaptureProperty(video2, cv.CV_CAP_PROP_FRAME_WIDTH, 800)
delimiter
print(open(my_module.__file__).read())
delimiter
L.pop(i)
delimiter
self.image.show()
delimiter
text = Tkinter.Text()
delimiter
fin.close()
delimiter
df.loc[g.groups[1]]
delimiter
[(x[0:index] + x[index + 1:]) for x in L]
delimiter
s.groupby(s.index).first()
delimiter
[x for x in seq if not (x in seen or seen_add(x))]
delimiter
dt.replace(microsecond=int(parts[1]))
delimiter
plt.gca().add_artist(mynewline)
delimiter
sys.maxunicode
delimiter
new_list = [foo for foo in foos if foo.location == 2]
delimiter
fig, ax = plt.subplots(figsize=(8, 8))
delimiter
f.seek(0, 0)
delimiter
dict_of_lists[key].append(val)
delimiter
[next(generator) for _ in range(n)]
delimiter
ax.set_xticks(np.linspace(0, 2 * np.pi, 5))
delimiter
ax1.xaxis.set_major_locator(xloc)
delimiter
x.append(sublist[0])
delimiter
L4 = list(item for item in L1 if item not in unwanted)
delimiter
time.sleep(duration)
delimiter
foo.module_method()
delimiter
os.path.normpath(path1) in (os.path.normpath(p) for p in list_of_paths)
delimiter
list(chain.from_iterable(zip(a, reversed(a))))[:len(a)]
delimiter
np.finfo(np.float).eps
delimiter
self.finish()
delimiter
arr[(arr[:, (0)] >= xmin) & (arr[:, (0)] <= xmax)]
delimiter
Thaidump(text)
delimiter
plt.show()
delimiter
a[0] = np.nan
delimiter
data = [(b[1], p, b[0], b[2]) for p, b in list(rays_starters.items())]
delimiter
is_main_user = models.BooleanField(default=False)
delimiter
plt.show()
delimiter
image.show()
delimiter
print(term.move(term.height - 1, 0))
delimiter
a[i1, i2, i]
delimiter
msvcrt.get_osfhandle(a.fileno())
delimiter
pd.Series(np.nanmean(val.reshape(-1, k), axis=1))
delimiter
msg.send()
delimiter
os.makedirs(final_path)
delimiter
time.sleep(0.01)
delimiter
math.factorial(n)
delimiter
[(i - set.union(*[j for j in allsets if j != i])) for i in allsets]
delimiter
text.pack()
delimiter
dict((k.lower(), v) for k, v in d.items())
delimiter
df.reset_index(inplace=True)
delimiter
s.groupby(idx).mean()
delimiter
module.myif.__init__(self)
delimiter
cur.execute(query, parameters)
delimiter
set(tuple1).issubset(tuple2)
delimiter
sum(itervalues(d))
delimiter
instance = YourModel(name=value, image=self.get_image_file())
delimiter
value = np.ctypeslib.as_array(value).tolist()
delimiter
r.json()
delimiter
fifth_period_slope = np.diff(y[::5]) / np.diff(x[::5])
delimiter
tree = scipy.spatial.cKDTree(array_of_coordinates)
delimiter
abs(a - b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)
delimiter
dict(d2, **d1)
delimiter
df2 = pd.DataFrame(index=df1.index.copy())
delimiter
image = Image.open(file)
delimiter
df = df[df.line_race != 0]
delimiter
np.unravel_index(np.ravel_multi_index((10, 1, 2), arr1.shape), arr2.shape)
delimiter
time.sleep(10)
delimiter
all(not element for element in data)
delimiter
min([s for s in lst if isinstance(s, str)])
delimiter
list_of_pixels = list(im.getdata())
delimiter
root = tk.Tk()
delimiter
id = Column(Integer, primary_key=True)
delimiter
plt.show()
delimiter
arr = np.array(arr_ip, dtype=dtyp)
delimiter
[[[1]][[2]]]
delimiter
logger.setLevel(logging.DEBUG)
delimiter
sys.exit(app.exec_())
delimiter
df.sum()
delimiter
signal.signal(signal.SIGINT, handler)
delimiter
a = np.empty((15,))
delimiter
mymodel.objects.filter(pk=a[i]).update(attr=i)
delimiter
[i for i, v in enumerate(a) if v in b_set]
delimiter
print(name.title())
delimiter
df_both.swaplevel(0, 1).sort_index().swaplevel(0, 1)
delimiter
x = list(y)
delimiter
self.pot.temperatureRaisedSignal.connect(self.temperatureWarning)
delimiter
plt.show()
delimiter
{{post.text | markdown}}
delimiter
self.user.username
delimiter
self.get_solr_results()
delimiter
df
delimiter
widget.setWindowFlags(QtCore.Qt.Widget)
delimiter
print(et.tostring(tree))
delimiter
plt.show()
delimiter
button.show()
delimiter
a2.append(float(s))
delimiter
[0][0][2]
delimiter
repo.push()
delimiter
lexobj.writetab(lextab, outputdir)
delimiter
client = paramiko.SSHClient()
delimiter
(lst[i] for i in indices)
delimiter
resolve(request.path).app_name
delimiter
b[a] = 10
delimiter
f.close()
delimiter
len([x for x in a_list if x[0] == 1]) > 0
delimiter
fig.subplots_adjust(bottom=0.2)
delimiter
ax2.set_xticklabels(new_labels)
delimiter
plt.imshow(Z)
delimiter
datetime.utcfromtimestamp(timestamp1)
delimiter
plt.show()
delimiter
args = parser.parse_args(sys.argv[1:])
delimiter
(lambda : 1) == (lambda : 1)
delimiter
g = nx.Graph()
delimiter
foo.x
delimiter
print(sum(i * i for i in l))
delimiter
print(max(b - a for a, b in pairwise(values)))
delimiter
plt.legend()
delimiter
w.show_all()
delimiter
pcap_lookupnet(dev, ctypes.byref(mask), ctypes.byref(net), errbuf)
delimiter
server.serve_forever()
delimiter
setattr(cls, attr_name, prop)
delimiter
list(nx.weakly_connected_component_subgraphs(G))
delimiter
ax0b.plot(x, y)
delimiter
ax0c.plot(x, y)
delimiter
mysignal.connect_via(app)(print_howdy)
delimiter
fig = plt.figure()
delimiter
app.run()
delimiter
root = Tk()
delimiter
logging.Handler.__init__(self)
delimiter
serializer = NewModelSerializer(data=request.data, context=context)
delimiter
win.show_all()
delimiter
zip(*elements)
delimiter
any(1 in d for d in lod)
delimiter
urlparse(request.url).query
delimiter
{(1, 1): something}
delimiter
post_save.connect(create_user_profile, sender=User)
delimiter
process.kill()
delimiter
print(y.shape)
delimiter
raise TypeError(node)
delimiter
func(*args, **kw)
delimiter
print(aiff_file.nframes / float(aiff_file.samplerate))
delimiter
m.toarray()
delimiter
d.setdefault(y, []).append(x)
delimiter
pd.DataFrame({n: c.apply(lambda x: x.get(n, 0)) for n in wordlist})
delimiter
session = requests.Session()
delimiter
fid.close()
delimiter
[0] * A + [1] * B
delimiter
binascii.hexlify(bytearray(array_alpha))
delimiter
wavf.write(out_wav, fs, out_data)
delimiter
print(p.stdout.read())
delimiter
[(car.pop(0) if item else a.pop(0)) for item in lyst]
delimiter
dic[g][y] = df[(df[Gender] == g) & (df[Year] == y)]
delimiter
validate(yaml.load(bad_instance), yaml.load(schema))
delimiter
new_list = [v for v in a if v not in b]
delimiter
dict_out = {unq[i]: iterID for i, iterID in enumerate(indices)}
delimiter
app.start()
delimiter
form = PostForm(obj=post)
delimiter
sizer.Add(self.canvas, 1, wx.EXPAND)
delimiter
np.put(out, np.ravel_multi_index(idx.T, dims), vals)
delimiter
cb = plt.colorbar(sc, ax=ax1, aspect=10, format=Myfmt())
delimiter
gs1.update(wspace=0.025, hspace=0.05)
delimiter
yylex()
delimiter
admin.site.register(User, UserProfileAdmin)
delimiter
row = cursor.fetchmany(10)
delimiter
root.mainloop()
delimiter
sorted(a) == sorted(b)
delimiter
math.floor(math.log(n, 2)) + 1
delimiter
f.write(sio.getvalue())
delimiter
num_fatals += 1
delimiter
server.run()
delimiter
func = yad(list_of_decorators)(func)
delimiter
blogpost.tags[:] = new_tags
delimiter
writer.writerow(row)
delimiter
isinstance(amodule, __builtins__.__class__)
delimiter
HTMLParser.HTMLParser.__init__(self)
delimiter
ax = fig.add_subplot(111, polar=True)
delimiter
scatter = ax.scatter(np.random.randn(100), np.random.randn(100))
delimiter
QtGui.QFrame.__init__(self, parent)
delimiter
print(m.group(1).rstrip())
delimiter
one, four, ten = [lst[i] for i in [1, 4, 10]]
delimiter
gtk.main()
delimiter
cv2.__version__
delimiter
qs.filter(map(operators.or_, [Q(k=v) for k, v in list(request.GET.items())]))
delimiter
L[idx].append(item)
delimiter
cashflow[-1] += 100
delimiter
ax.get_yaxis().set_minor_locator(mpl.ticker.AutoMinorLocator())
delimiter
runner.run()
delimiter
np.mean([0, 0, 1])
delimiter
file.seek(0)
delimiter
urllib.request.urlretrieve(url, filename)
delimiter
print((word, count))
delimiter
s1.reset_index()
delimiter
b = a[:]
delimiter
list(unique_everseen(lst, key=len))
delimiter
isinstance(obj, collections.Callable)
delimiter
df.columns = new_cols
delimiter
time.sleep(1)
delimiter
time.sleep(1000)
delimiter
self.send_response(200)
delimiter
oath_access_token = utils.get_application_access_token(app_id, app_secret)
delimiter
root.columnconfigure((0, 2), weight=1)
delimiter
element = max(myset)
delimiter
[x for x in myTuple if foo(1, x, 4)]
delimiter
[(elem + func()) for elem in myList]
delimiter
d[k].append(v)
delimiter
results = sorted(list(results_dict.items()), key=lambda x: x[1])
delimiter
db.session.add(post)
delimiter
self.y = [self.x for i in range(1)]
delimiter
ax.plot_surface(X, Y, Z)
delimiter
nodes = [node() for _ in range(100)]
delimiter
popt, pcov = curve_fit(lambda x, a: func(x, a, b), x1, x2)
delimiter
User.objects.get(id=uid)
delimiter
plt.gcf().subplots_adjust(hspace=0.5, wspace=0.5)
delimiter
plt.show()
delimiter
msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)
delimiter
COMPRESS_ENABLED = True
delimiter
cmp(A[adiff], b[bdiff])
delimiter
network.draw()
delimiter
np.sqrt((w * q * q).sum())
delimiter
np.allclose(np.dot(A, B), A * sparse_B)
delimiter
threading.Thread.__init__(self)
delimiter
[[df.columns[j] for i, j in grp] for k, grp in groups]
delimiter
foo(*x, **y)
delimiter
time.sleep(1)
delimiter
session.commit()
delimiter
gs1 = gridspec.GridSpec(4, 4)
delimiter
FOUT.close()
delimiter
root.mainloop()
delimiter
ax1 = fig.add_subplot(111)
delimiter
ax.minorticks_off()
delimiter
df1.index & df2.index
delimiter
print(x.apply(lambda y: [a for a in y if pd.notnull(a)]))
delimiter
[(sum([(i * i) for i in vec]) ** 0.5) for vec in x]
delimiter
proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, env=initial)
delimiter
(value for key, value in sorted(dictobj.items()))
delimiter
isodd = lambda x: x % 2 != 0
delimiter
list.__setitem__(self, index, value)
delimiter
d.sort(key=itemgetter(0))
delimiter
pd.DataFrame({n: c.apply(lambda x: x[n]) for n in wordlist})
delimiter
n = n + 1 / 10 ** (len(repr(n)) - 2)
delimiter
hist = History.objects.get(pk=1)
delimiter
[x for x, y in groupby(L) if sum(1 for i in y) < 2]
delimiter
b[1:] = b[1:] - b[:-1]
delimiter
driver = webdriver.Chrome(chrome_options=opts)
delimiter
df
delimiter
ax.xaxis.set_visible(False)
delimiter
np.delete(x, 1, 1)
delimiter
conn.close()
delimiter
pylab.show()
delimiter
driver.get(url)
delimiter
a = np.hstack((a, b))
delimiter
d = {k: list(v) for k, v in groupby(tags, key=lambda x: x[0])}
delimiter
-tox
delimiter
fsizer.Add(self.filtr, 1, wx.EXPAND)
delimiter
tfile.seek(0)
delimiter
print(chr(i))
delimiter
li2 = list(itertools.chain(*li))
delimiter
parser = argparse.ArgumentParser()
delimiter
avg_rating = db.FloatProperty()
delimiter
os.dup2(w, sys.stderr.fileno())
delimiter
[numpy.all(-2), numpy.all(-1), numpy.all(0), numpy.all(1), numpy.all(2)]
delimiter
date_parser = pd.datetools.to_datetime()
delimiter
sorted(population, key=keyfun)
delimiter
td_series.astype(pd.Timedelta).apply(lambda l: l.days)
delimiter
GPIO.output(4, True)
delimiter
formset.save_m2m()
delimiter
soup = BeautifulSoup(page)
delimiter
pattern = re.compile(re.escape(motif))
delimiter
id(df._data.blocks[0].values)
delimiter
writer.writerow(row)
delimiter
df.loc[df.isin([1, 2]).any(1)]
delimiter
os.path.join(base_path, relative_path)
delimiter
array[mask] = 255
delimiter
sftp.close()
delimiter
print(temp_df.apply(lambda x: x - temp_arr[x.index], axis=1))
delimiter
[k for k, v in list(d1.items()) if v == m][0]
delimiter
cmds.ls(sl=1, fl=1)
delimiter
pygame.draw.circle(surf2, (200, 0, 0, 100), (100, 100), 100)
delimiter
writer = csv.writer(f)
delimiter
exit()
delimiter
ax1 = fig.add_subplot(111)
delimiter
s = s[117:]
delimiter
b.extend(map(ord, s))
delimiter
text = nltk.Text(tokens)
delimiter
run()
delimiter
subprocess.call([PLAYERPATH, FILEPATH])
delimiter
yaml.add_representer(OrderedDict, represent_ordereddict)
delimiter
ax.imshow(im)
delimiter
[(float(p[1] + p[2]) / 2) for p in PlayerList]
delimiter
main()
delimiter
print(br.response().read())
delimiter
self.create(request, *args, **kwargs)
delimiter
all(starmap(lt, zip(a, b)))
delimiter
signal.pause()
delimiter
y = list(x)
delimiter
print([(y - x) for x, y in l])
delimiter
df = df[colnames]
delimiter
results = [do_smth(slurp_file(f)) for f in filenames]
delimiter
print((k, v))
delimiter
plt.colorbar(pc, cax=axes)
delimiter
math.isnan(a)
delimiter
df.iloc[sort_slice]
delimiter
Base.metadata.create_all(engine, checkfirst=True)
delimiter
plt.plot([0, 1])
delimiter
sys.stdout.close()
delimiter
print(zip(*(zip(itertools.repeat(ls[0]), ls[1:]) for ls in data)))
delimiter
ax.scatter(xs, ys, zs)
delimiter
self.response.out.write(xml)
delimiter
print(list(d.keys()))
delimiter
formset.save()
delimiter
neuron.draw()
delimiter
new_im_vec = im.swapaxes(0, 2).swapaxes(1, 2).flatten()
delimiter
self.textEdit.setPlainText(mytext)
delimiter
image = Image.open(io.BytesIO(bytes))
delimiter
df.rdd.map(lambda r: r.zip_code).collect()
delimiter
server.quit()
delimiter
time.sleep(1)
delimiter
tf.div(x, y)
delimiter
print([data[id == i].max() for i, _ in groupby(id)])
delimiter
fh.close()
delimiter
sys.path.append(path)
delimiter
df.iloc[:, 1:]
delimiter
f.write(line)
delimiter
a.sort(key=len)
delimiter
soup = BeautifulSoup(data)
delimiter
time = datetime.strptime(time, DATETIME_FORMAT)
delimiter
self.ax.figure.canvas.draw()
delimiter
f.close()
delimiter
window.add(vbox)
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_IP)
delimiter
plt.pause(0.001)
delimiter
dict2 = {key: value for key, value in list(dict1.items()) if key in required_fields}
delimiter
func(*args, **kwargs)
delimiter
df.comments.dropna()
delimiter
img = f.read()
delimiter
groups.sortlevel([0, 2], sort_remaining=False)
delimiter
pool = Pool(processes=2)
delimiter
warnings.resetwarnings()
delimiter
imshow(skeleton, cmap=cm.Greys_r)
delimiter
q = Post.query.options(db.joinedload(Post.tags)).all()
delimiter
yacc.errok()
delimiter
float(sum(lst[len(lst) / 2 - 1:len(lst) / 2 + 1])) / 2.0
delimiter
s[s.index.dayofweek < 5]
delimiter
df.applymap(lambda x: (0, 0) if x is np.nan else x)
delimiter
self.mthread.start()
delimiter
print(zip(*lists))
delimiter
browser.get(url)
delimiter
print(soup.html.string)
delimiter
cursor = conn.cursor()
delimiter
timestamp = (aware - datetime(1970, 1, 1, tzinfo=pytz.utc)).total_seconds()
delimiter
plt.tight_layout()
delimiter
time.sleep(1)
delimiter
eyear1.grid(row=1, column=1)
delimiter
layout.removeWidget(self.widget_name)
delimiter
mc.__dict__
delimiter
draw = ImageDraw.Draw(im)
delimiter
ax.patch.set_alpha(0.5)
delimiter
self.__getattribute__(name)
delimiter
df
delimiter
df2
delimiter
plt.figure()
delimiter
print(list(words))
delimiter
[1][2][0]
delimiter
plt.show()
delimiter
a = numpy.array(a)
delimiter
time_t = time.mktime(my_date.timetuple())
delimiter
pylab.show()
delimiter
bin(int(my_hexdata, scale))[2:].zfill(num_of_bits)
delimiter
print(repr(data))
delimiter
s = chr(i)
delimiter
plt.ylim((-5, 5))
delimiter
random_day = date.fromordinal(random.randint(start_date, end_date))
delimiter
func(*args, **kwargs)
delimiter
f()
delimiter
locale.setlocale(locale.LC_ALL, lang)
delimiter
(counts == 1).all(axis=1)
delimiter
fig.autofmt_xdate()
delimiter
df = pd.DataFrame.from_dict(data)
delimiter
f()
delimiter
plt.show()
delimiter
ax.set_ylim(0, m.shape[0])
delimiter
a.shape
delimiter
session.add(inst)
delimiter
Representative.objects.create(**dict(zip(fields, row)))
delimiter
turtle.forward(100)
delimiter
a.tolist()
delimiter
self.sprockets.add(spr)
delimiter
print(ord(s[0]))
delimiter
data.get(num) or data[min(list(data.keys()), key=lambda k: abs(k - num))]
delimiter
model.fit(X, y)
delimiter
table.cols.key.createIndex()
delimiter
p.terminate()
delimiter
print(char, char.isalpha())
delimiter
printRecurrence()
delimiter
ax.axis((x1, x2, y1 - 1, y2 + 1))
delimiter
square(double(Maybe(5)))
delimiter
driver = webdriver.Firefox(firefox_binary=binary)
delimiter
ax.yaxis.set_major_formatter(formatter)
delimiter
dict(enumerate(grouper(numbers), 1))
delimiter
x = [[] for i in range(4)]
delimiter
f = open(fd, closefd=True)
delimiter
bar.name
delimiter
[id(v) for v in list(d.values())]
delimiter
problems
delimiter
[1][1][2]
delimiter
[0][1][1]
delimiter
mydict[index] += 1
delimiter
moobar()
delimiter
print(json.dumps(data, indent=4))
delimiter
df[g.cumcount() == n - 1]
delimiter
dict((k, dict(v)) for k, v in list(r.items()))
delimiter
plt.show()
delimiter
[word for words in lst for word in words.split()]
delimiter
ax.set_rlim([0, 5])
delimiter
session.add(feed)
delimiter
User.name.property.columns[0].type.length
delimiter
r = requests.get(url, params=payload_str)
delimiter
i += 1
delimiter
list(filter(my_filter, my_iterable))
delimiter
image.save(savepath)
delimiter
print(pd.concat([df, pd.DataFrame(D, index=df.index)], axis=1))
delimiter
np.random.rand(5) < 0.8
delimiter
a.tolist()
delimiter
hash = hashlittle(hashstr, 0)
delimiter
chain.apply_async()
delimiter
fd.close()
delimiter
print(f.getvalue())
delimiter
t.start()
delimiter
ent5.grid(row=4, column=1)
delimiter
data = {}
delimiter
1.0 - scipy.stats.hypergeom.pmf(0, N, M, Q)
delimiter
print(r.json())
delimiter
[(i, mylist.count(i)) for i in set(mylist)]
delimiter
__init__.py
delimiter
print(func())
delimiter
lst[:] = (v for v in lst if pred(v))
delimiter
time.sleep(0.5)
delimiter
x = list(itertools.islice(list(d.items()), 0, 4))
delimiter
proc.stdout.close()
delimiter
unittest.main()
delimiter
image[(mask[:] == 0), ...] = chex[(mask[:] == 0), ...]
delimiter
wr.writerow(list1)
delimiter
[subword for word in list for subword in word.split()]
delimiter
self.thisptr.myBMethod(dereference(a.thisptr), getAMethod())
delimiter
data_line = (data_line[i] for i in good_cols)
delimiter
m.group(1)
delimiter
n = np.clip(n, minN, maxN)
delimiter
ax.set_xticklabels(column_labels, minor=False)
delimiter
gp1 = [2, 6, 9]
delimiter
spherical_dist(locations_1[0], locations_2[0])
delimiter
raise NotImplementedError
delimiter
f2.write(lines[i + 1])
delimiter
plt.scatter(_x, _y, marker=_s, c=c)
delimiter
L[1][:]
delimiter
inset.xaxis.set_tick_params(labelsize=INSET_TICK_FONTSIZE)
delimiter
tuple(x + y for x, y in zip(xs, ys))
delimiter
(value[i:i + n] for i in range(0, len(value), n))
delimiter
[i for v, i in sorted((v, i) for i, v in enumerate(x))]
delimiter
ws = base.add_sheet(k.upper())
delimiter
mycanvas.pack(fill=BOTH, expand=YES)
delimiter
mylist.remove(min(mylist))
delimiter
img.size
delimiter
np.broadcast(x, y, z).shape
delimiter
cols_to_use = df2.columns - df.columns
delimiter
find_majority([1, 1, -1, -1, 0])
delimiter
[ord(uc) for uc in udata]
delimiter
plt.legend(handles, labels)
delimiter
twitterDataFile.close()
delimiter
self.panel.SetSizer(sizer)
delimiter
np.concatenate([a[:k] for k in x])
delimiter
time_list[np.arange(5, 7)]
delimiter
lst.append(4)
delimiter
image_data_blue = image_data[:, :, (2)]
delimiter
b = a.copy()
delimiter
print(line)
delimiter
pprint(a)
delimiter
get_proc_name()
delimiter
l = list(map(lambda x: f(indices=x), itertools.product(x, y, z)))
delimiter
print(checktype(i))
delimiter
(x for x in full_list if x not in s)
delimiter
sorted(l, key=lambda x_y: (-x_y[1], x_y[0]))
delimiter
ax.set_ylim(0, 5)
delimiter
answer[pk].append({sk: L[i][1]})
delimiter
row = dict(zip(list(row.keys()), row))
delimiter
[2, 0, 1, 0, 1, 0]
delimiter
index_list.append(last_index)
delimiter
csv_file.writerows(mylist)
delimiter
dec_num = int(oct_string, 8)
delimiter
self._reverse_mocks()
delimiter
self.Bind(wx.EVT_RIGHT_UP, self.OnExit)
delimiter
module_name.__file__
delimiter
np.array(avgDists).argsort()[::-1][:n]
delimiter
sys.stdout.write(line)
delimiter
fig = plt.figure()
delimiter
name_in_module()
delimiter
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
jmag = np.array(jmah)
delimiter
merged_dict = {k: [d.get(k, np.nan) for d in dicts] for k in keys}
delimiter
Gtk.main()
delimiter
self.ax.clear()
delimiter
hxs = HtmlXPathSelector(response)
delimiter
{k: (D[k] - v) for v, k in enumerate(albums_today)}
delimiter
itertools.combinations()
delimiter
max((len(v), v, k) for k, v in flows.items())[1:]
delimiter
tz.fromutc(utc_time)
delimiter
transaction.commit()
delimiter
result.append(message)
delimiter
fig, ax = plt.subplots()
delimiter
print(hex_to_datetime(s), dt)
delimiter
array[i:i + size] + array[:max(0, i + size - len(array))]
delimiter
fcntl.flock(g, fcntl.LOCK_EX)
delimiter
h.encode()
delimiter
t = threading.Thread(target=get_url, args=(q, u))
delimiter
self.send_response(200)
delimiter
data = line.split()
delimiter
print(2 * math.asin(1))
delimiter
letter_count = dict.fromkeys(string.ascii_lowercase, 0)
delimiter
pak.show2()
delimiter
value = a_lower[key.lower()]
delimiter
digits = int(math.log10(n)) + 1
delimiter
signal.signal(signal.SIGINT, signal.SIG_DFL)
delimiter
os.chdir(directory)
delimiter
np.repeat(arr, rep.flat).reshape(2, -1)
delimiter
data = {foo: foo_value, bar: bar_value}
delimiter
[alist[i:i + sublen] for i in range(0, len(alist), sublen)]
delimiter
self.name = name
delimiter
print(frame.f_lineno)
delimiter
dtt = d.timetuple()
delimiter
sys.exit(1)
delimiter
point.x, point.y
delimiter
obj = MyModel.objects.create(val=1)
delimiter
print(url)
delimiter
print(m[0])
delimiter
self.ShowModal()
delimiter
list(data.keys())
delimiter
process_url(a)
delimiter
jsonFile.write(json.dumps(data))
delimiter
board2 = [[1, 0, 1], [1, 0, 1], [0, 1, 0]]
delimiter
self.assertEqual(yargs[0], yexpected)
delimiter
my_list = list(my_set)
delimiter
[8, 8, 8, 8, 8, 8, 8, 8, 8, 8]
delimiter
self.main_app(environ, start_response)
delimiter
pl.plot(X, Sine)
delimiter
reactor.run()
delimiter
ax1.plot(s1.index, s1)
delimiter
p.communicate()
delimiter
print(sys.builtin_module_names)
delimiter
cur.execute(query, (limit1, limit2))
delimiter
collatz(10)
delimiter
data = sys.stdin.read()
delimiter
self.assertEqual(xargs[0], xexpected)
delimiter
plot.colorbar(im, cax=ax2)
delimiter
ax.set_ylim(-0.5, 1.5)
delimiter
driver.set_window_size(1120, 550)
delimiter
app.logger.addHandler(file_handler)
delimiter
jsonify(d)
delimiter
self.redis = Redis()
delimiter
L.sort()
delimiter
isinstance({}, dict)
delimiter
sin(x) * cos(x)
delimiter
s.rstrip(punctuation)
delimiter
plt.show()
delimiter
sys.stdout.flush()
delimiter
{{request.user.pretty_username}}
delimiter
plt.show()
delimiter
sp.sourceslist.save()
delimiter
pd.DataFrame(X, columns=v.get_feature_names(), index=grouped.index)
delimiter
fig = plt.figure()
delimiter
os.system(mycommand)
delimiter
worker.start()
delimiter
cmp(x, y)
delimiter
os.chmod(path, 511)
delimiter
a[:] = [(x, mapping[x]) for x in b]
delimiter
soup = BeautifulSoup(html)
delimiter
map(list, a)
delimiter
signal.signal(signal.SIGINT, signal_handler)
delimiter
sys.exit(12)
delimiter
min(filtered, key=lambda x: x.last - x.first)
delimiter
[i for i, x in enumerate(a) if x in list_duplicates(a)]
delimiter
tk.Tk.__init__(self, *args, **kwargs)
delimiter
zip(MONTHS, MONTHS)
delimiter
x = X.objects.get(id=x.id)
delimiter
bisect.bisect_left(list_, item)
delimiter
np.log(sample_df).diff()
delimiter
some_list == sorted(some_list)
delimiter
QApp().run()
delimiter
e1.pack()
delimiter
res = func(*args, **kwargs)
delimiter
n = clamp(n, 7, 42)
delimiter
ostream = StringIO(istream.read())
delimiter
print(random.choice(data))
delimiter
os.chdir(random.choice([d for d in os.listdir(os.curdir) if os.path.isdir(d)]))
delimiter
json.dumps(doc, sort_keys=True, indent=4, default=json_util.default)
delimiter
subprocess.Popen(smart_cmd)
delimiter
plt.xlim((-5, 5))
delimiter
os.kill(2405, 0)
delimiter
some_object = klass()
delimiter
b[indices] = a[indices]
delimiter
end = datetime.time(1, 0, 0)
delimiter
layout.addWidget(self.button)
delimiter
print(map(lambda x, y: abs(x - y), l[1:] + l[:1], l))
delimiter
plt.figure(figsize=(12, 8))
delimiter
self.after(1000, self.countdown)
delimiter
reshaped2.show()
delimiter
my_list.sort()
delimiter
app = Flask(__name__)
delimiter
data = json.load(json_data)
delimiter
screen.blit(temp_surf, (0, 0))
delimiter
df.groupby(np.arange(len(df)) // 10)
delimiter
self.app(environ, custom_start_response)
delimiter
print(list(get_week(datetime.datetime.now().date())))
delimiter
plt.setp(ax.get_xticklabels(), visible=False)
delimiter
__init__.py
delimiter
last_inner_append(x[-1], y)
delimiter
self.driver.quit()
delimiter
driver.get(url)
delimiter
ax.xaxis.grid(True)
delimiter
signal.signal(signal.SIGALRM, signal_handler)
delimiter
L = [(x + [0]) for x in L]
delimiter
colorbar()
delimiter
time.sleep(0.1)
delimiter
[2.0, 2.0017]
delimiter
app.debug = True
delimiter
client.put_file(dropbox_path, f)
delimiter
sorted([(i, j) for j in range(10) for i in range(10) if j > i])
delimiter
df.xs(1)
delimiter
print(f.bar)
delimiter
cursor = conn.cursor()
delimiter
board1 = [[1, 0, 1], [1, 0, 1], [0, 0, 1]]
delimiter
temp.append(data.tolist())
delimiter
app.MainLoop()
delimiter
func_to_call()
delimiter
pylab.show()
delimiter
list(filter(bool, l))
delimiter
dt.microsecond
delimiter
print(json.dumps(t, cls=MyEncoder))
delimiter
self._numberButtons[i].clicked.connect(partial(self._number, i))
delimiter
df2.apply(lambda x: df2.loc[~x.isin(df1[x.name]), x.name])
delimiter
df = df.sort_index(axis=1)
delimiter
False
delimiter
logger.setLevel(logging.DEBUG)
delimiter
plt.ylim(0, 8)
delimiter
BabyDataSet = zip(names, births)
delimiter
btn5.grid(row=4, column=0)
delimiter
[r for r in x if not any(s in r for s in y)]
delimiter
client.set_options(wsse=security)
delimiter
user.get_all_permissions()
delimiter
counterpart.sendall(data)
delimiter
print(Photo.objects.filter(tags=t1).filter(tags=t2).query)
delimiter
reactor.run()
delimiter
plt.show()
delimiter
(x - 1) // 10 if x > 0 else 0
delimiter
event.wait()
delimiter
A - A.multiply(BisBigger) + B.multiply(BisBigger)
delimiter
id = Column(Integer, primary_key=True)
delimiter
browser.quit()
delimiter
{k1: d2[d1[k1]] for k1 in d1 if d1[k1] in d2}
delimiter
db.session.commit()
delimiter
[arr[max(0, idx - 1):idx + 2] for idx in range(0, len(arr), 2)]
delimiter
np.where(x & x - 1 == 0)
delimiter
local_dt.replace(microsecond=utc_dt.microsecond)
delimiter
newgrid.append([x[i] for x in grid])
delimiter
ax.set_yticks([])
delimiter
enemy1 -= punch
delimiter
func(*args, **kwargs)
delimiter
date = datetuil.parser.parse(string, tzinfos=tzd).astimezone(pytz.utc)
delimiter
sess.run([init_op])
delimiter
engine.execute(createview)
delimiter
ax0b.set_xticklabels([])
delimiter
seen.add(item.lower())
delimiter
float_array.fromstring(input_file.read())
delimiter
app.MainLoop()
delimiter
self.grid_rowconfigure(1, weight=1)
delimiter
pubkey = rsa.PublicKey(n, e)
delimiter
timer.timeout.connect(self.move_towards)
delimiter
fig = plt.figure()
delimiter
print(response.content)
delimiter
df.columns = list(resoverall.keys())
delimiter
reactor.run()
delimiter
print(df2[[15, 16, 17, 18, 19, 8]])
delimiter
texts[0].set_fontsize(4)
delimiter
fig = plt.figure(figsize=(xinch, yinch))
delimiter
ws.cell(row=i, column=j)
delimiter
sys.exit(0)
delimiter
ax.set_zlim(0, 5)
delimiter
main()
delimiter
[0, 0, 0, 0, 1, 1, 1]
delimiter
p.wait()
delimiter
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
df[col] = df[col].sum()
delimiter
ng.run()
delimiter
lambda : [func() for _ in range(n)]
delimiter
pattern = re.compile(pattern_string)
delimiter
fout.close()
delimiter
best_authors = Author.objects.filter(books__bestseller=True).distinct()
delimiter
df[~df.From.str.contains(ignorere)]
delimiter
sstd.on_changed(update)
delimiter
__builtins__.set
delimiter
plt.legend()
delimiter
e.shape
delimiter
random.choice(my_list)()
delimiter
alist.append(string[i:j + 1])
delimiter
all((x > 0) == (y > 0) for x, y in zip(l1, l2))
delimiter
print(response.text)
delimiter
log2int_faster = int(x).bit_length() - 1
delimiter
ax = fig.add_subplot(111)
delimiter
np.array(list(chain(*[np.arange(20).reshape(4, 5)[i::2] for i in range(2)])))
delimiter
ax.xaxis.set_minor_locator(MultipleLocator(5))
delimiter
dict.__setitem__(self, x, value)
delimiter
ax.figure.show()
delimiter
Tkinter.mainloop()
delimiter
dir = os.path.dirname(__file__)
delimiter
s.between(0, 1).any()
delimiter
self.data[attr]
delimiter
inList = any(a in sublist for sublist in mylist)
delimiter
np.random.shuffle(arr[:, (i)])
delimiter
X, Y = np.meshgrid(X, Y)
delimiter
print(len(s), len(data), repr(data))
delimiter
print(img.shape)
delimiter
r.read()
delimiter
pylab.ylim([0, 1000])
delimiter
plt.plot(c[0], c[1], c[2])
delimiter
list(intermix([1, 0, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2]))
delimiter
proc.wait()
delimiter
np.fill_diagonal(out, 1)
delimiter
redirect(login_url)
delimiter
frame = cv.QueryFrame(self.capture)
delimiter
print(s.read())
delimiter
msg = MIMEMultipart()
delimiter
D = np.r_[np.c_[A, B], np.c_[B.T, C]]
delimiter
print(list(itertools.islice(arith(10, 2), 100)))
delimiter
bool(_digits.search(d))
delimiter
L[item][0]
delimiter
manual_wcwidth(data)
delimiter
a = np.append(a, i)
delimiter
response = json.loads(jsonResponse)
delimiter
final_l.append((p[0], visit(p)))
delimiter
tmp.append([X[i, j] for i in X])
delimiter
sys.exit(app.exec_())
delimiter
BabyDataSet = list(zip(names, births))
delimiter
d = int(s[0:7], 2) + int(s[8]) / 2.0
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
foo()
delimiter
pool = multiprocessing.Pool()
delimiter
print(df.iloc[:, (0)].tolist())
delimiter
ax.set_zlim(-100, 100)
delimiter
ax = plt.gca()
delimiter
a[i, j]
delimiter
self.clip.disconnect(self.signal_id)
delimiter
server.ehlo()
delimiter
deleterow[1]
delimiter
axes.set_ylim([ymin, ymax])
delimiter
Y[(1), :]
delimiter
time.sleep(0.1)
delimiter
do_stuff()
delimiter
x = x[1:]
delimiter
quit()
delimiter
time.sleep(1)
delimiter
cur.execute(sql, params)
delimiter
plt.show()
delimiter
fig, ax = plt.subplots()
delimiter
sw.pack(fill=tk.BOTH, expand=1)
delimiter
l.extend(t + t2)
delimiter
print(token.access_token)
delimiter
dict((k, bigdict[k]) for k in wanted_keys if k in bigdict)
delimiter
NameRank.sort(key=lambda x: int(x.split()[1]))
delimiter
set(x) == set(y)
delimiter
print(save_data.get())
delimiter
{{i}}, {{j}}
delimiter
cls.__new__()
delimiter
list(OrderedDict.fromkeys(t).keys())
delimiter
a, b = b, a + b
delimiter
plt.show()
delimiter
self.setCentralWidget(self.window)
delimiter
random.choice(list(dictionary.values()))
delimiter
lbl5.grid(row=4, column=0)
delimiter
n * factorial(n - 1)
delimiter
[_ for _ in itertools.compress(d, map(lambda x: x >= 4, a))]
delimiter
df.stack().map(m).unstack()
delimiter
d += timedelta(days=7)
delimiter
conn.send(data)
delimiter
a, b = 1, 1
delimiter
c.mymethod2()
delimiter
str(User.query.filter_by(role_id=user_role))
delimiter
view.show()
delimiter
ax.set_ylim(0, 10)
delimiter
df.iloc[np.sort(np.concatenate([idx[~iszero], keep_these]))]
delimiter
new_pressures.append(0)
delimiter
x = ast.literal_eval(x)
delimiter
ser.write(str(d))
delimiter
application_path = os.path.dirname(os.path.abspath(__file__))
delimiter
table[1][2]
delimiter
plt.xticks(list(range(len(x))), x)
delimiter
func()
delimiter
pairs = dict(zip(second_split[::2], second_split[1::2]))
delimiter
(myarray[i] for i in myindex)
delimiter
collections.deque(itertools.islice(iterator, n), maxlen=0)
delimiter
fig = plt.figure()
delimiter
driver.set_window_size(1024, 768)
delimiter
A.shape
delimiter
[o.specific_attr for o in objects]
delimiter
x = list(someiter)
delimiter
[(a if a else b) for a in sequence]
delimiter
df.reindex(ind & ind2)
delimiter
test[2] = new_value
delimiter
o4.method()
delimiter
cardValue = int(card[0])
delimiter
X.__setitem__(0, 2)
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
plt.show()
delimiter
dict((k, int(v)) for k, v in d.items())
delimiter
names = self.__class__.__dict__
delimiter
Ainv = np.zeros_like(A)
delimiter
func(*args, **kwargs)
delimiter
df2.apply(lambda x: df2.loc[~x.isin(df1.values.ravel()), x.name])
delimiter
df
delimiter
fig.set_size_inches(11.7, 8.27)
delimiter
math.hypot(y[0] - x[0], y[1] - x[1])
delimiter
next(decfa)
delimiter
decimal.Decimal(1) / decimal.Decimal(7)
delimiter
arr = (ctypes.c_int * len(pyarr))(*pyarr)
delimiter
os.kill(self.pid, signal.SIGKILL)
delimiter
dfs = [df0, df1, df2, dfN]
delimiter
Response(token, status=200)
delimiter
plot_df.plot()
delimiter
ftp.quit()
delimiter
print([(k, v) for k, v in list(dupl.items()) if len(v) > 1])
delimiter
json.dump(row, outfile)
delimiter
f.seek(0)
delimiter
j2 = sorted(i for i in j if i >= 5)
delimiter
suffix_array.sort(key=lambda a: buffer(content, a))
delimiter
sess = tf.InteractiveSession()
delimiter
Py_Finalize()
delimiter
sys.stdout.flush()
delimiter
ao[:, 1:] += ai[:, :-1]
delimiter
self.predictions_.append(classifier.predict_proba(X))
delimiter
driver.switch_to.window(driver.window_handles[1])
delimiter
print(list_of_dict)
delimiter
result = [tuple([ai, bi] + ci) for ai, bi, ci in zip(a, b, c)]
delimiter
main()
delimiter
subprocess.call(command, shell=True)
delimiter
ancestors_descendents.add(descendent)
delimiter
par2.xaxis.set_ticklabels([i[0] for i in data])
delimiter
proc.wait()
delimiter
index_list = [int(i) for i in index_list]
delimiter
sys.exit(app.exec_())
delimiter
ax.clear()
delimiter
print([list(g) for g in group([], lambda x: x % 5 == 0)])
delimiter
mark_safe(simplejson.dumps(data))
delimiter
loader.load_module()
delimiter
map(lambda x, y: x + y, itertools.repeat(x), y)
delimiter
print([w for w in txt.split() if not w in s])
delimiter
test.py
delimiter
list(d.items())
delimiter
literal_eval(s)
delimiter
random.shuffle(items)
delimiter
trace.main()
delimiter
pylab.show()
delimiter
xl.Workbooks.Close
delimiter
df = df.T.stack().reset_index()
delimiter
pd.concat([d1, df], axis=1)
delimiter
attr = (o.attr for o in objsm)
delimiter
Py_INCREF(interned)
delimiter
df.dtypes
delimiter
IOLoop.instance().start()
delimiter
fig = plt.figure(figsize=(4, 10))
delimiter
print(sys.argv)
delimiter
time = time - datetime.timedelta(microseconds=time.microseconds)
delimiter
[indicies[elements == i] for i in range(1, N)]
delimiter
print(re.findall(p, test_str))
delimiter
Sample.objects.filter(date__range=[startdate, enddate])
delimiter
L[i] = sorted(L[i], key=operator.itemgetter(1, 2))
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
(sum(a) ** 2 - sum([(x ** 2) for x in a])) / 2
delimiter
examplemod.do_stuff()
delimiter
os.unlink(filename)
delimiter
d = collections.defaultdict(dict)
delimiter
session_list.delete()
delimiter
[right for left, right in pairwise(a) if right[1] > left[1]]
delimiter
resultwords = [word for word in querywords if word.lower() not in stopwords]
delimiter
fig = plt.figure()
delimiter
plt.show()
delimiter
parts2 = urlparse.urlparse(fake_url)
delimiter
db.session.add(c)
delimiter
do_stuff()
delimiter
line.set_ydata(r[:, (1)])
delimiter
form = ExcludedDateForm(user=request.user)
delimiter
globals()[funcname](**argsdict)
delimiter
driver = webdriver.Firefox(p)
delimiter
f.close()
delimiter
my_list
delimiter
(i for i, j in zip(seq, shift) if (i, j) != (x, x))
delimiter
app.exec_()
delimiter
User = settings.AUTH_USER_MODEL
delimiter
a, b = b, a + b
delimiter
sum(value for _, value in list(a.items()) if value > 0)
delimiter
foo()
delimiter
data = json.dumps(myobject.__dict__)
delimiter
print(powercheck([1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1]))
delimiter
ax.set_position(pos2)
delimiter
id(lines[0]), id(ax.lines[0])
delimiter
draw.ellipse((x1, y1, x2, y2), fill=background_color)
delimiter
hasattr(obj, method_name) and callable(getattr(obj, method_name))
delimiter
foo(2)
delimiter
cursor = collection.find(spec={}, snapshot=True)
delimiter
sorted(d, key=sorting)
delimiter
df[new_columns]
delimiter
data = myfile.read()
delimiter
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
delimiter
d.setdefault(t[0], {})[t[1]] = t[2]
delimiter
handle.close()
delimiter
writer = csv.writer(f)
delimiter
out = np.asarray(np.bmat([[A, Z], [Z, B]]))
delimiter
x[0] = x[0] + 1
delimiter
run()
delimiter
adder(10)
delimiter
plt.show()
delimiter
curses.noecho()
delimiter
print(soup.prettify())
delimiter
np.array(result)[::-1]
delimiter
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
sys.maxunicode
delimiter
master.grid_rowconfigure(0, weight=0)
delimiter
b.foo()
delimiter
include(GenerateExportHeader)
delimiter
db.session.commit()
delimiter
[(arg + 1) for arg in args]
delimiter
d = [list(map(int, x)) for x in DATA]
delimiter
hi()
delimiter
mylist.sort(key=lambda x: x[1])
delimiter
TaskBase.__call__(self, *args, **kwargs)
delimiter
self.assertTrue(mock.called)
delimiter
t.start()
delimiter
foo.name
delimiter
func(*args, **kwargs)
delimiter
admin.site.register(User, CustomUserAdmin)
delimiter
parser = argparse.ArgumentParser()
delimiter
[lst[i::n] for i in range(n)]
delimiter
admin.site.register(CherryTomato, TomatoAdmin)
delimiter
self.session.execute(count_query).scalar()
delimiter
duplicates = [x for x in mylist if mylist.count(x) > 1]
delimiter
user2 = forms.ChoiceField(choices=choices)
delimiter
ActionChains(driver).move_to_element(element).perform()
delimiter
json.dumps(convert(d))
delimiter
sys.exit()
delimiter
writer.writerow(row)
delimiter
message.save()
delimiter
self.grid_rowconfigure(0, weight=1)
delimiter
i, j = np.indices(a.shape)
delimiter
time.sleep(0.5)
delimiter
fig = plt.figure()
delimiter
{k: add_element(v) for k, v in list(dicty.items())}
delimiter
json.loads(x)
delimiter
self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file)
delimiter
time.sleep(1)
delimiter
globals()
delimiter
func.__code__.co_consts
delimiter
rgbs = [((x & 16711680) >> 16, (x & 65280) >> 8, x & 255) for x in values]
delimiter
float(element)
delimiter
x.isoformat()
delimiter
y.compute()
delimiter
tt = np.linspace(0, 20, 201)
delimiter
sys.exit(1)
delimiter
fout.close()
delimiter
foo = set(range(0, 4))
delimiter
__init__.py
delimiter
product = functools.reduce(operator.mul, iterable, 1)
delimiter
belly_name = models.CharField(max_length=50)
delimiter
[x[0] for x in G]
delimiter
list(s) == sorted(s)
delimiter
sum(ord(c) << i * 8 for i, c in enumerate(mystr))
delimiter
avg = float(sum(mylist)) / len(mylist)
delimiter
list(roundrobin(l1, l2))
delimiter
a, b = b, a + b
delimiter
res = urllib.request.urlopen(req)
delimiter
ax.add_line(line_1)
delimiter
spstereo.scatter(x, y)
delimiter
n11.add(n111)
delimiter
datetime.timedelta(seconds=seconds)
delimiter
str(a)
delimiter
x = x + a + b + c
delimiter
im.show()
delimiter
cov = np.array([[u20, u11], [u11, u02]])
delimiter
s1.reset_index(inplace=True, drop=True)
delimiter
self.canvas.update_idletasks()
delimiter
os.remove(filename)
delimiter
print(me.toJSON())
delimiter
loggerCent.setLevel(logging.DEBUG)
delimiter
key_to_delete = max(d, key=lambda k: d[k])
delimiter
new_list = [(a + b) for a, b in zip(a_list, b_list)]
delimiter
type([])
delimiter
all(c in gram.lower() for c in string.ascii_lowercase)
delimiter
module.workflow_set.filter(trigger_roles__in=[self.role.id], allowed=True)
delimiter
form.rate.queryset = Rate.objects.filter(company_id=the_company.id)
delimiter
pool = multiprocessing.Pool(4)
delimiter
sys.exit(1)
delimiter
cls.recalc_mro()
delimiter
os.kill(os.getppid(), 0)
delimiter
desired_cols = (tuple(row[col] for col in columns) for row in reader)
delimiter
(data.T / vector).T
delimiter
{w: counts[w] for w in word_list}
delimiter
new = map(int, old)
delimiter
d2 = {k: (v * 0.5) for k, v in list(d.items())}
delimiter
(A.stack(0) << np.arange(10)).sum(1).unstack()
delimiter
plt.show()
delimiter
print({k: (x.get(k, 0) + y.get(k, 0)) for k in set(x) | set(y)})
delimiter
ax.figure.canvas.draw()
delimiter
key[:2].upper() + key[2:]
delimiter
deletelist[index]
delimiter
cur.execute(query, (b,))
delimiter
self.button.pack(padx=10, pady=10)
delimiter
m = re.search(pat, t)
delimiter
persons = Person.objects.all().order_by(birthday, anniversary)
delimiter
r.status_code
delimiter
a.index(4)
delimiter
dff[[c for c in dff if dff[c].isnull().sum() < 2]]
delimiter
dropped_copies = [(lambda j: (x[j] for x in copies[j]))(i) for i in range(2)]
delimiter
print([value for value in x if not math.isnan(value)])
delimiter
otest.sort(key=lambda x: int(x))
delimiter
df.tail(5)
delimiter
print(text[i])
delimiter
s == len(s) * s[0]
delimiter
sys.getsizeof(Bar.__dict__)
delimiter
plt.show()
delimiter
plt.plot(data.index, data.amount)
delimiter
[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
delimiter
fig.subplots_adjust(left=0.25, bottom=0.25)
delimiter
json.loads(obj)
delimiter
query = users.select().order_by(-users.c.id.desc()).limit(5)
delimiter
bucket.configure_lifecycle(lifecycle_config)
delimiter
arrback = numpy.array(json.loads(s))
delimiter
x.digits(10, 0, -1, 1)
delimiter
np.array_equal(a, b)
delimiter
self.temperatureRaisedSignal.emit()
delimiter
raise web.notfound()
delimiter
df.head()
delimiter
self._task.cancel()
delimiter
a[:, (idx)]
delimiter
logger.addHandler(file_handler)
delimiter
out = [x for x in a if x in b and x in c]
delimiter
newdf = df.join(newcols)
delimiter
plt.xlim([0, len(data)])
delimiter
dropped_copies = [make_gen(i) for i in range(2)]
delimiter
main()
delimiter
f(**{str(k): v for k, v in list(kwargs.items())})
delimiter
ax.plot_surface(grid_x, grid_y, grid_z, cmap=plt.cm.Spectral)
delimiter
reactor.run()
delimiter
print(files[0])
delimiter
ch = logging.StreamHandler()
delimiter
print(json.dumps(output, indent=4))
delimiter
main()
delimiter
req.read()
delimiter
df.loc[:, (msk)]
delimiter
[y for x in data for y in x]
delimiter
logger.setFormatter(logFormatter)
delimiter
plt.subplot(1, 2, 2)
delimiter
np.ma.array([[1, 0, 0, 1], [1, 0, 1, 0]], mask=[[0, 0, 0, 1], [1, 1, 0, 1]])
delimiter
RGB_tuples = map(lambda x: colorsys.hsv_to_rgb(*x), HSV_tuples)
delimiter
enumerate(list(range(2000, 2005)), 1)
delimiter
json_dict = json.dumps(values)
delimiter
self.transport.write(data)
delimiter
s.update(list(fus_s.keys()))
delimiter
browser = webdriver.Firefox()
delimiter
print(cmp(memoryview(test1), memoryview(test2)))
delimiter
signal.signal(signal.SIGQUIT, dumpstacks)
delimiter
print([(100 * (b - a) / a) for a, b in zip(prices[::1], prices[1::1])])
delimiter
output = urllib.request.urlopen(url).read()
delimiter
__metaclass__ = Proxier
delimiter
[mm_fib(i) for i in range(20)]
delimiter
fig.canvas.draw_idle()
delimiter
anumlist = [int(x) for x in alist if x.isdigit()]
delimiter
data.append([w.getparams(), w.readframes(w.getnframes())])
delimiter
app = flask.Flask(__name__)
delimiter
request.user.get_myuser().pretty_username()
delimiter
[i for n, i in enumerate(d) if i not in d[n + 1:]]
delimiter
new_dict = {k: v for k, v in my_dict.items() if v >= threshold_value}
delimiter
ax.scatter(a.real, a.imag)
delimiter
self.previewImage.show()
delimiter
print(arr_list)
delimiter
df = pd.DataFrame()
delimiter
array([1, 2, 4, 5, 6, 7, 8])
delimiter
regr.fit(chntrain, austrain)
delimiter
print(response.read())
delimiter
tk.Tk.__init__(self)
delimiter
p.start()
delimiter
container.grid_columnconfigure(0, weight=1)
delimiter
ax.set_xticks(np.arange(len(df.columns)) + 0.5)
delimiter
print(df)
delimiter
fig, axes = plt.subplots(nrows=2, sharex=True)
delimiter
df.fillna(1, inplace=1)
delimiter
list(product())
delimiter
imshow(gray2, cmap=cm.gray, alpha=0.5)
delimiter
imshow(gray2b, cmap=cm.gray, alpha=0.5)
delimiter
db.init_app(app)
delimiter
app = Bottle()
delimiter
string1.join(string2)
delimiter
fileObj.close()
delimiter
lists = [[] for i in range(num_lists)]
delimiter
train_perplexity = math.pow(2, train_loss)
delimiter
loader.construct_yaml_str(node)
delimiter
decorator
delimiter
foo(params[0], params[1])
delimiter
fileinput.close()
delimiter
sys.stdin.close()
delimiter
background_label.place(x=0, y=0, relwidth=1, relheight=1)
delimiter
layout.addWidget(self.label)
delimiter
boundaries = [1, 6, 10, 21, 40, 51]
delimiter
[0, 1, 0, 2, 1, 0]
delimiter
print((i, os.path.join(dir, file)))
delimiter
python - -version
delimiter
plt.figure()
delimiter
sys.exit(2)
delimiter
deletesys.modules[name]
delimiter
a = [a]
delimiter
worksheetObject.portrait = False
delimiter
d = dict(t for t in zip(m[::2], m[1::2]))
delimiter
{c.name}
delimiter
app.mainloop()
delimiter
meets = Counter(chain.from_iterable(combinations(line, 2) for line in lines))
delimiter
plt.plot(signal)
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
delimiter
plt.scatter(R, P, s=150, color=c, zorder=2)
delimiter
l2.append([x[1] for x in zip(pattern, facs) if not x[0]])
delimiter
print(key[index].reshape(a.shape))
delimiter
args = parser.parse_args()
delimiter
myData.dtype.names
delimiter
socket.close()
delimiter
list_regexs = [re.compile(x) for x in list_patterns]
delimiter
MyModel.objects.all().delete()
delimiter
regressions = regressions.reshape(A.shape)
delimiter
data = [[([0] * h) for _ in range(w)] for _ in range(d)]
delimiter
traceback.print_exc()
delimiter
min(timeit.repeat(lambda : {k: v for d in (x, y) for k, v in list(d.items())}))
delimiter
mainloop()
delimiter
deleteself.__dict__[key]
delimiter
max(max(l_one), max(l_two))
delimiter
any(child.contains(other_node) for child in self.children)
delimiter
regressor.fit(X, y)
delimiter
print(x)
delimiter
querset = MyModel.objects.filter(id__in=custom_list)
delimiter
plt.show()
delimiter
__init__.py
delimiter
do_your_thing_with(item)
delimiter
self.close()
delimiter
thread.start()
delimiter
im.show()
delimiter
map(join, zip(s, drop(s, 1)))
delimiter
newlist += mylist[i:i + 22]
delimiter
[i for i in userInput if i in wordsTask]
delimiter
f.close()
delimiter
print(d[1] + f.split(d)[1])
delimiter
instance.__init__(cls, *args, **kw)
delimiter
pd.concat([df, df.shift(-1)], axis=1, keys=[0, 1]).dropna()
delimiter
subs = [l[i:i + n] for i in range(len(l)) if len(l[i:i + n]) == n]
delimiter
admin.site.register(Example, MyAdmin)
delimiter
list(itertools.product(l1, l2))
delimiter
x[np.argmin(abs(f2 - f1))]
delimiter
json_data = json.load(StringIO(json_str))
delimiter
a = map(float_or_string, mylist)
delimiter
data = dict((key, request.form.getlist(key)) for key in list(request.form.keys()))
delimiter
f.close()
delimiter
fig.show()
delimiter
((1 + sqrt(5)) ** n - (1 - sqrt(5)) ** n) / (2 ** n * sqrt(5))
delimiter
[(next(it), next(it1)) for _ in range(10)]
delimiter
os.makedirs(expanded)
delimiter
print(key, value)
delimiter
str(d)
delimiter
browser.get(googleURL)
delimiter
self.app.run()
delimiter
out.close()
delimiter
help(parrot)
delimiter
sys.stderr.close()
delimiter
ax.axis([-1, 10, -1, 10])
delimiter
ax.transData.transform([(0, 1), (1, 0)]) - ax.transData.transform((0, 0))
delimiter
zf.close()
delimiter
setup.py
delimiter
num2words(10000000000000000000000000)
delimiter
time.sleep(10)
delimiter
root.mainloop()
delimiter
self.__dict__.update(dictionary)
delimiter
print(Board([1, 2]))
delimiter
fig, ax = plt.subplots()
delimiter
pyglet.app.run()
delimiter
cache.update()
delimiter
print(instance.Variable)
delimiter
root = tree.getroot()
delimiter
print(root.winfo_height())
delimiter
tree = ET.fromstring(xmlstr)
delimiter
m / m.norm(1, axis=1).reshape((m.shape[0], 1))
delimiter
l.extend(list(range(1, n + 1)))
delimiter
reactor.run()
delimiter
print(list(roundrobin(*l)))
delimiter
np.partition(x, -10)[-10:]
delimiter
smtp.close()
delimiter
timestamp.sort(reverse=True)
delimiter
print(find_eulerian_tour(graph))
delimiter
df1 = df1.fillna(0)
delimiter
time.sleep(1)
delimiter
[list(g) for k, g in groupby(inp, key=lambda i, j=count(): i - next(j))]
delimiter
plt.show()
delimiter
reactor.run()
delimiter
myTreeView.setEditTriggers(QAbstractItemView.NoEditTriggers)
delimiter
plt.show()
delimiter
base.rhyme()
delimiter
do_something_special()
delimiter
array([1, 1])
delimiter
workbook.close()
delimiter
webdriver.ActionChains(driver).move_to_element(el).click(el).perform()
delimiter
outputfile.close()
delimiter
[k for k, v in list(mydict.items()) if c[v] > 1]
delimiter
layout.addWidget(self.connectButton)
delimiter
str1_list.sort()
delimiter
selenium_logger.setLevel(logging.WARNING)
delimiter
plt.hold(True)
delimiter
a[ainb]
delimiter
df.isnull().sum().sum()
delimiter
print(time.time() - start)
delimiter
offset += datetime.timedelta(days=1)
delimiter
pygame.draw.circle(screen, (0, 0, 0), (250, 250), 125)
delimiter
i / int(pow(10, l - m)) % int(pow(10, m - n + 1))
delimiter
rs = urllib.request.urlopen(req.to_url())
delimiter
[x[start:end] for start, end in slices if end - start > 1]
delimiter
td.findAll(text=True)
delimiter
r = requests.delete(URL_delete, data=json.dumps(mydata))
delimiter
print(bool([]))
delimiter
list(intermix([1, 0, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 1, 2]))
delimiter
sys.stdin.close()
delimiter
t[0][0]
delimiter
seventh_value = next(f(i) for i in range(1, 10) if i == 7)
delimiter
any(i in array2 for i in array1)
delimiter
fig, ax = plt.subplots()
delimiter
traceback.print_exc(file=sys.stdout)
delimiter
self.openBtn.clicked.connect(self.openClicked)
delimiter
[x[1] for x in Counter(n).most_common() if x[0] > 1]
delimiter
y = arr[29].sum()
delimiter
df[1].plot(ax=axes[0, 1])
delimiter
listbox.config(width=0)
delimiter
TestApp().run()
delimiter
y[(1), :, (2), :]
delimiter
simplejson.load(f)
delimiter
list_of_pairs = [(p1, p2) for p1 in people for p2 in people]
delimiter
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(jar))
delimiter
pylab.show()
delimiter
axborder.set_xlim(0, binimg.shape[1] - 1)
delimiter
any(np.array_equal(b, x) for x in my_list)
delimiter
ax.set_ylim(-20, 100)
delimiter
admin.site.register(CMSMediaDocument)
delimiter
cj = cookielib.LWPCookieJar()
delimiter
sys.exit(0)
delimiter
pygame.image.save(Surface, filename)
delimiter
__rmul__ = __mul__
delimiter
plt.pause(0.0001)
delimiter
lst = [x for x, in mysql_rows]
delimiter
do_something()
delimiter
self.text.configure(yscrollcommand=self.vsb.set)
delimiter
sm.OLS(df[ycol], df[xcols]).fit().predict()
delimiter
response = urllib.request.urlopen(url).read()
delimiter
time.sleep(0.1)
delimiter
OrderedDict.__setitem__(self, key, value)
delimiter
u.save()
delimiter
any(e[1] == search for e in data)
delimiter
F(n - 1) + F(n - 2)
delimiter
[day for day in range(len(day_list)) if day_list[day] == inp][0]
delimiter
Py_DECREF(arr)
delimiter
logging.StreamHandler.__init__(self)
delimiter
unique[maxsort], counts[maxsort]
delimiter
df_out = pd.DataFrame(out, index=df_index)
delimiter
list(itertools.dropwhile(lambda x: x == r[-1], reversed(r)))[::-1] + r[-1:]
delimiter
somelist = [i for j, i in enumerate(somelist) if j not in remove_indices]
delimiter
writer.close()
delimiter
self.server.serve_forever()
delimiter
fig.subplots_adjust(hspace=0.5, wspace=0.001)
delimiter
plt.show()
delimiter
cPickle.loads(_)
delimiter
l.append((floar(row[0]), float(row[1])))
delimiter
main()
delimiter
sorted_list == list(range(sorted_list[0], sorted_list[-1] + 1))
delimiter
y = [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0]
delimiter
dict(a)
delimiter
app = Flask(__name__)
delimiter
d = collections.defaultdict(int)
delimiter
net.build()
delimiter
first_line = f.readline()
delimiter
plt.scatter(x, y)
delimiter
nmf_model.fit(A)
delimiter
plt.tight_layout()
delimiter
browser.set_handle_robots(False)
delimiter
libc.cprogram(wts, res, kks, pointer(n), ex)
delimiter
print([(a, b, z[a]) for a, b in l])
delimiter
server.listen(5)
delimiter
res.append(copy.deepcopy(l))
delimiter
gb.apply(lambda x: dict(zip(*x))).unstack()
delimiter
[97, 98, 114, 97, 107, 97]
delimiter
pylab.show()
delimiter
tf = tempfile.NamedTemporaryFile(delete=False)
delimiter
f.close()
delimiter
lst.append(lambda x, z=i: f(x, z))
delimiter
plt.show()
delimiter
print(list(chain(*listOfTuples)))
delimiter
print((x, y))
delimiter
[ord(b) for b in bytestr]
delimiter
s.set_xticklabels(group_labels)
delimiter
{i: str(i) for i in range(5)}
delimiter
unittest.main()
delimiter
self.emitter.start()
delimiter
followers_df.index = list(range(20))
delimiter
blocklist.append(line)
delimiter
plt.scatter(t, x, c=y)
delimiter
upper = tuple(x + 1 for x in upper)
delimiter
root.mainloop()
delimiter
writer = csv.writer(out_file)
delimiter
layout.addWidget(self.label)
delimiter
reversed_arr = arr[::-1]
delimiter
pizza = models.ForeignKey(Customer)
delimiter
simplejson.dumps(object())
delimiter
QObject.__init__(self)
delimiter
hist = np.histogram(img.flatten(), 256, [0, 256])[0]
delimiter
self.left.extend(self.right[0:x])
delimiter
print(list(d))
delimiter
count.most_common(2)
delimiter
p1.join()
delimiter
process = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
delimiter
sorted(iter(x), key=lambda k: random.random())
delimiter
glTranslatef(100, 100)
delimiter
legobj.set_linewidth(2.0)
delimiter
self.response.set_status(401)
delimiter
items.append(self.listWidget.item(index))
delimiter
plt.show()
delimiter
threading.Thread.__init__(self)
delimiter
out4 = a[i[0] + 1:i[2]]
delimiter
signal.signal(signum, sighandler)
delimiter
df[0][0]
delimiter
PyMODINIT_FUNC
delimiter
numpy.where(a != 0, 1, 0).sum()
delimiter
x.sort()
delimiter
arr = numpy.array(((2, 2), (2, -2)))
delimiter
f()
delimiter
next(x for x in range(10) if x == 11)
delimiter
print(repr(object))
delimiter
sorted(list(mydict.items()), key=itemgetter(1, 0))
delimiter
res.fillna(0)
delimiter
np.diff(a)
delimiter
output = defaultdict(lambda : defaultdict(int))
delimiter
print(bar.__name__)
delimiter
image.set_from_pixbuf(pixbuf)
delimiter
self.img.set_from_file(fname)
delimiter
app.setStyleSheet(stylesheet)
delimiter
server.NOT_DONE_YET
delimiter
b = [(sl + [0] * (len(max(a, key=len)) - len(sl))) for sl in a]
delimiter
[t[i:i + n] for i in range(0, len(t), n)]
delimiter
json.dump(data, f)
delimiter
unittest.main(verbosity=2)
delimiter
df.C.plot(ax=plt.gca())
delimiter
db = SQLAlchemy(app)
delimiter
print(line)
delimiter
submodule2.py
delimiter
np.linspace(0, 1, 10, endpoint=False)
delimiter
size = fields.IntegerRangeField(list(range(1, 50)))
delimiter
map(ord, os.urandom(10))
delimiter
logger = logging.getLogger()
delimiter
do_something_with(name)
delimiter
x.sort()
delimiter
urllib.request.install_opener(opener)
delimiter
pd.read_csv(io.StringIO(t), header=False)
delimiter
print(list(iterable))
delimiter
widget.lift()
delimiter
user.save()
delimiter
((x - a) / (b - a)).clip(0, 1)
delimiter
self.fitness = 2 * self.i
delimiter
plt.gcf().add_subplot(422)
delimiter
ytest = regr.predict(Xtest)
delimiter
self.render_to_response(self.get_context_data(form=form))
delimiter
stdin.flush()
delimiter
ax.bar(x, y, width=10)
delimiter
form = ContactForm(request.POST)
delimiter
myscript.py
delimiter
popen = subprocess.Popen(args, stdout=subprocess.PIPE)
delimiter
tornado.ioloop.IOLoop.instance().start()
delimiter
time.tzset()
delimiter
float(output_string)
delimiter
list_2 = [item for item in list_2 if f(item)]
delimiter
x = pickle.load(f)
delimiter
x = foo[index]
delimiter
a = np.arange(729).reshape((9, 9, 9))
delimiter
province = models.ForeignKey(Province)
delimiter
browserify()
delimiter
A[i, j] += C[j, k]
delimiter
hash.update(line)
delimiter
dists = np.vstack(([x_dists.T], [y_dists.T])).T
delimiter
par1.set_ylim(0, 4)
delimiter
sorted(l1)
delimiter
[day for day in range(len(day_list)) if day_list[day] == inp][0]
delimiter
stats.weibull_min.fit(data, floc=0)
delimiter
sorted((k, ordered(v)) for k, v in list(obj.items()))
delimiter
float(value)
delimiter
self.matplotlibWidget.canvas.draw()
delimiter
os._exit(1)
delimiter
cv2.destroyAllWindows()
delimiter
jsonString = json.dumps(data)
delimiter
sys.exit(1)
delimiter
msg.attach(part1)
delimiter
f.tell() == os.fstat(f.fileno()).st_size
delimiter
[item[0] for item in tl]
delimiter
p.start()
delimiter
app.run()
delimiter
data = np.random.uniform(-1, 1, 44100)
delimiter
plt.show()
delimiter
print(value[:min(len(value), size)].ljust(size))
delimiter
list(remove_reversed_duplicates(a))
delimiter
self.ui_web_view.installEventFilter(self)
delimiter
p.join()
delimiter
time.sleep(0.1)
delimiter
clf.fit(X, y)
delimiter
a.setLevel(logging.DEBUG)
delimiter
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
deletearray[0]
delimiter
pd.get_dummies(df.apply(tuple, 1)).groupby(level=0).sum()
delimiter
learner = milk.defaultclassifier()
delimiter
app.run()
delimiter
gtk.main_quit()
delimiter
self.finish()
delimiter
main()
delimiter
{{mydocimage.property.date_added}}
delimiter
plt.plot(x2, my_curve2)
delimiter
foo.bar()
delimiter
a()
delimiter
all(x > y for x, y in zip(L, L[1:]))
delimiter
QtGui.QWidget.__init__(self, parent)
delimiter
percentages.append(temp)
delimiter
pyplot.show()
delimiter
l.append(i)
delimiter
self.mainframe.columnconfigure(0, weight=1)
delimiter
QtGui.QDialog.__init__(self)
delimiter
fig.subplots_adjust(wspace=0)
delimiter
self.socket.bind((server_ip, server_port))
delimiter
self.common1()
delimiter
results[i].append(benchmark(i))
delimiter
h.append({k: d.get(k) for k in get_keys})
delimiter
sorter[np.searchsorted(b, a, sorter=sorter)]
delimiter
grid_1.AddMany(wx.StaticText(self.panel, label=str(i)) for i in range(24))
delimiter
x[row_idx.reshape(-1, 1), col_idx]
delimiter
sys.stdout.flush()
delimiter
f(Foo(1))
delimiter
creatures = defaultdict(lambda : defaultdict(lambda : defaultdict(int)))
delimiter
print(next(zip(*s)))
delimiter
print(row.column_name)
delimiter
l.append([x, y])
delimiter
a = A()
delimiter
df.loc[all_days]
delimiter
dates.sort()
delimiter
self.filelist.append(zinfo)
delimiter
np.equal(a, tgt).all(1).any()
delimiter
length = sum(1 for x in clusterList)
delimiter
ax.set_xticklabels(df.columns, rotation=90, size=15)
delimiter
d = tf.constant([[1.0, 1.0], [0.0, 1.0]])
delimiter
self.rect.set_width(self.x1 - self.x0)
delimiter
lines = [line for line in infile][:N]
delimiter
bananaxxxxxxxxxgestrawberryxxxxxxxar
delimiter
df.hist(layout=(1, 2))
delimiter
df = pd.concat([df.ix[:, :5], x], axis=1)
delimiter
rconsole.spawn_server()
delimiter
pycurl_connect.setopt(pycurl.URL, your_url)
delimiter
cv2.waitKey()
delimiter
item.setCheckState(QtCore.Qt.Unchecked)
delimiter
f.seek(0)
delimiter
ax.set_axis_off()
delimiter
print(df.loc[:, (mask)])
delimiter
time.sleep(1)
delimiter
scored.sort()
delimiter
d = dict(urlparse.parse_qsl(qs))
delimiter
print(word)
delimiter
gtk.main()
delimiter
sorted(set(chain.from_iterable(iter(content.values()))))
delimiter
__str__ = lambda self: str(self._name)
delimiter
s = ax.scatter(X, Y, c=C)
delimiter
self.button.clicked.connect(self.createTab)
delimiter
process.wait()
delimiter
print((k, v))
delimiter
np.where(x < 0, -x / x.min(axis=0), x / x.max(axis=0))
delimiter
tuple([x for sublist in base_lists for x in sublist])
delimiter
print(widget.GetName())
delimiter
label.pack()
delimiter
sum(range(a[0], a[-1] + 1)) - sum(a)
delimiter
b = [ord(x) for x in s]
delimiter
driver = webdriver.Chrome()
delimiter
[group for group in groups if a.isdisjoint(group)]
delimiter
print(json.dumps([1, a, b]))
delimiter
a = csc_matrix([[1, 0, 0, 0], [0, 0, 10, 11], [0, 0, 0, 99]])
delimiter
t = tuple(s)
delimiter
os.system(cmd)
delimiter
numpy.linalg.norm(a - b, ord=1)
delimiter
process.kill()
delimiter
os.makedirs(directory_name)
delimiter
[idx for idx, el in enumerate(foo) if np.array_equal(el, arr)]
delimiter
sys.exit(1)
delimiter
ax = plt.gca()
delimiter
dict(c)
delimiter
p.stdin.flush()
delimiter
main()
delimiter
[False] * 20
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
time.gmtime(0)
delimiter
self.Bind(wx.EVT_PAINT, self.on_paint)
delimiter
thread.start()
delimiter
x.g(2)
delimiter
wx.Frame.__init__(self, parent, title=title, size=(200, 100))
delimiter
m.drawcoastlines()
delimiter
i += 1
delimiter
print(objectify.dump(root))
delimiter
browser.back()
delimiter
points = [(i // sy, i % sy) for i in random.sample(range(sx * sy), n)]
delimiter
map(lambda x: 0.4 if 7 <= x <= 22 else 0.2, hourOfDay)
delimiter
json.dumps(object())
delimiter
zip(A, B + B)
delimiter
ax.set_xticks(np.arange(25))
delimiter
scene = QtGui.QGraphicsScene()
delimiter
sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_KEEPCNT, max_fails)
delimiter
[id(x) for x in list(dic.values())]
delimiter
w.readline()
delimiter
str2_list.sort()
delimiter
n += 1
delimiter
fig = plt.figure()
delimiter
time.sleep(10)
delimiter
print(a.get())
delimiter
print(np.percentile(map(int, i), 95))
delimiter
foo(a, b)
delimiter
((i, o) for i in l)
delimiter
p.plot()
delimiter
result.append(item)
delimiter
plt.draw()
delimiter
f(2)
delimiter
lists.append(pickle.load(infile))
delimiter
a * b
delimiter
plt.show()
delimiter
reader = csv.reader(f)
delimiter
etree.LXML_VERSION
delimiter
item.lower()
delimiter
print(doc.text_content())
delimiter
pd.concat(dfs, ignore_index=True)
delimiter
proc.terminate()
delimiter
b[static_indices[0], static_indices[1], static_indices[2]]
delimiter
codeErr.close()
delimiter
r = sum(compress(list_2, list_1))
delimiter
self[key].add(value)
delimiter
np.allclose([np.nan], [np.nan])
delimiter
yy = np.concatenate((y, [0] * 10 * len(y)))
delimiter
arr[:, (col)] /= abs(arr[:, (col)]).max()
delimiter
lines.append(line)
delimiter
writer.writeheader()
delimiter
positionsList.sort(key=lambda p: howCentric(p, boardLength))
delimiter
p.terminate()
delimiter
main()
delimiter
sorted(zip(unique_rows, counts), key=lambda x: x[1], reverse=True)
delimiter
fixed.write(line)
delimiter
log.setLevel(logging.INFO)
delimiter
cv.SetCaptureProperty(video2, cv.CV_CAP_PROP_FRAME_HEIGHT, 600)
delimiter
app.exec_()
delimiter
sys.stdout.buffer.write(TestText2)
delimiter
server.serve_forever()
delimiter
sample_df.apply(np.log).diff()
delimiter
[a, b, c, d]
delimiter
xx, yy, zz = np.mgrid[:5, :5, :5]
delimiter
print(re.findall(pattern, string))
delimiter
my_method()
delimiter
print(browser.title)
delimiter
img = cv2.imread(sys.argv[1])
delimiter
fig = plt.figure()
delimiter
r.reset_index()
delimiter
proc.start()
delimiter
br.set_handle_equiv(False)
delimiter
a.foo = new_foo.__get__(a, type(a))
delimiter
test_file.close()
delimiter
add_column(engine, table_name, column)
delimiter
d2 = [k for k, v in sorted(d.items()) for _ in range(v)]
delimiter
foo()
delimiter
nums = map(lambda x: x * 2, nums)
delimiter
divtd(datetime.timedelta(hours=12), 2)
delimiter
element.click()
delimiter
root.withdraw()
delimiter
d[row[0]].append(row[1:])
delimiter
email = models.EmailField(max_length=255)
delimiter
print(sorted(list(mydict.items()), key=lambda k_v: ordering[k_v[0]]))
delimiter
settings.name
delimiter
sum(x[1] for x in divs)
delimiter
csv2.close()
delimiter
print(res[1])
delimiter
my_foo.echo_bar()
delimiter
f.seek(0, 2)
delimiter
input = list(input)
delimiter
wx.ListCtrl.__init__(self, *args, **kwargs)
delimiter
QWidget().setLayout(self.layout())
delimiter
imobj.set_data(np.zeros((100, 100)))
delimiter
np.piecewise(a, [a > 80, (40 < a) & (a <= 80), a <= 40], [funcA, funcB, funcC])
delimiter
Funny.dynprop
delimiter
self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
yaml.dump(data, ff, allow_unicode=True)
delimiter
time.sleep(1)
delimiter
X, Y = np.meshgrid(np.linspace(xmin, xmax, 100), np.linspace(ymin, ymax, 200))
delimiter
{e: str1.count(e) for e in set(str1)}
delimiter
time.mktime(ts)
delimiter
clips.Run()
delimiter
fig = plt.figure()
delimiter
print(dom.toprettyxml())
delimiter
m = m.multiply(m >= 10)
delimiter
[1, 1, 1, 1, 1, 1, 1, 1],
delimiter
w.show()
delimiter
pd.DataFrame.from_records(records_from_json(fh))
delimiter
y = np.hsplit(x, [((i + 1) * 10) for i in range((129 - 1) // 10)])
delimiter
mydict = dict((k, v) for k, v in mydict.items() if k != val)
delimiter
sys.getsizeof(sys.getsizeof)
delimiter
temp = temp.reshape(-1, 1)
delimiter
pygame.quit()
delimiter
id = Column(Integer, primary_key=True)
delimiter
ax.xaxis.set_label_position(direction)
delimiter
main()
delimiter
tuple(zip(*ii))
delimiter
ptdiff = lambda p1_p2: (p1_p2[0][0] - p1_p2[1][0], p1_p2[0][1] - p1_p2[1][1])
delimiter
unittest.main()
delimiter
print(regex.group(1))
delimiter
ax2.yaxis.set_major_locator(mtick.LinearLocator(5))
delimiter
prettyp([1] * 100)
delimiter
print((x.eval(), y.eval(), tf.gradients(y, [x])[0].eval()))
delimiter
new_dict = nested_dict(2, float)
delimiter
l = [(x * (2 if i % 2 == 1 else 1)) for i, x in enumerate(l)]
delimiter
plt.xlim(xmin, xmax)
delimiter
QWebView.__init__(self)
delimiter
frame.Show(True)
delimiter
df.shape
delimiter
new_points = [do_something_with(x, y, z) for x, y, z in surface.points]
delimiter
legend.draggable(state=True)
delimiter
urllib.request.Request.__init__(self, *args, **kwargs)
delimiter
burger.save()
delimiter
wilma.save()
delimiter
myList[:] = [(a, b) for a, b in myList if myDict.get(a, sentinel) != b]
delimiter
regex.findall(string)
delimiter
df = pd.read_sql_query(query.statement, engine)
delimiter
random.shuffle(tmp)
delimiter
text = tk.Text()
delimiter
print(my_list_of_objs)
delimiter
ax.plot_wireframe(xp, yp, zp)
delimiter
map(sum, a)
delimiter
br = mechanize.Browser()
delimiter
json.dumps(data)
delimiter
df2.fillna(0, inplace=True)
delimiter
help(func)
delimiter
clamp = lambda n, minn, maxn: max(min(maxn, n), minn)
delimiter
t.start()
delimiter
plt.show()
delimiter
print(CreateTable(Model.__table__).compile(engine))
delimiter
queue = Queue()
delimiter
sys.getsizeof(bitArray.tobytes()) / float(len(sequence))
delimiter
eigvals, eigvecs = np.linalg.eigh(cov)
delimiter
Af.reshape(A.shape)
delimiter
file_handler.setLevel(logging.INFO)
delimiter
self.setLevel(logging.INFO)
delimiter
sys.__stdout__.write(s)
delimiter
df.iloc[:, (np.lexsort(v.T[::-1]))]
delimiter
[a for v, a in sorted((x[a], a) for a in y)]
delimiter
df1.reindex(index)
delimiter
[m.group(1) for m in matches if m]
delimiter
self.my_list.extend(repeat(0, 4 - len(self.my_list)))
delimiter
pprint.pprint(l)
delimiter
plt.figure()
delimiter
os.setsid()
delimiter
name = models.CharField(max_length=50)
delimiter
id = Column(Integer, primary_key=True)
delimiter
iter_10 = (i for i in range(10))
delimiter
[(i, z) for i in [1, 2] for z in zs_i]
delimiter
s.quit()
delimiter
compressed_table.append((istart, i, table[i]))
delimiter
fig2 = plt.figure()
delimiter
print(subprocess.list2cmdline(sys.argv[1:]))
delimiter
ax.clear()
delimiter
df.groupby(1)
delimiter
root = Tk()
delimiter
b = [a, a]
delimiter
plt.show()
delimiter
sys.stdout
delimiter
print(data.splitlines())
delimiter
sum_yearly_data(*list(data.values()))
delimiter
axes.set_xlim([xmin, xmax])
delimiter
dict.get(self, key)
delimiter
pdb.set_trace()
delimiter
output.close()
delimiter
numcount[num] += 1
delimiter
next(g, default_value)
delimiter
axm.xaxis.set_visible(False)
delimiter
print(etree.tostring(root, xml_declaration=True))
delimiter
tuples = [(1, 1), (0, 1), (1, 0), (0, 0), (2, 1)]
delimiter
datetime.datetime(*eut.parsedate(text)[:6])
delimiter
print((1, 2, get_nesting_level()))
delimiter
layout.addWidget(self.buttons)
delimiter
gp5 = [1, 4, 7, 9]
delimiter
year = datetime.date.today().year
delimiter
signal.signal(signal.SIGINT, on_interrupt)
delimiter
ax.invert_yaxis()
delimiter
shm_test()
delimiter
driver = webdriver.Firefox(firefox_profile=profile)
delimiter
os.close(fd)
delimiter
time_d_float = time_d.total_seconds()
delimiter
self.builder.get_name(widget)
delimiter
math.sin(2 * math.pi / LIMIT * x) + 0.001 * random.random()
delimiter
l.sort(key=int)
delimiter
SESSION_COOKIE_AGE = 600
delimiter
myModule.printX()
delimiter
db.put(models)
delimiter
[0, 1, 1, 2, 2, 2, 1, 0],
delimiter
argparse.ArgumentParser.__init__(self, *args, **kwargs)
delimiter
sorted(list(range(len(K))), key=lambda x: K[x])
delimiter
X, Y = np.meshgrid(x, y)
delimiter
tar.close()
delimiter
df = pd.DataFrame(d)
delimiter
[subl for subl in _itersplit(l, splitters) if subl]
delimiter
p.wait()
delimiter
show_windows()
delimiter
x[0] + np.arange(0, 60, 10)
delimiter
all_genic_snps = pd.concat(all_dfs)
delimiter
do_sth()
delimiter
x = Bunch(d)
delimiter
sio.seek(0)
delimiter
paramdata.index
delimiter
lst.sort(key=POS.get)
delimiter
int(p.stdout.read())
delimiter
mcastsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
delimiter
sk = Sink()
delimiter
[(x * y) for x, y in zip(list(range(1, 21)), cycle(list(range(2, 10))))]
delimiter
print(repr(tokzr_QA(inp1)))
delimiter
numpy.full((2, 2), True, dtype=bool)
delimiter
s.map(Timestamp.date)
delimiter
data.groupby([a, b]).count()
delimiter
np.split(b.indices, b.indptr[1:-1])
delimiter
print(str(item[0:])[1:-1])
delimiter
show()
delimiter
np.fromiter(a, dtype=np.float)
delimiter
numpy.median(numpy.array(lst))
delimiter
list(d.keys())
delimiter
any(b == a[i:i + len(b)] for i in range(len(a) - len(b) + 1))
delimiter
button.clicked.connect(self.make_calluser(name))
delimiter
lst.sort(key=lambda x: x[0])
delimiter
plt.tight_layout()
delimiter
result = json.loads(line)
delimiter
con.close()
delimiter
b.append(i + 1)
delimiter
1 in set([l[0] for l in a_list])
delimiter
data = cur.fetchone()[0]
delimiter
[_f for _f in sequence if _f]
delimiter
pygame.draw.rect(x, y, width, length)
delimiter
sys.stdout = sys.__stdout__
delimiter
clf.fit(Xs, ys)
delimiter
countvec.fit_transform(df.title)
delimiter
do_stuff()
delimiter
other_list.append(obj)
delimiter
min(list(range(len(L))), key=L.__getitem__)
delimiter
pickle.dump(my_list, f)
delimiter
writer.writerow([i[0] for i in cursor.description])
delimiter
print(repr(arr))
delimiter
ffit = np.polyval(coefs[::-1], x_new)
delimiter
result = [convert(i, j) for i, j in enumerate(tlist)]
delimiter
print(list(map(replace, a)))
delimiter
x, y
delimiter
foo()
delimiter
seq = difflib.SequenceMatcher(a, b)
delimiter
[dishes[x] for x in crucial if x in dishes]
delimiter
time.sleep(10)
delimiter
os.dup2(copied.fileno(), stdout_fd)
delimiter
response = br.submit()
delimiter
writer.close()
delimiter
setattr(self, name, val)
delimiter
df2 = df[(df.a != -1) | (df.b != -1)]
delimiter
items = [[1, 2, 0], [1, 2, 0], [1, 2, 0]]
delimiter
app.run()
delimiter
print(first.lower() <= second.lower() <= third.lower())
delimiter
np.unique(struct)
delimiter
print(cur.fetchone())
delimiter
unittest.TextTestRunner().run(suite)
delimiter
admin.site.register(Group, GroupAdmin)
delimiter
self.dg.Items.Add(self.value)
delimiter
xl.ActiveWorkbook.ActiveSheet.Columns(1).AutoFilter(1)
delimiter
p.start()
delimiter
print(list(value.keys())[0])
delimiter
axclust.imshow(clustimg)
delimiter
print(df[c].value_counts())
delimiter
tags = Tag.objects.all()
delimiter
anims.append(f)
delimiter
root.setLevel(logging.DEBUG)
delimiter
db.close()
delimiter
fout.close()
delimiter
axr.yaxis.set_major_locator(yrloc)
delimiter
dict_x.setdefault(key, []).append(value)
delimiter
exit(0)
delimiter
plt.show()
delimiter
[remove_cruft(s) for s in sites]
delimiter
context
delimiter
app = QtWidgets.QApplication(sys.argv)
delimiter
salt = b62encode(os.urandom(16))
delimiter
f.write(value)
delimiter
b.save()
delimiter
sess = tf.Session()
delimiter
data = pd.DataFrame(list(collection.find()))
delimiter
ret[line.strip()] = parse_message_to_tree_helper(buf, index)
delimiter
app = Flask(__name__)
delimiter
matplotlib.pyplot.show()
delimiter
screen.blit(pygame.transform.scale(pic, (500, 500)), (0, 0))
delimiter
name = models.CharField(max_length=100)
delimiter
deleted[key_to_delete]
delimiter
floor_float(10.8976540981, 8)
delimiter
numpy.median(d, axis=0)
delimiter
self.SetSizer(sizer)
delimiter
self.logentry.append(line)
delimiter
os.path.dirname(str(sys.executable, encoding))
delimiter
map(list, iter(c.items()))
delimiter
df.sub(df2, fill_value=0)
delimiter
gtk.main()
delimiter
dosomething()
delimiter
self.layout = QtGui.QHBoxLayout()
delimiter
print(df[df.Name.isin(val)].reset_index(drop=True))
delimiter
func2(**locals())
delimiter
ax = fig.add_subplot(2, 1, 1)
delimiter
np.isclose(arr_f, a, atol=0.01).any()
delimiter
numpy.prod(a)
delimiter
([next(it) for _ in _range(s)] for s in count(1))
delimiter
sys.stdout.flush()
delimiter
1 in [len(set(i)) for i in zip(*arr)]
delimiter
my_strings.sort(key=last_part)
delimiter
print([sum(daily[x:x + 7]) for x in range(0, len(daily), 7)])
delimiter
[x for x in lst if x % 2 == 0][0]
delimiter
main()
delimiter
print(args)
delimiter
MyApp().main(sys.argv[1:])
delimiter
print(a.sum())
delimiter
plt.xticks(list(range(len(D))), list(D.keys()))
delimiter
args = parser.parse_args()
delimiter
print((key, value))
delimiter
df[(df.a < df.b) & (df.b < df.c)]
delimiter
print(random.random())
delimiter
form = ContactForm(request.POST)
delimiter
{{django_version}}
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
arr.sum(axis=0)
delimiter
[s for n in range(12) for s in [square(n)] if s > 50]
delimiter
f.seek(0, 2)
delimiter
pygame.init()
delimiter
print(df.iloc[:, (0)].values.tolist())
delimiter
output.writelines(data)
delimiter
m * c[:, (np.newaxis)]
delimiter
time.sleep(5)
delimiter
proc.kill()
delimiter
tuple(totuple(i) for i in a)
delimiter
sorted([15, 8])
delimiter
self.grid_columnconfigure(2, weight=1)
delimiter
frame.Show()
delimiter
self.assertEqual(cm.exception.code, 1)
delimiter
img = Image.open(image_path)
delimiter
app = Flask(__name__)
delimiter
np.vstack(a) - b
delimiter
cv2.waitKey(0)
delimiter
[0][2][0]
delimiter
print(get_authoritative_nameserver(sys.argv[1], log))
delimiter
a = np.arange(5)
delimiter
isinstance(s, string_types)
delimiter
list(islice(rows, 0, len(rows), int(1 / proportion)))
delimiter
q = multiprocessing.Queue()
delimiter
func_to_cache()
delimiter
f.close()
delimiter
ax1 = fig.add_subplot(111)
delimiter
file = models.FileField(upload_to=content_file_name)
delimiter
np.maximum(X.A, Y.A)
delimiter
[x for x in l if x is not 0] + [x for x in l if x is 0]
delimiter
avg = sum(mylist) / len(mylist)
delimiter
shutil.copy2(os.path.join(dirpath, file), dstdir)
delimiter
t.date.dt.to_pydatetime()
delimiter
L.append(L[-1][:] + [L[-1][-1] + 1])
delimiter
list(itertools.zip_longest(*ll))
delimiter
plt.hist(val, weights=weight)
delimiter
con.commit()
delimiter
nx.draw(G, node_size=1000)
delimiter
id(a[0:2])
delimiter
L[:start] + L[start + n:i] + L[start:start + n] + L[i:]
delimiter
c = MyClass()
delimiter
id = Column(Integer, primary_key=True)
delimiter
{0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1}
delimiter
cv2.waitKey(0)
delimiter
do_something()
delimiter
Response(serializer.data, status=status.HTTP_201_CREATED)
delimiter
lines[-n:]
delimiter
s.fill((255, 255, 255, 128))
delimiter
pl.show()
delimiter
sum(j << i for i, j in enumerate(reversed(l)))
delimiter
b.T
delimiter
dfile.close()
delimiter
s = json.dumps(foo.__dict__)
delimiter
df.loc[idx]
delimiter
print(np.cross(a, b))
delimiter
root.winfo_children()
delimiter
s = s[::-1]
delimiter
x[:5]
delimiter
scipy.misc.imshow(im_out)
delimiter
list({len(x): x for x in reversed(lst)}.values())
delimiter
print(a[i, j])
delimiter
fig = plt.figure(figsize=(15, 10))
delimiter
python - -version
delimiter
0, 1, 1, 0, 0, 0, 0, 1, 0
delimiter
self.frame.destroy()
delimiter
printx()
delimiter
show()
delimiter
item in self.queue
delimiter
l + [pad] * (n - len(l))
delimiter
s.close()
delimiter
next(f)
delimiter
a = np.arange(27)
delimiter
os.unlink(file_path)
delimiter
[2, 0, 1, 0, 1, 0]
delimiter
signal.signal(signal.SIGINT, handler)
delimiter
list(chain(*zip(list(range(1, 7)), list(range(-7, 0))[::-1])))
delimiter
widget.show()
delimiter
cv.CvtColor(vis0, vis2, cv.CV_GRAY2BGR)
delimiter
Globals = GLOBALS()
delimiter
dict.__setitem__(self, keys, value)
delimiter
obj.save()
delimiter
columns.setdefault(column, []).append(row)
delimiter
l += [sum(v) / len(v)]
delimiter
soup = BeautifulSoup(html_text)
delimiter
grouped.JobNos.sum().order(ascending=False)
delimiter
proxies = {}
delimiter
btn.grid(row=0, column=tabslen, sticky=W + E)
delimiter
b.shape
delimiter
f.close()
delimiter
myarr0 = array([1, 0])
delimiter
ax.set_yticklabels(df.index)
delimiter
matches = (x for x in lst if x > 6)
delimiter
session1.add(item)
delimiter
color = models.CharField(max_length=2)
delimiter
setattr(self.obj, self.attr, val)
delimiter
con.commit()
delimiter
inactive_user_count = IntegerField(default=0)
delimiter
parsedData = feedparser.parse(data.content)
delimiter
plt.clf()
delimiter
not set(a).isdisjoint(b)
delimiter
inner(myList, [])
delimiter
tornado.ioloop.IOLoop.instance().start()
delimiter
isinstance(x, tuple) and isinstance(x.__dict__, collections.abc.Mapping)
delimiter
b = np.lib.stride_tricks.as_strided(a, (1000, a.size), (0, a.itemsize))
delimiter
df = pd.DataFrame(rows_list)
delimiter
s.value_counts().index[2:]
delimiter
reactor.run()
delimiter
session.commit()
delimiter
obj if isinstance(obj, dict) else range(len(obj))
delimiter
outf.flush()
delimiter
apsched.start()
delimiter
bit[::-1]
delimiter
ax.set_yticks(y_tick * np.pi)
delimiter
self.mc.Play()
delimiter
list(filter(pattern.search, strings))
delimiter
conn.sendmail(sender, destination, msg.as_string())
delimiter
_.view(data.dtype)
delimiter
self.handle_request()
delimiter
[(a + b) for a, b in x]
delimiter
expander.py
delimiter
shell.interact()
delimiter
not bool
delimiter
ax = fig.add_subplot(111)
delimiter
intercepts = y_log[:-1] - slopes * x_log[:-1]
delimiter
MyClass.call_me()
delimiter
new_d = dict((val, d[val]) for val in reverse_d.values())
delimiter
first_column = [x[0] for x in mysql_rows]
delimiter
func()
delimiter
studying / VBG
delimiter
numpy.sum(boolarr)
delimiter
(np.cumsum(np.bincount(v)) - 1)[v]
delimiter
cls._instances[cls].__init__(*args, **kwargs)
delimiter
fox = webdriver.Firefox()
delimiter
reactor.run()
delimiter
requests.status_codes._codes[200]
delimiter
myList[:] = [x for x in myList if myDict.get(x[0], sentinel) != x[1]]
delimiter
[0, 0, 0, 0, 0, 0, 0, 0],
delimiter
im.set_clim(vmin, vmax)
delimiter
final.append(compound[x])
delimiter
np.linalg.lstsq(A.T.dot(A) + lamb * np.identity(n_col), A.T.dot(y))
delimiter
Employee.__init__(self, name, salary)
delimiter
plt.show(block=True)
delimiter
im = Image.open(imgfile)
delimiter
s.bind((host, 8080))
delimiter
list(range(min((a, b)), max((a, b)) + 1))
delimiter
conn.send(filepath)
delimiter
arr.dtype.names
delimiter
print(doCombine(target, x, len(target), 0, 0))
delimiter
tk.Canvas.__init__(self, *args, **kwargs)
delimiter
x[np.logical_and(x > -2, x < 2)]
delimiter
args = parser.parse_args()
delimiter
sys.exit(0)
delimiter
plt.show()
delimiter
[x for x in lst if x % 2 == 0][:1]
delimiter
a + b == c or a + c == b or b + c == a
delimiter
admin.site.unregister(User)
delimiter
a[slice(*b)]
delimiter
time.ctime()
delimiter
set([zip(perm[::2], perm[1::2]) for perm in permutations(list(range(9)))])
delimiter
any(np.array_equal(a, x) for x in my_list)
delimiter
fig.autofmt_xdate()
delimiter
np.random.choice(keys, size=n, replace=True, p=prob)
delimiter
f_out.write(i)
delimiter
self.panel.SetSizerAndFit(self.sizer)
delimiter
plt.plot(data)
delimiter
print([d.__name__ for d in foo.bar._decorators])
delimiter
subject = db.StringField(max_length=255, required=True)
delimiter
[v for v in x if v == v]
delimiter
sys.exit(app.exec_())
delimiter
thread.start()
delimiter
show_firm_url.allow_tags = True
delimiter
print(list_end_counter([1, 1, 2]))
delimiter
ax.bar(arange(len(grosses)), grosses)
delimiter
data = json.loads(json_string)
delimiter
get_max(dicts)
delimiter
b = np.array([[5, 6], [7, 8]])
delimiter
raise ValueError
delimiter
print(solve([2, 0, 1]))
delimiter
version.search(s).group()
delimiter
dir(module)
delimiter
os.waitpid(-pid)
delimiter
self.assertTrue(settings.DEBUG)
delimiter
myObject2 = MyObject(foo, bar)
delimiter
child.widget().deleteLater()
delimiter
plt.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=0, hspace=0)
delimiter
fp.close()
delimiter
ax.set_xlim(0, len(changes) + 1)
delimiter
items = list(yourdict.items())
delimiter
PLT.show()
delimiter
my_dict[len(data)].append(id)
delimiter
r = requests.get(url, cookies=cd)
delimiter
obj = MyClass()
delimiter
sys.getrecursionlimit()
delimiter
fig.autofmt_xdate()
delimiter
b = map(bool, a)
delimiter
soup.find_all(text=is_comment)
delimiter
reg_data = np.ones((int(1000.0), int(100000.0)))
delimiter
result.append(x)
delimiter
plt.show()
delimiter
datetime.datetime.strptime(date_txt, DATE_FORMAT)
delimiter
fig.show()
delimiter
format_timedelta(timedelta(minutes=-5))
delimiter
self.graphicsView.setScene(scene)
delimiter
datetime.fromtimestamp(0)
delimiter
current_size = f.tell()
delimiter
test[start:end]
delimiter
self.socket.listen(1)
delimiter
plt.plot(x, 2 * x)
delimiter
browser.get(url)
delimiter
all(val == testval for val in list(d.values()))
delimiter
contact_form.save()
delimiter
acc.setdefault(key, []).append(value)
delimiter
sbtn.click()
delimiter
myList.sort(key=extractNum)
delimiter
df.columns = [c_name.strip() for c_name in df.columns.values.tolist()]
delimiter
image = Image.open(buffer)
delimiter
__init__.py
delimiter
listener = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
Foo.class_method()
delimiter
mat[ixs].sum(axis=0)
delimiter
tuple(map(sum, zip(a, b)))
delimiter
plt.draw()
delimiter
pool.join()
delimiter
idx = numpy.argmin(numpy.abs(A - target))
delimiter
cursor.execute(sql)
delimiter
self.assertTrue(users.is_current_user_admin())
delimiter
print(myString[len(myString) - 1])
delimiter
self.save()
delimiter
id = Column(Integer, primary_key=True)
delimiter
s[len(start):-len(end)]
delimiter
match.groups()
delimiter
app.run()
delimiter
print(repr(b))
delimiter
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
runserver.py
delimiter
print(soup)
delimiter
writer = csv.writer(outfile)
delimiter
print(line)
delimiter
plt.setp(list(ax.spines.values()), color=color)
delimiter
bins = np.array([0, 1, 10, 60, 60 * 10, 60 * 60, 24 * 60 * 60])
delimiter
turtle.forward(size)
delimiter
host.close()
delimiter
self.board[y][x]
delimiter
sys.path.append(PYSOLR_PATH)
delimiter
d = dateutil.parser.parse(s)
delimiter
[False, False, True, False, False],
delimiter
print(os.path.join(root, name))
delimiter
s[4]
delimiter
pd.concat([c.series for c in [France, Germany]], axis=1)
delimiter
os.remove(os.path.join(root, file))
delimiter
ax.set(xticks=np.arange(dates.size), xticklabels=datelabels)
delimiter
dialog.setLayout(some_layout)
delimiter
ax.set_xlim(0, 5)
delimiter
time.sleep(1)
delimiter
img.putdata(data)
delimiter
fig = plt.figure()
delimiter
a = numpy.empty_like(b)
delimiter
ws.cell(row=r, column=1).value = statN
delimiter
print(soup.li.findAll(text=True, recursive=False))
delimiter
xl.Application.Quit()
delimiter
ser.setDTR(False)
delimiter
sum(b[i] << i * 8 for i in range(4))
delimiter
np.meshgrid(x, x)
delimiter
os.unlink(path)
delimiter
np.subtract.at(dW, np.s_[:, (y)], masked.sum(axis=2))
delimiter
len(tup)
delimiter
ax1.set_xlim([0.1, 10])
delimiter
commands[command](*sys.argv[1:])
delimiter
s.commit()
delimiter
plt.hlines([0], -10, 20)
delimiter
QtDBus.QDBusConnection.sessionBus().send(msg2)
delimiter
map(lambda a_b: a_b[1] - a_b[0], pairwise(L))
delimiter
result = dict(result)
delimiter
sets = [set(i + j) for i in g for j in g if i != j and set(i) & set(j)]
delimiter
collections.deque.__getitem__(self, index)
delimiter
draw = ImageDraw.Draw(img)
delimiter
set(bell).issubset(printset)
delimiter
frame.columnconfigure(1, weight=1)
delimiter
self.a[-1]
delimiter
plt.xticks(rotation=25)
delimiter
plt.contourf(X, Y, Z)
delimiter
pi = square(a + b) / (4 * t)
delimiter
setattr(object, name, value)
delimiter
my_dict[item] = a[index + 1]
delimiter
print(max(len(s) for s in row))
delimiter
datetime.datetime(2012, 11, 16, 0, 0)
delimiter
print(output)
delimiter
random.shuffle(x)
delimiter
all(map(lambda x: x == items[0], items))
delimiter
k = np.arange(n)
delimiter
sys.path.append(SYS_PATH)
delimiter
main()
delimiter
sys.maxsize
delimiter
random.shuffle(thelist)
delimiter
s.get_text()
delimiter
backend.setsockopt(zmq.XPUB_VERBOSE, True)
delimiter
row_ind = [k for k, v in list(d.items()) for _ in range(len(v))]
delimiter
logger.setLevel(logging.ERROR)
delimiter
logging.shutdown()
delimiter
np.array(zip(*(A[i:] for i in range(n))))
delimiter
time.sleep(1)
delimiter
pd.concat([i for _, i in df.items()]).dropna().reset_index(drop=True)
delimiter
[_f for _f in map(func, x) if _f]
delimiter
ax = fig.add_subplot(111)
delimiter
li2 = [y for x in li for y in x]
delimiter
root.mainloop()
delimiter
plt.xlim(0, 4)
delimiter
br.select_form(nr=0)
delimiter
cursor = db.cursor()
delimiter
len(x)
delimiter
self.verticalLayout.addWidget(self.label)
delimiter
df = pd.concat([df1, df2])
delimiter
MY_SORTED_TUPLE = tuple(sorted(MY_TUPLE, key=itemgetter(1)))
delimiter
root = Tk()
delimiter
print(g.reset_index(drop=True))
delimiter
data_dict[regNumber].append(details)
delimiter
plt.figure()
delimiter
raise KeyError(request.POST)
delimiter
__init__.py
delimiter
print(find_nearest(x))
delimiter
output.sort()
delimiter
df.loc[mask.any(axis=1)]
delimiter
pd.__version__
delimiter
os.makedirs(dir)
delimiter
[int(any(full.endswith(last) for last in B)) for full in A]
delimiter
self.est.predict_proba(X)[:, (1)][:, (numpy.newaxis)]
delimiter
date = models.DateTimeField(auto_now_add=True, blank=True)
delimiter
locals().update({col: df[col]})
delimiter
django.setup()
delimiter
[item for item in my_iterable if my_filter(item)]
delimiter
re.findall(p, test_str)
delimiter
client.send(msg)
delimiter
str(b)
delimiter
plt.annotate(labls[i], xy=(x[i, 2], y[i, 2]), rotation=rotn[i, 2])
delimiter
jsonFile.close()
delimiter
do_many_amazing_things(a, b)
delimiter
math.isnan(x)
delimiter
plt.show()
delimiter
sys.exit(1)
delimiter
X, Y = np.mgrid[:bignum, :bignum]
delimiter
df[col].replace(to_remove, np.nan, inplace=True)
delimiter
channel.basic_consume(callback_func, queue, no_ack=True)
delimiter
df.ix[df.index.indexer_between_time(datetime.time(10), datetime.time(14))]
delimiter
mratings.mean(axis=0)
delimiter
store.put(key, value, table=True, append=False)
delimiter
tk.Tk.__init__(self)
delimiter
plt.yticks(np.arange(y.max() + 1), labels)
delimiter
outfile.write(file2.read())
delimiter
do_something()
delimiter
area1 + area2
delimiter
type(a[0])
delimiter
sum(map(len, primes))
delimiter
main()
delimiter
[(x % 2 == 0) for x in t_f_list]
delimiter
a.childNodes[0].nodeValue
delimiter
[val for val in a for _ in (0, 1)]
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
test[:, (0)]
delimiter
sys.stdout.write(RED)
delimiter
template.render()
delimiter
gevent.killall([obj for obj in gc.get_objects() if isinstance(obj, greenlet)])
delimiter
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
getdict(x)
delimiter
list(range(1, 11))
delimiter
printArray([str(x) for x in row])
delimiter
self.send_blob(blob_info, save_as=True)
delimiter
x.sort(key=str.lower)
delimiter
output.close()
delimiter
a[:0] = b
delimiter
os.symlink(linkto, dstname)
delimiter
im.file.save(img_filename, File(img_temp))
delimiter
print(repr(t[1]))
delimiter
p[np.argsort(p)]
delimiter
int(b[::-1], 2)
delimiter
root.mainloop()
delimiter
app.run()
delimiter
setHatchThickness(1.0)
delimiter
self.queue.add(item)
delimiter
[(item + (z[item[0]],)) for item in l]
delimiter
sess = tf.Session()
delimiter
time.sleep(5)
delimiter
y.mean()
delimiter
datetime.fromtimestamp(time.mktime(time_tuple))
delimiter
np.sin(2 * np.pi * freq * t)
delimiter
s.replace(d, regex=True)
delimiter
sound.play()
delimiter
df
delimiter
pprint(dict_to_etree(d))
delimiter
YourModel.objects.filter(some_datetime__date=some_date)
delimiter
[item for item, count in Counter(a).items() if count > 1]
delimiter
ax.scatter(a, b, c, c=[use_colours[x[0]] for x in d], s=50)
delimiter
suite.addTest(unittest.TestLoader().loadTestsFromModule(module))
delimiter
ax.set_xlim(xlim)
delimiter
a.itemset((i, j), x)
delimiter
df.loc[[(df.iloc[(i), 1:].duplicated().sum() == 0) for i in df.index]]
delimiter
path = sys.modules[self.__module__].__file__
delimiter
app.register_blueprint(post_blueprint)
delimiter
df[k] = df[k].astype(v)
delimiter
type(json.loads(data))
delimiter
[k[1] for k in d]
delimiter
button.grid(row=1, column=4)
delimiter
str(165).zfill(4)
delimiter
img = Image.open(stream)
delimiter
np.linalg.norm(A[1:] - A[:-1], axis=1)
delimiter
locals().update(d)
delimiter
fobj.close()
delimiter
{{page.get_title}}
delimiter
sum(np.array(a) > 7)
delimiter
time.sleep(4)
delimiter
Py_Finalize()
delimiter
Table.query.filter(Table.name == con.name).first()
delimiter
array2[:] = [e for e in array2 if e not in set1]
delimiter
lucky.append(L[0])
delimiter
r = np.exp(np.sqrt(x * x + y * y))
delimiter
[1, 2] in a.tolist()
delimiter
self.mainloop()
delimiter
reduced_basi = [[[0, 0]], [[1, 0], [0, 1]], [[2, 0], [1, 1], [0, 2]]]
delimiter
args = parser.parse_args()
delimiter
args = parser.parse_args()
delimiter
ax.plot([1, 1, 1])
delimiter
str(self.as_date())
delimiter
min_positions = [i for i, x in enumerate(a) if x == mymin]
delimiter
print(len(list(group)), key)
delimiter
int(True)
delimiter
table.sort(functools.cmp_to_key(team_cmp))
delimiter
G.add_edge(prereq, target)
delimiter
driver = webdriver.PhantomJS(desired_capabilities=dcap)
delimiter
obj.save()
delimiter
con.close()
delimiter
QtGui.QWidget.__init__(self, parent)
delimiter
df.loc[:, ((df != df.ix[0]).any())]
delimiter
iter(self._data)
delimiter
cv2.waitKey(0)
delimiter
my_list = [False for i in range(n)]
delimiter
[s for s in perms if valid(s)]
delimiter
main()
delimiter
canvas.pack()
delimiter
plt.show()
delimiter
plt.subplot(154)
delimiter
numpy.random.seed(x)
delimiter
fig = plt.figure()
delimiter
painter.rotate(90)
delimiter
plt.ion()
delimiter
fh.close()
delimiter
values[i] = struct.unpack(endian, f.read(bytes))[0]
delimiter
os.chdir(whatever)
delimiter
totalist, forselection = itertools.tee(totalist, 2)
delimiter
f.close()
delimiter
df = df.sample(frac=1).reset_index(drop=True)
delimiter
driver = webdriver.Firefox(firefox_binary=binary)
delimiter
time.sleep(0.1)
delimiter
sorted_B = sorted(B)
delimiter
[s.index(x) for x in lst]
delimiter
sys.getrefcount(object)
delimiter
plt.show()
delimiter
bar = foo.copy()
delimiter
print(line)
delimiter
module.run_pool()
delimiter
sum(A, [])
delimiter
ast[([0, 1, 2]), ([0, 1, 0]), ([0, 2, 2]), (0), :2, :2]
delimiter
same_structure(a[0], b[0]) and same_structure(a[1:], b[1:])
delimiter
a * x ** 2 + b + c * np.sin(x)
delimiter
indices = np.split(sidx, np.flatnonzero(np.diff(arr[sidx]) > 0) + 1)
delimiter
list(s)
delimiter
dict((k, dol1.get(k, no) + dol2.get(k, no)) for k in keys)
delimiter
M.A.diagonal(2)
delimiter
Py_Finalize()
delimiter
time.sleep(0.5)
delimiter
A[:, (1)].sum()
delimiter
wx.StaticBitmap(panel, -1, jpg, (10, pos), (jpg.GetWidth(), jpg.GetHeight()))
delimiter
map(complex, row)
delimiter
mypoly = Point(0, 0)
delimiter
thisFile = __file__
delimiter
dllname = os.path.dirname(__file__)
delimiter
nid = Column(Integer, primary_key=True)
delimiter
[(item, the_list.count(item)) for item in sorted(set(the_list))]
delimiter
fulldate = fulldate + datetime.timedelta(milliseconds=500)
delimiter
s.splitlines()
delimiter
master.grid_rowconfigure(1, weight=1)
delimiter
[(x + 1) for x in l]
delimiter
zip(a[::2], a[1::2])
delimiter
[val for sublist in mylist for val in sublist]
delimiter
df.set_index(df.merged_ix, inplace=True)
delimiter
a[np.ix_(*[list(range(0, i, 2)) for i in a.shape])]
delimiter
fig = plt.figure()
delimiter
time.sleep(0.1)
delimiter
ax.plot(x, y)
delimiter
y.shape
delimiter
sorted(listofLines, key=extract_time)
delimiter
np.random.uniform(-10, 10)
delimiter
deletemydict[k]
delimiter
store.close()
delimiter
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
deleterecursive_dict[key]
delimiter
X.T
delimiter
fp.seek(0)
delimiter
lines.sort(key=second_column)
delimiter
print(ame_to_bre(text))
delimiter
b = [i for i in a]
delimiter
func(*args, **kwargs)
delimiter
imresize(np.ones((1000, 1000)), 50).shape
delimiter
wx.Frame.__init__(self, parent, id, title, size=(600, 600))
delimiter
root.mainloop()
delimiter
any([(sorted(sub) in range(min(l), max(l) + 1)) for sub in subs])
delimiter
ldap.set_option(ldap.OPT_DEBUG_LEVEL, 0)
delimiter
k, _, _, _ = np.linalg.lstsq(M, y)
delimiter
dta.co2.interpolate(inplace=True)
delimiter
a[i:j]
delimiter
connlisten_thread.start()
delimiter
print(foo.bar())
delimiter
self.yet = True
delimiter
A[np.arange(m), idx]
delimiter
print(line.strip())
delimiter
np.dot(X, np.dot(M, X.T)).trace()
delimiter
ax.set_xlim([x[0], x[1]])
delimiter
(220922000, 2428),
delimiter
(220922001, 2429),
delimiter
(220922564, 2992),
delimiter
(220922566, 2994),
delimiter
(220924161, 4589),
delimiter
lines = ax.plot(list(range(10)), np.random.randn(10), list(range(10)), np.random.randn(10))
delimiter
xml_tree = etree.parse(xml_file)
delimiter
print(is_shifted_copy([1, 1, 1], [1, 1, 1]))
delimiter
HttpResponse(status=400)
delimiter
text.pack()
delimiter
[audio[i // 2] for i in range(0, len(audio) * 2)]
delimiter
df = pd.concat(series, axis=1)
delimiter
pipeline.fit(X[:, (np.newaxis)], y)
delimiter
time.sleep(0.05)
delimiter
y = np.array([0, 0, 1, 1])
delimiter
plt.plot(x, y)
delimiter
process_names = [proc.name() for proc in psutil.process_iter()]
delimiter
a.repeat(2, axis=1)
delimiter
True
delimiter
b = tuple(a)
delimiter
obj.save()
delimiter
sess.query(Tag.name).distinct()
delimiter
im.save(sys.argv[2])
delimiter
bool([1, 2])
delimiter
plt.plot(x, y)
delimiter
self.Bind(wx.EVT_MOTION, self.on_motion)
delimiter
y_pred = model.predict(X_test)
delimiter
pub_dict[p.key].append(p)
delimiter
print(data)
delimiter
[j for j in range(2, n) if isprime(n)]
delimiter
c = itertools.chain(a, b)
delimiter
df1.plot(ax=axes[0, 0])
delimiter
final_dict = {key: t[key] for key in t if key not in [key1, key2]}
delimiter
tar.close()
delimiter
dict(re.findall(pattern, json_string))
delimiter
df.ix[df.Col1.isin(search_list)]
delimiter
self.app = app.app.test_client()
delimiter
lock = threading.Lock()
delimiter
ax2.get_yaxis().set_animated(True)
delimiter
[cube(i) for i in range(1, 11)]
delimiter
int(1.0 / -2)
delimiter
ax1.yaxis.set_major_locator(y1loc)
delimiter
ipython = get_ipython()
delimiter
func(a)
delimiter
img.save(filename=output_destination)
delimiter
prettyp(CrazyClass())
delimiter
myfunc(a, b, c, d, e, f)
delimiter
next((x for x in seq if predicate(x)))
delimiter
ftp.cwd(path)
delimiter
self.multlineCommands = Forward()
delimiter
fig = plt.figure()
delimiter
execlist[i][4] = mydelay
delimiter
x, y = zip(*points)
delimiter
x.append([])
delimiter
Z[xidx, yidx] = raw[:, (2)]
delimiter
temp = temp[1:]
delimiter
self.model.objects.filter(active=True)
delimiter
df.iloc[2:6]
delimiter
print(map(itemgetter(1), g))
delimiter
print((r.status_code, r.reason))
delimiter
xi, ti = np.meshgrid(xi, ti)
delimiter
chain.from_iterable(combinations(xs, n) for n in range(len(xs) + 1))
delimiter
np.diagonal(np.rollaxis(np.tensordot(a, a, (1, 1)), 1), 0, 2).T
delimiter
Gtk.main()
delimiter
f.close()
delimiter
dict(d1, **d2)
delimiter
window = collections.deque(sorted(window), maxlen=WINDOW_SIZE)
delimiter
signal.pause()
delimiter
[(k, len(list(g))) for k, g in groupby(s)]
delimiter
serverSocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
delimiter
Counter(item for lst in listOfLists for item in set(lst))
delimiter
self.canvas.after(50, self.check_queue)
delimiter
str(numpy.array([0.24])[0])
delimiter
self.assertEqual(resp.status_code, 200)
delimiter
[0][1][2]
delimiter
print(recursive_lambda(lambda a, b: b * a(a, b - 1) if b > 0 else 1)(6))
delimiter
list(set(a) & set(b))
delimiter
cursor.execute(query)
delimiter
root.mainloop()
delimiter
sys.getsizeof(b)
delimiter
data.append(item)
delimiter
np.moveaxis(np.indices(dims), 0, -1)
delimiter
a = dict.fromkeys(list(range(4000000)))
delimiter
ax1 = fig.add_subplot(111)
delimiter
b = [6, 7, 8, 9, 0]
delimiter
soup = BeautifulSoup(browser.page_source)
delimiter
m.close()
delimiter
self.httpd.stop()
delimiter
{x for x in a if x == x}
delimiter
dictionary = dict(zip(keys, values))
delimiter
process.stdout.close()
delimiter
list(itertools.chain.from_iterable([l[x] for x in lslice]))
delimiter
sys.stdout.write(s)
delimiter
print(json.dumps(foo))
delimiter
os.startfile(filename)
delimiter
QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEditable
delimiter
cv2.waitKey(0)
delimiter
cv2.destroyAllWindows()
delimiter
(x + 1 for x in l)
delimiter
numpy.ndarray((5, 5))
delimiter
user = models.OneToOneField(User)
delimiter
pyglet.app.run()
delimiter
self._stack.pop()
delimiter
time.sleep(1)
delimiter
b.py
delimiter
webtail
delimiter
list(range(m, (count + 1) * m, m))
delimiter
main()
delimiter
func(x)
delimiter
print(sys.exc_info()[2].tb_next.tb_frame.f_locals)
delimiter
datetime(2015, 12, 2, 0, 0), datetime.datetime(2015, 12, 8, 0, 0)
delimiter
f.write(text)
delimiter
d.update(locals())
delimiter
Notify.uninit()
delimiter
celery.config_from_object(app.config)
delimiter
len(a)
delimiter
a.append(row)
delimiter
print(df.attr.iloc[i])
delimiter
data = np.random.random((int(1000.0), int(100000.0)))
delimiter
any((a[:] == [1, 2]).all(1))
delimiter
np.vstack((a, a, a))
delimiter
doctest.testmod()
delimiter
plt.setp(plt.xticks()[1], rotation=90)
delimiter
cursor.execute(qSQL)
delimiter
print(json.dumps(data, default=date_handler))
delimiter
frame1.axes.get_yaxis().set_ticks([])
delimiter
arr.append(list(df.iloc[i]))
delimiter
threading.Thread.__init__(self)
delimiter
[map(counter.__getitem__, all_features) for counter in counters]
delimiter
file.close()
delimiter
~pd.isnull(df[list_of_cols])
delimiter
2 * frexp(n)[0]
delimiter
gdata.gauth.AeLoad(users.get_current_user().user_id())
delimiter
G = nx.MultiGraph()
delimiter
count_array = [int(i.count) for i in mvv_list.collect()]
delimiter
df.stack()
delimiter
sock.close()
delimiter
np.vstack([np.diag(c[:, (i), (i)]) for i in range(A.shape[0])]).T
delimiter
f = open(filename)
delimiter
AuthorFormSet = modelformset_factory(Author, extra=2, form=AuthorForm)
delimiter
qs.filter(user=request.user)
delimiter
screen.mainloop()
delimiter
QtCore.Qt.ItemIsEnabled
delimiter
MyApp().run()
delimiter
result[numpy.argsort(A)] = numpy.sort(B)
delimiter
time.sleep(10)
delimiter
print(queue.method.message_count)
delimiter
item.set_fontsize(20)
delimiter
cal_window.show_all()
delimiter
test_moduleA.py
delimiter
mpl.ticker.MaxNLocator.__init__(self, nbins=9, steps=[1, 2, 5, 10])
delimiter
main()
delimiter
dict((k, json.dumps(v)) for k, v in list(json.loads(val).items()))
delimiter
signal.signal(signal.SIGALRM, old_handler)
delimiter
(m.T * c).T
delimiter
df.iloc[idx]
delimiter
new_list = list(range(1, 6)) + list(range(15, 20))
delimiter
app.MainLoop()
delimiter
fig = plt.figure()
delimiter
os.chdir(storetodir)
delimiter
axborder.set_ylim(binimg.shape[0], -1)
delimiter
print(codeproc.stdout.read())
delimiter
image = Image.open(f)
delimiter
dset1.apply(func, axis=1)
delimiter
layout.addWidget(self.label)
delimiter
repeat(lambda : bar(42))
delimiter
first_num, first_arr, second_num, second_arr = generate_arrangements(data)
delimiter
nhb = random.choice(range(0, len(A)))
delimiter
connection.commit()
delimiter
elapsed2s.append(elapsed2)
delimiter
elapsed1s.append(elapsed1)
delimiter
d[key].append(row[1:])
delimiter
subsampled = df.ix[(choice(x) for x in grouped.groups.values())]
delimiter
p.map(process_file, listdir(inputDir))
delimiter
locale.resetlocale()
delimiter
b.foo()
delimiter
python - mfoo.bar
delimiter
thread.start()
delimiter
img.size
delimiter
User.insert_many(row_dicts).execute()
delimiter
df.Group.map(df.Group.value_counts())
delimiter
plt.draw()
delimiter
pdf_text_object.textOut(text)
delimiter
imp.load_dynamic(__name__, __file__)
delimiter
form.save()
delimiter
main()
delimiter
df = df.sort()
delimiter
mock.assert_called_with(42)
delimiter
listOfStuff = [doSomethingWith(v) for v in range(n // 2, -1, -1)]
delimiter
fig.subplots_adjust(wspace=0.4)
delimiter
print(df[(df.Symbol1 == df.Symbol2) & (df.BB == df.CC)])
delimiter
wx.StaticBitmap(panel, -1, bmp, (10, pos), (bmp.GetWidth(), bmp.GetHeight()))
delimiter
other_app.other_view(request, **kwargs)
delimiter
print(map(float_or_str, line.split()))
delimiter
myArray = np.vstack(myArray)
delimiter
process_data(line)
delimiter
moduleZ.py
delimiter
plt.plot(X, Y, lw=0)
delimiter
do_some_other_stuff()
delimiter
dict_lol = dict((item[1], item) for item in lol)
delimiter
legline.set_color(color)
delimiter
df_out
delimiter
json.dumps(result, default=json_util.default)
delimiter
fig, ax = plt.subplots()
delimiter
self.__class__(data)
delimiter
kwargs_new = {str(k): v for k, v in list(d.items())}
delimiter
t.start()
delimiter
f(*args, **kwargs)
delimiter
print(tag.nextSibling.nextSibling.__class__)
delimiter
[(a if C else b) for i in items]
delimiter
uniq_animal_groups = map(list, set(map(tuple, animal_groups)))
delimiter
im1 = ndimage.grey_erosion(im, size=(15, 15))
delimiter
fig, ax = plt.subplots()
delimiter
x + 1
delimiter
root.withdraw()
delimiter
pool = multiprocessing.Pool(multiprocessing.cpu_count())
delimiter
r = requests.get(URL, cookies=jar)
delimiter
foo()
delimiter
conn.close()
delimiter
greetings.hello()
delimiter
numpy.zeros((2, 2), dtype=bool)
delimiter
r.findall(s)
delimiter
output, err = p.communicate()
delimiter
a = a.reshape(-1)
delimiter
d += timedelta(days=6 - d.weekday())
delimiter
largest_names = [x[0] for x in heapq.nlargest(6, your_list, key=itemgetter(1))]
delimiter
print(yaml.load(f))
delimiter
jsonify(result=wordlist)
delimiter
print([filters.get(word) for word in sentence.split() if word in filters])
delimiter
proc.terminate()
delimiter
[[2], [0], [1], [0], [1], [0]]
delimiter
np.dot(Zij, G)
delimiter
tuple(x[0] for x in G)
delimiter
print(t.timeit(5))
delimiter
fig, ax = plt.subplots()
delimiter
ax2.set_xticks([100, 80, 50])
delimiter
df
delimiter
a.remove(i)
delimiter
hex((val + (1 << nbits)) % (1 << nbits))
delimiter
pyglet.app.run()
delimiter
distinct()
delimiter
result = response.read()
delimiter
hashlib.md5(img.tostring()).hexdigest()
delimiter
button.pack()
delimiter
MyClass in MyClass.__mro__
delimiter
self.listTools.add(self.addButton)
delimiter
a.append((1, 2, 4))
delimiter
xml.close()
delimiter
sorted([B, C, A, D, X], key=lambda cls: len(cls.mro()))
delimiter
hash(self.PersonID)
delimiter
str_list = [item for item in str_list if item]
delimiter
next(hex_list)
delimiter
OrderedDict(sorted(list(d.items()), key=lambda t: t[1]))
delimiter
X[:, (i)] = x
delimiter
platform.system()
delimiter
print(newcorpus.sents())
delimiter
len(set(it_copy)) == 1
delimiter
DISABLE_SIMULATION = _DISABLE_SIMULATION
delimiter
a.flatten()
delimiter
random.shuffle(array)
delimiter
pprint(data)
delimiter
assert len(A) == len(B)
delimiter
uniq_animal_groups = map(list, set(map(tuple, map(set, animal_groups))))
delimiter
all(x == 0 for x in list(d.values()))
delimiter
b.setdefault(j, []).append(i)
delimiter
os.remove(os.path.join(my_dir, fname))
delimiter
self.name = name
delimiter
form.save()
delimiter
newImage = myImage.copy()
delimiter
B[A[1], cat_index] = A[2]
delimiter
shutil.rmtree(tmpdir)
delimiter
f.flush()
delimiter
seq[n:] + seq[:n]
delimiter
df
delimiter
select_indices = np.where(np.logical_and(x > 1, x < 5))
delimiter
logger.addHandler(fileHandler)
delimiter
b = np.array([0] * 4)
delimiter
result = [sum(data) for data in zip(*args)]
delimiter
dot_data = StringIO()
delimiter
fig = plt.figure()
delimiter
new_list.append(x)
delimiter
unique_a.view(a.dtype).reshape((unique_a.shape[0], a.shape[1]))
delimiter
plt.gcf().tight_layout()
delimiter
assert np.allclose(result, expected)
delimiter
Thread.__init__(self)
delimiter
arity.__class__.arity = arity
delimiter
numpy.histogram(my_values, bins=numpy.r_[-numpy.inf, my_bins, numpy.inf])
delimiter
p.start()
delimiter
df.clip(upper=4400).plot.hist(stacked=True, bins=bins, normed=True)
delimiter
naive_dt = datetime.now()
delimiter
df = pd.DataFrame([[1, 0, 0, 0], [0, 0, 1, 0]])
delimiter
self._server.shutdown()
delimiter
ax.set_autoscale_on(False)
delimiter
traceback.print_exc()
delimiter
help(hehe)
delimiter
arr[([1, 1]), :]
delimiter
[x for x in mylist if not any(c.isdigit() for c in x)]
delimiter
traceback.print_exc()
delimiter
self._list[x]
delimiter
b[i] = 1
delimiter
itertools.islice(mygenerator(), 10)
delimiter
l = json.loads(s)
delimiter
afield = forms.ChoiceField(choices=my_choices)
delimiter
a, b = 1, 2
delimiter
fig = plt.figure()
delimiter
func()
delimiter
Py_Finalize()
delimiter
dialog.setAttribute(QtCore.Qt.WA_DeleteOnClose)
delimiter
stack[-1].append([])
delimiter
mask1 = (arange(10) > 5) & (arange(10) <= 8)
delimiter
self.sock.connect((host, port))
delimiter
list(map(chr, list(range(ord(s[0]), ord(s[-1]) + 1))))
delimiter
a.reshape((2, 2, 2))
delimiter
logger = logging.getLogger(__name__)
delimiter
a, result = a[:-1], a[-1]
delimiter
top.sort(key=lambda a: a[1])
delimiter
b = tuple(b)
delimiter
print(delta.days * 24 * 60 * 60 + delta.seconds + delta.microseconds / 1000000.0)
delimiter
tf.contrib.layers.embedding_column(workclass, dimension=8)
delimiter
GEN_SUSPENDED
delimiter
x.view((float, len(x.dtype.names)))
delimiter
setattr(self, k, d[k])
delimiter
arraymean = sum([int(i[0]) for i in array]) / len(array)
delimiter
result.append(list[-1])
delimiter
output.append(float(row[4]))
delimiter
words = [x for x in words if x not in bad_words]
delimiter
attrList = map(lambda x: x.attr, objectList)
delimiter
list(set([x for x in l if l.count(x) > 1]))
delimiter
[[6, 2], [7, 5], [8, 7], [9, 9], [0, 4]]
delimiter
print(x)
delimiter
do_something_dangerous()
delimiter
fig.autofmt_xdate()
delimiter
AB = [(a + b) for a, b in itertools.zip_longest(A, B, fillvalue=0)]
delimiter
unittest.main()
delimiter
sys.exit(1)
delimiter
ax2 = ax.twinx()
delimiter
foo()
delimiter
any(some_func(x) for x in some_list if x > 5)
delimiter
r.json()
delimiter
EMAIL_USE_TLS = True
delimiter
time.sleep(1)
delimiter
from_date = from_date - datetime.timedelta(days=1)
delimiter
df.dtypes
delimiter
out.close()
delimiter
some_value
delimiter
xml = xml.dom.minidom.parse(xml_fname)
delimiter
uuid.uuid1(random.randint(0, 281474976710655))
delimiter
unittest.main(failfast=True)
delimiter
nonzero(r_[1, diff(t)[:-1]])
delimiter
bar.foobar()
delimiter
dev / tests / test_file.py
delimiter
print(textelem.text)
delimiter
x = json.loads(x)
delimiter
np.vstack([topbottom, xvalues])[:, (mask)].T
delimiter
ax.xaxis.set_major_formatter(major_formatter)
delimiter
fig = plt.figure()
delimiter
s.add(get_my_new_random_number())
delimiter
hmag = np.array(hmag)
delimiter
self.label.pack()
delimiter
ispower(1, 1)
delimiter
print(json.JSONEncoder().encode(response))
delimiter
df.loc[:, (df.dtypes == object)]
delimiter
random.shuffle(ans)
delimiter
args = parser.parse_args()
delimiter
norm.cdf(1.96)
delimiter
self.fileobj.seek(-8, 1)
delimiter
Base.metadata.create_all(engine)
delimiter
views.py
delimiter
foo.f()
delimiter
element.clear()
delimiter
[1426802400, 1429218000]
delimiter
firstvalue = mvv_list[0].mvv
delimiter
cursor.commit()
delimiter
self.scrollbar.grid(column=2, sticky=N + S)
delimiter
ax2.set_ylim([np.amin(image[:, (5), (5)]), np.amax(image[:, (5), (5)])])
delimiter
print(p.stderr.read())
delimiter
plt.show()
delimiter
QtCore.QAbstractListModel.__init__(self)
delimiter
canvas.configure(yscrollcommand=vsb.set)
delimiter
soup.prettify()
delimiter
print(Foo.instance_count)
delimiter
conn, addr = s.accept()
delimiter
zip(*lol)
delimiter
ax.yaxis.set_visible(False)
delimiter
tableWidget.show()
delimiter
json_data.close()
delimiter
bool(urlparse.urlparse(url).netloc)
delimiter
hash(obj)
delimiter
print(request.headers)
delimiter
subList = [tempList[n:n + N] for n in range(0, len(theList), N)]
delimiter
feeder_lock_object.lock()
delimiter
f.columnconfigure(0, weight=1)
delimiter
parser.parse(string)
delimiter
ax.clear()
delimiter
anims = [f for f in files if f[2].lower() not in IMAGE_TYPES]
delimiter
seen_add(element)
delimiter
a[b]
delimiter
self.window.show()
delimiter
batch.execute(http=http)
delimiter
layout = QVBoxLayout()
delimiter
soup = BeautifulSoup(html)
delimiter
do_the_stuff(my_list)
delimiter
zip(*r)
delimiter
plt.subplots_adjust(top=0.55)
delimiter
df.stack().loc[first:last].min()
delimiter
run(reloader=True)
delimiter
str(self.__dict__)
delimiter
cursor.execute(CQLString)
delimiter
x.pop()
delimiter
np.testing.assert_almost_equal((x, x, x), (y, y, y), 5)
delimiter
bar()
delimiter
c.save()
delimiter
fnan == fnan
delimiter
zip(words[1:], words[:-1])
delimiter
outsock.close()
delimiter
sorted(list(range(len(a))), key=a.__getitem__)
delimiter
PLT.show()
delimiter
sns.regplot(x, y, lowess=True)
delimiter
a[a < 0] = 0
delimiter
cmp(x[1], y[1])
delimiter
main()
delimiter
event.SetEventObject(self)
delimiter
option.click()
delimiter
datetime.datetime(year=year, month=month, day=day, hour=hour)
delimiter
[(i + j) for i, j in zip(list_of_urls, string.lowercase[:14])]
delimiter
contents = fh.read()
delimiter
print(db_data.count(with_limit_and_skip=True))
delimiter
outputStream.close()
delimiter
plt.show()
delimiter
np.arange(lllon, urlon, 2.0),
delimiter
print(a, b, c)
delimiter
self.widget.click.connect(self.onWidgetClick)
delimiter
xlim(0, 0.8)
delimiter
print(A[0], B[0])
delimiter
print(2 * math.acos(0))
delimiter
max(a, key=itemgetter(1))[0]
delimiter
out.close()
delimiter
np.sum(np.linalg.solve(L, xdiff.T) ** 2, axis=0)
delimiter
globals()[name] = value
delimiter
syncdict.update([(key, syncdict.get(key) + inc)])
delimiter
ax2.imshow(template, cmap=plt.cm.gray)
delimiter
print(list1[-5:])
delimiter
sys.exit(app.exec_())
delimiter
gc.get_objects()
delimiter
ASTVisitor.__init__(self)
delimiter
logger = logging.getLogger(COMPANY_LOGGER)
delimiter
m[:, :, ::-1]
delimiter
server.terminate()
delimiter
APP_ROOT = os.path.dirname(os.path.abspath(__file__))
delimiter
C.__init__(self)
delimiter
[(y1 - x1, y2 - x2) for (x1, x2), (y1, y2) in combinations(myList, 2)]
delimiter
col_1 = M[:, (1)]
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
(b - a).total_seconds()
delimiter
writer.writerow(row)
delimiter
int(round(170, -2))
delimiter
self.view.header().resizeSection(column, width)
delimiter
test()
delimiter
tdelta.total_seconds()
delimiter
root.mainloop()
delimiter
self.assertAlmostEqual(em(1, 2), 0.1481, 4)
delimiter
print(len(request.headers))
delimiter
[(x * next(cyc)) for x in lis[0]]
delimiter
i = int(float(s))
delimiter
ax.xaxis.set_major_formatter(mpl.ticker.FuncFormatter(myFormatter))
delimiter
tested = [i for i in input if i > 2]
delimiter
pprint(od, width=40)
delimiter
args = parser.parse_args()
delimiter
flat = itertools.chain.from_iterable(pairs)
delimiter
HttpResponse(status=204)
delimiter
mylib.mySub.argtypes = [POINTER(c_double), c_int, POINTER(c_double)]
delimiter
ax.yaxis.set_major_formatter(y_formatter)
delimiter
user = User.objects.get(pk=uid)
delimiter
a_to_as = np.argsort(a)
delimiter
even = list(next(iter(())) if n == 412 else n for n in numbers if 0 == n % 2)
delimiter
ttk.Radiobutton(self.mainframe, value=0).grid(column=1, row=2)
delimiter
print(ArrayAddition([2, 95, 96, 97, 98, 99, 100]))
delimiter
map(func, *sequences)
delimiter
print(float(x))
delimiter
[ips_data[ip] for ip in sorted_ips]
delimiter
nDigits = int(ceil(log(nmb, base)))
delimiter
plt.show()
delimiter
reactor.run()
delimiter
self.assertEqual(expected, self.nums.marshal())
delimiter
self.fcall(*args)
delimiter
signal.signal(signal.SIGTERM, sigterm_handler)
delimiter
admin.site.register(LocationGroup)
delimiter
container.grid_columnconfigure(0, weight=1)
delimiter
numpy.fromiter((your_func(row) for row in X), dtype=bool, count=len(X))
delimiter
time.sleep(1)
delimiter
zip(*data)
delimiter
self.frame.pack()
delimiter
f.close()
delimiter
ainb = np.array([(x in b) for x in a[:, (2)]])
delimiter
name = CharField()
delimiter
f.read()
delimiter
plt.ylim(-1, 2)
delimiter
[str[i:i + chunk_size] for i in range(0, len(str), chunk_size)]
delimiter
l[t[0]][t[1]] = something
delimiter
unq_out = np.any(np.diff(sorted_Ar, axis=0), 1).sum() + 1
delimiter
sorted(li, key=lambda x: x.anniversary_score)
delimiter
sys.exit(-1)
delimiter
np.roots([a, b, c])
delimiter
main()
delimiter
title = models.CharField()
delimiter
plt.show()
delimiter
MyInterpreter().cmdloop()
delimiter
x = np.linspace(0, 2 * np.pi)
delimiter
np.issubdtype(np.complex64, np.integer)
delimiter
sizer.Add(widget, proportion=0, style=wx.ALL, border=5)
delimiter
csv_out.close()
delimiter
self.fp.flush()
delimiter
print([v for v in values if len(v[1]) > 1])
delimiter
str1_list == str2_list
delimiter
int(s)
delimiter
pprint(list(iter_rows(ws)))
delimiter
ax.plot(data1)
delimiter
tunnel.start()
delimiter
plt.plot(x, y)
delimiter
xbook.close()
delimiter
pd.Series(test).where(lambda x: x != 1).dropna()
delimiter
f(*args)
delimiter
process.poll()
delimiter
lines = [line for line in f if line.strip()]
delimiter
info[2][1] == 6
delimiter
Text.__init__(self, *args, **kwargs)
delimiter
a, b = given_str[:len(given_str) / 2], given_str[len(given_str) / 2:]
delimiter
s.reset_index()
delimiter
df.reindex(all_days)
delimiter
get_value(dic, 0)
delimiter
mdd, start, end
delimiter
td = timedelta(seconds=TimeModel.objects.get(id=1).time)
delimiter
fig.canvas.draw()
delimiter
[a, b, c]
delimiter
subprocess.call([path_to_notepad, path_to_file])
delimiter
data = [(x if x.isalpha() else float(x)) for x in line.split()]
delimiter
np.array([0, 1]).any()
delimiter
data = self.request.recv(1024)
delimiter
config = configparser.ConfigParser()
delimiter
file = os.path.join(os.getcwd(), os.listdir(os.getcwd())[0])
delimiter
plot(x, y)
delimiter
dict([(elem, 0) for elem in s])
delimiter
out[1:, :] += tmp[:-1, :]
delimiter
ax.xaxis.set_major_locator(ticker.MultipleLocator(20))
delimiter
ssh.load_system_host_keys()
delimiter
keys = [k for k, v in Arr]
delimiter
plt.show()
delimiter
requests.get(url, stream=True)
delimiter
aw2.show()
delimiter
do_something(i)
delimiter
out = []
delimiter
q.put(urllib.request.urlopen(url).read())
delimiter
print(type(parsed))
delimiter
A = alpha * x * y + beta * x ** 2 + gamma * y ** 2
delimiter
foo(**{key: 1, foo: 2})
delimiter
json.dumps(datetime.datetime.now(), default=date_handler)
delimiter
found = m.group(1)
delimiter
print(response.read())
delimiter
os.close(fh1)
delimiter
a.reshape((-1, 5))[:, 1:4] = 100
delimiter
vfunc(*np.ix_(xv, yv, zv))
delimiter
email = forms.EmailField(required=True)
delimiter
fib(n - 1) + fib(n - 2)
delimiter
p.wait()
delimiter
[push(D, k, K) for K, D in list(c.items())]
delimiter
signal.signal(signal.SIGINT, signal_handler)
delimiter
mask = numpy.random.choice([False, True], len(data_arr), p=[0.75, 0.25])
delimiter
list(ordered_dict.values())[2]
delimiter
words[0] == words[-1] == check_str
delimiter
plt.ylim([0, 5])
delimiter
winfile.close()
delimiter
df.A.append(df.B).dropna().reset_index(drop=True)
delimiter
time.sleep(2)
delimiter
print([arr[i][i][i] for i in range(len(arr))])
delimiter
uwsgi - H / path / to / your / virtualenv
delimiter
urllib.request.urlopen(r)
delimiter
print(my_queryset.query)
delimiter
self.mfcChanged.emit()
delimiter
deletemydict[key]
delimiter
logger = get_task_logger(__name__)
delimiter
a[(0, 2), :, :]
delimiter
self.rect.left += self.xvel
delimiter
pipe.wait()
delimiter
[k for k, v in groupby(sorted(a))]
delimiter
a + _(b * c)
delimiter
c = [(x + [y]) for x, y in zip(a, b)]
delimiter
data = numpy.fromfile(my_file, dtype=numpy.uint8).reshape(-1, N)
delimiter
print([name for name in dir(B) if isbuiltin(getattr(B, name))])
delimiter
sample_object.save()
delimiter
print(tree.getpath(e))
delimiter
os.makedirs(dest_dir)
delimiter
time.sleep(5)
delimiter
list(range(*args))
delimiter
r, g, b = wfloat.transpose((2, 0, 1))
delimiter
d = {k: v for dct in l for k, v in list(dct.items())}
delimiter
f.write(urllib.request.urlopen(url).read())
delimiter
numpy.random.randint(0, 1000, count) * 0.001
delimiter
s.sort()
delimiter
ax.plot(x, y * 2)
delimiter
zip_longest(fillvalue=fillvalue, *args)
delimiter
[0, 1, 1, 1, 1, 1, 1, 0],
delimiter
l = [cond(i) for i in range(1, n)]
delimiter
base64.urlsafe_b64encode(encoded_string)
delimiter
ax.plot(x, y)
delimiter
c.execute(query)
delimiter
print(lxml.etree.tostring(the_doc, pretty_print=True))
delimiter
screen.blit(surf2, (200, 200, 100, 100))
delimiter
plt.figure(figsize=(7, 7))
delimiter
sizer.Add(fsizer, 0, wx.EXPAND)
delimiter
tf.matmul(tf.transpose(x), y)
delimiter
logging.info(line)
delimiter
main()
delimiter
tree.add(2)
delimiter
plt.show()
delimiter
avg_sum.append(A.sum(axis=1).mean())
delimiter
(self.players1.all() | self.players2.all()).distinct()
delimiter
result = process.communicate()[0]
delimiter
signal.signal(signal.SIGINT, signal_handler)
delimiter
Gtk.main()
delimiter
options = webdriver.ChromeOptions()
delimiter
int(math.ceil(x / 100.0)) * 100
delimiter
[i for i in a if i != [0]]
delimiter
[solution for solution in solve(4)]
delimiter
time.sleep(0.5)
delimiter
image.astype(np.uint8)
delimiter
map(lambda d: abs(d - date), dates)
delimiter
sys.setrecursionlimit(100000)
delimiter
cols.append(str(col))
delimiter
s.cookies.clear()
delimiter
dates_dict[key].append(date)
delimiter
np.maximum.accumulate(Q, axis=1)
delimiter
self.own_id = current_socket.getsockname()[1]
delimiter
ax.yaxis.set_major_locator(ticker.MultipleLocator(20))
delimiter
ax.plot(x, y)
delimiter
random.shuffle(l)
delimiter
stream = sys.argv[1] if len(sys.argv) > 1 else sys.stdin
delimiter
obj.save()
delimiter
wx.Panel.__init__(self, parent)
delimiter
x = int(x)
delimiter
i += 1
delimiter
plt.show()
delimiter
plt.setp(ax2.get_yticklabels(), visible=False)
delimiter
json.dump(my_dict, f)
delimiter
a.split()
delimiter
sum(map(my_condition, l))
delimiter
ax.add_patch(patch)
delimiter
start = str(cols[1].find(text=True))
delimiter
df.loc[(df[0] == k[0]) & (df[1] == k[1])] = [[v[0], v[1]]]
delimiter
food = [random.choice(i) for i in list(my_dict.values())]
delimiter
deletex[k]
delimiter
indices = zip(*sp_matrix.nonzero())
delimiter
X[np.ix_(idx, idx)]
delimiter
mail.starttls()
delimiter
[z0] * len(seconds)
delimiter
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
delimiter
p.start()
delimiter
x = numpy.arange(data.shape[1])
delimiter
out.value_counts(sort=False).plot.bar()
delimiter
test.pop(5)
delimiter
add(*l)
delimiter
plt.show()
delimiter
writer.writerows(clean_list)
delimiter
a = fig.add_subplot(1, 2, 1)
delimiter
[0, 0, 0, 0, 1, 0, 0, 0],
delimiter
signal.signal(signal.SIGALRM, _handle_timeout)
delimiter
array.sort(key=lambda k: (k[0] - point[0]) ** 2 + (k[1] - point[1]) ** 2)
delimiter
os.open(os.devnull, os.O_RDWR)
delimiter
self.setCentralWidget(self.view)
delimiter
conn.rollback()
delimiter
y = numpy.arange(data.shape[0])
delimiter
print(dict(d))
delimiter
[i for i, (a1, a2) in enumerate(zip(s1, s2)) if a1 != a2]
delimiter
leg = plt.legend()
delimiter
f_new.close()
delimiter
df.as_matrix(columns=[df[1:]])
delimiter
self.axes.set_title(title)
delimiter
num_words += len(line.split())
delimiter
new_x = np.ma.masked_where(np.ma.getmask(m), x)
delimiter
image = np.zeros((max_x, max_y))
delimiter
index = np.array([0, 1, 2])
delimiter
new.append(l[i:i + 5])
delimiter
main(sys.argv[1])
delimiter
ax1.plot(list(range(0, 10)))
delimiter
print(r.content)
delimiter
df.to_excel(writer, index=False)
delimiter
line = line.strip()
delimiter
heapq.heappush(heap, (-prod2, x, y - 1))
delimiter
plt.setp(g.ax_heatmap.get_xticklabels(), rotation=90)
delimiter
ttypager(text)
delimiter
self.add_widget(Label(text=str(data)))
delimiter
type(c)(a)
delimiter
A.f.__func__(b)
delimiter
sys.path.append(somepath)
delimiter
A = (A - mean(A)) / std(A)
delimiter
buffer += ser.read(ser.inWaiting())
delimiter
p = np.poly1d(np.polyfit(t, data, 2))
delimiter
l.extend(t)
delimiter
fig = plt.figure()
delimiter
soup = BeautifulSoup.BeautifulSoup(data)
delimiter
ax1.set_color_cycle([cm(1.0 * i / (NPOINTS - 1)) for i in range(NPOINTS - 1)])
delimiter
new_list.append([some_tuple])
delimiter
pir(df)
delimiter
self.figure.canvas.draw()
delimiter
ax.imshow(X, cmap=cm.jet)
delimiter
f.write(image_response.read())
delimiter
ax.set_xlim(-1, 7)
delimiter
df.merge(melted_items, left_index=True, right_index=True)
delimiter
[x for x in data if func(x)]
delimiter
recur(n - 1, count + 1)
delimiter
self.response.write(name)
delimiter
document.append(line)
delimiter
[x for x in range(len(self.states)) if self.states[x]]
delimiter
plt.show()
delimiter
series.hist(bins=division)
delimiter
driver = webdriver.Chrome()
delimiter
plt.plot(list(range(10)))
delimiter
not any(d.values())
delimiter
plt.show()
delimiter
dict((x, duplicates(List, x)) for x in set(List) if List.count(x) > 1)
delimiter
print(r[i:i + n])
delimiter
print(new_dic)
delimiter
self.assertAlmostEqual(em(1, 1), 0.6407, 4)
delimiter
a.sort(key=key, reverse=True)
delimiter
print(year_fraction(datetime.datetime.today()))
delimiter
print(counter.most_common())
delimiter
numpy.nextafter(1, 0)
delimiter
element.clear()
delimiter
df.ix[yesterday.strftime(fmt):now.strftime(fmt)]
delimiter
fig.canvas.draw()
delimiter
print((f.__name__, f.__hash__))
delimiter
plt.setp(ax2, xticks=[], yticks=[])
delimiter
win.set_keep_above(False)
delimiter
child.interact()
delimiter
plt.xlim([0, 1])
delimiter
ax1.set_color_cycle([colormap(i) for i in np.linspace(0, 1, number_of_plots)])
delimiter
a.remove(10)
delimiter
fig.autofmt_xdate()
delimiter
df.join(pd.concat([pd.DataFrame(s).T] * len(df), ignore_index=True))
delimiter
0, 1, 0, 1
delimiter
signal.alarm(0)
delimiter
urllib.request.install_opener(opener)
delimiter
(a1[:, (numpy.newaxis)] == a2).all(axis=2)
delimiter
OrderedDict(sorted(list(d.items()), key=lambda t: t[0]))
delimiter
collections.Counter(lst)
delimiter
ax.fill_between(np.arange(1, 10), 1, 2, zorder=-1, **kwargs)
delimiter
id = Column(Integer, primary_key=True)
delimiter
frame.Show()
delimiter
df.columns = zip(*col_names)[1]
delimiter
float(x) / float(x)
delimiter
my_app = MyApp()
delimiter
print(url_without_query_string)
delimiter
img.putdata(my_list)
delimiter
urllib.request.install_opener(opener)
delimiter
self.canvas = tk.Canvas(self, width=100, height=100)
delimiter
data = json.loads(json_input)
delimiter
reactor.run()
delimiter
B = np.array([2, 4, 6, 8])
delimiter
nocapture = 1
delimiter
[x for x in l1 if not any(fnmatch(x, p) for p in l2)]
delimiter
f.close()
delimiter
self.video_out.release()
delimiter
uniq_animal_groups = set(map(tuple, animal_groups))
delimiter
fig, ax = plt.subplots(2, 1)
delimiter
outfile.close()
delimiter
db.session.commit()
delimiter
conset = set(map(frozenset, consarray))
delimiter
a[::-1]
delimiter
print(message.get_payload())
delimiter
astar(formation, heuristic, solution, getneighbors)
delimiter
sanitised_path = sanitise_filesystem_path(path)
delimiter
zip_longest(fillvalue=fillvalue, *args)
delimiter
sum(masked, axis=1)
delimiter
sparse_out = coo_matrix((data, (np.arange(N), a.ravel() - 1)), shape=(N, L))
delimiter
a.tolist()
delimiter
set(df.Col1) | set(df.Col2)
delimiter
data = [str(float(fractions.Fraction(x))) for x in data]
delimiter
self.driver.close()
delimiter
[1][2][2]
delimiter
admin.site.register(FooProxy, FooAdmin2)
delimiter
(datetime.datetime.min + value).time()
delimiter
jsonpath.jsonpath(data, path)
delimiter
new_dict = dict(list)
delimiter
naive_utc_dt = datetime.utcnow()
delimiter
a = np.arange(100)
delimiter
max_idx, max_val = max(enumerate(l), key=operator.itemgetter(1))
delimiter
time.sleep(0.1)
delimiter
reader = io.open(sys.stdin.fileno())
delimiter
PLT.show()
delimiter
np.random.seed(0)
delimiter
series[10] = np.nan
delimiter
matplotlib.pyplot.close()
delimiter
np.nanargmax(a, axis=1)
delimiter
file = zipfile.ZipFile(BytesIO(request.content))
delimiter
msglist = list(chunkify(hextotal, 4096))
delimiter
ax.xaxis.set_minor_locator(MultipleLocator(0.2))
delimiter
django.setup()
delimiter
shutil.copyfileobj(infile, outfile)
delimiter
celery.start()
delimiter
x.reshape(x.shape[0], -1).shape
delimiter
Response(UserSerializer(request.user).data)
delimiter
[Factorial(x) for x in it]
delimiter
f()
delimiter
np.roll(a, -2)
delimiter
fp.close()
delimiter
gca().get_xaxis().get_major_formatter().set_useOffset(False)
delimiter
myfunc()
delimiter
res.cumsum().applymap(lambda x: np.unique(list(x)))
delimiter
plt.show()
delimiter
p.start()
delimiter
pd.DataFrame(v[i0:i1], df.loc[df.name].index[i0:i1], df.columns)
delimiter
new_string
delimiter
connection.disconnect()
delimiter
type(a).__call__(a)
delimiter
f.write(chunk)
delimiter
b.sort(key=order.get)
delimiter
self.setWindowFlags(Qt.FramelessWindowHint)
delimiter
print(f.read())
delimiter
ax.plot_surface(x, y, 10, rstride=5, cstride=5, facecolors=img)
delimiter
im = img.load()
delimiter
self.__class__.__name__
delimiter
print(df.reset_index())
delimiter
[1, 2]
delimiter
[list(g) for k, g in groupby(a)]
delimiter
self.start.connect(self.run)
delimiter
plt.bar(J2 - 0.5 * width, z(J2), width=width)
delimiter
csv_fileh.seek(0)
delimiter
User.objects.get(pk=user_id)
delimiter
ee.save()
delimiter
max(n for n in a if n < 0.7)
delimiter
{{raw | unquote_raw}}
delimiter
inspect.getargvalues(traceback.tb_frame)
delimiter
dict.__delitem__(self, key)
delimiter
p.start()
delimiter
a if b else c
delimiter
instance.save()
delimiter
df
delimiter
l = np.array([[0, 0], [0, 1], [1, 1]])
delimiter
args, unknownargs = parser.parse_known_args()
delimiter
[1][2][1]
delimiter
r = requests.post(url, files=files, data=values)
delimiter
pprint({key: getattr(f, key) for key in dir(f)})
delimiter
self.fig = mplfig.Figure(figsize=(5, 4), dpi=100)
delimiter
frec(word)
delimiter
keys = set()
delimiter
ax.bar(list(range(len(dates))), values, width=width)
delimiter
module1.f()
delimiter
s.run()
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
nums.sort(key=functools.cmp_to_key(lambda x, y: cmp(y + x, x + y)))
delimiter
plt.legend(handles=legend_patches)
delimiter
ssh_client = paramiko.SSHClient()
delimiter
print({i: f.lower() for i in nums for f in fruit})
delimiter
request.finish()
delimiter
print(cursor.fetchall())
delimiter
df.reindex(ind - ind2).join(df2.reindex(ind - ind2))
delimiter
inithello()
delimiter
base64.b64decode(a)
delimiter
ax.scatter(x, y)
delimiter
np.shape(result)
delimiter
reader = csv.reader(f)
delimiter
plt.show()
delimiter
df.index.get_level_values(0)
delimiter
p.plot(x, y)
delimiter
fig, axes = plt.subplots((2, 2))
delimiter
time.sleep(0.1)
delimiter
plt.pcolormesh(X[0:1], Y[0:1], C[0:1])
delimiter
newList = [word for word, mask in zip(s, b) if mask]
delimiter
mask[y:y + h, x:x + w] = img[y:y + h, x:x + w]
delimiter
zip(*([iter(l)] * 2))
delimiter
server.sendmail(FROMADDR, TOADDRS, msg)
delimiter
out.close()
delimiter
db.put(1)
delimiter
df.loc[i] = [float(d) for d in data]
delimiter
len([i for i in x if 60 < i < 70])
delimiter
(df == 0).astype(int).sum(axis=1)
delimiter
b = a[m]
delimiter
board.append([])
delimiter
destination.close()
delimiter
y = x[1:] - x[:-1]
delimiter
c.coords(x)
delimiter
plot(x, sin(x))
delimiter
instance._meta.app_label
delimiter
subprocess.Popen(SCRIPT % filename, shell=True)
delimiter
python - V
delimiter
plt.ion()
delimiter
next(p)
delimiter
x.astype(int)
delimiter
sys.stdout = old_stdout
delimiter
[x for x in l if x not in f]
delimiter
[x for i, x in enumerate(a) if i in indices]
delimiter
list(intermix([1, 0, 1, 1, 2, 1, 0, 1, 1, 1, 2]))
delimiter
a()
delimiter
picture = pygame.transform.scale(picture, (1280, 720))
delimiter
Silly(0)
delimiter
ax.yaxis.set_visible(False)
delimiter
[id(i) for i in x]
delimiter
plt.figure(1)
delimiter
double([1, 2])
delimiter
cont, = ax.contourf([], [], [], 500)
delimiter
fig.canvas.draw()
delimiter
int(s)
delimiter
app.MainLoop()
delimiter
isinstance(x, int)
delimiter
sorted(array, key=lambda x: x is 0)
delimiter
c.append(l)
delimiter
main_sizer.Add(content_sizer, 1, wx.EXPAND)
delimiter
a = A(10)
delimiter
file.seek(0, os.SEEK_END)
delimiter
print(url)
delimiter
ax.set_ylim(0, max_height)
delimiter
a[i] = d.get(a[i], a[i])
delimiter
surround.py
delimiter
result.append(item)
delimiter
self.show()
delimiter
xl.ActiveWorkbook.Close(SaveChanges=1)
delimiter
driver.switch_to_default_content()
delimiter
areas_pos = abs(z[:-1] + z[1:]) * 0.5 * dx
delimiter
out, err = proc.communicate()
delimiter
fig = plt.figure(figsize=(10, 5))
delimiter
shout.start()
delimiter
list(f([9, 8], [2, 1]))
delimiter
map(int, testList)
delimiter
img.show()
delimiter
print((a, b))
delimiter
wrapper(fn(*args, **kw))
delimiter
[ulist.append(x) for x in l if x not in ulist]
delimiter
print(a, b, c, d)
delimiter
dict_you_want = {your_key: old_dict[your_key] for your_key in your_keys}
delimiter
plt.show()
delimiter
sys.stdout.write(line)
delimiter
user().key().id()
delimiter
list_comprehension = [i for i in range(4) if i > 0]
delimiter
unbroadcast(y).shape
delimiter
plt.show()
delimiter
z, x, y = d.nonzero()
delimiter
text = str(encoded_string, the_encoding)
delimiter
arr[:] = [a, b]
delimiter
a1[mask.A] = 0
delimiter
ax2.yaxis.get_offset_text().set_color(plot_ax2.get_color())
delimiter
[item for item in mylist if item.isalpha()]
delimiter
thread.start_new_thread(loop0, ())
delimiter
[n]
delimiter
plt.show()
delimiter
ax.set_theta_direction(-1)
delimiter
graph.tree().pprint()
delimiter
latest_subdir = max(all_subdirs, key=os.path.getmtime)
delimiter
np.where(binplace == 2)
delimiter
self._numberButtons[i].clicked.connect(lambda i=i: self._number(i))
delimiter
self.listbox.pack(padx=10, pady=10)
delimiter
setattr(self, key, value)
delimiter
do_post_install_stuff()
delimiter
print(k, a[k])
delimiter
data = s.recv(4096)
delimiter
app.exec_()
delimiter
print(Foo.bar.__get__)
delimiter
uniques[col].update(chunk[col].unique())
delimiter
ax.yaxis.set_ticks([])
delimiter
sys.exit(1)
delimiter
f.write(s)
delimiter
print(df1[[0, 7]])
delimiter
l = [s.name for s in sections]
delimiter
self.transport.loseConnection()
delimiter
self.suggestions.append(a[1])
delimiter
p.map(g, list(range(10)))
delimiter
self.name
delimiter
time.sleep(1)
delimiter
print(user_result)
delimiter
subprocess.call(cmd, stdin=fd)
delimiter
df.drop(df.index.get_duplicates())
delimiter
[0, 0, 1, 1, 1, 1, 1, 0],
delimiter
self.selenium.start()
delimiter
od = OrderedDict(sorted(list(d.items()), key=lambda x: x[1], reverse=True))
delimiter
os.kill(int(pid), 0)
delimiter
app.exec_()
delimiter
(x & -x).bit_length() - 1
delimiter
show()
delimiter
print([[(each - x) for x in l] for each in l])
delimiter
dir()
delimiter
lesser = qsort([x for x in inlist[1:] if x < pivot])
delimiter
writer = csv.writer(f)
delimiter
a = 1 if x < 1 else 10 if x > 10 else x
delimiter
B = A[0]
delimiter
conv1d_on_image = Reshape((dim_x, output_channels))(conv1d_on_image)
delimiter
yourdate = dateutil.parser.parse(datestring)
delimiter
plt.show()
delimiter
student = Student.objects.get(user=id)
delimiter
a[:, :, :, (0)].flatten()
delimiter
ax.yaxis.labelpad = 20
delimiter
json.dumps(_data, indent=4)
delimiter
plt.show()
delimiter
descendents_ancestors.add(descendent)
delimiter
min(dates, key=lambda d: abs(d - date))
delimiter
plt.show()
delimiter
mask.reshape(-1, 20).sum(1)
delimiter
sleep(1)
delimiter
df.loc[mask]
delimiter
logger.setLevel(logging.INFO)
delimiter
api.update_status(status=single_tweet)
delimiter
print(nat.Poland)
delimiter
output.writeframes(data[0][1])
delimiter
self.thread = threading.Thread(target=self.run, args=())
delimiter
print(df.to_csv(index=False, header=False))
delimiter
ax.set_ylim(-40, 40)
delimiter
pd.concat(vals, axis=1, keys=keys, **kwargs)
delimiter
obj.save()
delimiter
root = Tk()
delimiter
plt.show()
delimiter
process.poll()
delimiter
categories = Category.filter(animals__in=animals).all()
delimiter
s.sendmail(me, you, msg.as_string())
delimiter
l.extend([pad] * (n - len(l)))
delimiter
b = list(a)
delimiter
df.plot()
delimiter
map(list, zip(*lis))
delimiter
size = sum(1 for _ in bucket.objects.all())
delimiter
x, y = np.ogrid[:shape[0], :shape[1]]
delimiter
html_source = driver.page_source
delimiter
ax.set_axis_off()
delimiter
start.mainloop()
delimiter
set(chain.from_iterable(df.genres))
delimiter
db = client.get_default_database()
delimiter
df.idxmax()
delimiter
sys.exit()
delimiter
[row.tostring() for row in data]
delimiter
csv_writer = csv.writer(csv_file)
delimiter
np.vstack(np.hsplit(a, m / k))
delimiter
plt.show()
delimiter
Z[np.where(Z == 0)] = np.nan
delimiter
cv2.CV_FONT_HERSHEY_SIMPLEX
delimiter
self.SetIcon(icon)
delimiter
context.pop()
delimiter
x += tuple(y)
delimiter
audio.save()
delimiter
plt.plot(xvalues, yvalues)
delimiter
setattr(self, attr, getattr(student, attr))
delimiter
pts = [(10, 10), (10, 11), (20, 11), (20, 10), (10, 10)]
delimiter
ii = (s1 ** 2 + s2 ** 2 < 1).sum()
delimiter
GL.glVertexAttribPointer(self.loc, 1, GL.GL_FLOAT, GL.GL_FALSE, 0, 0)
delimiter
p2.stdout.close()
delimiter
pg.draw.rect(surf, STIMCOL, (10, 20, 40, 50))
delimiter
lst[i:] + lst[:i]
delimiter
json.dump(pickle.load(fpick), fjson)
delimiter
inF.close()
delimiter
x_new = sparse.lil_matrix(sparse.csr_matrix(x)[:, (col_list)])
delimiter
print((f, b))
delimiter
scipy.stats.linregr(X, Y)
delimiter
{k: (v() if callable(v) else v) for k, v in a.items()}
delimiter
repo = user.create_repo(full_name)
delimiter
plt.show()
delimiter
pd.get_dummies(s1[s1.notnull()])
delimiter
time.sleep(1)
delimiter
blue_count = len(set(list_of_blue_items).difference(list_of_all_items))
delimiter
toppings = forms.ModelMultipleChoiceField(queryset=Topping.objects.all())
delimiter
df_norm.max() - df_norm.min()
delimiter
topten = sorted(list(mydict.items()), key=itemgetter(1), reverse=True)[0:10]
delimiter
browser = webdriver.Chrome(chrome_options=co)
delimiter
self.send(response.toXml())
delimiter
print(count.most_common(16))
delimiter
[(a, b, c) for a in range(x + 1) for b in range(y + 1) for c in range(z + 1)]
delimiter
f.seek(0, os.SEEK_END)
delimiter
plt.show()
delimiter
traceback.print_exc()
delimiter
app.MainLoop()
delimiter
forwarder.write(serial_out)
delimiter
root = Tk()
delimiter
GpsPoint(self.x + other, self.y + other, self.z + other)
delimiter
tuples.remove((entry[1], entry[0]))
delimiter
plt.scatter(latt, lont, c=uniqueish_color(len(latt)))
delimiter
f.write(data)
delimiter
ax.set_yticklabels(map(str, list(range(90, 0, -10))))
delimiter
data.most_common(1)
delimiter
response = urllib.request.urlopen(req)
delimiter
ax.yaxis.set_visible(False)
delimiter
logger.addHandler(handler)
delimiter
set_keyring(PlaintextKeyring())
delimiter
map(int, temps)
delimiter
stdoutdata, stderrdata = process.communicate()
delimiter
self.button.pack()
delimiter
print(args.bar)
delimiter
window.show_all()
delimiter
np.random.seed(seed)
delimiter
l = math.floor(math.log10(i)) + 1
delimiter
list(collection.questions)
delimiter
entry_list.extend(x.title.text for x in feed.entry)
delimiter
a.sort(key=operator.itemgetter(1))
delimiter
random.random() < probability
delimiter
bin(100)
delimiter
df2.reindex(ix)
delimiter
[multiply(*pair) for pair in zip(iterA, iterB)]
delimiter
plt.plot(x_fit, y_fit)
delimiter
min(data, key=operator.itemgetter(1))
delimiter
y = np.linspace(0, 1, 20)
delimiter
serializer.save()
delimiter
groups.append(list(g))
delimiter
print(dishes[key])
delimiter
self.SetTitle(str(event.GetSize()))
delimiter
x, y = zip(*li)
delimiter
[(x[0] * x[1]) for x in result]
delimiter
c[a | b]
delimiter
admin.site.register(ModelMock)
delimiter
list(np.array(a) - np.array(b))
delimiter
sys.stdout.write(next(spinner))
delimiter
curses.endwin()
delimiter
obj.__dict__[prop]
delimiter
theclass
delimiter
any(lst[i:i + ln] == sub for i in range(len(sub) - ln + 1))
delimiter
str(str(self))
delimiter
sys.modules[__name__] = ModuleClass()
delimiter
n * (n - 1) * 2
delimiter
[node() for _ in range(100)]
delimiter
title = CharField()
delimiter
proc.stdin.write(text)
delimiter
firstpost = db.DateTimeProperty()
delimiter
current_time = time.time()
delimiter
plt.ylim([0, 1])
delimiter
[(y - x) for x, y in it.combinations(a, 2)]
delimiter
df.buyer_id = df.apply(make_buyer_id, axis=1)
delimiter
np.linalg.inv(a)
delimiter
lst = ast.literal_eval(strab)
delimiter
Session = sessionmaker(bind=engine, autocommit=True)
delimiter
app = Flask(__name__)
delimiter
max(MyCount, key=int)
delimiter
ax = fig.add_subplot(111)
delimiter
sp.Matrix(np.diag(d - 4) + 4)
delimiter
print(random.triangular(0, 1, 0.7))
delimiter
print([(i, sum(j)) for i, j in list(d.items())])
delimiter
p.stdin.close()
delimiter
urllib.request.install_opener(opener)
delimiter
r = int(s)
delimiter
lines.pop(0).remove()
delimiter
plt.hold(True)
delimiter
platform.version()
delimiter
[1, 0, 1, 1, 0, 0, 0, 1],
delimiter
print(eventdata)
delimiter
logger.setLevel(logging.INFO)
delimiter
pos = nx.spring_layout(G)
delimiter
content = browser.page_source
delimiter
wb.save(stream)
delimiter
time.sleep(1)
delimiter
shutil.rmtree(TEST_OBJECTS_DIR, onerror=on_rm_error)
delimiter
a.update(1)
delimiter
a.bit_length()
delimiter
print(match.groups())
delimiter
i = s.index(t.lower())
delimiter
serializer.is_valid()
delimiter
self.connection.close()
delimiter
db.session.commit()
delimiter
[datetime.datetime(2012, 1, 1, 0, 0), datetime.datetime(2012, 1, 1, 1, 0)]
delimiter
df.apply(lambda row: get_nth(row, n), axis=1)
delimiter
result.extend(list(range(a, b + 1)))
delimiter
data_cluster.fit(data_numeric)
delimiter
x.dtype
delimiter
index_list(l)
delimiter
docvec = model.docvecs[99]
delimiter
self.save()
delimiter
time.sleep(1)
delimiter
list2 = [[item[i] for item in list if len(item) > i] for i in range(0, 100)]
delimiter
client.close()
delimiter
(1, 2) in d
delimiter
print(list(kwargs.items()))
delimiter
result = DataFrame(list(cursor), columns=tweet_fields)
delimiter
draw.ellipse((0, 0) + size, fill=255)
delimiter
print(__file__)
delimiter
list(itertools.product(a, b))
delimiter
form = forms.ChapterForm(request.POST, request.FILES, instance=chapter)
delimiter
(df[self.target] == t).any()
delimiter
cfloats[i] = pyfloats[i]
delimiter
np.argmin(myList)
delimiter
[list(zip(a, p)) for p in permutations(b)]
delimiter
print(type(im))
delimiter
signal.signal(signal.SIGINT, signal.SIG_IGN)
delimiter
br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)
delimiter
print(info.get_content_maintype())
delimiter
self.lock.acquire()
delimiter
aDict[name].append((startTime, endTime))
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
pool = multiprocessing.Pool()
delimiter
list.pop(self, *args, **kwargs)
delimiter
urllib.request.install_opener(opener)
delimiter
browser.show()
delimiter
out.append(l[new_i].pop(random.randint(0, len(l[new_i]) - 1)))
delimiter
print(sqrt(2))
delimiter
dest_file.close()
delimiter
set().union(*lis)
delimiter
values = list(dictionary.values())
delimiter
matrix = [line.rstrip() for line in infile]
delimiter
np.where(a > 5)[0][0]
delimiter
a.astype(numpy.int64)
delimiter
skel = mh.thin(im)
delimiter
mylist = [p for i, p in enumerate(mylist) if i not in remove]
delimiter
int(s)
delimiter
fullname = os.path.join(thispath, filename)
delimiter
plt.show()
delimiter
main()
delimiter
unittest.main()
delimiter
filename = input()
delimiter
sleep(1)
delimiter
duggars = db.session.query(Parent).filter(Parent.child_count > 17)
delimiter
f.write(file_data)
delimiter
sess = tf.Session()
delimiter
x_2, y_2
delimiter
sys.stdout.write(line)
delimiter
ax.set_xticks(np.arange(len(dates)) + width / 2)
delimiter
min_val, max_val = min(x, y), max(x, y)
delimiter
resource = urllib.request.urlopen(url)
delimiter
serializer = UserSerializer(user, data=request.DATA, partial=True)
delimiter
format_to_year_to_value_dict.setdefault(format_str, {})[year] = value
delimiter
x = array([0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], dtype=np.bool)
delimiter
subprocess.Popen(shlex.split(command))
delimiter
print(f.__self__)
delimiter
session.add(another_obj)
delimiter
argvb = list(map(os.fsencode, sys.argv))
delimiter
[1, 0, 0, 0, 0, 1, 0, 1],
delimiter
print(np.array([i, j], dtype=np.int64))
delimiter
iter(self.__dict__)
delimiter
decimal.Decimal(x.seconds)
delimiter
_(1, 4)
delimiter
reactor.run()
delimiter
logging.getLogger().setLevel(logging.INFO)
delimiter
form = CustomQueryConstraintForm(initial=request.POST)
delimiter
process.kill()
delimiter
self.fig.canvas.draw()
delimiter
sorter = np.argsort(colkeys)
delimiter
match = re.search(pat, s)
delimiter
new_df = pandas.DataFrame.from_dict(a_dict)
delimiter
b = np.array([1.0, 0.9, 0.8, 0.7, 0.6])
delimiter
ax.scatter(theta, r)
delimiter
response = requests.get(bl_url, headers=headers)
delimiter
script_dir = os.path.dirname(__file__)
delimiter
print(polygon(4, 2, math.pi / 4, [10, 10]))
delimiter
self.canvas.after(10, self.move)
delimiter
p.wait()
delimiter
list(hex_list)
delimiter
self._handler.close()
delimiter
self.show()
delimiter
-np.linalg.det(self.state)
delimiter
ax.imshow(data)
delimiter
print(r.content)
delimiter
data.remove(row)
delimiter
[0, 0, 0, 0, 0]
delimiter
session = requests.session()
delimiter
[(x == y) for x, y in zip(s, t)]
delimiter
current_milli_time()
delimiter
self.lock.release()
delimiter
random.shuffle(c)
delimiter
((int(x), int(y)) for x, y in split)
delimiter
{{form.as_p}}
delimiter
sys.exit(1)
delimiter
print(make_hash(Foo.__dict__))
delimiter
print(test._tests)
delimiter
self.rect.top += self.yvel
delimiter
print(list(get_names(func)))
delimiter
main()
delimiter
cv_image = cv_image[:, :, ::-1]
delimiter
a.remove(b)
delimiter
inithello()
delimiter
sys.exit(main())
delimiter
printFoo()
delimiter
{{analytics_code}}
delimiter
v = fbx.FbxVector4(x, y, z)
delimiter
newdict.update(mydict)
delimiter
grequests.map(rs)
delimiter
TaskBase.__call__(self, *args, **kwargs)
delimiter
main()
delimiter
random.shuffle(row)
delimiter
sys.getwindowsversion()[0] >= 6
delimiter
d[k].add(v)
delimiter
map(flat_tuple, a, b, c)
delimiter
OrderedDict.__getitem__(self, key)
delimiter
l = [0] * 10000
delimiter
b[0].append(1)
delimiter
sorted(lst)
delimiter
dtsegs = zip(dtg0, dtg1)
delimiter
area += (p1[0] - p0[0]) * ((p1[1] + p0[1]) / 2 if trapezoid else p0[1])
delimiter
show()
delimiter
time.sleep(5)
delimiter
sys.stderr.close()
delimiter
setattr(self, name, kwargs[name])
delimiter
img.resize((width, height), Image.ANTIALIAS)
delimiter
pdb.set_trace()
delimiter
print(intersects(a, b))
delimiter
print(dict(customers))
delimiter
canvas.pack()
delimiter
k, v = random.choice(list(d.items()))
delimiter
data = f.read()
delimiter
rgb_values.pop(-1)
delimiter
{k: (v / len(list_of_dicts)) for k, v in list(summed.items())}
delimiter
MyModel.objects.filter(created__isoyear=year, created__week=week)
delimiter
getattr(hello, m)()
delimiter
string.ascii_lowercase[:14:2]
delimiter
scipy.optimize.fsolve(g, 0.0)
delimiter
list(params.items())
delimiter
items = list(dictionary.items())
delimiter
nltk.clean_html(html)
delimiter
do_something_useful()
delimiter
someList.sort(key=key2, reverse=True)
delimiter
soup = BeautifulSoup.BeautifulSoup(doc)
delimiter
print(dateparser.parse(date_string).date())
delimiter
os.path.join(path, fname)
delimiter
ax.get_xticklabels()[i].set_visible(False)
delimiter
service.files().copy(fileId=originalId, body=newfile).execute()
delimiter
self.run.grid(row=4, column=0, sticky=EW)
delimiter
dataPadded = numpy.concatenate((data, padding), axis=1)
delimiter
df_new
delimiter
json.dump(sample, fp)
delimiter
f(1)
delimiter
self.Show()
delimiter
(b - a).seconds
delimiter
len(self.__dict__)
delimiter
sys.stdout.flush()
delimiter
browser.submit()
delimiter
ax = plt.subplot(111)
delimiter
loader.construct_yaml_map(node)
delimiter
inspect.getmembers(a, predicate=inspect.ismethod)
delimiter
df.isnull().any(axis=1)
delimiter
myClass.__subclasses__()
delimiter
print(L[i])
delimiter
infile.close()
delimiter
frame1.axes.get_yaxis().set_visible(False)
delimiter
fig.autofmt_xdate()
delimiter
{k: c[k] for k in li}
delimiter
output.append(sublist[0])
delimiter
ws.append(l)
delimiter
elem.clear()
delimiter
[zip(x, list2) for x in itertools.permutations(list1, len(list2))]
delimiter
numcols = len(input[0])
delimiter
ax2.set_xlim([0, repeat_length])
delimiter
plt.figure()
delimiter
ax.set_xlim(-40, 40)
delimiter
self.finish()
delimiter
time.sleep(1)
delimiter
imshow(Z1, cmap=cm.hsv, alpha=0.6, extent=extent)
delimiter
unittest.main()
delimiter
time.sleep(5)
delimiter
last_modified_date = datetime.fromtimestamp(mtime)
delimiter
result = pattern.sub(lambda x: d[x.group()], s)
delimiter
sleep(1)
delimiter
all(x >= y for x, y in zip(L, L[1:]))
delimiter
[v for v in x2 if v[1] == optimal[0] and v[2] == optimal[1]]
delimiter
today = datetime.datetime.today()
delimiter
df[1].apply(pd.Series)
delimiter
s.get_data()
delimiter
app.run()
delimiter
ssh_client = paramiko.SSHClient()
delimiter
data = json.loads(file)
delimiter
mystr.replace(k, v)
delimiter
getattr(self._i, n)
delimiter
result = sorted(iter(promotion_items.items()), key=item_value)
delimiter
print(x.task_id)
delimiter
sorted(s, lambda x, y: cmp(x.lower(), y.lower()) or cmp(x, y))
delimiter
value = next(iter(some_collection))
delimiter
self.__dict__.update(_dict)
delimiter
my_list
delimiter
time.sleep(10)
delimiter
self.builder.add_from_file(self.glade_file)
delimiter
math.isnan(math.nan)
delimiter
a[np.arange(a.shape[0]), entries_of_interest]
delimiter
d = math.floor(sdl2.SDL_ALPHA_OPAQUE * (math.ceil(s) - s) + 0.5)
delimiter
time.sleep(1)
delimiter
[list(comb) for i in range(1, n + 1) for comb in itertools.combinations(x, i)]
delimiter
startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
delimiter
shlex.split(raw_args, posix=False)
delimiter
A = numpy.vstack([A, newrow])
delimiter
logging.Formatter.converter = time.gmtime
delimiter
bar.baz[a:b:c].foo()
delimiter
mainFrame.grid()
delimiter
object_list = [c for c in Content.objects.all() if random.random() < fraction]
delimiter
writer.writerows(worksheet.get_all_values())
delimiter
number += 1
delimiter
sys.stdout.flush()
delimiter
logging.getLogger(className)
delimiter
len(set(sum(a, [])) & set(b) & set(c).is_empty()) > 0
delimiter
MySuperClass.__init__(self)
delimiter
t.start()
delimiter
QtGui.QWidget.__init__(self, parent)
delimiter
A.remove(i)
delimiter
plt.legend(numpoints=1)
delimiter
out.read()
delimiter
list(y)
delimiter
clf.fit(X, y)
delimiter
print(root.winfo_width())
delimiter
a = np.arange(10)
delimiter
logger.setLevel(logging.DEBUG)
delimiter
httpd.serve_forever()
delimiter
person.delete()
delimiter
client = requests.session()
delimiter
my_list.pop()
delimiter
self._getlock()
delimiter
df[[iscomedy(l) for l in df.genre.values.tolist()]]
delimiter
element = min(myset)
delimiter
some_object = klass()
delimiter
form.save()
delimiter
app.start()
delimiter
ax.add_patch(rect)
delimiter
list.append(run(*i))
delimiter
conn.commit()
delimiter
min(max(start, num), end)
delimiter
group in user.groups.all()
delimiter
pkgpath = os.path.dirname(testpkg.__file__)
delimiter
y = odeint(func, 0, t)
delimiter
np.delete(arr, index, 0)
delimiter
np.vstack([A[i:i - width] for i in range(width)]).T
delimiter
message.save()
delimiter
t.isoformat()
delimiter
[word.strip(string.punctuation) for word in text.split()]
delimiter
f.write(response.body)
delimiter
timestamp = (dt - datetime(1970, 1, 1)).total_seconds()
delimiter
f_out.write(data)
delimiter
ax.xaxis.set_major_locator(ticker.FixedLocator(x))
delimiter
ax1.plot(pd.Series(np.random.uniform(0, 1, size=10)))
delimiter
plt.show()
delimiter
seq.sort()
delimiter
print(map(itemgetter(1), g))
delimiter
[i for i, elem in enumerate(lst) if condition(elem)]
delimiter
time.sleep(0)
delimiter
a = list(range(10))
delimiter
any(i) and not any(i)
delimiter
result = np.array(list(ranges(intersect(a, b))))
delimiter
main.py
delimiter
image_data = np.asarray(image)
delimiter
list(grpname.keys())
delimiter
list(subgrpname.keys())
delimiter
print(df)
delimiter
pylab.show()
delimiter
ax.add_patch(unmanhattan_patch)
delimiter
ax = fig.add_subplot(111)
delimiter
EmailThread(subject, html_content, recipient_list).start()
delimiter
pd.rolling_mean(aapl, 50).plot()
delimiter
arr[mask != 5] = 0
delimiter
writer.writeheader()
delimiter
self.root.quit()
delimiter
set(b1).intersection(b2)
delimiter
fig, ax = plt.subplots()
delimiter
current_frame = inspect.currentframe()
delimiter
a.sort(key=lambda v: v != 0)
delimiter
a[mask] = 888
delimiter
print(Child.getId())
delimiter
plt.plot(x, y, color=(r, g, b))
delimiter
A().test()
delimiter
[mapping[value] for value in a1 if value in mapping]
delimiter
mask = pd.Index(base).union(pd.Index(base - 1)).union(pd.Index(base + 1))
delimiter
JsonResponse(posts_serialized, safe=False)
delimiter
a = np.array(t)
delimiter
send_thread.daemon = True
delimiter
bigdata = data1.append(data2, ignore_index=True)
delimiter
result = collections.defaultdict(lambda : collections.defaultdict(list))
delimiter
time.mktime(utc_tuple) - time.mktime((1970, 1, 1, 0, 0, 0, 0, 0, 0))
delimiter
calendar.timegm(time.gmtime(0))
delimiter
b = A[(2), :].copy()
delimiter
key = sum(map(itemgetter(play)))
delimiter
win.show()
delimiter
app.register_blueprint(auth_blueprint)
delimiter
libtest2d.print_2d_list(arr2d.shape[0], arr2d.shape[1], arr2d)
delimiter
result += [[x, y, z]]
delimiter
np.linalg.inv(b)
delimiter
testclassb().testmethod2()
delimiter
self.response.out.write(filename)
delimiter
raise tornado.web.HTTPError(404)
delimiter
writer.writerow(header)
delimiter
lst = [maybe_int(s) for s in lst]
delimiter
np.arange(100, 1, -1)
delimiter
[x for x in a if x not in b]
delimiter
thread.start()
delimiter
op(x, y)
delimiter
self._stdout = sys.stdout
delimiter
ax.set_xticks(np.arange(AUC.shape[1]) + 0.5, minor=False)
delimiter
objc.__version__
delimiter
list(IT.izip_longest(readers[0], readers[1], readers[2]))
delimiter
dt_sec = map(datetime.timedelta.total_seconds, dt)
delimiter
plt.draw()
delimiter
print(data[:, :, :, (1)])
delimiter
im = Image.open(filename)
delimiter
session2.add(new_item)
delimiter
c = np.hstack((a[a_inds], b[b_inds]))
delimiter
f.close()
delimiter
dict[firstname] = dict.get(firstname, 0) + 1
delimiter
create_engine(db_connect_string, connect_args=ssl_args)
delimiter
deletelst[len(lst) - n:]
delimiter
stringaxis.setTicks([list(xdict.items())])
delimiter
b = zip(*a)
delimiter
time.sleep(1)
delimiter
b.__class__
delimiter
imshow(X, norm=norm)
delimiter
Counter(protein[i:i + 6] for i in range(len(protein) - 5))
delimiter
iter(f)
delimiter
models.ForeignKey(EntryAdmin)
delimiter
a, b, c, d = map(float, line.split())
delimiter
timeit.timeit(lambda : timeit.timeit(f), number=100)
delimiter
data.dtype.names
delimiter
col_dict = {x: col for x, col in enumerate(df.columns)}
delimiter
nlistnew = [([a] + row) for row in nlist]
delimiter
pyplot.plot(x, y)
delimiter
time.sleep(1)
delimiter
args = parser.parse_args()
delimiter
ax.legend()
delimiter
app.exec_()
delimiter
canvas.pack()
delimiter
created_at = db.DateTimeField(default=datetime.now)
delimiter
ax.set_xlim(0, 2 * np.pi)
delimiter
driver = webdriver.Firefox(profile)
delimiter
per_column = zip(*per_row)
delimiter
hex(ord(chars[0]))
delimiter
x = x + 1
delimiter
c = pygame.time.Clock()
delimiter
s.send_message(msg)
delimiter
df.reset_index(inplace=True)
delimiter
x.append([])
delimiter
audio_data, pyaudio.paContinue
delimiter
z = np.sqrt(x ** 2 + y ** 2) + np.sin(x ** 2 + y ** 2)
delimiter
ax.set_ylim(min(y), max(y))
delimiter
format_elements(reduce_list(some_list))
delimiter
self.progbar.start()
delimiter
tk.Toplevel.__init__(self, *args, **kwargs)
delimiter
label.pack(padx=4, pady=4)
delimiter
self.app = Flask(__name__)
delimiter
shutil.copyfileobj(src, dest)
delimiter
plt.show()
delimiter
temp.sort()
delimiter
joint = [[sum(x) for x in zip(a, b)] for a, b in zip(incoming, outgoing)]
delimiter
db.put(groups)
delimiter
print(sum(sum(map(int, r.findall(line))) for line in data))
delimiter
self.window.set_border_width(8)
delimiter
server.serve_forever()
delimiter
device.dispose()
delimiter
max(hand, key=lambda c: rank_cards.index(c[0]))
delimiter
a = [[0] * ROWS] * COLUMNS
delimiter
self.out.write(bytearray([self.accumulator]))
delimiter
A = np.empty((15, 15))
delimiter
client_sock.close()
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
ax1.set_ylim([0.1, 10])
delimiter
offset = datetime.fromtimestamp(0) - datetime.utcfromtimestamp(0)
delimiter
fig = plt.figure()
delimiter
analysed.add(color)
delimiter
[(a if tC else b) for i in items if fC]
delimiter
result.predict(np.vander(x_new, degree + 1))
delimiter
max(elements, key=lambda e: int(e[0]))
delimiter
[e for sub in tgt if isinstance(sub, (list, tuple)) for e in sub][-5:]
delimiter
print(sum(a * b for a, b in combinations(xList, 2)))
delimiter
x = np.array([0, -1, -1, 0, 1, 1])
delimiter
itertools.product(list(range(2)), repeat=n)
delimiter
print([dict(zip(keys, items)) for items in res])
delimiter
plt.matshow(M, cmap=plt.cm.Blues)
delimiter
all_challenges = session.query(Challenge).all()
delimiter
all_pixels.append(luma)
delimiter
print(soup.prettify())
delimiter
[(key, other) for key in keys for other in prefixes[key[1:]]]
delimiter
sys.exit(1)
delimiter
plt.rcParams.update(params)
delimiter
foo.__defaults__
delimiter
a = np.fromiter(Data, dtype=np.float, count=DataLength.value)
delimiter
np.random.shuffle(indices)
delimiter
result.update(d)
delimiter
fluidsynth.play_Note(64, 0, 100)
delimiter
d1 = np.random.random((25, 4))
delimiter
screen.blit(surface, (0, 0))
delimiter
issubclass(test, object)
delimiter
parser.parse_args([])
delimiter
some_list[start:stop:step]
delimiter
df[:5]
delimiter
doctest.testmod()
delimiter
client = Client(url, transport=ntlm)
delimiter
new_a = a[(a == a).all(1)]
delimiter
maxValue = curs.fetchone()[0]
delimiter
win.add(vbox)
delimiter
x = [False, True, True, False]
delimiter
id = Column(Integer, primary_key=True)
delimiter
np.fromiter(a, dtype=np.float, count=100000)
delimiter
a.exec_loop()
delimiter
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
ax = fig.add_subplot(111)
delimiter
pprint.pprint(output)
delimiter
plt.show()
delimiter
{a: 1, b: 2}
delimiter
cppcode.init()
delimiter
print(json.dumps(data, indent=4))
delimiter
time_waited = time.time() - then
delimiter
sys.exit(app.exec_())
delimiter
d + timedelta(weeks=week - 1, days=-d.weekday())
delimiter
base64.b64encode(bytes([foo]))
delimiter
self.lineedit.setFocus()
delimiter
pd.concat(df_list, ignore_index=True)
delimiter
app_log.addHandler(file_handler)
delimiter
self.belltimer.Start(1000)
delimiter
ax.set_zlim((0, 50))
delimiter
filename = tkFileDialog.askopenfilename(filetypes=FILE_DIALOG_FILETYPES)
delimiter
app = Flask(__name__)
delimiter
ax.plot(x, y * 10)
delimiter
self._shape = self._shape[0] - 1, self.shape[1]
delimiter
m.group(1), int(m.group(2))
delimiter
my_list.sort(key=lambda elem: [my_alphabet.index(c) for c in elem[0]])
delimiter
pd.DataFrame(zip(X.columns, np.transpose(model.coef_)))
delimiter
test.py
delimiter
dict((k, sum(map(itemgetter(k), dict1))) for k in dict1[0])
delimiter
ws = wb.active
delimiter
args = parser.parse_args()
delimiter
f.close()
delimiter
out = np.add.reduceat(X[:, (idx0)], cut_idx, axis=1)
delimiter
len(set(str_.split()) & set(dict_1.values()))
delimiter
maxu2().sum()
delimiter
subprocess.list2cmdline(args)
delimiter
m[list(zip(*map(range, m.shape)))] = 0
delimiter
db.commit()
delimiter
HTML_with_style(df.head())
delimiter
self.SetSizer(self.sizer)
delimiter
print(df.sum(1).to_frame())
delimiter
pprint.pprint(yourDict)
delimiter
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
delimiter
new_matrix.append(matrix[i])
delimiter
self.children = weakref.WeakValueDictionary()
delimiter
sys.path.append(path_to_parent)
delimiter
a, b = zip(*my_list)
delimiter
os.chdir(default_path)
delimiter
ax = fig.add_subplot(111)
delimiter
df.reset_index(drop=True)
delimiter
cin = ast.literal_eval(cin)
delimiter
json.dumps(rh)
delimiter
deleteL[len(L) % 2::2]
delimiter
Tkinter.mainloop()
delimiter
bSizer.Add(button6, 0, wx.ALL, 5)
delimiter
bSizer.Add(button7, 0, wx.ALL, 5)
delimiter
bSizer.Add(button8, 0, wx.ALL, 5)
delimiter
new_list = [foo for foo in foos if foo.location == 2]
delimiter
plt.xlim([0, bin.size])
delimiter
objs[0].do_sth()
delimiter
ast.literal_eval(s)
delimiter
frame.focus_set()
delimiter
out[-1]
delimiter
axborder.set_axis_off()
delimiter
print(le.tostring(doc))
delimiter
handler = logging.StreamHandler()
delimiter
file.close()
delimiter
assert len(name) < len(input_given)
delimiter
file.close()
delimiter
cursor.execute(sql)
delimiter
self.assertOK(response)
delimiter
thread.start_new_thread(updateCounter, ())
delimiter
list(range(0, 1)) == list(range(0, 1))
delimiter
(a - a[0] == 0).all()
delimiter
print(datetime.now() - start)
delimiter
a = models.ForeignKey(Foo, default=lambda : Foo.objects.get(id=1))
delimiter
print(add.addtwo_(byref(a), byref(b)))
delimiter
plt.show()
delimiter
reactor.run()
delimiter
groups.append(list(g))
delimiter
{{form.title}}
delimiter
C / C.astype(np.float).sum(axis=0)
delimiter
writer.writerow(row)
delimiter
os.listdir(short_unc)
delimiter
c = a[2:]
delimiter
mean = A.mean(axis=1)
delimiter
r = requests.post(post_url, data=json.dumps(payload), headers=headers)
delimiter
pygame.display.flip()
delimiter
tm += datetime.timedelta(minutes=10)
delimiter
bool(b)
delimiter
datetime.datetime(*map(int, values))
delimiter
argv.pop(0)
delimiter
plt.figure()
delimiter
unique_edges = set(map(normalize, edges))
delimiter
timer.start()
delimiter
time.sleep(10)
delimiter
self.cmdloop()
delimiter
timedelta(seconds=_diff.total_seconds()) - timedelta(wek)
delimiter
json.dumps(message)
delimiter
cvtColor(src, gray, COLOR_BGR2GRAY)
delimiter
print(f.readlines()[1:15])
delimiter
lists = [[]] * 5
delimiter
array_double = np.array(a, dtype=np.double)
delimiter
testsite_array = my_file.readlines()
delimiter
s.send(data_string)
delimiter
ax.cla()
delimiter
[x for x in s.lower() if x in string.ascii_lowercase]
delimiter
all_pairs.sort(key=lambda p: distance(p[0][0], p[1][0]))
delimiter
zfile.close()
delimiter
time.sleep(random.random())
delimiter
b.save()
delimiter
keys = list(test)
delimiter
gtk.main_quit()
delimiter
day_list.index(inp)
delimiter
print(x, categorize(x))
delimiter
np.sum(np.log(np.arange(1, n + 1)))
delimiter
s.ioctl(socket.SIO_RCVALL, socket.RCVALL_OFF)
delimiter
plt.plot(np.arange(10), 4 * np.arange(10))
delimiter
out_file.write(line)
delimiter
plt.plot(y)
delimiter
time = models.FloatField()
delimiter
cooler()
delimiter
circles = cv2.HoughCircles(gray, cv2.HOUGH_GRADIENT)
delimiter
v.toPyObject()[0]
delimiter
Page.objects.published()
delimiter
df.iloc[:10, :5]
delimiter
[map(second, row) for row in data]
delimiter
list(filter(str.isdigit, text))
delimiter
n = re.findall(pattern, string)
delimiter
ax.set_xticks(indeces)
delimiter
self._fd.close()
delimiter
a * np.exp(-c * x) + d
delimiter
root = Tk()
delimiter
dict(counts)
delimiter
area = area1 + area2
delimiter
C.f(2)
delimiter
self.stop()
delimiter
main(sys.argv)
delimiter
output = p2.communicate()[0]
delimiter
threading.Thread(target=cli).start()
delimiter
ax.xaxis.set_major_formatter(formatter)
delimiter
sys.exit(0)
delimiter
r._meta.id
delimiter
np.array(mp.arange(600))
delimiter
repo.pull()
delimiter
plt.xlim([0, n])
delimiter
task.react(main_task)
delimiter
[value for value in the_list if value != val]
delimiter
result.append(c)
delimiter
post_body = self.rfile.read(content_len)
delimiter
driver.set_window_size(1024, 768)
delimiter
lis.sort(key=itemgetter(1))
delimiter
self.request.route_url(name, id=self.id, **kw)
delimiter
self.target(*args, **kwargs)
delimiter
obj.save()
delimiter
wb.Close()
delimiter
lambda x: f(g(x))
delimiter
time.sleep(1)
delimiter
plt.subplots_adjust(left=0.2, bottom=0.2)
delimiter
k_keys_sorted_by_values = heapq.nlargest(k, dictionary, key=dictionary.get)
delimiter
q.open()
delimiter
list(unique_everseen(a, key=frozenset))
delimiter
codecs.BOM_UTF8
delimiter
chi2_contingency(data)
delimiter
datetime.strptime(text, fmt)
delimiter
response.status_code
delimiter
canvas.place(x=5, y=height + 10)
delimiter
unittest.main()
delimiter
model.setData(index, newValue, QtCore.Qt.EditRole)
delimiter
[5, 6, 7, 8, 9]
delimiter
ndimage.gaussian_filter1d(np.float_([0, 0, 0, 0, 1, 0, 0, 0, 0]), 1)
delimiter
total = sum(total)
delimiter
print(mystring[:1])
delimiter
data[k].append(fitem(v))
delimiter
Thread(target=serve_on_port, args=[1111]).start()
delimiter
sum(1 for i in x if 60 < i < 70)
delimiter
list(chain.from_iterable(result))
delimiter
print(p.url)
delimiter
axarr[0].set_xticklabels(map(str, axarr[0].get_xticks()))
delimiter
p.start()
delimiter
writer.writerow(d)
delimiter
c.__getattribute__
delimiter
print(Decimal(2) ** Decimal(2))
delimiter
c.add(1).cumprod()
delimiter
__metaclass__ = Singleton
delimiter
text = pattern.sub(lambda m: rep[re.escape(m.group(0))], text)
delimiter
print(df.groupby(lambda x: x.month).agg([min, max, np.mean]))
delimiter
mlab.show()
delimiter
xl.Quit()
delimiter
Counter(data).most_common()
delimiter
p1.wait()
delimiter
social.set_extra_data(extra_data)
delimiter
main()
delimiter
print(paths(p)[0])
delimiter
elapsed_time = time.time() - start_time
delimiter
print(np.sort(x)[-10:])
delimiter
my_randoms = random.sample(range(100), 10)
delimiter
grid.cbar_axes[2].colorbar(im2)
delimiter
l = [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2]
delimiter
process.wait()
delimiter
runInParallel(func1, func2)
delimiter
mainloop()
delimiter
[Link(url, text) for url, text in urlstext]
delimiter
driver = webdriver.PhantomJS()
delimiter
HttpResponseRedirect(settings.LOGIN_URL)
delimiter
stdout, stderr = p.communicate(in_string)
delimiter
self.timeout.cancel()
delimiter
self.name = name
delimiter
ax.set_xticks([])
delimiter
response.read()
delimiter
Base.metadata.create_all(engine)
delimiter
filter_func(parent_dict, func)
delimiter
f.seek(0, 0)
delimiter
t.date()
delimiter
print(cur.fetchall())
delimiter
s = pd.Series([2], index=[2])
delimiter
result.append(x)
delimiter
tuple(int(i * 255) for i in colorsys.hsv_to_rgb(h, s, v))
delimiter
process.wait()
delimiter
[a[i] for i in b]
delimiter
asyncore.loop()
delimiter
wd.config(height=500, width=500)
delimiter
plot.rcParams.update(params)
delimiter
print(list(chain(*A)))
delimiter
funs = list(get_petters())
delimiter
quit()
delimiter
self.label.pack()
delimiter
lines = infile.readlines()
delimiter
A.__init__(self, n)
delimiter
rows, cols = X.nonzero()
delimiter
root.mainloop()
delimiter
print(ndimage.zoom(data, (1, 2, 2)))
delimiter
df = df.stack().sample(frac=0.8).unstack()
delimiter
cur.execute(sql, macs, host)
delimiter
dict2 = dict1.copy()
delimiter
[0, 0, 0, 0, 0, 0, 0, 0, 0, 164],
delimiter
my_list.extend([int(i) for i in row if i.isdigit()])
delimiter
print(Dummy())
delimiter
[[4, 2, 6], [8, 10, 12], [6, 4, 6]]
delimiter
{{user.username | e}}
delimiter
Model.objects.filter(filters_for_query)
delimiter
req = urllib.request.Request(site, data, headers)
delimiter
table[0][1]
delimiter
r = s.post(url, data=data)
delimiter
[2, 5]
delimiter
[1, 1, 1, 0, 1, 0, 0, 1],
delimiter
list(gen())
delimiter
m = np.log10(np.abs(x))
delimiter
print(hex(res))
delimiter
date = datetime(year=int(s[0:4]), month=int(s[4:6]), day=int(s[6:8]))
delimiter
[lst[i::n] for i in range(n)]
delimiter
exif_data = img._getexif()
delimiter
ax.xaxis.set_major_formatter(date_format)
delimiter
role = models.CharField()
delimiter
self.__addL__[self.number][x]
delimiter
container.grid_rowconfigure(0, weight=1)
delimiter
issubclass(B, A)
delimiter
self.response.out.write(json.dumps(response))
delimiter
s.add(item)
delimiter
max(depth(self.left), depth(self.right)) + 1
delimiter
myprocess.kill()
delimiter
sys.stdout.write(sio.getvalue())
delimiter
self.parent.x
delimiter
datetime.now() + relativedelta(weekday=FR(-1))
delimiter
plt.show()
delimiter
manager.start()
delimiter
sys.executable
delimiter
f(x)
delimiter
graph = facebook.GraphAPI(oauth_access_token)
delimiter
console_handler.setLevel(logging.DEBUG)
delimiter
match = next((x for x in a if x in str), False)
delimiter
[0, 0, 1, 1, 0, 1, 1, 0],
delimiter
plt.plot(x, y)
delimiter
zip(x, y, z)
delimiter
id9, Wood, moreinfo9
delimiter
show()
delimiter
print(etree.tostring(elem, pretty_print=True))
delimiter
x[0][0][1] = 111
delimiter
cv2.waitKey(0)
delimiter
gimpfu.main()
delimiter
form.save()
delimiter
PREPEND_WWW = True
delimiter
doc = etree.fromstring(xml)
delimiter
array([np.linalg.solve(x, identity) for x in A])
delimiter
self.append(x)
delimiter
[x for x in a if x.size > 0]
delimiter
AllItems = [QComboBoxName.itemText(i) for i in range(QComboBoxName.count())]
delimiter
q.interruptable_get()
delimiter
np.random.choice(elements, 10, p=probabilities)
delimiter
plt.plot(xdata, ydata)
delimiter
all(is_okay(s) for s in some_array)
delimiter
rect.set_height(h)
delimiter
dict(urlparse.parse_qsl(urlparse.urlsplit(url).query))
delimiter
screen = pygame.display.set_mode((500, 500))
delimiter
name = module.name
delimiter
soup = BeautifulSoup(html)
delimiter
np.nanargmax(a, axis=0)
delimiter
imobj.set_data(img)
delimiter
dict((k, [v[1] for v in vs]) for k, vs in itertools.groupby(l, lambda x: x[0]))
delimiter
fig = plt.figure()
delimiter
ax = plt.gca()
delimiter
plt.fill([0, 0, 1, 1], [0, 1, 1, 0])
delimiter
Image.objects.all().large().portraits()
delimiter
response
delimiter
np.dot(a, b)
delimiter
ax.scatter(x, y, z)
delimiter
ax.set_zlim(z_min, z_max)
delimiter
f.close()
delimiter
a = np.random.rand(10, 10)
delimiter
df1.reset_index(inplace=True)
delimiter
port = s.getsockname()[1]
delimiter
my_list = [tuple(i) for i in my_list]
delimiter
print(df.sum().to_frame())
delimiter
sum(letterGoodness[c] for c in yourstring)
delimiter
bool(array)
delimiter
p = (b - a) * p + a * p.ceil()
delimiter
pl.show()
delimiter
draw()
delimiter
Column(id_column_name, UUID(), primary_key=True, default=uuid.uuid4)
delimiter
main()
delimiter
writes.writerow(x)
delimiter
f.writelines(mylist)
delimiter
checkbutton.grid(row=1, column=0)
delimiter
im.show()
delimiter
isinstance(gen, types.GeneratorType)
delimiter
print(twenty.data[958])
delimiter
max_product = max(mul(*l[:2]), mul(*l[-2:]))
delimiter
df = pandas.DataFrame(data)
delimiter
logger.addHandler(dh)
delimiter
conn.send(data)
delimiter
logger.addHandler(handler)
delimiter
board[x, y]
delimiter
win = tk.Toplevel(root)
delimiter
list(zip(*G))[0]
delimiter
size = win.window.get_size()
delimiter
layout.addWidget(self.edit)
delimiter
df.replace([np.inf, -np.inf], np.nan)
delimiter
plt.figure(1)
delimiter
np.min(np.nonzero(np.hstack((A, 1))))
delimiter
y = [a for a in x]
delimiter
soup = BeautifulSoup(driver.page_source)
delimiter
np.unique1d(np.floor(10000000.0 * x) / 10000000.0)
delimiter
b[0].append(1)
delimiter
l1.remove(x)
delimiter
lambda s: int(s) if s.isdigit() else 0
delimiter
[mean(cluster) for cluster in cl.getlevel(2)]
delimiter
GST_VERSION_MAJOR,
delimiter
df2 = df[df.dte < lastyear].head(depth)
delimiter
[iter(l)] * 2
delimiter
site.addsitedir(self.install_lib)
delimiter
self.ui.PoseBtn_GridLayout.addWidget(self.button, 0, 0, 1, 1)
delimiter
ax2.yaxis.set_major_locator(MaxNLocator(nbins=len(ax1.get_yticks())))
delimiter
a = np.arange(100).reshape(10, 10)
delimiter
q.close()
delimiter
sum(args)
delimiter
ax = fig.add_subplot(111)
delimiter
max(dict_depth(v, depth + 1) for k, v in d.items())
delimiter
browser.get(url)
delimiter
a = np.random.randint(0, 2, (10, 8))
delimiter
set(a) == set(c)
delimiter
compat.register()
delimiter
os.close(f)
delimiter
x[1::2]
delimiter
df.divide(df.sum(axis=1), axis=0)
delimiter
mylist = mylist[2:-2]
delimiter
b[b > 0]
delimiter
trimmed.setdefault((k[0], k[-1]), []).append(v)
delimiter
plt.xlim(bins[0], bins[-1])
delimiter
file.seek(0, os.SEEK_END)
delimiter
f.apply(clean, axis=1).reindex(f.index)
delimiter
fct()
delimiter
list(theDict.keys() & theList)
delimiter
source_file.readline()
delimiter
dct = defaultdict(list)
delimiter
street = models.CharField(max_length=100)
delimiter
print(os.getegid())
delimiter
B = A[([0, 2]), :, :][:, :, ([1, 2])]
delimiter
temp_file.close()
delimiter
time.sleep(1)
delimiter
df_a.merge(df_b, left_index=True, right_index=True)
delimiter
w.menuBar().addMenu(menu)
delimiter
a[a < 0] = 0
delimiter
ax = fig.add_subplot(111)
delimiter
dosomethingelse
delimiter
sorted(list(scores.items()), key=itemgetter(1), reverse=True)
delimiter
mapping[frozenset(list(d.keys()))](**d)
delimiter
aaa()
delimiter
t_points = t_image[[t_pos[:, (1)], t_pos[:, (0)]]]
delimiter
random.shuffle(charlst)
delimiter
stdin.close()
delimiter
plt.legend(scatterpoints=1)
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
list(set(seq))
delimiter
print(calendar.month(tgtdate.year, tgtdate.month))
delimiter
ip = models.CharField(max_length=200, blank=True, db_index=True)
delimiter
plt.gca().get_xaxis().get_major_formatter().set_useOffset(False)
delimiter
s.seek(0)
delimiter
(df * weights).sum(1)
delimiter
logger.addHandler(logging.StreamHandler())
delimiter
len(set(in_list)) == len(in_list)
delimiter
[(L1[i] + L2[i]) for i in range(min(len(L1), len(L2)))]
delimiter
self.connection.commit()
delimiter
sub_df.iloc[0]
delimiter
zip(*([it] * 2))
delimiter
foo()
delimiter
__init__.py
delimiter
frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
delimiter
answer.append((key, len(list(iter))))
delimiter
(4, 5, 6) > (1, 1, 1, 9)
delimiter
os.setsid()
delimiter
seen = set()
delimiter
ax2 = fig.add_subplot(2, 2, 2)
delimiter
Simulation.mocked_method
delimiter
plt.show()
delimiter
combs = [i for j in range(1, len(atom) + 1) for i in combinations(atom, j)]
delimiter
select_indices = np.where(np.logical_or(x < 1, x > 5))
delimiter
print(line)
delimiter
draw.ellipse((x - r, y - r, x + r, y + r), fill=(255, 0, 0, 0))
delimiter
f.write(new_text)
delimiter
x.subs([(y, z), (x, y)])
delimiter
inset.set_xlim(inset_xlimit[0], inset_xlimit[1], auto=False)
delimiter
float(p[1] - b[1]) / float(p[0] - b[0]), p[0] < b[0]
delimiter
startupinfo.dwFlags |= _subprocess.STARTF_USESHOWWINDOW
delimiter
f.write(s)
delimiter
now.timetuple().tm_isdst
delimiter
set(a) == set(b)
delimiter
list(product(x, flatten(y)))
delimiter
list(set(array2))
delimiter
MyList = [inst1.i, inst2.i]
delimiter
self.send_result
delimiter
app = wx.PySimpleApp()
delimiter
RNA_integers = [RNA_dictionary[i] for i in RNA_list if i in RNA_dictionary]
delimiter
print(twenty.data[0])
delimiter
tgt.close()
delimiter
dict((k, json.dumps(v)) for k, v in list(json.loads(val).items()))
delimiter
x1, y1, x2, y2 = itertools.repeat(0, 4)
delimiter
res.append(count)
delimiter
ssh = paramiko.SSHClient()
delimiter
print(os.path.join(root, f))
delimiter
pprint.pprint(dataDict)
delimiter
reactor.stop()
delimiter
array([[14, 22], [46, 54]])
delimiter
app = wx.App(redirect=True)
delimiter
(2, 2, 10, 10), (12, 8, 2, 10)
delimiter
fxn()
delimiter
screen.update()
delimiter
print(list(go(iter(lst))))
delimiter
self.foo.kill()
delimiter
x = np.arange(100)
delimiter
sess.run([sparse_update])
delimiter
A[c1b, r1b], A[c2b, r2b] = A[c2b, r2b], A[c1b, r1b]
delimiter
t.selection_get()
delimiter
tornado.ioloop.IOLoop.instance().start()
delimiter
fig = plt.figure()
delimiter
sys.stdout.write(session.recv(4096))
delimiter
[[next(a_iter) for _ in range(n)] for n in b]
delimiter
a[np.ix_(index, index)]
delimiter
sum(range(start, start + n))
delimiter
0, 0, 0, 0 | 0, 1, 0, 1, 1, 0
delimiter
newdf.iloc[:10, :5]
delimiter
p.kill()
delimiter
print(func.__name__, args, kwargs)
delimiter
data[:size]
delimiter
f.write(r.content)
delimiter
plt.show()
delimiter
plt.show()
delimiter
set(a)
delimiter
print(a.data.nbytes + a.indptr.nbytes + a.indices.nbytes)
delimiter
pygame.quit()
delimiter
print(json.dumps(tree, indent=4))
delimiter
h.setdefault(x, []).append(y)
delimiter
time.sleep(1)
delimiter
np.intersect1d(b1, a)
delimiter
print([dict[i] for i in dict if dict[i] >= x])
delimiter
screen.exitonclick()
delimiter
name = models.CharField(max_length=150)
delimiter
print(match.groups())
delimiter
x1 = y1 = x2 = y2 = 0
delimiter
print(t.timeit(number=1))
delimiter
self.emitter.append(e)
delimiter
self.platforms.append(e)
delimiter
ax.set_xlim(xbnds)
delimiter
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
delimiter
df.to_csv(s)
delimiter
a.sort(key=lambda d: list(d.values())[0], reversed=True)
delimiter
result_dict.setdefault(x.key, []).append(x.value)
delimiter
self.button.clicked.connect(self.handleButton)
delimiter
dic[i].append(j)
delimiter
time.sleep(1)
delimiter
eval(command)
delimiter
cmap = mcolors.ListedColormap([(0, 0, 1), (0, 1, 0), (1, 0, 0)])
delimiter
connection.close()
delimiter
plt.clf()
delimiter
x = [[i] for i in range(10)]
delimiter
[len(set(i)) for i in data.reshape(data.shape[0], -1)]
delimiter
print(repr(html_to_text(html)))
delimiter
setup.py
delimiter
list.append(run(i[0], i[1], i[2]))
delimiter
platform.system()
delimiter
self.Raise()
delimiter
min(timeit.repeat(lambda : dict([(k, v) for k, v in zip(keys, values)])))
delimiter
plt.xlim(0, 9)
delimiter
str(self.i)
delimiter
reversed(lines)
delimiter
map(functools.partial(f, y=fixed), srclist)
delimiter
stdout_thread.start()
delimiter
a.reshape(a.shape[0] // n, n, a.shape[1]).sum(1)
delimiter
self.button.Bind(wx.EVT_BUTTON, self.OnButton)
delimiter
the_frame = pd.read_sql_table(name_of_table, engine)
delimiter
pickle.dump(data, fp)
delimiter
ax.set_yticks(numpy.arange(0, 1.0, 0.1))
delimiter
grouped.sort(key=itemgetter(1), reverse=True)
delimiter
a.close()
delimiter
heapq.heappush(heap, (-prod1, x - 1, y))
delimiter
fruit = [df.columns[row.astype(bool)].tolist() for row in df.values]
delimiter
args = parser.parse_args()
delimiter
self.canvas.scale(ALL, x, y, self.scale, self.scale)
delimiter
limit = int(limit)
delimiter
window = gtk.Window()
delimiter
chris.userprofile.followed_by.all()
delimiter
renormalize = true
delimiter
keys = [k for k in scores if scores[k] == scores[key]]
delimiter
cursor.execute(sql)
delimiter
[{k: d[k]} for k in sorted(d)]
delimiter
driver = webdriver.PhantomJS()
delimiter
(lambda j: lambda x: x == j or x % j != 0)(i)
delimiter
z = a[0] * b[1] - a[1] * b[0]
delimiter
main.py
delimiter
d = dict(matches)
delimiter
subprocess.call(cmd)
delimiter
[dic[k] for k in sorted(dic)]
delimiter
plt.imshow(img)
delimiter
self._id = uuid1().urn
delimiter
termios.tcsetattr(sys.stdin, termios.TCSADRAIN, orig_settings)
delimiter
dbQueryModel.itemData(treeView.selectedIndexes()[0])
delimiter
bp.stdout.readline()
delimiter
frame.grid()
delimiter
iter(self.books.values())
delimiter
min(zip(Lat, Lon), key=operator.itemgetter(1))[0]
delimiter
ax.set_xticks(np.arange(-0.5, width, 1), minor=True)
delimiter
print(sys.argv[0])
delimiter
pivots = np.zeros((m, n), intc)
delimiter
GF4(self.__addL__[self.number][x])
delimiter
list(groups.values())
delimiter
plt.figure()
delimiter
time.sleep(0.5)
delimiter
ax.autoscale()
delimiter
cap.release()
delimiter
[5, 5, 5, 4]
delimiter
print(np.arange(100).nbytes)
delimiter
print(df.head())
delimiter
y.reshape(2, 1) - x
delimiter
self.urls_seen.add(request.url)
delimiter
self.send_blob(blobstore.BlobInfo.get(blob_key), save_as=True)
delimiter
TRUE = 1
delimiter
setattr(fundamentalconstants, name, value)
delimiter
plt.scatter(X, Y)
delimiter
do_something_with(x)
delimiter
sns.distplot(a, bins=list(range(1, 110, 10)), ax=ax, kde=False)
delimiter
QMainWindow.__init__(self, parent)
delimiter
np.allclose(df_norm.values.dot(coef), pca.fit_transform(df_norm.values))
delimiter
my_dict[k].append(dict1[k])
delimiter
[i for i in mysites if i not in list(sites.keys())]
delimiter
chr(65)
delimiter
pyplot.plot(x, y)
delimiter
[index_dict[x] for x in b]
delimiter
p.get_open_files()
delimiter
logger.addHandler(handler2)
delimiter
x = np.asarray(x)
delimiter
all(c in string.hexdigits for c in s)
delimiter
m = coo_matrix((values, (row, col)), shape=(nrows, ncols), dtype=float)
delimiter
QtGui.QMainWindow.eventFilter(self, widget, event)
delimiter
fig, ax = plt.subplots(ncols=2)
delimiter
print(G.edges())
delimiter
plt.plot(x, y)
delimiter
x.append(l)
delimiter
models.ForeignKey.__init__(self, User, null=True, **kwargs)
delimiter
zip(a, b)
delimiter
main.config.from_object(config)
delimiter
cPickle.load(f)
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
delimiter
plt.plot(freqs[idx], ps[idx])
delimiter
ax2.set_ylim(0, 2)
delimiter
print(info.get_content_type())
delimiter
sum(scipy.stats.hypergeom.pmf(k, N, M, Q) for k in range(1, Q + 1))
delimiter
db.model_to_protobuf(your_entity)
delimiter
list(combinations(x, 2))
delimiter
zip(l, combinations(reversed(l), len(l) - 1))
delimiter
self.send(message)
delimiter
plt.show()
delimiter
fig = plt.figure()
delimiter
x.split()
delimiter
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
new_array = new_array.reshape(old_array.shape)
delimiter
data = data[~np.isnan(data).any(axis=1)]
delimiter
print(int(x))
delimiter
pygame.draw.rect(game_display, (0, 0, 0), rect_old)
delimiter
DEBUG = True
delimiter
np.argmin(abs(f2 - f1))
delimiter
regex.findall(string)
delimiter
ax.plot(x, x)
delimiter
chmod + x / home / randy / lib / python / gbmx.py
delimiter
L1 = [[0, 50], [7.75, 120], [10.25, 70], [17, 100], [20, 60]]
delimiter
mat_array = cv.fromarray(numpy_array)
delimiter
round(2.675, 2)
delimiter
s = p.sub(process_match, s)
delimiter
sum(range(a + a % 2, b + 1, 2))
delimiter
pd.DataFrame(d)
delimiter
dict_.update((prefix, value) for prefix in prefixes)
delimiter
rotn = np.degrees(np.arctan2(y[:, 1:] - y[:, :-1], x[:, 1:] - x[:, :-1]))
delimiter
gui.root.mainloop()
delimiter
Foo()
delimiter
numpy.arange(11, 17, 0.5)
delimiter
list.append([])
delimiter
myarray[x.group(1)] = [x.group(2)]
delimiter
driver.set_script_timeout(10)
delimiter
app.MainLoop()
delimiter
do_something(f.result())
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
lambda _: f()
delimiter
image = Image.open(data)
delimiter
limitx = random.choice([0, 1])
delimiter
list(range(string.ascii_lowercase))
delimiter
b = np.identity(A.shape[2], dtype=A.dtype)
delimiter
q = mp.Queue()
delimiter
ax = fig.add_subplot(111)
delimiter
nx.traversal.dfs_successors(G)
delimiter
sys.stdout.write(out)
delimiter
self.sizer.Add(self.canvas, 1, wx.LEFT | wx.TOP | wx.GROW)
delimiter
{k: v for k, v in list(d.items()) if k not in excluded_keys}
delimiter
max(len(i[j]) for i in x)
delimiter
df.index[(df == window_stop_row).all(axis=1)]
delimiter
result[-1].append(thetext)
delimiter
[max(min(x, 255), 0) for x in oldList]
delimiter
QtWebKit.QWebView.__init__(self)
delimiter
ssl.OPENSSL_VERSION
delimiter
root.mainloop()
delimiter
[self[i] for i in index]
delimiter
plot_date(a, 2)
delimiter
df.columns
delimiter
bar()
delimiter
merged[k].append(d2[k])
delimiter
print(d[2])
delimiter
start_response(status, headers)
delimiter
now = datetime.datetime.now()
delimiter
form
delimiter
print(a)
delimiter
wordslist = line.split()
delimiter
palette.set_bad(alpha=0.0)
delimiter
display(fig)
delimiter
c_mat1 = np.tensordot(Q, a1, axes=([-1], [0]))
delimiter
start_time = time.time()
delimiter
p.join()
delimiter
traceback.print_exc()
delimiter
data[0, 0] = [1, 2]
delimiter
area = cv2.contourArea(contour)
delimiter
numpy.random.seed(1)
delimiter
df
delimiter
locale.currency(float(cents) / 100.0)
delimiter
plt.show()
delimiter
dict(d)
delimiter
profile = webdriver.FirefoxProfile()
delimiter
bar(ind, num, width, color=colors)
delimiter
ax.xaxis.set_major_formatter(daysFmt)
delimiter
app.run(debug=True)
delimiter
subprocess.call(cmd, shell=True)
delimiter
plt.show()
delimiter
print(tailq.get_nowait())
delimiter
ws.cell(row=1, column=1).hyperlink = link
delimiter
Response(status=204)
delimiter
self.origstream = sys.stdout
delimiter
Entry.objects.bulk_create([Entry(name=x) for x in a])
delimiter
list(product(*map(lambda x: list(range(x[0], x[1] + 1)), args)))
delimiter
Row(**OrderedDict(sorted(row_dict.items())))
delimiter
plot.append(axE)
delimiter
plot.append(axPA)
delimiter
writer = csv.writer(output)
delimiter
cast(a, POINTER(c_int))
delimiter
lst[-1:] + reverse(lst[:-1])
delimiter
p.start()
delimiter
tk.Tk.__init__(self, *args, **kwargs)
delimiter
main(sys.argv)
delimiter
Qt.QFrame.paintEvent(self, event)
delimiter
IOLoop.current().run_sync(runner)
delimiter
print(m.group(1))
delimiter
app = Flask(__name__)
delimiter
plt.plot(X, Y)
delimiter
print(OrderedDict.fromkeys(s))
delimiter
os.close(sys.stderr.fileno())
delimiter
self.figure.set_facecolor((1, 1, 1))
delimiter
win.mainloop()
delimiter
writer.writerow(out)
delimiter
x = np.linspace(0, 2 * np.pi, 100)
delimiter
1j * numpy.inf
delimiter
area = img.crop(box)
delimiter
time.sleep(1)
delimiter
f2.write(line)
delimiter
grid.grid(sticky=N + S + E + W, column=0, row=7, columnspan=2)
delimiter
f128 = numpy.frombuffer(file.read(16), dtype=numpy.float128)
delimiter
self.est.predict_proba(X)[:, (1)]
delimiter
np.tile(v, (1, 2))
delimiter
[dict(zip(columns, row)) for row in cursor]
delimiter
np.cumsum(a, out=a)
delimiter
id = db.Column(db.Integer, primary_key=True)
delimiter
session.query(QuerySchema).filter(QuerySchema.way.ST_Within(bbox))
delimiter
MyObject = MyClass()
delimiter
listbox.pack()
delimiter
self.set.add(d)
delimiter
fib(n - 1) + fib(n - 2)
delimiter
new_dict = dict(zip(keys, values))
delimiter
Counter(chain.from_iterable(map(str.split, f)))
delimiter
a, b = map(int, input().split())
delimiter
o.writerow(line.split())
delimiter
map(lambda x: int(255 * x), (r, g, b))
delimiter
np.arange(0, 1, 0.1)
delimiter
list(it1)
delimiter
reduced_list = [x for x in full_list if not omit.intersection(x)]
delimiter
app.register_blueprint(child2.child2)
delimiter
someList.sort(key=key1)
delimiter
line = line.strip()
delimiter
abs(numpy.array([0.24])[0] - 0.24) < numpy.finfo(float).eps
delimiter
plt.show()
delimiter
print(newcorpus.sents(newcorpus.fileids()[0]))
delimiter
self.root.destroy()
delimiter
random.shuffle(x)
delimiter
wtr.writerow(r)
delimiter
os.chdir(prev_cwd)
delimiter
EMAIL_USE_TLS = False
delimiter
process.stderr.close()
delimiter
cursor.close()
delimiter
df1[ind].append(df2[ind])
delimiter
KillerApp().run()
delimiter
print(hashlib.sha1(json.dumps(a, sort_keys=True)).hexdigest())
delimiter
driver = webdriver.Remote(desired_capabilities=options.to_capabilities())
delimiter
b[0].append(1)
delimiter
k[np.in1d(list(map(np.ndarray.dumps, k)), list(map(np.ndarray.dumps, k2)))]
delimiter
new_x = itertools.chain(y, x)
delimiter
print(np.array_equal(A, C))
delimiter
list(d.values())
delimiter
imshow(img, zorder=0, extent=[left, right, bottom, top])
delimiter
sys.exit(0)
delimiter
app.mainloop()
delimiter
p.wait()
delimiter
time.sleep(1)
delimiter
args = parser.parse_args()
delimiter
t.start()
delimiter
blobstore.delete(key)
delimiter
emonth1.grid(row=1, column=2)
delimiter
re.findall(str_in_doublequotes, text)
delimiter
plt.colorbar()
delimiter
[a, b] = [1, 2]
delimiter
[x for x in individual(nest)]
delimiter
numpy.random.seed(29)
delimiter
conn.response()
delimiter
pyplot.show()
delimiter
np.savetxt(myfile, sample_array)
delimiter
ax2.set_yticks(y_tick * np.pi)
delimiter
ax.set_xlim(-5, 100)
delimiter
main_menu.display()
delimiter
content = fp.read()
delimiter
axr.set_ylim(altitude.min(), altitude.max())
delimiter
full_df = pd.concat(dfs)
delimiter
path = os.getcwd()
delimiter
tree = etree.ElementTree(root)
delimiter
df2.boxplot()
delimiter
tf.mul(scale, x)
delimiter
gc.collect()
delimiter
list([val for val in range(10) if val & 1])
delimiter
deletetup[0]
delimiter
my_file.close()
delimiter
setattr(obj, name, value)
delimiter
str(self)
delimiter
reactor.run()
delimiter
self.handler = logging.StreamHandler(self.stream)
delimiter
print(dict(re.findall(r, z)))
delimiter
root.mainloop()
delimiter
sort(data, key=key, reverse=rev)
delimiter
response.set_data(soup.prettify())
delimiter
emailer.send(messages)
delimiter
list2 = [int(y) for y in list(itertools.chain(*[str(x) for x in list1]))]
delimiter
a[i].append(int(value))
delimiter
print(sum(chain(n, o, p)))
delimiter
axes[0].legend(bbox_to_anchor=(0, 0.5))
delimiter
plt.show()
delimiter
ax.set_ylim(-1, 7)
delimiter
[(2, 5), (12, 17), (22, 22), (25, 26), (28, 28), (51, 52), (57, 57)]
delimiter
pixels = [pixels[i * width:(i + 1) * width] for i in range(height)]
delimiter
events = list(groupify(lines))
delimiter
plt.subplot(111)
delimiter
list(repeat(100, foo))
delimiter
s2[s2.isin(s1)]
delimiter
plt.xlim([0, 6])
delimiter
self.write(self.request.uri)
delimiter
ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER)
delimiter
df_out
delimiter
random.seed()
delimiter
ax1 = fig.add_subplot(2, 2, 1)
delimiter
myArray.append(np.array([i, i + 1, i + 2]))
delimiter
self.category.name
delimiter
game.init()
delimiter
root.mainloop()
delimiter
mlab.show()
delimiter
print(m.cancel())
delimiter
np.savetxt(outfile, slice_2d)
delimiter
counts = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
delimiter
myDict.setdefault(newKey, []).append(value)
delimiter
channels = cv2.split(img)
delimiter
plt.show()
delimiter
contours, _ = cv2.findContours(edges, cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE)
delimiter
parent_map = dict((c, p) for p in tree.getiterator() for c in p)
delimiter
l[1::2]
delimiter
set(map(tuple, map(sorted, pairs)))
delimiter
ax.xaxis.set_major_formatter(fmt)
delimiter
self.log.close()
delimiter
self.config_from_object(app.config)
delimiter
app.run(debug=True, threaded=False)
delimiter
union([(10, 12), (14, 16), (15, 22)])
delimiter
print(PixelAt(int(sys.argv[1]), int(sys.argv[2])))
delimiter
id = db.Column(db.Integer, primary_key=True)
delimiter
event.widget.pack_forget()
delimiter
a = fig.add_subplot(1, 2, 2)
delimiter
np.intersect1d(amem, bmem).size
delimiter
scores.ffill().sum(axis=1)
delimiter
proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
delimiter
s.close()
delimiter
m.save()
delimiter
wb = openpyxl.load_workbook(filename=file)
delimiter
outarr[x1to:x2to, y1to:y2to] = inarr[x1fr:x2fr, y1fr:y2fr]
delimiter
np.where(M == 0)
delimiter
a2.ravel()[:] = [tuple(l) for l in m.reshape(2, -1).T]
delimiter
ttk.Radiobutton(self.mainframe, value=1).grid(column=2, row=2)
delimiter
filtered_list = [x for x in your_list if all(f(x) for f in filters)]
delimiter
Base.metadata.create_all(engine)
delimiter
domain = str(line.strip())
delimiter
x.a = 2
delimiter
{file: find_mime_with_file(file) for file in files}
delimiter
rx.findall(allsorts)
delimiter
lines = f.readlines()
delimiter
ax.set_xlim(0.5, ly + 0.5)
delimiter
pool.map(lambda x: preprocess(x), real_preds)
delimiter
assert response.status_code == 200
delimiter
dest = dict(chain(list(orig.items()), list(extra.items())))
delimiter
Toplevel.__init__(self, parent)
delimiter
lines.append([(x, lastY), (x, y)])
delimiter
foo(x, y)
delimiter
plt.show()
delimiter
print(np.all(A[a_to_b] == B))
delimiter
draw.rectangle(bbox, outline=(0, 255, 0))
delimiter
repr(tst2)
delimiter
s.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
[0, 1, 0, 0, 1, 0, 1, 0],
delimiter
f.close()
delimiter
opener = urllib.request.build_opener()
delimiter
df[df.one.isin(checkList) | df.two.isin(checkList)]
delimiter
datetime.date(datetime.now()).isocalendar()[1]
delimiter
d = defaultdict(int, zip(list(range(1, 10)), list(range(50, 61))))
delimiter
B().a()
delimiter
term_appearance = Counter(chain.from_iterable(texts_list))
delimiter
layout.addWidget(self.canvas)
delimiter
l = [item for sublist in list for item in sublist]
delimiter
data = data.reshape(data.size / 2, 2)
delimiter
PyErr_Print()
delimiter
conn2 = psycopg2.connect(dsn2)
delimiter
x.argsort().argsort()
delimiter
is_active = True
delimiter
plt.clf()
delimiter
self.sock.close()
delimiter
signal.signal(signal.SIGINT, handle)
delimiter
os.symlink(pythonapp, newpython)
delimiter
file = models.FileField(upload_to=get_random_filename)
delimiter
kmeans.fit(p_df)
delimiter
bin(a ^ b)
delimiter
pos = emcee.utils.sample_ball(mean, np.sqrt(np.diag(C)), size=Nwalkers)
delimiter
driver = webdriver.Firefox(firefox_profile=profile)
delimiter
os.system.__module__
delimiter
pd.crosstab(df.gender, df.doctor)
delimiter
urllib.request.install_opener(opener)
delimiter
all(x < y for x, y in zip(L, L[1:]))
delimiter
paired_sorted = sorted(rev_sorted, key=lambda x: x[0])
delimiter
q.T.reshape(-1, 2, 2).swapaxes(1, 2).reshape(-1, 2)
delimiter
cache._cache.flush_all()
delimiter
ax.plot(data2)
delimiter
cv.create_rectangle(10, 10, 50, 50)
delimiter
df[df.genre.map(iscomedy)]
delimiter
sum(sys.getsizeof(x) for x in s)
delimiter
connection.close()
delimiter
kurt = kurt.T
delimiter
profile = request.user.get_profile()
delimiter
zusers = bcolz.ctable.fromdataframe(users)
delimiter
my_num = int(f.read(1))
delimiter
MyApp().run()
delimiter
Done
delimiter
next(it1)
delimiter
print(np.linalg.det(A))
delimiter
json_data_rdd.flatMap(lambda j: processDataLine(j, arg1, arg2))
delimiter
p.stdin.close()
delimiter
zip(*[L[i::4] for i in range(4)])
delimiter
result_df = json_normalize(my_list).T
delimiter
list(accumulate(example_list, add))
delimiter
ax = self.figure.add_subplot(111)
delimiter
person = models.ForeignKey(Person)
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
delimiter
list_a = [1, 2, 4, 6]
delimiter
b = a.transpose()
delimiter
__init__()
delimiter
plt.show()
delimiter
v.append(n)
delimiter
np.take(arr, inds)
delimiter
now_plus_10 = now + datetime.timedelta(minutes=10)
delimiter
a = datetime.datetime.now()
delimiter
G.add_nodes_from([1, 2])
delimiter
__init__.py
delimiter
writer = csv.writer(f)
delimiter
print(df.loc[mask])
delimiter
f(x, y, z)
delimiter
j_obj = json.load(j)
delimiter
pylab.figure(figsize=(20, 9))
delimiter
{{nhl_form.league}}
delimiter
dict(alist[i:i + 2] for i in range(0, len(alist), 2))
delimiter
f()
delimiter
pygame.display.update()
delimiter
profile.user.save()
delimiter
df.loc[df.name].tail(2)
delimiter
Node.objects.get_queryset_descendants(my_queryset, include_self=False)
delimiter
self.panel.Bind(wx.EVT_CHAR, self.OnKeyDown)
delimiter
t.start()
delimiter
df
delimiter
thread.start()
delimiter
plt.setp(xticklabels, visible=False)
delimiter
list(t)
delimiter
tobin(x / 2) + [x % 2] if x > 1 else [x]
delimiter
subprocess.call(args, stderr=subprocess.STDOUT, stdout=f)
delimiter
logger.setLevel(logging.INFO)
delimiter
self.table.setItem(1, 0, QtGui.QTableWidgetItem(self.led.text()))
delimiter
someClass.doSomething()
delimiter
df.columns = df.columns.astype(str)
delimiter
pylab.gca().add_patch(arr)
delimiter
print(etree.tostring(tree))
delimiter
regex.match(string)
delimiter
a.result() + b.result()
delimiter
tk.Frame.__init__(self, root)
delimiter
f.write(s.getvalue())
delimiter
f.seek(0, 2)
delimiter
self.out_file.close()
delimiter
a.print_x.__func__(b)
delimiter
print(s[:])
delimiter
f = np.array([(df * n if n < N / 2 else df * (n - N)) for n in range(N)])
delimiter
my_dict = {x: (x ** 2) for x in range(10)}
delimiter
print(json.dumps(doc.reprJSON(), cls=ComplexEncoder))
delimiter
g.username = user.name
delimiter
file.close()
delimiter
p.stdout.close()
delimiter
[os.path.join(*choices[:i + 1]) for i in range(len(choices))]
delimiter
print(row[0])
delimiter
fig = plt.figure()
delimiter
{c: counter.get(c, 0) for c in chars}
delimiter
sys.path
delimiter
do_stuff()
delimiter
client_name = models.CharField(max_length=400)
delimiter
laplace_k = make_kernel([[0.5, 1.0, 0.5], [1.0, -6.0, 1.0], [0.5, 1.0, 0.5]])
delimiter
list(it.product(x, mit.collapse(y)))
delimiter
fun(*args, **kwargs)
delimiter
type(s)
delimiter
m_action2.perform()
delimiter
ax = self.figure.add_subplot(111)
delimiter
process.kill()
delimiter
timezone.localtime(timezone.now())
delimiter
mz = np.indices(IRtest.shape)[0]
delimiter
width, height = img.size
delimiter
c.append(a[index])
delimiter
df.ix[idx]
delimiter
config.write(configfile)
delimiter
main()
delimiter
cur.close()
delimiter
gp1.iloc[0].values
delimiter
fig = plt.figure()
delimiter
fsizer.Add(self.stext, 0, wx.ALL)
delimiter
pickle.dump(selfref_list, output, -1)
delimiter
start_response(status, response_headers)
delimiter
auser = self.auth.get_user_by_session()
delimiter
print(list(takewhile(lambda x: bool(x.strip()), v)))
delimiter
np.dot(J, mat)
delimiter
df = pd.DataFrame(list(BlogPost.objects.all().values()))
delimiter
response = urllib.request.urlopen(url)
delimiter
all_pairs += [((nA, 0), (nC, 2)) for nA, nC in itertools.product(listA, listC)]
delimiter
result[nI] = v2[nI]
delimiter
smtp.quit()
delimiter
os.dup2(savout, 1)
delimiter
a = a & b
delimiter
{{(user | hash): item}}
delimiter
print(tmp)
delimiter
pd.concat((df1, df2), axis=1)
delimiter
mydict_as_string = cPickle.dumps(mydict)
delimiter
print(str(mytuple)[1:-1])
delimiter
queryset = Profile.objects.filter(condition)
delimiter
fig, ax = plt.subplots(1, 1)
delimiter
plt.subplot(122)
delimiter
print(yaml.dump(a, default_flow_style=False))
delimiter
parameters(my_get_params)
delimiter
get_lineage(dt, df.columns)
delimiter
my_list = [item for item in range(10)]
delimiter
strided(a, shape=((a.size + n - 1) // n, n), strides=(n * s, s))[:, 1:]
delimiter
self._app(environ, log_response)
delimiter
f.seek(2)
delimiter
len(a)
delimiter
time.sleep(1)
delimiter
plt.rcParams.update(params)
delimiter
QtCore.QAbstractTableModel.__init__(self, parent)
delimiter
plt.hexbin(x, y)
delimiter
self.right.extend(self.left[0:x])
delimiter
shallow_copy_of_set = set(old_set)
delimiter
clf.fit(K, y)
delimiter
ax.xaxis.set_major_locator(dates.MinuteLocator())
delimiter
fig, ax = plt.subplots()
delimiter
image_file_size = img_file.tell()
delimiter
QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsDropEnabled
delimiter
pri()
delimiter
self._decks = []
delimiter
object_list.append(new_element)
delimiter
sleep(10)
delimiter
Feed.objects.update_one(push__posts=post)
delimiter
s.ix[x:y].asfreq(BDay()).count()
delimiter
print(arr[[1, 2], [0, 1]])
delimiter
user = models.ForeignKey(User, unique=True)
delimiter
image.show()
delimiter
os.symlink(src, dst)
delimiter
txt_frm.grid_rowconfigure(0, weight=1)
delimiter
np.sum(a == b)
delimiter
result.extend(flatten_to_strings(i))
delimiter
sl = slice(0, 4)
delimiter
self._display.sync()
delimiter
[datetime.datetime(2012, 1, 2, 0, 0)],
delimiter
frozenset(itertools.chain.from_iterable(args))
delimiter
next(i for i, string in enumerate(strings) if substring in string)
delimiter
other_work()
delimiter
func(*args, **kwargs)
delimiter
curses.wrapper(MyApp)
delimiter
self.name = name
delimiter
convert_A_to_B(sys.stdin, sys.stdout)
delimiter
time.mktime(utc_dt.timetuple())
delimiter
infile.seek(0)
delimiter
self.process.run()
delimiter
output.append((num, val))
delimiter
datetime.date(int(a[:4]), int(a[5:7]), int(a[8:10]))
delimiter
result = [x for k, v in list(d.items()) for x in k * v]
delimiter
print(cursor.bindnames())
delimiter
{{(value | currency): request.session.currency_type}}
delimiter
execute(sys.argv[1])
delimiter
fh.readlines()
delimiter
allmodules = [sys.modules[name] for name in modulenames]
delimiter
t.to_datetime()
delimiter
fact2 = dd0 * dd0 / 2
delimiter
c.append(int(digit))
delimiter
somelist = [i for j, i in enumerate(somelist) if j not in indices]
delimiter
[fac(n) for n in nums]
delimiter
app
delimiter
numpy.float64(1.0) / 0.0
delimiter
f.close()
delimiter
np.issubdtype(np.bool, np.integer)
delimiter
a[ind]
delimiter
{{test | safe}}
delimiter
tuple(f())
delimiter
self.data = data
delimiter
flipbf(m).swapaxes(1, 2)
delimiter
times = [match.group(1) for match in pattern.finditer(ifile.read())]
delimiter
states.split()
delimiter
func()
delimiter
np.argmax(np.mean(complete_matrix, axis=1))
delimiter
sys.exit(app.exec_())
delimiter
df_test = df_test.apply(sizes, axis=1)
delimiter
a = [0, 1, 0, 1, 0, 0, 0, 0]
delimiter
ax.grid(True)
delimiter
shutil.copyfile(source_path + file_name, dest_path + file_name)
delimiter
app = Flask(__name__)
delimiter
p.stdout.flush()
delimiter
self.__name__
delimiter
conn.send(msg)
delimiter
print((k, v))
delimiter
np.rollaxis(result, 0, result.ndim)
delimiter
ok = models.BooleanField(null=False, default=True)
delimiter
print(sys.maxunicode)
delimiter
Py_Finalize()
delimiter
plt.clf()
delimiter
data_mean = pd.rolling_mean(data, window=5).shift(-2)
delimiter
print(bar.x)
delimiter
elevation[elevation > 0] = numpy.NAN
delimiter
list(range(start, stop + 1, step))
delimiter
print(add_number(A))
delimiter
cube = numpy.array(list(itertools.product((0, 1), (0, 1), (0, 1))))
delimiter
args = parser.parse_args()
delimiter
locale.setlocale(locale.LC_COLLATE, newone)
delimiter
a * b[:, (np.newaxis)]
delimiter
handles, labels = ax.get_legend_handles_labels()
delimiter
dir(nltk.corpus)
delimiter
plt.gca().add_artist(scalebar)
delimiter
s.connect((host, port))
delimiter
self.stop.grid(row=4, column=1, sticky=EW)
delimiter
Str = random.randomint(1, 18)
delimiter
print(df1.to_string())
delimiter
c = np.array([[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 1, 0]])
delimiter
G = np.array([[0, 0, 0, 0], [1, 0, 0, 0], [1, 1, 0, 0], [1, 1, 1, 0]])
delimiter
manager.connect()
delimiter
plt.show()
delimiter
print(rf.predict([testdataset[-1]]))
delimiter
django.setup()
delimiter
[i for i in x]
delimiter
Food._meta.get_all_related_objects()[0].model
delimiter
[list(range(2, 6)), list(range(12, 18))]
delimiter
ax.pcolormesh(theta, r, Z)
delimiter
hb2 = plt.hexbin(x2, y2, norm=norm)
delimiter
[Factorial(x) for x in arg]
delimiter
response
delimiter
f.write(template)
delimiter
print(link.text.strip()[5:])
delimiter
ax = fig.add_subplot(111)
delimiter
PyEval_SaveThread()
delimiter
numbers = map(int, s.split())
delimiter
signed_number = ctypes.c_long(number).value
delimiter
text.set_rotation(90)
delimiter
joe(joe(joe({}, myTupleList[0]), myTupleList[1]), myTupleList[2])
delimiter
setp(ax1.get_xticklabels(), fontsize=6)
delimiter
time.sleep(1)
delimiter
myNames = f.readlines()
delimiter
logger.addHandler(fh)
delimiter
o.a = 2
delimiter
app.SetTopWindow(frame)
delimiter
plt.show()
delimiter
B = matrix(expm(A))
delimiter
print(f(1))
delimiter
x[1]
delimiter
stdscr.getch()
delimiter
2 * a + b
delimiter
vbox1.addWidget(self.edit2)
delimiter
progbar.pack()
delimiter
main()
delimiter
result_dict[str(len(word))].append(word)
delimiter
logging.root.setLevel(logging.DEBUG)
delimiter
data = request.GET
delimiter
between1(b[0], p[0], q[0]) and between1(b[1], p[1], q[1])
delimiter
myDict[key] += val
delimiter
flt = np.array([x for x in lrg if x == 0])
delimiter
print(s[i:])
delimiter
im2, = ax2.plot(image[0:time, (5), (5)])
delimiter
Obj2.grid_forget()
delimiter
result = list(DBProcessor().get_listings())
delimiter
res += [os.path.join(root, d) for d in dirs]
delimiter
cap = cv2.VideoCapture(0)
delimiter
dict.fromkeys(s, 0)
delimiter
app.register_blueprint(mod)
delimiter
cur.close()
delimiter
sys.exit(app.exec_())
delimiter
x = np.arange(len(df.columns))
delimiter
min(map(lambda x: s.index(x) if x in s else len(s), a))
delimiter
{{message}}
delimiter
df
delimiter
plt.show()
delimiter
e.save()
delimiter
find_indices(a, lambda e: e > 2)
delimiter
nodes[2] = 1
delimiter
print(regex.group(2))
delimiter
obj.refresh_from_db()
delimiter
self.visit_typeA(dataobj)
delimiter
a = np.array([1, 2, 2, 1]).reshape(2, 2)
delimiter
user.Setinfo()
delimiter
html = gzipper.read()
delimiter
gmpy.divm(1, 4, 9)
delimiter
dict(dd)
delimiter
a = str(tag.getArtist())
delimiter
df.to_excel(writer, sheet_name=sheetname)
delimiter
main()
delimiter
app = QtGui.QApplication([])
delimiter
nlargest(2, tags, key=lambda e: e[1])
delimiter
response
delimiter
simplejson.loads(json)
delimiter
oldest = max(people, key=lambda p: p[1])
delimiter
sys.exit(EMERGENCY)
delimiter
result.append([])
delimiter
opt, args = parser.parse_args()
delimiter
axes.legend(handles, labels)
delimiter
unicode_string = byte_string.decode(encoding)
delimiter
img = Image.open(StringIO(response.content))
delimiter
app.cgirun()
delimiter
image = Image.open(picture)
delimiter
groupby(a, [1])
delimiter
[groups[k] for k in sorted(groups.keys())]
delimiter
sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_KEEPINTVL, interval_sec)
delimiter
signal.signal(signal.SIGTERM, self.exit_gracefully)
delimiter
res = urllib.request.urlopen(req)
delimiter
setattr(obj, self.name, float(val))
delimiter
plt.figure()
delimiter
q = DBSession.query(model.Name).distinct(model.Name.value)
delimiter
obj.post_set.count()
delimiter
draw(2, 4, 5)
delimiter
plt.locator_params(nbins=10)
delimiter
print(hex(id(x)))
delimiter
print(dll.get_buf())
delimiter
p = figure(x_range=(-1, 1), y_range=(-1, 1))
delimiter
words.flatMap(set).distinct().count()
delimiter
a = defaultdict(lambda : 1)
delimiter
sys.exit(0)
delimiter
print(key, dict[key])
delimiter
zippend((one_array, two_array), two_outputs())
delimiter
l[:n]
delimiter
numpy.set_printoptions(threshold=numpy.nan)
delimiter
self.label.setMouseTracking(True)
delimiter
flann = cv2.flann_Index(desc2, flann_params)
delimiter
m = merge_a_b(a, b)
delimiter
print([sum(x) for x in itertools.zip_longest(fillvalue=0, *lists)])
delimiter
sys.exit()
delimiter
writer = csv.writer(self.response.out)
delimiter
s = requests.Session()
delimiter
int_list = [int(x) for x in line.split()]
delimiter
plt.set_cmap(viridis)
delimiter
documents = [doc[0] for doc in documents]
delimiter
print([b(5) for b in bases])
delimiter
(dt - epoch).total_seconds()
delimiter
Py_DECREF(result)
delimiter
sigmoid(W1 * x1 + W2 * x2 + B)
delimiter
not any(data)
delimiter
list(zip(A, B * 2))
delimiter
options, args = parser.parse_args()
delimiter
{1}.pop()
delimiter
my_list = [b, a]
delimiter
cv.SetCaptureProperty(camcapture, cv.CV_CAP_PROP_FRAME_WIDTH, 1280)
delimiter
(np.diff(sdata) > 0).sum(axis=1) + 1
delimiter
list(chain.from_iterable(a))
delimiter
data.append(map(str.strip, row))
delimiter
id = Column(Integer, primary_key=True)
delimiter
category = models.ForeignKey(Category)
delimiter
mail.quit()
delimiter
pylab.show()
delimiter
unittest.main()
delimiter
myDF = pd.DataFrame(data)
delimiter
self._shape = self._shape[0], self._shape[1] - 1
delimiter
app
delimiter
[sum(i) for i in zip_longest(fillvalue=0, *l)]
delimiter
cursor.close()
delimiter
listD.append(listC[num])
delimiter
canvas.grid(row=0, column=0, sticky=N + S + E + W)
delimiter
x = np.clip(x, 0, 1)
delimiter
list(itertools.combinations(enumerate(a), 2))
delimiter
result = np.vectorize(my_dict.get)(a)
delimiter
type(counts)
delimiter
coeff, r, rank, s = np.linalg.lstsq(A, B)
delimiter
admin.site.register(Department, DepartmentAdmin)
delimiter
c.close()
delimiter
cleaned = [i for i in map(str.strip, words) if i]
delimiter
print([element for element in lst])
delimiter
app = Flask(__name__)
delimiter
Counter(map(tuple, a))
delimiter
text = pipe.communicate()[0]
delimiter
filename = models.CharField(max_length=128)
delimiter
sock.close()
delimiter
random.shuffle(l2)
delimiter
parser.parse_args()
delimiter
a2D = np.lib.stride_tricks.as_strided(a, shape=(nrows, N), strides=(n, n))
delimiter
a = [1, 1, 1, 1, 1]
delimiter
bin_n = bin(int(n))
delimiter
fig, ax = plt.subplots()
delimiter
diff(x)
delimiter
map(a.__getitem__, b)
delimiter
[0, 2, 6, 7]
delimiter
matrix[:] = [([0] * len(row) if 0 in row else row) for row in matrix]
delimiter
pickle.dump(abe, f)
delimiter
qs_sorted.append(qs.get(id=id))
delimiter
solution = pd.concat(frames)
delimiter
myparent = models.ForeignKey(Parent)
delimiter
sys.path.insert(0, parent_dir)
delimiter
collections.deque(iterator, maxlen=0)
delimiter
root.rowconfigure((0, 1), weight=1)
delimiter
print(x.group(1))
delimiter
zip(*list_of_values[i:i + len(pattern)])
delimiter
[item for item in items if item.col2 == 2006]
delimiter
asyncore.dispatcher.__init__(self)
delimiter
DataFrame([row for i in range(1000)])
delimiter
kwargs = {}
delimiter
isinstance(dict(), collections.MutableMapping)
delimiter
plt.show()
delimiter
wr.writerow(mylist)
delimiter
template = cv2.imread(template_path, cv2.IMREAD_UNCHANGED)
delimiter
[x[i:i + chunk_size] for i in range(0, chunks, chunk_size)]
delimiter
plt.colorbar()
delimiter
mech = mechanize.Browser()
delimiter
pd.DataFrame(r, i, u)
delimiter
sys.path
delimiter
new_list2 = [list2[i] for i in indicies]
delimiter
output += item[0].upper() + item[1:]
delimiter
df.join(x)
delimiter
fib(n - 1) + fib(n - 2)
delimiter
date_parser = pd.datetools.to_datetime
delimiter
pylab.show()
delimiter
func()
delimiter
pprint(result)
delimiter
win = gtk.Window(gtk.WINDOW_TOPLEVEL)
delimiter
list.__setitem__(self, index, value)
delimiter
suite.sort()
delimiter
list[i].append(random.randint(0, 9))
delimiter
print(df.reset_index())
delimiter
df.loc[[0, 2, 4]]
delimiter
writer.writerows(zip(*test_data[1:]))
delimiter
user.put()
delimiter
4.0 * scipy.integrate.nquad(f, [[0, inf], [0, inf]])[0]
delimiter
print(dict.setdefault.__doc__)
delimiter
print(json_data[entry])
delimiter
main()
delimiter
[[[1][2]]]
delimiter
print(e.subs([(a, d), (b, f)]))
delimiter
fig.clf()
delimiter
time.sleep(1)
delimiter
s.bind((TCP_IP, TCP_PORT))
delimiter
scipy.misc.factorial(6)
delimiter
db.init_app(app)
delimiter
gc.collect()
delimiter
image.paste(ic, box)
delimiter
groups_no_a = [i for i in groups if a not in i]
delimiter
QWebView.page().setNetworkAccessManager(myNetworkAccessManager)
delimiter
print(moneyx)
delimiter
django.setup()
delimiter
{{request.user.get_myuser.pretty_username}}
delimiter
clear()
delimiter
n = gmpy2.next_prime(n)
delimiter
plt.scatter(x, y, zorder=1)
delimiter
max_by_group.collect()
delimiter
print(next(next(mp.parse_sents([sent, sent2]))))
delimiter
print(list(myDict.keys()))
delimiter
self.rect.set_height(self.y1 - self.y0)
delimiter
wordlist = openedfile.read().split()
delimiter
do_something(column)
delimiter
tuple([x for x in map(itemgetter(0), G)])
delimiter
n.addConnection(bias_to_hidden)
delimiter
reversed_dict[value].append(key)
delimiter
plt.figure(1)
delimiter
manylinux1_compatible = False
delimiter
os.listdir(long_unc)
delimiter
cv2.destroyAllWindows()
delimiter
do_something()
delimiter
ax.set_xlim(x.min(), x.max())
delimiter
math.pow(x, y)
delimiter
B = np.hstack((splits[0], splits[2]))
delimiter
[x for x in filename if x.isdigit()]
delimiter
os.path.split(x)[-1]
delimiter
cursor = cnx.cursor(dictionary=True)
delimiter
commom = [item for item in list(dict_b.values()) if item in list(dict_a.values())]
delimiter
unittest.main()
delimiter
self.show_popup()
delimiter
print(fin.read())
delimiter
c.connect((hostn, 80))
delimiter
df.index = df.index + 1
delimiter
a / (math.sqrt(2) * erfinv(P))
delimiter
test.py
delimiter
plt.step(x, y)
delimiter
print(cookie)
delimiter
itertools.zip_longest(fillvalue=fillvalue, *args)
delimiter
tuple_foo(tuple(a))
delimiter
os.makedirs(path)
delimiter
df[:-1]
delimiter
CoverageACol = array(list(range(10)), dtype=str).reshape(2, 5)
delimiter
df
delimiter
plt.show()
delimiter
ax.plot(x, y)
delimiter
test = np.array([0, 1, 2, 5, 0])
delimiter
args = parser.parse_args(sys.argv[1:])
delimiter
Response(serializer.data)
delimiter
image.save(output)
delimiter
np.set_printoptions(suppress=True)
delimiter
pyhk.addHotkey(SomeHotkey, SomeFunction)
delimiter
df
delimiter
[list(range(s, s + step + 1, step)) for s in range(start, stop, step)]
delimiter
fn(*args, **kwargs)
delimiter
pygame.quit()
delimiter
conn.close()
delimiter
p.start()
delimiter
nx.draw(G)
delimiter
walk, walk2 = itertools.tee(walk)
delimiter
do_code()
delimiter
out, err = p.communicate()
delimiter
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)
delimiter
do_stuff()
delimiter
app = QApplication(sys.argv)
delimiter
curses.endwin()
delimiter
bar = models.CharField()
delimiter
data = json.load(f)
delimiter
sum(int(c) for c in s if c.isdigit())
delimiter
ws = wb.worksheets[0]
delimiter
print(columns[0])
delimiter
Gtk.ContainerClass.list_child_properties(parent)
delimiter
signal.signal(signal.SIGINT, handler)
delimiter
ax2.plot(list(range(100)), np.ones(100))
delimiter
df.loc[df2.index, df2.columns] = df2
delimiter
print([(k, out[k]) for k in sorted(out.keys())])
delimiter
self.columnconfigure(10, weight=1)
delimiter
axclust.set_xticks([])
delimiter
axcltwo.set_xticks([])
delimiter
ax.autoscale(False)
delimiter
self.window.refresh()
delimiter
curses.initscr()
delimiter
{{field.errors}}
delimiter
out.append([])
delimiter
list(itertools.combinations(keys, 2))
delimiter
mqtt.client.loop_start()
delimiter
run_loop_with_timeout()
delimiter
self.fig.canvas.draw()
delimiter
most_expensive_cars.append(list(company.cars_by_price.all())[0])
delimiter
time.sleep(0.1)
delimiter
yests += [yest]
delimiter
fileout.close()
delimiter
[x for x in seq if x not in seen and not seen.add(x)]
delimiter
str.__init__(self, *args)
delimiter
print(list(zip(A, i)))
delimiter
[e] * n
delimiter
bool(s.intersection(list(someDict.keys())))
delimiter
sys.exit(1)
delimiter
{file: check_image_with_pil(file) for file in files}
delimiter
result.setdefault(v, []).append(k)
delimiter
self.func()
delimiter
plt.xlim([0, len(sub_data)])
delimiter
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
btn.Bind(wx.EVT_BUTTON, self.onDialog)
delimiter
df
delimiter
simplejson.JSONEncoder.default(self, obj)
delimiter
sys.stdout.write(char)
delimiter
sys.stderr.flush()
delimiter
int(f) if f.is_integer() else f
delimiter
cursor.execute(sql)
delimiter
server.start()
delimiter
plt.show()
delimiter
print([eq1] == [eq2])
delimiter
f.write(contents)
delimiter
q = B.select().join(A).where(B.date == last_entry_date)
delimiter
[0.66666667 - 0.66666667]
delimiter
__DBNAME__[0] = name
delimiter
dict.__setitem__(self, frozenset((idx,)), value)
delimiter
items = sorted(list(dct.items()), key=lambda kv: kv[0])
delimiter
list(zip(a, b, zip(*gr), d))
delimiter
self.x == p.x and self.y == p.y
delimiter
df = pd.DataFrame(np.random.randn(10, 6), columns=cols)
delimiter
p = subprocess.Popen(cmdline, stdout=sys.stdout, stderr=sys.stderr)
delimiter
parent.config(menu=menubar)
delimiter
edge_dict[e[0]][e[-1]] += 1
delimiter
lambda s, *args, **kw: not v(s, *args, **kw)
delimiter
im = Image.open(filename)
delimiter
result = list(filter_value(a, 1))
delimiter
float(x)
delimiter
gray = img[:, :, (0)]
delimiter
thread.start()
delimiter
print(s.query(myTable))
delimiter
min_obj_set.append(obj)
delimiter
sess = tf.Session(config=tf.ConfigProto(gpu_options=gpu_options))
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
plt.figure(1)
delimiter
con.commit()
delimiter
z.close()
delimiter
y.std()
delimiter
cert = crypto.dump_certificate(crypto.FILETYPE_PEM, k)
delimiter
frame2 = cv.QueryFrame(video2)
delimiter
id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
delimiter
reader = csv.reader(f)
delimiter
result[a][b] = n[a][b] - 1
delimiter
now = datetime.datetime.utcnow()
delimiter
x
delimiter
out, err = p.communicate()
delimiter
evaluate(lambda x: x < 5 and x > -5)
delimiter
self.y / self.x
delimiter
random.shuffle(arr)
delimiter
numpy.std(rolling_window(observations, n), 1)
delimiter
zip(np.ravel(ix0), np.ravel(ix1), np.ravel(v2))
delimiter
handle_last_line(last_line)
delimiter
wm.add_watch(watched_dir, pyinotify.IN_CLOSE_WRITE, proc_fun=MyProcessEvent())
delimiter
shutil.rmtree(dir)
delimiter
print((r.status_code, r.reason))
delimiter
x += y.todense()
delimiter
ax.figure.canvas.draw()
delimiter
np.random.shuffle(coordinates)
delimiter
func(*args, **kwds)
delimiter
yvalues = line2d[0].get_ydata()
delimiter
model4.py
delimiter
print((find_interval(tlist, item) for item in newlist))
delimiter
sheet.write(0, index, value)
delimiter
soup = BeautifulSoup(html_object)
delimiter
np.array([row[:num_cols] for row in arr])
delimiter
x += datetime.timedelta(1)
delimiter
print(int(round(random.randint(100, 200001), -2)))
delimiter
session.add(s)
delimiter
list(takewhile(lambda i, j=iter(list2): i == next(j), list1))
delimiter
p.close()
delimiter
df = pd.concat((ser1, ser2), axis=1)
delimiter
urllib.parse.unquote_plus(t)
delimiter
fig = plt.figure()
delimiter
driver = webdriver.Firefox(firefox_profile=firefox_profile)
delimiter
array.append([0] * 8)
delimiter
sys.stdout.write(prompt)
delimiter
idx = np.argsort(a, axis=1)
delimiter
proc.wait()
delimiter
k = [(ord(x) - 96) for x in l]
delimiter
model.setData(index, editor.currentIndex())
delimiter
httpd.serve_forever()
delimiter
[(8, 9), (4, 9), (7, 9)]
delimiter
drive, path_and_file = os.path.splitdrive(path)
delimiter
f.write(data)
delimiter
max(MyCount, key=int)
delimiter
first_index = match.start()
delimiter
QtGui.QMainWindow.eventFilter(self, source, event)
delimiter
ax.set_axis_off()
delimiter
QtGui.QWidget.__init__(self)
delimiter
HttpResponse(response, content_type=mimetype[0])
delimiter
False
delimiter
plt.plot()
delimiter
driver.set_window_size(1280, 1024)
delimiter
{i: (IDsums[itr], value_sums[itr]) for itr, i in enumerate(unqID)}
delimiter
s = int(s)
delimiter
json.dump(parse(sys.stdin), sys.stdout, indent=2)
delimiter
ax.plot([0, normp[0]], [0, normp[1]], zs=[0, normp[2]])
delimiter
boolarr = np.array([[0, 0, 1], [1, 0, 1], [1, 0, 1]], dtype=np.bool)
delimiter
app = Flask(__name__)
delimiter
child.kill()
delimiter
matrix.data[row].append(column)
delimiter
to_call(*args, **kwargs)
delimiter
any(x in mystr for x in ls)
delimiter
lists = [[] for _ in range(n)]
delimiter
self.Show()
delimiter
results = sorted(query.fetch(FETCHED), key=_func)
delimiter
Counter(data[1]).most_common()
delimiter
idx[mask].argsort()[unqID]
delimiter
new_list = [g(f(x)) for x in old_list]
delimiter
nt = lambda a, b: S[a].intersection(S[b])
delimiter
db.session.add(provider)
delimiter
set_column(first_col, last_col, width, cell_format, options)
delimiter
fin.seek(0)
delimiter
resp = session.post(url, headers=headers, data=form)
delimiter
my_data = [[int(val) for val in line.split()] for line in lines_list[1:]]
delimiter
hand.sort(key=lambda c: rank_cards.index(c[0]), reverse=True)
delimiter
[hex(c) for c in chars]
delimiter
wx.ListCtrl.__init__(self, parent, ID, pos, size, style)
delimiter
df = concat([reader(f) for f in files], keys=files)
delimiter
img = Image.open(input_path)
delimiter
dirs = list(set([os.path.dirname(x) for x in z.namelist()]))
delimiter
pickle.dump(d, afile)
delimiter
cause
delimiter
feedback.save()
delimiter
a = [[0, 0], [0, 0]]
delimiter
sig1, sig2 = abs(sig1), abs(sig2)
delimiter
setattr(object, attrname, value)
delimiter
writer = csv.writer(output, quoting=csv.QUOTE_NONNUMERIC)
delimiter
element.close()
delimiter
raise AttributeError()
delimiter
child.destroy()
delimiter
pairs = list(my_dict.items())
delimiter
random.choice([p for p in itertools.product(x, repeat=2)])
delimiter
deserialized = Data.deserialize(json.loads(json_string))
delimiter
signal.signal(signal.SIGINT, signal.SIG_IGN)
delimiter
plt.legend()
delimiter
auth.set_access_token(access_token, access_token_secret)
delimiter
df1.add(df2, fill_value=0)
delimiter
np.random.seed(1)
delimiter
plt.scatter(x, y)
delimiter
group.plot(ax=ax[ix], title=i)
delimiter
setup.py
delimiter
self.root.mainloop()
delimiter
{file: mimetypes.guess_type(file) for file in files}
delimiter
opts = parser.parse_args()
delimiter
urllib.request.install_opener(opener)
delimiter
foo.bar()
delimiter
getattr(self.ham, func)(*args, **kwargs)
delimiter
[list_a for list_a in list_a if list_a[0] in list_b]
delimiter
array([[1.0, 0.1, 0.1], [0.09, 1.0, 0.1], [0.2, 0.1, 1.0]])
delimiter
df = pandas.DataFrame.from_records(data_records)
delimiter
number = random.randrange(1, 10)
delimiter
d.setdefault(key, [])
delimiter
lines.append(line)
delimiter
w.show()
delimiter
y_actu = [2, 0, 2, 2, 0, 1, 1, 2, 2, 0, 1, 2]
delimiter
assert np.allclose(results[0], results[1])
delimiter
print(set_list_intersection(set_list))
delimiter
self.save()
delimiter
soup = BeautifulSoup(html)
delimiter
plt.scatter(x, y, c=c)
delimiter
ax.set_ylim(0, 16000)
delimiter
entry.grid(row=0, column=0)
delimiter
random.shuffle(a)
delimiter
g = f()
delimiter
print(len(locals()))
delimiter
els = list(d.items())
delimiter
model.add(Dropout(0.5))
delimiter
deleteseq[i]
delimiter
groups.mean().b
delimiter
writer.writerow(values)
delimiter
v = myDict[k]
delimiter
DISPATCH()
delimiter
ax.add_patch(circle)
delimiter
hbar.pack(side=BOTTOM, fill=X)
delimiter
self.get_next_probe(new_list, probes, unit_length)
delimiter
test()
delimiter
img = ndi.gaussian_filter(img, (10, 10))
delimiter
img.show()
delimiter
fig, ax = plt.subplots()
delimiter
HTML(df.to_html(escape=False))
delimiter
Serial.println(a)
delimiter
df = df.dot(p_value)
delimiter
X[[[0], [1]], [0, 1]]
delimiter
browser.set_handle_equiv(True)
delimiter
m.group(1)
delimiter
list(islice((x for x in a if x not in bset), 100))
delimiter
plt.show()
delimiter
t.start()
delimiter
np.array([1.0, 1.0]).astype(int)
delimiter
print(list(request.headers.keys()))
delimiter
[5, 6, 9]
delimiter
x + y + z
delimiter
self.get_type_display()
delimiter
self.greet()
delimiter
fp.close()
delimiter
g.write(base64.decodestring(newjpgtxt))
delimiter
loads(dumps(input_ordered_dict))
delimiter
df.end_time = pd.to_datetime(df.end_time)
delimiter
ax.xaxis.set_minor_locator(FixedLocator(x_da))
delimiter
fig, axes = plt.subplots(nrows=2, ncols=2)
delimiter
curs.execute(query, args_tuple)
delimiter
[(x, y) for x in nums for y in nums]
delimiter
now = datetime.now()
delimiter
data = {a: int(float(sum(b)) / float(len(b))) for a, b in list(data.items())}
delimiter
rates.sub(treas.squeeze(), axis=0).dropna()
delimiter
list(zip_longest(*a))
delimiter
app = Flask(__name__)
delimiter
time.sleep(0.5)
delimiter
assert len(set(a)) == len(a)
delimiter
print(hdict_from_dict(data))
delimiter
s.getsockname()
delimiter
print(repr(value))
delimiter
slice = arr[:2, :2]
delimiter
globals()[lib] = __import__(lib)
delimiter
print(sock.recv(10240))
delimiter
raise SystemExit(1)
delimiter
r.content
delimiter
print((x.subs(sol[0]), y.subs(sol[0])))
delimiter
sum(dice) - min(dice)
delimiter
t.start()
delimiter
age.__class__.__class__
delimiter
cur_date += relativedelta(months=1)
delimiter
datetime.datetime(*time.gmtime()[:6])
delimiter
response
delimiter
df.isnull()
delimiter
myapp.db.session.commit()
delimiter
print(driver.page_source)
delimiter
your_list = f.read().split()
delimiter
self.config(width=self.width, height=self.height)
delimiter
x = EqM_list(bah * 2 for bah in buh)
delimiter
reversed_arr = np.fliplr([arr1d])[0]
delimiter
children.append(node.starargs)
delimiter
id = Column(Integer, primary_key=True)
delimiter
dummy_df[cols[cols].index]
delimiter
[list_[v:indices[k + 1]] for k, v in enumerate(indices[:-1])]
delimiter
popt, pcov = curve_fit(func, x1, x2)
delimiter
print([(x, text.count(x)) for x in set(text)])
delimiter
ax.plot(x, y)
delimiter
res = {k: coords[nzvals == k] for k in range(1, num_labels + 1)}
delimiter
pprint(d)
delimiter
b_any(word in x for x in lst)
delimiter
stack.append((y0, w0))
delimiter
list(combinations(list(range(len(sent))), n - 1))
delimiter
self.root.update()
delimiter
ao[1:, 1:] += ai[:-1, :-1]
delimiter
print((b[2][0] == b[2][0]).all())
delimiter
raise KeyboardInterrupt
delimiter
new_button.pack()
delimiter
print(datetime.date.today() - datetime.timedelta(1))
delimiter
[o for o in gc.get_objects() if isinstance(o, Foo)]
delimiter
test_trisolve2.test_trisolve()
delimiter
pool.join()
delimiter
plot_selected.xaxis.set_ticks(np.arange(0.2, 1.1, 0.2))
delimiter
req = Request(environ, shallow=True)
delimiter
f.axes[1].set_position([0.05, 0.45, 0.4, 0.05])
delimiter
np.random.permutation(indices)
delimiter
queryset = SomeObject.objects.filter(owner=request.user)
delimiter
tk.Tk.__init__(self, *args, **kwargs)
delimiter
first_name, last_name
delimiter
x, y, z = scipy.sparse.find(a)
delimiter
permu(l)
delimiter
plt.yticks(visible=False)
delimiter
my_handler.setLevel(logging.DEBUG)
delimiter
fnew = np.empty((Nj, Nk))
delimiter
worksheet.write(row, col, key)
delimiter
[bool(x) for x in [[], {}, np.array([])]]
delimiter
np.interp(np.linspace(0, npt, nbin + 1), np.arange(npt), np.sort(x))
delimiter
listbox.insert(tk.END, key)
delimiter
time.time() - time
delimiter
list(itertools.chain.from_iterable(line.split() for line in f))
delimiter
str(int(match.group(0)) - 1)
delimiter
wi.fooi(7)
delimiter
plt.show()
delimiter
pdb.set_trace()
delimiter
app = Flask(__name__)
delimiter
now = datetime.datetime.now()
delimiter
df = pd.DataFrame(data)
delimiter
plt.clf()
delimiter
np.maximum(a, 0, a)
delimiter
self.listofrecords.append(record)
delimiter
Category.objects.filter(child__isnull=True)
delimiter
f.close()
delimiter
df = pd.concat([df[:], tags[:]], axis=1)
delimiter
table = Table(data, colWidths=270, rowHeights=79)
delimiter
wx.Frame.__init__(self, parent)
delimiter
models.OneToOneField(EntryAdmin)
delimiter
result = [i for s in S for i, row in enumerate(X) if (s == row).all()]
delimiter
Response(serializer.data)
delimiter
n = sorted([minN, n, maxN])[1]
delimiter
y = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5]
delimiter
[1, 0, 0, 0, 0]
delimiter
dlg.ShowModal()
delimiter
print(list(flatten_group(b)))
delimiter
np.broadcast_arrays(*output)
delimiter
stdscr.refresh()
delimiter
self.SetTopWindow(mainDlg)
delimiter
grid = np.zeros((10, 10))
delimiter
sum(dct[k] for k in lst if k in dct)
delimiter
main()
delimiter
self.finish()
delimiter
location = models.CharField(max_length=25, choices=SHOP1_CHOICES)
delimiter
[x for x in s if x in printable]
delimiter
deletearray[0]
delimiter
B = np.array([[1], [2]])
delimiter
ax.zaxis.set_major_locator(LinearLocator(10))
delimiter
new_list
delimiter
np.alltrue((a == b).compressed())
delimiter
pretty_xml_as_string = xml.toprettyxml()
delimiter
fig = plt.figure()
delimiter
[min(y, max(x, z)) for x, y, z in zip(a, b, c)]
delimiter
df.eq(df.max(1), 0).astype(int)
delimiter
[list(v) for k, v in groupby(a, np.isfinite) if k]
delimiter
pixbuf = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, False, 8, width, height)
delimiter
pstree - p - a
delimiter
root.mainloop()
delimiter
q.write(w)
delimiter
tree = ET.ElementTree(root)
delimiter
np.ma.masked_array(np.interp(value, x, y))
delimiter
sys.path.insert(0, os.getcwd())
delimiter
outfile.write(json.dumps(output, indent=4))
delimiter
[a, b, c, d, e]
delimiter
ts_clip = ts.reindex(idx)
delimiter
soup = BeautifulSoup(html)
delimiter
req = urllib.request.Request(url)
delimiter
map(str, x)
delimiter
app.mainloop()
delimiter
browser.set_handle_referer(True)
delimiter
Process.__init__(self)
delimiter
self(*args, **kwargs) + other(*args, **kwargs)
delimiter
distances = numpy.linalg.norm(np_cell[1] - srcPos, ord=1, axis=1)
delimiter
A = np.arange(600)
delimiter
stdout_copy = os.fdopen(os.dup(sys.stdout.fileno()), sys.stdout.mode)
delimiter
thread.start()
delimiter
random.shuffle(tmp)
delimiter
x[~np.isnan(x)]
delimiter
A[:, (j)] = (C[j] * mask).sum(axis=-1)
delimiter
ynew = np.linspace(0, 1, Newy)
delimiter
f = open(str(path, encoding))
delimiter
f.seek(0)
delimiter
ax.xaxis.set_major_locator(ticker.FixedLocator(pos_list))
delimiter
print(file.read())
delimiter
f.write(file_str)
delimiter
setattr(modelclass, collection_name, (cls, self))
delimiter
best_index = np.argmin(sq)
delimiter
calling_func(*args, **kw)
delimiter
x = defaultdict(int)
delimiter
process = subprocess.Popen(cmd, stdout=subprocess.PIPE)
delimiter
cpoints = np.unique(cpoints)
delimiter
print(name.lower())
delimiter
print(request.json)
delimiter
code.interact(local=locals())
delimiter
output_file.write(line)
delimiter
hashlib.sha1(bn.T).hexdigest()
delimiter
img.show()
delimiter
a[0].append(8)
delimiter
xs[1::4]
delimiter
all_data = np.hstack((my_data, new_col))
delimiter
abacus[index] = abacus[index] + 1
delimiter
p = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE)
delimiter
p1.wait()
delimiter
app_log.setLevel(logging.INFO)
delimiter
numpy.std(arr, axis=0)
delimiter
hex(x)
delimiter
sys.exit(0)
delimiter
main()
delimiter
glOrtho(0, 1, 0, 1, -1, 1)
delimiter
the_integers[a:b:c].foo()
delimiter
time.sleep(10)
delimiter
new_list_of_dict = map(new_dict, list_of_dict)
delimiter
sess = tf.InteractiveSession()
delimiter
time_d.total_seconds()
delimiter
im = np.asarray(x)
delimiter
t.start()
delimiter
f = {x: make_func(x) for x in range(10)}
delimiter
write(n, 0, 0, 0)
delimiter
np.arange(n) >= arr[:, (np.newaxis)]
delimiter
result()
delimiter
ax1.yaxis.get_offset_text().set_color(plot_ax1.get_color())
delimiter
A[i], A[j], A[k] = A[j], A[k], A[i]
delimiter
w.writerow([key, val])
delimiter
line
delimiter
data = response.json()
delimiter
module_b.py
delimiter
self.Bind(wx.EVT_SIZE, self.on_size)
delimiter
browser.set_handle_redirect(False)
delimiter
tcpCliSock.close()
delimiter
d.tzname()
delimiter
child.kill()
delimiter
p_values = scipy.stats.norm.sf(abs(z_scores)) * 2
delimiter
print(np.asarray((unique, counts)).T)
delimiter
f.write(bytearray(b))
delimiter
model.fit(X, Y, nb_epoch=5, batch_size=100, verbose=1)
delimiter
print(np.flatnonzero(npi.contains([[0, 1]], vals)))
delimiter
print(pd.get_dummies(values))
delimiter
print(type(data))
delimiter
app.run(debug=True)
delimiter
self.canvas.delete(self.last_img)
delimiter
plt.subplot(6, 1, 1)
delimiter
my_dict = obj.__dict__
delimiter
example.examplemod.do_stuff()
delimiter
np.random.seed(1)
delimiter
np.all(a == b, axis=1)
delimiter
Sensor.__init__(self, *args, **kwargs)
delimiter
plt.xticks(x, my_xticks)
delimiter
s = [(e + d) for e in line.split(d) if e]
delimiter
a.do_something()
delimiter
test2 = array([[1, 0, 1, 0, 1]])
delimiter
pygame.mixer.init()
delimiter
f.close()
delimiter
get_template(self.template_name)
delimiter
self._lock.__exit__(*args, **kwargs)
delimiter
p.start()
delimiter
subprocess.Popen([command] + args, startupinfo=startupinfo).wait()
delimiter
[(4 - x, x) for x in range(5)]
delimiter
sizer.Add(button, 0, wx.ALIGN_CENTER)
delimiter
unpickler.load()
delimiter
image_output.seek(0)
delimiter
setattr(target, attr, value)
delimiter
self.w.show()
delimiter
ast.literal_eval(s)
delimiter
self.setCentralWidget(self.form_widget)
delimiter
row.append(0)
delimiter
outfile.close()
delimiter
print([i for r in ranges for i in range(int(r[0]), int(r[-1]) + 1)])
delimiter
any(sublst == lst[i:i + n] for i in range(len(lst) - n + 1))
delimiter
module_object = importlib.import_module(module_name)
delimiter
assert (np_data == new_data).all()
delimiter
output = f.read()
delimiter
f()
delimiter
totaldict = dict(totaldict)
delimiter
print(f.read(line_len).decode())
delimiter
reader = csv.DictReader(csvfile, fieldnames)
delimiter
pool.terminate()
delimiter
a[sort_indices, static_indices[1], static_indices[2]]
delimiter
int(x) if x else 0
delimiter
idx = np.array([[0, 0, 0], [1, 1, 0], [0, 1, 2]])
delimiter
head, tail = seq[0], seq[1:]
delimiter
time.sleep(delay)
delimiter
print(df)
delimiter
ss.chisquare(FRQ)
delimiter
matches = list(compress(totalist, selectors))
delimiter
pool.map_async(f, args)
delimiter
app.run()
delimiter
ECD.close()
delimiter
True
delimiter
entries = Entry.objects.select_for_update().filter(author=request.user)
delimiter
print(sign.getvalue())
delimiter
B.append(A[0])
delimiter
plt.contour(X, Y, scalar_field)
delimiter
raw_xml = etree.tostring(div)
delimiter
net.params
delimiter
L[:1], L[1:] = L[-1:], L[:-1]
delimiter
ax = fig.add_subplot(111)
delimiter
tf.set_random_seed(1)
delimiter
print(json.loads(jsonstring, object_hook=hinted_tuple_hook))
delimiter
db.session.add(query)
delimiter
s.commit()
delimiter
results.div(weights, axis=0)
delimiter
os.path.isdir(path)
delimiter
s.group(0)
delimiter
data_file.close()
delimiter
[d[i] for i in k]
delimiter
factarr * cplxarr.real + 1j * cplxarr.imag
delimiter
df.iloc[0, 2] = np.nan
delimiter
f(*args, **kwargs)
delimiter
print(filename[0])
delimiter
print(row[0], binascii.b2a_hex(row[1]))
delimiter
x[1][0][2]
delimiter
nx.draw(G, pos, with_labels=False, arrows=False)
delimiter
plt.xticks(rotation=15)
delimiter
now = datetime.datetime.now()
delimiter
msg.attach(img)
delimiter
y_pred = [0, 1, 0, 1, 2, 2, 1]
delimiter
plt.axis([-2, 2, -12, 12])
delimiter
cell = sheet.cell(6, 0)
delimiter
setattr(self, name, value)
delimiter
sum((y_pred - y_true) ** 2, axis=-1)
delimiter
wx.PyControl.__init__(self, parent, id, **kwargs)
delimiter
self.d.callback(self.buffer)
delimiter
[99.0, 99.0, 99.0, 99.0, 99.0, 99.0],
delimiter
aware = naive.replace(tzinfo=utc)
delimiter
server_ssl.close()
delimiter
[1, 2]
delimiter
{y: x for x, y in t}
delimiter
fliplr(m).swapaxes(0, 1)
delimiter
stdin, stdout, stderr
delimiter
window.show()
delimiter
do_stuff()
delimiter
f.close()
delimiter
l.sort()
delimiter
C = scipy.delete(C, 1, 1)
delimiter
r = dict(list(a.items()) + list(b.items()) + [(k, a[k] + b[k]) for k in set(b) & set(a)])
delimiter
shop1()
delimiter
self.byid[row[0]] = item
delimiter
input.sort(key=sortkeyfn)
delimiter
betas.iloc[:5, :5]
delimiter
print(list(row))
delimiter
Silly(1)
delimiter
df.columns = pd.to_datetime(df.columns)
delimiter
a * b
delimiter
plt.plot(list(range(10, 20)))
delimiter
root = tk.Tk()
delimiter
print([item for items, c in Counter(a).most_common() for item in [items] * c])
delimiter
writer.writeheader()
delimiter
r.text
delimiter
b = map(list, zip(*a))
delimiter
ax.scatter(x, y, c=z, cmap=cm, norm=norm)
delimiter
r = proc.stdout.readline()
delimiter
True
delimiter
result.append(item)
delimiter
myarray = np.asarray(mylist)
delimiter
newList = map(lambda y: max(0, min(255, y)), oldList)
delimiter
plt.colorbar()
delimiter
driver.implicitly_wait(20)
delimiter
print(pool.map(square, range(1000)))
delimiter
y = np.sin(x)
delimiter
main()
delimiter
inspect.isclass(X)
delimiter
len(self.left) + len(self.right)
delimiter
res.append(f(v))
delimiter
out[:-1, :] += tmp[1:, :]
delimiter
genn(igap, igap + 2)
delimiter
func2(gen2)
delimiter
result = []
delimiter
print(resp.status_code)
delimiter
plt.show()
delimiter
ax2.xaxis.set_major_formatter(copy.copy(Formatter))
delimiter
time.sleep(10)
delimiter
b = datetime.datetime.now()
delimiter
id = Column(Integer, primary_key=True)
delimiter
str(self)
delimiter
scipy.stats.norm(100, 12).cdf(100)
delimiter
print(repr(text))
delimiter
err = p.communicate()[1]
delimiter
imshow(data)
delimiter
fcntl.flock(f.fileno(), fcntl.LOCK_EX)
delimiter
print(a.intersection(b))
delimiter
df.columns[(df == 0).all()]
delimiter
grid.cbar_axes[0].colorbar(im0)
delimiter
app = Flask(__name__)
delimiter
print(trk.name())
delimiter
dists.value
delimiter
imgdata = base64.b64decode(imgstring)
delimiter
file1.close()
delimiter
myfile.write(S)
delimiter
smallerThanN([1, 4, 10, 2, 7], 5)
delimiter
top.mainloop()
delimiter
z = {(s[x:] + s[:x]) for x in range(len(s))}
delimiter
print(f.read())
delimiter
f.close()
delimiter
pdf.add_page()
delimiter
__init__.py
delimiter
np.concatenate((M, new_face), dim)
delimiter
sys.exit()
delimiter
width = img.shape[1]
delimiter
Py_Finalize()
delimiter
NULL
delimiter
seq[-a:] + seq[:-a]
delimiter
name = models.CharField()
delimiter
self.harmstat = harmstat
delimiter
current_child.save()
delimiter
foo[0][0][0] is foo
delimiter
getattr(self._ref2, name)
delimiter
s.connect((HOST, PORT))
delimiter
cursor.execute(query, param)
delimiter
time.sleep(1.0)
delimiter
button1_window = canvas1.create_window(10, 10, anchor=NW, window=button1)
delimiter
arr = [[] for _ in range(5)]
delimiter
b = json.loads(a)
delimiter
myList.sort(cmp_dict)
delimiter
signal.signal(signal.SIGINT, signal_handler)
delimiter
print((c, p(c)))
delimiter
PyObject_HEAD_INIT(NULL)
delimiter
np.arange(n)
delimiter
whisper
delimiter
x = a << 1 & 4294967295
delimiter
print(paramdata.values)
delimiter
data = urllib.request.urlopen(url).read()
delimiter
np.dstack((a1, a1.T)).reshape(-1, 2)
delimiter
window.fullscreen()
delimiter
print(sys.argv[1])
delimiter
f.pack(padx=100, pady=100)
delimiter
pdf.savefig()
delimiter
print(re.findall(r, s))
delimiter
print(my_list)
delimiter
ax.plot(list(range(10)), color=color)
delimiter
x = df.reset_index()
delimiter
pat.findall(text)
delimiter
conn.close()
delimiter
plt.xticks(rotation=90)
delimiter
list_list = [[] for Null in range(2)]
delimiter
f.write(e)
delimiter
yappi.start()
delimiter
print((x, y))
delimiter
matches = [string for string in l if re.match(regex, string)]
delimiter
bool(collections.Counter([1]))
delimiter
i = np.array([[0, 0], [1, 1]])
delimiter
df.sort_index(inplace=True)
delimiter
sys.getsizeof(a)
delimiter
excel.Quit()
delimiter
plt.tight_layout()
delimiter
self.canvas.scan_mark(event.x, event.y)
delimiter
y = tf.slice(x, [i], [1])
delimiter
wx.BeginBusyCursor()
delimiter
[math.sqrt(sum([(i * i) for i in vec])) for vec in x]
delimiter
myproject / myapp / middleware / globalrequestmiddleware.py
delimiter
s.sendmail(me, family, msg.as_string())
delimiter
self.mainframe.grid(column=0, row=0, sticky=(N, W, E, S))
delimiter
my = np.matrix(y)
delimiter
self.canvas.configure(scrollregion=(0, 0, 1000, 1000))
delimiter
glfw.WindowHint(glfw.OPENGL_FORWARD_COMPAT, GL_TRUE)
delimiter
print(channel.recv(1024))
delimiter
print(trimmed_text)
delimiter
random.shuffle(shuffled)
delimiter
htmlentitydefs.entitydefs[x[1:-1]]
delimiter
fig, ax = plt.subplots()
delimiter
shutil.move(tempname, zipfname)
delimiter
start_time = time.time()
delimiter
arr_ip = [tuple(i) for i in X.as_matrix()]
delimiter
sys.stdout.flush()
delimiter
db.commit()
delimiter
turtle.mainloop()
delimiter
Counter(myletters)
delimiter
df
delimiter
writer.writerow(fields)
delimiter
new_file.write(new_line)
delimiter
datetime.date(2011, 1, 1)
delimiter
list(df)
delimiter
QObjectCleanupHandler().add(self.layout())
delimiter
D = np.diff(np.sort(product.T, axis=0), axis=0) == 0
delimiter
Notification.objects.exclude(pk__in=list(notes)).delete()
delimiter
A[(idx), :]
delimiter
my_list.Skip(1).Concat(my_list.Take(1))
delimiter
print(data.text)
delimiter
x = np.linspace(0, 10, 50)
delimiter
x, y, z = v
delimiter
deletex[key]
delimiter
orig_image = Image.open(original_file)
delimiter
a = np.frombuffer(array_pointer.contents)
delimiter
ax = fig.add_subplot(111)
delimiter
print(paragraph.text)
delimiter
new_a = np.delete(a, index)
delimiter
self.fileobj.fileno()
delimiter
c = matplotlib.pyplot.contour(x, y, f(x, y))
delimiter
c = [tuple([(i + j) for i, j in zip(e, b)]) for e in a]
delimiter
assert np.allclose(np.dot(P, vec), val * vec)
delimiter
self.num = 1
delimiter
df = pd.DataFrame(data)
delimiter
Py_Initialize()
delimiter
self.sock.listen(5)
delimiter
tree.add(0)
delimiter
server.listen(5)
delimiter
fig = plt.figure()
delimiter
df1.index.get_loc(t)
delimiter
inner1()
delimiter
data = s.recv(2048)
delimiter
main()
delimiter
l.pack()
delimiter
model.fit(X)
delimiter
created_at = models.DateTimeField()
delimiter
output.close()
delimiter
flipbf(m).swapaxes(0, 2)
delimiter
root = Tk()
delimiter
shutdownJVM()
delimiter
instance.save()
delimiter
d + (date(d.year + years, 1, 1) - date(d.year, 1, 1))
delimiter
newList = [elem for elem in oldlist]
delimiter
dct = dict(zip(l2, lens))
delimiter
yaml_file.write(yaml.dump(data, default_flow_style=False))
delimiter
id = Column(Integer, primary_key=True, nullable=False)
delimiter
sys.stdout.write(format % args)
delimiter
np.issubdtype(np.void, np.integer)
delimiter
ax.set_xlim(-0.5, 4.5)
delimiter
self.assertEqual(first, second, msg)
delimiter
child.start()
delimiter
list(incremental_range(0, 20, 1, 1))
delimiter
np.array_split(a, [1], axis=1)
delimiter
df.index = pd.to_datetime(df.index)
delimiter
freq = db.StringProperty()
delimiter
QtCore.QThread.__init__(self)
delimiter
print([int(ch) for i in list1 for ch in str(i)])
delimiter
print((k, list(g)))
delimiter
print(my_object)
delimiter
plt.scatter(i, y)
delimiter
foofunc()
delimiter
ax.set_ylim(6, 24)
delimiter
b.append((begin, end))
delimiter
functest()
delimiter
os.fsync(f.fileno())
delimiter
threading.Thread.__init__(self)
delimiter
(w for w in wordlist if is_neighbors(word, w))
delimiter
plt.show()
delimiter
pandas_df_to_markdown_table(infodf)
delimiter
d[key].append(list(value))
delimiter
build_cscript()
delimiter
{{(img.height | div): 2}}
delimiter
d.update({1})
delimiter
plt.show()
delimiter
sizer = wx.BoxSizer(wx.VERTICAL)
delimiter
dev.ledstates(verbose=True)
delimiter
arr = input().split()
delimiter
http_request = get_request()
delimiter
loss_or_grads = loss_or_grads.mean()
delimiter
dicC.update(dicB)
delimiter
x = np.linspace(0, 1, N)
delimiter
foo()
delimiter
httpd.serve_forever()
delimiter
list(self).index(obj)
delimiter
foo = np.array([[0, 1], [1, 1]])
delimiter
instance = klass()
delimiter
pygame.camera.quit()
delimiter
string_input = input()
delimiter
env = Environment()
delimiter
print_foo()
delimiter
c_uint.__init__(self, value)
delimiter
crl_url.strip()
delimiter
ax2 = fig.add_subplot(122)
delimiter
process.start()
delimiter
main()
delimiter
w = Button(root)
delimiter
fig.canvas.draw()
delimiter
self.scat.set_offsets(data[:2, :])
delimiter
_draw_point(renderer, position, i, j + 1)
delimiter
app.exec_()
delimiter
df = pd.concat([df[df.columns[:5]], a], axis=1)
delimiter
np.index_exp[10:4, ::-1, ...]
delimiter
sys.exit()
delimiter
content = resp.read()
delimiter
print(dtd.error_log.filter_from_errors())
delimiter
contourf(x, y, H1, levels1, cmap=cmap_lin1)
delimiter
plt.gca().add_collection(lc)
delimiter
plt.show()
delimiter
now = time.time()
delimiter
mask = x == 0
delimiter
browser = webdriver.Firefox(fp)
delimiter
fig.subplots_adjust(wspace=0, hspace=0)
delimiter
fp.close()
delimiter
pygame.draw.rect(game_display, (255, 0, 0), rect_one)
delimiter
app.debug = True
delimiter
inner1d(U.transpose(0, 2, 1), V.T)
delimiter
test.main()
delimiter
G = nx.Graph()
delimiter
plt.show()
delimiter
abs(x), angle(x)
delimiter
self.scat = self.ax.scatter(x, y, c=c, s=s, animated=True)
delimiter
False
delimiter
plt.plot(np.sin(np.linspace(0, 10, 100)))
delimiter
TScolumns = pd.DataFrame(df.TimeStamp.tolist())
delimiter
locale.setlocale(locale.LC_ALL, loc)
delimiter
G.add_node(1)
delimiter
a[:i] + MIDCHAR
delimiter
next(self.iterator)
delimiter
f.close()
delimiter
time.sleep(10)
delimiter
name = models.CharField(max_length=64)
delimiter
heap_sort()
delimiter
print(list(range(maxend - maxrun + 1, maxend + 1)))
delimiter
np.random.seed(1977)
delimiter
fig, ax = plt.subplots()
delimiter
reuests.post(url, files=files)
delimiter
pdb.set_trace()
delimiter
de[i].extend(j)
delimiter
sphinx - apidoc - -help
delimiter
print(functools.reduce(lambda x, y: x & y, [a, b, c]))
delimiter
f(*args, **kwds)
delimiter
opener = urllib.request.build_opener()
delimiter
gc.collect()
delimiter
np.random.choice(choices, 5, p=counts / len(a), replace=False)
delimiter
print(hashlib.sha1(bencode.bencode(info)).hexdigest())
delimiter
do_something(line)
delimiter
self.stdin.flush()
delimiter
os.unlink(filename)
delimiter
pl.show()
delimiter
plt.xlim([min(data) - 5, max(data) + 5])
delimiter
admin.site.register(Person, PersonAdmin)
delimiter
main(sys.argv)
delimiter
time.sleep(1)
delimiter
a[0] += 1
delimiter
list2 = [1, 1, 0, 0, 1]
delimiter
conn = pymongo.MongoClient()
delimiter
len(nearbystrikes) > 0
delimiter
server.starttls()
delimiter
apos += alo
delimiter
a, b
delimiter
pd.read_json(json.dumps(r)).unstack()
delimiter
u.delete()
delimiter
transport = ssh_client.get_transport()
delimiter
id = Column(Integer, primary_key=True)
delimiter
time.mktime(date.timetuple())
delimiter
suite = unittest.TestSuite()
delimiter
self.table.item(1, 0).setBackground(QtGui.QColor(125, 125, 125))
delimiter
tk.Frame.__init__(self, *args, **kwargs)
delimiter
setp(ax2.get_xticklabels(), visible=False)
delimiter
d.apply(pd.value_counts)
delimiter
{k: (v[0] if len(v) == 1 else v) for k, v in qdict.lists()}
delimiter
np.where(y == 0, 0, x / y)
delimiter
deletelist_2[int(i)]
delimiter
help(window.set_position)
delimiter
[5] * 4
delimiter
simulations_to_run.join()
delimiter
s.connect((TCP_IP, TCP_PORT))
delimiter
print(df.head())
delimiter
df = pd.DataFrame()
delimiter
iren.Start()
delimiter
s.starttls()
delimiter
self.driver = webdriver.Firefox()
delimiter
d1.update(d2)
delimiter
ranges.append((1, 10))
delimiter
4.0 * scipy.integrate.nquad(f, ([0, d / 2], [0, d / 2]))[0]
delimiter
myDictionary.get(key)
delimiter
[1, 2, 5, 6, 7, 10]
delimiter
json.JSONEncoder.default(self, obj)
delimiter
p = pyaudio.PyAudio()
delimiter
ax.set_xlim([-2, 2])
delimiter
t.start()
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
cheese = args.three
delimiter
np.argsort(x)
delimiter
os.setsid()
delimiter
query_set.filter(deleted_at__isnull=True)
delimiter
getattr(c, m)()
delimiter
seen.add(x)
delimiter
f = x.decl()
delimiter
numpy.random.bytes(length)
delimiter
label.pack()
delimiter
a *= a > 0
delimiter
tree = lxml.etree.fromstring(doc)
delimiter
loop.run_forever()
delimiter
print(len(lines))
delimiter
kmdistance = float(kmdistance)
delimiter
bitmap = gtk.gdk.Pixmap(win.window, size[0], size[1], 1)
delimiter
pyplot.plot(x, y)
delimiter
dir = os.path.dirname(os.path.dirname(file))
delimiter
self.transport.loseConnection()
delimiter
connection.close()
delimiter
mail.sendmail(EMAIL_FROM, EMAIL_TO, msg.as_string())
delimiter
ax.plot(x, y)
delimiter
DF.cumsum()
delimiter
thirdpartymodule_b.dosomething()
delimiter
list(le.inverse_transform([2, 2, 1]))
delimiter
self.root.mainloop()
delimiter
roc_curve(y_true, y_score)
delimiter
print(ascii_num[::-1])
delimiter
MDD_start, MDD_end, MDD_duration, drawdown, UW_dt, UW_duration
delimiter
print([(r / s) for s in [psum(raw)] for r in raw])
delimiter
layout.addWidget(self.toolbar)
delimiter
p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
delimiter
zip(cv.get_feature_names(), np.asarray(X.sum(axis=0)).ravel())
delimiter
{x: (0) for x in alphabet}
delimiter
id = db.Column(db.Integer, primary_key=True)
delimiter
data = np.random.normal(size=1000)
delimiter
df = pd.read_csv(io.StringIO(data))
delimiter
n_grams = CountVectorizer(min_n=1, max_n=5)
delimiter
dfcopy.a.ix[0] = 2
delimiter
subprocess.call(args)
delimiter
round(2.605, 2)
delimiter
round(2.067, 2)
delimiter
file.seek(lastKnownSizeOfFile)
delimiter
Base2.bar()
delimiter
res.read()
delimiter
member = getattr(module, membername)
delimiter
print(list(filter(len, a)))
delimiter
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
delimiter
plt.bar(x2, y)
delimiter
print([(2 ** ((N - abs(N - k)) % N)) for k in range(2 * N + 1)])
delimiter
srf = pygame.display.set_mode((640, 480))
delimiter
decompressed_data = zlib.decompress(f.read(), 16 + zlib.MAX_WBITS)
delimiter
ax2.plot(list(range(10, 20)))
delimiter
print(PATTERN.split(data)[1::2])
delimiter
X[::-1, ::-1, ::-1]
delimiter
fout.write(regex.sub(replfunc, line))
delimiter
print(tuple(l))
delimiter
df1.join(df2)
delimiter
object_id = models.PositiveIntegerField()
delimiter
X = X.reindex(np.roll(X.index, 1))
delimiter
x = a if b else 0
delimiter
img = plt.imread(filename)
delimiter
ax.legend()
delimiter
sorted(y, key=x.__getitem__)
delimiter
fig = plt.figure()
delimiter
root = Tk()
delimiter
c.setopt(c.URL, url)
delimiter
df = df.loc[(df[col].isin(counts[counts > threshold].index)), :]
delimiter
s = f.read()
delimiter
y = np.arange(Y)
delimiter
print(i, j, k)
delimiter
table.sort(reverse=True, key=Team.getPoints)
delimiter
result.append(list(g))
delimiter
unittest.main()
delimiter
logger.removeFilter(dup_filter)
delimiter
print(get_image_info(data))
delimiter
plt.ylim(0, 40000)
delimiter
thread = threading.Thread(target=server.serve_forever)
delimiter
print(soup.prettify())
delimiter
print(resp.url)
delimiter
fig, ax = plt.subplots()
delimiter
conn = boto.connect_dynamodb()
delimiter
s[0]
delimiter
QApplication.__init__(self, *args)
delimiter
module = imp.new_module(name)
delimiter
print(key, value)
delimiter
df = pd.DataFrame(a.T)
delimiter
ax.set_yticks([])
delimiter
ax = fig.add_subplot(121)
delimiter
rand_stocks = np.random.randint(0, len(data), size=batch_size)
delimiter
self.assertEqual(404, response.status_code)
delimiter
plt.draw()
delimiter
self.myParent.grid_columnconfigure(0, weight=1)
delimiter
tuples = list(d.values())
delimiter
m.mymethod()
delimiter
Cal2 = sum(n for n in domain if n % 2 == 0)
delimiter
harmonic_number = lambda n: sum(Fraction(1, d) for d in range(1, n + 1))
delimiter
stdscr.refresh()
delimiter
[1, 2][::-1]
delimiter
zip_longest(fillvalue=fillvalue, *args)
delimiter
list(OrderedDict.fromkeys(items))
delimiter
list_words = [fs.format(a) for x in l for a in x.split()]
delimiter
random.seed(42)
delimiter
list_of_pairs = [(p1, p2) for p1 in people for p2 in people if p1 != p2]
delimiter
time.sleep(5)
delimiter
li = [id_s[c] for c in list]
delimiter
plt.bar(df.index.to_pydatetime(), df.Val, width=0.4)
delimiter
pad.refresh(top, 0, 0, 0, curses.LINES - 1, curses.COLS - 1)
delimiter
app = Flask(__name__)
delimiter
dict.__setitem__(self, key, value)
delimiter
os.makedirs(directory_name)
delimiter
new_a = a[(a <= 100).all(1)]
delimiter
ax.set_ylim(0, 5)
delimiter
[str(v) for v in obj.attrs.all()]
delimiter
c = copy.deepcopy(a)
delimiter
namestr(a, globals())
delimiter
df[df.a < np.percentile(df.a, 95)]
delimiter
func(b)
delimiter
np.linalg.norm(coef, axis=0)
delimiter
open_file.close()
delimiter
pprint.pprint(arr)
delimiter
z.update({key: value})
delimiter
all_pairs += [((nB, 1), (nC, 2)) for nB, nC in itertools.product(listB, listC)]
delimiter
(data[index] for index in indices[field][key])
delimiter
result._fields
delimiter
df = pandas.DataFrame(data)
delimiter
print(np.corrcoef(x_tag[0:len(x_tag) - 1], x_tag[1:])[0][1])
delimiter
df.apply(make_plot)
delimiter
(i.bit_length() + 7) // 8
delimiter
ordered = list(list_dict[val] for val in ordering_list)
delimiter
print(df5.groupby(level=0).apply(process))
delimiter
self.show()
delimiter
np.argwhere(np.in1d(a, np.intersect1d(a, b)) == False)
delimiter
scopes = set()
delimiter
get_max(my_list)
delimiter
plt.gcf().gca().add_artist(circle1)
delimiter
cursor.execute(query, [id])
delimiter
newlist = old_list.copy()
delimiter
imshow(A)
delimiter
ax1.set_xlim(0, 1000.0)
delimiter
matrix[~mask] = 0
delimiter
ax.w_zaxis.set_major_locator(LinearLocator(10))
delimiter
self.SetSizer(self.sizer)
delimiter
zfile.close()
delimiter
[(id(x) == id(y)) for x, y in zip(lis, new_lis1)]
delimiter
plt.ylim(ymin, ymax)
delimiter
s += etree.tostring(sub_element)
delimiter
writer.writerows(row[:1] + [0.0] + row[1:] for row in reader)
delimiter
ax.grid()
delimiter
plt.show()
delimiter
print(soup.p)
delimiter
new_list.append(l1[index] + l2[index])
delimiter
cursor.execute(sql)
delimiter
dilation.process(tree.clone(), tree)
delimiter
f(1)
delimiter
aList.sort(key=lambda x: (x[idx] for idx in args))
delimiter
Counter(string)
delimiter
numpy.vectorize(complex)(Data[..., (0)], Data[..., (1)])
delimiter
port = int(port)
delimiter
type(data)
delimiter
plt.draw()
delimiter
root = ET.fromstring(xmlstr)
delimiter
cfs = floating_bond.cashflows()
delimiter
random.sample(list(enumerate(l)), 5)
delimiter
print(df)
delimiter
stupidtrick()
delimiter
parser = argparse.ArgumentParser()
delimiter
1 / (1 + math.exp(-x))
delimiter
db.create_tables([ModelA, ModelB, ModelC])
delimiter
imshow(cm.hsv(Z1), alpha=0.6, extent=extent)
delimiter
model = Sequential()
delimiter
c_dict = {k: pd.DataFrame(v) for k, v in groups.groups.items()}
delimiter
myDB.connect()
delimiter
writer.writerow(row)
delimiter
all([0, 1])
delimiter
[s[5 * i:5 * i + 5] for i in range(0, math.ceil(len(s) / 5))]
delimiter
x = [n.strip() for n in x]
delimiter
a.A()
delimiter
axins1.set_xlim(x1, x2)
delimiter
socket.setdefaulttimeout()
delimiter
audio /= np.max(np.abs(audio), axis=0)
delimiter
map(str, lst)
delimiter
plt.subplots_adjust(bottom=0.15)
delimiter
result = sum(range(1, 401, 4))
delimiter
text_entry.pack()
delimiter
A[:] = somedata[:]
delimiter
created_by = models.ForeignKey(profile)
delimiter
results.append((a[first][0], a[second][0], a[third][0]))
delimiter
self.builds = builds
delimiter
print(lines[:100])
delimiter
cost_obj.save()
delimiter
UserModel.save(using=db, force_insert=True)
delimiter
ip = socket.gethostbyname(socket.gethostname())
delimiter
self._result.addFailure(self, sys.exc_info())
delimiter
matplotlib_fig.show()
delimiter
g.__code__.co_name
delimiter
color_img = cv2.cvtColor(gray_img, cv.CV_GRAY2RGB)
delimiter
nlargest(n, your2DList, key=lambda x: x[-1])
delimiter
df = pd.concat([df] * 100000).reset_index(drop=True)
delimiter
plt.show()
delimiter
ax.plot(list(range(10)))
delimiter
sys.stdout.flush()
delimiter
root2.minsize(root2.winfo_reqwidth(), root2.winfo_reqheight())
delimiter
webbrowser.open_new(url)
delimiter
a[-1].shape
delimiter
e.pack()
delimiter
plt.plot(np.cos(np.linspace(0, 10, 100)))
delimiter
d.bar()
delimiter
normedA = array(norm(v) for v in A)
delimiter
handles, labels = plt.gca().get_legend_handles_labels()
delimiter
a.add(x)
delimiter
foofoo.py
delimiter
os.kill(int(sys.argv[1]), 0)
delimiter
strat1.execute()
delimiter
nil
delimiter
dictionary[len(i)] += 1
delimiter
response = urllib.request.urlopen(url)
delimiter
sorted(l, key=alphanum_key)
delimiter
datetime.datetime.now()
delimiter
help(raw_input)
delimiter
matmult(x, y)
delimiter
g.index = g.index.swaplevel(1, 2)
delimiter
creatures = dict()
delimiter
meds.sort(ascending=False)
delimiter
canvas.pack(side=LEFT, fill=BOTH, expand=TRUE)
delimiter
print(self.parent.__name__)
delimiter
time.sleep(0.1)
delimiter
fig, ax = plt.subplots()
delimiter
next(combs2)
delimiter
app.run(debug=True)
delimiter
print(type(data))
delimiter
__init__.py
delimiter
row, col = numpy.where(M == 0)
delimiter
self.setupUi(self)
delimiter
plt.plot(x, 4 * x)
delimiter
pnt.ewkt
delimiter
__init__.py
delimiter
ax.set_xlim(0, 10)
delimiter
arg[::-1]
delimiter
plt.scatter(a[0], a[1], s=50, c=colormap[categories])
delimiter
ax = plt.gca()
delimiter
size = models.IntegerField(blank=True, null=True)
delimiter
dct = dict(zip(ascii_uppercase, lens))
delimiter
self.model = QtGui.QStandardItemModel()
delimiter
sublist.sort()
delimiter
saved = locale.setlocale(locale.LC_ALL)
delimiter
len([letter for letter in word if letter not in BAD_LETTERS])
delimiter
plt.figure(2)
delimiter
shutil.copyfileobj(r, f)
delimiter
len(response.content)
delimiter
plt.show()
delimiter
a.append(a.pop(0))
delimiter
print(f.info())
delimiter
os.unlink(targetLink)
delimiter
b_result.append(b)
delimiter
pd.read_csv(s, parse_dates=[0], dayfirst=True)
delimiter
tuple(l)
delimiter
objs.append(pickle.load(f))
delimiter
df
delimiter
response
delimiter
pl.hist(data, bins=np.logspace(0.1, 1.0, 50))
delimiter
x = copy.deepcopy(y)
delimiter
print(sys.executable)
delimiter
self.process.communicate()
delimiter
print(utc_dt.astimezone(get_localzone()))
delimiter
len(set(list_)) == len(list_)
delimiter
httpd.serve_forever()
delimiter
print(self.__class__.__dict__)
delimiter
final_ensemble.estimators_ += ensemble.estimators_
delimiter
ns = np.arange(-5, 5 + 1)
delimiter
s = requests.Session()
delimiter
print(abs(x) % 1000)
delimiter
logger.removeHandler(logger.handlers[0])
delimiter
self.foo.start()
delimiter
[1695.86408654, 2140.0, 6969.0],
delimiter
msg = MIMEMultipart()
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
delimiter
print(key)
delimiter
f.seek(999999)
delimiter
l = list(filter(str.strip, l))
delimiter
form = ContactForm(request.POST)
delimiter
root.mainloop()
delimiter
result = [myFunc(p, additionalArgument) for p in pages]
delimiter
b()
delimiter
end_date[-1] = end_date[-1][:4]
delimiter
Counter(map(tuple, a.T))
delimiter
pylab.show()
delimiter
kpt_data.reshape(h_r.shape[:2] + (-1,))
delimiter
x.upper()
delimiter
gobject.threads_init()
delimiter
tt = matplotlib.delaunay.triangulate.Triangulation(x, y)
delimiter
time.sleep(0.01)
delimiter
time.sleep(0.1)
delimiter
R1.__init__(self)
delimiter
print(types[bisect.bisect(points, Point(0.1, 0.1)) - 1])
delimiter
time.sleep(seconds / 1000000.0)
delimiter
root.mainloop()
delimiter
wtr.writerows(in_iter)
delimiter
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
s[1]
delimiter
list(chain.from_iterable(zip(data, tweets)))
delimiter
ords = (ord(c) for c in s)
delimiter
lines = (line.rstrip() for line in f)
delimiter
s.set_debuglevel(1)
delimiter
stdoutdata, stderrdata = proc.communicate()
delimiter
open_workbook(excel_file_full_path, formatting_info=True)
delimiter
df.university.apply(extract_city)
delimiter
sys.exit(app.exec_())
delimiter
self._exit()
delimiter
arr2d.sum(1)
delimiter
HypotheticalBranch(0, 1, 1)
delimiter
shutil.copyfileobj(zf, f)
delimiter
Parent.__init__(self, *args, **kwargs)
delimiter
df.reset_index()
delimiter
ax = plt.gca()
delimiter
file.seek(-1024 * 1024, os.SEEK_END)
delimiter
a = numpy.empty(n, dtype=object)
delimiter
np.array(sorted(set(a) | set(b)))
delimiter
self.button.clicked.connect(self.plot)
delimiter
writer = csv.writer(f)
delimiter
plt.axis([-1, 6, 0, 6])
delimiter
ftp.close()
delimiter
pygame.draw.circle(screen, COLOR, POS, RADIUS, WIDTH)
delimiter
pprint.pprint(w.config())
delimiter
float(num) / float(denom)
delimiter
result
delimiter
alist2 = [item[:] for item in alist]
delimiter
path = urllib.request.url2pathname(path)
delimiter
md5.digest()
delimiter
logger.setLevel(logging.ERROR)
delimiter
cmyk.append(cmyk_im[i].load())
delimiter
loop.close()
delimiter
print(C.x.__doc__)
delimiter
newImage.paste(srcImage, (x1, y1, x1 + oldWidth, y1 + oldHeight))
delimiter
f.close()
delimiter
[hash(tpl[0]) for tpl in stackframe[1:]]
delimiter
timediff.total_seconds()
delimiter
loop.run_forever()
delimiter
itertools.zip_longest(fillvalue=fillvalue, *args)
delimiter
ax.plot(VecStart_x + VecEnd_x, VecStart_y + VecEnd_y, VecStart_z + VecEnd_z)
delimiter
{k: v for k, v in list(d.items())}
delimiter
foo()
delimiter
xml.write(m.group(1))
delimiter
joint = [[(x + y) for x, y in zip(*row)] for row in zip(outgoing, incoming)]
delimiter
l.pack()
delimiter
frozenset().union(*l)
delimiter
np.array(test)
delimiter
list(a.keys())
delimiter
self.val = 0
delimiter
list(accumulative_product(A, B, C))
delimiter
server_socket.bind((HOST, PORT))
delimiter
gevent.joinall(greenlets)
delimiter
tree_dict = {key: tree_dict}
delimiter
hex_int = int(hex_str, 16)
delimiter
print(myzip.namelist())
delimiter
pool = multiprocessing.Pool(processes=cpus)
delimiter
df.drop(df.columns[1:], axis=1)
delimiter
urllib.request.HTTPSHandler.__init__(self)
delimiter
plt.hold(True)
delimiter
plt.boxplot(x)
delimiter
layout.addWidget(self.button)
delimiter
regex = re.compile(ptn % re.escape(punc))
delimiter
a.reshape((-1, 5))
delimiter
lines.append([(lastX, lastY), (lastX + 1, lastY)])
delimiter
Planet.MERCURY
delimiter
print(soup)
delimiter
out, err = proc.communicate()
delimiter
engine.block()
delimiter
p.start()
delimiter
root.mainloop()
delimiter
out = abs(z[..., (np.newaxis)] - z)
delimiter
_nextkey += 1
delimiter
myset = set(filter(test, myset))
delimiter
hash(foo)
delimiter
cv2.drawContours(drawing, [cnt], 0, (255, 255, 255), 2)
delimiter
self.platforms.append(p)
delimiter
app.MainLoop()
delimiter
list(gen())
delimiter
df = pd.read_excel(path + filename)
delimiter
pd.infer_freq(ts.index)
delimiter
c.execute(sql, tup)
delimiter
f.close()
delimiter
temp_list.append(item)
delimiter
panel = tk.Label(root, image=img)
delimiter
{{(floatvalue | floatformat): 2 | intcomma}}
delimiter
data = data.reshape(shape)
delimiter
float_color = color / 255.0
delimiter
[0, 2, 4, 10, 12, 14, 20, 22, 24]
delimiter
gamma + log(n) + 0.5 / n - 1.0 / (12 * n ** 2) + 1.0 / (120 * n ** 4)
delimiter
print(m.start(), m.group())
delimiter
pygame.display.update()
delimiter
imp.find_module(imported)
delimiter
list(filter(pattern.match, strings))
delimiter
sorted(lst, reverse=True)
delimiter
print(arr.reshape(2, 2, 2, 2).swapaxes(1, 2).reshape(2, 2, 4).max(axis=-1))
delimiter
my_list = list(my_iterable)
delimiter
form.field(disabled=True)
delimiter
data.append(group_data)
delimiter
spsd.euclidean(nparray1, nparray2)
delimiter
self.ax.add_patch(self.rect)
delimiter
list(enumerate([4, 5, 6, 7]))
delimiter
setattr(cls, membername, lockedmethod)
delimiter
pd.concat([Out[24], Out[25]], axis=1)
delimiter
chain.from_iterable(listOfLists)
delimiter
range_prod(1, n)
delimiter
print(driver.page_source)
delimiter
System.out.println(id.getClass().getName())
delimiter
random.choice([4, 5, 6])
delimiter
im = Image.open(StringIO.StringIO(f.read()))
delimiter
a[y[:-1]] -= x[:-1]
delimiter
foosparse[key1, key2] = value
delimiter
browser.driver.set_page_load_timeout(10)
delimiter
soup = BeautifulSoup(urllib.request.urlopen(url).read())
delimiter
fitness_landscape.shape
delimiter
func(*args, **kw)
delimiter
[list(g) for _, g in groupby(sorted(flat, key=len), key=len)]
delimiter
sys.exit(app.exec_())
delimiter
a, b, c = [list(g) for k, g in it.groupby(mylist, keyfunc)]
delimiter
axes.hist(x, bins=binedges, weights=weights, *args, **kwargs)
delimiter
args = parser.parse_args()
delimiter
canvas.setStrokeColorRGB(0, 0, 0)
delimiter
self.opt.stdin.write(string)
delimiter
type(a)
delimiter
data = np.zeros((200, 200), dtype=np.float)
delimiter
cursor.fetchall()
delimiter
list[list.index(target) - 1]
delimiter
pl.ylim(0, ymax)
delimiter
print(sorted(a, key=to_minutes))
delimiter
array.sort(key=lambda item: item is 0)
delimiter
iv = Random.new().read(16)
delimiter
[remove_bad_substrings(s) for s in sites]
delimiter
net.addModule(hidden1)
delimiter
zelib.multiplier.argtypes = [ctypes.c_float, ctypes.c_float]
delimiter
ax.xaxis.set_major_locator(ticker.MultipleLocator(1))
delimiter
word[-1:-len(word) - 1:-1]
delimiter
path = os.path.join(os.path.dirname(__file__), template_file)
delimiter
traceback.print_stack(file=sys.stdout)
delimiter
etree.tostring(fragment)
delimiter
sleep(10)
delimiter
list(result[0][1].keys())
delimiter
response = urllib.request.urlopen(req)
delimiter
[convert_value(item) for item in lst]
delimiter
df.update(df2)
delimiter
r = np.linspace(1, 5, n)
delimiter
n, bins, patches = plt.hist([x, y])
delimiter
same_structure(a[1:], b[1:])
delimiter
plot(c(0, 1), c(0, 1))
delimiter
fig.tight_layout()
delimiter
np.resize(a, 10).reshape(5, 2)
delimiter
plt.clf()
delimiter
len(df)
delimiter
print(drives)
delimiter
np.allclose(OP(cords, atoms, atom_proj), project_atom(cords, atoms, atom_proj))
delimiter
screen.keypad(0)
delimiter
list(test)[0]
delimiter
print(ast.literal_eval(input()))
delimiter
fp = webdriver.FirefoxProfile()
delimiter
array([True, True, False], dtype=bool)
delimiter
app.exec_()
delimiter
xs = np.array([[0, 1, 0], [0, 0, 1], [0, 1, 1]]) * 1.0
delimiter
df.set_index(keys=[df.index.year, df.index.month]).transpose()
delimiter
set(MyList).intersection(MyDict)
delimiter
parent_parser = argparse.ArgumentParser(add_help=False)
delimiter
functools.reduce(op.mul, (sum(x) for x in zip(*list_)))
delimiter
ax.set_ylim(ybnds)
delimiter
PROJECT_ROOT = os.path.realpath(os.path.dirname(__file__))
delimiter
plot(x, y1)
delimiter
pdb.set_trace()
delimiter
arr = numpy.array(data)
delimiter
self.apple_button.Bind(wx.EVT_BUTTON, self.apple_button_click)
delimiter
fig.autofmt_xdate()
delimiter
slice_list(x, 7)
delimiter
br.select_form(nr=0)
delimiter
draw.ellipse((0, 0) + size, fill=0)
delimiter
timedelta(hours=2)
delimiter
d[x].append(y)
delimiter
plt.gca().add_artist(leg1)
delimiter
plt.gca().add_artist(leg5)
delimiter
window.show()
delimiter
np.set_printoptions(suppress=True)
delimiter
repr(s)
delimiter
[0.0, 0.0] / sum([0.0, 0.0])
delimiter
arr.sum(axis=0).shape
delimiter
content = file.read()
delimiter
[list(g) for k, g in groupby(l, bool) if k]
delimiter
data = json.dumps(data, cls=DjangoJSONEncoder)
delimiter
frame = pd.read_csv(path, names=columns)
delimiter
xlim(0, 1)
delimiter
draw()
delimiter
group = Group.objects.get(pk=1)
delimiter
plt.show()
delimiter
p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.IGNORE)
delimiter
server.close()
delimiter
array([0, 2, 4], dtype=int64)
delimiter
Py_Initialize()
delimiter
email.send()
delimiter
d = {}
delimiter
print(df1.groupby(df1.columns, axis=1).sum())
delimiter
self.close()
delimiter
df = pd.DataFrame(m.toarray())
delimiter
parent.kill()
delimiter
sys.stderr.close()
delimiter
B = np.array(A)
delimiter
Qapp.exec_()
delimiter
ax = fig.add_subplot(111)
delimiter
_draw_point(renderer, position, i, j)
delimiter
cluster_count = len(set(map(representative, representatives)))
delimiter
all = all[:max(current - 2, 0)] + all[current:]
delimiter
print(lol[1:4, 2:5])
delimiter
self.listofrecords[listnum][record] = value
delimiter
True
delimiter
sqllogger.addHandler(sqlhandler)
delimiter
session.quit()
delimiter
indices = np.searchsorted(u, arr.flat)
delimiter
False
delimiter
self.a + self.b
delimiter
hxs = HtmlXPathSelector(response)
delimiter
plot(x, cos(x))
delimiter
pprint(ddiff)
delimiter
time.sleep(0.1)
delimiter
example_df.iloc[(1), :].corr(example_df.iloc[(2), :])
delimiter
print(zlib.decompress(b))
delimiter
[x for xs in a for x in xs]
delimiter
merged = map(list, zip(listone, listtwo))
delimiter
connection.close()
delimiter
self.__class__.bar(self)
delimiter
server.sendmail(FROM, TO, message)
delimiter
ax.scatter(x, y, z)
delimiter
time.sleep(1)
delimiter
results = [do_smth(file.read()) for file in files]
delimiter
ar.sort()
delimiter
inputs = list(map(int, input().split()))
delimiter
data = np.random.normal(0, 20, 1000)
delimiter
threading.Thread.__init__(self)
delimiter
x = np.array(x, copy=False, ndmin=1)
delimiter
handler404 = Custom404.as_view()
delimiter
s = pd.Series(np.random.randn(n).cumsum())
delimiter
plt.plot(X[i])
delimiter
out = [float(f_interp(*p)) for p in zip(X, Y)]
delimiter
fig = plt.figure()
delimiter
self.delete(0, Tkinter.END)
delimiter
a[0] = [1, 2]
delimiter
print(isinstance(MyClass, MyClass()))
delimiter
plt.scatter(X, Y)
delimiter
pool.join()
delimiter
main()
delimiter
l = []
delimiter
print(dtd.validate(root))
delimiter
True
delimiter
ax.set_xticklabels(labels, minor=False)
delimiter
[given[i:i + len(sublist)] for i in range(0, len(given) - len(sublist))]
delimiter
out = data[np.in1d(data[:, (1)], goodIDs)]
delimiter
df.mean()
delimiter
admin.site.register(Foo, FooAdmin1)
delimiter
[seq[i:i + k] for i in range(0, len(seq), k)]
delimiter
plt.ylim(-0.1, 1.1)
delimiter
np.vstack(np.unravel_index(indices, arr.shape)).T
delimiter
unwrap_method(get_func) is unwrap_method(Client.get)
delimiter
Permission.objects.all()
delimiter
setattr(something, k, v)
delimiter
pygame.display.flip()
delimiter
ts.ix[ts.index.indexer_between_time(datetime.time(10), datetime.time(14))]
delimiter
main()
delimiter
list(set(x[0]).union(*x[1:]))
delimiter
List.append(Item)
delimiter
fig = plt.figure()
delimiter
kde.integrate_box_1d(1, 2)
delimiter
sys.stdout.write(out)
delimiter
bstr[0]
delimiter
A[(1), (1), :]
delimiter
print([str(x) for x in l])
delimiter
set.intersection(*lis)
delimiter
[[0, 1][name.split()[-1] in set(B)] for name in A]
delimiter
self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
browser.back()
delimiter
True in set(map(lambda x: x[0] == 1, a_list))
delimiter
output.addPage(page)
delimiter
regex = re.compile(pattern, re.MULTILINE | re.DOTALL)
delimiter
sck = socks.socksocket()
delimiter
print(solution(list(range(1, 2000))))
delimiter
s = requests.session()
delimiter
__path__ = pkgutil.extend_path(__path__, __name__)
delimiter
hsv_to_rgb = np.vectorize(colorsys.hsv_to_rgb)
delimiter
self.setCursor(QtCore.Qt.SplitHCursor)
delimiter
self.log.addHandler(self.handler)
delimiter
chardet.detect(elems[0].getText())
delimiter
path = os.path.dirname(os.path.abspath(filename))
delimiter
sys.getwindowsversion()[0] >= 6
delimiter
app.exec_()
delimiter
print(LH.tostring(doc, pretty_print=True))
delimiter
start_time = time.time()
delimiter
self.forms[self.initial_form_count():]
delimiter
fig = plt.figure()
delimiter
p = Pool(1)
delimiter
keys[-1] in lastplace
delimiter
result = cv2.matchTemplate(image, template, cv2.TM_CCOEFF_NORMED)
delimiter
ax.set_ylim(bottom=0)
delimiter
df = xl.parse(0, converters={i: str for i in range(ncols)})
delimiter
dict_lol = {item[1]: item for item in lol}
delimiter
re.findall(regex, statements, re.I)
delimiter
sys.stdout.write(line)
delimiter
csvfile.seek(0)
delimiter
player_list.append(player)
delimiter
admin.autodiscover()
delimiter
main()
delimiter
ax.set_rmax(1.25)
delimiter
cur.execute(sat)
delimiter
b.shape
delimiter
foo
delimiter
a + b * c
delimiter
arr.resize((k, M))
delimiter
print(b[0])
delimiter
y = 2 * np.sin(x)
delimiter
f.close()
delimiter
print(match.group(1))
delimiter
object.__setattr__(self, name, value)
delimiter
func()
delimiter
counts[item] += 1
delimiter
pipeline.fit(X, Y)
delimiter
im.resize(size, Image.BILINEAR)
delimiter
env.use_ssh_config = True
delimiter
polB.set_transform(tB)
delimiter
clipboard.store()
delimiter
np.all([i for i in range(10)])
delimiter
sess.run(init_op)
delimiter
mylist.append(first_el)
delimiter
idx = list(range(len(S)))
delimiter
obj.__class__._default_manager.get(pk=obj.pk)
delimiter
dict(page=context)
delimiter
d[i].append(int(j))
delimiter
[list(islice(it, i)) for i in b]
delimiter
db.connections.close_all()
delimiter
plot(list_of_dates, counts)
delimiter
fs.noteoff(0, 60)
delimiter
z = [int(i == j) for i, j in zip(x, y)]
delimiter
print([joiner(words) for words in sixgrams])
delimiter
ctx.set_source_rgb(1, 0, 0)
delimiter
print(message.get_body_encoded())
delimiter
zipped = zip(*l)
delimiter
A[:, ([1, 2])]
delimiter
plt.scatter(x, y)
delimiter
str({})
delimiter
doSomething()
delimiter
y = x.reshape(x.shape[0] / 2, 2, x.shape[1] / 2, 2)
delimiter
array_to_filter[np.in1d(array_to_filter, equal_array)]
delimiter
s = list(filter(str.isalnum, s))
delimiter
tar.close()
delimiter
self._socket.recv(buffersize, flags)
delimiter
send_mail(subject, message, settings.DEFAULT_FROM_EMAIL, [self.user.email])
delimiter
lst.insert(randrange(len(lst) + 1), item)
delimiter
bin(10)
delimiter
os.dup2(se.fileno(), sys.stderr.fileno())
delimiter
self.fc2.draw()
delimiter
[getrange(x) for x in newlist]
delimiter
self.navigate(1)
delimiter
j = index - d * (d - 1) / 2 + (d - i) * (d - i - 1) / 2 + i + 1
delimiter
username = db.Column(db.String(80), unique=True)
delimiter
np.allclose(old, new)
delimiter
root.update()
delimiter
print(p.pattern)
delimiter
NULL
delimiter
list(set(x[-1]).union(*x[1:]))
delimiter
b = np.dot(a, c)
delimiter
time.sleep(1)
delimiter
app = Flask(__name__)
delimiter
client.set_options(soapheaders=ssn)
delimiter
QtGui.QLabel.__init__(self)
delimiter
setattr(modadd, camel_name, f)
delimiter
df2 = df2.reset_index()
delimiter
driver.switch_to_default_content()
delimiter
func(obj, *args, **kw)
delimiter
image = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
delimiter
Bar.py
delimiter
Html_file.write(html_str)
delimiter
python - i
delimiter
main(sys.argv[1])
delimiter
array([10, 4, 1], dtype=int64)
delimiter
ET.fromstring(t)
delimiter
len(new_strs.split())
delimiter
log.setLevel(logging.INFO)
delimiter
foundwords.extend(words[1:])
delimiter
QtGui.QMainWindow.__init__(self)
delimiter
results = sorted(results, key=getaccountingdate, reverse=True)
delimiter
deletealist[i]
delimiter
t.start()
delimiter
wf.close()
delimiter
logger.info(parsed_item_info)
delimiter
tag.save()
delimiter
cursor.execute(sql)
delimiter
self.image.set_from_pixbuf(loader.get_pixbuf())
delimiter
url
delimiter
foo()
delimiter
webapp2.RequestHandler.dispatch(self)
delimiter
br = mechanize.Browser()
delimiter
self.wfile.flush()
delimiter
ax = plt.subplot(111)
delimiter
time.sleep(0.5)
delimiter
CE, BF, BC, BD, BE
delimiter
do_stuff()
delimiter
perf_func(root.getroot(), print_level)
delimiter
x if f else random.choice(good)
delimiter
today = datetime.datetime.today()
delimiter
curs.fetchone()
delimiter
fd.close()
delimiter
nearby_strikes = other_strikes.loc[ind[0]:ind[1] - 1].copy()
delimiter
ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command(cmd_to_execute)
delimiter
self.results.append(result)
delimiter
List.append(Item)
delimiter
sys.getsizeof((1, 2))
delimiter
a[0:1] = [1]
delimiter
ax1.semilogx(data[:, (1)], data[:, (2)])
delimiter
results = pool.map(solve1, args)
delimiter
fig = plt.figure(figsize=(10, 8))
delimiter
os.close(fd)
delimiter
[func(mylist) for func in map(globals().get, fxnOfInterest)]
delimiter
os.path.join(path, filename)
delimiter
print(p.communicate()[0])
delimiter
a, b = b, a + b
delimiter
type(d)
delimiter
print(finfo.dtype, finfo.nexp, finfo.nmant)
delimiter
list_of_hets = []
delimiter
threading.Thread(target=thread_job).start()
delimiter
window.show()
delimiter
xl.Workbooks.Close()
delimiter
pool = multiprocessing.Pool()
delimiter
deleteL[-n:]
delimiter
np.testing.assert_allclose([np.nan], [np.nan])
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
w.show()
delimiter
f.close()
delimiter
root.rowconfigure(1, weight=1)
delimiter
q = A.select(A, B).join(B).where(B.date == last_entry_date)
delimiter
r.close()
delimiter
tornado.ioloop.IOLoop.instance().start()
delimiter
index = d * (d - 1) / 2 - (d - i) * (d - i - 1) / 2 + j - i - 1
delimiter
dict.__setitem__(self, key, val)
delimiter
g.Category.apply(pd.value_counts).unstack(-1).fillna(0)
delimiter
a[i]
delimiter
df
delimiter
value.__format__(format_spec)
delimiter
random.shuffle(s)
delimiter
a.upper() == b.upper()
delimiter
pool.join()
delimiter
MySuperClass.__init__(self)
delimiter
conn.perform()
delimiter
d = datetime.datetime.now()
delimiter
g.add_edge(1, 2)
delimiter
db.session.remove()
delimiter
df.to_records().dtype
delimiter
a = [([k] + [x[1] for x in g]) for k, g in groupby(r, key=lambda row: row[0])]
delimiter
dumps(a.__dict__, default=encode_b)
delimiter
logging.getLogger().setLevel(logging.DEBUG)
delimiter
do_stuff(A[i], A[j])
delimiter
C = np.empty((A.shape[0] + B.shape[0], A.shape[1]))
delimiter
root = Tk()
delimiter
script = os.path.abspath(sys.argv[0])
delimiter
print(sys.executable)
delimiter
self.setCentralWidget(page)
delimiter
[distance(*pair) for pair in zip(repeat(pts[0]), pts[1:])]
delimiter
your_module.get_logger().log_to_file(filename)
delimiter
print(set(n1).difference(set(n2)))
delimiter
bin(7)[2:]
delimiter
res.fillna(0).squeeze().dt.days
delimiter
ax.set_ylim(ylim)
delimiter
ax1 = fig.add_subplot(121)
delimiter
conn.commit()
delimiter
ex2.show()
delimiter
QtCore.QSize(150, 75)
delimiter
print(tuple(pad_strings(x)))
delimiter
14.078685
delimiter
ax.scatter(x, y, c=colors, s=50, cmap=mpl.cm.Reds)
delimiter
plt.figure()
delimiter
process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)
delimiter
outfile.close()
delimiter
fig, ax = plt.subplots()
delimiter
print((i, l))
delimiter
print(pool.map(f, list(range(10))))
delimiter
B = A[[col1, col2]].iloc[idx]
delimiter
plt.legend(handles=[select], scatterpoints=1)
delimiter
browser.submit()
delimiter
df
delimiter
f(*args, **kwds)
delimiter
older_books = [b.title for b in BSI if b.year < 2000]
delimiter
stack.append(stack[-1][-1])
delimiter
zf.write(os.path.join(dirname, filename))
delimiter
self._children = []
delimiter
contents.sort(key=itemgetter(1))
delimiter
df = df.reset_index()
delimiter
plt.style.use(style_name)
delimiter
DISPATCH()
delimiter
canvas.rect(i, 0, 2, 100)
delimiter
df.apply(lambda x: x.astype(object).replace(1, x.name))
delimiter
np.split(df1.index[c], np.flatnonzero(r[1:] > r[:-1]) + 1)
delimiter
traceback.print_stack()
delimiter
help(myFunc.__code__)
delimiter
self.panel.Bind(wx.EVT_KEY_DOWN, self.OnKeyDown)
delimiter
grid = np.random.random((10, 10))
delimiter
new_dic[1][2] = 5
delimiter
x.astype(int)
delimiter
print(sum([float(x) for x in re.findall(p, test_str)]))
delimiter
x * 2
delimiter
sorted(files)
delimiter
tar.add(source_dir, arcname=os.path.basename(source_dir))
delimiter
biglist2.sort(key=(operator.itemgetter(2), operator.itemgetter(0)))
delimiter
dict((k, v) for k, v in list(mydict.items()) if k >= 6)
delimiter
plt.plot([pt[0], pt[0]], [0, pt[1]])
delimiter
tk.Canvas.__init__(self, *args, **kwargs)
delimiter
raise ValueError((a, b))
delimiter
True
delimiter
name = models.CharField(max_length=100)
delimiter
data = np.array([1, 4, 5, 5, 6, 8, 8, 9])
delimiter
str(datetime.strptime(value, FORMAT_STRING))
delimiter
do_something()
delimiter
handle.close()
delimiter
plt.show()
delimiter
ao[1:, :-1] += ai[:-1, 1:]
delimiter
df2 = pd.read_csv(StringIO(df2_text), delim_whitespace=True)
delimiter
float(Mixed(1, 1, 2))
delimiter
isinstance(x, list)
delimiter
em = trained.emission
delimiter
plot(a[:, (0)], a[:, (1)])
delimiter
ax.plot(theta, r)
delimiter
print(len(set(probes)))
delimiter
data = dd.from_pandas(df, npartitions=2)
delimiter
frame.append(1)
delimiter
localtime(now()).date()
delimiter
x[x]
delimiter
models.py
delimiter
y = np.array([1, 2, -1, 1, 1])
delimiter
g.axes[0][0].legend(loc=1)
delimiter
cnx.close()
delimiter
self.canvas.clear()
delimiter
spam.ham
delimiter
plt.imshow(np.random.random(100, 100))
delimiter
print(k, v)
delimiter
server.quit()
delimiter
[staging]
delimiter
print(str_to_type(v))
delimiter
doSomething()
delimiter
reader = csv.reader(f)
delimiter
traceback.print_stack()
delimiter
writer = csv.writer(f)
delimiter
dictname = pickle.load(f)
delimiter
seclist = [2, 4, 6, 8]
delimiter
print(img.shape)
delimiter
p = argparse.ArgumentParser()
delimiter
print(file.read())
delimiter
image.set_from_stock(gtk.STOCK_CLOSE, gtk.ICON_SIZE_MENU)
delimiter
re = [y for x, y, z in zip(tmp[2:], tmp[1:-1], tmp[:-2]) if y != x and y != z]
delimiter
plt.yticks(pos, labels.sort_index())
delimiter
output, error = process.communicate()
delimiter
0.2775516299989249
delimiter
plt.show()
delimiter
math.degrees(math.atan(1))
delimiter
a[0:1] = [1]
delimiter
np.random.seed(10)
delimiter
f.write(site.read())
delimiter
user = User.objects.get(pk=request.user.id)
delimiter
__main__.py
delimiter
db.delete(item)
delimiter
words = {}
delimiter
parser = argparse.ArgumentParser()
delimiter
os.path.join(path, filename)
delimiter
[x for xs in a for x in xs]
delimiter
print(response.content)
delimiter
True
delimiter
i += 1
delimiter
self.assertEqual(fn(i), output[i])
delimiter
ordereddict.py
delimiter
any(c in yourString for c in badChars)
delimiter
{{(img.height | add): 1}}
delimiter
self.request.send(self.data.upper())
delimiter
setattr(self, key.lower(), val)
delimiter
intified_list = list(intify(lst))
delimiter
glDrawArrays(GL_TRIANGLE_STRIP, 0, 4)
delimiter
[iplocation]
delimiter
c = sorted(set(a).intersection(b))
delimiter
print(in_nested_list(x, []))
delimiter
sys.exit(1)
delimiter
listofLines.sort(key=extract_time)
delimiter
print(df.values.flatten())
delimiter
setattr(self, name, callable)
delimiter
print(map(lambda x: not B_set - set(x), A))
delimiter
main()
delimiter
reactor.connectTCP(host, port, factory)
delimiter
ps.wait()
delimiter
thisprogramdoesntexist
delimiter
jsonFile.truncate()
delimiter
1 / 2
delimiter
Response(serializer.data, status=status.HTTP_201_CREATED)
delimiter
fig, ax = plt.subplots()
delimiter
f.write(line)
delimiter
data = json.load(contactFile)
delimiter
pprint(sorted(list(results.items()), key=lambda x: x[1]))
delimiter
l[:n] + [0] * (n - len(l))
delimiter
obj_list[0].do_somthing()
delimiter
tuple(y)
delimiter
b = np.random.rand(10, 10)
delimiter
method(*args, **kwargs)
delimiter
instance.topping_set.add(topping)
delimiter
time.sleep(2)
delimiter
main()
delimiter
os.mkfifo(thefifo)
delimiter
ax = fig.add_subplot(111)
delimiter
data[data < threshold] = 0
delimiter
B[:, (col)] = np.prod(np.delete(A, col, 1), 1)
delimiter
last_name = models.CharField(max_length=50)
delimiter
d.replace(hour=0, minute=0, second=0, microsecond=0)
delimiter
time.sleep(2)
delimiter
random.shuffle(rects)
delimiter
edge_list = [tuple(map(int, line.split())) for line in data]
delimiter
powerpoint.Quit()
delimiter
main_window.show()
delimiter
f()
delimiter
dom = minidom.parseString(xml_text)
delimiter
print(list(itertools.chain(*list(parser_config.keys()))))
delimiter
a = np.array([1e-09])
delimiter
A.columns = pd.MultiIndex.from_product([list(range(A.shape[1] / 10)), list(range(10))])
delimiter
z.set_zorder(-1)
delimiter
pool = multiprocessing.Pool(4)
delimiter
conn.close()
delimiter
np.where(abs(arr_f - a) < t)[0].any()
delimiter
a = np.arange(8)
delimiter
f_new.write(line)
delimiter
do_something(item)
delimiter
print(df.sum(1).to_frame().dot(df.sum().to_frame().T).div(df.sum().sum()))
delimiter
json.loads(json1)
delimiter
Py_Finalize()
delimiter
self._connect()
delimiter
df = df.reset_index()
delimiter
print(requests.post(endpoint, data=data, headers=headers).json())
delimiter
lib.get_strings(c_array, len(list_to_send))
delimiter
conn.sendmail(sender, destination, msg.as_string())
delimiter
mat - vec[:, ([0, 0, 0])]
delimiter
A.reshape(h // ph, ph, w // pw, pw, -1).swapaxes(1, 2).shape
delimiter
reactor.run()
delimiter
self.driver.close()
delimiter
(m.transpose() - v).transpose()
delimiter
collections.Counter(x) == collections.Counter(y)
delimiter
logging.getLogger().setLevel(logging.DEBUG)
delimiter
self.window.show_all()
delimiter
list(chain(ls[:idx], replace_with, ls[idx + 1:]))
delimiter
print(np.corrcoef(x[0:len(x) - 1], x[1:])[0][1])
delimiter
s.commit()
delimiter
f.writelines(lines)
delimiter
alsonow = now.astimezone(yourtz)
delimiter
decorated_argspec = inspect.getargspec(func2)
delimiter
os.chmod(full_path, stat.S_IWRITE)
delimiter
data = numpy.fromfile(f, dt)
delimiter
pd.io.json.dumps(summary, double_precision=2)
delimiter
revlist(lst[1:]) + [lst[0]]
delimiter
frq = frq[list(range(n / 2))]
delimiter
foo = Foo()
delimiter
[5, 7, 9, 11]
delimiter
ShapedFrame().Show()
delimiter
stack[-1].append(x)
delimiter
file.close()
delimiter
id = Column(Integer, primary_key=True)
delimiter
main()
delimiter
pool = Pool(processes=4)
delimiter
plt.plot(sorted, yvals)
delimiter
bid = int(bid)
delimiter
plt.show()
delimiter
df.set_index([0, 1], inplace=True)
delimiter
connection.close()
delimiter
b = Matrix([[0, 0], [0, 0]])
delimiter
files.sort(key=os.path.getmtime)
delimiter
mainloop()
delimiter
lst[:] = whatever
delimiter
newlist = [[y[0] for y in list if y[1] == x] for x in values]
delimiter
d.setdefault(word[0].lower(), []).append(word)
delimiter
a[:, (0)]
delimiter
urllib.request.Request.__init__(*args, **kwargs)
delimiter
myslice = array[tuple(idx)]
delimiter
type(dates[0]) == pd.tslib.Timestamp
delimiter
entry_list = [x.title.text for x in feed.entry]
delimiter
foo()
delimiter
self.driver = webdriver.Firefox()
delimiter
output.close()
delimiter
result_dict = dict((n, res_list[i]) for i, n in enumerate(header))
delimiter
ax.annotate(str(j), xy=(i, j))
delimiter
s.listen(1)
delimiter
print(m.group())
delimiter
clf.fit(X, y)
delimiter
game_display = pygame.display.set_mode((800, 800))
delimiter
smtp.close()
delimiter
fig = plt.figure()
delimiter
rtc.Newline()
delimiter
output = check_output(cmd, stdin=file)
delimiter
entry.pack()
delimiter
print([0] * i)
delimiter
file_writer.writerow([x[i] for x in lol])
delimiter
print(type(result))
delimiter
d = dict(zip(list(adict.values()), list(adict.keys())))
delimiter
plt.show()
delimiter
plt.colorbar()
delimiter
tk.Frame.__init__(self, parent)
delimiter
ax.annotate(str(y), xy=(x, y))
delimiter
str(list(self.__iter__()))
delimiter
data = f(data)
delimiter
self.figure.set_canvas(self.figurecanvas)
delimiter
self.ui.main_plot.figure.subplots_adjust(bottom=0.4)
delimiter
screen.fill((0, 0, 0))
delimiter
coords.reshape(-1, N)
delimiter
self.ax.cla()
delimiter
child.kill()
delimiter
p = subprocess.Popen(your_command, preexec_fn=os.setsid)
delimiter
self.g.get(key)
delimiter
test.py
delimiter
b = a.T
delimiter
self.update({element.tag: element.text})
delimiter
root.mainloop()
delimiter
print(sum(a))
delimiter
Process(target=do_something).start()
delimiter
print(sum(ord(char) - base for char in mystring))
delimiter
line_count += 1
delimiter
print(sum1(-1, 0, 6, 10))
delimiter
ax = fig.add_subplot(gs[1])
delimiter
pygame.display.update()
delimiter
func()
delimiter
__init__.py
delimiter
res = urllib.request.urlopen(req)
delimiter
ax = fig.add_subplot(111)
delimiter
random.shuffle(Order)
delimiter
draw.line((0, im.size[1], im.size[0], 0), fill=128)
delimiter
new = numpy.zeros_like(arr)
delimiter
s.join()
delimiter
fig, ax = plt.subplots()
delimiter
sc._conf.getAll()
delimiter
ax0.imshow(img, cmap=plt.cm.gray)
delimiter
A.reshape(h // ph, ph, w // pw, pw, -1).swapaxes(1, 2)
delimiter
self.label.configure(text=now)
delimiter
o = object()
delimiter
print((d1 + datetime.timedelta(i)).isoformat())
delimiter
print(workdaycount(date(2011, 8, 15), date(2011, 8, 22), 1))
delimiter
np.concatenate(alist)
delimiter
self.SetTopWindow(frame)
delimiter
l.sort(key=f)
delimiter
list(intermix([1, 1, 1, 1, 1, 2, 2, 2, 2, 2]))
delimiter
os.kill(pid, 0)
delimiter
l.pop()
delimiter
a + b
delimiter
a = [1000 + 1, 1000 + 1, 1000 + 1]
delimiter
cbar0 = plt.colorbar(cf0)
delimiter
dict[key] = val
delimiter
test.my_redifinable()
delimiter
httpd.serve_forever()
delimiter
print(traceback.format_exc())
delimiter
plt.ylim([40, 110])
delimiter
node_schema.load(json_data, instance=Node().query.get(node_id), partial=True)
delimiter
x = np.arange(10)
delimiter
self.setupUi(self)
delimiter
timeit(stmt4, setup4, number=100)
delimiter
p.start()
delimiter
ax.yaxis.grid(True)
delimiter
print(dirname(dirname(__file__)))
delimiter
np.cov(data.T)
delimiter
any(e in s for e in b)
delimiter
file.close()
delimiter
ax.set_xlim([-1, 0.5])
delimiter
d[k].extend(v)
delimiter
func(self, *args, **kwargs)
delimiter
time.sleep(1)
delimiter
r.json()
delimiter
site.set_debuglevel(1)
delimiter
quadV = [-0.5, -0.5, 0.0, 0.5, -0.5, 0.0, -0.5, 0.5, 0.0, 0.5, 0.5, 0.0]
delimiter
sheet.set_clip(pygame.Rect(SPRT_RECT_X, SPRT_RECT_Y, LEN_SPRT_X, LEN_SPRT_Y))
delimiter
data = cursor.fetchall()
delimiter
YB = np.linspace(-1, 1, 20)
delimiter
print(pd.concat([df, pd.concat([dm] * df.shape[1], axis=1, keys=df.columns)]))
delimiter
print(sys.argv)
delimiter
tips.reset_index(inplace=True)
delimiter
self.assertTrue(result)
delimiter
l = [i for sub in l for i in sub]
delimiter
__path__ = extend_path(__path__, __name__)
delimiter
help(string)
delimiter
np.allclose(tmp, tmp2)
delimiter
print(int(number) - int(number[::-1]))
delimiter
print(dis.disco(f.f_code, i))
delimiter
text, xoff = line_data[k][-1]
delimiter
sys.exit(0)
delimiter
print(m.hexdigest())
delimiter
time.sleep(1)
delimiter
print(repr(a))
delimiter
numpy.zeros((5, 5))
delimiter
sys.stdout.flush()
delimiter
ctx.set_source_rgb(0.47, 0.47, 0.47)
delimiter
data.append(0.25 * math.sin(math.radians(i)))
delimiter
y = np.array([1, 2, 0, 1, 1, 2])
delimiter
print(sys.path)
delimiter
a[0]
delimiter
[[1][2]]
delimiter
data_tuple = Item(**dict(zip(fields, raw_data)))
delimiter
label.grid(row=0, column=0)
delimiter
subprocess.Popen(subprocess)
delimiter
X[np.ix_([0, 1], [0, 1])]
delimiter
print(fpp[1])
delimiter
np.datetime64(datetime.utcnow()).astype(datetime)
delimiter
df
delimiter
ax.yaxis.set_minor_locator(MultipleLocator(0.2))
delimiter
your_code.run()
delimiter
minutes_diff = (datetime_end - datetime_start).total_seconds() / 60.0
delimiter
df.query(qry)
delimiter
model.objects.filter(id=id).update(order=order.index(id))
delimiter
start()
delimiter
transsurface.fill((255, 0, 255))
delimiter
print(s.__dict__)
delimiter
id(b[0]), id(b[1])
delimiter
thread.start()
delimiter
matrix[0]
delimiter
somethingThread.join()
delimiter
x.ix[random.sample(x.index, n)]
delimiter
self.post(request, *args, **kwargs)
delimiter
b_set = set(tuple(x) for x in a)
delimiter
rs = json.dumps(dict(lst))
delimiter
s == s[::-1]
delimiter
df.describe().transpose()
delimiter
root.deiconify()
delimiter
_ = plt.setp(p.get_xticklabels(), rotation=90)
delimiter
lines = f.readlines()
delimiter
result.append(list(set1.union(set2)))
delimiter
formset.save()
delimiter
m.eliminate_zeros()
delimiter
A = np.array(ss.zscore(A))
delimiter
frame.axes.get_yaxis().set_ticks([])
delimiter
print(repr(n))
delimiter
Response(content)
delimiter
ax.clear()
delimiter
pd.options.display.max_columns = 50
delimiter
plt.figure()
delimiter
ax = plt.subplot(111)
delimiter
[[2, 2, 2, 2], [2, 2, 2, 2], [2, 2, 2, 2]],
delimiter
sys.exit(main(sys.argv))
delimiter
self.fp.write(buf)
delimiter
h = [[1, 0, 0][0, 0, 0][0, 0, -1]]
delimiter
fig = plt.figure()
delimiter
fig = plt.figure()
delimiter
[1, 1, 1, 1, 1, 1]
delimiter
list(set(l1) & set(l2))
delimiter
numpairs = [nums[i:i + 2] for i in range(0, len(nums), 2)]
delimiter
next(iter(list(self.items())))
delimiter
[(a + b) for a, b in zip(l, l[1:])[::2]]
delimiter
print(monotonic_time())
delimiter
print(f.read())
delimiter
conn.rollback()
delimiter
ax.set_ylim([-1, 1.5])
delimiter
entry1.grid(row=0, column=0)
delimiter
new = dict(old)
delimiter
ax.yaxis.set_minor_locator(MultipleLocator(0.1))
delimiter
logger.addHandler(ch)
delimiter
self.fp.write(zinfo.FileHeader(zip64))
delimiter
key = line.strip()[1:]
delimiter
func(1, 2)
delimiter
foo = models.IntegerField()
delimiter
out = np.column_stack((sortedA[(start_unqA), :-1], np.nanmax(grpA, axis=1)))
delimiter
newarray = np.dstack(mylist)
delimiter
inspect.getargspec(someMethod)
delimiter
self.assertForbidden(response)
delimiter
print(type(f.__self__))
delimiter
loop.run_until_complete(main())
delimiter
reduce(lambda d, k: d.setdefault(k, {}), keys, dict_nested)[newkey] = newvalue
delimiter
Y.mean(axis=1)
delimiter
print((k, v))
delimiter
{{r.report_desc}}
delimiter
print(df[df.columns[2:5]])
delimiter
plt.subplot(122)
delimiter
handler = logging.StreamHandler()
delimiter
value[-2:]
delimiter
d += timedelta(days=7)
delimiter
pylab.show()
delimiter
str(value)
delimiter
pid.wait()
delimiter
print(sys.argv)
delimiter
show(p)
delimiter
df
delimiter
[row[colidx] for row in self._getrow(rowidx)]
delimiter
oceans[regcode - 1].append((temp, fecha))
delimiter
print(b.decode())
delimiter
job = dict(zip(keys, values))
delimiter
my_randoms = [random.randrange(1, 101, 1) for _ in range(10)]
delimiter
self.x -= STEP
delimiter
im = Image.open(BytesIO(base64.b64decode(data)))
delimiter
print(str(l)[1:-1])
delimiter
conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
isinstance(y, X)
delimiter
print(counter.most_common(10))
delimiter
G = nx.Graph()
delimiter
letter_count = dict(zip(string.lowercase, itertools.repeat(0)))
delimiter
map(lambda s: s.split(), a)
delimiter
file_1.write(line)
delimiter
fig, ax = plt.subplots()
delimiter
pool.close()
delimiter
o.many2many.all()
delimiter
{data[k].append(v) for line_dict in dr for k, v in list(line_dict.items())}
delimiter
get_value(dic, 4)
delimiter
r.findall(url)
delimiter
plt.figure(figsize=(12.5, 2.5))
delimiter
query_model.save()
delimiter
input.seek(0, 2)
delimiter
a = [i for i in range(2, 10)]
delimiter
QApplication.setOverrideCursor(Qt.WaitCursor)
delimiter
False
delimiter
matches = {x for x in a if x in str}
delimiter
plt.plot([0, 2], [2, 4])
delimiter
data = [tryconvert(x, int, float) for x in line.split()]
delimiter
mean = sum_x / n
delimiter
test()
delimiter
os._exit(EMERGENCY)
delimiter
plt.show()
delimiter
subplot(2, 1, 1)
delimiter
mask = x ** 2 + y ** 2 + z ** 2 < radius ** 2
delimiter
obj.__dict__
delimiter
fig.colorbar(im)
delimiter
tasks.remove(t)
delimiter
random.shuffle(data)
delimiter
random.shuffle(random_list)
delimiter
ax.set_xlim(-50, 50)
delimiter
root = Tk()
delimiter
sock = socket.socket()
delimiter
df_norm.mean()
delimiter
pool = multiprocessing.Pool(processes=4)
delimiter
self.init()
delimiter
bins = np.arange(-100, 100, 5)
delimiter
p.wait()
delimiter
STATUS_ERR_INVALID_PARAMETER = 2
delimiter
out, err = ssh_process.communicate()
delimiter
handler.setLevel(logging.DEBUG)
delimiter
time.sleep(0.05)
delimiter
helloset.issubset(printset)
delimiter
manager.run()
delimiter
self.makeList(aNode.lChild) + [aNode.data] + self.makeList(aNode.rChild)
delimiter
plt.show()
delimiter
self.initUI()
delimiter
plt.contour(xgrid, ygrid, zgrid)
delimiter
comment = models.TextField()
delimiter
unittest.TestCase.__init__(self, test_name)
delimiter
msg.attach(msg_image)
delimiter
k, len(v)
delimiter
result.append(el)
delimiter
sys.maxunicode
delimiter
AMOServer.Disconnect()
delimiter
pyplot.show()
delimiter
driver.quit()
delimiter
window = Tk()
delimiter
d = pd.DataFrame(np.zeros((N_rows, N_cols)))
delimiter
QtGui.QFileDialog.__init__(self, *args)
delimiter
help(file.read)
delimiter
ppc = run_ppc(trace, model=model, samples=200)
delimiter
excel.ActiveSheet.Columns.AutoFit()
delimiter
C = MyReallyBigClassNameWhichIHateToType
delimiter
self.Layout()
delimiter
self.func(self.parent_obj, *args, **kwargs)
delimiter
f.write(chunk)
delimiter
process(data)
delimiter
print(fcount(path))
delimiter
a[0, 1, 1] = [0, 1, 0]
delimiter
print(df1[df1.B.isin(df2.B)])
delimiter
logger.addHandler(ch)
delimiter
max(allfuncs)
delimiter
object.__getattribute__(self, name)
delimiter
college = models.CharField(max_length=40)
delimiter
root = tk.Tk()
delimiter
df.gdp = df.gdp.shift(-1)
delimiter
choice.things.all()
delimiter
x[np.where([c != 2])[1]]
delimiter
pygame.display.flip()
delimiter
plt.ion()
delimiter
np.sin(y * x)
delimiter
audio.save()
delimiter
cbar = fig.colorbar(cax, ticks=[0, 5, 10])
delimiter
session.execute(sql_string).fetchall()
delimiter
timer = pygame.time.Clock()
delimiter
d += timedelta(days=6 - d.weekday())
delimiter
print(df_Quota)
delimiter
propnames = [name for name, value in inspect.getmembers(SomeClass, isprop)]
delimiter
app.run()
delimiter
B = A[:]
delimiter
fig = plt.figure()
delimiter
print(s.find(s2))
delimiter
min(darr)
delimiter
window.show()
delimiter
self.hlayout.addWidget(self.b)
delimiter
Encoders.encode_base64(eml_atch)
delimiter
my_dict[1]
delimiter
dialog.exec_()
delimiter
self.foo.wait()
delimiter
ax.set_xticklabels(categories)
delimiter
zip_longest(fillvalue=fillvalue, *args)
delimiter
curses.echo()
delimiter
show()
delimiter
print(next(a))
delimiter
df.drop_duplicates(inplace=True)
delimiter
find_matches(list(a), list(b))
delimiter
layout = QtGui.QVBoxLayout(self)
delimiter
plt.figure(2)
delimiter
numpydata = np.fromstring(data, dtype=np.int16)
delimiter
response = br.submit()
delimiter
window.Maximize()
delimiter
threading.Timer(1, greeting, args=(oh_hi,)).start()
delimiter
matches.extend([os.path.join(root, fn) for fn in filenames])
delimiter
np.linspace(0, 1, 11)
delimiter
self.data.grid(row=0, column=0, rowspan=4, columnspan=2, sticky=N + E + S + W)
delimiter
objs = map(get_object, random.sample(list(range(length)), 0.001 * length))
delimiter
json_docs.append(json_doc)
delimiter
admin.site.unregister(User)
delimiter
plt.subplot(2, 1, 1)
delimiter
ax.get_xaxis().set_visible(False)
delimiter
theclass.run
delimiter
y = data[:, (0)]
delimiter
tasks.join()
delimiter
f.writelines(lines)
delimiter
u[np.argmax(np.bincount(indices))]
delimiter
ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
ax = fig.add_subplot(111)
delimiter
driver = webdriver.Firefox(proxy=proxy_config, firefox_profile=prof)
delimiter
print(out.upper())
delimiter
cs = a, b, c, d
delimiter
keys, values = list(dict.keys()), list(dict.values())
delimiter
mydriver.maximize_window()
delimiter
cursor.execute(query)
delimiter
termf.pack(fill=BOTH, expand=YES)
delimiter
str(self)
delimiter
window_after = driver.window_handles[1]
delimiter
i += 1
delimiter
foo.stop()
delimiter
center = (max(x) + min(x)) / 2.0, (max(y) + min(y)) / 2.0
delimiter
root = tk.Tk()
delimiter
sns.set_palette(flatui)
delimiter
assert diff_month(datetime(2010, 10, 1), datetime(2010, 9, 1)) == 1
delimiter
ContestResults.objects.filter(contest=instance).delete()
delimiter
foo = Foo()
delimiter
ax1 = plt.subplot(gs1[i])
delimiter
driver = webdriver.Firefox()
delimiter
lambda v: tryconvert(v, 0, int)
delimiter
db.session.commit()
delimiter
soup = BeautifulSoup(html)
delimiter
new_list.append(data[index][current_index])
delimiter
driver.close()
delimiter
zf.seek(0)
delimiter
df[df.ge(0)].fillna(-9999)
delimiter
soup = BeautifulSoup(html)
delimiter
ax.xaxis.set_major_locator(days)
delimiter
{{narratives.narrative_text}}
delimiter
axclust.set_yticks([])
delimiter
axcltwo.set_yticks([])
delimiter
f.close()
delimiter
frame.columnconfigure(1, weight=1)
delimiter
urllib.request.install_opener(opener)
delimiter
map(lambda row: map(int, row), inputVals)
delimiter
pl.figure()
delimiter
a + list(repeat(0, 6))
delimiter
plt.imshow(a, cmap=plt.gray())
delimiter
cv2.destroyAllWindows()
delimiter
arr[0, 0]
delimiter
names.remove(name)
delimiter
print(map(str, rr[::2]))
delimiter
ax = fig.add_subplot(111)
delimiter
result[k] += myDict[k]
delimiter
ax = fig.add_subplot(gs[0])
delimiter
HTMLParser.__init__(self)
delimiter
result = {k: d1[k] for k in keys}
delimiter
plt.imshow(img_a)
delimiter
OrderedDict.__init__(self, *args, **kwds)
delimiter
globals()[key] = value
delimiter
sys.exit(app.exec_())
delimiter
sess = tf.Session()
delimiter
ax.set_yticklabels(names)
delimiter
worksheet4 = workbook.add_worksheet()
delimiter
table.reset_index()
delimiter
y = x[:]
delimiter
print(prev.tb_frame.f_locals)
delimiter
self.cursor.commit()
delimiter
ax1 = fig.add_subplot(111)
delimiter
sys._getframe(number)
delimiter
fd.write(data)
delimiter
setattr(self, key, value)
delimiter
b = a + b
delimiter
pprint(Matrix([[1 / (4 * pi), 1], [1, f(x)]]))
delimiter
A.todense()
delimiter
pd.concat(subs)
delimiter
self.canvas.configure(yscrollcommand=self.ysb.set, xscrollcommand=self.xsb.set)
delimiter
opener = urllib.request.build_opener(urllib.request.HTTPHandler, handler)
delimiter
setting2 = config2
delimiter
set([5, 6])
delimiter
ax = fig.add_subplot(111)
delimiter
plt.show()
delimiter
p.start()
delimiter
self.name = name
delimiter
gtk.main()
delimiter
db.backup.insert(list(cursor))
delimiter
django.setup()
delimiter
my_logger.setLevel(logging.DEBUG)
delimiter
main.py
delimiter
print(df.head())
delimiter
km = KMeans()
delimiter
time.sleep(1)
delimiter
screen = pygame.display.set_mode((640, 480))
delimiter
[a, b]
delimiter
index = np.array([0, 1])
delimiter
client.options.transport.last_headers
delimiter
sys.exit(rc)
delimiter
date = datetime.datetime.fromtimestamp(timestamp)
delimiter
pd.merge(df1, df2, left_index=True, right_index=True)
delimiter
plt.draw()
delimiter
parser = etree.XMLParser(recover=True)
delimiter
PROJECT_ROOT = os.path.dirname(__file__)
delimiter
today = date.today()
delimiter
o.subscribe(my_callback_func)
delimiter
print([x for x in range(1, 1000) if pred(x)])
delimiter
raise SystemExit(1)
delimiter
plt.show()
delimiter
conn.close()
delimiter
df = pd.DataFrame()
delimiter
model_to_dict(instance, fields=[field.name for field in instance._meta.fields])
delimiter
os.chdir(path_dir)
delimiter
np.corrcoef(signal[:-1], signal[1:])[0][1]
delimiter
print(dt - datetime.fromtimestamp(s * factor))
delimiter
Decimal((0, a, -len(a) + 1))
delimiter
df = df[df.end_date.notnull()]
delimiter
metadata.create_all()
delimiter
sys.stdout.flush()
delimiter
total_loss = tf.add_n(losses)
delimiter
gzip_file_handle = gzip.GzipFile(fileobj=url_file_handle)
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
textfile.write(artigo)
delimiter
whos
delimiter
django.utils.simplejson.loads(someJson)
delimiter
df.columns
delimiter
self.show_progress(100)
delimiter
response = view(request)
delimiter
print(zdd1.join(zdd2).collect())
delimiter
p[i] += 1
delimiter
p2 = Process(target=func2)
delimiter
Class.method(instance, argument)
delimiter
pyximport.install()
delimiter
gen1, gen2
delimiter
np.add.outer(a, a)
delimiter
r = requests.post(url, data=form_data, headers=user_agent)
delimiter
hash(tuple())
delimiter
mlab.start()
delimiter
urllib.parse.quote(s)
delimiter
DataFrame(foo, index=df.index)
delimiter
process(line)
delimiter
np.array([x for x in aset & bset])
delimiter
self.__dict__ == other.__dict__
delimiter
frames.append(df)
delimiter
pd.to_datetime(s)
delimiter
c.setopt(c.WRITEFUNCTION, retrieved_body.store)
delimiter
s.connect((ip, port))
delimiter
id = db.Column(db.Integer, primary_key=True)
delimiter
m.bluemarble()
delimiter
draw = ImageDraw.Draw(mask)
delimiter
app.register_blueprint(filters.blueprint)
delimiter
b[:len(a)] == a or is_sublist(a, b[1:])
delimiter
wx.NO_BORDER ^ wx.SYSTEM_MENU ^ wx.MINIMIZE_BOX ^ wx.MAXIMIZE_BOX ^ wx.CLOSE_BOX
delimiter
pd.read_csv(s, index_col=0, parse_dates=True, dayfirst=True)
delimiter
self.navigate(-1)
delimiter
main()
delimiter
self.last_name = last_name
delimiter
a = np.array([[5, 7], [12, 18], [20, 29]])
delimiter
AaBbCcDdEeFfGgHhIiJjKkLlMNOPQRSTUVWXYZ
delimiter
print(p.groupby(p.ne(p.shift()).cumsum()).cumcount())
delimiter
df
delimiter
main()
delimiter
np.random.seed(0)
delimiter
fig, ax = plt.subplots(figsize=a4_dims)
delimiter
blurred = gaussian_filter(a, sigma=7)
delimiter
d = dict(zip(m[::2], m[1::2]))
delimiter
np.sort(np.partition(x, -10)[-10:])
delimiter
bot.polling()
delimiter
sys.stdout = sys.__stdout__
delimiter
d = dict(map(tabsplit, list1))
delimiter
Obj1.grid_forget()
delimiter
window.show()
delimiter
fig, ax = plt.subplots()
delimiter
process.stdin.close()
delimiter
plt.setp(ax.get_xticklines()[-2:], visible=False)
delimiter
Thread.__init__(self)
delimiter
f.write(line)
delimiter
map(convert, a)
delimiter
print(d.foo())
delimiter
urllib.request.urlopen(URL).read()
delimiter
print(my_hex)
delimiter
numpy.isfinite(myarray).all()
delimiter
self._sock.sendall(data)
delimiter
paramdata.to_csv(sys.stdout)
delimiter
ser.readline()
delimiter
p1.stdout.close()
delimiter
df[df.apply(lambda x: x.A in x.B, axis=1)]
delimiter
sum(x is 0 for x in arr)
delimiter
file_bytes.seek(0, 0)
delimiter
main()
delimiter
self.client = paramiko.SSHClient()
delimiter
x = numpy.array([0, 1, 1, 2, 2, 2])
delimiter
np.random.shuffle(curr_data)
delimiter
self.layout.addWidget(self.button1)
delimiter
second = [y for x, y in data]
delimiter
conn.commit()
delimiter
buf.seek(0)
delimiter
complete_path = os.path.abspath(complete_path)
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
os.play()
delimiter
lowcut = 500.0
delimiter
run()
delimiter
result = a[np.argsort(a)[:k]]
delimiter
app.exec_()
delimiter
PWD = os.path.dirname(os.path.realpath(__file__))
delimiter
sizes = [display.GetGeometry().GetSize() for display in displays]
delimiter
test.py
delimiter
[0, 1, 2]
delimiter
self.value = self.left.value + self.right.value
delimiter
lines.append(text)
delimiter
time_start = time.time()
delimiter
func()
delimiter
chapter = form.save()
delimiter
f, axarr = plt.subplots(2, 1)
delimiter
datetime.datetime(d.year, d.month, d.day)
delimiter
len(np.unique(arr)) == 1
delimiter
print([x for x in a if x not in b] + [x for x in b if x not in a])
delimiter
s.set_debuglevel(0)
delimiter
parser.parse(f)
delimiter
A = np.empty((len(x), 2))
delimiter
col_idx = np.array([0, 2])
delimiter
x = np.arange(1000)
delimiter
sum(list(dict.items()), ())
delimiter
func(**r._asdict())
delimiter
arr.reshape(k, 2, k, 2).swapaxes(1, 2).reshape(k, k, 4).max(axis=-1)
delimiter
session.add(foo)
delimiter
pairs = tuple(combinations(list(range(len(A[0]))), 2))
delimiter
heapq.heappush(heap, (a + b, a, b))
delimiter
plt.clf()
delimiter
plot(x, y2s)
delimiter
scipy.stats.poisson.cdf([4, 17], 10)
delimiter
print(slept)
delimiter
fig.canvas.draw()
delimiter
pl = pl[:5]
delimiter
root = Tk()
delimiter
np.diff(array1) - lens[:-1] + 1
delimiter
x.append(np.nonzero(np.in1d(a, c))[0])
delimiter
key = lambda x: x[1][0]
delimiter
a[:, (1)].toarray()
delimiter
data = sys.stdin.read()
delimiter
print(new_list)
delimiter
SudsObject.__init__(self)
delimiter
task.revoke(terminate=True)
delimiter
label_Image.setPixmap(QtGui.QPixmap.fromImage(image_profile))
delimiter
data.reshape(2, -1)
delimiter
ResultSerializer(results, many=True).data
delimiter
QWidget.__init__(self, parent)
delimiter
plt.show()
delimiter
thread.start()
delimiter
np.random.seed(2015)
delimiter
QApplication.setOverrideCursor(QCursor(QtCore.Qt.WaitCursor))
delimiter
print(sys._getframe().f_code.co_name)
delimiter
pygame.init()
delimiter
print(link.url, link.text)
delimiter
out, err = proc.communicate()
delimiter
main2()
delimiter
wait = WebDriverWait(driver, 10)
delimiter
help(module)
delimiter
my_list = [int(i) for line in f for i in line.split() if i.isdigit()]
delimiter
answer.append((alo, blo))
delimiter
x = numpy.zeros((i, j, k))
delimiter
profiler.start()
delimiter
new_arr = arr.reshape(-1, arr.shape[-1])
delimiter
pdb.set_trace()
delimiter
sys.exit(app.exec_())
delimiter
ax1.bar(x, y)
delimiter
length = len(string)
delimiter
os._exit(0)
delimiter
int(hashlib.sha1(s).hexdigest(), 16) % 10 ** 8
delimiter
self.set_text(new_text)
delimiter
server.start()
delimiter
assert hash(a) == hash(b)
delimiter
window.show()
delimiter
list1_indices = {item: i for i, item in enumerate(list1)}
delimiter
print(x[:10])
delimiter
clf.fit(X, y)
delimiter
n if n - 1 < x <= n else n + 1
delimiter
sys.stdout.write(line)
delimiter
print(data)
delimiter
HttpResponse()
delimiter
reactor.do(thing1)
delimiter
a * np.exp(-b * x) + offset
delimiter
datastream.seek(0)
delimiter
l[:x] + l[-y:]
delimiter
time.sleep(duration)
delimiter
quote.save()
delimiter
do_something_based_on_the_request_endpoint(request)
delimiter
app = web.application(urls, globals())
delimiter
x, y = foo(50)
delimiter
app.config.from_object(__name__)
delimiter
p.terminate()
delimiter
print(repr(a))
delimiter
plt.show()
delimiter
locale.setlocale(locale.LC_COLLATE, old_locale)
delimiter
print(requests.get(url, proxies=proxies).text)
delimiter
numpy.isnan(a).any()
delimiter
os.kill(os.getpid(), signal.SIGUSR1)
delimiter
time.sleep(2)
delimiter
elapsed = time.time() - t
delimiter
total += int(row[1])
delimiter
results = query.all()
delimiter
ax.legend()
delimiter
dfrand = pd.DataFrame(data=np.random.randn(data.shape[0], data.shape[1]))
delimiter
app.exec_()
delimiter
os.system(bashCommand)
delimiter
[tuple(getattr(obj, field) for field in fields) for obj in listobj]
delimiter
a[np.abs(a) < eps] = 0
delimiter
main()
delimiter
plt.xlim([-0.5, len(values) - 0.5])
delimiter
ax = plt.gca()
delimiter
plt.show(block=False)
delimiter
stations = []
delimiter
dist(site1[0], site1[1], site2[0], site2[1])
delimiter
float_to_str(4.2e+17)
delimiter
print(arreq_in_list(myarr1, mylistarr))
delimiter
round(float(x) / 500) * 500
delimiter
p.start()
delimiter
ao[:-1, :-1] += ai[1:, 1:]
delimiter
self.button.append(Button(frame, text=name, command=callback))
delimiter
plt.plot(z, f(z, tval))
delimiter
time.sleep(120.0)
delimiter
f.__class__
delimiter
fig = plt.figure()
delimiter
print(dt + datetime.timedelta(days=d + 1))
delimiter
e = 0.081819191
delimiter
s.listen(1)
delimiter
replace = [(y, z + 1), (x, y + z), (z, a)]
delimiter
f.writelines(lines)
delimiter
ax.add_collection(collection, autolim=True)
delimiter
ax.imshow(img, extent=[min(xi), max(xi), min(yi), max(yi)])
delimiter
t.start()
delimiter
setattr(self, method, wrapped_method)
delimiter
print(stdout.read())
delimiter
all(x != y for x, y in zip(s[:-1], s[1:]))
delimiter
next(reader)
delimiter
mydict.setdefault(mykey, myfunc())
delimiter
a[np.lexsort(np.transpose(a)[::-1])]
delimiter
out = mat[0] * (len(ixs) - np.count_nonzero(nzmask)) + nzsum
delimiter
do_something()
delimiter
response = request.execute()
delimiter
Thread(target=callback).start()
delimiter
_trace(args[0])
delimiter
fig, ax = plt.subplots()
delimiter
newID = db.insert_id()
delimiter
driver = webdriver.Firefox()
delimiter
element.remove(subelement)
delimiter
conn.close()
delimiter
fig.tight_layout()
delimiter
a.sort(key=len, reverse=True)
delimiter
test.py
delimiter
sys.stdout.write(line)
delimiter
signal.signal(signal.SIGTERM, lambda signum, stack_frame: sys.exit(1))
delimiter
c = np.tile(a, (b.shape[0], 1))
delimiter
A.__init__(self)
delimiter
pythoncom.PumpMessages()
delimiter
int(x * 10 ** (1 + a) + y)
delimiter
label = np.random.random((100, 100))
delimiter
plt.bar([1, 2], [5, 4])
delimiter
print([(c.rate(), c.accrualPeriod()) for c in coupons])
delimiter
db.create_all()
delimiter
fileHandler.setLevel(logging.DEBUG)
delimiter
writer.writerow(codecs.BOM_UTF16_LE)
delimiter
result = np.average(_array, axis=1)
delimiter
signal.signal(signal.SIGINT, my_signal_handler)
delimiter
lesser + [pivot] + greater
delimiter
list(a)
delimiter
print ()
delimiter
print((11 + 7) % 12)
delimiter
conn.setopt(pycurl.FOLLOWLOCATION, True)
delimiter
soup = BeautifulSoup(html)
delimiter
list(Project.__table__.columns.keys())
delimiter
channel.start_consuming()
delimiter
mylist.pop(0)
delimiter
unittest.main(failfast=True)
delimiter
item.active = not item.active
delimiter
df[(df > 0).all(1)]
delimiter
assert rdd.squares().collect() == [1, 4, 9]
delimiter
tuple(list(zip(*G))[0])
delimiter
result.setdefault(widget_type, []).append(app)
delimiter
plt.subplots_adjust(hspace=0.0)
delimiter
ext = os.path.splitext(path)[1]
delimiter
v = np.array([0, 1, 2])
delimiter
[id(x) for x in a]
delimiter
TLabels = np.array([-1, 1, 1, 1, 1, -1, -1, 1, -1, -1])
delimiter
self.__class__.num += 1
delimiter
FlaskApplication().run()
delimiter
json.JSONEncoder.default(self, o)
delimiter
list_of_tuples = [(1, 2), (4, 5)]
delimiter
False
delimiter
app.run(debug=True)
delimiter
g.user = current_user.username
delimiter
plt.gca().yaxis.set_minor_locator(mpl.ticker.NullLocator())
delimiter
app.MainLoop()
delimiter
val = rtpinterpolator(xyz2rtp(x, y, z))
delimiter
sorted(my_set, key=natural_sortkey)
delimiter
sum(args) == 1
delimiter
g = nx.Graph()
delimiter
db.session.add(p)
delimiter
aic.append(x)
delimiter
comments = soup.findAll(text=lambda text: isinstance(text, Comment))
delimiter
g = a + b + np.sqrt(d * d + e * e + f * f)
delimiter
self.list[key]
delimiter
func()
delimiter
app = Flask(__name__)
delimiter
col_names = sorted(list(col_dict.items()), key=lambda x: x[0])
delimiter
deleted[key]
delimiter
print(do_something())
delimiter
window.show()
delimiter
interleave(lst[:len(lst) / 2], lst[len(lst) / 2:])
delimiter
time.sleep(1)
delimiter
x = np.arange(100).reshape(10, 10)
delimiter
dest.close()
delimiter
np.kron(a.reshape(-1, 2), np.ones((2, 2), dtype=int))
delimiter
my_array = np.clip(my_array, minN, maxN)
delimiter
fig.canvas.draw()
delimiter
ax = fig.add_subplot(111)
delimiter
graph = GraphAPI(oauth_access_token)
delimiter
fg.canvas.draw()
delimiter
print(df)
delimiter
root.after(0, add_letter)
delimiter
sa, sb, sc = [str(e) for e in [a, b, c]]
delimiter
sc.parallelize([], n).count()
delimiter
self.rebuild_index()
delimiter
br = mechanize.Browser()
delimiter
globals()[string1 + string2]()
delimiter
plt.plot(data)
delimiter
s.write(line)
delimiter
logging.basicConfig(level=logging.DEBUG, format=FORMAT)
delimiter
a.sum(axis=1)
delimiter
l.pop()
delimiter
result = []
delimiter
items.sort(key=lambda obj: (obj.firstname, [(-ord(c) for c in obj.lastname)]))
delimiter
setp(ax.get_yticklabels(), fontsize=8)
delimiter
json.loads(json.dumps([dict1, dict2]))
delimiter
decorator
delimiter
help(foo)
delimiter
list_list.append(list1)
delimiter
self.ProgressBar.SetValue(event.count)
delimiter
self.thread.start()
delimiter
-min((x, -i) for i, x in enumerate(values))[1]
delimiter
plt.subplot(6, 1, 2)
delimiter
self.setCentralWidget(widget)
delimiter
plt.show()
delimiter
name = models.CharField(max_length=255)
delimiter
print(row.rstrip())
delimiter
str(int(match.group(0)) - 1)
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
file.close()
delimiter
obj_list = [x.obj for x in set(HashMyAttr(obj) for obj in obj_list)]
delimiter
self.fd.close()
delimiter
m.fit(X, y)
delimiter
fig, ax = plt.subplots()
delimiter
s.between(0, 1)
delimiter
e2.pack()
delimiter
betterdata = numpy.concatenate((maybeinliers, alsoinliers))
delimiter
dict((f, getattr(self, f)) for f, _ in self._fields_)
delimiter
os.unlink(file)
delimiter
result_dict[k] = v
delimiter
wjoykhsapcmvjmar
delimiter
reader.SetFileName(filename)
delimiter
self.num += 1
delimiter
print(line)
delimiter
reactor.run()
delimiter
dir(__builtin__)
delimiter
time.time() - start
delimiter
flatten_to_strings(list_of_menuitems)
delimiter
os.killpg(p.pid, signal.SIGKILL)
delimiter
print([(x, y) for x in range(5) for y in [f(x)] if y != 2])
delimiter
setattr(cls, name, new_value)
delimiter
ys = lowess(y, x)[:, (1)]
delimiter
P = expm(A)
delimiter
a.append({mykeys[n]: values[n] for n in range(0, len(mykeys))})
delimiter
r = func(*args, **kwargs)
delimiter
self.transport.write(self.name, (self.host, self.port))
delimiter
m.put(k, m.get(k) + 1)
delimiter
writer.writerow(row)
delimiter
window = QtGui.QMainWindow()
delimiter
print((letter, count[letter]))
delimiter
self.setSceneRect(0, 0, width, height)
delimiter
datetime.time(*values)
delimiter
FooModel.objects.get(pk=1).children.all()
delimiter
test = array([[0, 1, 2], [1, 1, 6], [2, 0, 4]])
delimiter
background.paste(top, (0, 0))
delimiter
testRust()
delimiter
[x for x, y in pairwise(xs) if x != y]
delimiter
self.ax.set_xlim(self.min_x, self.max_x)
delimiter
self.file.flush()
delimiter
df[df.line_race != 0]
delimiter
PyQt4.QtCore.QPoint(1867, 416)
delimiter
picture.putpixel((x, y), new_color)
delimiter
list(mkimap())
delimiter
gradients
delimiter
cvs = df.columns.values
delimiter
NUMBER_OF_EXCEPTIONS += 1
delimiter
copy + copy_to_depth(item, depth - 1)
delimiter
z = [int(i == j) for i, j in zip(x, y)]
delimiter
fig, ax = plt.subplots()
delimiter
cursor.execute(query)
delimiter
all_labels.sort()
delimiter
self.assertEqual(self.seq, list(range(10)))
delimiter
f.write(bitbufstr)
delimiter
list(compress(listOfTuples, bool_array))
delimiter
print(f.read())
delimiter
img_gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
delimiter
(values.cumsum() - ALLOWANCE).clip_lower(0).diff().fillna(0)
delimiter
zin.close()
delimiter
gray2b = cv2.warpAffine(gray2, Minv, shape(gray2.T))
delimiter
HttpResponse(escape(some_string))
delimiter
self.newargument = myarg
delimiter
myfile2.write(text)
delimiter
plt.show()
delimiter
graceful = argparse.ArgumentParser(add_help=False)
delimiter
print(s)
delimiter
a = concat(a, b)
delimiter
time.sleep(1)
delimiter
map(itemgetter(1), rows)
delimiter
ax1 = fig.add_subplot(111)
delimiter
bisect.bisect == bisect.bisect_left
delimiter
func(*args, **kwargs)
delimiter
plt.title(title)
delimiter
now.replace(minute=now.minute - now.minute % 15, second=0, microsecond=0)
delimiter
floored_data = data.apply(np.floor)
delimiter
Script1.py
delimiter
A.objects.filter(id=some_a.id).update(hidden=False)
delimiter
print(sys.stdin.read())
delimiter
script = os.path.abspath(sys.argv[1])
delimiter
pairs = tuple(combinations(list(range(len(A[0]))), n))
delimiter
df.loc[new_index] = pd.Series([99], df.columns)
delimiter
plt.figure()
delimiter
good = [x for x in mylist if x in goodvals]
delimiter
id(Point(1, 2)) == id(Point(1, 2))
delimiter
loop.run_until_complete(asyncio.wait_for(asyncio.sleep(60), 5))
delimiter
print(html2text.html2text(html))
delimiter
link.click()
delimiter
clientsocket.send(r.encode())
delimiter
image.show()
delimiter
root = etree.fromstring(xml)
delimiter
server.ehlo()
delimiter
output_file.write(ablob[0])
delimiter
warning.setLevel(logging.WARNING)
delimiter
print(args.file.readlines())
delimiter
module
delimiter
sorted(set(a).intersection(xyz))
delimiter
fixedser.dropna().plot(ax=axes[1])
delimiter
newser.dropna().plot(ax=axes[1])
delimiter
figure.canvas.draw()
delimiter
app.MainLoop()
delimiter
func_a(s)
delimiter
driver.get(url)
delimiter
nzsum = np.take(mat, ixs[nzmask], axis=0).sum(axis=0)
delimiter
sys.exit(app.exec_())
delimiter
l.append(x[:k])
delimiter
list(pairs(board))
delimiter
now = datetime.datetime.now()
delimiter
m.close()
delimiter
numpy.set_printoptions(precision=15)
delimiter
answerlist.extend(templist[:lengthmodified])
delimiter
se = pd.Series(mylist)
delimiter
_finditem(v, key)
delimiter
workList.sort(key=len, reverse=True)
delimiter
foo.x = 0
delimiter
main()
delimiter
[(double(x) if isinstance(x, list) else x * 2) for x in numberlist]
delimiter
fig = pyplot.figure()
delimiter
ax.set_xticks(bins)
delimiter
cookies = browser.get_cookies()
delimiter
pg.draw.rect(surf, STIMCOL, (60, 70, 80, 90))
delimiter
time.sleep(5)
delimiter
jsonify(username=g.user.username, email=g.user.email, id=g.user.id)
delimiter
image = Image.open(image_in_path)
delimiter
x if x < y else y
delimiter
something()
delimiter
fig = plt.figure()
delimiter
new_list.append(tmp_list)
delimiter
fig = plt.figure(figsize=(5, 10))
delimiter
list(dill.detect.badtypes(f, depth=1).keys())
delimiter
admin.site.register(User, UserAdmin)
delimiter
text = models.TextField()
delimiter
pool = Pool()
delimiter
pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)
delimiter
scipy.linalg.solve(X, Y)
delimiter
insert_sort(descend_list, i, lambda x, y: x[1:] < y[1:])
delimiter
display(fig)
delimiter
self.Refresh()
delimiter
pd.DataFrame(list(ds1.difference(ds2)))
delimiter
df
delimiter
df
delimiter
test(1, 2)
delimiter
s.connect((host, port))
delimiter
[1, 0, 1],
delimiter
resp = urllib.request.urlopen(request)
delimiter
self.driver = webdriver.Firefox()
delimiter
ax = fig.add_subplot(111, polar=True)
delimiter
print(map(lambda x: dict(zip(reader[0], x)), reader))
delimiter
print(os.getpid())
delimiter
resp.set_data(soup.prettify())
delimiter
fig.multi_line(y_err_x, y_err_y, color=color, **error_kwargs)
delimiter
c += initval2
delimiter
np.array(b)
delimiter
permutate(n, k) // permutate(k, k)
delimiter
other_file.py
delimiter
sys.exit(app.exec_())
delimiter
sorted(list(y.items()), cmp=reverse_comparison)
delimiter
print(word[1], word[0])
delimiter
output, output_err = p.communicate(myfile.read())
delimiter
all(c in string.printable for c in bell)
delimiter
parser.print_help()
delimiter
sum(ele[1] == 1 for ele in a)
delimiter
ax.set_position([0.1, 0.1, 0.5, 0.8])
delimiter
list(skip(list(range(10)), at_start=2, at_end=2))
delimiter
f1.close()
delimiter
WSGIScriptAlias / myapp / code / wsgi / wsgi.py
delimiter
test.postmodel_set.all()
delimiter
print(max(node.y for node in path.nodes))
delimiter
self.setCentralWidget(self.view)
delimiter
math.ceil(float(177) / 10)
delimiter
np.random.seed(0)
delimiter
d1.x1 - d2.x2.values
delimiter
numpy.array([Register() for i in range(4)])
delimiter
application = QtGui.QApplication(sys.argv)
delimiter
print(i, list(csv.reader(source)))
delimiter
setattr(e, key, val)
delimiter
result = np.empty_like(zeta)
delimiter
chars.append(c)
delimiter
n = random.randint(1, 1000)
delimiter
b = [indicies[elements == i] for i in range(1, N)]
delimiter
do_something_else(array[-1])
delimiter
p.stdin.write(answer)
delimiter
self.setStrokeColorRGB(0, 0, 0)
delimiter
set(a).intersection(b)
delimiter
Image.open(filepath)
delimiter
s[-1]
delimiter
0.0, -64.0, 208.0, 0.0, -90.0, 0.0, -80.0, 0.0, 0.0, -80.0, -48.0
delimiter
plot([4, 5, 6])
delimiter
time.sleep(0.1)
delimiter
main()
delimiter
b = OrderedDict(sorted(a.items()))
delimiter
np.set_printoptions(**original)
delimiter
h = [[0, 0, 1][0, 0, 0][-1, 0, 0]]
delimiter
serializer = UserSerializer(data=request.DATA)
delimiter
neurons.append(neuron)
delimiter
b = numpy.arange(5)
delimiter
sat = im.cumsum(1).cumsum(0)
delimiter
plt.show()
delimiter
main()
delimiter
self.toolbar.update()
delimiter
hash({})
delimiter
strat0.execute()
delimiter
msg.attach(attachment)
delimiter
latex_float(1000000000.0)
delimiter
bisect.bisect(l, 55)
delimiter
print(socket.gethostname())
delimiter
A[np.where(~np.isnan(A))[0][0]:]
delimiter
df.stack().str.split().str[-1].unstack()
delimiter
server.serve_forever()
delimiter
sys.stderr = os.devnull
delimiter
Path(__file__).parent.parent
delimiter
collections.OrderedDict()
delimiter
plt.show()
delimiter
print(get_last_non_zero_index([]))
delimiter
Response(serializer.data)
delimiter
ax.set_xticks(xticks[1:-1])
delimiter
val = hex(val)
delimiter
indices_nonzero = numpy.arange(len(array))[~bindices_zero]
delimiter
theta_edges, r_edges = CartesianToPolar(xedges[:-1], yedges[:-1])
delimiter
history.append(item)
delimiter
app.mainloop()
delimiter
response_doc = etree.fromstring(body, parser)
delimiter
chardet_detector.close()
delimiter
now = utc.localize(datetime.datetime.utcnow())
delimiter
numbers.append(map(int, line.split()))
delimiter
dt + datetime.timedelta(seconds=delta)
delimiter
pickle.dump(requests.utils.dict_from_cookiejar(session.cookies), f)
delimiter
list1 = [1, 1, 1, 0, 0]
delimiter
merged = list(joinz(0, zusers.iter(), 0, zratings.iter()))
delimiter
f(1, np.pi)
delimiter
Z = itp(X, Y, grid=False)
delimiter
soup = BeautifulSoup(totstring)
delimiter
images = [image for seq in images for image in seq]
delimiter
mod.__file__
delimiter
self.stopped = True
delimiter
points.append((x, y))
delimiter
plt.scatter(data1, data2, c=colors, cmap=my_cmap)
delimiter
data = conn.recv(4096)
delimiter
self.setWindowFlags(self.windowFlags() | QtCore.Qt.FramelessWindowHint)
delimiter
ser = pd.Series(np.random.normal(size=100))
delimiter
pix = im.load()
delimiter
options[0]
delimiter
plt.yticks(rotation=0)
delimiter
colors = hsv(np.linspace(0, 1.0, len(kinds)))
delimiter
norm.ppf(0.5)
delimiter
sine_list.append(math.sin(2 * math.pi * freq * (x / frate)))
delimiter
print(child.tag, child.attrib, child.text)
delimiter
a.func()
delimiter
x = lst.pop()
delimiter
print(ridge.coef_)
delimiter
[a for a in s if len(a) > 0]
delimiter
app.exec_()
delimiter
hex(n & 4294967295)[:-1]
delimiter
d.update(dict(d))
delimiter
hbar.config(command=canvas.xview)
delimiter
B_p.to_csv(sys.stdout)
delimiter
M.iloc[index][col]
delimiter
Signal.send_robust(sender, **kwargs)
delimiter
self.response.out.write(output.getvalue())
delimiter
shapesMatch([(0, 0), (1, 1), (0, 2), (-1, 1)], l_shape)
delimiter
X, Y = np.meshgrid(X, Y)
delimiter
sorted(randlist2(2000000000, 10000000, 1900000000))
delimiter
plt.show()
delimiter
unplugged()
delimiter
pid = proc.pid
delimiter
entretien_send_email.send_mail(self.id)
delimiter
printout()
delimiter
time.sleep(1)
delimiter
signal.signal(signal.SIGINT, lambda number, frame: sys.exit())
delimiter
pprint.pprint(tup, depth=6)
delimiter
c, b
delimiter
db.init_app(current_app)
delimiter
list(zip(lst[:-1], lst[1:]))
delimiter
name = models.CharField(max_length=100)
delimiter
tree = ElementTree.parse(StringIO.StringIO(output))
delimiter
hl, = plt.plot([], [])
delimiter
{{formset}}
delimiter
plt.axis([xmin, xmax, ymin, ymax])
delimiter
p = Process(target=f, args=(arr,))
delimiter
__init__.py
delimiter
a, b, c
delimiter
fig.tight_layout()
delimiter
print(df.to_latex())
delimiter
app = Flask(__name__)
delimiter
dill.pickles(Foo.x)
delimiter
oneone
delimiter
s.fillna(0).plot()
delimiter
all(a == b for a, b in zip_longest(gen_1, gen_2, fillvalue=sentinel))
delimiter
ax.add_artist(ell)
delimiter
flt = float(random.randint(0, 100))
delimiter
case(re.search(pattern, st))
delimiter
idx = np.arange(n)
delimiter
out.close()
delimiter
python / Users / luca / Documents / python / gameover.py
delimiter
a[indices]
delimiter
averaged = {k: (v / len(folds)) for k, v in list(summed.items())}
delimiter
db.test.remove(doc_id)
delimiter
send_email()
delimiter
game.update()
delimiter
(rollingcor.sum(skipna=0).sum(skipna=0) - n) / 2 / n
delimiter
pickle.dump(dict2, fp)
delimiter
my_objects = []
delimiter
set(l1) | set(l2)
delimiter
im.set_clip_path(clip_path)
delimiter
print(line)
delimiter
(0 < x) & (x < 1)
delimiter
constr = []
delimiter
self._points = []
delimiter
local_tz = tzlocal.get_localzone()
delimiter
raise KeyError(key)
delimiter
fh.setLevel(logging.DEBUG)
delimiter
newlist.append(d)
delimiter
trainer = deepbelief.DeepBeliefTrainer(net, dataset=ds)
delimiter
ax = fig.add_subplot(111)
delimiter
root = tk.Tk()
delimiter
pickle.dump(score, file)
delimiter
df.ix[:, (2)]
delimiter
image.save(self.get_thumbnail_path())
delimiter
f.write(something)
delimiter
ax.set_xlim(0, X)
delimiter
sum(i == word for word in str1.split())
delimiter
imresize(np.ones((1000, 1000)), (100, 100)).shape
delimiter
len1 = math.hypot(x1, y1)
delimiter
a.set_xlim(0, 4 * pi)
delimiter
[x[i:i + step] for i in range(0, len(x), step)]
delimiter
print([list(b) for b in zip(l, inner)])
delimiter
ax.yaxis.set_major_formatter(ticker.FuncFormatter(myLogFormat))
delimiter
tpool = ThreadPool(processes=4)
delimiter
df.info()
delimiter
self.crawler.engine.crawl(self.create_request(), spider)
delimiter
smtp.sendmail(send_from, send_to, msg.as_string())
delimiter
httplib.HTTPConnection.connect(self)
delimiter
sorted(numbers)[-2]
delimiter
plt.figure(figsize=(4.5, 2.5))
delimiter
print(D.x.value)
delimiter
themsg.attach(msg)
delimiter
item
delimiter
chain.from_iterable(combinations(s, r) for r in range(len(s) + 1))
delimiter
ax1 = fig.add_subplot(111)
delimiter
urllib.request.urlopen(request)
delimiter
func(*args, **kwargs)
delimiter
step = datetime.timedelta(days=1)
delimiter
p.start()
delimiter
start_date = start_date.replace(tzinfo=local_tz)
delimiter
pylab.show()
delimiter
os.remove(path)
delimiter
img = np.uint8(np.random.random((720, 1280)) * 256)
delimiter
win.set_decorated(False)
delimiter
browser = webdriver.Firefox()
delimiter
matches = regex.findall(my_str)
delimiter
sess.run(apply_transform_op)
delimiter
itertools.chain(iter(self.items.values()), iter(self.people.values()))
delimiter
ax.plot(list(range(10)))
delimiter
arr = np.vstack((arr, np.array([4, 5, 6])))
delimiter
G = nx.Graph()
delimiter
soup = BeautifulSoup(html_page)
delimiter
sum(1 if int(line) % k == 0 else 0 for line in sys.stdin)
delimiter
pythoncom.CoInitialize()
delimiter
all_data.shape
delimiter
root.withdraw()
delimiter
plt.plot(y)
delimiter
ax = plt.subplot(gs[i, j])
delimiter
db.delete(q.fetch(200))
delimiter
print(np.allclose(res1, res2))
delimiter
fig.canvas.draw()
delimiter
getattr(self.cp, attr)
delimiter
alltests = unittest.TestSuite([fast, slow])
delimiter
engines.append(engine)
delimiter
self.finish()
delimiter
self.tk.config(menu=self.menu)
delimiter
new_list = copy.copy(old_list)
delimiter
print(firstMatch.group())
delimiter
s.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)
delimiter
csvout.close()
delimiter
fig, ax = plt.subplots()
delimiter
type(s)
delimiter
a.max(axis=0)
delimiter
self.setCentralWidget(self.web_view)
delimiter
writer.writeheader()
delimiter
fig.subplots_adjust(wspace=0.05)
delimiter
fs.noteoff(0, 67)
delimiter
x = 2
delimiter
plt.show()
delimiter
myQuery.Availability
delimiter
tar.extractall(path, get_members(tar, args[1]))
delimiter
A[:] = (sub for sub in A if st.issubset(sub))
delimiter
reader = csv.reader(f)
delimiter
velcro.right(180)
delimiter
do_something(val)
delimiter
word_list.sort(key=lambda i: i[0].lower())
delimiter
lowdiag = [0.5] * (n - 1) + [0] * 2
delimiter
odeint(func, y0, t, *list1)
delimiter
print(Second_row_first_column.strip() + Second_row_second_column.strip())
delimiter
l = sorted(list(d.items()), key=lambda x: x[1], reverse=True)
delimiter
p.start()
delimiter
df
delimiter
ax.xaxis_date()
delimiter
np.sin(y * x) + z
delimiter
points = np.random.randint(0, 5, (10, 2))
delimiter
list(chain.from_iterable(pattern.split(w) for w in input_list))
delimiter
print(f.text)
delimiter
s.setsockopt(SOL_SOCKET, SO_BROADCAST, 1)
delimiter
curs = conn.cursor()
delimiter
pygame.event.pump()
delimiter
s[~s.index.duplicated()]
delimiter
plt.axis([0, 10, 0, 10])
delimiter
compressor.close()
delimiter
n = a.shape[0]
delimiter
[(k1[0], k1[1], k2) for k1, k2 in zip(chain.from_iterable(dge), nde)]
delimiter
cv.Rectangle(color_image, pt1, pt2, cv.CV_RGB(255, 0, 0), 1)
delimiter
sys.exit(0)
delimiter
max(zip((x.count(item) for item in set(x)), set(x)))
delimiter
list(range(int(toks[0]), int(toks[1]) + 1))
delimiter
f.close()
delimiter
app.MainLoop()
delimiter
print(parser.parse_args())
delimiter
print(name, value)
delimiter
self._worker_handler.start()
delimiter
vbox.add(label)
delimiter
lambda a, b: (a + 1, b * 1)
delimiter
demangled[:-1]
delimiter
model.train_on_batch(state_action_vector, target)
delimiter
ax1.set_xlim(0, 60)
delimiter
self.assertEqual(a, b)
delimiter
numpy.finfo(numpy.longdouble)
delimiter
screen = pygame.display.set_mode((500, 500))
delimiter
int(round(5678, -1))
delimiter
print(df.eq(df.iloc[0]))
delimiter
sorted(set(range(start, end + 1)).difference(L))
delimiter
print(combinedRDD.collect())
delimiter
data += proc.stdout.read()
delimiter
server.start()
delimiter
plt.tight_layout()
delimiter
surfc = ax.plot_trisurf(Xc, Yc, Zc, cmap=cm.jet, linewidth=0.2)
delimiter
html = urlopen(url).read()
delimiter
keys.insert(i, k)
delimiter
np.floor(series)
delimiter
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
delimiter
[[l[x] for l in lists] for x in range(len(lists[0]))]
delimiter
mainloop()
delimiter
tst.main(globals())
delimiter
{k: [da.get(k, []), db.get(k, [])] for k in set(listanum + listbnum)}
delimiter
s.setsockopt(socket.SOL_TCP, socket.TCP_KEEPCNT, 5)
delimiter
print(re.findall(pattern, line))
delimiter
pbar.finish()
delimiter
image.swapaxes(0, 1), out
delimiter
print(nums.mean(axis=1))
delimiter
get_value(d[l[0]], l[1:])
delimiter
y = np.random.rand(m, n)
delimiter
out.close()
delimiter
logger.addHandler(handler)
delimiter
print(new_pressures)
delimiter
print(f())
delimiter
nosetests - v
delimiter
remove_even([4, 5, 4, 7, 9, 11])
delimiter
response = urllib.request.urlopen(req)
delimiter
Label.__init__(self, master, image=self.frames[0])
delimiter
d[a].append(b)
delimiter
x[0::2]
delimiter
self.n += 1
delimiter
wr.writerows([k] + v for k, v in list(od.items()))
delimiter
window.show_all()
delimiter
df.mean()
delimiter
final_list = sorted(pos_list) + sorted(neg_list)
delimiter
pickle.dump(saved_data, outfile, protocol=pickle.HIGHEST_PROTOCOL)
delimiter
datetime.datetime(*dtuple[:6])
delimiter
s.compute()
delimiter
list_1 = [i for n, i in enumerate(list_1) if n not in index_list]
delimiter
your_csv_file.close()
delimiter
book = xlwt.Workbook()
delimiter
df.groupby(np.arange(len(df)) // 2).mean()
delimiter
ax.add_line(line)
delimiter
data.sum()
delimiter
d[key] = value
delimiter
button.pack()
delimiter
p = Pool(5)
delimiter
testdataframe1.plot(style=styles1, ax=ax)
delimiter
list(set(a) - set(b))[:100]
delimiter
plt.figure()
delimiter
density = scipy.stats.gaussian_kde(scatterpoints)
delimiter
ax.set_ylim(-0.5, 4.5)
delimiter
b[:, ([True, True, True, False, False])]
delimiter
pd.concat([df[col].apply(pd.Series) for col in cols], axis=1, keys=cols)
delimiter
writer.writerow(row)
delimiter
list_2 = [i for n, i in enumerate(list_2) if n not in index_list]
delimiter
events.append([])
delimiter
e.findall(data)
delimiter
add_patch(axes[0], alpha=0.2, rasterized=False)
delimiter
zk.start()
delimiter
ax.add_patch(polygon)
delimiter
df = pd.read_csv(StringIO(text), parse_dates=[0])
delimiter
id = Column(Integer, primary_key=True)
delimiter
results.append(pool.apply_async(foo, args=(words[i], numbers[i])))
delimiter
list(range(item.start or 0, item.stop or len(self), item.step or 1))
delimiter
window.show()
delimiter
string.ascii_letters[:random.randint(1, 50)].title()
delimiter
{{instance.key().name()}}
delimiter
app.mainloop()
delimiter
time.sleep(0.25)
delimiter
Base.metadata.create_all()
delimiter
processed_images = tf.map_fn(process_fn, images)
delimiter
sorted(results)
delimiter
df = df.unstack()
delimiter
Tkinter.Label(root, image=imgtk).pack()
delimiter
self.show()
delimiter
res.extend([entry[1:], entry[:1]])
delimiter
np.array(a) - np.array(b)
delimiter
user.save()
delimiter
np.isnan(np.nan)
delimiter
plot_selected.yaxis.set_ticks(np.arange(0, 1.1, 0.2))
delimiter
self.wb.save(self.dest)
delimiter
proc.join()
delimiter
ax1 = fig.add_subplot(111)
delimiter
fig.subplots_adjust(right=0.75)
delimiter
set(perms)
delimiter
int(round(5678, -2))
delimiter
x = numpy.random.uniform(1.5)
delimiter
self.Bind(wx.EVT_LEFT_UP, self.OnClick)
delimiter
orig_stdout = sys.stdout
delimiter
points = np.random.randint(0, 5, (N, 2))
delimiter
self.thisptr.calculate()
delimiter
self.spinbox.valueChanged.connect(self.worker.update_value)
delimiter
d = dict((an_object.name, an_object) for an_object in object_list)
delimiter
autosummary_gerenerate = True
delimiter
filename = sys.argv[1]
delimiter
f.close()
delimiter
[(1 if any(full.endswith(last) for last in B) else 0) for full in A]
delimiter
np.allclose([np.where(a <= x)[0][0] for x in b], np.digitize(b, a))
delimiter
ax.set_xlim(0, 1)
delimiter
n = n % len(strg)
delimiter
out = np.where(mask, np.nan, a)
delimiter
print(i, chr(i))
delimiter
session.commit()
delimiter
gzip_obj.read()
delimiter
result = timedelta1 + timedelta2
delimiter
first_name = models.CharField(max_length=50)
delimiter
x[index]
delimiter
sys.exit()
delimiter
QGraphicsTextItem.mouseMoveEvent(self, event)
delimiter
user.groups.add(group)
delimiter
t.start()
delimiter
x ** 2 + y ** 2 + z ** 2 < radius ** 2
delimiter
R_mean1.append(R)
delimiter
s = s.lower()
delimiter
output = np.array([1, 1, 5])
delimiter
output.writeframes(data[1][1])
delimiter
time.sleep(0.1)
delimiter
ax = plt.subplot(gs[:, :])
delimiter
plt.subplot(121)
delimiter
app = Flask(__name__)
delimiter
ax.tick_params(labelsize=8)
delimiter
print(x)
delimiter
object.__getattribute__(self, name)
delimiter
wx.version()
delimiter
c = f.read(1)
delimiter
print(fig.axes[0])
delimiter
self.__dict__.update(d)
delimiter
self.q.join()
delimiter
print(foo[1:5, (1), (2)])
delimiter
self.wsgi_app(environ, start_response)
delimiter
sub_cmd.cmdloop()
delimiter
test()
delimiter
df[idx]
delimiter
nosetests - -all - modules
delimiter
res = dict([(t, nt(*t)) for t in pairs])
delimiter
data.sort(key=get_score, reverse=True)
delimiter
sys.exit(app.exec_())
delimiter
df[df.b.isnull()]
delimiter
[int(line) for line in f]
delimiter
im2.set_xdata(np.arange(n))
delimiter
dynamic(name, bases, attrs)
delimiter
Value2 = Baz
delimiter
query = query.filter(and_(*filter_group))
delimiter
fulldict = {i: i for i in range(1000)}
delimiter
indices[field][key].add(i)
delimiter
plt.show()
delimiter
new.setdefault(i, []).extend(j)
delimiter
print(list([x for x in words if len(x) > average]))
delimiter
self.write(data)
delimiter
outeropt = outer_result.get()
delimiter
time.sleep(1.0 - elapsed)
delimiter
self.mainframe.rowconfigure(1, weight=1)
delimiter
all_pairs += [((nA, 0), (nB, 1)) for nA, nB in itertools.product(listA, listB)]
delimiter
df.columns = ts_clip.iloc[:len(df.columns)].index.time
delimiter
value
delimiter
item, value
delimiter
text.pack(expand=1, fill=BOTH)
delimiter
print(settings.BASE_DIR)
delimiter
layout.itemAt(i).widget().deleteLater()
delimiter
areas.apply(foo)
delimiter
sum(l) + 0.529964086141668
delimiter
averaged = {k: (sum(d[k] for d in folds) / len(folds)) for k in folds[0]}
delimiter
scipy.misc.factorial(temp)
delimiter
plt.bar(indexes, values, width)
delimiter
lambda a, b: (a + 1, b * 1)
delimiter
app.exec_()
delimiter
w.GetWindowText(w.GetForegroundWindow())
delimiter
sys.exit(-1)
delimiter
plt.show()
delimiter
0.0054 is 0.0054
delimiter
self.output(0.1, Op.setlinewidth)
delimiter
pd.get_dummies(df.Knownvalue // 10)
delimiter
dd.min(axis=1)
delimiter
foo.sort()
delimiter
parser = argparse.ArgumentParser()
delimiter
im = A2.shape[1] - 1 - np.argmax(A2[:, ::-1] < 0, axis=1)
delimiter
resp.raise_for_status()
delimiter
preincrement(i)
delimiter
self.setLayout(self.layout)
delimiter
1j * numpy.inf * 1
delimiter
intersection = queryset1 & queryset2
delimiter
user_input = user_input.strip().lower()
delimiter
ax0b.get_yaxis().get_offset_text().set_size(10)
delimiter
ax0c.get_yaxis().get_offset_text().set_size(10)
delimiter
df = pd.DataFrame(data)
delimiter
potential(abs(b[np.triu_indices_from(b, 1)])).sum()
delimiter
linesamples.add(int(4 * i + 1))
delimiter
s.bind((HOST, PORT))
delimiter
link.allow_tags = True
delimiter
my_array = my_array.reshape(nrows, ncols)
delimiter
root = tk.Tk()
delimiter
w.close()
delimiter
isinstance(d, dict)
delimiter
dic[mygroup].append(entry)
delimiter
conj = rdflib.ConjunctiveGraph()
delimiter
r = s.post(url, data=data)
delimiter
HypotheticalBranch(0, 0, 0)
delimiter
time.sleep(0.01)
delimiter
pool = Pool()
delimiter
pdb.set_trace()
delimiter
cv2.waitKey()
delimiter
G = nx.Graph()
delimiter
[u for u in self.custom_fields if self.cleaned_data[str(u.id)]]
delimiter
row.insert(0, a)
delimiter
G.add_node(1)
delimiter
[x for y in l if len(y) < 4 for x in y if isinstance(x, int)]
delimiter
random.shuffle(order)
delimiter
widget.show()
delimiter
obj.__class__ = cls
delimiter
frame.set_linewidth(0)
delimiter
dir(obj)
delimiter
(-np.array(avgDists)).argsort()[:n]
delimiter
toc2()
delimiter
print(repr(s))
delimiter
print(df1.columns.unique())
delimiter
a, b, c, d, e, f = flatten(v)
delimiter
i.close()
delimiter
line = file.readline()
delimiter
pp(list(map(list, zip(*grid))))
delimiter
main()
delimiter
this_row.append(s.cell_value(row, col))
delimiter
plt.ylim(-20, 60)
delimiter
your_csv_file.close()
delimiter
df
delimiter
self.set_positions((xs[0], ys[0]), (xs[1], ys[1]))
delimiter
list(intersect(*postings))
delimiter
x = np.array(x)
delimiter
Base.Foo(self)
delimiter
db.session.add(entry)
delimiter
html_use_index = True
delimiter
x = np.array([0.1, 0.2, np.nan, 0.4, 0.5])
delimiter
ax1.plot(np.array([1, 5]) * i, label=i)
delimiter
ynew = csc_matrix((data, (rows, cols)), shape=(N, M), dtype=dtype)
delimiter
pdb.set_trace()
delimiter
q, r = divmod(x, y)
delimiter
s.connect((HOST, PORT))
delimiter
matplotlib.pyplot.close(f)
delimiter
sc = SparkContext()
delimiter
allkey = set().union(*alldict)
delimiter
[int(c) for c in s if c.isdigit()]
delimiter
screen = pygame.display.set_mode((640, 480))
delimiter
os.mkfifo(path)
delimiter
self.lock.acquire()
delimiter
ax1.plot(x, y)
delimiter
d = {x: i for i, x in enumerate(lis)}
delimiter
foo.py
delimiter
print(len(list1))
delimiter
data = np.genfromtxt(urllib.request.urlopen(url), skip_header=1, skip_footer=4)
delimiter
(i * i for i in range(5))
delimiter
asyncio.get_event_loop().run_until_complete(start_server)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
x = tab.query()
delimiter
y_pred = pipe_lrSVC.predict(X_test)
delimiter
np.maximum.accumulate(idx, axis=1, out=idx)
delimiter
celery.start()
delimiter
np.array(tmp).reshape((len(longlist), len(longlist[0])))
delimiter
QtGui.QItemDelegate.__init__(self, parent)
delimiter
m2[np.asarray(m2[:, (1)] > 10).flatten()]
delimiter
strncpy(addr.sun_path, UD_SOCKET_PATH, sizeof(addr.sun_path) - 1)
delimiter
soup = BeautifulSoup(data)
delimiter
mylist.remove(max(mylist))
delimiter
p.parse_args([])
delimiter
reader = csv.DictReader(f)
delimiter
pprint.pprint(combs)
delimiter
add_cols(*x.T)
delimiter
painter.rotate(-angle)
delimiter
list(d.items())[1]
delimiter
self.canvas.config(scrollregion=self.canvas.bbox(ALL))
delimiter
ax.xaxis.get_minorticklines()
delimiter
modinv(exp, (p - 1) * (q - 1))
delimiter
df5 = pn5.to_frame()
delimiter
csv_row = line.split()
delimiter
response = urllib.request.urlopen(url, data, headers)
delimiter
sns.kdeplot(x, ax=ax2)
delimiter
f.seek(-len(os.linesep), os.SEEK_END)
delimiter
self.changeLayout(QtCore.Qt.Vertical)
delimiter
list(set(x) & set(y))
delimiter
print(format_float(1500000.0))
delimiter
A = A[np.ix_(L)]
delimiter
self.assertTrue(mock_bar.called)
delimiter
p.start()
delimiter
wav_file.close()
delimiter
sum(is_monotonic(num, reverse) for num in range(start, end))
delimiter
len(set(a) - set(b))
delimiter
random.sample(a, len(a) + 1)
delimiter
l.append(row[i])
delimiter
pyplot.show()
delimiter
thread.start()
delimiter
Book.create_table()
delimiter
print((a, b, c, d))
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
normX = np.sqrt(ssX)
delimiter
sess.run(init_op)
delimiter
logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)
delimiter
cursor = connection.cursor()
delimiter
df.sum()
delimiter
my_module.__file__
delimiter
pdb.set_trace()
delimiter
file.save()
delimiter
self._thread.start()
delimiter
button.pack()
delimiter
[int(line) for line in f]
delimiter
df
delimiter
iter(List)
delimiter
channel.queueDeclarePassive(queueName).getMessageCount()
delimiter
ssh = paramiko.SSHClient()
delimiter
ax.set_yticks([0, 0.5, 1])
delimiter
data.append(fileData)
delimiter
threading.Thread.__init__(self)
delimiter
data = np.random.uniform(-1, 1, fs)
delimiter
print(browser.title)
delimiter
max(-15, 0)
delimiter
blank_image.paste(image64, (0, 0))
delimiter
int(time.mktime(d.timetuple()))
delimiter
p.start()
delimiter
soup = BeautifulSoup.BeautifulSoup(your_data)
delimiter
foo.start()
delimiter
yaml.load(s)
delimiter
[5, 6, 10]
delimiter
vc.release()
delimiter
text = open(filename).read()
delimiter
plt.plot(list(range(10)))
delimiter
sys.stdout.flush()
delimiter
np.array([float(sym.subs(all_dict)) for sym in syms])
delimiter
some_fun()
delimiter
meta.py
delimiter
section_sums = mask.reshape(-1, 20).sum(1)
delimiter
cursor = db.cursor()
delimiter
find_chamber_discard2(locals())
delimiter
dict(const1=const1, const2=const2)
delimiter
users = User.objects.all()
delimiter
writer.writerow(next(reader))
delimiter
self.ui.gridLayout.update()
delimiter
readFileObject.close()
delimiter
bin(-4)
delimiter
print(sum(s) / len(s))
delimiter
set(l1).intersection(l2)
delimiter
a_string.encode(encoding)
delimiter
ranges.append((4, 10))
delimiter
dot(Phi, R)
delimiter
[sublist for sublist in list_ if sublist[1] != 1]
delimiter
my_data.append(line)
delimiter
file.seek(0)
delimiter
pygame.sprite.spritecollide(hook, fish, False, pygame.sprite.collide_circle)
delimiter
time.sleep(1)
delimiter
d += timedelta(days=inc)
delimiter
thread.start()
delimiter
self.ax.set_autoscaley_on(True)
delimiter
app.exec_()
delimiter
print(msg.get_payload())
delimiter
a, b = [], []
delimiter
np.vstack([a, b])
delimiter
a[0:1][0] = 4
delimiter
tuples = [(freq, word) for word, freq in D.items()]
delimiter
x + 1
delimiter
a[:, (1)] = -1
delimiter
print(numpy.array_equal(new_data, output))
delimiter
canvas.itemconfigure(cwid, width=wi, height=hi)
delimiter
self.button.grid(row=1, column=0, sticky=W)
delimiter
sys.stdin = sys.__stdin__
delimiter
rdd.groupByKey().mapValues(lambda x: sum(x) / len(x)).collect()
delimiter
print(scipy.optimize.brentq(f, 0.0, 100.0, args=(77.0 / 27.0, 1.0, 1.0, 10.0)))
delimiter
a, b = int(a), int(b)
delimiter
df = pd.DataFrame(delimit)
delimiter
t = datetime.timedelta(seconds=1)
delimiter
queens = [(i, random.randint(1, 8)) for i in range(1, 9)]
delimiter
cv.SetCaptureProperty(camcapture, cv.CV_CAP_PROP_FRAME_HEIGHT, 720)
delimiter
a.newMethod = newMethod.__get__(a, A)
delimiter
thread.start()
delimiter
file.readline()
delimiter
df.iat[0, 0]
delimiter
widget.setLayout(layout)
delimiter
Thread(target=recv).start()
delimiter
()
delimiter
func()
delimiter
len(max(tup, key=len))
delimiter
logger.setLevel(level)
delimiter
df.plot(ax=axs, alpha=0.7)
delimiter
next_num = cur.fetchone()[0]
delimiter
session_id = hismgr.get_last_session_id()
delimiter
data = cursor.fetchone()
delimiter
[gu(i) for i in range(len(uo))]
delimiter
template.render(context)
delimiter
a = numpy.load(memfile)
delimiter
dir(__builtins__)
delimiter
result.extend(literal_eval(line.strip()))
delimiter
b[sort_indices, static_indices[1], static_indices[2]]
delimiter
sample.save()
delimiter
divisibleBySeven = [num for num in inputList if meetsCondition(num)]
delimiter
print(d[keyList[i - 1]])
delimiter
fooarray = numpy.zeros((N, M))
delimiter
deletep_list[idx]
delimiter
line = proc.stdout.readline()
delimiter
zlib.decompress(inf, 16 + zlib.MAX_WBITS)
delimiter
ecb()
delimiter
df.iloc[last - 2:last + 1]
delimiter
ax = plt.subplot(111)
delimiter
print(fmax, pinf, ninf, fnan)
delimiter
fout.write(f.getvalue())
delimiter
chromosome2 = [1, 1, 2, 1, 0]
delimiter
f[i] += 1
delimiter
l[1] = 5
delimiter
G.add_nodes_from(L4)
delimiter
my_new_list = list(my_set)
delimiter
m2[:, (1)] > 10
delimiter
data = np.vstack((data, (np.ones(data.shape[0]) * num).reshape(-1, 1)))
delimiter
df_two.show()
delimiter
main()
delimiter
foo.save()
delimiter
hops.insert(0, response.geturl())
delimiter
pygame.mixer.music.load(soundfile)
delimiter
driver = webdriver.Chrome()
delimiter
print(binascii.hexlify(x))
delimiter
user.save()
delimiter
list_one.insert(2, list_two)
delimiter
sizer.Add(self.grid, 1, wx.EXPAND)
delimiter
no_vow(seq, index + 1)
delimiter
image = cv2.imread(imagepath)
delimiter
dirname1 = os.path.basename(dir)
delimiter
writer.commit()
delimiter
unittest.TextTestRunner(verbosity=2).run(suite)
delimiter
points[index]
delimiter
os.fdopen(fd, *args, **kwargs)
delimiter
[x for x in pattern.split(s) if x]
delimiter
plt.show()
delimiter
df = pd.DataFrame(list(cursor))
delimiter
sizer = wx.BoxSizer(wx.VERTICAL)
delimiter
hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
delimiter
self.root.after(1000, self.circle)
delimiter
sorted_d = OrderedDict(zip(sorted_keys, [d[k] for k in sorted_keys]))
delimiter
obj._meta.concrete_model._meta.model_name
delimiter
mask = np.isnan(arr)
delimiter
zip_longest(fillvalue=fillvalue, *args)
delimiter
z.close()
delimiter
window.setGeometry(0, 0, 400, 200)
delimiter
print(min((f(i, j), i, j) for i in l for j in l))
delimiter
df1.info()
delimiter
b.append([begin, end])
delimiter
server.shutdown()
delimiter
sys.exit(app.exec_())
delimiter
act.triggered.connect(self.on_triggered)
delimiter
ax.plot_surface(x_surf, y_surf, z_surf, cmap=cm.hot, alpha=0.2)
delimiter
L.sort(lambda x, y: cmp(x.name, y.name) or -cmp(x.year, y.year))
delimiter
arrows(0, 0, 1, 1)
delimiter
lines = (line for line in f if line.strip())
delimiter
[y for x in lst for y in (x if isinstance(x, tuple) else (x,))]
delimiter
sys.exit()
delimiter
dt = datetime.fromtimestamp(ts, tz)
delimiter
X[np.ix_(np.where(mask1)[0], np.where(mask2)[0])]
delimiter
ax.set_xticks(list(range(len(g))))
delimiter
process.terminate()
delimiter
shutil.copyfile(src, dest)
delimiter
datetime.timedelta(seconds=seconds)
delimiter
data[np.isnan(data)] = dfrand[np.isnan(data)]
delimiter
c.sort(axis=1)
delimiter
func2(innerfunc)
delimiter
parts = splitparts.split(match.group(2))
delimiter
socket.inet_pton(socket.AF_INET, address)
delimiter
p[pair[1]] += 1
delimiter
y.shape.eval()
delimiter
handles, labels = ax1.get_legend_handles_labels()
delimiter
self.setLayout(hbox)
delimiter
df1.values / df2[df1.columns].values
delimiter
ax.plot([2, 2, 2])
delimiter
log.setLevel(logging.INFO)
delimiter
column(A, 1)
delimiter
X = np.zeros((100, 100, 100))
delimiter
setup2 = dict(setup1, param1=val10, param2=val20)
delimiter
a2.ravel()[:] = np.array(ll)
delimiter
show_svg()
delimiter
lines = f.readlines()
delimiter
sizer.Add(self.ultimateList, 1, flag=wx.EXPAND)
delimiter
fig, ax = plt.subplots()
delimiter
[n] = set(sum(sl) for sl in L)
delimiter
heapq.heappush(heap, (-prod, n, n))
delimiter
ax1 = fig.add_subplot(211)
delimiter
time.sleep(1.0)
delimiter
Decimal(0.5)
delimiter
print(x.name, x.hometown.name, x.hometown.id)
delimiter
sys.getdefaultencoding()
delimiter
sum(f(x) for f in funcs)
delimiter
self.modules
delimiter
a[a < 0] += 1
delimiter
hist, bin_edges = np.histogram(a, bins=bins)
delimiter
timeit(hugeequal1, hugeequal2, 10000)
delimiter
output = p.communicate(input)[0]
delimiter
b[i] = a[i]
delimiter
solve(M * x + N * y, x)
delimiter
deletemylist[:2]
delimiter
plt.show()
delimiter
csv_writer = csv.DictWriter(csv_file, headers)
delimiter
soup = BeautifulSoup(urllib.request.urlopen(url).read())
delimiter
pprint.pprint(result)
delimiter
df.min(1)
delimiter
resp = br.open(url)
delimiter
root.rowconfigure(0, weight=1)
delimiter
s.connect((HOST, PORT))
delimiter
doctest.testmod()
delimiter
inspect.getgeneratorstate(gen)
delimiter
locals().update(mydict)
delimiter
avg = tot / ((data.shape[0] - 1) * data.shape[0] / 2.0)
delimiter
np.dot(b, a)
delimiter
df.drop(cols, inplace=True, axis=1)
delimiter
text.split(a)[-1].split(b)[0]
delimiter
pool.join()
delimiter
[(s, s1.index(s), s2.index(s)) for s in maximal]
delimiter
[p for p in itertools.product(x, repeat=2)]
delimiter
pdb.Pdb.__init__(self, nosigint=True)
delimiter
p2.communicate()
delimiter
list = [i for i in stuff]
delimiter
sys.exit(app.exec_())
delimiter
newlst.append(int(i))
delimiter
fmt.format(**d)
delimiter
list_one.extend(list_two)
delimiter
ds_dt = np.sqrt(dx_dt * dx_dt + dy_dt * dy_dt)
delimiter
earth.circle(150, 2)
delimiter
sys.stdout.write(line)
delimiter
os.symlink(os.path.realpath(sys.argv[0]), exe_install_path)
delimiter
output[0]
delimiter
self._list[i][1]
delimiter
self.set_picture(picture)
delimiter
data = bytearray(f.read())
delimiter
type.__init__(cls, name, bases, d)
delimiter
sys.stdout.flush()
delimiter
nums = list(range(1000000))
delimiter
image = image.resize((width_new, height_new))
delimiter
result = [item for sublist in l for item in sublist]
delimiter
new_dict = defaultdict(dict)
delimiter
b = tf.add(a, a).eval()
delimiter
ax.set_ylim([-2, 2])
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
newcameramtx, roi = cv2.getOptimalNewCameraMatrix(mtx, dist, (w, h), 1, (w, h))
delimiter
scipy.stats.hypergeom.sf(0, N, M, Q)
delimiter
s.prompt()
delimiter
info.setLevel(logging.INFO)
delimiter
btn.grid(column=1, row=1)
delimiter
func()
delimiter
fake_datetime = flexmock(now=lambda : datetime(year=2012, month=12, day=12))
delimiter
f.seek(55)
delimiter
found = word in file.read().split()
delimiter
isinstance(x, X)
delimiter
plt.figure(i)
delimiter
root.mainloop()
delimiter
timer2.start()
delimiter
main()
delimiter
fig = plt.figure()
delimiter
print(root.winfo_geometry())
delimiter
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
delimiter
ax.set_extent([4, 16, 47, 56], ccrs.PlateCarree())
delimiter
self[key].append(value)
delimiter
draw.text((10, 10), unicode_text, font=unicode_font, fill=font_color)
delimiter
os.kill(int(processId), signal.SIGTERM)
delimiter
df
delimiter
tmp.append(chr(d))
delimiter
xedges, yedges = np.meshgrid(xedges[:-1], yedges[:-1])
delimiter
mylist[:] = []
delimiter
print(priv.private_decrypt(ctxt, RSA.pkcs1_oaep_padding))
delimiter
Person.query().filter(Person.guilds == self.key)
delimiter
[(s[0], s[1]) for s in (s.split() for s in strings)]
delimiter
path_list[0] = path_list[0][0]
delimiter
print(i, j, k, v)
delimiter
np.ma.MaskedArray(x, mask)
delimiter
plt.plot(x, y)
delimiter
[i.value for i in d]
delimiter
fig = plt.figure()
delimiter
b = do_something(a, b)
delimiter
x = [True, True, True, True]
delimiter
self.window.clear()
delimiter
sys.exit(app.exec_())
delimiter
print(root, dirs, files)
delimiter
self.f.writeframes(output)
delimiter
logging.getLogger().addHandler(handler)
delimiter
print(key, sum(d[key]) / len(d[key]))
delimiter
process.start()
delimiter
zip_safe = False
delimiter
mean(arr[k + 1:n - k])
delimiter
hax2.set_position([0.1, 0.1, 0.8, 0.8])
delimiter
plt.legend()
delimiter
a = np.array([1.0, 2, 6, 2, 1, 7])
delimiter
do_the_stuff(key, value)
delimiter
sheet1.write(i, 1, e)
delimiter
f.seek(-4, 2)
delimiter
os.setsid()
delimiter
model = model.fit(X_train, y_train)
delimiter
logger.addHandler(handler)
delimiter
br.load(url)
delimiter
min(allowedList, key=sortedList.index)
delimiter
fig, axes = plt.subplots(nrows=4, sharex=True)
delimiter
m = re.match(regex, line)
delimiter
s.bind((host, port))
delimiter
ax1 = plt.subplot2grid((1, 1), (0, 0))
delimiter
data = []
delimiter
worksheet.write(row, col + 1, item)
delimiter
my_date = date.today() - timedelta(days=days_to_substract)
delimiter
datetime.datetime(t.year, t.month, t.day)
delimiter
np.arange(10)[10::-1]
delimiter
soup = bs4.BeautifulSoup(YOUR_CONTENT)
delimiter
fig, ax = plt.subplots()
delimiter
time.sleep(1)
delimiter
host.set_xlim(0, 2)
delimiter
plt.setp(labels, rotation=0)
delimiter
self.root.mainloop()
delimiter
foo = bar(foo)
delimiter
browser = mechanize.Browser()
delimiter
gb1.assign_to_a([1, 2])
delimiter
plt.close(fig)
delimiter
df2 = pd.concat([df] * 10000)
delimiter
df.groupby(level=0).cumcount()
delimiter
print(os.ttyname(sys.stdin.fileno()))
delimiter
bins.append(int(df.val1.max() + 1))
delimiter
y = np.concatenate((firstvals, y, lastvals))
delimiter
output, err = p.communicate()
delimiter
plt.quiver(X, Y, Z2, width=0.01, linewidth=1)
delimiter
v.iloc[-1]
delimiter
parser = etree.XMLParser(schema=oaischema)
delimiter
plot_events(x, y)
delimiter
sys.exit()
delimiter
b = a.tolist()
delimiter
mytext = self.textEdit.toPlainText()
delimiter
info[0][0] == 1
delimiter
log.setLevel(logging.ERROR)
delimiter
sessionmaker(bind=self.engine, autocommit=True)
delimiter
all(recursively_empty(c) for c in e.getchildren())
delimiter
df = pd.concat([df] * 1000, axis=1)
delimiter
form = MyModelForm(instance=my_record)
delimiter
assert np.all(a == b)
delimiter
req = urllib.request.Request(url, data)
delimiter
(data.T - vector).T
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
np.random.seed(0)
delimiter
ts = pd.Series(zip(*my_list))
delimiter
h.funcB()
delimiter
h.funcC()
delimiter
distance[0][0][0] = 1
delimiter
df[2].plot(ax=axes[1, 0])
delimiter
comp = np.dstack(complist).sum(-1)
delimiter
data = self.request.recv()
delimiter
print(my_string.format(**d))
delimiter
matched = [c for c in cmds if c.startswith(s)]
delimiter
np.unravel_index(np.ravel_multi_index((10, 52), arr2.shape), arr1.shape)
delimiter
print(hb.norm.vmin, hb.norm.vmax)
delimiter
np.split(lst, np.cumsum(sec))
delimiter
self.get_user_from_cookie()
delimiter
time.sleep(0.01)
delimiter
ranges.append((2, 10))
delimiter
r = requests.get(url)
delimiter
array1 = itertools.chain(array1[:-1], array2)
delimiter
r.json()
delimiter
pool = Pool()
delimiter
self.num = self.num + 1
delimiter
lines = f.readlines()
delimiter
django.setup()
delimiter
finalimage = ImageChops.lighter(finalimage, currentimage)
delimiter
[(5, 0), (8, 2)]
delimiter
plt.show()
delimiter
plt.subplot(2, 1, 2)
delimiter
df_test.reindex(idx)
delimiter
list(itertools.islice(fib(), 10))
delimiter
print(np.trapz(counts, bins))
delimiter
gtk.main()
delimiter
plt.show()
delimiter
[k for k, v in sorted(list(dct.items()), key=lambda p: p[1], reverse=True)]
delimiter
pd.read_json(jsonfile, lines=True)
delimiter
main()
delimiter
self.socket.sendall(image_data)
delimiter
print(np.allclose(r[0], k))
delimiter
print(a[i:j])
delimiter
HttpResponse(something)
delimiter
Doc.docimage_set.all()
delimiter
df.columns = pd.to_datetime(df.columns)
delimiter
r = float(s)
delimiter
sheet = book.sheet_by_index(index)
delimiter
np.split(a, [int(0.8 * len(a)), int(0.9 * len(a))])
delimiter
index2 = np.array([[0, 1], [0, 1]])
delimiter
h5file.close()
delimiter
socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
newcols = df.apply(lambdafunc, axis=1)
delimiter
array_of_list_of_tuples = array(list_of_tuples)
delimiter
self.update_clock()
delimiter
np.where(a < b * 10, a * 2, -a)
delimiter
csv_df = csv_df.groupby(csv_df.columns, axis=1).mean()
delimiter
module = sys.modules[func.__module__]
delimiter
self.parent_model.objects.get(pk=resolved.args[0])
delimiter
imgplot = plt.pcolormesh(lum_img, cmap=cmaps.viridis)
delimiter
a = create_matrix(8, 8)
delimiter
pygame.mixer.music.play()
delimiter
h.Do()
delimiter
file.write(line)
delimiter
a.mainloop()
delimiter
args = parser.parse_args()
delimiter
mydict.update(myitem)
delimiter
np.tensordot(gggg, T, axes)
delimiter
Py_INCREF(v)
delimiter
send_file(file_name, as_attachment=True)
delimiter
f.__defaults__
delimiter
result = np.clip(arr, 0, 255)
delimiter
True
delimiter
ax.axis([-0.2, 1.2, -0.2, 1.2])
delimiter
render_to_response(template, context)
delimiter
my_anim = animation.ArtistAnimation(fig, myimages, interval=100)
delimiter
ctypes.string_at(self._buffer, self.size)
delimiter
-autobus
delimiter
query.filter(Cls.field.in_(terms))
delimiter
print(response.url)
delimiter
ax.scatter(xflat, y, z)
delimiter
z = np.array([complex(c.m_x, c.m_y) for c in cells])
delimiter
arr[1, 0]
delimiter
s.groupby(s.shift().notnull().cumsum()).transform(lambda g: g[-1] / g.size)
delimiter
logging.debug(line)
delimiter
urllib.request.install_opener(opener)
delimiter
pprint(ddiff, indent=2)
delimiter
PLT.show()
delimiter
df.query(qry)
delimiter
np.random.shuffle(ones)
delimiter
df.index.values
delimiter
self.hide()
delimiter
foo[1, 2]
delimiter
fig = plt.figure(figsize=(4, 4))
delimiter
a = a[::-1]
delimiter
round_down(10, 10)
delimiter
[j for i in lst for j in (replace_with if i == to_replace else [i])]
delimiter
plt.gca().add_artist(leg2)
delimiter
self.fig.canvas.draw()
delimiter
print(response.url)
delimiter
root = tk.Tk()
delimiter
a[..., (0)].flatten()
delimiter
(a + 1) % 2
delimiter
df = pd.read_sql(querystring, cnxn, params=orders)
delimiter
print(time.localtime())
delimiter
print(tostring(root))
delimiter
fig = plt.figure()
delimiter
self.glade.connect_signals(self)
delimiter
np.linalg.norm(x - y) < np.linalg.norm(sx + sy)
delimiter
ax1.plot(t, s)
delimiter
a = df.iloc[:, 1:]
delimiter
ax = plt.subplot(111, polar=True)
delimiter
data = render_template(path, **context)
delimiter
wordcount = Counter(file.read().split())
delimiter
transport = ssh.get_transport()
delimiter
s.get(url)
delimiter
writer.save()
delimiter
print([l[0].strip() for l in re_data_fields.findall(line)])
delimiter
retcode = p.wait()
delimiter
ZipFile.namelist()
delimiter
sys.stdout = sys.__stdout__
delimiter
x = [0, 1, 0, 1, 0, 0, 0, 0]
delimiter
A = csr_matrix((data, (row, col)))
delimiter
self._socket.sendto(message, self._dest)
delimiter
print(child.tag, child.text)
delimiter
self.render_template([template], **context)
delimiter
TestApp().run()
delimiter
im.crop((0, 0, width, l_start_y + 2)).save(sys.argv[1])
delimiter
my_method_name()
delimiter
msg.attach(img)
delimiter
main()
delimiter
Base.metadata.create_all(engine)
delimiter
self.submitButton.grid()
delimiter
im2.show()
delimiter
temp()
delimiter
xvals = np.arange(beginx, endx + 1)
delimiter
yvals = np.arange(beginy, endy + 1)
delimiter
a = numpy.random.rand(N)
delimiter
foo(a)
delimiter
logger.setLevel(logging.DEBUG)
delimiter
MyModel2.mymodel1
delimiter
xmin, xmax = min([i.min() for i in xs]), max([i.max() for i in xs])
delimiter
l = sorted(d.keys())
delimiter
self.showMaximized()
delimiter
plt.show()
delimiter
parser = argparse.ArgumentParser()
delimiter
root.lift()
delimiter
index = MyModel.objects.filter(sortField__lt=myObject.sortField).count()
delimiter
l.remove(i)
delimiter
self.put()
delimiter
people.groupby(mapping).sum()
delimiter
data = json.loads(response_data)
delimiter
row = cursor.fetchone()
delimiter
print(x)
delimiter
finder1.score_ngrams(bigram_measures.pmi)
delimiter
Thread.__init__(self)
delimiter
book = xlrd.open_workbook(filename)
delimiter
ranges.append((5, 10))
delimiter
ax.scatter(xs, ys, zs)
delimiter
frame.pack()
delimiter
unicode_list = [chr(i) for i in range(sys.maxunicode)]
delimiter
dsn = cx_Oracle.makedsn(ip, port, SID)
delimiter
print(user.columns.name.type.length)
delimiter
print(numbers, sum(numbers))
delimiter
df.columns.tolist()
delimiter
sns.pairplot(df)
delimiter
decimal.Decimal(x).to_eng_string()
delimiter
json.dumps(d.isoformat())
delimiter
aw2.redraw_plot()
delimiter
numpy.__version__
delimiter
aapl_200ma.plot(legend=True)
delimiter
site.close()
delimiter
print(resp.read())
delimiter
fp = webdriver.FirefoxProfile()
delimiter
pd.isnull(np.array([np.nan, 0], dtype=float))
delimiter
dlg.Destroy()
delimiter
zip_longest(fillvalue=fillvalue, *args)
delimiter
i, j = np.meshgrid(np.arange(N), np.arange(N))
delimiter
accum0.append(cc0)
delimiter
num = np.sum(np.abs(diffs) < some_value)
delimiter
print(pd.DataFrame(result, df.index, df.columns))
delimiter
odds.append(i)
delimiter
np.kron(a, np.ones((blockSize, blockSize)))[:rows, :cols]
delimiter
time.sleep(random.randint(1, 4))
delimiter
letter_count = dict(zip(string.ascii_lowercase, [0] * 26))
delimiter
s.diff()
delimiter
server.close()
delimiter
data = np.random.randint(25, size=(4, 4))
delimiter
a[:, (i)]
delimiter
calendar.setdefault(date, []).append(event)
delimiter
im = numpy.array(img)
delimiter
f.seek(0, 0)
delimiter
__import__(module)
delimiter
plt.set_cmap(cmaps.viridis)
delimiter
my_dict[k].append(dict2[k])
delimiter
A()
delimiter
pool = multithreading.Pool(1)
delimiter
plt.gca().add_patch(cir)
delimiter
SettableRLSD = TRUE
delimiter
MKTYPE2(Stitcher)
delimiter
sys.stdout.write(char)
delimiter
df
delimiter
enc.transform([[0, 1, 1]]).toarray()
delimiter
newNums = (i for i, x in enumerate(nums) if x == 12)
delimiter
ssh = paramiko.SSHClient()
delimiter
screen.blit(newGameButton, (button_x, button_y))
delimiter
data = f.read()
delimiter
head, tail = (lambda x: (x[0], x[1:]))(my_func())
delimiter
datetime.datetime.fromtimestamp(1004260000)
delimiter
res.append(l)
delimiter
s.cookies.set_policy(BlockAll())
delimiter
t.timeit(5)
delimiter
gibberish(10)
delimiter
np.mean(self.predictions_, axis=0)
delimiter
nk -= 1
delimiter
zipped_file.seek(0)
delimiter
output[-1].append(item)
delimiter
m.group()
delimiter
print(result)
delimiter
os.kill(-self.proc.pid, signal.SIGKILL)
delimiter
a = list(range(10000, 20000))
delimiter
print(sys.path)
delimiter
the_file.close()
delimiter
x.argmin(axis=1)
delimiter
False
delimiter
result = solve((x + I * y) ** 2 - z, (x, y))
delimiter
d.update(makedict(elem))
delimiter
fig = pylab.figure()
delimiter
sum(v[idx] for k, v in stats.items() if k[ikey] == keyv)
delimiter
mu = np.mean(array)
delimiter
ax = fig.add_subplot(211)
delimiter
pipeB.send(20)
delimiter
sp.coo_matrix((C, coords), (a.shape[0], b.shape[1]))
delimiter
redis.StrictRedis(connection_pool=connection_pool)
delimiter
self.results = pandas.concat(frames)
delimiter
ax.set_xlim(0, n_pts)
delimiter
c_float_p = ctypes.POINTER(ctypes.c_float)
delimiter
ax.set_xlim(0, 255)
delimiter
plt.contourf(X, Y, Z)
delimiter
[1, 2, 0, 0, 0]
delimiter
engine.start()
delimiter
sns.despine()
delimiter
pkt = Ether() / IP() / TCP() / payload
delimiter
self.lock.acquire()
delimiter
print(df)
delimiter
sys.stdin = Peeker(sys.stdin)
delimiter
Clock.schedule_once(self.create_webview, 0)
delimiter
m, n = map(int, input().split())
delimiter
db.session.add(region)
delimiter
data.seek(0)
delimiter
pygame.quit()
delimiter
float(str)
delimiter
a[i] += 1
delimiter
server.starttls()
delimiter
os.kill(-self.proc.pid, signal.SIGTERM)
delimiter
ssh.close()
delimiter
time.sleep(4)
delimiter
df_c.ix[df_b.index] = df_b
delimiter
ax[0].legend()
delimiter
self.render_to_response(context)
delimiter
assert not self.broken
delimiter
w = csv.DictWriter(f, list(my_dict.keys()))
delimiter
now_epoch = time.time()
delimiter
coo = [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0)]
delimiter
notifier.loop()
delimiter
ax = fig.add_subplot(111)
delimiter
ids_list = [item[0] for item in cursor.fetchall()]
delimiter
points.append((x, y))
delimiter
print(set(chain(*array)))
delimiter
numbers = zip(*data)
delimiter
w.show()
delimiter
a = [a.ix[i] for i in a.index if sorted1[i] < sorted2[i]]
delimiter
z2[i, list(range(z2.shape[1]))]
delimiter
sorted(map(sorted, sets), key=lambda x: (len(x), x))
delimiter
o.close()
delimiter
smtp.quit()
delimiter
self.grid()
delimiter
data.rename(columns=str.lower)
delimiter
self.hello()
delimiter
time.sleep(1)
delimiter
stream.flush()
delimiter
my_list.append(map(int, ints))
delimiter
csv_out.writerow(row)
delimiter
setattr(user, key, value)
delimiter
np.where(np.array([0, 0]))
delimiter
A[[0, 1]].shape
delimiter
response = urllib.request.urlopen(url)
delimiter
p.start()
delimiter
np.arange(N).reshape(shp).transpose(np.arange(len(shp))[::-1]).ravel()
delimiter
print(most_common_words)
delimiter
ax.clabel(terr, fontsize=9, inline=1)
delimiter
d1 - d2.values
delimiter
context.driver.switch_to.alert.accept()
delimiter
sys.stdout = sys.__stdout__
delimiter
earth.circle(150, 1)
delimiter
assert np.allclose(results[1], results[2])
delimiter
ax.set_xticks(ind + width)
delimiter
self.fileobj.close()
delimiter
db.commit()
delimiter
my_list = pickle.load(f)
delimiter
[x for x in the_list if the_list.count(x) == 1]
delimiter
df
delimiter
QDialog.__init__(parent)
delimiter
self.Show()
delimiter
res = t.render(items=items)
delimiter
df.replace(replacements, regex=True, inplace=True)
delimiter
plt.figure()
delimiter
frame.grid(row=0, column=0, sticky=N + S + E + W)
delimiter
defaultdict.__init__(self, list)
delimiter
writer.save()
delimiter
chr(int(match.group(1), 16))
delimiter
self.children.append(obj)
delimiter
tar.getmembers()
delimiter
cherrypy.config.update(server_config)
delimiter
pygame.mixer.music.play()
delimiter
sum(atuple)
delimiter
parent.kill()
delimiter
datetime.date(2016, 6, 9),
delimiter
map(int, list(bin(n)[2:]))
delimiter
obj.update(add_obj)
delimiter
okay_items = [x for x in all_items if not regex.match(x)]
delimiter
print(text_re)
delimiter
logging.basicConfig(format=FORMAT, level=logging.INFO)
delimiter
self.__add__(-other)
delimiter
m.transpose(1, 2, 0)[0, 1]
delimiter
admin.site.register(question, QuestionAdmin)
delimiter
Potato(**validated_data)
delimiter
print(json.dumps(d, indent=4))
delimiter
t1 = threading.Thread(target=foo)
delimiter
[([_] + list(itertools.takewhile(lambda x: x != 2, a))) for _ in a]
delimiter
fig.subplots_adjust(right=0.55)
delimiter
plt.show()
delimiter
process.kill()
delimiter
print(foofile.read())
delimiter
root.config(menu=menubar)
delimiter
plt.ylim(max(y) + 0.5, min(y) - 0.5)
delimiter
type(1)
delimiter
m_date = datetime.datetime(Yr, Mo, Day)
delimiter
s.count(s[0]) == len(s)
delimiter
move_to_root_folder(root_path, os.path.join(cur_path, filename))
delimiter
callee()
delimiter
app.logger.addHandler(handler)
delimiter
writer.writerows(data)
delimiter
count_2.most_common(2)
delimiter
plt.show()
delimiter
element = ElementTree.fromstring(line)
delimiter
user_id = Column(Integer, ForeignKey(User.id), primary_key=True)
delimiter
df[df.User_ID.isin(counts[counts > 1].index)]
delimiter
sns.plt.show()
delimiter
ax1.xaxis.set_major_locator(mticker.MaxNLocator(10))
delimiter
print(neighbors(A, 1, 0))
delimiter
text.set_transform(fig.transFigure)
delimiter
payload.set_verdict(nfqueue.NF_DROP)
delimiter
answer.append((apos, bpos))
delimiter
logging.Handler.__init__(self)
delimiter
dt + timedelta(days=7 - dt.weekday())
delimiter
sympy.sympify(r)
delimiter
[max(islice(map(abs, array), i, i + 4)) for i in range(0, len(array), 4)]
delimiter
self._on_change()
delimiter
np.where(a == a.max())
delimiter
plt.xlim((1e-12, 1))
delimiter
list(it.starmap(op.sub, it.izip(a[1:], a)))
delimiter
len(pytz.all_timezones)
delimiter
handler.setLevel(logging.DEBUG)
delimiter
self[key]
delimiter
(dt - epoch).total_seconds() * 1000.0
delimiter
myadd = lambda xs, ys: tuple(x + y for x, y in zip(xs, ys))
delimiter
narr
delimiter
name = os.path.realpath(os.path.join(root, name))
delimiter
d = lisp(d[0])
delimiter
print((first_num, first_arrangement))
delimiter
self.ax.grid()
delimiter
x.append(y)
delimiter
self.ssh.close()
delimiter
current_time = datetime.datetime.now()
delimiter
f(a, b)
delimiter
df.apply(lambda S: S.append(dm))
delimiter
train_op = tf.train.GradientDescentOptimizer(0.01).minimize(cost)
delimiter
self.comboBox_2.addItem(QIcon(pixmap), text)
delimiter
cursorclass = MySQLdb.cursors.DictCursor
delimiter
server.starttls()
delimiter
result = list(set(s for s in stringlist if len(s) == ml))
delimiter
view_func(request, *args, **kwargs)
delimiter
key.get_contents_to_file(f, headers)
delimiter
print(rf.predict(testdataset[-1:]))
delimiter
newdate = datetime.datetime(*values)
delimiter
f(f, *args, **kwds)
delimiter
pprinttable([data, data])
delimiter
[dict(zip(list_of_keys, row)) for row in spamreader]
delimiter
array.pop(0)
delimiter
print(paramiko.__version__)
delimiter
self.conn.commit()
delimiter
print(df_concat.median())
delimiter
print(soup)
delimiter
file.writelines(input_lines)
delimiter
my_copy = copy.deepcopy(my_dict)
delimiter
assert f([[0, 100], [9, 10], [12, 90]]) == [[9, 10], [12, 90]]
delimiter
self.mplvl.setLayout(self.vLayout)
delimiter
pl.show()
delimiter
x = conn.cursor()
delimiter
borderseg, X, labels, Xslice
delimiter
time.sleep(1)
delimiter
row_result.append(row_separator)
delimiter
sys.exit(e)
delimiter
logging.Handler.__init__(self)
delimiter
np.transpose(arr, [2, 0, 1]).shape
delimiter
-47.5, -10.4, 19.1, 25.9, 18.9, -10.4, -2.1, -47.6, 41.8, -12.1, -15.7, 12.1, -11.0, -0.6
delimiter
window.show()
delimiter
func(*args, **kwargs)
delimiter
(df == 0).all()
delimiter
loop.run_until_complete(task)
delimiter
a[:, (0)].max()
delimiter
os.chdir(folder)
delimiter
L.grid(row=i, column=j)
delimiter
np.sqrt((q * q.T).sum())
delimiter
words = l.split()
delimiter
str(theint)
delimiter
[i for i, j in takewhile(lambda i_j: i_j[0] == i_j[1], zip(list1, list2))]
delimiter
window._master = tk.Frame(window)
delimiter
s.add(val)
delimiter
os.dup2(so.fileno(), sys.stdout.fileno())
delimiter
print(driver.title)
delimiter
x[2:].sort()
delimiter
ch = logging.StreamHandler()
delimiter
next(reader)
delimiter
plt.colorbar(heatmap)
delimiter
c.writerow(sh.row_values(r))
delimiter
plt.show()
delimiter
json.dump(jsonData, outfile, sort_keys=True, indent=4, ensure_ascii=False)
delimiter
model1.py
delimiter
now = datetime.datetime.now()
delimiter
plt.clf()
delimiter
fd.close()
delimiter
urlobj = urllib.request.urlopen(url)
delimiter
A.__init__(self, *a, **k)
delimiter
res.append(value)
delimiter
window = pygame.display.set_mode((WIDTH, HEIGHT))
delimiter
session.add(marten)
delimiter
session.add(shrew)
delimiter
session.add(loris)
delimiter
Newlist.append(x)
delimiter
d.setdefault(k, []).append(v)
delimiter
base64.urlsafe_b64decode(enc)
delimiter
a, b
delimiter
mock_boo_obj = mock.Mock()
delimiter
np.ones(10, dtype=bool)
delimiter
print(as_list)
delimiter
np.random.seed(42)
delimiter
value_sums = np.bincount(idx, value.ravel())
delimiter
yaml.load(s)
delimiter
random.choice([left, right]), random.choice([top, bottom])
delimiter
f.quit()
delimiter
layout.addWidget(self.list)
delimiter
plt.tight_layout()
delimiter
pd.Series(date_rng.format())
delimiter
z = pd.read_csv(io.StringIO(x))
delimiter
obj.__class__ = newclass
delimiter
ax.set_yticks(list(range(1, 5)))
delimiter
self.panel.SetFocus()
delimiter
sock.close()
delimiter
nax.set_yticks(tcks)
delimiter
{(1): 2, (2): 1}
delimiter
func(*args, **kwargs)
delimiter
df.POINTS = (df.POINTS * (df.POINTS == df.DATA)).fillna(0)
delimiter
tree = et.fromstring(xml)
delimiter
username = db.Column(db.String(20), unique=True)
delimiter
print(sys.path)
delimiter
fig, ax = plt.subplots()
delimiter
np.where(np.isnan(a), ma.array(a, mask=np.isnan(a)).mean(axis=1), a)
delimiter
do_something()
delimiter
self.generator.__len__()
delimiter
json.dump(row, jsonfile)
delimiter
plt.ion()
delimiter
sum(l)
delimiter
dest.close()
delimiter
fig = pl.figure(figsize=(6, 6))
delimiter
hist2d(xval, yval, bins=1000, range=np.array([(-6, 6), (-4.5, 4.5)]))
delimiter
next(i for i in range(100000) if i == 1000)
delimiter
self.command()
delimiter
evens = (i for i in range(limit) if i % 2 == 0)
delimiter
text_widget.index(Tkinter.INSERT)
delimiter
nbrs.kneighbors(X)
delimiter
print(tensor[0].eval())
delimiter
self.frame.focus_set()
delimiter
set([l[0] for l in a_list])
delimiter
im.seek(im.tell() + 1)
delimiter
my_input.ask()
delimiter
p.stdout.close()
delimiter
inverted_image = PIL.ImageOps.invert(image)
delimiter
writer.writerow(row)
delimiter
np.tile(a, (6, 1))
delimiter
merged_dict = {k: [d.get(k, np.nan) for d in all_dicts] for k in keys}
delimiter
list(takewhile(lambda i_j: i_j[0] == i_j[1], zip(list1, list2)))
delimiter
raise argparse.ArgumentTypeError(msg)
delimiter
X_train, X_test, y_train, y_test = ttsplit(X, y, test_size=0.1, random_state=0)
delimiter
out = np.dot(arr_one, arr_two.T)
delimiter
msg.attach(img)
delimiter
txttime = os.path.getmtime(os.path.join(root, txt))
delimiter
f[::-1]
delimiter
urllib.request.install_opener(opener)
delimiter
ioloop.IOLoop.instance().run_sync(main)
delimiter
_ranks.append({})
delimiter
print(list(dedupe_adjacent(data)))
delimiter
deletex
delimiter
print(argparse.__dict__)
delimiter
ax = fig.add_subplot(111)
delimiter
plt.subplot(121)
delimiter
somethingThread.start()
delimiter
item.set_rotation(45)
delimiter
Client(*sys.argv[1:]).run()
delimiter
b = np.array([2, 4, 6])
delimiter
bodytext = body.text
delimiter
Session.remove()
delimiter
screen = pygame.display.set_mode((800, 800))
delimiter
print(str(a[1]))
delimiter
book_author.save()
delimiter
session.add(stoat)
delimiter
startupinfo = subprocess.STARTUPINFO()
delimiter
df.shift(2).iloc[:, 4:]
delimiter
dt = datetime.datetime.strptime(s, fmt)
delimiter
a.shape
delimiter
s = SomeClass(bar=1, foo=0)
delimiter
people = Person.objects.filter(employee__in=employee_query)
delimiter
func(*args, **kwargs)
delimiter
list(filter(pred, A))
delimiter
print(f.readlines())
delimiter
self.itemSelectionChanged.connect(self.print_row)
delimiter
a, b = test()
delimiter
token.get_access_token(code)
delimiter
tmp.append(float(line))
delimiter
df
delimiter
re.predict_proba(X_test)
delimiter
new_list = [fruit for fruit in a if fruit not in b]
delimiter
log = logging.getLogger(__name__)
delimiter
a = np.array([[1, 2], [1, 2]])
delimiter
df.eq(0).apply(lambda x: list(df.columns[x]), 1)
delimiter
m.groups(1)
delimiter
y = random.randrange(0, maxy)
delimiter
setattr(self.obj, self.property_names[item], value)
delimiter
os.path.abspath(sys.modules[LocationArtifact.__module__].__file__)
delimiter
p.x, p.y, p[0], p[1]
delimiter
c.nonzero()
delimiter
xs.append(x)
delimiter
(-4) ** 2
delimiter
ax.yaxis.set_ticks(np.arange(0, 100, 10))
delimiter
-rtest - requirements.txt
delimiter
mylist.sort(key=itemgetter(1))
delimiter
self.button.clicked.connect(self.dialog.show)
delimiter
smax.on_changed(update)
delimiter
ax.set_xticklabels(xlabels)
delimiter
love_ctx.add((alice, loves, charlie))
delimiter
ax.set_yticks(np.arange(len(df.index)) + 0.5)
delimiter
sleep(1)
delimiter
x = x - int(x)
delimiter
myset.add(item)
delimiter
b = p.map(func, a)
delimiter
globals()
delimiter
pprint({x: list(range(x)) for x in range(10)})
delimiter
time.sleep(0.001)
delimiter
a.add_child(b)
delimiter
print(ToSI(d))
delimiter
x.bar()
delimiter
sys.path.append(os.getcwd())
delimiter
elevations = json.dumps(data)
delimiter
plt.show()
delimiter
fig.colorbar(cf, cax=cax)
delimiter
print(dpkt.ethernet.Ethernet(packet))
delimiter
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
delimiter
l.append(s[i:i + 10])
delimiter
ax2.set_xticklabels(X2tick_location)
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
a2 = np.array([[4, 5, 6], [7, 8, 9], [1, 1, 1]])
delimiter
y = x.dot(w)
delimiter
do_something_useful()
delimiter
X_max = np.max(X[idx])
delimiter
df = df.swaplevel(0, 1, 1)
delimiter
dfile.write(sfile.read())
delimiter
admin.site.unregister(User)
delimiter
hermes.__loader__
delimiter
self.frame.pack()
delimiter
{k: map_nested_dicts(v, func) for k, v in ob.items()}
delimiter
list_of_ints = [int(i) for i in str(ISBN)]
delimiter
solve(fprime, x)
delimiter
app.mainloop()
delimiter
imarray = numpy.array(im)
delimiter
time.sleep(0.25)
delimiter
random.shuffle(count_list)
delimiter
multiprocessing.Process.__init__(self)
delimiter
self.onThread(self._doSomething)
delimiter
threading.Timer(10, foo).start()
delimiter
cur.execute(query)
delimiter
plt.show()
delimiter
i_take_strings(*s.split())
delimiter
max_idx = l.index(max_val)
delimiter
ax1.legend(bbox_to_anchor=(1.2, 1))
delimiter
colormap_r = ListedColormap(colormap.colors[::-1])
delimiter
name = models.CharField(max_length=50)
delimiter
self.setCentralWidget(self.central)
delimiter
[([x] + p) for x in seqs[0] for p in [[]]]
delimiter
sys.stdout.write(str(result))
delimiter
dict.__setitem__(self, key, value)
delimiter
sys.exit(main(sys.argv[1:]))
delimiter
to_search = {x[0]: x for x in input}
delimiter
r = requests.get(url, stream=True)
delimiter
print(m.groups())
delimiter
fcntl.fcntl(thePipe, fcntl.F_SETFL, os.O_NONBLOCK)
delimiter
self.data = np.array([])
delimiter
smtpserver.starttls()
delimiter
draw = ImageDraw.Draw(im)
delimiter
parsed = rdd.map(json.loads)
delimiter
c.add(o)
delimiter
json.dump(data, fp)
delimiter
rdd = sc.parallelize(np.random.randint(1000000, size=700000))
delimiter
name = models.CharField(max_length=10)
delimiter
sys.exit(0)
delimiter
Foo.bar()
delimiter
time.sleep(0.5)
delimiter
args = parser.parse_args()
delimiter
len(np.unique(array)) > 1
delimiter
select.select([A], [], [])
delimiter
connection = redis.Connection(**kwargs)
delimiter
_location.gsm_location()
delimiter
root = lxml.etree.fromstring(xmlstr)
delimiter
ax.ticklabel_format(useOffset=False)
delimiter
intvals[i - 1:i + 1]
delimiter
fh.seek(offset)
delimiter
get_indices(a, b)
delimiter
True
delimiter
c.set_dashes([(0, (2.0, 2.0))])
delimiter
sorted(dictionary.values())[0]
delimiter
(df == 0).astype(int)
delimiter
get_key(d, 22)
delimiter
np.bincount(A, B)
delimiter
result = random.sample(coo, 2)
delimiter
legend = DraggableLegend(ax.legend())
delimiter
fig = plt.figure()
delimiter
service = get_vision_service()
delimiter
print(df[column])
delimiter
process.crawl(MySpider)
delimiter
self.x1 += self.speed * math.cos(self.bearing)
delimiter
dict.__setitem__(d, new_key, v)
delimiter
print(timedelta(minutes=6 * 60))
delimiter
l = l[:1] + x + l[2:]
delimiter
pool.terminate()
delimiter
f.seek(0, whence=2)
delimiter
list2.append(dict2.get(key))
delimiter
soup = BeautifulSoup(urllib.request.urlopen(url).read())
delimiter
np.bincount(ixs, minlength=mat.shape[0]).dot(mat)
delimiter
min(k for k in d if k > key)
delimiter
draw()
delimiter
self.add_node(destination)
delimiter
list(grouper(2, my_list))
delimiter
arcpy.RefreshTOC()
delimiter
gb1.copy_to_a([1, 2])
delimiter
add.apply_async((1, 4), task_id=i)
delimiter
grid_sizer_1.Add(self.window_1, 1, wx.EXPAND, 0)
delimiter
list(iterateFinitely(lambda x: [x / 2] if x else [], 20))
delimiter
raise NotImplementedError
delimiter
p.start()
delimiter
yz = NNN.mean(axis=0)
delimiter
sys.exit(0)
delimiter
print(audio.info.length)
delimiter
app = QtGui.QApplication([])
delimiter
ao[1:, :] += ai[:-1, :]
delimiter
DataFrame(dict(s1=s1, s2=s2)).reset_index()
delimiter
numbers.append(i)
delimiter
[(5,), (2, 2, 1), (2, 1, 1, 1), (1, 1, 1, 1, 1)]
delimiter
logging.basicConfig(level=logging.INFO)
delimiter
form.save()
delimiter
fullname = os.path.join(path, filename)
delimiter
myline = random.choice(lines)
delimiter
[seq[i:i + n] for i in range(0, len(seq), n)]
delimiter
sum(1 for _ in it)
delimiter
kwargs_new = {k: v for k, v in list(d.items()) if isinstance(k, str)}
delimiter
print([[item.p1, item.p2] for item in uniq])
delimiter
im2 = ax2.plot(image[0:time, (5), (5)])
delimiter
mx = pow(2, 24) - 1
delimiter
map(id, b)
delimiter
result.extend(changecoins)
delimiter
t.cancel()
delimiter
sum(p[0] for p in datapoints[0:5]) / 5.0
delimiter
abort(405)
delimiter
mainwin.show_all()
delimiter
self._base.all()[0]
delimiter
id(x) == foo(x)
delimiter
{{a}}
delimiter
tseries.order()
delimiter
math.sqrt(point[0] ** 2 + point[1] ** 2)
delimiter
f = a ** 2 + x * b ** 2 + y * a * b * np.cos(c) + z * a * b * np.sin(c)
delimiter
out.save(output_path)
delimiter
L[:4]
delimiter
b = Matrix([[2, 2], [2, 2]])
delimiter
x = pd.DataFrame(np.random.randn(20, 5))
delimiter
axes.plot(xs, ys)
delimiter
view_func(request, *args, **kwargs)
delimiter
plt.scatter(x, y, c=x, s=100, cmap=reds)
delimiter
set(l1) & set(l2)
delimiter
nsmallest(4, list(range(len(values))), key=lambda i: values[i])
delimiter
container.grid_rowconfigure(0, weight=1)
delimiter
dis.dis(func)
delimiter
print(os.path.join(root, pathname))
delimiter
file_count = len(files)
delimiter
current_app.login_manager.unauthorized()
delimiter
new_list = []
delimiter
print(node.text)
delimiter
a = input()
delimiter
root = objectify.fromstring(xml_string)
delimiter
years = [x.year for x in your_list]
delimiter
self.configure(width=imagesize[0], height=imagesize[1])
delimiter
HttpResponse(status=200)
delimiter
ax = plt.gca()
delimiter
df_final = pd.concat(pieces, ignore_index=True)
delimiter
print((datetime.date(year, month, day) - datetime.timedelta(1)).isoformat())
delimiter
ssh = paramiko.SSHClient()
delimiter
df
delimiter
print(file_content)
delimiter
{10}.issubset(chain.from_iterable(x))
delimiter
self.worker.beep.connect(self.update)
delimiter
self.clients.append(client)
delimiter
np.put(arr, list(range(len(arr) + num, len(arr))), np.nan)
delimiter
A = np.array([[1, 1, 1], [1, 1, 1], [1, 1, 1]])
delimiter
result.fillna(df1, inplace=True)
delimiter
fig, ax = plt.subplots(nrows=1, ncols=1)
delimiter
bytes([1, 65, 2, 255])
delimiter
conn, addr = s.accept()
delimiter
self.SetSizer(sizer)
delimiter
f.close()
delimiter
id = Column(Integer, primary_key=True)
delimiter
B = copy.deepcopy(A[0])
delimiter
ax = fig.add_subplot(111)
delimiter
e.pack()
delimiter
widget.show()
delimiter
time.sleep(2.0)
delimiter
print(p.stdout.read())
delimiter
df.loc[df[:-1][df.index.month[:-1] != df.index.month[1:]].index]
delimiter
print(zap)
delimiter
plt.show()
delimiter
np.random.shuffle(a.flat)
delimiter
show()
delimiter
listbox = Listbox(master, selectmode=tk.SINGLE)
delimiter
blit_text(screen, text, (20, 20), font)
delimiter
ani = animation.FuncAnimation(fig, animate, frames=10)
delimiter
d = np.repeat(b, a.shape[0], axis=0)
delimiter
proc.communicate()
delimiter
print(os.getcwd())
delimiter
cal_window.set_type_hint(gtk.gdk.WINDOW_TYPE_HINT_DOCK)
delimiter
print(response.content)
delimiter
bits = [int(x) for x in bits[::-1]]
delimiter
entries = dict([(x, y) for x, y in zip(out[::2], out[1::2])])
delimiter
a.wut
delimiter
rdd1.join(rdd2)
delimiter
fn(*args, **kwargs)
delimiter
msg.attach(MIMEText(message))
delimiter
wx.App.__init__(self, False)
delimiter
result.extend(pat.findall(text))
delimiter
maxLen = max(len(p) for p in props)
delimiter
np.array([1, 2]).size
delimiter
self.setLayout(layout)
delimiter
sys.exit(subprocess.call(sys.argv[i:]))
delimiter
htmlDoc.close()
delimiter
plt.show()
delimiter
f.close()
delimiter
con.close()
delimiter
identity = lambda x: [[int(i == j) for i in range(x)] for j in range(x)]
delimiter
[p[0] for p in deck]
delimiter
print(a.headlines.all())
delimiter
sorted(list(kwargs.items()), key=lambda i: i[0])
delimiter
figure(1, figsize=(6, 6))
delimiter
self.appExeCB.addItems(list(self.items.keys()))
delimiter
b_thread.start()
delimiter
{(x * x) for x in range(10)}
delimiter
punto.wkt
delimiter
count = sum(1 for _ in emoticons)
delimiter
groups.append([x[1] for x in g])
delimiter
res = cv2.bitwise_and(img, img, mask=mask)
delimiter
{{post}}
delimiter
func(*args, **kwargs)
delimiter
new_items = [item for item in items if not item.isdigit()]
delimiter
deletedic[k]
delimiter
d = defaultdict(lambda : 1)
delimiter
app.run()
delimiter
result[key] += 1
delimiter
np.datetime64(dt.isoformat())
delimiter
sys.stdout.write(str(tuple[0]))
delimiter
plt.scatter(*zip(*new_points))
delimiter
headers.setContextMenuPolicy(Qt.CustomContextMenu)
delimiter
network.draw()
delimiter
zk.stop()
delimiter
df
delimiter
print(not not r.search(s))
delimiter
a = defaultdict(dict)
delimiter
f()
delimiter
plt.figure(figsize=(8, 6))
delimiter
zip(l, l[1:], l[2:])
delimiter
draw = ImageDraw.Draw(image)
delimiter
time.sleep(0.05)
delimiter
self.header = header
delimiter
ax.patch.set_visible(False)
delimiter
pd.concat(df.xs(d, axis=1) for d in dupes).groupby(level=0, axis=1).mean()
delimiter
C[k] = np.dot(A[k], B[k])
delimiter
self.canvas.scan_dragto(event.x, event.y, gain=1)
delimiter
stream.write(data)
delimiter
np.fromiter(test, dtype=np.int)
delimiter
id(lines), id(ax.lines)
delimiter
facebook_graph = facebook.GraphAPI(oauth_access_token)
delimiter
print(x, y)
delimiter
f.seek(0)
delimiter
False
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
data.columns = data.iloc[0]
delimiter
soup = BeautifulSoup(page)
delimiter
PY_MAJOR, PY_MINOR = sys.version_info[0:2]
delimiter
cv2.drawContours(mask, [largest_area], 0, (255, 255, 255, 255), -1)
delimiter
time.sleep(0.1)
delimiter
pythoncom.PumpWaitingMessages()
delimiter
sys.exit(2)
delimiter
show()
delimiter
print(index, key, value)
delimiter
file.close()
delimiter
df
delimiter
random.randint(0, int((stop - start) / step)) * step + start
delimiter
self.x0 += self.speed * math.cos(self.bearing)
delimiter
smtpserver.starttls()
delimiter
sys.stdout.write(s)
delimiter
(np.arange(n) >= m).astype(int)
delimiter
cause = e.args[0]
delimiter
pd.show_versions(as_json=False)
delimiter
np.dot(copy, onevec)
delimiter
assert list(a.keys()) == list(b.keys())
delimiter
self.panel.Bind(wx.EVT_KEY_UP, self.OnKeyDown)
delimiter
len(list(flatten(mylist)))
delimiter
pdb.Pdb(stdout=sys.__stdout__).set_trace()
delimiter
data = response.read()
delimiter
a.add(1)
delimiter
data = line.split()
delimiter
print(cardsdiscarded)
delimiter
a + [a < 0]
delimiter
sock.close()
delimiter
iph.show2()
delimiter
QObject.__init__(self, parent)
delimiter
frame.append(4)
delimiter
contest = models.ForeignKey(Contest)
delimiter
sign * 2.0 ** (expo - 25) * prec
delimiter
print(tupl.a, tupl.b)
delimiter
pprint(d)
delimiter
table.resizeColumnsToContents()
delimiter
df.loc[start:end]
delimiter
numbers = [random.randint(1, 1000) for x in range(SOMEVERYLARGENUMBER)]
delimiter
x = Counter([-1, -1, -1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0])
delimiter
resulting_list.extend(x for x in second_list if x not in resulting_list)
delimiter
[sorted(sub) for sub in result]
delimiter
x = np.arange(X)
delimiter
ax2 = fig.add_subplot(212)
delimiter
print(unanimous(list(dd.values())))
delimiter
model.save([spark_context], [file_path])
delimiter
root = tk.Tk()
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
db = SQLAlchemy()
delimiter
urlfetch.set_default_fetch_deadline(10)
delimiter
f.close()
delimiter
eventLoopThread.start()
delimiter
seen_models = connection.introspection.installed_models(tables)
delimiter
print(df)
delimiter
myList.append(myList)
delimiter
test.py
delimiter
r = requests.get(url, stream=True)
delimiter
label.grid_remove()
delimiter
print(lines[i])
delimiter
cb.ax.yaxis.set_tick_params(pad=45)
delimiter
do_something()
delimiter
a in (b + c, b - c, c - b)
delimiter
arr = np.array([nbLamps, nbDays], dtype=np.bool)
delimiter
items = [(-value, key) for key, value in list(the_dict.items())]
delimiter
__init__.py
delimiter
print(time.ctime(cdate), os.path.basename(path))
delimiter
models.py
delimiter
B = csr_matrix((data, indices, indptr))
delimiter
EMAIL_USE_SSL = True
delimiter
print(fdist1.most_common(10))
delimiter
opa = pd.concat([pirmas_m, antras_m, trecias_m, ketvirtas_m], axis=1)
delimiter
engine = cherrypy.engine
delimiter
plt.plot(x_new, ffit)
delimiter
ax1 = fig.add_subplot(2, 1, 1)
delimiter
print(p.match(s).groups())
delimiter
input_date.astimezone(current_tz)
delimiter
attr = {}
delimiter
[datetime.datetime(2012, 1, 2, 0, 0)]
delimiter
getattr(o, name)()
delimiter
pad = curses.newpad(PAD_LENGTH, curses.COLS - 1)
delimiter
sys.path
delimiter
[(5 * n) for n in range(1, 10 + 1)]
delimiter
d = {}
delimiter
A = [(A[i] + (0 if i % 2 == 0 else 0.1)) for i in range(len(A))]
delimiter
itertools.chain(iter(self.items.items()), iter(self.people.items()))
delimiter
print(json.dumps(mydata, indent=4))
delimiter
f.flush()
delimiter
map(int, numbers.strip().split())
delimiter
df = pd.read_csv(csv_file)
delimiter
result = df.a.sort_values().apply(lambda x: sorted(x))
delimiter
print(thisRDD.toDebugString())
delimiter
subprocess.Popen(winCMD, stdout=subprocess.PIPE, shell=True)
delimiter
assert f([[0, 100], [0, 10], [11, 20], [15, 40]]) == [[0, 10], [11, 20]]
delimiter
desired_list = map(lambda x__: x__[0], tuple_list)
delimiter
result.append(line)
delimiter
cell_value = int(cell_value)
delimiter
lst2.append([x[0] for x in lst])
delimiter
browser.close()
delimiter
s.close()
delimiter
min(foo, key=float)
delimiter
deletedf.index.name
delimiter
bokeh.io.show(page)
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
fig = plt.figure()
delimiter
client.get(URL)
delimiter
driver = webdriver.Firefox()
delimiter
fig = plt.figure(figsize=(10, 8))
delimiter
f.close()
delimiter
np.tensordot(A, Combinations, [2, 1]).transpose(2, 0, 1)
delimiter
f.axes[2].set_position([0.45, 0.05, 0.05, 0.4])
delimiter
appended_data = pd.concat(appended_data, axis=1)
delimiter
connection = urllib.request.urlopen(url)
delimiter
Session.commit()
delimiter
np.put(arr, list(range(len(arr) + num, len(arr))), np.nan)
delimiter
initcaller()
delimiter
rdd_malformed.flatMap(lambda x: seq_try(json.loads, x)).collect()
delimiter
dict_writer.writerows(toCSV)
delimiter
self.end_headers()
delimiter
app.config.from_object(config_obj)
delimiter
out, err = proc.communicate(open(fn).read())
delimiter
plt.imshow(np.random.randn(10, 10))
delimiter
ax.add_patch(circ)
delimiter
print(data)
delimiter
document.update(**conv_dict_to_update(data))
delimiter
df.index = df.index.droplevel(1)
delimiter
Maemo4Spec()
delimiter
fig = plt.figure(figsize=(8, 4))
delimiter
table.sort(reverse=True, key=Team.getName)
delimiter
prob = clf.predict_proba(X_test)[:, (1)]
delimiter
time.sleep(5)
delimiter
r, g, b = map(lambda x: x / 255.0, [r, g, b])
delimiter
average_timedelta = sum(timedeltas, datetime.timedelta(0)) / len(timedeltas)
delimiter
imarray.shape
delimiter
writer = csv.writer(f)
delimiter
target.update(request, *args, **kwargs)
delimiter
cv2.rectangle(img, top_left, bottom_right, 255, 5)
delimiter
screen.blit(my_image, another_position)
delimiter
[(x + y) for x, y in zip(a, b)]
delimiter
lines = f.readlines()
delimiter
br.show()
delimiter
processes.append(Popen(command, stdout=pipe, close_fds=True))
delimiter
ax2 = fig.add_subplot(2, 1, 2)
delimiter
logger.setLevel(logging.NOTSET)
delimiter
a = np.random.rand(size)
delimiter
self.layoutChanged.emit()
delimiter
path.path(mypath).splitall()[0]
delimiter
b in l[l.index(a) + 1:]
delimiter
a[i1, i2]
delimiter
layout.addWidget(self.table)
delimiter
chunk = np.genfromtxt(f, max_rows=chunksize, *args, **kwargs)
delimiter
deletedict_[key]
delimiter
server.bind(sockfile)
delimiter
fig = plt.figure()
delimiter
list(map(add, [2, 2]))
delimiter
cls.method_two()
delimiter
fs.noteoff(0, 76)
delimiter
p.stdin.close()
delimiter
s = requests.Session()
delimiter
ax1.plot([x1, x2], [y1, y2])
delimiter
x = np.linspace(0, 20, 1000)
delimiter
setup.py
delimiter
print(str(a[2]))
delimiter
now = datetime.datetime.now()
delimiter
print(df)
delimiter
x, y
delimiter
np.where(a > b * 10, a * 2, -a)
delimiter
rec.array([[40.0, 140.0], [50.0, 150.0], [60.0, 160.0]], dtype=float64)
delimiter
gca().get_lines()[n].get_xydata()
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
df
delimiter
f.flush()
delimiter
cb = fig.colorbar(im, ticks=LogLocator(subs=list(range(10))))
delimiter
my_svr.fit(x_training, y_trainr)
delimiter
msg.get_payload()
delimiter
plt.show()
delimiter
print(ET.tostring(newroot))
delimiter
root.columnconfigure(1, weight=1)
delimiter
file.close()
delimiter
print(bool(pattern.search(byte)))
delimiter
sps.coo_matrix((data, (rows, cols)), shape=(x.shape[0], theta.shape[0]))
delimiter
ax1.set_xlim(1, 6)
delimiter
mail.starttls()
delimiter
df.idxmin(1)
delimiter
good_html = tree.prettify()
delimiter
str(unichar)
delimiter
result = [[k, da[k] + db[k]] for k in set(da.keys()).intersection(list(db.keys()))]
delimiter
result.append(key)
delimiter
self.panel_sizer.Add(self.tin2, 0, wx.EXPAND)
delimiter
threading.Thread.__init__()
delimiter
frame.append(2)
delimiter
griddata.addSample([X.ravel()[i], Y.ravel()[i]], [0])
delimiter
arr = np.array([5, 4, -2, 1, -2, 0, 4, 4, -6, -1])
delimiter
h, w = img.shape
delimiter
settings.py
delimiter
root.resizable(width=False, height=False)
delimiter
time = datetime.now()
delimiter
[i for i in B if i in A] + [i for i in A if i not in B]
delimiter
baz2()
delimiter
[d[item] for item in a]
delimiter
pickle.dump(dict1, fp)
delimiter
str(d)
delimiter
plot.append(axF)
delimiter
data = urllib.parse.urlencode(values)
delimiter
arr = np.array(list(it))
delimiter
list2 = [foo(i) for i in list1]
delimiter
im.putalpha(256)
delimiter
line = line.strip()
delimiter
p.pattern
delimiter
QGraphicsTextItem.__init__(self)
delimiter
splitmaptime / parsetime
delimiter
summaptime / parsetime
delimiter
strp / parsetime
delimiter
plt.show()
delimiter
sum(a * b for a, b in zip(A, B))
delimiter
print(get_last_non_zero_index([-2, -2, 0, 0, 0, 0, 0]))
delimiter
max(b)
delimiter
print(random_with_N_digits(4))
delimiter
IOLoop.instance().start()
delimiter
int(self.opt.stdout.readline().strip())
delimiter
5 < [1, 2]
delimiter
plt.show()
delimiter
msg.attach(part1)
delimiter
plt.show()
delimiter
self.panel.Bind(wx.EVT_LEFT_DOWN, self.OnMouseDown)
delimiter
print([(k, v) for k, v in list(self.items())])
delimiter
pickle.dump(parameters, out_file)
delimiter
ax.autoscale_view()
delimiter
[random.randrange(10000) for _ in range(length)]
delimiter
fill_node(root)
delimiter
m = urllib.request.urlopen(url)
delimiter
time.sleep(60)
delimiter
oct_num = oct(dec_num)
delimiter
Br = [x, x, x, x, 0, y]
delimiter
new_t = t + np.hstack((t[1:], [t[0]]))
delimiter
min(collection, key=lambda x: abs(x - num))
delimiter
fig, ax = plt.subplots()
delimiter
today = datetime.datetime.now()
delimiter
vobject.contents
delimiter
np.where(a == a.min())
delimiter
datetime.strptime(s, f)
delimiter
file.seek(0, 2)
delimiter
w.setPalette(p)
delimiter
plt.plot(t, s)
delimiter
d2 = [k for k, v in list(d.items()) for _ in range(v)]
delimiter
trimmed[k[0], k[-1]] += v
delimiter
len(x)
delimiter
tmpdata = {}
delimiter
list(range(10))
delimiter
sys.path.insert(1, parent_dir)
delimiter
l.set_option(ldap.OPT_X_TLS, ldap.OPT_X_TLS_DEMAND)
delimiter
print([(sum(nums[:count]) / count) for count in range(1, len(nums) + 1)])
delimiter
D0 = np.array([(A[i] * B[(i), :]) for i in range(len(A))])
delimiter
self.append(item)
delimiter
fig, ax = plt.subplots()
delimiter
driver = webdriver.Chrome(chrome_options=chrome_options)
delimiter
xticks(list(range(1, 6)))
delimiter
gca().yaxis.set_major_locator(NullLocator())
delimiter
numpy.exp(numpy.sum(numpy.log(a)))
delimiter
combination[r - 1] += 1
delimiter
f1.write(line)
delimiter
text = json.loads(jsonurl.read())
delimiter
print([val[1] for val in enumerate(a) if val[0] != i])
delimiter
y1 = (x - x0) * sin(theta) + (h - y - y0) * cos(theta)
delimiter
shallow_copy_of_x = type(x)(x)
delimiter
poly = Polygon([(0, 0), (0, 2), (2, 2), (2, 0)])
delimiter
np.dot(X, A)
delimiter
img = ImageTk.PhotoImage(Image.open(path))
delimiter
s.bind((HOST, PORT))
delimiter
self.log.write(message)
delimiter
do_some_stuff(i)
delimiter
pool.join()
delimiter
[0, 0, 0]
delimiter
settings.development.py
delimiter
a, b, c, d
delimiter
Test().run()
delimiter
a, b
delimiter
b.sort()
delimiter
pyplot.show()
delimiter
e.pack()
delimiter
lfilter(b, a, data)
delimiter
json.loads(json_repr, object_hook=_decode_dict)
delimiter
list.append(values[i])
delimiter
connection = opener.open(request)
delimiter
hl.set_ydata(numpy.append(hl.get_ydata(), new_data))
delimiter
weed.save()
delimiter
felix.save()
delimiter
fixedser.plot(ax=axes[0])
delimiter
pickle.dumps(test)
delimiter
self.b = a
delimiter
clean = [x for x in usertext if x not in stop_words]
delimiter
driver = webdriver.Firefox()
delimiter
lastDigit = x[-1]
delimiter
np.fmin(np.digitize(A, hist[1]), bin_count)
delimiter
[gu(i) for i in range(len(uo))]
delimiter
True
delimiter
print(mystring[-1])
delimiter
p.start()
delimiter
menu_item.show()
delimiter
plt.show()
delimiter
XB = np.linspace(-1, 1, 20)
delimiter
ax.set_ylim(0, Y)
delimiter
(a != b).nonzero()
delimiter
self.socket.write(self.request)
delimiter
psutil.virtual_memory()
delimiter
a_game.run()
delimiter
second_list.append(ls[1])
delimiter
self.Show()
delimiter
root = et.fromstring(text)
delimiter
x.Bar()
delimiter
(a * prior_reci + (1 - a) * prior_reci / 10).sum(axis=1)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
np.vstack(np.triu_indices_from(a, k=1)).T
delimiter
bcut.label.set_visible(False)
delimiter
self.s.lower() == other.s.lower()
delimiter
subplot(2, 2, 4)
delimiter
s, loc, scale = stats.lognorm.fit(data, floc=0)
delimiter
z = dict(list(x.items()) + list(y.items()))
delimiter
cnt1 = np.concatenate(([0], np.cumsum(cnt)[:-1]))
delimiter
plt.ylim(0, 2.5)
delimiter
print(list(result))
delimiter
wx.Frame.__init__(self, parent, -1, title, size=(600, 400))
delimiter
aList.append([element.strip() for element in row])
delimiter
points.intersects(poly.unary_union)
delimiter
ax1 = fig.add_subplot(111)
delimiter
frame.pack()
delimiter
self.connection.close()
delimiter
list_2_sorted = [x[1] for x in sorted_together]
delimiter
sum_chunk(a, 2, axis=0)
delimiter
print(lines[0][0].shape)
delimiter
confusion_matrix(y_actu, y_pred)
delimiter
x = x.set_value(i, i ** 2)
delimiter
id = Column(Integer, primary_key=True, nullable=False)
delimiter
result.append(list_to_html(item))
delimiter
math.sqrt(2)
delimiter
signal.signal(signal.SIGPIPE, signal.SIG_DFL)
delimiter
sort_indices = numpy.argsort(a, axis=0)
delimiter
cherrypy.tree.mount(Root())
delimiter
frozenset(chain.from_iterable(L))
delimiter
numpy.__version__
delimiter
data = [line.strip().split() for line in f.readlines()]
delimiter
df.T
delimiter
print(tmpl.render(v=Myobj()))
delimiter
copyofL = remove_column(L, 1)
delimiter
parent.mainloop()
delimiter
print(list(traverse(data)))
delimiter
conn.commit()
delimiter
dcounts = Counter(d[0] for d in defectdetails)
delimiter
create_user_profile(user)
delimiter
np.all(A == B)
delimiter
pool = Pool(processes=4)
delimiter
item.append(item[0])
delimiter
d = json.loads(json_acceptable_string)
delimiter
[i for i in range(100000) if i == 1000][0]
delimiter
print((current_item, next_item))
delimiter
f.close()
delimiter
a.f()
delimiter
pdf = pyPdf.PdfFileReader(f)
delimiter
g.mean()
delimiter
print(ax.lines[0])
delimiter
raise KeyboardInterrupt
delimiter
os.dup2(oldstdout_fno, 1)
delimiter
int(random.randrange(0, 255))
delimiter
MyButton1.grid(row=0, column=0)
delimiter
ax.lines[-1].set_linewidth(8)
delimiter
shlex.split(teststring)
delimiter
user = User.objects.get(pk=1)
delimiter
z = [[y for y in row if y] for row in x.T]
delimiter
help(subprocess.list2cmdline)
delimiter
ax = fig.add_subplot(111)
delimiter
time.sleep(5)
delimiter
f(x, y)
delimiter
my_dict[key] = 1
delimiter
jsonify(d)
delimiter
decorator(method)
delimiter
both = np.hstack((img1, img2))
delimiter
sys.stdout = old_target
delimiter
console_handler = logging.StreamHandler()
delimiter
result.append(item)
delimiter
print(formatter.format(fmt, **data))
delimiter
f.write(df.to_html())
delimiter
subplot(4, 1, 1)
delimiter
self.update_status()
delimiter
print(df)
delimiter
eval(x)
delimiter
result = []
delimiter
[0] + list(accumulate(sum(1 for _ in g) for _, g in groupby(bool_array)))
delimiter
wrapper
delimiter
my_field = models.CharField(max_length=100)
delimiter
now = time.time()
delimiter
regex.sub(_replacer, string)
delimiter
assertion_raiser()
delimiter
res = np.array(sorted(a, key=lambda x: (-x).tolist()))
delimiter
self.comboBox_2.addItems(list1)
delimiter
unicode_somedir = somedir.decode(encoding)
delimiter
time.sleep(0.001)
delimiter
dask.set_options(get=dask.multiprocessing.get)
delimiter
last_name = forms.CharField(max_length=256)
delimiter
writer = csv.writer(csvfile)
delimiter
deleteL[idel:]
delimiter
np.matrix(m)
delimiter
plt.draw()
delimiter
soup = bs4.BeautifulSoup(thehtml)
delimiter
arr = arr.flatten()
delimiter
s.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)
delimiter
hxs = HtmlXPathSelector(response)
delimiter
self._timer.cancel()
delimiter
driver = ChromeDriver(options)
delimiter
print([x for x in pattern.split(string) if x])
delimiter
ax.add_artist(ab)
delimiter
foo.read()
delimiter
set(d[0]).intersection(*d)
delimiter
unittest.main()
delimiter
(np.random.rand(40, 40, 9, 1, 9, 1, 8) + np.random.rand(1, 9, 1, 9, 8)).shape
delimiter
upload.save(file_path)
delimiter
r = requests.get(url, stream=True)
delimiter
df.Mathscore.map(d)
delimiter
foo(noniterable, isiterable=False)
delimiter
arr = numpy.zeros((50, 100, 25))
delimiter
sd.SetSecurityDescriptorDacl(1, dacl, 0)
delimiter
f.close()
delimiter
tree = ElementTree.parse(StringIO(text))
delimiter
x / y
delimiter
start_date + timedelta(days=days_in_month)
delimiter
app = QtGui.QApplication([])
delimiter
np.cumsum(v)
delimiter
id = Column(Integer, primary_key=True)
delimiter
x.close()
delimiter
x += c
delimiter
moving_average(a)
delimiter
cf.body[0].names[0].name
delimiter
collection.insert(data)
delimiter
views.py
delimiter
greet()
delimiter
l = [sublist[:] for sublist in l]
delimiter
mytest.start()
delimiter
pd.Timestamp(0)
delimiter
min(S)
delimiter
value = sheet.cell(row, col).value
delimiter
query = query.filter(~table_a.id.in_(subquery))
delimiter
tuple({name: score} for name, score in max_scores.items())
delimiter
main()
delimiter
ent.put()
delimiter
dis.dis(test)
delimiter
num_overlap = sum(map(all, zip(list1, list2)))
delimiter
print(Kerma())
delimiter
p = subprocess.Popen(inputcommand, stdout=subprocess.PIPE, shell=True)
delimiter
dy = RK4(lambda t, y: t * sqrt(y))
delimiter
qstring = webapp2.request.query_string
delimiter
ax2.plot(list(range(10)))
delimiter
point_buffer = np.array(point_list)
delimiter
user_id = db.Column(db.Integer, primary_key=True)
delimiter
print(list(range(math.floor(min(y)), math.ceil(max(y)) + 1)))
delimiter
df
delimiter
print(map(lambda x: x[:-1], test))
delimiter
ax.get_yaxis().set_visible(False)
delimiter
dict.__setitem__(self, key, value)
delimiter
g[1].nunique()
delimiter
q = mp.Queue()
delimiter
HttpResponseRedirect(request.path)
delimiter
df1 = df.ix[:, 0:12]
delimiter
True
delimiter
os.fstat(f.fileno()).st_nlink
delimiter
logger.addHandler(handler)
delimiter
thumb = ImageOps.fit(image, size, Image.ANTIALIAS)
delimiter
set(frozenset(ts) for ts in x)
delimiter
[(a, b, c) for a in range(10) for b in range(a, 10) for c in range(b, 10)]
delimiter
f.close()
delimiter
print(my_list)
delimiter
json.dumps(lst)
delimiter
print((filename, oct(mode)))
delimiter
df.index = df.index.values + df.RecordID.map(str)
delimiter
main()
delimiter
root.remove(child)
delimiter
btn_1.focus_set()
delimiter
ordered = sorted(Foo.objects.all(), key=lambda n: (n[0], int(n[1:])))
delimiter
a[a > 2]
delimiter
float(str(x)[:i])
delimiter
plt.figure(2)
delimiter
msgunfmt[path_to_file.mo] > [path_to_file.po]
delimiter
extruded = np.zeros((N, 10, 10))
delimiter
cv2.convertScaleAbs(image, result, alpha, beta)
delimiter
self.retrieve(request, *args, **kwargs)
delimiter
ax.quiver(X, Y, Z, U, V, W)
delimiter
luckynumbers.append(item)
delimiter
print(unicode_row)
delimiter
y = [p[1] for p in points]
delimiter
root.update()
delimiter
t.close()
delimiter
fig = plt.figure(figsize=(8, 8))
delimiter
print(map(str, rr))
delimiter
yourFile.write(raw_data)
delimiter
(a[1], b[1]),
delimiter
f(2)
delimiter
user = models.OneToOneField(User)
delimiter
array[0],
delimiter
print(xyz.__doc__)
delimiter
plt.colorbar(pc, ax=axes)
delimiter
plt.xticks(x, labels)
delimiter
d.setdefault(a, []).append(b)
delimiter
clf.tree_.apply(np.asfortranarray(X.astype(sklearn.tree._tree.DTYPE)))
delimiter
pythoncom.CoInitialize()
delimiter
form.category.data = post.category.id if page.category else 0
delimiter
np.diff(np.array(s))
delimiter
np.allclose(a.indices, b.indices)
delimiter
a = np.arange(10)
delimiter
self.conn.close()
delimiter
bp.output_notebook()
delimiter
imgplot = plt.pcolormesh(lum_img)
delimiter
proc.append(p)
delimiter
a = np.arange(10)
delimiter
ax.bar(dates, values, width=100)
delimiter
ui.WebDriverWait(browser, 10).until(waiter)
delimiter
df.to_records()
delimiter
show()
delimiter
contestant = models.ForeignKey(Contestant)
delimiter
print(solve(eqn))
delimiter
collection.find({}, limit=10).sort(sort)
delimiter
win.setWindowFlags(win.windowFlags() & ~QtCore.Qt.WindowMaximizeButtonHint)
delimiter
os.makedirs(myTemp)
delimiter
opener = urllib.request.build_opener(authhandler)
delimiter
print(list(Squares(20, 90)))
delimiter
self.ax.autoscale_view()
delimiter
time.sleep(1)
delimiter
a = [1, 2, 7]
delimiter
y = tf.slice(x, i, [1])
delimiter
authorization = authorization.Authorization()
delimiter
ax.legend(handles, labels, loc=2, ncol=4)
delimiter
inset.yaxis.set_tick_params(labelsize=INSET_TICK_FONTSIZE)
delimiter
print(s.strip(punctuation))
delimiter
P = multiprocessing.Pool()
delimiter
self.draw_grid()
delimiter
pygame.init()
delimiter
divide(2, 7, 1000)
delimiter
plt.imshow(im, cmap=cm.gray)
delimiter
run_thread.start()
delimiter
sess = tf.Session(config=config)
delimiter
all(x == s[0] for x in s)
delimiter
np.count_nonzero(df.isnull().values)
delimiter
fig = plt.figure()
delimiter
np.array(sorted(a, cmp=lambda x, y: list(x).index(1) - list(y).index(1)))
delimiter
zip(zip(*a), zip(*b))[0]
delimiter
wx.Menu.__init__(self)
delimiter
value = test[2]
delimiter
b = copy.deepcopy(a)
delimiter
c.append(list(el))
delimiter
globals()[tupleofnames[i]] = data[i]
delimiter
f()
delimiter
date += datetime.timedelta(days=2)
delimiter
message.send()
delimiter
Py_DECREF(name)
delimiter
rows.append(row)
delimiter
print(w.cget(item))
delimiter
file_list.append((os.stat(filename)[stat.ST_MTIME], filename))
delimiter
self.driver.get(response.url)
delimiter
self.pot.Boil()
delimiter
ax.update_datalim(np.column_stack([x, y]))
delimiter
print(icon_info.get_filename())
delimiter
my_rhs = [1.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0, 0.0, 0.0, 0.0]
delimiter
content = urllib.request.urlopen(some_url).read()
delimiter
window.activateWindow()
delimiter
sys.stdout = stdout
delimiter
round(2.99999999999)
delimiter
qmgr.connectTCPClient(queue_manager, pymqi.cd(), channel, conn_info)
delimiter
assert np.allclose(results[2], results[0])
delimiter
np.count_nonzero((abcd <= data2a) & (abcd >= data2b))
delimiter
response.read()
delimiter
Response(body, status=status, headers=headers)
delimiter
f.readline()
delimiter
datetime.now() - datetime.combine(bday, time())
delimiter
cv.fit(X, y)
delimiter
Index = next(i for i, _ in enumerate(a) if np.isclose(_, val, tol))
delimiter
np.random.seed(1977)
delimiter
ser.sum()
delimiter
plt.close(fig)
delimiter
max(a, b)
delimiter
print([x for x in groups if a not in x])
delimiter
elements.append(q.get_nowait())
delimiter
{{field}}
delimiter
msg = email.message_from_string(data[0][1])
delimiter
p.stdin.write(input)
delimiter
app = Flask(__name__)
delimiter
ctx.pop()
delimiter
print(b[:, :, (2)])
delimiter
a = a.__iand__(b)
delimiter
df.A.combine_first(df.B)
delimiter
df.loc[df[1:][df.index.month[:-1] != df.index.month[1:]].index]
delimiter
m.swapaxes(0, 2)[::-1, :, :]
delimiter
np.argsort(p)
delimiter
stream_handler.setFormatter(formatter)
delimiter
words = input_string.split()
delimiter
df.apply(lambda x: len(set(x)) == 1, axis=1)
delimiter
seq.sort(key=itemgetter(1))
delimiter
response = requests.get(url, data=data)
delimiter
False
delimiter
json_data_string = simplejson.dumps(your_data)
delimiter
GEN_CLOSED
delimiter
_async_raise(self._get_my_tid(), exctype)
delimiter
Base.metadata.create_all(engine)
delimiter
pd.isnull(df).sum() > 0
delimiter
os.chdir(cwd_path[0])
delimiter
fig = plt.figure()
delimiter
fillmylist(l, 5)
delimiter
frame.Show()
delimiter
self.admin_model_path = self.model.__name__.lower()
delimiter
self.video_cap.release()
delimiter
result_dict = {k: list(g) for k, g in it.groupby(mylist, keyfunc)}
delimiter
dict([x for x in list(data.items()) if x[0] > 5])
delimiter
print(f(2))
delimiter
aapl.sign.iloc[(aapl.sign.diff() != 0).cumsum().drop_duplicates().index]
delimiter
args = parser.parse_args()
delimiter
d[x].append(foo)
delimiter
f.close()
delimiter
myarray[0][-1]
delimiter
self.pack()
delimiter
ax.set_ylim(0, np.pi)
delimiter
setattr(self, field.attname, getattr(db_instance, field.attname))
delimiter
d = defaultdict(list)
delimiter
plt.plot(list(range(10)))
delimiter
-bottleneck.partsort(-a, 10)[:10]
delimiter
np.cov(np.nan_to_num(data.T))
delimiter
self.filter(id__in=ids)
delimiter
ridx = sorted(range(len(U)), key=idx.__getitem__)
delimiter
d = pd.DataFrame()
delimiter
current_time = start_time = time.time()
delimiter
f.close()
delimiter
fig, ax = plt.subplots()
delimiter
canvas.draw()
delimiter
[rect.set_visible(False) for rect in rects]
delimiter
irc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
time.sleep(5)
delimiter
a[0], a[1] = [4, 5]
delimiter
plt.colorbar(cax=cax)
delimiter
datetime.datetime(2001, 11, 12, 0, 0)
delimiter
signal.pause()
delimiter
numpy.zeros((2, 20))
delimiter
print(self.myVar)
delimiter
in_file.close()
delimiter
inithello()
delimiter
print(data)
delimiter
windowSurface.blit(s, (0, 0))
delimiter
GST_VERSION_MINOR,
delimiter
self._data[key]
delimiter
result = np.cumsum(np.random.uniform(size=100))
delimiter
[memoized(x) for x in l if memoized(x)]
delimiter
self.d[key] = max(self.d[key], n)
delimiter
ax.set_rasterization_zorder(0)
delimiter
result = eval(myString)
delimiter
len(set(str_.split()).intersection(list(dict_1.values())))
delimiter
today = datetime.datetime.now()
delimiter
m.click(x, y, 1)
delimiter
date = dateutil.parser.parse(text)
delimiter
dc.SetBackground(wx.Brush(wx.Colour(255, 0, 255)))
delimiter
myapp.db.create_all()
delimiter
[0, 0, 0, 0, 1, 0, 0, 0, 0],
delimiter
bar = p[0]
delimiter
data = np.random.randint(0, 100, (400000.0, 206))
delimiter
b.grab_set()
delimiter
layout.addWidget(self.view)
delimiter
frame.a.str.contains(pattern)
delimiter
time.sleep(2)
delimiter
df.applymap(atof)
delimiter
n = a.shape[1]
delimiter
info[0][1] == 2
delimiter
ax1.patch.set_alpha(0.0)
delimiter
db.add_son_manipulator(Transform())
delimiter
form.jobs[0].company.choices = company_list
delimiter
cameraL.SetFocalPoint(0, 0, 0)
delimiter
ax.set_ylim(-0.5, 1.7)
delimiter
print(res.cluster.value_counts())
delimiter
print(t.astimezone(EST))
delimiter
dir(settings)
delimiter
A.view(dtype=np.complex128)
delimiter
fig = plt.figure()
delimiter
dt_start = dt_start + datetime.timedelta(days=21)
delimiter
doc = ET.fromstring(content)
delimiter
[(x, sum(map(itemgetter(1), y))) for x, y in groupby(L, itemgetter(0))]
delimiter
df.dtypes
delimiter
browser = webdriver.Firefox(firefox_binary=binary)
delimiter
help(modulename)
delimiter
np.issubdtype(np.uint8, np.integer)
delimiter
app
delimiter
element.remove(subelement)
delimiter
a[1:][::2]
delimiter
bytes = bitarray(bin(my_long)).tostring()
delimiter
q.all()
delimiter
print((group.id, group.last_response))
delimiter
vals = redis.zrange(key, 0, -1)
delimiter
screen_width = root.winfo_screenwidth()
delimiter
print(sess.run(tf.shape(parsed), feed_dict={raw: my_data}))
delimiter
items = [dicttolatex(dic) for dic in items_to_clean]
delimiter
print([x for x in list(globals().keys()) if isinstance(globals()[x], FunctionType)])
delimiter
sys.stdout.write(line)
delimiter
local_namespace.clear()
delimiter
arr[97][99][99]
delimiter
d = dict(zip((o.name for o in object_list), object_list))
delimiter
s = socket.socket()
delimiter
grouped.size().idxmax()
delimiter
zipfile = ZipFile(StringIO(result.read()))
delimiter
[i for i in np.argsort(a[:, (0)]) if a[i, 1] == -1][0]
delimiter
list(merged.values())
delimiter
parser.add_argument(*option, **config)
delimiter
foo()
delimiter
random.choice(list(i))
delimiter
t_points = t_image[t_pos[:, (1)], t_pos[:, (0)]]
delimiter
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
output_signal = scipy.signal.filtfilt(b, a, input_signal)
delimiter
pg.AxisItem.__init__(self, *args, **kwargs)
delimiter
os.system(command)
delimiter
eiffel_tower_5k = Location.objects.nearby(48.8582, 2.2945, 5)
delimiter
filename = os.path.abspath(os.path.realpath(filename))
delimiter
list(flatten(remove(l, 1)))
delimiter
sys.stdout = sys.__stdout__
delimiter
print(br.title())
delimiter
print(m.group(1))
delimiter
dom = xml.dom.minidom.parseString(document)
delimiter
main()
delimiter
D.ix[idx]
delimiter
print(Decimal(x))
delimiter
pythoncom.PumpWaitingMessages()
delimiter
dateForm.set_index(pd.DatetimeIndex(poorList), inplace=True)
delimiter
set_trace()
delimiter
df
delimiter
[1, 17, 1, 0, 2, 0]
delimiter
browser.select_form(nr=0)
delimiter
chain.from_iterable([x] if isinstance(x, str) else x for x in lst)
delimiter
plt.show()
delimiter
fileconcord.close()
delimiter
b = [(sl + [0] * (maxlen - len(sl))) for sl in a]
delimiter
(bad, good)[x in goodvals].append(x)
delimiter
arg2value
delimiter
connection.put_record(stream_name, data, partition_key)
delimiter
[sum(q[i:i + 2]) for i in range(0, len(q), 2)]
delimiter
v1 = max(0, A)
delimiter
webdriver.Firefox(firefox_profile=fp)
delimiter
stats.normaltest(x)
delimiter
seen_add(k)
delimiter
self.on_finish()
delimiter
_test()
delimiter
admin.site.register(model)
delimiter
_quicksort(array, left, stop)
delimiter
writer.writeheader()
delimiter
sys.stdin.readline()
delimiter
t.start()
delimiter
root.mainloop()
delimiter
window.set_icon(windowicon)
delimiter
print(curve_fit(func, (x, y), z, p0))
delimiter
sorted(mydict)
delimiter
plt.subplot(121)
delimiter
4, (0, 5, 0, 0)
delimiter
self.textLayout.addWidget(text)
delimiter
o.do()
delimiter
csv_writer.writerows(mylist)
delimiter
print(my_dict)
delimiter
types = [elem[1] for elem in res.cursor.description]
delimiter
assert isinstance(o.someattribute, str)
delimiter
print(foo(**d))
delimiter
print(pool.map(f, list(range(10))))
delimiter
a[i].append(x)
delimiter
val = val[:-1]
delimiter
self.gzfile.close()
delimiter
db.Column(*args, **kwargs)
delimiter
config = configparser.ConfigParser(defaults=myDefaults)
delimiter
dst = cv2.cv.CreateMat(height, width, cv2.IMREAD_COLOR)
delimiter
total = sum(marks.values())
delimiter
sys.getsizeof(10 ** 10 ** 6)
delimiter
soup = BeautifulSoup(html)
delimiter
browser.set_handle_redirect(True)
delimiter
msgBox.exec_()
delimiter
app = Flask(__name__)
delimiter
max(set(words), key=words.count)
delimiter
s = [0] + [i for i in range(1, len(x)) if x[i] != x[i - 1] + 1] + [len(x)]
delimiter
ax.plot(dataX, dataY, linewidth=0.5)
delimiter
response = urllib.request.urlopen(req2)
delimiter
f.write(header)
delimiter
draw()
delimiter
ax.set_ylim(ax.get_ylim()[::-1])
delimiter
{{day}}
delimiter
p.stdout.read().strip()
delimiter
draw.text((5, 5), char, (0, 0, 0), font=font)
delimiter
tuple(map(itemgetter(0), G))
delimiter
Process.__init__(self)
delimiter
transsurface = pygame.display.set_mode(screen.get_size())
delimiter
libfoo.dll
delimiter
val = ast.literal_eval(val)
delimiter
p.join()
delimiter
s = pd.Series([10, 10, 10, 14, 10, 10, 10, 14, 100, 14, 10])
delimiter
http.HttpResponseRedirect(url_with_get)
delimiter
subplot(1, 2, 1)
delimiter
db.session.add(entry)
delimiter
add(*arg)
delimiter
s = input()
delimiter
print(self._applecount)
delimiter
[n for d, n in sorted((abs(x - myNumber), x) for x in myList)[:k]]
delimiter
result.append(a)
delimiter
[dct for dct in listA if dct.items() >= dictA.items()]
delimiter
p.start()
delimiter
gunicorn_django - c / path / to / website_gunicorn.conf.py
delimiter
self.values.add(item[1])
delimiter
np.split(a - b, np.cumsum(y))
delimiter
max(zip(map(sum, a), a))[1]
delimiter
{(x + 1) for x in l}
delimiter
print(foo)
delimiter
Parallel(n_jobs=2)(delayed(foo)(parameters) for x in range(i, j))
delimiter
uuid.uuid4().hex
delimiter
yaml.dump(data, outfile, default_flow_style=False)
delimiter
self.pack()
delimiter
d.cards.remove(Card(1, 1))
delimiter
tree.xpath(expr, namespaces=nsmap)
delimiter
form.save()
delimiter
print(line)
delimiter
do_something_else()
delimiter
logger = logging.getLogger(name)
delimiter
soup = BeautifulSoup.BeautifulSoup(htmldoc)
delimiter
self.filter(id__in=ids)
delimiter
df.combine_first(s.T)
delimiter
sys.getsizeof(t1)
delimiter
result = [list(map(player, group)) for level, group in groups]
delimiter
x.digest()
delimiter
out = [(x, y, z, c) for (x, y, z), c in zip(a, h)]
delimiter
velocity = np.array([[dx_dt[i], dy_dt[i]] for i in range(dx_dt.size)])
delimiter
my_logger.setLevel(logging.DEBUG)
delimiter
args = sys.argv[2:]
delimiter
vv.plot(x, y, z, lw=10)
delimiter
df = pd.DataFrame(np.random.randint(10, size=(10, 10)))
delimiter
t.daemon = True
delimiter
demand.ix[series.name].apply(lambda x: x * series).stack()
delimiter
d = defaultdict(list)
delimiter
tag.insert(1, subtag2)
delimiter
plt.scatter(x2, y2, label=str(pointset2))
delimiter
reader = csv.reader(csvinput)
delimiter
new_func_name()
delimiter
name[0][0][-1]
delimiter
data = json.load(jsonFile)
delimiter
a = [x[:] for x in repeat([0] * cols, rows)]
delimiter
lis = []
delimiter
Profile.objects.filter(full_name__iregex=regex)
delimiter
df.astype(float).sum().astype(int).astype(str)
delimiter
num_df[num_df[data_columns].notnull().all(axis=1)]
delimiter
conn.close()
delimiter
print(g.user_set.all())
delimiter
pic = QtGui.QPixmap(imagePath)
delimiter
f.close()
delimiter
ax.get_children()
delimiter
[vector.index(x) for x in sorted(list(range(n)), key=vector.__getitem__)]
delimiter
print(list(od.values()))
delimiter
ax = fig.add_subplot(111)
delimiter
a.remove(item)
delimiter
y.sort(key=sort_key)
delimiter
bucket.configure_lifecycle(lifecycle)
delimiter
map(cls.my_func, items)
delimiter
instance.save()
delimiter
key = bytearray.fromhex(hexs)
delimiter
ax.xaxis.set_major_formatter(ticker.NullFormatter())
delimiter
pb = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, False, 8, sz[0], sz[1])
delimiter
movie_tuples = [tuple(map(d.get, fields)) for d in movie_dicts]
delimiter
[0, 0, 0, 0, 0, 1, 0, 0, 0],
delimiter
clocknumber = models.CharField(max_length=16)
delimiter
L = [np.arange(start[i], stop[i]) for i in range(ndims)]
delimiter
app.debug = True
delimiter
print(file.readline())
delimiter
res = [f.name for f in message.DESCRIPTOR.fields]
delimiter
sys.path.insert(0, os.path.abspath(__file__).rsplit(os.sep, 2)[0])
delimiter
[x for x in iter if is_even(x)]
delimiter
result.get()
delimiter
print(isinstance(obj, BaseClass))
delimiter
ax.plot(x, y)
delimiter
queryset.filter(created_at__range=(first_date, last_date))
delimiter
arr[1, 1]
delimiter
win = gtk.Window()
delimiter
background_label = tk.Label(parent, image=background_image)
delimiter
a.reshape(sh).mean(-1).mean(1)
delimiter
plt.plot(list(range(10, 20)))
delimiter
signal.signal(signal.SIGALRM, nothing)
delimiter
print(float(2))
delimiter
index = np.ogrid[:z2.shape[0], :z2.shape[1], :z2.shape[2]]
delimiter
func(*args)
delimiter
root = tk.Tk()
delimiter
l.sort(cmp=lcmp)
delimiter
cherrypy.quickstart(CServer(), config=conf)
delimiter
self.audio.terminate()
delimiter
cb = plt.colorbar()
delimiter
tree.predict(iris.data)
delimiter
str(self.client_address[0])
delimiter
reactor.run()
delimiter
output.append([item])
delimiter
df.values
delimiter
y[np.isnan(y) | np.isinf(y)] = 0
delimiter
log_file
delimiter
srcs = [src[2] for src in list_of_all]
delimiter
writer = csv.writer(out)
delimiter
map(mydict.get, [k for k in list(mydict.keys()) if k >= 6])
delimiter
(x - x.min()) * (b - a) / (x.max() - x.min()) + a
delimiter
fig.subplots_adjust()
delimiter
x(os.path.join(dirpath, f))
delimiter
self.y -= STEP
delimiter
scipy.sparse.coo_matrix((data, ij), shape=(nrows, ncols))
delimiter
curs.execute(sql)
delimiter
mutate_dict(lambda x: x + 1, my_dictionary)
delimiter
assert np.allclose(s, [r.sum() for r in results])
delimiter
maxlength = max(len(s) for s in stringlist)
delimiter
textobj.set_text(wrapped_text)
delimiter
pool = multiprocessing.Pool()
delimiter
max(list(d1.items()), key=operator.itemgetter(1))[0]
delimiter
numsum = sum(numbers)
delimiter
result_dict = OrderedDict()
delimiter
matplotlib.hatch._hatch_types.append(CustomHorizontalHatch)
delimiter
plt.show()
delimiter
plt.ion()
delimiter
p.start()
delimiter
data[s < m]
delimiter
result[i] = func1d(x, y)
delimiter
textwrap.fill(s, width=10)
delimiter
sorted(list(range(len(a))), key=lambda i: positions[i])
delimiter
[[(e - d) for d in l] for e in l]
delimiter
ax.xaxis.set_major_formatter(ticker.FixedFormatter(name_list))
delimiter
list(d.items())
delimiter
[0, 0, 0, 0, 0, 0, 1, 0, 0],
delimiter
docx.write(os.path.join(tmp_dir, filename), filename)
delimiter
wx.EndBusyCursor()
delimiter
gtk.main()
delimiter
mod = importlib.import_module(name)
delimiter
d.add(2)
delimiter
print(etree.tostring(doc, pretty_print=True))
delimiter
Tup()[0]
delimiter
n = collatz(int(n))
delimiter
print(sum(1 for x in range(1000000) if my_condition(x)))
delimiter
ctypes.memmove(self._buffer, value, size)
delimiter
zbar.version()
delimiter
df.iloc[[p] + [i for i in range(len(df)) if i != p]]
delimiter
{{b}}
delimiter
lst = [(word[0].upper() + word[1:]) for word in s.split()]
delimiter
HypotheticalBranch(1, 2, 1)
delimiter
self.label = QtGui.QLabel(self)
delimiter
print(hex(id(b)))
delimiter
plt.setp(labels, rotation=90)
delimiter
date_paris.astimezone(pytz.utc)
delimiter
df.dot(s)
delimiter
parser = argparse.ArgumentParser()
delimiter
user = request.user
delimiter
data.sort(key=lambda data: [alphabet.index(c) for c in data[0]])
delimiter
res = [x for x in res if x.size > 1]
delimiter
na_values = []
delimiter
double_to_hex(17.5)
delimiter
r = requests.get(url)
delimiter
ax1.axis([xmin, xmax, ymin, ymax])
delimiter
plt.grid()
delimiter
array([16, 6, 8])
delimiter
self._timer.start()
delimiter
A = np.arange(16).reshape((4, 4))
delimiter
print(maskborder.shape[:2])
delimiter
f.write(xml)
delimiter
np.set_printoptions(threshold=np.inf, linewidth=np.inf)
delimiter
writer.close()
delimiter
ax.grid()
delimiter
print(b.dtype, b[0].dtype, b[1].dtype)
delimiter
scat = plt.scatter(x, y, c=c, s=100)
delimiter
result = db.engine.execute(sql)
delimiter
a = np.array([sum(row * weights) for row in values])
delimiter
z = z.reshape(x.shape)
delimiter
cj = cookielib.CookieJar()
delimiter
time.sleep(60)
delimiter
np.random.seed(1145)
delimiter
p.stdout.close()
delimiter
data = response.read()
delimiter
self.tws.connect()
delimiter
print(concatenate((tone2, tone1), axis=1))
delimiter
self.assertEqual(resp.status_code, 200)
delimiter
self.output = []
delimiter
basemetaclasses.append(metacls)
delimiter
source.camlp4.ocaml
delimiter
fd.close()
delimiter
fig.figimage(np.random.random((xpixels, ypixels)))
delimiter
python - -version
delimiter
TRUE
delimiter
max(i[j] for i in l)
delimiter
sess = tf.Session()
delimiter
timestamp = calendar.timegm(d.utctimetuple())
delimiter
to_remove = [i for i, val in enumerate(x) if len(val) == 2]
delimiter
cursor = connection.cursor()
delimiter
pyplot.ioff()
delimiter
mcurr = location_re.search(currline)
delimiter
set(dic1) == set(dic2)
delimiter
self.assertDictEqual(input_dict, expected)
delimiter
c.writerow([cell.value for cell in r])
delimiter
count += 1
delimiter
new.setdefault(k, []).append(v)
delimiter
[(a - b) for a, b in zip(dividers + [total], [0] + dividers)]
delimiter
files_grabbed.extend(glob.glob(files))
delimiter
ax.set_xticks(np.arange(0.5, 10.5, 1))
delimiter
ax2.plot(x, y)
delimiter
{{saved_setting}}
delimiter
random.shuffle(indices)
delimiter
makesymbexp(makesymbtree(T, L))
delimiter
print(response.getvalue())
delimiter
list1 = [int(x) for x in list1]
delimiter
f.seek(0)
delimiter
EllShape = Affine2D(numpy.array(sqrtm(inv(A)), dtype=np.float64))
delimiter
print(a)
delimiter
{k: min(i for i in (h1.get(k), h2.get(k)) if i) for k in h1.keys() | h2}
delimiter
do_something()
delimiter
self.clear_button.pack()
delimiter
self.func(*(args + self.args), **kwargs)
delimiter
zip(assignment, *grades)
delimiter
int_docs_info = {int(k): v for k, v in list(docss_info.items())}
delimiter
pylab.imshow(image)
delimiter
self._data = {}
delimiter
pool.close()
delimiter
id = models.CharField(max_length=255, default=create_id)
delimiter
plt.tight_layout()
delimiter
len(bitArray.tobytes()) / float(len(sequence))
delimiter
ax.legend()
delimiter
theFile.close()
delimiter
words = line.split()
delimiter
sum(chain(*my_list))
delimiter
array = [myNumber]
delimiter
not int(a)
delimiter
fig = plt.figure()
delimiter
print(__main__.__file__)
delimiter
f1 = Foo.objects.get(pk=f1.id)
delimiter
msg.attach(text)
delimiter
np.argwhere(A > 50)
delimiter
Department.objects.filter(group__exact=self.group)
delimiter
[_f for _f in map(f, string) if _f]
delimiter
self.root = tk.Tk()
delimiter
s = sparse.csr_matrix(a)
delimiter
df.iloc[indexers]
delimiter
data.append(value)
delimiter
app = wx.PySimpleApp()
delimiter
print(best2)
delimiter
__getitem__
delimiter
neurons.append(neuron)
delimiter
my_array.clip(0, 255)
delimiter
result = list(create(10))
delimiter
cosetCoding.cosetCoding(10, 11, 8, ctypes.byref(arr), 0)
delimiter
mpp.start()
delimiter
callback(myargument)
delimiter
np.random.seed(100)
delimiter
a = next((i for i in userInput if i in wordsTask), 42)
delimiter
lxml.html.etree.tostring(a)
delimiter
foo(20, 5)
delimiter
G = nx.gnp_random_graph(n, p)
delimiter
AB = [(a + b) for a, b in zip(A, B)]
delimiter
[a, b, c, d, e, f]
delimiter
self.stream.stop_stream()
delimiter
update_document(person, data)
delimiter
os.path.normpath(os.getcwd() + os.sep + os.pardir)
delimiter
output.append(lst)
delimiter
plt.plot(datenums, values)
delimiter
pdb.set_trace()
delimiter
camera_handle = ctypes.c_ulong(0)
delimiter
a + b
delimiter
assert np.allclose(xRemainder, 0)
delimiter
parser = argparse.ArgumentParser()
delimiter
result = dict(defaults, **request)
delimiter
[]
delimiter
setattr(obj, key, value)
delimiter
app.exec_()
delimiter
worksheet.column_dimensions[get_column_letter(i + 1)].width = column_width
delimiter
my_server = redis.Redis(connection_pool=POOL)
delimiter
sess.run(init_op)
delimiter
isinstance(obj.method, types.MethodType)
delimiter
np.add(a, b, out=c)
delimiter
reader = csv.reader(f)
delimiter
df
delimiter
random.shuffle(a)
delimiter
df
delimiter
[list(g) for _, g in groupby(numbers, lambda x: x // 10)]
delimiter
gethandler
delimiter
time.sleep(0.1)
delimiter
result = regex.match(str)
delimiter
nbrs.fit(X)
delimiter
self.setLayout(layout)
delimiter
client = suds.client.Client(sys.argv[1])
delimiter
map(tuple, pairs)
delimiter
f.close()
delimiter
output.write(resp.content)
delimiter
time.sleep(x)
delimiter
binascii.unhexlify(line)
delimiter
indices = np.split(sidx, cut_idx)[1:]
delimiter
__init__.py
delimiter
fh.write(dh.read())
delimiter
plt.hold(False)
delimiter
plt.figure()
delimiter
tags = ManyToManyField(Tag)
delimiter
z = np.arange(Z)
delimiter
pilImage.close()
delimiter
tuple(it.chain(*base_lists))
delimiter
d = dict.fromkeys(a, 0)
delimiter
process(line)
delimiter
{{my_dollars | currency}}
delimiter
axins1.set_ylim(y1, y2)
delimiter
sorted([[x, y] for x, y in list(distances.items())], key=lambda x: x[0])
delimiter
feature_names = vectorizer.get_feature_names()
delimiter
plt.xticks(visible=False)
delimiter
_test_model()
delimiter
print(r[0] + r[1])
delimiter
print(value)
delimiter
socket.gethostname()
delimiter
[(a[i] - a[i + 1]) for i in range(len(a) - 1)]
delimiter
lgd = ax.legend(loc=9, bbox_to_anchor=(0.5, 0))
delimiter
print(hex(i)[2:].zfill(2).upper())
delimiter
res.append(x)
delimiter
s.apply(partial(map, lambda x: x * 2))
delimiter
assert np.allclose(std, data.std())
delimiter
d[parts[0]] += parts[1:]
delimiter
Decimal(2).sqrt()
delimiter
r = requests.get(file_url)
delimiter
foo = decorator_with_args(arg)(foo)
delimiter
importlib.import_module(name)
delimiter
server.close()
delimiter
print(letters[:i] + letters[i::-1])
delimiter
sudokupossibilities = [[[1] * 9] * 9] * 9
delimiter
d.mean(axis=tuple(range(1, d.ndim)))
delimiter
plt.clf()
delimiter
soup = BeautifulSoup(text)
delimiter
a.func()
delimiter
MyUser.friends.append(Friend(MyUser.id, MyFriend.id))
delimiter
df * df2.values
delimiter
list(map(lambda m, n: m - n, a, b))
delimiter
np.random.seed(10)
delimiter
ns = np.linspace(-5, 5, 1000)
delimiter
print(extract_text(htmlDom))
delimiter
id = Column(Integer, primary_key=True)
delimiter
logging.error(e)
delimiter
sockobj = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
delimiter
t = np.copy(a[:, (0), (0)])
delimiter
tz.localize(parser.parse(a_datetime))
delimiter
json.dumps(my_data)
delimiter
mw.dockWdg2.setWidget(mw.content2)
delimiter
log.addHandler(fileh)
delimiter
output.close()
delimiter
root.config(menu=menubar)
delimiter
raise Exception()
delimiter
f.axes[4].set_position([0.55, 0.45, 0.4, 0.05])
delimiter
reader = csv.reader(input, **options)
delimiter
fig, ax = plt.subplots()
delimiter
pool = Pool(processes=4)
delimiter
handler()
delimiter
[x for x, y, z in G]
delimiter
print(line.rstrip()[::-1])
delimiter
np.npv(0.01, cashflow)
delimiter
urllib.request.install_opener(opener)
delimiter
list2 = list(total_and_item(list1))
delimiter
digits = int(math.log10(-n)) + 2
delimiter
doSomethingWith(match.group(0))
delimiter
zip(l, itertools.repeat(o))
delimiter
app.debug = True
delimiter
Ainv[i] = np.linalg.inv(A[i])
delimiter
ast.literal_eval(s)
delimiter
s.listen(1)
delimiter
divisibleBySeven = [num for num in inputList if num != 0 and num % 7 == 0]
delimiter
time.sleep(1)
delimiter
id = Column(Integer, primary_key=True)
delimiter
fig = plt.figure()
delimiter
instance.save()
delimiter
observer.start()
delimiter
self.response.out.write(os.stat(path).st_mtime)
delimiter
print(numpy.__version__)
delimiter
c.most_common()[0]
delimiter
result.get()
delimiter
u.close()
delimiter
subplot(4, 1, 2)
delimiter
C4.foo()
delimiter
C5.foo()
delimiter
c_array[:] = chain(p for p in points)
delimiter
writer.save()
delimiter
df.drop(df.columns[cols], axis=1, inplace=True)
delimiter
print(p.groupby(p.diff().cumsum()).cumcount())
delimiter
pprint(dict(grouped))
delimiter
app.listen(8888)
delimiter
parser = argparse.ArgumentParser(add_help=False)
delimiter
nopreds.add(u)
delimiter
np.maximum.reduceat(given_sort, first_idx)
delimiter
tree = etree.parse(StringIO(data), magical_parser)
delimiter
im.set_clim([frame.min(), frame.max()])
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
image /= image.max() / 255.0
delimiter
w.tk.mainloop()
delimiter
int(s)
delimiter
process(0)
delimiter
plt.scatter(xs[i], ys[i], marker=m[i])
delimiter
signal.signal(signal.SIGALRM, self.handle_timeout)
delimiter
fig = plt.figure()
delimiter
print(is_perfect_cube(2146689000))
delimiter
screen = pygame.display.set_mode(DISPLAY, FLAGS, DEPTH)
delimiter
alphabetDict = {char: (0) for char in alphabet}
delimiter
print(x)
delimiter
fig.autofmt_xdate()
delimiter
keyName = myMember.key().name()
delimiter
int(time.mktime(value.timetuple()))
delimiter
self.Bind(wx.EVT_LEFT_DOWN, self.on_left_down)
delimiter
m2 = np.zeros((50, 50))
delimiter
sum(map(lambda x: map(lambda f: f(x), ListArg), listFunc), [])
delimiter
sys.getsizeof(Bar())
delimiter
self.out, self.err = self.proc.communicate()
delimiter
math.ceil(f / 2.0) * 2
delimiter
print(json.dumps(categories, indent=4))
delimiter
m = [[(row - col) for row in l] for col in l]
delimiter
abs(1)
delimiter
url_get = self.request.GET
delimiter
f.bar(1, 2)
delimiter
subprocess.call(subprocess_cmd)
delimiter
transpose.sort(key=itemgetter(0))
delimiter
hash(round(6.75, 1))
delimiter
p.stdin.close()
delimiter
pool = multiprocessing.Pool()
delimiter
loop.run_until_complete(main())
delimiter
df2[cols]
delimiter
dict.__setitem__(self, frozenset(idx), value)
delimiter
x + y
delimiter
text[(value + step) % len(text)]
delimiter
gevent.joinall(jobs)
delimiter
print(requests.get(url).text)
delimiter
outfile.write(self.archive.getmember(name).read())
delimiter
ax.set_xticklabels(mons)
delimiter
f.close()
delimiter
n % 2 == 0
delimiter
t.join()
delimiter
{k: {k_: v[k_] for k_ in common_keys} for k, v in d.items()}
delimiter
sys.exit(0)
delimiter
mylist.append(item)
delimiter
list(dict.keys())[0]
delimiter
tn.close()
delimiter
tree = ET.parse(StringIO(text), parser)
delimiter
dict_writer.writerows(rows)
delimiter
MyModel.objects.filter(complexQuery)
delimiter
ax = fig.add_subplot(111)
delimiter
df.ix[start:end]
delimiter
o.call()
delimiter
url = Column(String)
delimiter
np.random.shuffle(zeros)
delimiter
a2[:, (1)] > 10
delimiter
a = bitarray(2 ** 20)
delimiter
pool.join()
delimiter
[del_zeros(L, i) for i in range(5)]
delimiter
nll
delimiter
result.add(elements[0])
delimiter
df
delimiter
rconsole.spawn_server()
delimiter
f(**locals())
delimiter
XXX
delimiter
func(*args, **kwargs)
delimiter
now - timedelta(seconds=15)
delimiter
os.chdir(os.path.dirname(os.path.realpath(__file__)))
delimiter
reload_urlconf()
delimiter
x = int(str(x)[::-1])
delimiter
pylab.draw()
delimiter
b = np.matrix(np.array(a))
delimiter
a[0] * b[1] - a[1] * b[0]
delimiter
writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
delimiter
wx.Frame.__init__(self, parent, id, title, pos, size, style, name)
delimiter
__main__.py
delimiter
doctest.testmod()
delimiter
print(list(igroups([0, 0, 0])))
delimiter
ax = fig.add_subplot(111)
delimiter
r = boxplot(data)
delimiter
nx.draw(G, pos)
delimiter
groups.apply(existedBefore)
delimiter
a = np.delete(a, b, 0)
delimiter
numpy.ma.masked
delimiter
socket.setdefaulttimeout(10)
delimiter
print(list(unzipped[0]))
delimiter
pyplot.show()
delimiter
parent.remove(elem)
delimiter
Package - 2 / namespace / module2 / __init__.py
delimiter
ax = fig.add_subplot(111)
delimiter
entryFrame.columnconfigure(0, weight=10)
delimiter
func_name = sys._getframe().f_code.co_name
delimiter
d[k] = tuple(d[k] for d in ds)
delimiter
p.join()
delimiter
plt.hist2d(a, b, (50, 50), cmap=plt.cm.jet)
delimiter
b = word in (w for i, w in enumerate(wordList) if i not in ignore)
delimiter
obj.load_from_filename(filename)
delimiter
PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))
delimiter
all(isinstance(i, int) for i in l)
delimiter
fig, ax = plt.subplots(1, 1)
delimiter
g.set(xticklabels=[])
delimiter
t = np.linspace(0, T, nsamples, endpoint=False)
delimiter
ax.scatter(x, y)
delimiter
ast = np.lib.stride_tricks.as_strided(a, a.shape * 2, a.strides * 2)
delimiter
random.seed(1)
delimiter
name = models.CharField(max_length=100)
delimiter
raise OSError(p.stderr.read().rstrip())
delimiter
print(response.read())
delimiter
add_keys(d[l[0]], l[1:], c)
delimiter
X[:, (np.where(mask1)[0])][np.where(mask2)[0]]
delimiter
df.groupby(df.columns, axis=1).apply(lambda x: x.info())
delimiter
self.common1()
delimiter
root.tag
delimiter
setattr(self, key, [company])
delimiter
merged = list(joinz(1, zdf1.iter(), 0, zdf2.iter()))
delimiter
bitmap = np.array(bitmap, np.uint8)
delimiter
time.sleep(2)
delimiter
pd.concat([group for _, group in grouped if len(group) > 1])
delimiter
plt.draw()
delimiter
print(match.groupdict())
delimiter
print(string)
delimiter
df = pd.concat([df] * 1000).reset_index(drop=True)
delimiter
toggle_btn.pack(pady=5)
delimiter
write.writeheader()
delimiter
t, dt = np.linspace(0, 1, num_t, endpoint=False, retstep=True)
delimiter
self.__dict__ = self._dict
delimiter
a = [1, 2, 1, 4, 1, 1, 1, 1]
delimiter
ln.set_xdata(list(range(len(data))))
delimiter
x.reshape(-1, x.shape[-1]).shape
delimiter
signal.signal(signal.SIGINT, _forward_to_django_shutdown_signal)
delimiter
pixmap5 = pixmap.scaled(64, 64)
delimiter
self.Bind(wx.EVT_WINDOW_CREATE, self.SetWindowShape)
delimiter
np.isfinite(b_0).all()
delimiter
int(string[::2], 2)
delimiter
xscroll.grid(row=1, column=0, sticky=E + W)
delimiter
ax.set_xticks(x_labels_pos)
delimiter
roster.append(dayroster)
delimiter
tableWidget.setItem(i, j, item)
delimiter
tic2()
delimiter
f = lambda x: x * np.cos(x - 4)
delimiter
flags = np.arange(1, n + 1).reshape(1, -1)
delimiter
cursor = cnxn.cursor()
delimiter
accumulationList.extend(doSomething(x))
delimiter
{{item_forms.empty_form}}
delimiter
_stack.append(self.kwargs)
delimiter
[[f(v) for v, f in zip(x, funcs)] for x in a]
delimiter
mod = __import__(module_name)
delimiter
os.path.join(*choices)
delimiter
unicodedata.category(character)
delimiter
code_country.append([key, countries[key]])
delimiter
self.window.set_default_size(100, gtk.gdk.screen_height())
delimiter
w = Gtk.Window()
delimiter
collections.defaultdict(recursive_dict)
delimiter
ttk.Frame.__init__(self, *args, **kwargs)
delimiter
parse(data)
delimiter
data = json.loads(json_content)
delimiter
result = my_range[:-1]
delimiter
self.exit(0)
delimiter
max(sentence)
delimiter
self(other(*args, **kwargs))
delimiter
w.writerow(list(somedict.values()))
delimiter
time.sleep(1)
delimiter
DEVNULL.close()
delimiter
self.session.get(url)
delimiter
ax.set_zlim(-100, 100)
delimiter
textdata.set_index(mergecols, inplace=True, drop=False)
delimiter
User._default_manager.get(username__iexact=username)
delimiter
form = UploadForm(request.POST, request.FILES)
delimiter
canvas.grid(row=1, column=1, sticky=Tkconstants.NSEW)
delimiter
(x + y) / 2
delimiter
assert a.average() == 10
delimiter
list(map(sub, a, b))
delimiter
[x for x in b for b in a]
delimiter
Base.metadata.reflect(bind=engine)
delimiter
idx = np.arange(A.shape[0])
delimiter
list(product([]))
delimiter
fig, ax = plt.subplots()
delimiter
list(totals.items())
delimiter
ax = fig.add_subplot(111)
delimiter
my_list = json.load(f)
delimiter
test = defaultdict(defaultdict(list))
delimiter
list(set(chain(*x)))
delimiter
fig = plt.figure()
delimiter
d.update(extra)
delimiter
f.close()
delimiter
result.append(list(range(last, last + v)))
delimiter
app.register_blueprint(simple_page)
delimiter
[0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0],
delimiter
results = Queue.Queue()
delimiter
chi2.ppf(0.8, df=2)
delimiter
path = os.path.realpath(path)
delimiter
inner(x)
delimiter
print(avg(arr))
delimiter
print(df.iloc[:, (0)].values.flatten())
delimiter
C5.bar()
delimiter
r = requests.post(finalURL, data=payload)
delimiter
unittest.TextTestRunner(verbosity=1).run(testsuite)
delimiter
f.readline()
delimiter
os.system(image)
delimiter
len([(1) for _ in takewhile(lambda x: x == a[0], a)])
delimiter
output_file.writelines(merge(*files))
delimiter
deletenew_list[0][0], new_list[1][0]
delimiter
fn = lambda x: x if True else lambda x: x * x
delimiter
db.session.commit()
delimiter
socket.bind((HOST, PORT))
delimiter
ax.set_xlim([-0.1, 1.1])
delimiter
True
delimiter
buf = lines[-1]
delimiter
foo.foo()
delimiter
parser.print_help()
delimiter
now_date.replace(day=1)
delimiter
all(x == first for x in it)
delimiter
m = cv2.moments(c)
delimiter
self.level(sys.stderr)
delimiter
s.ioctl(socket.SIO_RCVALL, socket.RCVALL_OFF)
delimiter
reader = csv.reader(csvfile)
delimiter
a = np.array([0, 0, 0, 0, 0, 0])
delimiter
ax = fig.add_subplot(111)
delimiter
self.response.out.write(template.render(template_values))
delimiter
solve(z ** 2 + (1 + I) * z + (6 + 18 * I), (x, y))
delimiter
hist([t.hour for t in ts], bins=24)
delimiter
any(s in l for l in lines2 for s in search_strings)
delimiter
family.remove(i)
delimiter
suffixes = set(s[-5:] for s in x)
delimiter
model.feature_importances_
delimiter
print(pool.map(f, list(range(10))))
delimiter
f.close()
delimiter
main()
delimiter
sort_idx = np.argsort(a)
delimiter
wx.Frame.__init__(self, parent, title=title, size=(200, 100))
delimiter
leadingzerocounts[i] += 4
delimiter
pylab.show()
delimiter
lst = json.loads(string)
delimiter
np.split(np.concatenate((a, np.zeros(padding))), n)
delimiter
round(number * 20) / 20
delimiter
tar.close()
delimiter
obj.save()
delimiter
ser.close()
delimiter
browser = webdriver.Firefox()
delimiter
signal.signal(signal.SIGINT, self._signal_handler)
delimiter
max(a)
delimiter
b = Finalizable()
delimiter
np.all(np.linalg.eigvals(x) > 0)
delimiter
cv2.circle(img, (x, y), 4, (0, 255, 0), -1)
delimiter
foo.baz()
delimiter
key = lambda x: x[0]
delimiter
result
delimiter
df[:-1]
delimiter
self.frame.SetFocus()
delimiter
np.sum(np.where(m, 1.0 / p, 0.1 / p), axis=1)
delimiter
res[(i), (j), :] = [C, X, 0]
delimiter
shutil.rmtree(path)
delimiter
df[idx]
delimiter
df
delimiter
self.device.open()
delimiter
math.factorial(10)
delimiter
application = django.core.handlers.wsgi.WSGIHandler()
delimiter
getattr(obj, self.attr)
delimiter
[x for x in a_list if x[0] == 1]
delimiter
print(list(multilpy_string(l)))
delimiter
panel.to_frame().unstack().T.groupby(level=0)
delimiter
data = requests.get(url).json
delimiter
json.loads(json_data)
delimiter
time.sleep(0.05)
delimiter
zip(l, l[1:])[::2]
delimiter
self.conditions[:] = [helper(c, type, params) for c in self.conditions]
delimiter
print(mystring[:100])
delimiter
psutil.pid_exists(os.getpid())
delimiter
x = list(d.keys())
delimiter
cmat2 = scipy.sparse.csc_matrix(mat2)
delimiter
print(proc.communicate())
delimiter
print(repr(test), repr(is_valid_name(test)))
delimiter
os.chmod(path, stat.S_IWRITE)
delimiter
[parser.parse(x) for x in _split(s)]
delimiter
ax.plot(xs, ys, *args, **kwargs)
delimiter
y[:]
delimiter
fig = plt.figure()
delimiter
array([27, 27, 27, 26, 26, 26, 26, 26, 26, 26])
delimiter
pandas.set_printoptions(max_colwidth=100)
delimiter
palindromes = [(x + x[::-1]) for x in permutations(digits, k // 2)]
delimiter
doing_fd.seek(0)
delimiter
{{value}}
delimiter
abs(x) % abs(y) * (1 if x > 0 else -1)
delimiter
config.readfp(buf)
delimiter
plt.tight_layout()
delimiter
dict.__init__(self, *args, **kwargs)
delimiter
app.exec_()
delimiter
print(interestingelts[0])
delimiter
[dict(pairs) for pairs in unique]
delimiter
data_entry.save()
delimiter
print(url_string)
delimiter
self.panel.Bind(wx.EVT_PAINT, self.OnPaint)
delimiter
writer.writerows(changes)
delimiter
frame.Show()
delimiter
d[l[0]]
delimiter
serve_on_port(2222)
delimiter
plt.close()
delimiter
cov = np.array([[200, 100], [100, 200]])
delimiter
time.tzset()
delimiter
plt.contourf(Yi, Xi, Z, alpha=0.7, cmap=plt.cm.jet)
delimiter
lambda x: int(float(x))
delimiter
INSTDIR = os.path.dirname(os.path.realpath(__file__))
delimiter
ax = plt.subplot(111)
delimiter
2 * np.arcsin(np.minimum(1, np.sqrt(a))) * radius
delimiter
do_something()
delimiter
mlb.focus_set()
delimiter
plt.subplot(211)
delimiter
form.is_valid()
delimiter
auth_login(request, user)
delimiter
DO_SOMETHING()
delimiter
log()
delimiter
inverse_dict[v].append(k)
delimiter
br.set_cookiejar(cj)
delimiter
ax.axis([0, 10, 0, 255])
delimiter
t.colname == getattr(t, Table.colname.property.key)
delimiter
ax.axis([0, max_dim, 0, max_dim])
delimiter
map(joiner, sixgrams)
delimiter
plt.stem(x, y)
delimiter
settings.py
delimiter
print(newList)
delimiter
self.frames.append(ImageTk.PhotoImage(frame))
delimiter
print((a, b, c))
delimiter
plt.show()
delimiter
frame.axes.get_xaxis().set_ticks([])
delimiter
app = web.application(urls, globals())
delimiter
G.add_edge(1, 2)
delimiter
time.sleep(random.random() * 5)
delimiter
random.seed(0)
delimiter
arrow.utcnow().isoformat()
delimiter
os.read(sys.stdin.fileno(), 4096)
delimiter
len(line) == 9 and sum(line) == sum(set(line))
delimiter
m = re.search(pattern, text)
delimiter
useful = l[match[0] + 4:match[0] + 8]
delimiter
local_p.kill()
delimiter
saveglobals(savepath)
delimiter
print(response.info())
delimiter
print(type(my_date))
delimiter
self.instream.close()
delimiter
a = [[i] for i in range(5)]
delimiter
os.chdir(directorypath)
delimiter
df.index[:-1].union([df.index[-1] + pd.offsets.MonthEnd(0)])
delimiter
ax.autoscale()
delimiter
foo[index] = foo[index][0], new_value
delimiter
setattr(c, a, getattr(cls, a))
delimiter
print(value[0])
delimiter
print(row)
delimiter
do_something_with_i(i)
delimiter
mock_output.reset_mock
delimiter
br = mechanize.Browser()
delimiter
str(self.num)
delimiter
_style.fill.start_color.index
delimiter
[(b - a) for a, b in pairwise(L)]
delimiter
obj.some_method()
delimiter
ax.invert_yaxis()
delimiter
img = cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 2)
delimiter
s = match.group(0)
delimiter
System.out.println(str.toString())
delimiter
self.x == other.x
delimiter
df = df.append(data)
delimiter
self.mock_requests.get.assert_called_with(url)
delimiter
p.i, p.fitness
delimiter
d[number].append(line)
delimiter
screen.show()
delimiter
new_dict
delimiter
str(value)
delimiter
instance.delete()
delimiter
aDict = dict(zip(string.ascii_lowercase, list(range(1, 27))))
delimiter
HttpResponse(folders)
delimiter
[random.randint(low, high) for _ in range(count)]
delimiter
print(my_func.__doc__)
delimiter
QGraphicsTextItem.mouseReleaseEvent(self, event)
delimiter
ind = [i[0] for i in sorted(enumerate(b), key=lambda x: x[1])]
delimiter
suspect[k] = v
delimiter
db.delete(d)
delimiter
req.send(data)
delimiter
deactivate
delimiter
print(r.url)
delimiter
filelike.seek(0)
delimiter
my_book = Book.objects.get(pk=1)
delimiter
new_im_vec = ravel(rollaxis(im, 2))
delimiter
self._handle(*args, **options)
delimiter
print(get_max_count(l=l, num=7))
delimiter
list.activites.all()
delimiter
a[::2] = [-1, -2]
delimiter
[list(filter(str.isalpha, word)) for word in s.lower().split() if word[0].isalpha()]
delimiter
[double(x) for x in li]
delimiter
sys.exit(app.exec_())
delimiter
print(f(2))
delimiter
contourf(x, y, H, levels, cmap=cmap_lin)
delimiter
contourf(x, y, H, levels, cmap=cmap_nonlin)
delimiter
body = urllib.parse.urlencode(post_data)
delimiter
Response(post_serializer.data)
delimiter
lock.acquire()
delimiter
t[0].__sizeof__()
delimiter
self.connectToMUC()
delimiter
Br = [x, x, x, x, x, 0]
delimiter
urlparse(url).query
delimiter
im.show()
delimiter
t5 = threading.Thread(target=task5)
delimiter
json_string = json.dumps(d)
delimiter
T2()
delimiter
parser = argparse.ArgumentParser()
delimiter
p.wait()
delimiter
deleteself.d[k]
delimiter
plt.imshow(normalized)
delimiter
c = a[::2]
delimiter
chain.from_iterable(combinations(s, r) for r in range(len(s) + 1))
delimiter
pool = ThreadPool(processes=1)
delimiter
compare(mylist[i], mylist[j])
delimiter
sp = subprocess.Popen(command, shell=True, stdin=sys.stdin)
delimiter
fig = plt.figure()
delimiter
[0.0, 0.4, 0.6, 0.0, 0.0]
delimiter
sys.stdout.flush()
delimiter
FALSE
delimiter
main()
delimiter
np.inner(a, b)
delimiter
print(permutenew(l))
delimiter
print(cv2.__version__)
delimiter
fin.close()
delimiter
u = np.unique(arr)
delimiter
time.localtime().tm_isdst > 0
delimiter
list(it.product(x, mit.flatten(y)))
delimiter
set(x for x in hello if hello.count(x) == m)
delimiter
plt.gca().cla()
delimiter
session.commit()
delimiter
ssh = paramiko.SSHClient()
delimiter
func2()
delimiter
p.start()
delimiter
toss2 = toss.copy()
delimiter
datetime.utcfromtimestamp(dt64.astype(int))
delimiter
sleep(1)
delimiter
db.create_all()
delimiter
ax = fig.add_subplot(221)
delimiter
df.ix[:, (df.columns.isin(col_list))]
delimiter
self._lines.append(d)
delimiter
a = np.arange(11)
delimiter
plt.figure()
delimiter
binimg = np.zeros((rgbimg.shape[0], rgbimg.shape[1]))
delimiter
{{item.date | localtime}}
delimiter
o5.method
delimiter
plt.show()
delimiter
time.sleep(0.5)
delimiter
path, tail = os.path.split(path)
delimiter
ax = fig.add_subplot(111)
delimiter
raise NotImplementedError
delimiter
list.__init__(self)
delimiter
f1()
delimiter
re.findall(p, test_str)
delimiter
list(set(result))
delimiter
soup = BeautifulSoup(html)
delimiter
Counter((type(x), x) for x in arr)
delimiter
wkt.dumps(point)
delimiter
sample = [[1, [1, 0]], [1, 1]]
delimiter
math.floor(numpy.nextafter(x, -numpy.inf))
delimiter
print(error.__class__.__name__, error)
delimiter
plt.scatter(x[i], y[i], marker=mapping[m[i]])
delimiter
b = {name: a[name] for name in a.dtype.names}
delimiter
signal.signal(signal.SIGINT, signal_handler)
delimiter
np.random.shuffle(lst)
delimiter
ret = urllib.request.urlopen(req).read()
delimiter
msg.attach(part)
delimiter
print(pd.get_dummies(values[mask]))
delimiter
surface.write_to_png(ofile)
delimiter
cbar = plt.colorbar(CF, ticks=lvls, format=l_f)
delimiter
match.group(0)
delimiter
1 << np.arange(m)
delimiter
sum(alist)
delimiter
checkBox = QtGui.QCheckBox()
delimiter
cax = fig.add_subplot(122)
delimiter
df1.iloc[1:5, 2:4]
delimiter
new_df.index.set_levels(group_names, level=0, inplace=True)
delimiter
photoImg = ImageTk.PhotoImage(img)
delimiter
n = [x for x in n if x in string.whitespace or x not in string.printable]
delimiter
[]
delimiter
send_from_directory(cache_timeout=0)
delimiter
key, value = dict.popitem()
delimiter
preprocessed, _ = p.communicate()
delimiter
log_file.close()
delimiter
dfm_summary = pd.concat(dfs, axis=1)
delimiter
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
delimiter
B = np.split(A, np.argwhere(A[:, (0)] == 0.0).flatten()[1:])
delimiter
slice_coords_by_x(arr, xmin=1, xmax=5)
delimiter
[counts[w] for w in word_list]
delimiter
unittest.main()
delimiter
popen.wait()
delimiter
f(*args)
delimiter
AC_SUBST([PYTHON_LIBS])
delimiter
[6.49, 48.9995]
delimiter
sorted(matches, key=len, reverse=True)[0]
delimiter
print(line)
delimiter
gtk.main()
delimiter
table[table.column_name == some_value]
delimiter
graph = nx.Graph()
delimiter
Test(somevalue)
delimiter
os.chdir(curdir)
delimiter
[e for e in l if e % 2 == 0]
delimiter
pool = multiprocessing.Pool(processes)
delimiter
valves = CheckValve.objects.all()
delimiter
myusers = db.session.query(User).all()
delimiter
WINEVENT_OUTOFCONTEXT = 0
delimiter
href_tags = soup.find_all(href=True)
delimiter
img.show()
delimiter
img.execute_transforms(output_encoding=images.JPEG, quality=1)
delimiter
Clojure
delimiter
Response()
delimiter
s.bind((ADDR, PORT))
delimiter
print(G.neighbors(1))
delimiter
print(sess.run(output))
delimiter
[x for x, y in list(collections.Counter(l).items()) if y > 1]
delimiter
func(**literal_eval(params))
delimiter
possibles = globals().copy()
delimiter
d = dirname(dirname(abspath(__file__)))
delimiter
any([(i in fruit_dict1) for i in fruits])
delimiter
output = [(x, y) for x, y, label in L]
delimiter
psycopg2.connect(database=database_name)
delimiter
os.chdir(WORKDIR)
delimiter
sys.getsizeof(x)
delimiter
df
delimiter
print(r.read())
delimiter
print(deco2.__name__)
delimiter
model = Sequential()
delimiter
lst = lst[0].split()
delimiter
s = pygame.Surface((1000, 750))
delimiter
print(time.mktime(t1))
delimiter
fill_between(x, 0, l[0], color=colors[0], alpha=alpha)
delimiter
parser = argparse.ArgumentParser()
delimiter
[(item * 2) for item in x]
delimiter
fig = plt.figure()
delimiter
self.queue.pop()
delimiter
self.log_window.Show()
delimiter
im.show()
delimiter
f.seek(0)
delimiter
list(od.values())
delimiter
pprint.pprint(recur_dictify(df))
delimiter
help(x)
delimiter
map(sum, zip(a, b, c, d, e))
delimiter
print(ord(sys.stdin.read(1)))
delimiter
result
delimiter
sorted(set().union(*list(results[env].values())), key=str.lower)
delimiter
f.seek(0)
delimiter
self.queue.put(item, block=True)
delimiter
df = df.reindex(pd.DatetimeIndex(df.index), fill_value=NaN)
delimiter
print(e.message)
delimiter
user = User.objects.get(pk=1)
delimiter
data = json.loads(response.read())
delimiter
print(mechanize.urlopen(form.click()).read())
delimiter
self.assertEqual(obj.val, 2)
delimiter
im.seek(im.tell() + 1)
delimiter
abc = lambda *args, **kwargs: myFunction(*args, **kwargs)
delimiter
plt.show()
delimiter
parallelismPool.close()
delimiter
ax.cla()
delimiter
big_np_array = np.array(big_array)
delimiter
ax1 = fig1.add_subplot(111)
delimiter
writer.writerow(record)
delimiter
-javascript
delimiter
pl.ylim(0.0, 1.0)
delimiter
cp / usr / bin / pdb / path / to / virtual / env / bin
delimiter
print(sys.path)
delimiter
pool = multiprocessing.Pool()
delimiter
src_dt = src_tz.localize(dt)
delimiter
b.extend([i, i])
delimiter
mask = np.in1d(A, B)
delimiter
cv2.circle(mask, (i[0], i[1]), i[2], (255, 255, 255), -1)
delimiter
img.ConvertToBitmap()
delimiter
line = f.stdout.readline()
delimiter
print(bisect(b, a))
delimiter
fb.append(str(n))
delimiter
os.write(1, a.tostring())
delimiter
model = Sequential()
delimiter
plot_confusion_matrix(df_conf_norm)
delimiter
new_list.index(to_find.lower())
delimiter
pcap_lookupnet(dev, ctypes.byref(net), ctypes.byref(mask), errbuf)
delimiter
new2 = np.array([block.T for block in blocks]).T
delimiter
button.pack()
delimiter
type(a)
delimiter
r = sqrt(2 * random.uniform(0, 1) / A + r_min * r_min)
delimiter
type(img_str)
delimiter
signal.signal(signal.SIGALRM, old_handler)
delimiter
worksheet.write(row, col, text)
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_IP)
delimiter
print(settings.SIMPLE_CONF)
delimiter
print(x)
delimiter
gen_move(list(range(10))[::-1])
delimiter
assert np.allclose(expected, result)
delimiter
d = {}
delimiter
self.sizer.Add(self.inner_sizer, 1, wx.ALL | wx.EXPAND, 20)
delimiter
browser = webdriver.Firefox()
delimiter
im.show()
delimiter
time.sleep(10)
delimiter
label.set_fontproperties(ticks_font)
delimiter
g.kill()
delimiter
mapping = dict(zip(a, b))
delimiter
data = ctypes.POINTER(ctypes.c_char)()
delimiter
save_file.write(str(tweet))
delimiter
nil
delimiter
ii = df[pd.notnull(df.C)].index
delimiter
self.timeout = timeout
delimiter
np.setdiff1d(a1_rows, a2_rows).view(a1.dtype).reshape(-1, a1.shape[1])
delimiter
pos = f.tell()
delimiter
time.sleep(1)
delimiter
res = next(idx for idx, (x, y) in coupled_idx if x != y)
delimiter
parentdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
delimiter
y_pred = [0, 0, 2, 1, 0, 2, 1, 0, 2, 0, 2, 2]
delimiter
sum2 = sum((row1 * row2.T).data)
delimiter
fork()
delimiter
file2.close()
delimiter
plt.show()
delimiter
test()
delimiter
plt.plot(x, y)
delimiter
ax.plot(dates, data)
delimiter
f(u(n - 1))
delimiter
new_stdout.seek(0)
delimiter
logging.getLoggerClass().root.handlers[0].baseFilename
delimiter
cols = df.columns.values.tolist()
delimiter
vals = [g(i) for i in range(100)]
delimiter
a.index(a.lstrip()[0])
delimiter
string[i:i + len(keyword) + 5 + 1]
delimiter
ax.pbaspect = [2.0, 0.6, 0.25]
delimiter
c.setopt(c.HEADERFUNCTION, retrieved_headers.store)
delimiter
app = flask.Flask(__name__)
delimiter
ssh = paramiko.SSHClient()
delimiter
both.reset_index(inplace=True)
delimiter
output.close()
delimiter
d.setdefault(a, {}).setdefault(b, {}).setdefault(c, []).append(value)
delimiter
self.response.set_status(404)
delimiter
vt[:, (0)]
delimiter
hey()
delimiter
group.save()
delimiter
ds.addSample((1, 1), (0,))
delimiter
np.linalg.solve(a, b)
delimiter
result = collections.defaultdict(list)
delimiter
total = sum(c.values())
delimiter
threading.Thread(target=listen_to_audio).start()
delimiter
console = logging.StreamHandler()
delimiter
plt.plot(list(range(10)), rasterized=True)
delimiter
numbers = [aux[x] for x in row]
delimiter
plt.yticks(positions, labels)
delimiter
ax.xaxis.set_minor_locator(hours)
delimiter
substrings.sort(key=len)
delimiter
python - i
delimiter
qPlg.append(QPointF(*p))
delimiter
today = datetime.date.today()
delimiter
np.asarray(0 for i in range(10))
delimiter
plt.subplots_adjust(hspace=0.5, wspace=0.001)
delimiter
a[-1].append(5)
delimiter
print(df)
delimiter
out.write(largedata)
delimiter
round(VALUE * 2.0, 1) / 2.0
delimiter
os.close(wpipe)
delimiter
main()
delimiter
t.start()
delimiter
deleteself.__dict__[key]
delimiter
conn.close()
delimiter
s = a.sum(axis=(0, 1, 2))
delimiter
msg.attach(part)
delimiter
[[i for i in sublist if i < n][:5] for sublist in ls]
delimiter
fig = plt.figure()
delimiter
numpy.sin(x)
delimiter
df = df.astype(object)
delimiter
window.show_all()
delimiter
app = wx.PySimpleApp()
delimiter
scipy.sparse.linalg.spsolve(coeff_mat, np.ones(2 * (n - 1)) * n)
delimiter
dictonary[k].append(file)
delimiter
f = lambda x: 2 * x
delimiter
np.arange(10)[10:-1:-1]
delimiter
s.add(x)
delimiter
substrings.sort(key=lambda s: len(s))
delimiter
first_record = next(all_records)
delimiter
sh.write(n, 1, v)
delimiter
d[a][b] = c
delimiter
contents.sort(key=itemgetter(2))
delimiter
date = datetime.datetime.fromtimestamp(seconds + sub_seconds)
delimiter
func(cpy)
delimiter
handler.setFormatter(formatter)
delimiter
f.write(imgdata)
delimiter
fig, ax = plt.subplots()
delimiter
len(df[~pd.to_datetime(df.index).isin(dropThis)])
delimiter
pylab.plot(t)
delimiter
peasant.badly_hurt()
delimiter
ax.plot(list1)
delimiter
serializer = UserSerializer(request.user)
delimiter
deleteordered_dict[k]
delimiter
BASE_DIR = os.path.dirname(os.path.dirname(__file__))
delimiter
[c.__name__ for c in cls.__subclasses__()]
delimiter
raise Exception()
delimiter
print(a[:10])
delimiter
zip(a, b)
delimiter
d[i] = np.sum(a[(i), b[i]:c[i]])
delimiter
sys.exit(0)
delimiter
glVertex2i(10, 110)
delimiter
result.append(list[index])
delimiter
max(result, key=len)
delimiter
list(map(ord, list(L)))
delimiter
sorted(s) == sorted(t)
delimiter
mlab.pipeline.iso_surface(src, contours=[s.max() - 0.1 * s.ptp()])
delimiter
plot(x, y)
delimiter
tk.Frame.__init__(self, parent, *args, **kwargs)
delimiter
gevent.sleep(r)
delimiter
wrapper1
delimiter
x += a * np.cos(2 * np.pi * f0 * t + 0.11)
delimiter
img = img.resize((160, 240), Image.ANTIALIAS)
delimiter
conn.accept()
delimiter
pprint({k: getattr(creator.__code__, k) for k in dir(creator.__code__)})
delimiter
counter.save()
delimiter
(d[i] for i in k)
delimiter
download_ftp_tree(ftp, remote_dir, local_dir)
delimiter
shutil.rmtree(target)
delimiter
df = df.append(r)
delimiter
os.unlink(f_path)
delimiter
list(map(pow, list(range(10)), repeat(2)))
delimiter
mylist[n // 10].append(n)
delimiter
df.convert_objects(convert_numeric=True)
delimiter
df = pd.Panel.from_dict(d).to_frame()
delimiter
cv.Circle(color_image, center_point, 20, cv.CV_RGB(255, 255, 255), 1)
delimiter
print(countOccurencesAtTheEndOfTheList([1, 2, 1, 1, 1, 1, 1, 1]))
delimiter
plt.clf()
delimiter
auth.login(request, user)
delimiter
lda = gensim.models.ldamodel.LdaModel(corpus=mm, num_topics=100)
delimiter
{{form.as_p}}
delimiter
project.some_func()
delimiter
[x for t in zip(a, reversed(a)) for x in t][:len(a)]
delimiter
event.Skip()
delimiter
OrderedDict.__init__(self, *a, **kw)
delimiter
df.iloc[7:9, (5)] = np.nan
delimiter
chardet_detector = UniversalDetector()
delimiter
lines = ax.plot(np.arange(1000))
delimiter
session.commit()
delimiter
chardet_detector.reset()
delimiter
set.intersection(*sets)
delimiter
np.where(x ** 2 + y ** 2 > 1e-10, x * y / (x ** 2 + y ** 2), 0.5)
delimiter
sys.path.append(egg_path)
delimiter
hzfile.printdir()
delimiter
print(words == sorted(words, key=str.lower))
delimiter
dict(CharCounter(text))
delimiter
(Convert(i, base) for i in range(start, end, step))
delimiter
assert type(session.query(Foo).first()) is ReadonlyFoo
delimiter
Doc.save()
delimiter
help(cherrypy.engine.exit)
delimiter
picture.getpixel((x, y))
delimiter
stoppool.start()
delimiter
mpmath.besseli(0, 1714)
delimiter
self.traceback = traceback.extract_stack()[-2]
delimiter
os.remove(str(filename))
delimiter
insert_sort(ascend_list, i, lambda x, y: x[1:] >= y[1:])
delimiter
rpy2.robjects.numpy2ri.activate()
delimiter
df = pd.concat([s1, s2], axis=1).ffill().dropna()
delimiter
self.value += 1
delimiter
out[:, :, (mask)] = B[:, :, :, ::-1][:, :, (mask[:, ::-1])]
delimiter
dict((k, v[v < 0].to_dict()) for k, v in compat.iteritems(data))
delimiter
Frame.__init__(self, master)
delimiter
self._window.show()
delimiter
f(1, 2)
delimiter
parent_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
delimiter
panel.SetSizer(sizer)
delimiter
time.sleep(1)
delimiter
print(etree.tostring(child))
delimiter
run(reloader=True)
delimiter
f = urllib.request.urlopen(req)
delimiter
cbar.set_clim(-2.0, 2.0)
delimiter
current.append(item)
delimiter
nonzero(t == 8)[0][0]
delimiter
print(f.split(d)[0] + d[0])
delimiter
print(stealth_check[key])
delimiter
s.close()
delimiter
form.save()
delimiter
df
delimiter
horoscope.check_all()
delimiter
figure()
delimiter
show()
delimiter
cursor = db.execute(sql % params)
delimiter
q.write(str)
delimiter
session.rollback()
delimiter
ax.imshow(field1, cmap=plt.cm.YlGn, vmin=_min, vmax=_max)
delimiter
fields = list(addresses_table.columns.keys())
delimiter
words = string1.split()
delimiter
print(submission.url)
delimiter
nsmallest(4, list(range(len(values))), key=values.__getitem__)
delimiter
0.08400000000000002, 0.9999999882280098
delimiter
shapesMatch([(0, 0), (1, 1), (0, 2), (-1, 1)], rectangle)
delimiter
unittest.main()
delimiter
ged.close()
delimiter
r = requests.get(my_url, cookies=cookies)
delimiter
ax1 = fig.add_subplot(111)
delimiter
out = np.mod(c, 2)
delimiter
cursor = db.cursor()
delimiter
getattr(self.base, name)
delimiter
newList = np.clip(oldList, 0, 255)
delimiter
sys.stdout.write(c)
delimiter
exit.__str__()
delimiter
gy, gx = np.gradient(Z, 0.05, 0.05)
delimiter
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
DD = datetime.timedelta(days=90)
delimiter
self.edges.setdefault(n2, []).append((n1, w))
delimiter
a[numpy.where(a > 2)]
delimiter
s.unique()
delimiter
a = np.array([0, 0.1, 0.5, 1])
delimiter
d = defaultdict(list)
delimiter
r = Ribbon(root)
delimiter
myOjbect.doStuf().doMoreStuf().goRed().goBlue().die()
delimiter
plt.grid()
delimiter
np.diag(d - 4) + 4
delimiter
response
delimiter
mapping = map(chr, list(range(256)))
delimiter
[[x0, y0] for x0 in x for y0 in y]
delimiter
forms = [f for f in br.forms()]
delimiter
isinstance([], (tuple, list, set))
delimiter
evensList = [x for x in myList if x % 2 == 0]
delimiter
fig.canvas.mpl_disconnect(cid)
delimiter
plt.figure(figsize=(20, 8))
delimiter
ax.add_artist(bbox_image)
delimiter
time.sleep(1)
delimiter
foo.bar()
delimiter
CTS, DSR, XXX, YYY, ZZZ = list(range(5))
delimiter
text(x, y, s, fontsize=12)
delimiter
s.close()
delimiter
queries &= Q(**{key: options[key]})
delimiter
G2.add_nodes_from(nodes)
delimiter
self.paths = []
delimiter
distances = numpy.linalg.norm(np_cell[1] - srcPos)
delimiter
[]
delimiter
compiler = msvc
delimiter
metadata.create_all()
delimiter
string.ascii_lowercase
delimiter
list(filter(os.path.isfile, os.listdir(os.curdir)))
delimiter
dis.dis(myfunc)
delimiter
ax = plt.gca()
delimiter
f(*args, **kwargs)
delimiter
print(sum(len(mystr) for mystr in strings))
delimiter
list(d.keys())
delimiter
ax.figure.canvas.draw()
delimiter
fh.seek(0)
delimiter
ll = list(itertools.chain.from_iterable((e, e) for e in l))
delimiter
screen = pygame.display.set_mode((500, 500), HWSURFACE | DOUBLEBUF | RESIZABLE)
delimiter
queryset = Town.objects.all()
delimiter
y = myodeint(lambda y, t: func(y, t, alpha), [1, 0, 0], t)
delimiter
title = models.CharField(max_length=100)
delimiter
ax[1].add_collection(collection)
delimiter
randint(100, 999)
delimiter
dictpsl[key].append(pslrc)
delimiter
li = list(filter(condition, li))
delimiter
my_array = list(filter(lambda x: x != value_to_remove, my_array))
delimiter
matrix[0][2]
delimiter
initial_array += increments[::-1].cumsum()[::-1]
delimiter
s2.reset_index(inplace=True, drop=True)
delimiter
t = np.linspace(0, 1, 6)
delimiter
entry_list = [entry.title.text for entry in feed.entry]
delimiter
print([1, 0] in chain(*sample))
delimiter
module.workflow_set.filter(trigger_roles__id__exact=self.role.id, allowed=True)
delimiter
df
delimiter
sorted(data) == sorted(data2)
delimiter
self.lbl.after(1000, self.updateGUI)
delimiter
sorted(list(range(len(vals))), key=vals.__getitem__)
delimiter
self.values.append(value)
delimiter
session.put()
delimiter
fig = plt.figure(1)
delimiter
eval(strab)
delimiter
simplejson.load(f)
delimiter
item, = singlet_list
delimiter
self.rfile.close()
delimiter
[[11, 12], [21, 21]]
delimiter
things.filter(category=category)
delimiter
plt.imshow(x, cmap=mpl.cm.bone)
delimiter
s.remove(1)
delimiter
win.idlok(True)
delimiter
win.leaveok(True)
delimiter
app.run()
delimiter
output, err = process.communicate()
delimiter
a = 1
delimiter
reactor.connectTCP(host, port, factory)
delimiter
pdf.getNumPages()
delimiter
plt.draw()
delimiter
termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
delimiter
item.save()
delimiter
cur = conn.cursor()
delimiter
print(np.random.dirichlet(np.ones(10) * 1000.0, size=1))
delimiter
ax = fig.add_subplot(111)
delimiter
symmetric_dec(body, session_key)
delimiter
print(df.head())
delimiter
screen.refresh()
delimiter
random.shuffle(tmp)
delimiter
child1()
delimiter
child2()
delimiter
sess.run(outputs, feed_dict=feed)
delimiter
Y = Y + Z[::-1] - Z[-1]
delimiter
self.crawler.stop()
delimiter
np.roll(a, 2)
delimiter
sorted(list(totals))
delimiter
g = (i for i in a + b)
delimiter
new_df
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
my_array[i] = el
delimiter
self.glade.add_from_file(self.gladefile)
delimiter
list(10 ** pos * val for pos, val in enumerate(reversed(test)))
delimiter
app = Flask(__name__)
delimiter
new_file.write(line.replace(pattern, subst))
delimiter
app.yaml
delimiter
part.get_payload()
delimiter
result.append(row)
delimiter
Wire.write(number)
delimiter
ax.figure.canvas.draw()
delimiter
tree.delete(i)
delimiter
pl.xlim(0.0, 100.0)
delimiter
print(form.is_valid())
delimiter
feeder_lock_object.release()
delimiter
ao[:-1, 1:] += ai[1:, :-1]
delimiter
self.dictset = {}
delimiter
(A != 0).cumsum(1).argmax(1)
delimiter
list(results)
delimiter
print(s.query(A).filter(A.boolean).all())
delimiter
self._callfunc(self, *args, **kwargs)
delimiter
print(ET.tostring(dict_to_etree(d)))
delimiter
slice1.append(a, b)
delimiter
ws = wb.active
delimiter
outdict[k.lower()] = v.lower()
delimiter
g.add_edge(2, 4)
delimiter
np.in1d(test, states)
delimiter
list(res)
delimiter
wordCount = Counter(words)
delimiter
ax = plt.gca()
delimiter
lgd = ax.legend(loc=9, bbox_to_anchor=(0.5, -0.02))
delimiter
tty.tcsetattr(stdin_fileno, tty.TCSANOW, old_ttyattr)
delimiter
test.main()
delimiter
C.reshape([4, 2, 2])
delimiter
qjup
delimiter
self.popitem(last=False)
delimiter
setattr(cls, name, decorator(fn))
delimiter
print(r.json())
delimiter
signal.alarm(0)
delimiter
d = {k: [] for k in range(10)}
delimiter
result.append(L.pop())
delimiter
a.remove(e)
delimiter
plt.show(f)
delimiter
ax.add_artist(p)
delimiter
proc.join()
delimiter
ts = (dt_with_tz - datetime(1970, 1, 1, tzinfo=pytz.utc)).total_seconds()
delimiter
self.columnconfigure(0, weight=1)
delimiter
ShowAppsView.as_view()(self.request)
delimiter
random.shuffle(keysShuffled)
delimiter
chr(97)
delimiter
list1.append(word)
delimiter
os.getcwd()
delimiter
unconverged = np.ones(shape=arr.shape, dtype=bool)
delimiter
self.data[k]
delimiter
log.setLevel(logging.DEBUG)
delimiter
A = A[0]
delimiter
c = {v: k for k, v in list(a.items())}
delimiter
console.setLevel(logging.INFO)
delimiter
all(k in dic2 for k in dic1) and all(k in dic1 for k in dic2)
delimiter
type(f)
delimiter
df = df.mul(df.columns.to_series(), axis=1)
delimiter
self.finished.emit()
delimiter
plt.figure(figsize=(width, height))
delimiter
IedConnection_getServerDirectory.restype = c_void_p
delimiter
print(fib(i))
delimiter
time.sleep(poll_seconds)
delimiter
df = pd.DataFrame(array, columns=columns)
delimiter
nums.append((item, n - item))
delimiter
line_list = [line for line in filtered_soup]
delimiter
i += 1
delimiter
df[subset[subset.isin(myList)].stack().duplicated().unstack().any(1)]
delimiter
platform.release()
delimiter
test.main()
delimiter
print(res.queryString())
delimiter
[d[:4] for d in MyArray]
delimiter
json.loads(page_detail_string)
delimiter
{a[d]: todict([x for x in X if x[d] == a[d]], d + 1) for a in lst}
delimiter
print(self.recv(8192))
delimiter
sorted(s, key=lambda c: (-s.count(c), s.index(c)))[0]
delimiter
request.FILES.update(files)
delimiter
surf2 = pygame.Surface((200, 200))
delimiter
xticks[-1].label1.set_visible(False)
delimiter
list(pkgutil.iter_modules())
delimiter
groups = itertools.groupby(a, key=lambda x: x[1])
delimiter
S[int(line[0]), int(line[1])] = True
delimiter
df.B.plot(ax=plt.gca())
delimiter
fig = plt.figure()
delimiter
sys.exit(1)
delimiter
imgfile.close()
delimiter
fig, axes = plt.subplots(nrows=2, ncols=4, figsize=(12, 5))
delimiter
db.session.add(g)
delimiter
now = datetime.now()
delimiter
time.sleep(0.2)
delimiter
m = scipy.sparse.coo_matrix((data, (r, c)), shape=(100000, 40000))
delimiter
fig, ax = plt.subplots()
delimiter
sys.path.insert(0, root_path)
delimiter
server.ping()
delimiter
test_maybe_recursive()
delimiter
fl.close()
delimiter
pilImage = Image.open(StringIO(rawImage))
delimiter
sorted_data = sorted(list(data.items()), key=operator.itemgetter(1))
delimiter
os.getcwd()
delimiter
fig = plt.figure()
delimiter
[c for c in foo if c not in temp and (temp.add(c) or True)]
delimiter
sys.stdout.write(line)
delimiter
out.putpixel((x, y), color)
delimiter
INSTALLED_APPS = ()
delimiter
numpy.array(imc)
delimiter
print(resp.status_code, resp.text, resp.headers)
delimiter
response = requests.get(url)
delimiter
sys.path.insert(0, virtual_site)
delimiter
polycube = numpy.transpose(polycube, (1, 2, 0))
delimiter
instance.save()
delimiter
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
delimiter
sys.exit(9009)
delimiter
pylab.scatter([p[0] for p in pp], [p[1] for p in pp])
delimiter
time.sleep(1)
delimiter
np.histogram(sampling, bins=np.arange(len(A) + 1))[0]
delimiter
ao[:-1, :] += ai[1:, :]
delimiter
server_sock.listen(1)
delimiter
float(MyClass())
delimiter
p.kill()
delimiter
print(json.dumps(doc.identity.addr.reprJSON(), cls=ComplexEncoder))
delimiter
flat_index = coo[:, (0)] * np.max(coo[:, (1)]) + coo[:, (1)]
delimiter
triplets = [set(x) for x in triplets]
delimiter
npi.group_by(a[:, :2]).split(a)
delimiter
temp.sort()
delimiter
print(np.ma.masked_invalid(a))
delimiter
time.sleep(1)
delimiter
Z = np.array(mean_data)[:, (2)]
delimiter
e1 = np.array([1, 0, 0])
delimiter
assert get_current_session()
delimiter
Z = f(np.dstack(np.meshgrid(x, y)))
delimiter
print(e.gmm())
delimiter
x = np.random.rand(10)
delimiter
flatten(Cards)
delimiter
self.edges.setdefault(n1, []).append((n2, w))
delimiter
content = browser.page_source
delimiter
gca().set_autoscale_on(False)
delimiter
[i for i, ltr in enumerate(s) if ltr == ch]
delimiter
ax.add_patch(patches.Rectangle(pos, w, h, color=c))
delimiter
b.grab_release()
delimiter
opencvImage = cv2.cvtColor(numpy.array(pil_image), cv2.COLOR_RGB2BGR)
delimiter
dict(MyDict.lists())
delimiter
conn.close()
delimiter
sys.getsizeof(b)
delimiter
writer = csv.writer(output)
delimiter
(abs(arr_f - a) < t).any()
delimiter
sum_over_n[(-1) ** n * x ** (2 * n) / math.factorial(2 * n)]
delimiter
dataFrame.pow(timeSeries, axis=0)
delimiter
args = parser.parse_args()
delimiter
writer = csv.writer(outfile)
delimiter
show(0)
delimiter
f = urllib.request.urlopen(req)
delimiter
turtle.Screen().exitonclick()
delimiter
Resources.objects.filter(user=self.request.user.username)
delimiter
self.finished.emit()
delimiter
sys.exit()
delimiter
data = np.array(imc)
delimiter
deletea[:]
delimiter
reactor.run()
delimiter
dc.SetFont(self.GetFont())
delimiter
signal.signal(signal.SIGINT, self.exit_gracefully)
delimiter
com.convert_robj(rdf)
delimiter
InitializeComponent()
delimiter
max(groups, key=_auxfun)[0]
delimiter
df = pd.DataFrame(data_as_2d_ndarray)
delimiter
block_reduce(arr * area_cell, block_size=(2, 2), func=np.ma.mean)
delimiter
t = np.random.randint(0, 50, 500)
delimiter
rel_path.split(os.path.sep)
delimiter
print(match)
delimiter
a = Finalizable()
delimiter
[x for x in s if not x in rm]
delimiter
a[subset_a] += 1
delimiter
print(delta.total_seconds())
delimiter
ei = np.where(em.flat)[0]
delimiter
wx.Panel.__init__(self, parent)
delimiter
plt.close()
delimiter
raise NotImplementedError
delimiter
random.shuffle(keys)
delimiter
env.forward_agent = True
delimiter
os.path.splitext(f)
delimiter
plt.close()
delimiter
checkIP.__file__
delimiter
df.sort_index()
delimiter
hash((self.i, self.k, self.j))
delimiter
self.cardsdiscarded += 1
delimiter
--nologcapture
delimiter
leg.set_zorder(1)
delimiter
img = Image.open(file)
delimiter
outfile.write(text)
delimiter
df = pd.DataFrame(dict([(k, pd.Series(v)) for k, v in list(sample.items())]))
delimiter
setattr(s, name, value)
delimiter
plt.xticks(list(xMap.values()), list(xMap.keys()))
delimiter
df = df1.append(df2)
delimiter
[[my_sum]]
delimiter
split_list = [listo[i:i + n] for i in range(0, len(listo), n)]
delimiter
t.start()
delimiter
example.split()
delimiter
layout = QtGui.QHBoxLayout()
delimiter
assert isinstance(d, dict) and len(d) == 1
delimiter
stream_index = numpy.array(stream_index).repeat(repeat_count)
delimiter
app.run(True, False)
delimiter
print(df.loc[name])
delimiter
data
delimiter
foo()
delimiter
print(matchobj.group(1))
delimiter
button.Bind(wx.EVT_BUTTON, on_button)
delimiter
l.setLevel(logging.INFO)
delimiter
numpy.linalg.matrix_rank(A)
delimiter
np.random.seed()
delimiter
mythread = threading.Thread(target=get_user_input, args=(user_input,))
delimiter
line = f.readline()
delimiter
id = Column(Integer, primary_key=True)
delimiter
my_subprocess = subprocess.Popen(args)
delimiter
B = np.array([2, 4, 6, 8])
delimiter
list(range(0, len(list1), 2))
delimiter
areas.apply(multiply_by_demand)
delimiter
curses.echo()
delimiter
con.close()
delimiter
tk.Frame.__init__(self, master)
delimiter
decorator
delimiter
df.Stake[i] = 2 * df.Stake[i - 1]
delimiter
X.sum(axis=1).sum(axis=0)
delimiter
repr(test.make_fptr())
delimiter
self.assertEqual(1, 1)
delimiter
ax = fig.add_subplot(111)
delimiter
word[0].isupper()
delimiter
func()
delimiter
layout2.addWidget(frame2)
delimiter
final_ensemble.estimators_ = []
delimiter
plt.scatter(a, b)
delimiter
args = parser.parse_args()
delimiter
plt.show()
delimiter
map(list, combinations(A, 2))
delimiter
socket.inet_pton(socket.AF_INET6, address)
delimiter
x_normed = (x - x.min(0)) / x.ptp(0)
delimiter
root = tkinter.Tk()
delimiter
photo.close()
delimiter
id = Column(Integer, primary_key=True)
delimiter
min(min(l_one), min(l_two))
delimiter
self.fail(msg)
delimiter
lines.append(inf.readline())
delimiter
main()
delimiter
dict()
delimiter
np.ones(4, dtype=int)
delimiter
handler.setFormatter(formatter)
delimiter
c.most_common()
delimiter
sol[0][0] + sol[0][1] * I
delimiter
print(np.all(insample == insample_mp))
delimiter
tagger = nltk.tag.UnigramTagger(model=model, backoff=default_tagger)
delimiter
print(sum(takewhile(lambda x: x < p90, a)))
delimiter
ax.yaxis.set_major_formatter(matplotlib.ticker.FormatStrFormatter(format))
delimiter
matches.extend(os.path.join(dirpath, x) for x in dirnames + filenames)
delimiter
x = sum(similarity(i, j) for i in a for j in b)
delimiter
df = df.apply(lambda x: np.random.shuffle(x) or x, axis=1)
delimiter
l.extend(t2)
delimiter
A = np.array([[0, 1, 0, 0, 1], [0, 0, 1, 1, 1], [1, 1, 0, 1, 0]])
delimiter
self.lock.acquire()
delimiter
len(list_of_ids)
delimiter
pool.join()
delimiter
list(flatten(lis))
delimiter
s = s.lower()
delimiter
a = array(your_list)
delimiter
[]
delimiter
queryset = MyModel.objects.all()
delimiter
ax.add_artist(a)
delimiter
list(zip(a, b, grouper(c, 2), d))
delimiter
startfile(os.getcwd())
delimiter
print(url)
delimiter
form = ContactForm()
delimiter
fig = plt.figure()
delimiter
text = file.read()
delimiter
math.sqrt((self.x - x) ** 2 + (self.y - y) ** 2 + (self.z - z) ** 2)
delimiter
np.flatnonzero(goal)
delimiter
rollaxis(im, 2)
delimiter
np.fill_diagonal(coocc.values, 0)
delimiter
print((subject.text, subject.head.text, numbers[0].text))
delimiter
self.raise_()
delimiter
Bar.objects.filter(pk=foo.id).update(a_id=bar.id)
delimiter
set(second_list) - set(x[0] for x in first_list)
delimiter
map(ord, letters)
delimiter
time.time() - startTime
delimiter
list(set(x) - set(y))
delimiter
execlist[index][4] = mydelay
delimiter
mlen = ctypes.c_ulonglong(len(message))
delimiter
10 * np.cos(np.hypot(x, y) / np.sqrt(2) * 2 * np.pi * cycle)
delimiter
[e] * 4
delimiter
np.rot90(m, 1)
delimiter
model.add(Dropout(0.2, input_shape=(60,)))
delimiter
a = [list(item) for item in a]
delimiter
array[:] = t
delimiter
self.agg_log.setLevel(logging.DEBUG)
delimiter
self.setPixmap(image)
delimiter
xl.Visible = True
delimiter
ax.set_xlim(xlim)
delimiter
G = nx.MultiGraph()
delimiter
p.some_method()
delimiter
p = subprocess.Popen(my_cmd, shell=True)
delimiter
self._stop.set()
delimiter
pat.findall(s)
delimiter
sizer.Add(self.panel, 1, wx.EXPAND)
delimiter
len(x) * (len(x) - 1) * 2
delimiter
time.sleep(0.2)
delimiter
new_list = []
delimiter
time.sleep(2)
delimiter
mock_sgc_obj = mock.Mock()
delimiter
time.sleep(interval)
delimiter
my_lib.py
delimiter
y = [1, 2, 0, 1, 1, 2]
delimiter
print(paths[min_index], path_distances[min_index])
delimiter
is_linear(eq1, [a, c])
delimiter
self.__setattr__(attr, value)
delimiter
psutil.cpu_count()
delimiter
parser.print_help()
delimiter
type(Foo.__init__)
delimiter
ax.xaxis_date()
delimiter
fig.show()
delimiter
pool.terminate()
delimiter
intvals[bisect.bisect(intvals, 42000)]
delimiter
parser.parse_args([])
delimiter
array([[0.0, 1.206, 1.58]])
delimiter
print(xy_to_index(x, y))
delimiter
length = len(list(g))
delimiter
browser = webdriver.Firefox()
delimiter
aware_utc_dt = utc_dt.replace(tzinfo=pytz.utc)
delimiter
np.split(lst, np.where(np.diff(lst) < 0)[0] + 1)
delimiter
path_names = [os.path.basename(path) for path in paths]
delimiter
np.array([row[:num_cols] for row in arr[:num_rows]])
delimiter
ssh_client.connect(host)
delimiter
user.save()
delimiter
new_class._ordered_items.sort(key=lambda item: item[1].creation_counter)
delimiter
br.select_form(nr=0)
delimiter
plt.figure(1)
delimiter
f1.close()
delimiter
any(t in k for k in df[self.target])
delimiter
root = tk.Tk()
delimiter
map(str.lower, l)
delimiter
a[0] + a[1] + a[2]
delimiter
self.show()
delimiter
ContentType.objects.get_for_model(obj)
delimiter
np.shape(x)
delimiter
settings.py
delimiter
bubble_sort_2nd_value(tuples_list)
delimiter
print(hash(frozenset(lines)))
delimiter
YS = np.asarray(YS)
delimiter
ZS = np.asarray(ZS)
delimiter
min(mywords, key=len)
delimiter
new_list = []
delimiter
json.load(f)
delimiter
numpy.set_printoptions(precision=16)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
print(0.0 <= x <= 0.5)
delimiter
array([[106, 140], [178, 220]])
delimiter
elem.clear()
delimiter
tag.attrs.append((attr, val))
delimiter
a2.append(decimal.Decimal(s))
delimiter
s.close()
delimiter
print((a, b, c, d, e))
delimiter
outF.close()
delimiter
suite = unittest.TestSuite()
delimiter
conn = psycopg2.connect(conn_string)
delimiter
xml = ET.fromstring(xmlData)
delimiter
r = [(a, b) for a, b in zip(l, l[1:] + l[:1])]
delimiter
any(x is False for x in [a, b, c, d])
delimiter
newSingle.getHeader().setField(fix.SendingTime(1))
delimiter
map(lambda a: a[0], takewhile(len, iterate(lambda y: f(y[0]), [x])))
delimiter
self.redraw(event.x, event.y)
delimiter
all(isinstance(e, int) and e > 0 for e in [1, 0, 1])
delimiter
ax2.xaxis.set_major_locator(MultipleLocator(2))
delimiter
dicts = [{k: v.lower() for k, v in list(d.items())} for d in messages]
delimiter
{k: sum(d[k] for d in dict1) for k in dict1[0]}
delimiter
print(args.benchmark)
delimiter
ax2.set_xticks(new_tick_locations)
delimiter
bla = globals()[name]
delimiter
a.append(k)
delimiter
file_name = file_name + 1
delimiter
sys.path.append(plugin_path)
delimiter
deletea[100:99999]
delimiter
scipy.stats.norm(0, 1).cdf(0)
delimiter
plt.show()
delimiter
aView = np.ascontiguousarray(arr).flatten().view(mydtype)
delimiter
regex = re.compile(pat)
delimiter
print(df.groupby(df.index).applyParallel(tmpFunc))
delimiter
print([([k] + v) for k, v in list(dic.items())])
delimiter
args = parser.parse_args()
delimiter
print(map(f, [100, 50, 1000, 150]))
delimiter
ax.set_xticklabels(())
delimiter
new_d.append(x)
delimiter
zratings = bcolz.ctable.fromdataframe(ratings)
delimiter
app = Flask(__name__)
delimiter
foo_list.append(lambda : bar.func1(100))
delimiter
a[[0, 1], 1, 2]
delimiter
x.__exit__()
delimiter
print(zip(rlist1, rlist2))
delimiter
{{adminform.form.non_field_errors}}
delimiter
f(*args, **kargs)
delimiter
print(str(q.statement.compile(dialect=postgresql.dialect())))
delimiter
keyname = int(keyname)
delimiter
print(np.random.rand())
delimiter
f.close()
delimiter
w.writeheader()
delimiter
result.append(a)
delimiter
dates_dict = collections.defaultdict(list)
delimiter
A().my_dir()
delimiter
os.path.isdir(d)
delimiter
l.set_option(ldap.OPT_REFERRALS, 0)
delimiter
MyKlass().func1()
delimiter
instance = form.save(commit=False)
delimiter
db.session.add(user)
delimiter
today = date.today()
delimiter
self.context.leave()
delimiter
print(sum(li[:i + 1]))
delimiter
x[-1:0:-1]
delimiter
print(s.recvfrom(65565))
delimiter
code.interact()
delimiter
req = urllib.request.Request(url, urllib.parse.urlencode(params), http_header)
delimiter
d = OrderedDict(sorted(list(data.items()), key=itemgetter(1)))
delimiter
bytes = (ord(b) for b in f.read())
delimiter
raise KeyError(key)
delimiter
x = df.ix[:, 5:].sort_values(by=0, ascending=False, axis=1)
delimiter
frame = pd.concat(list_)
delimiter
print(list(grp))
delimiter
ax1.xaxis.set_major_formatter(xticks)
delimiter
print(loc_dt.strftime(fmt))
delimiter
array = numpy.array(((2, 2), (2, -2)))
delimiter
1 / sqrt(2 * pi) * exp(-x ** 2 / 2)
delimiter
pool.close()
delimiter
plt.plot(x, y)
delimiter
np.arange(10)[10:-5:-1]
delimiter
print(next(second_it))
delimiter
inner_func
delimiter
df.isin([1, 2])
delimiter
zip(*([iter(iterable)] * n))
delimiter
obj.foo.__func__
delimiter
[(scores, sum(scores)) for scores in combos]
delimiter
print(doc.getvalue())
delimiter
print(bookmark.text)
delimiter
Aggregator._output()
delimiter
content_type = models.ForeignKey(ContentType)
delimiter
d[k].append(v)
delimiter
user.save()
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
print(dur.total_seconds())
delimiter
round(number / roundto) * roundto
delimiter
n > 1 and all(n % i for i in islice(count(2), int(sqrt(n) - 1)))
delimiter
arrays = [item[1:] for item in arrays if len(item) > 1]
delimiter
local_tz.normalize(local_dt)
delimiter
Py_DECREF(n_ptr)
delimiter
glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE)
delimiter
print(hello())
delimiter
fig = plt.figure()
delimiter
np.nextafter(0, 1)
delimiter
f_set = f[f.year.between(2002, 2009)]
delimiter
print([mylist[i:i + 4] for i in range(0, len(mylist), 4)])
delimiter
print(CAT.number_of_legs)
delimiter
r, g, b = colorsys.hsv_to_rgb(hue, 1, 1)
delimiter
markdown_below()
delimiter
cls.__new__(cls)
delimiter
log.setLevel(logging.INFO)
delimiter
print((day_of_year, julian_day))
delimiter
dict_x[key].append(value)
delimiter
self.saved = sys.stdin, sys.stderr, sys.stdout
delimiter
[(i * j * k) for i, j, k in product(a, b, c)]
delimiter
df
delimiter
conn.close()
delimiter
os.abort()
delimiter
logging.disable(logging.CRITICAL)
delimiter
utc_offset = datetime.fromtimestamp(ts) - datetime.utcfromtimestamp(ts)
delimiter
b2.insert(END, item)
delimiter
datetime.fromtimestamp(unix_timestamp)
delimiter
s.bind((host, port))
delimiter
[development]
delimiter
(item for pair in zip_longest(x, y, default) for item in pair)
delimiter
root = ET.fromstring(xml_string)
delimiter
cv.SetData(foo_cv, foo_np_view.data, foo_np_view.strides[0])
delimiter
Person.__init__(self, name, phone)
delimiter
writer = csv.writer(out_file)
delimiter
[distance(*combo) for combo in combinations(list_of_coords, 2)]
delimiter
duration = models.DurationField()
delimiter
b = np.zeros_like(a)
delimiter
layout = QtGui.QVBoxLayout(self)
delimiter
IOLoop.instance().run_sync(test_it)
delimiter
Foo()[:42]
delimiter
threading.Thread.__init__(self)
delimiter
imgStr = base64.b64encode(jpeg_image_buffer.getvalue())
delimiter
model.add(Reshape((6, 2)))
delimiter
index[count][1].append(url)
delimiter
self.cl.autosetmode()
delimiter
con.close()
delimiter
value.append([x for x in getdatas])
delimiter
artifact = Artifact.objects.select_related().get(pk=pk)
delimiter
df
delimiter
output.write(resp.content)
delimiter
self._s = dict((k.lower(), k) for k in d)
delimiter
suba = a[indeces]
delimiter
x = [1, 2]
delimiter
aux = copy.deepcopy(matriz)
delimiter
result = lengths.nonzero()[0][0] + 1
delimiter
someList.sort(key=mixed_order)
delimiter
y = np.zeros((10, 10))
delimiter
C0 = np.array([(A[i] * B[(i), :, :]) for i in range(len(A))])
delimiter
self.file.write(msg)
delimiter
dict(word.split(value_sep, maxsplit=1) for word in lexer)
delimiter
a.repeat(2).reshape(2, 2 * len(a[0]))
delimiter
fig, axes = plt.subplots(nrows=2, ncols=2)
delimiter
conn.close()
delimiter
APIResponse(status=status.HTTP_200_OK, data=data)
delimiter
a_id = Column(Integer, primary_key=True)
delimiter
s.isdigit()
delimiter
answer.append([(each - x) for x in l])
delimiter
print(in_nested_list(x, 2))
delimiter
print(a)
delimiter
print(response.status_code, response.url)
delimiter
property_asel = list(itertools.compress(good_objects, property_a))
delimiter
final_vector = (start_matrix.T * weights).sum(axis=1)
delimiter
print(len(args) + len(kwargs))
delimiter
df.c_contofficeID.str[-4:]
delimiter
axes[0, 0].legend(bbox_to_anchor=(0, 0.5))
delimiter
plt.show()
delimiter
fpid.write(str(pid))
delimiter
datetime.datetime(2012, 1, 1, 1, 0, 0),
delimiter
c = a[b[np.searchsorted(b, a[:, (0)]) - len(b)] == a[:, (0)]]
delimiter
a[numpy.lexsort(a.T)]
delimiter
self.x + other.x
delimiter
np.random.shuffle(indices)
delimiter
json.JSONEncoder.default(self, o)
delimiter
table.insert(chunksize)
delimiter
result = [(x + y) for x, y in product(mylist, mysuffixes)]
delimiter
a.shape[0] == a.shape[1] and np.linalg.matrix_rank(a) == a.shape[0]
delimiter
deleteelem.getparent()[0]
delimiter
x.tobytes()
delimiter
i += 1
delimiter
sleep(0.05)
delimiter
Js = np.random.randint(0, n - 1, 4)
delimiter
indptr = np.where(mask.ravel())[0]
delimiter
self.Show()
delimiter
pylab.show()
delimiter
int(x, 0)
delimiter
r = requests.get(url % params_json)
delimiter
self.n
delimiter
subprocess.Popen([command] + args, startupinfo=startupinfo).wait()
delimiter
fig, ax = plt.subplots()
delimiter
engine = create_engine(dsn, listeners=[SearchPathSetter()])
delimiter
p.run()
delimiter
sortedLetters = sorted(iter(d.items()), key=lambda k_v: (k_v[1], k_v[0]))
delimiter
np.hstack([a, lookup[(a[:, (0)] - 1), :]])
delimiter
ax.grid(True)
delimiter
ax.set_yticks(np.arange(AUC.shape[0]) + 0.5, minor=False)
delimiter
numpy.linspace(10, 20, 5)
delimiter
screen_height = root.winfo_screenheight()
delimiter
riak_bucket.delete(key)
delimiter
type(d)
delimiter
list(filter(f, list(range(2, 25))))
delimiter
a[4].append(10)
delimiter
width += (len(string) - 1) * charspace
delimiter
jvm = sc._jvm
delimiter
json.dumps(data)
delimiter
BaseDocTemplate.__init__(self, *args, **kwargs)
delimiter
alt.close()
delimiter
upgrade(obj)
delimiter
sys.exit(0)
delimiter
list(self.__dict__.items())
delimiter
print(delta.seconds)
delimiter
parser = argparse.ArgumentParser()
delimiter
self.device.close()
delimiter
main.quit()
delimiter
tree.add(4)
delimiter
self.assertEqual(self.nums, self.nu_nums)
delimiter
sys.exit(app.exec_())
delimiter
gb.get_group(your_key)
delimiter
raise error
delimiter
data = json.load(contactFile)
delimiter
list(itertools.chain(*[list_[s[0]:s[1]] for s in slices]))
delimiter
self._choices.append((index, val))
delimiter
[[int(x == y) for x in range(0, n)] for y in range(0, n)]
delimiter
print(key, value)
delimiter
fig = plt.figure()
delimiter
probability = quad(lambda x: np.exp(kd.score_samples(x)), start, end)[0]
delimiter
tup[0] = x
delimiter
np.random.seed(2)
delimiter
print(unit.objects.all())
delimiter
df
delimiter
print(locals())
delimiter
virEventLoopNativeStart()
delimiter
np.reshape(df.values, (1, df.shape[0] * df.shape[1]))
delimiter
pairs = IT.combinations(idx, 2)
delimiter
b = np.array([[5, 6], [7, 8]])
delimiter
instance.save()
delimiter
self.stdin_sock.close()
delimiter
main()
delimiter
moduleY.py
delimiter
p.close()
delimiter
out[mask] = A[mask]
delimiter
plt.show()
delimiter
print(collections.Counter(y for x in listOfLists for y in set(x)))
delimiter
b = map(list, b_set)
delimiter
self.delete(self.position, Tkinter.END)
delimiter
[OrderedDict(zip(list_of_keys, row)) for row in spamreader]
delimiter
hash(frozenset(iter(self.items())))
delimiter
random.choice(tuple(bigset))
delimiter
deletesys.modules[mtr]
delimiter
build_tree_recursive(tree[child.name], child, nodes)
delimiter
np.arange(10)[10:-2:-1]
delimiter
[[(0) for _ in range(length)]]
delimiter
a[1:2]
delimiter
cv2.waitKey(0)
delimiter
name = models.CharField(max_length=50)
delimiter
server.login(gmail_user, gmail_pwd)
delimiter
idx = np.argsort(a[1])
delimiter
np.sqrt(sqrDiff.sum(axis=1))
delimiter
locale.getdefaultlocale()
delimiter
app = create_app()
delimiter
b_logits = tf.Variable(tf.zeros([2]))
delimiter
X, Y = np.meshgrid(X, Y)
delimiter
df = df[(df.date >= df.beg_date) & (df.date <= df.end_date)]
delimiter
result.append((a, b))
delimiter
modList.append(len(self._myList))
delimiter
dict1 = {x.split()[0]: x.split()[1] for x in list1}
delimiter
diff(sin(x(t)), t, 2).subs(f, sin(x(t)))
delimiter
sys.exit(p.wait())
delimiter
ET.tostring(root)
delimiter
process.join()
delimiter
fig, ax = plt.subplots()
delimiter
B[0, 0, 0]
delimiter
pylab.plot(data)
delimiter
print(re.match(regex, line).groups())
delimiter
plt.setp(ax1.get_yticklines()[1::2], visible=False)
delimiter
task()
delimiter
dict2 = dict((item[0], item[1:]) for item in table2)
delimiter
psycopg2.__version__
delimiter
nodes = [node() for _ in range(100)]
delimiter
decorator_maker
delimiter
rows = np.random.random((100000, 8))
delimiter
print(etree.tostring(tree, xml_declaration=True, encoding=docinfo.encoding))
delimiter
_trace
delimiter
print(a[:, :, (np.newaxis)].shape)
delimiter
worksheet.set_column(0, len(data), 15, formater)
delimiter
plt.colorbar()
delimiter
end_date = date.today().toordinal()
delimiter
s[-7]
delimiter
do_sth()
delimiter
sample_object.users.add(1, 2)
delimiter
users = db.session.query(User).filter(User.numLogins == max_logins).all()
delimiter
in_file.seek(0, os.SEEK_END)
delimiter
args = parser.parse_args()
delimiter
enc.transform([[0, 1, 1]]).toarray()
delimiter
match.group(1).lower()
delimiter
find_max(d)
delimiter
req.add_data(urllib.parse.urlencode(data))
delimiter
sum(x for x, c in list(Counter(args).items()) if c == 1)
delimiter
d = dict((k, v) for k, v in list(d.items()) if v >= 10)
delimiter
l.sort(key=lambda t: t[0])
delimiter
html = urllib.request.urlopen(url).read()
delimiter
me.save()
delimiter
sorted_arr2 = arr2[arr1inds[::-1]]
delimiter
x[1][2]
delimiter
process.start()
delimiter
print([key] + map(sum, zip(*value)[1:]))
delimiter
p.start()
delimiter
ban_status = models.BooleanField(default=False)
delimiter
t.close()
delimiter
x = dict([(k, list(l)) for k in range(1000)])
delimiter
ax = plt.gca()
delimiter
len(l)
delimiter
s = socket.socket()
delimiter
list1.pop(2)
delimiter
im.thumbnail(size)
delimiter
plot(ar)
delimiter
metadata = MetaData()
delimiter
f(1)
delimiter
plt.xlim([start - width, end + width])
delimiter
handler.setFormatter(fmt)
delimiter
OrderedDict()
delimiter
p_regression = my_svr.predict(x_test)
delimiter
l[1]
delimiter
s = s[:-1]
delimiter
x[:5] + x[5:].strip()
delimiter
fig.subplots_adjust(bottom=0.1 * df.index.nlevels)
delimiter
imshow(wally)
delimiter
reader = csv.DictReader(f, fieldnames=h)
delimiter
2 * x + 6
delimiter
counts = collections.Counter(l[1] for l in a)
delimiter
str(self.__dict__)
delimiter
set(second_list) - set(map(f, first_list))
delimiter
p1 = np.power(np.power(np.pi * 2, k), -0.5)
delimiter
sum(some_counter.values())
delimiter
xor_(b.begin(), b.end(), a.begin(), b.begin())
delimiter
main()
delimiter
foolist.hml
delimiter
xml = ET.fromstring(xmlData)
delimiter
print([r.match(string).groups() for string in strings])
delimiter
2 * A * sin(distance / (2 * B))
delimiter
self.canvas.delete(self.img_id)
delimiter
axes = plt.gca()
delimiter
im = Image.open(file_path)
delimiter
orm.YourModel.objects.update(field_name=DEFAULT_VALUE)
delimiter
Category.query.all()
delimiter
plot_selected.yaxis.set_ticks(np.arange(0.2, 1.1, 0.2))
delimiter
ax.set_xlim([0, 2])
delimiter
p.start()
delimiter
worker.start()
delimiter
groups.union_set(a, b)
delimiter
setattr(self, key, value)
delimiter
os.chdir(cd)
delimiter
a_test.__class__
delimiter
now = datetime.datetime.utcnow().replace(tzinfo=utc)
delimiter
x = numpy.arange(0, 2 * numpy.pi, numpy.pi / 1000)
delimiter
matplotlib.__version__
delimiter
foo()
delimiter
df.ix[rows]
delimiter
n += 1
delimiter
d[k].append(v)
delimiter
round(x, -int(floor(log10(abs(x)))))
delimiter
app.MainLoop()
delimiter
solve([5, 10], [1, 5])
delimiter
main(list(range(1, 10)))
delimiter
np.identity(2)[Ellipsis]
delimiter
app = Flask(__name__)
delimiter
d += datetime.timedelta(days=1)
delimiter
pi.source_image.save(image_name, ContentFile(image_file.read()))
delimiter
main()
delimiter
new_nums.append(nums[-1])
delimiter
itertools.dropwhile(it, makepred(5))
delimiter
min(alist)[0], max(alist)[0]
delimiter
print(solve(eqs, x, y, dict=True))
delimiter
plt.subplot(121)
delimiter
result = img.copy()
delimiter
plt.show()
delimiter
get_color(0)
delimiter
pygame.init()
delimiter
sys.stdout = flushfile(sys.stdout)
delimiter
a[np.arange(a.shape[0]), I]
delimiter
min(l_one + l_two)
delimiter
test.print_array(a)
delimiter
[date for date in dates if dates.count(date) > 1]
delimiter
_st += timedelta(days=7)
delimiter
friday = today + datetime.timedelta((4 - today.weekday()) % 7)
delimiter
zip(a, a)
delimiter
[(np.bincount(i) > 0).sum() for i in data]
delimiter
x_sorted, y_sorted = zip(*sorted(zip(x, y), key=lambda a: a[0]))
delimiter
sys.stdout.flush()
delimiter
hash(self.normalized)
delimiter
x, y
delimiter
res.append((toktype, tokval))
delimiter
print([max(v) for _, v in itertools.groupby(l, lambda x: x[0])])
delimiter
w.setWindowFlags(QtCore.Qt.FramelessWindowHint)
delimiter
flag.groupby(level=[0, 1]).max().reset_index()
delimiter
print(df.join(s))
delimiter
datfiles[0].seek(0)
delimiter
canvas = numpy.zeros((n, n), dtype=int)
delimiter
plt.show()
delimiter
mock_last_transaction.assert_called_once_with()
delimiter
ImageDraw.Draw(blurred_halo).text(position, text, font=font, fill=col)
delimiter
self.__dict[name]
delimiter
plt.show()
delimiter
d.f()
delimiter
sess.commit()
delimiter
find_intersection(lst)
delimiter
new_list.append(my_array + [e])
delimiter
lmn = long_module_name
delimiter
newR.mean()
delimiter
doc = xml.dom.minidom.Document()
delimiter
self.assertEqual(mocked_handler.call_count, 1)
delimiter
response = urllib.request.urlopen(req)
delimiter
[(x + L2[i]) for i, x in enumerate(L1)]
delimiter
users = Users.objects.filter(pk__in=[1, 2])
delimiter
a = k + a
delimiter
print([item for sublist in out for item in sublist])
delimiter
func()
delimiter
socket.setdefaulttimeout(0.5)
delimiter
print(request.headers)
delimiter
gtk.CellRendererPixbuf.__init__(self)
delimiter
filename, size = read_gzip_info(gzipfileobj)
delimiter
ax.add_patch(circle)
delimiter
list_of_arrays = map(lambda x: x * np.ones(M), list(range(k)))
delimiter
axcltwo.set_xlim(0, binimg.shape[1] - 1)
delimiter
df2 = df.iloc[[0, -1]]
delimiter
tuple(x for sublist in base_lists for x in sublist)
delimiter
Atomic.register(str)
delimiter
soup = BeautifulSoup(test_html)
delimiter
traceback.print_tb(tb)
delimiter
{{form.content()}}
delimiter
[([item] if not isinstance(item, list) else item) for item in l]
delimiter
my_dict = request.query.decode()
delimiter
print((k + 1) * lcm)
delimiter
root.withdraw()
delimiter
listener.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
delimiter
arr[2, 1] == arr[2, 1]
delimiter
sess = tf.Session(config=config)
delimiter
window.add(entry)
delimiter
mask = np.concatenate(([False], np.isnan(a), [False]))
delimiter
tar.extractall()
delimiter
np.random.seed(seed)
delimiter
arr = np.arange(729)
delimiter
zip_longest(fillvalue=fillvalue, *args)
delimiter
logger.setLevel(logging.DEBUG)
delimiter
any(is_subset(d, d1) for d1 in my_list if d1 != d)
delimiter
result.get()
delimiter
builder.connect_signals(self)
delimiter
self.stdout, self.stderr = p.communicate()
delimiter
driver = webdriver.Firefox()
delimiter
self._global_wealth
delimiter
session.commit()
delimiter
c = pycurl.Curl()
delimiter
Foo.run_static_method()
delimiter
{{your_python_data}}
delimiter
self.logger.removeHandler(ch)
delimiter
l[:n]
delimiter
app = flask.Flask(__name__)
delimiter
isinstance(result, collections.Iterable)
delimiter
cv.pack()
delimiter
widget1.grid(row=0, column=0)
delimiter
df = pd.read_csv(path, skiprows=rest)
delimiter
pygame.init()
delimiter
english_words = set(word.strip().lower() for word in word_file)
delimiter
client.service.method(string_array)
delimiter
print((current_item, next_item))
delimiter
0.5 * ceil(2.0 * x)
delimiter
out.clear()
delimiter
fig.canvas.draw()
delimiter
epoll.register(p.stdout.fileno(), select.EPOLLHUP)
delimiter
data2 = data2.groupby(data2.index).sum()
delimiter
now.astimezone(tz).dst() != timedelta(0)
delimiter
ax.add_patch(rect)
delimiter
PROJECT_ROOT = os.path.abspath(os.path.dirname(settings_dir))
delimiter
followers_df.reindex(index=list(range(0, 20)))
delimiter
connection.send_command(command, *args)
delimiter
callable_method(user=user, **{option_name: user_defaults[option_name]})
delimiter
list[0:10]
delimiter
json.dump(lst, f)
delimiter
self._applecount += 1
delimiter
writer.writerow(row)
delimiter
buffer(self)[:]
delimiter
network.draw()
delimiter
t1.start()
delimiter
self.worker.moveToThread(self.mthread)
delimiter
List.append(Item)
delimiter
f.write(pat.sub(jojo, content))
delimiter
print(tempfile.gettempdir())
delimiter
groups = np.array([0, 0, 1, 2, 2, 1])
delimiter
line = next(f)
delimiter
users.get_current_user()
delimiter
all_data = np.append(my_data, new_col, 1)
delimiter
a = 2
delimiter
p.wait()
delimiter
print(ip)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
etree.tostring(nodes[0])
delimiter
self.connectButton.clicked.connect(self.connectToServer)
delimiter
xfiltered = np.interp(xi, xi[mask], x[mask])
delimiter
contents = f.read()
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
plt.scatter(X, Y)
delimiter
ax.hold(True)
delimiter
name = models.CharField(max_length=20)
delimiter
[comment.extract() for comment in comments]
delimiter
np.issubdtype(float, np.inexact)
delimiter
new_dict = {k: d1[k] for k in list(d1.keys()) & wanted_keys}
delimiter
[v for k, v in list(mydict.items()) if k >= 6]
delimiter
plt.plot(list1)
delimiter
self.root.overrideredirect(1)
delimiter
m = re.search(regex, text)
delimiter
plt.gca().xaxis.set_major_locator(dates.HourLocator())
delimiter
x = [0] * 10
delimiter
plt.show()
delimiter
m = matrix([[1, 1], [1, 2]])
delimiter
cv2.waitKey()
delimiter
Y_pred = model.predict_on_batch(X_test)
delimiter
smtp.starttls()
delimiter
dt = datetime.datetime.now()
delimiter
ax.set_xticks([])
delimiter
df
delimiter
print([str(b) for b in repo.heads])
delimiter
self.NEWTAGS.append(tag)
delimiter
a[1:, 1:]
delimiter
s = socket(AF_NETLINK, SOCK_DGRAM)
delimiter
fig = plt.figure()
delimiter
repo = Repo(repo_dir)
delimiter
list(dic1.keys()) == list(dic2.keys())
delimiter
X_train, y_train, X_val, y_val
delimiter
chr(97)
delimiter
object_list = Content.objects.filter(subset__lte=no_of_subsets)
delimiter
os.dup2(self._oldstdout_fno, 1)
delimiter
print ()
delimiter
list(itertools.chain(*lst))
delimiter
pylab.plot(abs(fft))
delimiter
dbkind[db_type](rest)
delimiter
last = len(s) - i - 1
delimiter
a[a == 1] += -epsilon
delimiter
a[np.where(~a[:, (-1)].astype(bool))]
delimiter
dfrand = pd.DataFrame(data=np.random.randn(rows, cols))
delimiter
[a[l[0] + 1:l[1] + 1] for l in zip(e, e[1:])]
delimiter
time.tzset()
delimiter
foo(**d)
delimiter
threading.Timer(1.25, lambda : webbrowser.open(url)).start()
delimiter
self.hide()
delimiter
im.show()
delimiter
y = flatten(x)
delimiter
m2[m2[:, (1)] > 10]
delimiter
min(n for n in a if n > 0.7)
delimiter
hfile.seek(0, os.SEEK_END)
delimiter
X[:, (n)] += np.dot(A, colb)
delimiter
sc.close()
delimiter
myDict = dict().reduceto(lambda t: t[1], lambda o, t: o + t, myTupleList, 0)
delimiter
max([a for a in yourlist if a[2] >= 100], key=itemgetter(1))
delimiter
points = np.array(list(product(x_p, y_p, z_p)))
delimiter
self[key].extend(value)
delimiter
nn.activate([1, 1])
delimiter
Spam().foo()
delimiter
max(min(maxn, n), minn)
delimiter
df = pd.DataFrame()
delimiter
client.server_info()
delimiter
object.__new__(cls)
delimiter
a, b = b, a
delimiter
columns = dict([(x[0], x[1:]) for x in zip(*allrows)])
delimiter
python - virtualenv
delimiter
count += 1
delimiter
print(self.cursor.fetchall())
delimiter
result = yaml.load(fin.read())
delimiter
np.array([A2[i, slices[j]] for i, j in zip([0, 1, 2], [0, 1, 0])])
delimiter
sorted(somelist, key=key)
delimiter
len(result[0])
delimiter
t.start()
delimiter
Password = db.Column(db.String(40))
delimiter
toolbox = base.Toolbox()
delimiter
g.add_edge(4, 5)
delimiter
w.setLayout(lay)
delimiter
doc = BeautifulSoup(xml)
delimiter
r.cookies.get_dict()
delimiter
label = tk.Label(image=image)
delimiter
frames.append(numpy.fromstring(data, dtype=numpy.int16))
delimiter
np.max(x, axis=axis) - np.min(x, axis=axis)
delimiter
min(_, key=lambda pair: pair[0] / pair[1])
delimiter
new_list
delimiter
main()
delimiter
[unique.append(item) for item in sequence if item not in unique]
delimiter
server.ehlo()
delimiter
pd.DataFrame(df.values[a], df.index.values[a], df.columns)
delimiter
sandwich()
delimiter
print(a.base)
delimiter
lambda x: x == i or x % i != 0
delimiter
heapq._siftdown(h, 0, i)
delimiter
ixs = np.array([2, 1, 1])
delimiter
draw.line(((x1, y1), (x2, y2)), fill=color, width=1)
delimiter
df
delimiter
z = np.array([1, 2])
delimiter
plt.show()
delimiter
pd.DataFrame(d)
delimiter
fig = PLT.figure()
delimiter
r[numpy.isreal(r)]
delimiter
newcmap = matplotlib.colors.LinearSegmentedColormap(name, cdict)
delimiter
print(json.dumps(dict(rh)))
delimiter
cherrypy.config.update(config)
delimiter
self.assertEqual(r.status_code, 200)
delimiter
hello.ff(x, y)
delimiter
self.process = subprocess.Popen(args, shell=True)
delimiter
unittest.main()
delimiter
addition.extend(array)
delimiter
func(*a, **kwargs)
delimiter
fig = plt.figure()
delimiter
device.close()
delimiter
dict((k, rank_a[k] - i) for i, k in rank_b)
delimiter
nx.draw(G, pos)
delimiter
CV_rfc.fit(X, y)
delimiter
exitstatus = (status & 65280) >> 8
delimiter
x.reset_index()
delimiter
fig.colorbar(surf, shrink=0.5, aspect=5)
delimiter
a[-4:]
delimiter
newPic.save()
delimiter
unittest.main()
delimiter
[(a if c else b) for item in list]
delimiter
sys.exit(0)
delimiter
file.seek(4)
delimiter
ftp.cwd(directory)
delimiter
self.data.append(item)
delimiter
list.__getitem__(self, index % len(self))
delimiter
soup = BeautifulSoup(html)
delimiter
res.ready()
delimiter
button.clicked.connect(self.onStart)
delimiter
sys.exit(app.exec_())
delimiter
neuron.draw()
delimiter
ax1.plot(list(range(10)))
delimiter
hash(1)
delimiter
w.writerows(list(somedict.items()))
delimiter
sc.stop()
delimiter
print(row[0], row[1])
delimiter
print(metrics.accuracy_score(y[100:], clf.predict(X[100:])))
delimiter
db.session.add_all(users)
delimiter
__init__.py
delimiter
data = urllib.request.urlopen(url).read()
delimiter
pow2(a, out=a, num_threads=4)
delimiter
datetime.timedelta(seconds=result)
delimiter
b[:, :-1] = a
delimiter
norm = mpl.colors.Normalize(vmin=0, vmax=1)
delimiter
matrix([[0.0, -1.0, -1.0, 0.0], [0.0, 0.0, 1.0, 1.0]])
delimiter
do_stuff()
delimiter
self.buf.write(contents)
delimiter
df.iloc[np.random.permutation(len(df))]
delimiter
plt.figure()
delimiter
[1, 1, 0, 0, 0, 0, 0]
delimiter
keys_to_delete = [k for k, v in d.items() if v == val_to_delete]
delimiter
count += 1
delimiter
self.socket.shutdown(SHUT_WR)
delimiter
order = models.PositiveIntegerField(blank=True, null=True)
delimiter
process(line)
delimiter
myFunction(*args, **kwargs)
delimiter
help(bytes)
delimiter
any(c in badChars for c in yourString)
delimiter
field.get_attname_column()
delimiter
reason = json.loads(e.content).reason
delimiter
soup = BeautifulSoup(urllib.request.urlopen(address).read())
delimiter
type(_)
delimiter
entry1.grid(row=1, column=1)
delimiter
DirectClass.__init__(self)
delimiter
x = [[int(float(j)) for j in i] for i in x]
delimiter
isinstance(d, (dict, collections.MutableMapping))
delimiter
list(set(newIntersections))
delimiter
print(sys.path)
delimiter
writer.writerow([subject, itemID, bias1Answer])
delimiter
sh = wb.sheet_by_index(0)
delimiter
now = datetime.utcnow()
delimiter
list(islice(iter(preresult.items()), 100))[-10:]
delimiter
conn.send(data)
delimiter
file_handler.setLevel(logging.DEBUG)
delimiter
self.frame.pack()
delimiter
cherrypy.config.update(config)
delimiter
print(C[np.searchsorted(C[:, (0)], I)])
delimiter
t.daemon = True
delimiter
map(functools.partial(myFunc, some_arg=additionalArgument), pages)
delimiter
plt.figure()
delimiter
seq[::2], seq[1::2]
delimiter
os.remove(thefifo)
delimiter
self.redraw()
delimiter
json.dumps(fb._asdict())
delimiter
pool.close()
delimiter
nx.draw(G, edgelist=edges, edge_color=colors, width=10)
delimiter
train_op = tf.group(train_op1, train_op2)
delimiter
self.redraw()
delimiter
timeit.Timer(timewrapper)
delimiter
process.start()
delimiter
setattr(A, name, _method)
delimiter
c.max()
delimiter
frame.ix[frame.index[i]]
delimiter
dt = datetime.datetime.now()
delimiter
df.columns = pd.MultiIndex.from_tuples(df.columns)
delimiter
self.assertEqual(auth_result, attempted_auth_result)
delimiter
soup = BeautifulSoup(html)
delimiter
self.tree.pack()
delimiter
shutil.rmtree(dir)
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_IP)
delimiter
protocol = TBinaryProtocol.TBinaryProtocol(transport)
delimiter
ser.hist(cumulative=True, normed=1, bins=100)
delimiter
df = pd.DataFrame(df, columns=sorted(custom_dict, key=custom_dict.get))
delimiter
print(res.json())
delimiter
clf.fit(np_training, np_labels)
delimiter
file_content = gzf.read()
delimiter
pool = multiprocessing.Pool(4, maxtasksperchild=1)
delimiter
wave_file.writeframes(frame_data)
delimiter
root.update_idletasks()
delimiter
print([list(words) for key, words in itertools.groupby(data, init)])
delimiter
print(response.body)
delimiter
f = lambda : i
delimiter
sizer.Add(hsizer, 0, wx.EXPAND)
delimiter
self.crawler.engine.crawl(self.create_request(), self)
delimiter
datetime.combine(d, datetime.min.time())
delimiter
some_func(*params)
delimiter
str(lst[0]), lst[1:]
delimiter
my_dictionary.len()
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
{{label}}
delimiter
h2.setLevel(logging.WARNING)
delimiter
print([item for sublist in [(rep * [i]) for i in a] for item in sublist])
delimiter
test = set(numpy.random.randint(0, 10, 5))
delimiter
m.start()
delimiter
delfile.seek(0)
delimiter
deletestr
delimiter
author = models.ForeignKey(User)
delimiter
HypotheticalBranch(1, 4, 2)
delimiter
bop.pack(side=tk.LEFT)
delimiter
[tuple(x for y in i for x in y) for i in list(d.items())]
delimiter
ax.set_xticklabels([])
delimiter
l.append(i)
delimiter
app = Flask(__name__)
delimiter
data = urllib.parse.urlencode(params)
delimiter
workbook.close()
delimiter
b = df.iloc[:, 1:].values
delimiter
next(value)
delimiter
s.readline()
delimiter
K[np.ix_(np.arange(K.shape[0]), train, train)]
delimiter
container.grid_columnconfigure(0, weight=1)
delimiter
y_interp = scipy.interpolate.interp1d(x, y)
delimiter
_myql.__version__
delimiter
logging.basicConfig(filename=log_name)
delimiter
stdout.flush()
delimiter
B.IMC = IMC
delimiter
isBlank = all(band.getextrema() == (255, 255) for band in bands)
delimiter
ax.set_xticks([0.15, 0.68, 0.97])
delimiter
sys.setrecursionlimit(10000)
delimiter
gp2.append(float(i))
delimiter
soup = BeautifulSoup(response.text)
delimiter
print([d.b[i] for i in range(5)])
delimiter
PLT.show()
delimiter
i + 1
delimiter
lambda num: num % 2 != 0
delimiter
els[-1]
delimiter
author = models.ForeignKey(Author)
delimiter
avg_array = (data_array[::2] + data_array[1::2]) / 2
delimiter
print((ss.name(), ss.lemma_names()))
delimiter
sns.regplot(x, y, ax=ax1)
delimiter
axes.set_yticks([])
delimiter
scatter = ax.scatter(np.random.randn(100), np.random.randn(100))
delimiter
not sum([(not i in A) for i in C])
delimiter
self.updater.start()
delimiter
np.mean(arr.reshape(-1, stride), axis=1)
delimiter
ziph.write(os.path.join(root, file))
delimiter
PATH = os.path.abspath(os.path.dirname(__file__))
delimiter
db.delete(results)
delimiter
h5file.close()
delimiter
new_strs.split()
delimiter
classifier.fit(X_train, Y)
delimiter
df
delimiter
__init__.py
delimiter
somecell.fill.start_color.index
delimiter
screen.refresh()
delimiter
time.sleep(0.1)
delimiter
setattr(self, name, attr)
delimiter
A = scipy.sparse.csc_matrix((size, size))
delimiter
m.p
delimiter
self.Bind(wx.EVT_LEFT_DCLICK, self.on_left_dclick)
delimiter
win1.destroy()
delimiter
parser = etree.XMLParser(schema=schema)
delimiter
plt.draw()
delimiter
d = set()
delimiter
main()
delimiter
id = db.Column(db.Integer, primary_key=True)
delimiter
b.shape
delimiter
list.__init__(self, *args, **kwargs)
delimiter
button.pack()
delimiter
image_data = im.load()
delimiter
html.title.text
delimiter
data[(data > upper_threshold) | (data < lower_threshold)] = default_value
delimiter
text.set_color(line.get_color())
delimiter
time.sleep(10)
delimiter
data = urlfetch.fetch(feedUrl)
delimiter
plt.close(fig)
delimiter
msg.set_payload(zf.read())
delimiter
print([name for _, name, _ in pkgutil.iter_modules([pkgpath])])
delimiter
sum(l[-n:]) / float(observations)
delimiter
cursor = conn.cursor()
delimiter
inv = pygame.Surface(img.get_rect().size, pygame.SRCALPHA)
delimiter
print(d[7])
delimiter
profs = session.query(UserProfile).all()
delimiter
a += b
delimiter
df.convert_objects(convert_numeric=True).dtypes
delimiter
dict()
delimiter
legline.set_linewidth(10)
delimiter
is_staff = True
delimiter
fig = plt.figure()
delimiter
self.connect()
delimiter
args = parser.parse_args()
delimiter
sel_cur.close()
delimiter
root.wait_window()
delimiter
os.write(fd, data)
delimiter
d = dict()
delimiter
desks = Desk.objects.filter(room__in=rooms)
delimiter
widget2.grid(row=1)
delimiter
audio = models.FileField(upload_to=aud_get_file_path)
delimiter
curl.perform()
delimiter
print(pd.factorize(pd.lib.fast_zip([df.x, df.y]))[0])
delimiter
print(tag.name)
delimiter
date = parser.parse(ds)
delimiter
parser = argparse.ArgumentParser()
delimiter
2, 0, 0, 0, 0, 0, 1, 1, 20160224, 20160226
delimiter
df = df.join(split_names)
delimiter
a = [0] * K
delimiter
self.client.close()
delimiter
nbsumeq(A, B)
delimiter
plot_data[0].append(1)
delimiter
driver.quit()
delimiter
cv.Circle(color_image, center_point, 40, cv.CV_RGB(255, 255, 255), 1)
delimiter
self.stream.close()
delimiter
self.count += 1
delimiter
H = sps.coo_matrix((data, (rows, cols)), shape=(num, num)).tolil()
delimiter
self.setCentralWidget(_widget)
delimiter
mask = np.isfinite(x)
delimiter
conn.send(data)
delimiter
list(set(theList).intersection(set(theDict.keys())))
delimiter
f = np.poly1d([1, 0, 0, -1])
delimiter
session.close()
delimiter
p.start()
delimiter
module
delimiter
hex(buffer.rd(1))
delimiter
rows = (a != 0).sum(1)
delimiter
lines = [l.split() for l in f.readlines()]
delimiter
names = names.append(frame, ignore_index=True)
delimiter
np.set_printoptions(precision=5)
delimiter
path = path.strip()
delimiter
nowdt = datetime.datetime.now()
delimiter
combs = [[x for i, x in enumerate(data) if mask[i]] for mask in masks]
delimiter
self.application.exec_()
delimiter
plt.plot(dates, values)
delimiter
gtk_dlls.append(os.path.join(include_dll_path, dll))
delimiter
df = df.set_index(cols).apply(f, axis=1).reset_index()
delimiter
second_largest([1, 1, 1, 1, 1, 1])
delimiter
self.matrix.append([0] * len(list(adjacencyList.keys())))
delimiter
points = [random() for _ in range(1000 * 2)]
delimiter
set_trace()
delimiter
cv2.waitKey(5)
delimiter
[x for x in lst if x % 2 == 0][0]
delimiter
np.apply_along_axis(v.dot, 2, A)
delimiter
server_sock.listen(1)
delimiter
cv2.drawContours(filledI, cs, i, color=255, thickness=-1)
delimiter
os.close(fd)
delimiter
pylab.legend()
delimiter
pool.join()
delimiter
time.sleep(1)
delimiter
systemtest_n.py
delimiter
reduce(dict.__getitem__, path, aDict).update(aSecondDict)
delimiter
id = Column(Integer, primary_key=True)
delimiter
QWidget.__init__(self, *args, **kwargs)
delimiter
user = Session.query(User).first()
delimiter
browser = webdriver.Firefox()
delimiter
print(np.sum(data, axis=0))
delimiter
Quota = celltext(columns[1])
delimiter
arr[rs:re, cs:ce] = np.rot90(np.copy(arr[rs:re, cs:ce]))
delimiter
ccb()
delimiter
self.panel = wx.Panel(self)
delimiter
writer.writerows(zip(bins, frequencies))
delimiter
data[row][set_col] = val
delimiter
r.close()
delimiter
unittest.main()
delimiter
new_df = old_df.loc[:, (list_of_columns_names)]
delimiter
s[4:10]
delimiter
fd = sys.stdin.fileno()
delimiter
list(items.keys())
delimiter
print((key, value))
delimiter
out = a[sidx[idx]]
delimiter
timezone.localize(localdt).astimezone(utc)
delimiter
dialog.ui.setupUi(dialog)
delimiter
sqlContext.sql(query)
delimiter
one, four, ten = lst[1], lst[4], lst[10]
delimiter
print(repr(vocab))
delimiter
plt.yticks(np.arange(0))
delimiter
add(**x)
delimiter
zip(*A)
delimiter
crawler.crawl(spider)
delimiter
df2 = pd.DataFrame(np.random.rand(4, 2))
delimiter
self.opn[op](op1, op2)
delimiter
obj.__dict__[attr]
delimiter
a = np.array([0, 0, 15, 17, 16, 17, 16, 12, 18, 18])
delimiter
print(html2text(html))
delimiter
dir(modulename)
delimiter
Base.prepare(engine)
delimiter
G.edges(data=True, keys=True)
delimiter
do_stuff()
delimiter
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
w.start()
delimiter
cur = conn.cursor()
delimiter
self.instance.olddrivers = instance.drivers.all()
delimiter
ax.xaxis.set_minor_formatter(ticker.FuncFormatter(ticks_format))
delimiter
humansize(58812)
delimiter
humansize(68819826)
delimiter
df.index[1]
delimiter
listx = [item[0] for item in data]
delimiter
do_foo(obj)
delimiter
print(list[i][j])
delimiter
[elem[0] for elem in most_common]
delimiter
time.sleep(0.1)
delimiter
os.rename(pathAndFilename, os.path.join(dir, titlePattern % title + ext))
delimiter
hist, xedges, yedges = np.histogram2d(x, y, bins=4)
delimiter
fig.tight_layout()
delimiter
merged[item[key]].update(item)
delimiter
any(match(str1, str2) for str1 in set1 for str2 in set2)
delimiter
print(next(first_it))
delimiter
data.sort(key=getitems)
delimiter
totaldict[tuple(x[:2])].append(x)
delimiter
con.close()
delimiter
ax.legend(loc=1)
delimiter
print(match.group(0))
delimiter
process = multiprocessing.Process(target=do_expat, args=(q,))
delimiter
p.join()
delimiter
series1 = [float(i) for i in range(10)]
delimiter
self.assertEqual(target.str(), b62)
delimiter
ax.xaxis.set_major_formatter(copy.copy(Formatter))
delimiter
self.flush()
delimiter
np.arccos(np.clip(np.dot(v1_u, v2_u), -1.0, 1.0))
delimiter
np.allclose(m[slc], target)
delimiter
int(b[:-1]) + unicodedata.numeric(b[-1])
delimiter
pythons_tasklist.append(p)
delimiter
1 / 0
delimiter
myset.add(x)
delimiter
df.ix[List]
delimiter
M[:, (colnumber)] *= scalar
delimiter
self.scrollbar.pack(side=RIGHT, fill=Y)
delimiter
self._stack = []
delimiter
heapq.heappush(heap, Neg(item))
delimiter
plt.draw()
delimiter
ax.get_xaxis().set_major_formatter(mf)
delimiter
urllib.request.urlopen(r)
delimiter
s.send(q)
delimiter
os.fstat(f.fileno()).st_size
delimiter
cv2.destroyAllWindows()
delimiter
visited = {p: False for p in l}
delimiter
df = pd.DataFrame([])
delimiter
nodes.mlab_source.dataset.point_data.scalars = np.random.random((5000,))
delimiter
self.layout.addWidget(self.button2)
delimiter
print(the_table.properties())
delimiter
h, s, v = hsv[:, :, (0)], hsv[:, :, (1)], hsv[:, :, (2)]
delimiter
app = Flask(__name__)
delimiter
print(str(name).lower())
delimiter
sess = tf.Session()
delimiter
ax.grid()
delimiter
A = np.diag(1.0 / np.arange(1, 10000))
delimiter
self._stream.write(text)
delimiter
r.join(df)
delimiter
os.path.normpath(path1)
delimiter
d2 = {key: value for i, (key, value) in enumerate(d.items()) if i % 2 == 1}
delimiter
dest.blit(tmp, destpos, dest.get_rect().clip(maskrect))
delimiter
t1.start()
delimiter
arr = np.array([4, 4, 1, np.nan, np.nan, np.nan, -5, -4])
delimiter
entry.set_text(new_text)
delimiter
caketaste()
delimiter
set(box(df.genres.tolist()).ravel().tolist())
delimiter
self.result.SetLabel(self.editname.GetValue())
delimiter
{{title}}
delimiter
main()
delimiter
get_type_hints(Starship)
delimiter
record2.put()
delimiter
PETSc.Mat().createAIJ(size=(nrows, ncols), csr=(ai, aj, aa))
delimiter
l.append(float(t))
delimiter
document_first_row = [doc[0] for doc in documents]
delimiter
s.apply(enumerate)
delimiter
print(coc.x)
delimiter
print(json.dumps(test_json, cls=MyEncoder))
delimiter
fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)
delimiter
main()
delimiter
[0, 0, 0, 0],
delimiter
np.dot(np.array(L1).sum(0), np.array(L2).sum(0))
delimiter
t.join()
delimiter
pickle.dumps(self._cookies)
delimiter
form = MyModelForm(hide_condition=True)
delimiter
opener = urllib.request.build_opener()
delimiter
zf.close()
delimiter
model.train(sentences)
delimiter
columns = [column[0] for column in cursor.description]
delimiter
G = bipartite.projected_graph(B, inmates)
delimiter
[a[i + 1:j] for i, j in zip(zeros, zeros[1:]) if len(a[i + 1:j]) > 0]
delimiter
timer_thread.start()
delimiter
pool = multiprocessing.Pool()
delimiter
ax.figure.show()
delimiter
datetime.datetime(2012, 1, 1, 0, 0, 0),
delimiter
ax1.set_xticks(numpy.arange(x1 - 1, x2 + 1, 0.5))
delimiter
id = Column(Integer, primary_key=True)
delimiter
l2 = list(zip(*l1))
delimiter
output_rs = tf.transpose(output, [1, 0, 2])
delimiter
WebDriverWait(self, timeout).until(staleness_of(old_page))
delimiter
x.append([4, 5])
delimiter
my_list[i] = item
delimiter
time.sleep(refreshrate)
delimiter
self.mthread.finished.connect(self.worker.deleteLater)
delimiter
f.write(fileobj.read())
delimiter
QtCore.QObject.__init__(self)
delimiter
logging.set_up_done = False
delimiter
[i for j in (list(range(10)), list(range(15, 20))) for i in j]
delimiter
self.goButton.clicked.connect(self.simulThread.start)
delimiter
s = s[:begin] + s[end + 1:]
delimiter
this_module = sys.modules[__name__]
delimiter
app.MainLoop()
delimiter
time.sleep(1)
delimiter
out = np.zeros_like(array)
delimiter
os.uname()
delimiter
stdin.flush()
delimiter
plt.xlim(-20, 60)
delimiter
length = len(data)
delimiter
traceback.print_stack()
delimiter
new_rows.append(new_row)
delimiter
plt.ion()
delimiter
rows = input.filter(lambda line: line != header)
delimiter
data = cursor.fetchall()
delimiter
corpus = nltk.Text(corpus0.words())
delimiter
int(revbin, 2)
delimiter
polA.set_transform(tA)
delimiter
index_of_maximum = scipy.argmax(R.getrow(i).data)
delimiter
coo_matrix((vals, (i, j)), shape=(m, n)).asformat(format)
delimiter
hi()
delimiter
self.release()
delimiter
f.close()
delimiter
fcntl.ioctl(sock, SIOCSIFADDR, ifreq)
delimiter
fig, ax = plt.subplots()
delimiter
[seq[0]] + noVow(seq[1:])
delimiter
print(tz_to_timedelta(tz))
delimiter
clf2.fit(X, y)
delimiter
ax.xaxis.tick_top()
delimiter
print(list(product(list(range(2)), repeat=k)))
delimiter
getattr(self.wrapee, attr)
delimiter
dist = numpy.sqrt(numpy.dot(temp, temp))
delimiter
np.linalg.inv(a)
delimiter
print(testmodule.__doc__)
delimiter
total = sum(int(i) for i in line)
delimiter
f2(**d)
delimiter
newstr = str[-4:]
delimiter
plt.plot(t, s)
delimiter
ax.xaxis_date()
delimiter
set(a.items()) - set(b.items())
delimiter
br.set_cookiejar(cj)
delimiter
dep_list.append(opcodes[i])
delimiter
layout = QtGui.QVBoxLayout(self)
delimiter
print(map(str, EmployeeList))
delimiter
lambda d=d: self.root.change_directory(d)
delimiter
print(fn(10))
delimiter
d = datetime.date(year=1940, month=1, day=1)
delimiter
a[:2, :2]
delimiter
print(i.text)
delimiter
getattr(foo, string1 + string2)()
delimiter
list(get_stuff(d))
delimiter
not any(i in seen or seen.add(i) for i in x)
delimiter
request = requests.get(image_url, stream=True)
delimiter
print(solve(array1, 1, 5))
delimiter
ax = plt.subplot(111)
delimiter
p.search(s).group(1)
delimiter
any(map(eval, my_list))
delimiter
atexit.register(report)
delimiter
ld.append({l[0]: int(l[col]) for l in ll})
delimiter
stopwaitsecs = 10
delimiter
x.wrong
delimiter
request.user.pretty_username()
delimiter
lists.append([])
delimiter
childobject.parprint()
delimiter
print(titlenode[0].firstChild.nodeValue)
delimiter
[x for _, x in zip(list(range(n)), generator)]
delimiter
print(line)
delimiter
ax.set_aspect(1)
delimiter
id = Column(Integer, primary_key=True)
delimiter
fn(*args, **kwargs)
delimiter
console_handler.setLevel(logging.DEBUG)
delimiter
a, b = c.imag, c.real
delimiter
startupinfo = subprocess.STARTUPINFO()
delimiter
first_mask[first_mask] = second_mask
delimiter
backward = lambda t: t[-1] + backward(t[:-1]) if t else t
delimiter
courses = {}
delimiter
self.archive = py7zlib.Archive7z(fp)
delimiter
xticks[0].label1.set_visible(False)
delimiter
conn.close()
delimiter
parser = argparse.ArgumentParser()
delimiter
calendar.timegm(d.timetuple())
delimiter
irn += repr(num)
delimiter
client = paramiko.SSHClient()
delimiter
fig.set_size_inches(10, 15)
delimiter
plt.tight_layout()
delimiter
[2, 4]
delimiter
ax.xaxis_date()
delimiter
screen.refresh()
delimiter
c[5:6, (7)]
delimiter
print(stdout.read())
delimiter
ax.add_patch(polygon)
delimiter
print(model.predict(np.array([[1, 0]])))
delimiter
serializer_class = TownSerializer
delimiter
_quicksort(array, 0, len(array) - 1)
delimiter
x = np.linspace(-1, 1, 201)
delimiter
c = Counter([values[1] for values in d.values()])
delimiter
a1.destroyCallback.add(b)
delimiter
pygame.mixer.music.play()
delimiter
tk.Frame.__init__(self, master)
delimiter
X, Y = np.meshgrid(x, y)
delimiter
print(ops[op](True, False))
delimiter
time.sleep(timeout)
delimiter
f.__code__.co_name
delimiter
add(**arg)
delimiter
print(traceback.format_exception_only(e.__class__, e))
delimiter
G.add_edge(1, 2)
delimiter
dice = [random.randint(1, 6) for x in range(4)]
delimiter
np.digitize(date_bins_i8, date_bins_i8)
delimiter
print(tcpdump)
delimiter
stateB()
delimiter
stateC()
delimiter
days = (a - b).days
delimiter
sum([x] * 10)
delimiter
pl.plot(pl.randn(100))
delimiter
Foo.bar.__func__ is foo
delimiter
np.concatenate((x[:, (i), (i)], x[:, (i), (j)]), axis=1)
delimiter
canv = Canvas(root, width=100, height=100)
delimiter
urllib.request.install_opener(opener)
delimiter
self.extracting(random.uniform(0, self.weight))
delimiter
self.sampling(random.uniform(0, self.weight))
delimiter
bm = b.reshape((10, 10, 2))
delimiter
matches.append(item)
delimiter
X, Y = numpy.meshgrid(x, y)
delimiter
df.groupby(group_hours).apply(insert_missing_hours).reset_index(drop=1)
delimiter
phone = models.CharField(max_length=250, blank=True, null=True)
delimiter
A.shape
delimiter
admin.site.register(Log, LogAdmin)
delimiter
pdf = df.toPandas()
delimiter
spinbox.grid(row=2, column=0)
delimiter
[42, 1] in a.tolist()
delimiter
df = df.dropna().reset_index(drop=True)
delimiter
f.read()
delimiter
ax.plot(plotlist[tracenum])
delimiter
set(q).intersection(w)
delimiter
assert max_product([-5]) == 1
delimiter
os.makedirs(target_path)
delimiter
sock.sendto(dns.pack(), (MCAST_GRP, UDP_PORT))
delimiter
traceback.print_exc()
delimiter
data = data.ix[data[cols] > 0]
delimiter
my_dict = json.loads(input)
delimiter
stats.norm.interval(0.68, loc=mu, scale=sigma)
delimiter
self.browser.quit()
delimiter
self.transport.loseConnection()
delimiter
new_a = a.reshape(new_shape)
delimiter
root = tk.Tk()
delimiter
ax = plt.gca()
delimiter
msg.attach(att)
delimiter
diff = difflib.ndiff(file1.readlines(), file2.readlines())
delimiter
compressed_table.append((istart, iend, table[i - 1]))
delimiter
sample = lognorm.rvs(sigma, 0, scale, size=1000000)
delimiter
type = models.CharField(max_length=5, choices=MEDIA_TYPES)
delimiter
l = np.asarray(l)
delimiter
d = array([0, 1])
delimiter
p()
delimiter
__init__.py
delimiter
random.shuffle(list_of_questions)
delimiter
plt.imshow(image, extent=[x.min(), x.max(), y.min(), y.max()])
delimiter
id = Column(Integer, primary_key=True)
delimiter
self.window.setLayout(self.layout)
delimiter
colorbar.set_ticks(np.linspace(0, ncolors, ncolors))
delimiter
Process(target=worker, args=(task_queue, done_queue)).start()
delimiter
[True, True, False, True, True, False, True],
delimiter
mycounter = Counter(txt.split())
delimiter
cv2.waitKey(1)
delimiter
m.save()
delimiter
ingredients = IngredientSerializer(many=True)
delimiter
cythonize(*args, **kwargs)
delimiter
response = urllib.request.urlopen(req)
delimiter
value = myVariant.toString()
delimiter
cmp(len(a), len(b))
delimiter
xvalues = np.tile(np.arange(im.shape[1]), (1, 2))
delimiter
prev.append(line)
delimiter
subject = forms.CharField(max_length=100, required=True)
delimiter
temp[mask2] = 2
delimiter
l.sort(key=lambda t: t[1], reverse=True)
delimiter
equals = [(x[1:] == x[:-1]) for x in transposed]
delimiter
print(a[np.sort(idx)])
delimiter
w.set_linewidth(2)
delimiter
df2 = pd.DataFrame(df1)
delimiter
main()
delimiter
t.start()
delimiter
data.plot()
delimiter
logging.getLogger(__name__).setFormatter(log_format)
delimiter
sess.run(embedding_init, feed_dict={embedding_placeholder: embedding})
delimiter
layout = QVBoxLayout()
delimiter
sum(conf_matrix[i][i] for i in range(len(conf_matrix))) / t
delimiter
print(a[1, 5])
delimiter
Data[..., (0)] + 1j * Data[..., (1)]
delimiter
print(4 * math.atan(1))
delimiter
index = [(i + 1) for i in range(10)]
delimiter
array([1, 1, 1, 1])
delimiter
self._stop = threading.Event()
delimiter
pool = multiprocessing.Pool()
delimiter
predicted = classifier.predict(X_test)
delimiter
students = Students.objects.get.all()
delimiter
in_memory_file = file.read()
delimiter
f = input()
delimiter
sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)
delimiter
x = 0.1 * np.sin(2 * np.pi * 1.2 * np.sqrt(t))
delimiter
ax = fig.add_subplot(111)
delimiter
np.mean(arr, axis=1)
delimiter
plt.xticks(new_xticks, new_xticks)
delimiter
print(soup.title.string)
delimiter
urllib.parse.urlencode(params)
delimiter
s = pxssh.pxssh()
delimiter
lis[0]()
delimiter
set(item) - set(z)
delimiter
p.join()
delimiter
y.append(sublist[1])
delimiter
input = sys.stdin.readline()
delimiter
frame.grid(column=0, row=0, sticky=(N, S, E, W))
delimiter
0, 42, -1, 0, 45, 1
delimiter
fig = plt.figure()
delimiter
app = QApplication(sys.argv)
delimiter
do_something_6()
delimiter
jmag = np.array(jmah)
delimiter
np.interp(np.linspace(0, npt, nbin + 1), np.arange(npt), np.sort(x))
delimiter
sys.stdout.write(term.BOL + term.CLEAR_EOL)
delimiter
count += 1
delimiter
os.utime(path_to_file, (access_time, modification_time))
delimiter
np.vstack((a, b, c)).T
delimiter
df
delimiter
y = np.random.rand(n)
delimiter
print(Counter(n1) - Counter(n2))
delimiter
plt.legend()
delimiter
print(response.headers)
delimiter
ax0b.get_yaxis().get_offset_text().set_x(-0.075)
delimiter
ax0c.get_yaxis().get_offset_text().set_x(-0.075)
delimiter
a = np.arange(100)
delimiter
ax = plt.gca()
delimiter
self.__add__(other)
delimiter
repr(s)
delimiter
numpy.where(a > 2)
delimiter
batch.add(service.farmers().list(), callback=list_farmers)
delimiter
delta = timedelta(hours=t.hour, minutes=t.minute, seconds=t.second)
delimiter
self.assertAlmostEqual(tr(2, 1), 0.0718, 4)
delimiter
[x[x != 0] for x in np.split(a, np.where(a == 0)[0]) if len(x[x != 0])]
delimiter
A = (C * mask).sum(axis=-1)
delimiter
plt.ion()
delimiter
reader = csv.reader(fin)
delimiter
self.view.setColumnWidth(0, 800)
delimiter
a[[[0], [1]], i]
delimiter
x += (0, 0),
delimiter
len(net.params)
delimiter
ser.dropna().plot(ax=axes[1])
delimiter
[0, 0, 0, 0]
delimiter
plt.xlim(0, 10)
delimiter
display.popen.terminate()
delimiter
print(df.iloc[new_index])
delimiter
print(sline)
delimiter
n += 1
delimiter
app.run(port=7080, **kwargs)
delimiter
d2 = {k: f(v) for k, v in list(d.items())}
delimiter
tuple(zip(MONTHS, MONTHS))
delimiter
plt.show()
delimiter
parity([perm0[i] for i in perm1])
delimiter
sys.stdout = progA.stdin
delimiter
df.loc[g.groups.get(2, [])]
delimiter
time.sleep(5)
delimiter
plt.tight_layout()
delimiter
mylist.sort()
delimiter
page = urllib.request.urlopen(req).read()
delimiter
s.set_debuglevel(1)
delimiter
urllib.request.Request(url, data, header)
delimiter
console.setLevel(logging.INFO)
delimiter
f.close()
delimiter
new_list = [dd for dd in my_list if not dd is new_dict]
delimiter
print(k, Dictionary[k])
delimiter
ax.scatter(x, yflat, z)
delimiter
img_temp.write(opener.open(url).read())
delimiter
[i for i in l1 if not any(j in i for j in l2)]
delimiter
ax = plt.axes()
delimiter
line = f.readlines()[7]
delimiter
self.result_queue.put(answer)
delimiter
np.take(arr, inds)
delimiter
t = np.arctan2(y, x)
delimiter
current_line += 1
delimiter
name, age
delimiter
self.__dict__.update(locals())
delimiter
ax.add_patch(patch)
delimiter
soup = BeautifulSoup.BeautifulSoup(html)
delimiter
res.get()
delimiter
print(model.predict(np.array([[0, 0]])))
delimiter
data = client.get_spot_price()
delimiter
[(i + i * weight) for i in v] + [n]
delimiter
im.wcs[::1 / 128, ::1 / 128]
delimiter
hasattr(self, name)
delimiter
self.listbox.select_set(0)
delimiter
ax = fig.add_axes([0, 0, 1, 1], frameon=False)
delimiter
ip.close()
delimiter
d.setdefault(i, set()).add(j)
delimiter
a.save()
delimiter
response.close()
delimiter
decorator2(f)
delimiter
s = sys.stdin.read()
delimiter
response = request.get_response(main.app)
delimiter
plt.show()
delimiter
[os.getpid(param) for param in params]
delimiter
self.SetSizer(s)
delimiter
self._window.destroy()
delimiter
cdict = {c.name: c.value for c in cj}
delimiter
func(*args, **kwargs)
delimiter
parser = argparse.ArgumentParser()
delimiter
a == a
delimiter
worksheet.set_column(i, i, width)
delimiter
d = dict(d)
delimiter
root = Tk()
delimiter
L[i] = L[i][::-1]
delimiter
time.gmtime(ts / 1000)
delimiter
f = pd.DataFrame(dict(year=list(range(2000, 2011)), A=np.random.rand(11)))
delimiter
print(not any(dict2.values()))
delimiter
writer.writerows(grouped)
delimiter
print(df[df.Name.isin(val)])
delimiter
my_thread.start()
delimiter
self.layout.addWidget(self.statusBar)
delimiter
df1.update(df2)
delimiter
thread.start()
delimiter
proxy.ProxyClient.__init__(self, *args, **kwargs)
delimiter
elem_list.append(i)
delimiter
fig = plt.figure(figsize=(10, 5))
delimiter
ast.literal_eval(raw)
delimiter
print(a[-9:])
delimiter
fig.subplots_adjust(left=0, right=1, top=1, bottom=0, hspace=0, wspace=0)
delimiter
db.engine.execute(schema)
delimiter
r.destroy()
delimiter
CORBA.__file__
delimiter
d.setdefault(j, []).append(i)
delimiter
group(5, list(range(5)))
delimiter
int(round(n[0]))
delimiter
len(s)
delimiter
plt.show()
delimiter
M.diagonal()
delimiter
root.quit()
delimiter
a = np.arange(24).reshape((4, 6))
delimiter
ax2 = ax1.twinx()
delimiter
os.setpgrp()
delimiter
start = time.time()
delimiter
layout.addWidget(self.table)
delimiter
wait = WebDriverWait(driver, 5)
delimiter
pylab.figure()
delimiter
response
delimiter
X[np.ix_(a, b)]
delimiter
tk.Frame.__init__(self, master)
delimiter
print(avg)
delimiter
tqdm_pandas(tqdm_notebook, *args, **kwargs)
delimiter
b = dict(zip(i, i))
delimiter
zip(s, s[1:])
delimiter
self.pic = QtGui.QPixmap(imagePath)
delimiter
data = output.getvalue()[14:]
delimiter
changecolor(rect)
delimiter
instance = ModelClass.objects.create(**validated_data)
delimiter
matches.append(m.group(0))
delimiter
a, b = select_choice()
delimiter
a[::2]
delimiter
reader = csv.reader(fin)
delimiter
array = np.random.random(10)
delimiter
dict.__setitem__(self, key, value)
delimiter
self._result_handler.start()
delimiter
count += 1
delimiter
plt.ylim(0 - 0.5, data.shape[0] - 0.5)
delimiter
lst.sort(key=lambda x: x[1])
delimiter
int(base * round(float(x) / base))
delimiter
ax1.yaxis.tick_left()
delimiter
main()
delimiter
A = numpy.concatenate((A, newrow))
delimiter
g.user.is_authenticated()
delimiter
app = wx.PySimpleApp()
delimiter
plt.hold(True)
delimiter
self.expunge(record)
delimiter
print(df.sub(a, axis=0))
delimiter
signal.signal(signal.SIGUSR1, signal_handler)
delimiter
kernel = np.ones((10, 10), np.uint8)
delimiter
ax.set_ylim(0, 255)
delimiter
br = mechanize.Browser()
delimiter
np.putmask(a, a >= m, m - 1)
delimiter
g_list = list(filter(not_subtle_condition, g_list))
delimiter
doc.appendChild(el)
delimiter
time.sleep(5)
delimiter
name = models.CharField(max_length=128)
delimiter
client.close()
delimiter
os.makedirs(os.path.dirname(dst))
delimiter
window2.destroy()
delimiter
timer2.stop()
delimiter
serializer = VenueSerializer(venues, many=True)
delimiter
gleason.setParseAction(diceGleasonParseAction)
delimiter
numpy.dot(c, a)
delimiter
end = string.index(end_marker, start + 1)
delimiter
tex_data[tex_data == 0] = np.nan
delimiter
hxs = HtmlXPathSelector(response)
delimiter
os.write(fh, zf.read(name))
delimiter
e = {v: k for k, v in a.items()}
delimiter
reversed(it.islice(it.chain.from_iterable(reversed(a)), 5))
delimiter
dict.update({item[0]: item[1]})
delimiter
random.shuffle(l)
delimiter
cv.Circle(color_image, center_point, 10, cv.CV_RGB(255, 100, 0), 1)
delimiter
result = db.table.filter(db.table.column.ilike(looking_for))
delimiter
e.extract()
delimiter
dict(zip(l2, map(len, list(list(g[1]) for g in groups))))
delimiter
dayDict = {d: [] for d in weekList}
delimiter
current_date += datetime.timedelta(days=1)
delimiter
classifier.fit(train_features, train_labels)
delimiter
k.sort()
delimiter
client.create_video(**kwargs)
delimiter
assert np.allclose(expected, result2)
delimiter
[1, 1, 1, 2, 2, 2],
delimiter
ax.set_yticks([])
delimiter
Serial.println(number)
delimiter
self.build_response_from_file(request)
delimiter
bytes(key)
delimiter
time.sleep(1)
delimiter
mymatrix = [[1, 2, 9], [4, 9, 6], [7, 8, 9]]
delimiter
do_stuff()
delimiter
urlopen(req).read()
delimiter
exit()
delimiter
p.terminate()
delimiter
hash(frozenset(self.__dict__.items()))
delimiter
theother()
delimiter
N += 1
delimiter
writer.writerow(line)
delimiter
driver.get(url)
delimiter
logging.root.addHandler(file_handler)
delimiter
excel.Application.Quit()
delimiter
next(b)
delimiter
app = Flask(__name__)
delimiter
seconds = int(cur.fetchone()[0])
delimiter
a.insert(0, x)
delimiter
workbook.close()
delimiter
matplotlib.pyplot.scatter(n.predict(nfeatures).tolist(), targets.tolist())
delimiter
numpy.bincount(x, weights=w)
delimiter
id = Column(Integer, primary_key=True)
delimiter
sum(c.values())
delimiter
b.comments[0].content
delimiter
draw_networkx_edges(G, pos)
delimiter
painter.setBrush(QBrush(Qt.white))
delimiter
pdb.set_trace()
delimiter
os.rename(infilename, newname)
delimiter
[1, 1, 1, 1]
delimiter
fig, ax1 = plt.subplots()
delimiter
sys._getframe().f_back.f_code.co_name
delimiter
text = msg.as_string()
delimiter
df.iloc[pd.np.r_[10:12, 25:28]]
delimiter
session.add(model)
delimiter
ax4.set_ylim(0, 1.2)
delimiter
self.clear_canvas()
delimiter
new_dict[length] = {mykey: name_num[mykey]}
delimiter
self.Show()
delimiter
dir = os.path.join(root, i)
delimiter
main()
delimiter
lst.sort(key=lambda x: x[0])
delimiter
merged[k].add(d2[k])
delimiter
binary_search([1, 5, 8, 10], 15)
delimiter
f = lambda r: r * (sp.j1(r) / r) ** 2
delimiter
l = [(0, 1, 0), (1, 1, 0)]
delimiter
reader = csv.reader(f)
delimiter
self.add_node(origin)
delimiter
pylab.show()
delimiter
self.layout.addWidget(self.spinBox)
delimiter
subset[subset.isin(myList)].stack().duplicated().unstack().any(1)
delimiter
print(str(a[0]))
delimiter
lbl.pack()
delimiter
assert len(a) == len(b)
delimiter
[m.start() for m in pattern.finditer(sentence)]
delimiter
print(my_list)
delimiter
ax = fig.add_subplot(111)
delimiter
any(map(lambda c: c.isdigit(), value))
delimiter
print(mylist)
delimiter
traceback.print_exception(type_, value, tb)
delimiter
df.applymap(onlynumbers)
delimiter
app = flask.Flask(__name__)
delimiter
df_array = np.array(list(upsample(person)))
delimiter
print(CreateTable(Model.__table__))
delimiter
parser = argparse.ArgumentParser()
delimiter
ebar = plt.errorbar(x, y, yerr=err)
delimiter
pylab.plot(data[:, (0)], data[:, (1)], label=label)
delimiter
minheap.add(maxheap.poll())
delimiter
plt.autoscale()
delimiter
list(itertools.chain(*list_))
delimiter
painter.save()
delimiter
plt.plot(x, y, fmt, label=label)
delimiter
result.append([k, ms[k] + mb[k]])
delimiter
ax.plot()
delimiter
main()
delimiter
plt.show()
delimiter
plt.subplot(2, 2, n + 1)
delimiter
row = {name_map[name]: val for name, val in list(row.items())}
delimiter
bounds = np.repeat([(0, 1)], D, axis=0)
delimiter
yolk
delimiter
xs, ys = [], []
delimiter
[iterable[i:i + length] for i in range(len(iterable) - length + 1)]
delimiter
sys.exit(1)
delimiter
json.JSONEncoder.default(self, obj)
delimiter
sorted(list1)[:2]
delimiter
app = Flask(__name__)
delimiter
[i for i in range(1, len(x)) if x[i] != x[i - 1]]
delimiter
B = np.interp(xx, x, A)
delimiter
s = df.ix[:, (0)]
delimiter
b.a.filter(a=a1)
delimiter
[0, 1, 0, 0, 1, 29]
delimiter
frame.grid(column=1, row=1, sticky=Tkconstants.NSEW)
delimiter
polycube = numpy.rot90(polycube)
delimiter
time.sleep(0.5)
delimiter
cursor = connection.cursor()
delimiter
((0 < x) & (x < 1)).any()
delimiter
mywidget.pack()
delimiter
a = np.array(literal_eval(a))
delimiter
sum(map(len, list(d.values())))
delimiter
d[v].append(i)
delimiter
image.save(b.image.path, quality=20, optimize=True)
delimiter
inds = np.cumsum(tmp_range[1:][::-1] + 1)
delimiter
stream_handler.setLevel(logging.INFO)
delimiter
act.pyqtConfigure(triggered=self.on_triggered)
delimiter
calendar.day_name[dayoftheweek]
delimiter
MyUser.objects.filter(tags__in=id_list)
delimiter
sys.exit(0)
delimiter
browser = webdriver.Firefox()
delimiter
df = DataFrame(data)
delimiter
self.assertAlmostEqual(tr(2, 2), 0.865, 4)
delimiter
print(info.group(1))
delimiter
sys.exit(unittest.main())
delimiter
is_separately_linear(eq1, [a, c])
delimiter
new_df = old_df[list_of_columns_names].copy()
delimiter
sc = ax.scatter(x, y, z)
delimiter
self.fcall = fcall
delimiter
w.writerow([row[0], colname, colval])
delimiter
print(soup)
delimiter
print([pos for pos, char in enumerate(s) if char == c])
delimiter
unique_id = models.ForeignKey(MyUUIDModel, unique=True)
delimiter
np.random.uniform(0, 1, (500, 2000))
delimiter
print(y.round(2))
delimiter
self._compile_rules()
delimiter
MySQLdb.escape_string(SQL)
delimiter
self.result.append(word[:-1])
delimiter
o.A(1)
delimiter
plt.show()
delimiter
idx = np.where(~mask, np.arange(mask.shape[1]), 0)
delimiter
[x for b in a for x in b]
delimiter
fig = plt.figure()
delimiter
print(m.group(2))
delimiter
f1.close()
delimiter
top_line, bottom_line = top.get_line(), bottom.get_line()
delimiter
time.sleep(1)
delimiter
self.timer = Timer(self.timeout, self.handler)
delimiter
copy_a -= copy_a[0].copy()
delimiter
self.__dict__.update(**attrs)
delimiter
file.close()
delimiter
f.write(etree.tostring(root, pretty_print=True))
delimiter
print(pd.concat([df.iloc[(0), :], df.iloc[(-1), :]], axis=1))
delimiter
os.rename(outfilename, in_filename)
delimiter
f.seek(0)
delimiter
platform.system()
delimiter
mail.ehlo()
delimiter
urllib.request.install_opener(opener)
delimiter
pickle.dumps(value)
delimiter
data = sys.stdin.readline()
delimiter
self.crawler.start()
delimiter
result.insert(1, row_separator)
delimiter
dt = datetime.datetime.now()
delimiter
app.mainloop()
delimiter
enemies = []
delimiter
cj = cookielib.CookieJar()
delimiter
pd.options.display.max_colwidth
delimiter
somelist[:] = [tup for tup in somelist if determine(tup)]
delimiter
time.sleep(0.5)
delimiter
plt.plot([pc[i][0], pc[i + 1][0]], [pc[i][1], pc[i + 1][1]], color=c)
delimiter
page = resp.read()
delimiter
data = sin(2 * pi * 1000 * t)
delimiter
app = Flask(__name__)
delimiter
event.set()
delimiter
plt.show()
delimiter
circular.append(p)
delimiter
p4.readarray(x)
delimiter
self.lb2.yview(*args)
delimiter
TrueXor(True, False, False)
delimiter
solve(a * x ** 2 + b * x + c, x)
delimiter
[max(s.index(max(s)) - s.index(min(s)), 0) for s in lst]
delimiter
merged[k].append(d1[k])
delimiter
out = sys.stdout.getvalue()
delimiter
print(ET.tostring(root))
delimiter
f = plt.figure(figsize=(10, 6))
delimiter
getattr(self.myobj, attr)
delimiter
np.vstack(l)
delimiter
func.__code__.co_argcount
delimiter
deletes[i]
delimiter
urllib.request.HTTPSHandler.__init__(self)
delimiter
plt.show()
delimiter
self.entry.pack(pady=4)
delimiter
print((a, b))
delimiter
random.choice(my_list)()
delimiter
p = np.array([(0, 0), (1, 0), (0, 1), (1, 1), (2, 2)], dtype=np.float)
delimiter
fig = plt.figure()
delimiter
main()
delimiter
plt.ylim(-1.1, 1.1)
delimiter
fh.close()
delimiter
print(random.choice(value), key)
delimiter
p2.start()
delimiter
br.set_handle_robots(False)
delimiter
print(data)
delimiter
ch = logging.StreamHandler()
delimiter
soup.prettify()
delimiter
df2 = df2.reset_index()
delimiter
labels = ax.get_xticklabels()
delimiter
plt.setp(ax2.get_yticklabels(), visible=False)
delimiter
cDC.DeleteDC()
delimiter
cur.fetchone()
delimiter
self.mainframe.columnconfigure(0, weight=1)
delimiter
do_something_with(obj)
delimiter
hist(date2num(list_of_dates), cumulative=True)
delimiter
a * exp(-(x - x0) ** 2 / (2 * sigma ** 2))
delimiter
reader = csv.DictReader(fp)
delimiter
sys.exit(main())
delimiter
sys.exit(application.exec_())
delimiter
logging.basicConfig(level=logging.DEBUG)
delimiter
pw = rps()
delimiter
df.set_index(date_col_name, drop=True, inplace=True)
delimiter
pygame.init()
delimiter
self.task.cancel()
delimiter
main()
delimiter
print(pd.merge(df_subset, df).equals(df_subset))
delimiter
math.sqrt(-1) / 0
delimiter
list(solve(5))
delimiter
my_list.append(item)
delimiter
json.dumps(obj, default=method_name)
delimiter
s.getvalue()
delimiter
self.data = np.zeros((100,))
delimiter
ax = fig.gca()
delimiter
app = QApplication(sys.argv)
delimiter
sys.modules[name] = mod
delimiter
win.set_size_request(100, 100)
delimiter
ax.clear()
delimiter
cv2.circle(img, corner, 7, (255, 255, 0), -1)
delimiter
old_stdout = sys.stdout
delimiter
numpy.finfo(float).max
delimiter
kurt
delimiter
image = Image.open(image_string)
delimiter
seed2 = df[~msk].mean()
delimiter
self.panel.SetSizer(sizer)
delimiter
queryset = Workout.objects.none()
delimiter
plt.figure(figsize=(10, 10))
delimiter
raise StopIteration()
delimiter
reply = socket.recv()
delimiter
response = requests.get(url, stream=True)
delimiter
do_something_in_mechanize()
delimiter
my_logger.addHandler(handler)
delimiter
pylab.plot(list(range(11)), list(range(11)))
delimiter
reader = csv.reader(open(filename))
delimiter
print(myhtml.text_content())
delimiter
print(json.dumps(test_json, default=json_debug_handler))
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
sys.exit(1)
delimiter
driver.close()
delimiter
sieve.primerange(a, b)
delimiter
axes.append(ax.twinx())
delimiter
main()
delimiter
df = pd.concat([df] * 1000).reset_index(drop=True)
delimiter
len(line)
delimiter
color = [(255, 0, 0), (0, 255, 0), (0, 0, 255)]
delimiter
oFid.close()
delimiter
sys.stdout = stdout
delimiter
comp += numpy.min(first + second, axis=2)
delimiter
print(i, j)
delimiter
plt.plot(Time, signal)
delimiter
mywidget.update_idletasks()
delimiter
logger.setLevel(logging.DEBUG)
delimiter
self.sizer.Add(self.list, proportion=1, flag=wx.EXPAND | wx.ALL, border=5)
delimiter
QtGui.QWidget.__init__(self, *args, **kwargs)
delimiter
payload = msg.get_payload()
delimiter
zdf1 = bcolz.ctable.fromdataframe(df1)
delimiter
s.close()
delimiter
addopts = --pylint
delimiter
np.count_nonzero(a & r != b & r)
delimiter
np.array([d[x] for x in u])[inv].reshape(a.shape)
delimiter
current_file = os.path.abspath(os.path.dirname(__file__))
delimiter
result = [s for s in data if len(s) == maxlen]
delimiter
process(line)
delimiter
self._stream.flush()
delimiter
r = requests.post(url, data=values)
delimiter
result.append((int(k), c))
delimiter
curses.noecho()
delimiter
cols = df.columns.tolist()
delimiter
ax4.plot(data, data, data, data ** 2 / 10, data, np.sin(data))
delimiter
[A[b] for b in range(9, -1, -1)]
delimiter
beta2 = np.linalg.solve(a, b.T)
delimiter
print(df)
delimiter
[(B.pop(0) if x else A.pop(0)) for x in selector]
delimiter
C = np.swapaxes(B, 1, 2)
delimiter
all.append(row)
delimiter
self.write(login_response)
delimiter
r.reduceByKey(lambda x, y: x + y).collect()
delimiter
x = list(sum(list(dict.items()), ()))
delimiter
shutil.copy2(path, temp_path)
delimiter
lst[i] = lst[i] * 2
delimiter
add_patch(axes[1], alpha=0.2, rasterized=True)
delimiter
axcltwo.set_ylim(binimg.shape[0], -1)
delimiter
self.seek(0, 2)
delimiter
f.seek(findex[n] + 1)
delimiter
print(max(len(i[j]) for i in x))
delimiter
fig = pyplot.figure()
delimiter
func()
delimiter
fp.close()
delimiter
user.user_permissions.add(perm)
delimiter
{NULL, NULL, 0, NULL}
delimiter
sio.getvalue()
delimiter
pipe_lrSVC.fit(X_train, y_train)
delimiter
indices = sp_matrix.nonzero()
delimiter
res2 = pd.Series(res_arr, index=express_df.index)
delimiter
p = sns.regplot(x=dat.x, y=ydat, data=dat, ax=ax)
delimiter
form = UserprofileForm(request.POST)
delimiter
pygame.quit()
delimiter
o4 = O4()
delimiter
o5 = O5()
delimiter
Child().on_start()
delimiter
plt.show()
delimiter
user = models.ForeignKey(User)
delimiter
raise WindowsError()
delimiter
A01 = A[:, 0:2].astype(int)
delimiter
self.Show(True)
delimiter
plt.show()
delimiter
ax.set_xticklabels(columns_my_order)
delimiter
Fraction(0.185)
delimiter
peaker(Y)
delimiter
print(BASE_DIR)
delimiter
logits = faultnet.inference(images)
delimiter
X[:, (0)] - a
delimiter
time.sleep(2)
delimiter
x, chopped = int(x), x - int(x)
delimiter
df
delimiter
ax.w_xaxis.set_pane_color((1.0, 1.0, 1.0, 1.0))
delimiter
print(cur.fetchone())
delimiter
l.append(v)
delimiter
print(line)
delimiter
fig, ax = plt.subplots()
delimiter
re.compile(RE, re.UNICODE)
delimiter
sum(1 for i in a.flat if i)
delimiter
plt.plot(list(range(10)), [math.sin(x) for x in range(10)])
delimiter
multiples.update(list(range(i * i, n + 1, i)))
delimiter
date.replace(tzinfo=timezone.utc)
delimiter
print(x)
delimiter
fapp(request.environ, self.start_response)
delimiter
list(islice(gen(), n))
delimiter
ax.patch.set_visible(False)
delimiter
mean = all.mean(axis=-1)
delimiter
print(df.TIMESTAMP.dt.hour)
delimiter
button.pack()
delimiter
plt.plot(x, y)
delimiter
print(np.unravel_index(np.argmax(x), x.shape))
delimiter
array([[NaN, NaN, NaN, NaN], [NaN, NaN, NaN, NaN], [NaN, NaN, NaN, NaN]])
delimiter
ax = fig.add_subplot(111)
delimiter
newdate = datetime.datetime(*map(int, values))
delimiter
index, value = max(data, key=lambda item: item[1])
delimiter
df2 = pd.DataFrame(columns=cols, index=list(range(2)))
delimiter
map.drawcoastlines()
delimiter
f.readline()
delimiter
ast = compiler.parse(eq)
delimiter
outfile.close()
delimiter
annotation(name, value)
delimiter
deletesublist[index]
delimiter
System.out.println(answer.toString())
delimiter
numpy.dstack((x, y))
delimiter
mydict = {key: value for key, value in zip(x, y)}
delimiter
width, height = win.get_size()
delimiter
pd.concat([df.iloc[-shift:], df.iloc[:-shift]])
delimiter
models.Model.save(self, force_insert, force_update)
delimiter
print((a, b, c))
delimiter
app.mainloop()
delimiter
map(np.random.shuffle, arr2d)
delimiter
df.pivot(index=0, columns=1, values=2)
delimiter
print(float(line))
delimiter
d = dict(zip(list(range(1, 10)), list(range(50, 61))))
delimiter
print([(x if x else y) for x, y in p.findall(s)])
delimiter
[0.001, 0.25, 0.5, 0.75, 0.99, 0.999]
delimiter
f = foo()
delimiter
app = Flask(__name__)
delimiter
hets = []
delimiter
canvas.Canvas.__init__(self, *args, **kwargs)
delimiter
b_id = Column(Integer, primary_key=True)
delimiter
conn = urllib.request.urlopen(url)
delimiter
json.dumps(recursive_asdict(data))
delimiter
os.path.join(os.path.normpath(directory), filename)
delimiter
f.__closure__[0].cell_contents
delimiter
file_list.sort(key=lambda a: a[0])
delimiter
wordorder = dict(zip(list2, list(range(len(list2)))))
delimiter
s = pd.Series(l)
delimiter
print((x, next(it)))
delimiter
x[1, 2]
delimiter
np.random.shuffle(arr)
delimiter
float_arr = np.vstack(arr[:, (1)]).astype(np.float)
delimiter
sys.path.append(vendor_dir)
delimiter
df.col = df.col.dropna().apply(lambda x: str(int(x)))
delimiter
os.chmod(path, current_permissions & NO_WRITING)
delimiter
score = sum(i * w(i) for i in x if i in y) / sum(i * w(i) for i in x)
delimiter
answer1[i] += 1
delimiter
self.meth()
delimiter
print(matches[1])
delimiter
dict.__init__(self, *args, **kwargs)
delimiter
mtime = os.path.getmtime(file_name)
delimiter
key = parts[-1]
delimiter
self.obtainingparams(df, tau_1, tau_2, residuals).called
delimiter
categories.setdefault(i[1], []).append(i[0])
delimiter
dc = wx.PaintDC(self)
delimiter
L = [OrderedDict((k, d[k](v)) for k, v in l.items()) for l in L]
delimiter
column_header.set_focus_on_click(False)
delimiter
[([x] + p) for x in seqs[0] for p in product(*seqs[1:])]
delimiter
min(x)
delimiter
megawarc.main()
delimiter
Grandparent.my_method(self)
delimiter
zip(*ntup)
delimiter
soup = BeautifulSoup(html)
delimiter
print(a, b)
delimiter
a.show()
delimiter
server_socket.listen(10)
delimiter
self.frame.Show(True)
delimiter
ax = fig.add_subplot(gs[n])
delimiter
print(r.url)
delimiter
im.seek(i)
delimiter
thread.start()
delimiter
key, value = min(list(dict.items()), key=lambda __v: abs(__v[1] - target))
delimiter
f.save()
delimiter
NP.insert(T, 2, r, axis=0)
delimiter
directory = os.path.realpath(directory)
delimiter
i += 1
delimiter
b.sort(reverse=True)
delimiter
dir = os.path.dirname(__file__)
delimiter
main()
delimiter
r, g, b = im.getpixel((0, 0))
delimiter
s.close()
delimiter
{k: [v for _, v in g] for k, g in groupby(arr, lambda x: x[0])}
delimiter
make_unicorns_from(f)
delimiter
a_pet.say()
delimiter
d1 = datetime.datetime.now()
delimiter
zip_longest(fillvalue=fillvalue, *args)
delimiter
form.fieldname.choices = choice_list
delimiter
p2 = subprocess.Popen(args, stdout=subprocess.PIPE)
delimiter
server = Process(target=app.run)
delimiter
c = sys.stdin.read(1)
delimiter
itertools.product(*([list(C.items())] * 2))
delimiter
logging.exception(e)
delimiter
print(x)
delimiter
main()
delimiter
ax = fig.add_subplot(111)
delimiter
sys.exit()
delimiter
sys.exit(0)
delimiter
np.random.shuffle(arr)
delimiter
print(prettyformat(obj))
delimiter
frw.seek(seekpoint, 0)
delimiter
df.columns = [col_dict.get(x, x) for x in df.columns]
delimiter
q = Queue.Queue(maxsize=0)
delimiter
list.remove(s)
delimiter
self.text.config(yscrollcommand=self.scroller.set)
delimiter
maxrep = reduce(f, l, (0, 0, 0))[2]
delimiter
df.append(df2)
delimiter
definitions.py
delimiter
main()
delimiter
open_cv_image = open_cv_image[:, :, ::-1].copy()
delimiter
print(ElementTree.tostring(tree))
delimiter
l.set_option(ldap.OPT_REFERRALS, 0)
delimiter
is_palindrome(letters)
delimiter
df.stack().values
delimiter
new_contact.save()
delimiter
ax1.yaxis.label.set_color(plot_ax1.get_color())
delimiter
a = A()
delimiter
logging.Formatter.format(self, record)
delimiter
br.set_handle_redirect(True)
delimiter
soup = BeautifulSoup(xml_string)
delimiter
B = A
delimiter
fig, ax = plt.subplots(1, 1)
delimiter
np.dot(rot_matrices, p)
delimiter
pycharm[path_to_your_file]
delimiter
f2.write(data)
delimiter
logging.root.addHandler(console_handler)
delimiter
print(sys.version)
delimiter
my_django_file = ContentFile(f.read())
delimiter
orig(repo, remote, *args, **kwargs)
delimiter
names = list(a.dtype.names)
delimiter
ind.append(arr.index(list(df.iloc[i])))
delimiter
totuple(array)
delimiter
app = Flask(__name__)
delimiter
print(format(tree))
delimiter
logging.error(e, exc_info=True)
delimiter
a[0](1)
delimiter
main()
delimiter
list()
delimiter
p.join()
delimiter
msg.attach(MIMEText(text))
delimiter
lst.sort()
delimiter
form = EditEventForm(instance=event)
delimiter
min((angular_distance(theta, L[i], mod), i, L[i]) for i in [i1, i2])
delimiter
results.sort(key=lambda x: (int(x[0]), x[1]), reverse=True)
delimiter
data = urllib.request.urlopen(url).read()
delimiter
data_list = [([key] + value) for key, value in list(data.items())]
delimiter
pickle.dump(data1, output)
delimiter
l.set_option(ldap.OPT_X_TLS_DEMAND, True)
delimiter
setup()
delimiter
f(*args)
delimiter
Guild.query().filter(Guild.members == self.key)
delimiter
ax.set_xlim(-51, 51)
delimiter
results_list = pool_results.get()
delimiter
sorted(sentence)[-1]
delimiter
print(np.allclose(dets(M), dets_fast(M.copy())))
delimiter
block_start = np.concatenate(([0], np.cumsum(block_count)[:-1]))
delimiter
data += np.random.normal(size=data.shape) * 0.4
delimiter
sys.exit(app.exec_())
delimiter
MyClass(arg1, arg2)
delimiter
bitmap = wx.Bitmap(path)
delimiter
setattr(self, attr, value)
delimiter
item = row[1:]
delimiter
plt.axvline(x=0.2)
delimiter
obj = memcache_client.gets(key)
delimiter
d[l[0]] = l[1]
delimiter
do_another_thing(object_list[-1])
delimiter
l.extend(v)
delimiter
opt.add_argument(*args, **kwargs)
delimiter
groups.setdefault(y, []).append(x)
delimiter
temp = pd.concat([temp, temp2], axis=1)
delimiter
d[key] = value
delimiter
df.apply(LabelEncoder().fit_transform)
delimiter
print(l2set)
delimiter
fig = plt.figure()
delimiter
print(i, is_square(i))
delimiter
admin.site.register(Class, ClassAdmin)
delimiter
browser.add_cookie(cookie)
delimiter
print(x.date())
delimiter
l.append(elt)
delimiter
f.read()
delimiter
on = models.ForeignKey(Member, blank=True)
delimiter
time.sleep(0.0)
delimiter
X = sc.transform(X)
delimiter
[c, d, e, f]
delimiter
ax2 = plt.subplot(212)
delimiter
comments = soup.find_all(string=lambda text: isinstance(text, Comment))
delimiter
parser = argparse.ArgumentParser()
delimiter
here = os.path.dirname(os.path.abspath(__file__))
delimiter
line = line.rstrip()
delimiter
ax.add_patch(circ)
delimiter
print(int(math.sqrt(5)))
delimiter
im.getbbox()
delimiter
fig.tight_layout()
delimiter
p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
delimiter
sleep(snooziness)
delimiter
parser.parse_args()
delimiter
print(foo.bar._decorators)
delimiter
os._exit(1)
delimiter
[string[i:i + k] for i in range(length - k + 1)]
delimiter
a[ind]
delimiter
process.wait()
delimiter
list(range(0, len(given) - len(sublist) + 1))
delimiter
window.add(widget)
delimiter
l[i + 1], l[i] = l[i], l[i + 1]
delimiter
dftot = pd.concat((df1, df2))
delimiter
print(np.split(x, np.where(np.diff(x) > 0.5)[0] + 1))
delimiter
timestamp = (utc_dt - datetime(1970, 1, 1)).total_seconds()
delimiter
SomeClass.some_static_method()
delimiter
print(foo)
delimiter
B = numpy.split(A, split_at)
delimiter
f()
delimiter
app = Flask(__name__)
delimiter
not any(i in seen or seen.append(i) for i in x)
delimiter
(np.corrcoef(M) == 1).sum() == M.shape[0]
delimiter
num_words = sum(len(sentence.split()) for sentence in text)
delimiter
ipshell()
delimiter
ax = fig.add_subplot(111)
delimiter
earth += 100000.0
delimiter
time.sleep(1)
delimiter
response
delimiter
s += A[k] * B[k]
delimiter
time.sleep(0.2)
delimiter
sys.path.append(str(top))
delimiter
lst = [1, 2]
delimiter
scaled_data = [scaler(x) for x in data_list]
delimiter
make_square(2)
delimiter
local.py
delimiter
ax.plot_surface(X, Y, Z)
delimiter
split_list = lambda lst: (lst[0], lst[1:])
delimiter
root = tk.Tk()
delimiter
print(mimetypes.guess_type(url))
delimiter
self.loop.run_forever()
delimiter
setattr(model, name, request.get(name))
delimiter
time.sleep(0)
delimiter
fig.canvas.draw()
delimiter
a = [1, 2]
delimiter
links[1].click()
delimiter
p = multiprocessing.Pool(processes=1)
delimiter
a = list(range(10))
delimiter
[1, 2]
delimiter
response.write(p.body)
delimiter
foo_list.append(lambda : bar.func2([7, 7, 7, 9]))
delimiter
p = Pool(processes=10)
delimiter
sum(x ** 2)
delimiter
patcher.start()
delimiter
ax.xaxis.set_visible(False)
delimiter
print(len(itemlist))
delimiter
root.after(500, add_letter)
delimiter
foo()
delimiter
new_bs = BeautifulSoup(target_html)
delimiter
self.deauthorize()
delimiter
Story.append(table)
delimiter
session1.commit()
delimiter
datetime.datetime.now()
delimiter
dir(f)
delimiter
print(image.shape)
delimiter
server2.handle_request()
delimiter
photo = ImageTk.PhotoImage(image)
delimiter
self.pubsub = self.client.pubsub()
delimiter
getattr(object, attrname)
delimiter
str([])
delimiter
self.my_text.splitlines()
delimiter
self.comboBox_2.clear()
delimiter
pysvn.__file__
delimiter
ax1.legend(loc=2)
delimiter
shuffle(word)
delimiter
self.name = name
delimiter
pool.map(processMdb, mdblist)
delimiter
print(formatdate(timestamp, True))
delimiter
self.client.connect()
delimiter
pylab.figure()
delimiter
ax.xaxis.set_minor_formatter(FixedFormatter(bin_labels))
delimiter
time.tzset()
delimiter
seen.add(line)
delimiter
print(difft2(time(20, 40, 0), time(18, 41, 0)))
delimiter
wb.close()
delimiter
extend_array(data, 10)
delimiter
len2 = lambda l: sum([len(x) for x in l])
delimiter
root = Tk()
delimiter
df[~bad_df]
delimiter
print(k, v)
delimiter
np.array(rdd.collect()).nbytes
delimiter
start += 1
delimiter
id = Column(Integer, primary_key=True)
delimiter
list(chain.from_iterable(islice(theList, *t) for t in [(4, 7), (12, 18)]))
delimiter
parser = argparse.ArgumentParser()
delimiter
__init__.py
delimiter
os.fdopen(fd, access)
delimiter
ax1.set_xlim(*np.log10(olim))
delimiter
G.edges(data=True)
delimiter
ipdb.runcall(foo, 1, 2)
delimiter
print(num.contents[0])
delimiter
print(np.all(B[b_to_a] == A))
delimiter
p.map(Copier(target_dir), file_list)
delimiter
file = forms.FileField()
delimiter
map(lambda x_y: x_y[0] + x_y[1], zip(repeat(x), y))
delimiter
a[:] = [((x,) + mapping[x]) for x in b]
delimiter
ab = np.hstack((a, b))
delimiter
nums = [int(n) for n in x.split()]
delimiter
c.__bases__
delimiter
(options + [False])[current_option == options[0]]
delimiter
window.set_border_width(10)
delimiter
ax.set_yticks(z)
delimiter
self.y2 += self.speed * math.sin(self.bearing)
delimiter
list.append(i)
delimiter
out = np.where(~a_extm[1:-1] & mask[1:-1], np.nan, a)
delimiter
df.iloc[approach1(df.A.values, df.B.values)]
delimiter
count += 1
delimiter
self.bar()
delimiter
print(set(regx.split(string)) & set(search))
delimiter
scons
delimiter
stdscr.refresh()
delimiter
b.load()
delimiter
train_x, train_y = train_set
delimiter
ax.set_xticks([])
delimiter
sb.plt.show()
delimiter
p.map(mp_worker, (task1, task2))
delimiter
print(repr(str(row[0])))
delimiter
X = vectorizer.fit_transform(documents)
delimiter
deletel[n:]
delimiter
f.write(buffer(array))
delimiter
[convert(element) for element in input]
delimiter
func(*args, **kwargs)
delimiter
self.webview.pauseTimers()
delimiter
print(np.where(df.index == 5)[0])
delimiter
mock_stuff_obj = mock.Mock()
delimiter
5 * f(f, 4)
delimiter
[((x >> shifter) % 2) for x in range(2 ** (K * N))]
delimiter
zip(fields, row)
delimiter
ax1 = fig.add_subplot(111)
delimiter
say_boo_twice()
delimiter
rows.append(row)
delimiter
unittest.main(failfast=True, testRunner=unittest.TextTestRunner)
delimiter
ax1 = fig.add_subplot(1, 1, 1)
delimiter
print(sys.getsizeof(myint))
delimiter
num = int(s)
delimiter
df.groupby(df.date.dt.month).apply(f)
delimiter
dsp.write(data)
delimiter
myTurtle.left(90)
delimiter
base = datetime.datetime.today()
delimiter
data_tuple = Item(*raw_data)
delimiter
ax1.bar(x, y, 0.2)
delimiter
os.mkdir(self.cache_location)
delimiter
f = etree.fromstring(data)
delimiter
86400.0 * self.days + self.seconds + 1e-06 * self.microseconds
delimiter
blog.save()
delimiter
data.shape
delimiter
print(soup.prettify())
delimiter
assert bare_argspec == decorated_argspec
delimiter
paw_number[1:] += 1
delimiter
main()
delimiter
print(a, b)
delimiter
list(self.items())[-1]
delimiter
print(func())
delimiter
sinks.append(sys.stderr)
delimiter
main()
delimiter
window.wm_withdraw()
delimiter
fig, ax = plt.subplots()
delimiter
sys.stdout.write(line)
delimiter
console.interact()
delimiter
Base.metadata.create_all(engine)
delimiter
[(p[:i] + [l[0]] + p[i:]) for p in perm(l[1:]) for i in range(sz)]
delimiter
raise web.notfound()
delimiter
f.seek(0)
delimiter
venus.speed(0)
delimiter
numpy.array(list(range(25))).reshape((5, 5))
delimiter
self.button.pack(side=TOP)
delimiter
q = Question.objects.filter(criterion1 & criterion2)
delimiter
max_arity = max(s, key=lambda i: i.arity())
delimiter
main()
delimiter
os.kill(p.pid, signal.SIGKILL)
delimiter
self.y = []
delimiter
grouped.cumcount()
delimiter
plt.show()
delimiter
[a[S] for S in s if a[S] > 0]
delimiter
[t.get() for t in tasks]
delimiter
list(range(100))[:10]
delimiter
show()
delimiter
print(value_set[1:-1])
delimiter
print((x, y))
delimiter
adic[i] += 1
delimiter
br.submit()
delimiter
indcs = [i for i in range(len(items)) if items[i] == item]
delimiter
fsum([0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])
delimiter
print((x[idx], y[idx]))
delimiter
q = q.with_entities(User.id)
delimiter
b.grid()
delimiter
target.close()
delimiter
logger = logging.getLogger(__name__)
delimiter
setup_mock()
delimiter
int(math.pow(10, int(math.log(b, 10)) + 1) * a + b)
delimiter
result = Model.objects.filter(id__in=object_ids)
delimiter
end_date = datetime.datetime(pub.year, pub.month, pub.day)
delimiter
main()
delimiter
collections.Counter(window(x))
delimiter
ui.syn()
delimiter
print(soup.prettify())
delimiter
co.co_nlocals, co.co_stacksize, co.co_flags
delimiter
axes[1].legend().set_visible(False)
delimiter
to_delete.append((corpus.index(match), len(match)))
delimiter
[(lambda splt: (splt[0], splt[1]))(s.split()) for s in input]
delimiter
ax.w_zaxis.set_major_formatter(niceMathTextForm)
delimiter
df = pd.DataFrame()
delimiter
d1 = {(1): 1, (2): 2}
delimiter
g.add_edge(1, 7)
delimiter
x = Decimal(2606.895)
delimiter
id = Column(Integer, primary_key=True)
delimiter
a = 1
delimiter
obj.save()
delimiter
self.ax.imshow(im)
delimiter
l.sort(key=lambda t: (t[0], -ord(t[1])))
delimiter
results = Orchard.objects.filter(**options)
delimiter
d[x][y] = z
delimiter
time.sleep(0.25)
delimiter
self.listofrecords[listnum][record]
delimiter
nil
delimiter
do_something_with_results(resuls)
delimiter
soup = BeautifulSoup.BeautifulSoup(txt)
delimiter
sys.stdout.flush()
delimiter
gtk.main_quit()
delimiter
db.init_app(app)
delimiter
random.shuffle(lst)
delimiter
fh.seek(0)
delimiter
[[d.get(str(y)) for y in x] for x in A]
delimiter
newmethod(obj, node, **kwargs)
delimiter
current_date += datetime.timedelta(days=1)
delimiter
set(b.items()) - set(a.items())
delimiter
a = [(item + 1) for item in a]
delimiter
set(word_list).intersection(a_string.split())
delimiter
time_list[np.arange(5, 6)]
delimiter
Surname = Dinh
delimiter
dataf = dataf.append(new_row, ignore_index=True)
delimiter
table = Orange.data.Table(df.as_matrix())
delimiter
form = StopAdminForm
delimiter
paralell_notifications(new_rss)
delimiter
[0, 0, 1, 1, 0, 0, 0]
delimiter
np.percentile(S, np.array([0, 100]))
delimiter
followers_df.index = list(range(len(followers_df)))
delimiter
items[pos], items[index] = items[index], items[pos]
delimiter
print(g(1))
delimiter
print(now.year)
delimiter
ax = fig.add_subplot(111)
delimiter
print(list(seach_replace(message, codes)))
delimiter
a, b = b, a + b
delimiter
plt.show(block=False)
delimiter
raw_img = urllib.request.urlopen(req).read()
delimiter
zf = zipfile.ZipFile(src)
delimiter
sftp.get(log_file, local_name)
delimiter
fig.canvas.draw()
delimiter
np.zeros_like(x, dtype=bool) | initial
delimiter
sheet1 = book.sheet_by_index(0)
delimiter
request.json
delimiter
bpfilename = sys.argv[0]
delimiter
e = Example(10)
delimiter
out_file.close()
delimiter
print(set(better_d))
delimiter
shutil.copy2(pathname, dstdir)
delimiter
ln.set_ydata(data)
delimiter
a, b, c, d, e = a
delimiter
next.click()
delimiter
strings = {s[:5]: s[5:] for s in x}
delimiter
driver = webdriver.Firefox()
delimiter
grayimg = cv2.equalizeHist(grayimg)
delimiter
sqrt(res)
delimiter
f()
delimiter
mvv_count = [int(i._count) for i in mvv_list.collect()]
delimiter
sum(count[letter] for letter in valid_letters)
delimiter
nextelem = li[(idx + 1) % len(li)]
delimiter
a = np.array([[0, 1, 1, 0], [1, 1, 1, 1], [1, 1, 1, 1], [0, 1, 1, 0]])
delimiter
fib(n - 1) + fib(n - 2)
delimiter
ndx = numpy.searchsorted(xs, ys)
delimiter
self.file.write(data)
delimiter
value_index = my_list.index(value)
delimiter
wood = next(itertools.count())
delimiter
finfo = np.finfo(f)
delimiter
sys.exit(a.exec_())
delimiter
v[0] += 1
delimiter
plt.show()
delimiter
indices_to_add = np.array([2, 0])
delimiter
set([1, 2]) in a
delimiter
plt.figure(1)
delimiter
plt.show()
delimiter
sess = tf.Session()
delimiter
burroughs_wheeler.test(10000)
delimiter
pickle.dump({(1): 2}, f)
delimiter
print(cls.foo_string)
delimiter
gc.get_referrers(obj)
delimiter
print(yaml.dump(doc, indent=4))
delimiter
self.__getitem__(key)
delimiter
nxn = np.arange(n ** 2).reshape(n, -1)
delimiter
print(line)
delimiter
app.exec_()
delimiter
time.sleep(1.0)
delimiter
plt.xticks(list(range(len(D))), list(D.keys()))
delimiter
s.close()
delimiter
pickle.dump(foo, f)
delimiter
yourmodel.objects.filter(location__dwithin=(geom, 0.02))
delimiter
all(c == s0 for c in s[1:])
delimiter
temp_array = np.arange(10, 129, 10)
delimiter
hov.perform()
delimiter
open(fname.lower())
delimiter
next(alternator)
delimiter
json_str = json.dumps(status._json)
delimiter
scipy.misc.imshow(img)
delimiter
(x + y) * z
delimiter
print(map(sum, zip(flattend1, flattend2)))
delimiter
d.stack().groupby(arange(4))
delimiter
np.may_share_memory(get_sliding_window(df, 2), df.values)
delimiter
a = b
delimiter
thread.start()
delimiter
ax1.plot(list(range(10)))
delimiter
self.city_set.filter(is_capital=True)
delimiter
datetime.datetime.combine(dt.date(), midnight)
delimiter
x = mungesomedict(dict(adict, **anotherdict))
delimiter
a.name
delimiter
Xs = numpy.vstack((Xs, EMOV_n))
delimiter
counter_list[:] = (c for c in counter_list if c)
delimiter
print(query.explain())
delimiter
df.index = df.index.map(str)
delimiter
items.append(values)
delimiter
ax = plt.subplot(111)
delimiter
plt.plot(x, x)
delimiter
print(Duck().speak())
delimiter
replacer_regex.sub(lambda m: dict[m.group(1)], regex)
delimiter
self._data_unoccupied.wait(5)
delimiter
datetime.date(2016, 8, 26),
delimiter
max(frequencies, key=counts.get())
delimiter
reader = csv.reader(f, skipinitialspace=True)
delimiter
parser.feed(data)
delimiter
f.write(c)
delimiter
pool = mp.Pool(8)
delimiter
r.content
delimiter
a, b, c = [int(i) for i in line.split()]
delimiter
next(d for i, d in enumerate(lod) if 1 in d)
delimiter
log.append((name, attr))
delimiter
fig, ax = plt.subplots()
delimiter
dt = datetime.now()
delimiter
model.docvecs[1]
delimiter
p = multiprocessing.Process(target=worker, args=(q, nameStr))
delimiter
run - the - app
delimiter
ax = fig.add_subplot(111)
delimiter
print(args)
delimiter
info[2][0] == 5
delimiter
[li[i:j] for i, j in zip(inds, inds[1:])]
delimiter
self.stdout_sock.close()
delimiter
data[int(i), int(j)] += 1
delimiter
print(tree.text_content().strip())
delimiter
temp.iloc[[0, 1, 4]].index
delimiter
self.window.add(self.box)
delimiter
A = [6, 7, 8, 9, 10, 11, 12]
delimiter
gx = np.zeros_like(f)
delimiter
linearmodel(X, Y, Z)
delimiter
True
delimiter
app
delimiter
test()
delimiter
w = QtGui.QMainWindow()
delimiter
_quicksort(array, begin, end)
delimiter
np.random.seed(seed)
delimiter
requests_log.setLevel(logging.DEBUG)
delimiter
d2 = datetime.datetime.now()
delimiter
sortedList = [dictFromList[i] for i in b]
delimiter
Gallery.objects.filter(pk__in=valid_ids)
delimiter
label.master.overrideredirect(True)
delimiter
foo.__name__
delimiter
set(A) - set(B)
delimiter
result = collections.defaultdict(list)
delimiter
zip(*([iter(iterable)] * n))
delimiter
my_array[pos]
delimiter
id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
delimiter
array([[1.0, 1.0], [1.0, 1.0], [1.0, 1.0]])
delimiter
print(Foo().bar.arity())
delimiter
actor.save()
delimiter
df = pd.DataFrame(data=np.random.randn(1, 8))
delimiter
sys.exit(app.exec_())
delimiter
dir = os.path.dirname(module.__file__)
delimiter
profile.save()
delimiter
fig = plt.figure()
delimiter
a = numpy.array([10, 7, 2, 0])
delimiter
mylist.append(x)
delimiter
C()
delimiter
list(unique)
delimiter
tk.Frame.__init__(self, parent, *args, **kwargs)
delimiter
x_y_coords = zip(indices[0], indices[1])
delimiter
len(df)
delimiter
users = [userA, userB, userC]
delimiter
THETA = np.random.random(15) * 2 * np.pi
delimiter
m = a.shape[0]
delimiter
plot.plot(x, y)
delimiter
self.canvas.draw()
delimiter
setattr(self, name, value)
delimiter
reverse_m2ms = my_model._meta.get_all_related_many_to_many_objects()
delimiter
np.dot(ZCAMatrix, inputs)
delimiter
self.Bind(wx.EVT_BUTTON, self.OnOkayCanButton, okayButton)
delimiter
content_type = models.ForeignKey(ContentType)
delimiter
sorted_arr1 = arr1[arr1inds[::-1]]
delimiter
app = Flask(__name__)
delimiter
l[get_index(l, find_min(l))]
delimiter
print(x)
delimiter
ax.set_yticks(list(range(nb_names)))
delimiter
sys.stdout.write(data)
delimiter
file.readline()
delimiter
open_file.write(upload.file.read())
delimiter
[intify(i) for i in maybeLst]
delimiter
NULL
delimiter
[gb.get_group(x) for x in gb.groups]
delimiter
zip(l, l[1:])
delimiter
r.json()
delimiter
list(chain(repeat(0, len(a) - len(c)), c))
delimiter
lst[0].pop(0)
delimiter
irenR.Start()
delimiter
loop.close()
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
string.ascii_uppercase[5]
delimiter
tempDF[mask]
delimiter
func.restype = ctypes.c_void_p
delimiter
[f for f in User._meta.get_fields() if f.auto_created and not f.concrete]
delimiter
find_lyrics()
delimiter
searchB.pack()
delimiter
x.sort()
delimiter
smtpserver.quit()
delimiter
hour_ago = datetime.datetime.now() - datetime.timedelta(hours=1)
delimiter
p.start()
delimiter
apsched.add_interval_job(checkThirdAPI, seconds=5)
delimiter
start = cols[1].get_text()
delimiter
conn.commit()
delimiter
process.stdout.readline()
delimiter
draw.rectangle((rect_start, rect_end), outline=color)
delimiter
print((np.average(b), np.mean(b), np.ma.average(b), np.ma.mean(b)))
delimiter
f.tell()
delimiter
plt.show()
delimiter
c.decompose()
delimiter
xlApp.Workbooks.Add()
delimiter
print(parmap(lambda x: x ** x, list(range(1, 5))))
delimiter
br.set_cookiejar(cj)
delimiter
locations = Locations.objects.filter(**params)
delimiter
random.seed(4555)
delimiter
credentials = tools.run_flow(flow, storage, flags)
delimiter
arr = np.arange(10).reshape(5, 2)
delimiter
win.run()
delimiter
print(Base.getSubclasses())
delimiter
True
delimiter
globals()[name] = val
delimiter
B.__init__(self, 4)
delimiter
self.hack_mro()
delimiter
np.where(k, 2, 5)
delimiter
np.random.seed(0)
delimiter
plt.contourf(np.random.randn(10, 10))
delimiter
elevate()
delimiter
setattr(obj, self.func.__name__, value)
delimiter
print(a)
delimiter
bpp = mode_to_bpp[data.mode]
delimiter
matplotlib.pyplot.close()
delimiter
conn.endheaders()
delimiter
wordlist = [ch for ch in s]
delimiter
select.select([process.stdout, process.stderr], [], [])
delimiter
count = sum(1 for i in l if my_condition(i))
delimiter
x += 1
delimiter
zip(*df.values)
delimiter
self.currentStack.pop()
delimiter
zip(*lis)
delimiter
print(postcodes)
delimiter
self.datadex[x] + 1
delimiter
self.stream.write(data)
delimiter
t.start()
delimiter
rndseries = pd.Series(np.random.randn(len(rndrange)), index=rndrange)
delimiter
f = plt.figure(figsize=(size, size))
delimiter
random.shuffle(x)
delimiter
dlg.exec_()
delimiter
plot(x, y)
delimiter
d[j].append(i)
delimiter
[x for i, x in enumerate(y) if i != 0 and i != 1]
delimiter
(-17.5).hex()
delimiter
print(sorted(list(globalHotItems.items()), key=lambda x: x[1])[-1])
delimiter
shutil.rmtree(tdir)
delimiter
df
delimiter
output = [(x, y) for x, y, label in L if x > 10]
delimiter
ax.set_yticks(y_pos)
delimiter
print(scipy.ndimage.zoom(x, 2, order=0))
delimiter
tree = ET.parse(filename)
delimiter
xmldoc = minidom.parseString(document)
delimiter
time.sleep(0.1)
delimiter
sys.stderr.write(line)
delimiter
ax1.set_color_cycle([cm(1.0 * i / (NPOINTS - 1)) for i in range(NPOINTS - 1)])
delimiter
fig, ax = plt.subplots()
delimiter
dict1 = dict2[key]
delimiter
grouped.loc[1, 2]
delimiter
plt.bar(bins[:-1][i], n_x[i], width=10)
delimiter
self.levelno = levelno
delimiter
time.sleep(1.1)
delimiter
app.run()
delimiter
defaultdict(lambda : nested_dict(n - 1, type))
delimiter
tuple(sorted(x))
delimiter
hash1.update(text1)
delimiter
plt.hexbin(x, y, gridsize=20, cmap=cmaps.pop(), mincnt=1)
delimiter
main.mainloop()
delimiter
ancestors_descendents = set()
delimiter
self.__init__()
delimiter
pd.DatetimeIndex(df.date) + pd.offsets.Hour(1)
delimiter
b = a
delimiter
print(GetWindowText(GetForegroundWindow()))
delimiter
newk.append(i)
delimiter
p.x, p.y
delimiter
json.loads(s)
delimiter
cmp(len(A), len(B))
delimiter
models.DateTimeField(null=True)
delimiter
copy.deepcopy(d)
delimiter
name = models.CharField(max_length=255)
delimiter
b = numpy.vstack((a, a))
delimiter
pool = Pool()
delimiter
client = s.getsockname()[0]
delimiter
stream.write(chunkout)
delimiter
np.random.seed(1010)
delimiter
f.write(doc.toxml())
delimiter
time.sleep(0.1)
delimiter
df.head()
delimiter
self.close()
delimiter
parser = argparse.ArgumentParser()
delimiter
new = a + (b,)
delimiter
jar = cookielib.CookieJar()
delimiter
time.sleep(delay)
delimiter
ax = pl.subplot(111, polar=True)
delimiter
plt.colorbar()
delimiter
target_time = time.clock() + 0.025
delimiter
stringbuilder.py
delimiter
process = subprocess.Popen(your_command, stdout=subprocess.PIPE)
delimiter
setattr(self, d[name], value)
delimiter
itemgetter(2, 5)(L)
delimiter
print(floor(log(1000, 10)))
delimiter
sort_indices = np.argsort(brr)[::-1]
delimiter
m[:, (0)].shape
delimiter
ax.set_xticklabels(a)
delimiter
self.set_val(self.valinit)
delimiter
[x for x in lst if x % 2 == 0][:1]
delimiter
np.array(xlist, dtype=dt)
delimiter
self.insert(len(self._list), val)
delimiter
app = wx.PySimpleApp()
delimiter
instance = SomeModel.objects.get(id=id)
delimiter
_start = time.time()
delimiter
text.strip()
delimiter
client.close()
delimiter
fig = plt.figure()
delimiter
a[:] = b
delimiter
float(value)
delimiter
pickle.dump(clf, f)
delimiter
b = 1
delimiter
destination.close()
delimiter
d[k]
delimiter
time.sleep(10)
delimiter
self.button.clicked.connect(self.start_download)
delimiter
functools.partial(func, p)
delimiter
a.remove(10)
delimiter
eroded = cv2.erode(img, kern, 1)
delimiter
NULL, NULL
delimiter
query_result = DBSession.query(Article).order_by(Article.created).all()
delimiter
df
delimiter
stdout.close()
delimiter
pi = square(a + b) / 4 * t
delimiter
bitarray.bitarray(l).tostring()
delimiter
writer.save()
delimiter
b[:, ([1, 2, 0])] * c[:, ([2, 0, 1])] - b[:, ([2, 0, 1])] * c[:, ([1, 2, 0])]
delimiter
chain.from_iterable(permutations(xs, n) for n in range(len(xs) + 1))
delimiter
self.altitude *= -1
delimiter
len(s)
delimiter
coc.x.append(2)
delimiter
sys.exit()
delimiter
deleteself.__dict__[field.get_cache_name()]
delimiter
draw.ellipse(bbox, fill=128)
delimiter
print((self.x, self.y, self.z))
delimiter
statemap = {(1, 0): (0, 1), (0, 1): (-1, 0), (-1, 0): (0, -1), (0, -1): (1, 0)}
delimiter
A.__init__(self)
delimiter
exp = (a + b) * 40 - (c - a) / 0.5
delimiter
print(convert(1692))
delimiter
plt.ion()
delimiter
print(bisect.bisect_left(L, (2,)))
delimiter
map(sum, zip(a, b, c))
delimiter
new_im.paste(im)
delimiter
models.signals.post_save.connect(create_api_key, sender=User)
delimiter
[sum(starmap(mul, zip(first, col))) for col in zip(*second)]
delimiter
X.copy()
delimiter
print(scipy.ndimage.zoom(x, 2, order=1))
delimiter
result[-1].append(temp)
delimiter
self.socket = socket(AF_INET, SOCK_STREAM)
delimiter
r = s.post(url, data)
delimiter
mydog.findall(s)
delimiter
mngr.window.setGeometry(50, 100, 640, 545)
delimiter
obj.isoformat()
delimiter
tmp.append(map(int, line.split()[:w]))
delimiter
self.stop()
delimiter
a = list(a)
delimiter
module2.py
delimiter
call_fn(*args, **kwargs)
delimiter
node_schema.load(json_data, instance=Node().quey.get(node_id))
delimiter
x, y, z, w = map(int, input().split())
delimiter
vis2 = cv2.cvtColor(vis, cv2.COLOR_GRAY2BGR)
delimiter
tup[0] += 4, 5, 6
delimiter
kernel = np.array([[0, 1, 0], [1, 1, 1], [0, 1, 0]])
delimiter
word_list = sentence.split()
delimiter
np.linalg.norm(xs)
delimiter
form = MyForm(request.POST)
delimiter
print(urllib.request.urlopen(request).read())
delimiter
par2.set_ylim(1, 65)
delimiter
assert np.allclose(result, ans)
delimiter
dt = datetime.datetime.now()
delimiter
self.write_cell(sheet_name, cell, existing_value, updated_format)
delimiter
subprocess.call(cmd, shell=False)
delimiter
G.add_edges_from(tuples)
delimiter
deleteyour_dict[unwanted_key]
delimiter
get_supported_types()
delimiter
print(local_tz.localize(datetime(2000, 6, 15)))
delimiter
list(chain(a))
delimiter
mem.Blit(0, 0, size[0], size[1], screen, 0, 0)
delimiter
app.listen(8888)
delimiter
temp_file.write(bytes)
delimiter
do_something()
delimiter
tree = et.fromstring(data)
delimiter
self.edit2 = QLineEdit()
delimiter
app = create_app()
delimiter
widget.Bind(wx.EVT_COMBOBOX, self.onSelect)
delimiter
pprint(table)
delimiter
end += datetime.timedelta(1)
delimiter
w = np.fft.fft(x)
delimiter
fo.write(content)
delimiter
setattr(obj.a, p, value)
delimiter
print(etree.tostring(element))
delimiter
markov(arr)
delimiter
Base.metadata.create_all()
delimiter
[l for l in list_dirs if os.path.basename(l) not in unwanted_files]
delimiter
df.mul(vector, axis=0)
delimiter
wx.Frame.__init__(self, *args, **kwargs)
delimiter
ith_diag.eliminate_zeros()
delimiter
test[:, ([0, 2])]
delimiter
gui.root.mainloop()
delimiter
ax.quiver(x, y, u, v)
delimiter
sts = os.waitpid(p.pid, 0)[1]
delimiter
audio.add_tags()
delimiter
self._treeView.get_cursor()[0][0]
delimiter
db = SQLAlchemy(app)
delimiter
writer.writerows([object2list(obj, attr_list) for obj in list_of_objects])
delimiter
a[0], a[2] = a[2], a[0]
delimiter
lambda seq: [(lambda : el) for el in seq]
delimiter
-r72
delimiter
df.dtypes
delimiter
loop.run_forever()
delimiter
strcpy(buffer, path)
delimiter
text = [x for x in text.lower() if x in string.letters]
delimiter
plt.show()
delimiter
csX.n = X.shape[1]
delimiter
pool.join()
delimiter
outf.write(ser.read())
delimiter
list(d.items())
delimiter
versioned_session(session)
delimiter
w = distanceM()
delimiter
print_hello_world()
delimiter
cv2.namedWindow(winName, cv2.CV_WINDOW_AUTOSIZE)
delimiter
NULL
delimiter
sorted(set(li), reverse=True)[n]
delimiter
app.mainloop()
delimiter
GPIO.setmode(GPIO.BOARD)
delimiter
ax2.plot([x1, x2], [y1, y2])
delimiter
f.close()
delimiter
updated_at = models.DateTimeField(auto_now=True)
delimiter
app = Flask(__name__)
delimiter
print(combs(sampleip2))
delimiter
res[k].append(v)
delimiter
df_r.show()
delimiter
data.insert(bslindex, newcol)
delimiter
tk.Frame.__init__(self, master, height=42, width=42)
delimiter
a.sort(axis=1)
delimiter
print(tuple(list(a)))
delimiter
[i for i in range(1, n) if n % i == 0]
delimiter
os.uname()
delimiter
list(tokenize(stream))
delimiter
s.sendmail(me, you, msg.as_string())
delimiter
X -= X.mean()
delimiter
json.dump(json.load(ifile), ofile, indent=4, ensure_ascii=False)
delimiter
cursor.execute(*sql_and_params)
delimiter
form = ContactForm(request.POST)
delimiter
json_obj = json.load(metros_file)
delimiter
plt.cm.coolwarm(t)
delimiter
plt.show()
delimiter
print(repr(Fraction(f)), Fraction(f))
delimiter
print(m.shape)
delimiter
foo = np.array([1, 2])
delimiter
Base.objects.instance_of(ModelX) | Base.objects.instance_of(ModelY)
delimiter
raise AssertionError
delimiter
self._logger.setLevel(logging.INFO)
delimiter
p.relative_to(*p.parts[:2])
delimiter
indices.sort(key=lol[1].__getitem__)
delimiter
draw()
delimiter
user.save()
delimiter
print(match.group(2))
delimiter
o.x += 5
delimiter
print(line)
delimiter
time.mktime(datetime.date(year, 1, 1).timetuple())
delimiter
a = list(range(1, size + 1))
delimiter
eval(strs)
delimiter
embed()
delimiter
result.sort(key=lambda x: -x[1])
delimiter
f(*args, **kargs)
delimiter
print(my_new_list)
delimiter
gs.fit(X, y)
delimiter
pool = mp.Pool()
delimiter
result = v.cumsum()
delimiter
any(some_func(x) and False for x in some_list if x > 5)
delimiter
cb = plt.colorbar()
delimiter
br = mechanize.Browser()
delimiter
User.query.all()
delimiter
file.write(old_lines)
delimiter
print(list(myDict.values())[i][j])
delimiter
logging.basicConfig(format=format, level=logging.INFO)
delimiter
tuple(map(operator.add, a, b))
delimiter
print(line)
delimiter
collections.Counter(lst)
delimiter
Session.query(FooClass).filter(FooClass.somevalue == 8).all()
delimiter
x.transpose(1, 2, 0).reshape(2, 4)
delimiter
plt.figure()
delimiter
axis.plot(x_data, y_data)
delimiter
fig.subplots_adjust(hspace=0.5, wspace=0.001)
delimiter
[fact(a) for a in args]
delimiter
list(gb.keys())
delimiter
random_state = random.choice(states.split())
delimiter
sys.path.append(PATH)
delimiter
transaction.rollback()
delimiter
views.py
delimiter
list(B.intersection(A)) + list(set(A) - B)
delimiter
all(isinstance(s, str) for s in obj)
delimiter
print(dir(foo))
delimiter
out = np.zeros([n, len(arrays)], dtype=dtype)
delimiter
x = x[(0), :, :]
delimiter
c = list(itertools.product(a, b))
delimiter
parser = argparse.ArgumentParser()
delimiter
a.insert(randint(0, len(a)), x)
delimiter
c = [i for i in a if i in b]
delimiter
my_string.split()[:4]
delimiter
d = dict(input().split() for _ in range(n))
delimiter
ax = fig.add_subplot(111)
delimiter
df
delimiter
_stack.pop()
delimiter
sys.path.append(here)
delimiter
fig = plt.figure()
delimiter
doctest.testmod()
delimiter
print(np.array(result))
delimiter
opener.open(req)
delimiter
b, a = sorted((a, b), key=len)
delimiter
Response(status=200, data=data)
delimiter
self.__dict__.update(kwargs)
delimiter
data = json.load(data_file)
delimiter
len(list(filter(str.islower, string)))
delimiter
dayDict = dict.fromkeys(weekList, 0)
delimiter
output += np.sum(integrand(a), axis=1)
delimiter
login(request, user)
delimiter
label_idx = np.searchsorted(all_labels, labels)
delimiter
(1 - 1 / Decimal(7000000)).ln()
delimiter
win.update_idletasks()
delimiter
obj.__class__.__dict__[1]
delimiter
session1.commit()
delimiter
qW = np.convolve(sPSF, sQ)
delimiter
all(y - x >= 2 for x, y in zip(locs, locs[1:]))
delimiter
b = db.ReferenceProperty()
delimiter
{{name}}
delimiter
saved.append(element)
delimiter
args = parser.parse_args()
delimiter
data = data[keep_mask]
delimiter
Base.metadata.create_all(engine)
delimiter
[list(g) for k, g in groupby(nums, key=lambda n, c=count(): n - next(c))]
delimiter
post2.delete()
delimiter
request.session = {}
delimiter
p.stdin.close()
delimiter
x = np.arange(-10.0, 10.0, 0.1)
delimiter
type(s)
delimiter
self.assertEqual(reference, test)
delimiter
main()
delimiter
os.setsid()
delimiter
x[1]
delimiter
nx.draw_networkx(G, pos=pos)
delimiter
np.dot(arr_pairs, xy)
delimiter
dline = dline.strip()
delimiter
list(range(x, x + 10 * y, y))
delimiter
ax = fig.add_subplot(111)
delimiter
DF.dtypes
delimiter
dedup = [k[i] for i in range(len(k)) if i == 0 or k[i] != k[i - 1]]
delimiter
plt.xticks(xx, ll)
delimiter
count += 1
delimiter
fig.show()
delimiter
dt = tz.localize(dt)
delimiter
myiterator = iter(mylist)
delimiter
book.save(filename)
delimiter
date = models.DateField()
delimiter
temp.flush()
delimiter
sum(p * q for p, q in zip(vector1, vector2))
delimiter
d = defaultdict(int)
delimiter
p.wait()
delimiter
zipstream.seek(0)
delimiter
df
delimiter
do_something()
delimiter
sys.path.insert(0, PROJECT_ROOT)
delimiter
models.CharField(null=True)
delimiter
writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
delimiter
self.fig, self.ax = plt.subplots()
delimiter
json.dump(jsonDict, f, indent=4)
delimiter
a.writerows(data)
delimiter
jez(df1)
delimiter
ret = func(*args, **kwargs)
delimiter
print(list(result))
delimiter
k = k[..., (np.newaxis)]
delimiter
user = models.ForeignKey(User)
delimiter
ax = plt.subplot(111)
delimiter
seq.append(line)
delimiter
add_chain.apply_async()
delimiter
b = sum(a)
delimiter
np.hsplit(a, 2)
delimiter
img = Image.open(image_path)
delimiter
render(request, template, context)
delimiter
substrings = data.read().split()
delimiter
cur = conn.cursor()
delimiter
dbapi_conn.commit()
delimiter
print(etree.tostring(cityModel, pretty_print=True))
delimiter
fig, ax = plt.subplots()
delimiter
df.apply(zscore)
delimiter
first_name = forms.CharField(max_length=256)
delimiter
pickle.dump(data, output)
delimiter
plt.subplot(211)
delimiter
self.handler.close()
delimiter
z.append(y)
delimiter
math.factorial(10)
delimiter
os.path.exists(destination)
delimiter
key2 = models.IntegerField()
delimiter
self.master.columnconfigure(5, weight=1)
delimiter
self.buffer.seek(0)
delimiter
print(a_list)
delimiter
a2.set_xticks([])
delimiter
print(df)
delimiter
MyMacro(indirect)
delimiter
print(str(delta))
delimiter
sum(map(lambda i: bool(i and i.pop(0) and i) + len(i), x))
delimiter
MyButton2.grid(row=1, column=0)
delimiter
list_of_dict.append(mydict)
delimiter
s = np.sum(a)
delimiter
output.close()
delimiter
sum = foo()
delimiter
test = df.head(1)
delimiter
inst1.i = 4
delimiter
float_to_str(5e-08)
delimiter
Py_Finalize()
delimiter
f(*a)
delimiter
f2.write(Lines[i + 1])
delimiter
cursor = cnx.cursor()
delimiter
plt.figure(figsize=(12, 6))
delimiter
x += 1
delimiter
time.sleep(1)
delimiter
a = 1 if b else 0
delimiter
randprime(a, b)
delimiter
wsgi_handler.run(wsgi_app)
delimiter
print(a[i] - a[i - 1])
delimiter
dict((x, x * x) for x in range(10))
delimiter
rule_list.append(value())
delimiter
__authentication_required
delimiter
plt.show()
delimiter
tfidf_matrix = tfidf.fit_transform(corpus)
delimiter
doc_topic_distrib = lda.transform(tf)
delimiter
list(set().union(*x))
delimiter
print(is_arr_in_list(mylistarr[2], mylistarr))
delimiter
S = [fnx() for c in range(5)]
delimiter
self.Show(True)
delimiter
ax.set_xlim([0, x.max() + 1])
delimiter
ob.stackoverflow()
delimiter
plt.plot([1, 2, 6, 4])
delimiter
a180[0, 0, 0]
delimiter
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
delimiter
y = np.array([2, 1, 5, 2])
delimiter
urllib.parse.urlencode(query_pairs)
delimiter
out.write(f.read())
delimiter
t = list(set(q) & set(w))
delimiter
print(exit)
delimiter
self._socket.close()
delimiter
s = pygame.Surface((16, 16), flags=pygame.SRCALPHA)
delimiter
G.remove_edges_from(G.selfloop_edges())
delimiter
timetup = time.gmtime()
delimiter
gray = cv2.imread(image_path, cv2.CV_LOAD_IMAGE_GRAYSCALE)
delimiter
print(interleave(a, b))
delimiter
stdin.flush()
delimiter
pyplot.locator_params(nticks=4)
delimiter
L = [1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1]
delimiter
date.replace(tzinfo=pytz.utc)
delimiter
now = datetime.datetime.now()
delimiter
self.window.add(self.image)
delimiter
float(value)
delimiter
mtransforms.Transform.__init__(self)
delimiter
newlist.append(v + str(count + 1) if totalcount > 1 else v)
delimiter
apply_labels(h, labels)
delimiter
df2 = pd.read_csv(StringIO(txt2))
delimiter
plt.imshow(flip_ud_lena, cmap=plt.cm.gray)
delimiter
show()
delimiter
canvas.Canvas.__init__(self, *args, **kwargs)
delimiter
print(dog.lemma_names())
delimiter
foo.save()
delimiter
tk.Canvas.move(self, *args, **kwargs)
delimiter
c = b
delimiter
print(s.groupby([s.index.weekday_name, s.index.hour]).sum())
delimiter
fig, axes = plt.subplots(nrows=2)
delimiter
datetime.strptime(value, format)
delimiter
print(parser.parse_args())
delimiter
urllib.request.install_opener(urllib.request.build_opener(LowLevelHTTPHandler))
delimiter
client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
yshape = list(data.shape)
delimiter
list(x * x for x in range(10))
delimiter
Test.static_init()
delimiter
oldperson.hello()
delimiter
func(one=1, two=2)
delimiter
a = np.arange(1, 7)
delimiter
diffs = dict((k, ranks2[k] - ranks1[k]) for k in dict1)
delimiter
kernel = np.uint8([[1, 1, 1], [1, 10, 1], [1, 1, 1]])
delimiter
numpy.atleast_2d(x[x[:, (2)] == 0])
delimiter
indices = np.empty((m * n, 8), dtype=int)
delimiter
heapq.heapify(h)
delimiter
json.loads(dictString)
delimiter
fp.write(part.get_payload(decode=True))
delimiter
open(filename, *args, **kwargs)
delimiter
e.click()
delimiter
decoded_text = cipher_suite.decrypt(encoded_text)
delimiter
ax.get_xaxis().get_major_formatter().set_useOffset(False)
delimiter
dict((j, locals()) for _ in range(i))
delimiter
G = nx.DiGraph()
delimiter
print((a, b, c, d))
delimiter
s.readline()
delimiter
increments.append(onediff[i])
delimiter
msg.attach(part1)
delimiter
math.sqrt(dotproduct(v, v))
delimiter
ax.yaxis.set_major_formatter(matplotlib.ticker.ScalarFormatter())
delimiter
ssh = paramiko.SSHClient()
delimiter
r.status_code
delimiter
data = np.random.uniform(-1, 1, 44100)
delimiter
combo.set_active(0)
delimiter
C4.bar()
delimiter
a.sort(key=w.__getitem__)
delimiter
abort(404)
delimiter
canvas.tag_lower(secondRect)
delimiter
c.f()
delimiter
self.figure.subplots_adjust(right=0.9)
delimiter
obj_list.append(obj)
delimiter
lst = ast.literal_eval(strab)
delimiter
np.zeros(s)
delimiter
w.show()
delimiter
cur = con.cursor()
delimiter
HELLO
delimiter
__repr__ = __str__
delimiter
Bbins = np.linspace(B.min(), B.max(), 10)
delimiter
event.save()
delimiter
view(request, *args, **kwargs)
delimiter
pygame.display.flip()
delimiter
browser.show()
delimiter
response = urllib.request.urlopen(url)
delimiter
cache.commit()
delimiter
plt.plot(x, y)
delimiter
np.all(i for i in range(10))
delimiter
column_widths += [len(cell)]
delimiter
(items + (item,) for items in product(*args[:-1]) for item in args[-1])
delimiter
quat_multiply(a1[1, 2], b1[1, 2])
delimiter
f = os.path.join(path, filename)
delimiter
np.median([0, 2, 6, 5, 4])
delimiter
clean_data = pd.concat([x, y], 1).dropna(0)
delimiter
self.x1 = self.x0 + self.width / 2
delimiter
wb = excel.Workbooks.Open(fname)
delimiter
df.drop(rows)
delimiter
y[x.argsort()] = np.arange(x.size)
delimiter
[randint(1, 9999) for _ in range(randint(50, 200))]
delimiter
print(Counter(zip(words, words[1:])))
delimiter
fig, ax = plt.subplots()
delimiter
optionmenu.configure(width=yourwidthhere)
delimiter
fig, ax = plt.subplots()
delimiter
n, bins, patches = plt.hist(x, histedges_equalN(x, 10))
delimiter
app = Flask(__name__)
delimiter
[i for i, x in enumerate(lst) if x == item]
delimiter
sess = tf.Session()
delimiter
self.assertEqual(expresults, results)
delimiter
plt.show()
delimiter
cursor = conn.cursor()
delimiter
name, email, phone_numbers = record[0], record[1], record[2:]
delimiter
df = pd.DataFrame(np.random.random((N, M)), index=dates)
delimiter
ax.set_yticks([-1.25, -0.75, -0.25, 0.24, 0.75, 1.25], minor=True)
delimiter
id = Column(Integer, primary_key=True)
delimiter
print(repr(ordliste))
delimiter
main()
delimiter
ax.set_ylim(ymax=100)
delimiter
B = [0, 0, 1, 1, 1, 1]
delimiter
print(sorted(words) == words)
delimiter
writer.writerow(row)
delimiter
G.nodes()
delimiter
self.treeview.set_search_column(0)
delimiter
ax1 = fig1.add_subplot(111)
delimiter
number += 1
delimiter
foo()
delimiter
s.play()
delimiter
sys.modules[__name__].__dict__.clear()
delimiter
fig.canvas.draw()
delimiter
x * (x > 0)
delimiter
loop.run_until_complete(do_work(q))
delimiter
linesamples.add(int(4 * i + 2))
delimiter
fig = plt.figure()
delimiter
df = df.reset_index(level=[0, 1])
delimiter
my_RDD_dictionaries = my_RDD_strings.map(json.loads)
delimiter
fig = plt.figure()
delimiter
print(os.path.join(root, file))
delimiter
print(args)
delimiter
print(match.groups())
delimiter
self.setLayout(layout)
delimiter
c.py
delimiter
endDate = models.DateField()
delimiter
A.ravel()[np.random.choice(A.size, c, replace=False)] = np.nan
delimiter
myFunction = lambda x, y: x * y
delimiter
_ = list(map(lambda x: result.extend(x), res))
delimiter
b in l[l.index(a):]
delimiter
text = models.CharField(max_length=200)
delimiter
b = a[:]
delimiter
signal.signal(signal.SIGCLD, signal.SIG_DFL)
delimiter
days = (roundedA - roundedB).days
delimiter
list(product(*([0, x] for x in stuff)))
delimiter
print(boop)
delimiter
func.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
delimiter
logger.addHandler(fh)
delimiter
ax = fig.add_subplot(111)
delimiter
min(i for i in range(len(L)) if L[i:i + len(key)] == key)
delimiter
Py_Finalize()
delimiter
file.write(capitalised)
delimiter
print(b.most_common(1))
delimiter
print(demo.multiply(2.0, 4.0))
delimiter
axes[1].plot(x, i * np.cos(x))
delimiter
datetime.combine(d, datetime.min.time())
delimiter
palette.append((255, 255, 255))
delimiter
ax.bar(theta, counts, width=np.pi / 6, color=colors, alpha=0.5)
delimiter
25.4 / 10 * (1 / 2.54)
delimiter
t = threading.Thread(target=worker, args=[data])
delimiter
print(sort_dict_by_list(a, b))
delimiter
np.random.seed(42)
delimiter
conf.py
delimiter
ax.set_yticklabels(people)
delimiter
web.load(QUrl(url))
delimiter
y = random.randint(0, walnut.size[1] - 1)
delimiter
weekly = map(sum, grouper(7, visitors, 0))
delimiter
cardsdiscarded += 1
delimiter
id = db.Column(db.Integer, primary_key=True)
delimiter
{b.pop(0): {b.pop(0) for _ in range(1)}}
delimiter
driver = webdriver.Firefox()
delimiter
app.MainLoop()
delimiter
signal.signal(signal.SIGINT, signal.SIG_DFL)
delimiter
form = cgi.FieldStorage()
delimiter
app.logger.addHandler(handler)
delimiter
my_screenmanager.add_widget(screen2)
delimiter
print(xcoord)
delimiter
new_df[df.isnull()] = np.NaN
delimiter
lxml.etree.Comment
delimiter
time.sleep(poll_period)
delimiter
a = dict((hash_counting_int(x), []) for x in range(10))
delimiter
results.append(make_comp_func(i, j))
delimiter
array([False, True, True, True, True, True, False], dtype=bool)
delimiter
conn.connect()
delimiter
do_something_with_a_and_b
delimiter
pyglet.app.run()
delimiter
main()
delimiter
ax1 = fig.add_subplot(111)
delimiter
resolved_url = resolve_url(login_url or settings.LOGIN_URL)
delimiter
a.withdraw()
delimiter
s.quit()
delimiter
498, 410
delimiter
sys.exit(app.exec_())
delimiter
iter = (i for i in range(50))
delimiter
httpd.serve_forever()
delimiter
numpy.linspace(10, 20, 5, endpoint=False)
delimiter
views.py
delimiter
zip_longest(fillvalue=fillvalue, *args)
delimiter
s.get_data()
delimiter
httpd.shutdown()
delimiter
result = []
delimiter
match.group(1)
delimiter
HttpAuthenticated.__init__(self, *args, **kwargs)
delimiter
self.get_paginated_response(serializer.data)
delimiter
a.a().method()
delimiter
ipixel = im.getpixel((x, y))
delimiter
x = collections.deque(5 * [0], 5)
delimiter
Following.objects.filter(follows=self).count()
delimiter
print(a, b, c, d, e, f)
delimiter
waitress.serve(demo_app)
delimiter
root = Tkinter.Tk()
delimiter
plt.show()
delimiter
pool.close()
delimiter
textbuffer.select_range(match_start, match_end)
delimiter
G.add_node(1)
delimiter
self.process = subprocess.Popen(self.cmd, shell=True, preexec_fn=os.setsid)
delimiter
entry.clear()
delimiter
fs.start()
delimiter
assert set(a) == set(b)
delimiter
result = json.loads(output)
delimiter
result_dict[x.key].append(x.value)
delimiter
xi = np.arange(len(x))
delimiter
print(s1, len(s1))
delimiter
wx.EvtHandler.__init__(self)
delimiter
keep.add(onemorevalue)
delimiter
smtp.sendmail(sender, recipients, themsg)
delimiter
df.apply(outer_product)
delimiter
node.update(value)
delimiter
result.appendlist(key, value)
delimiter
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cookie_jar))
delimiter
tornado.ioloop.IOLoop.instance().start()
delimiter
df.dtypes
delimiter
processHeader(f.readline())
delimiter
now = dt.datetime.now()
delimiter
X /= X.std()
delimiter
ax.xaxis.set_major_formatter(FuncFormatter(lambda tick, _: get_day(tick)))
delimiter
b = np.array([2, 1, 1, 1, 1])
delimiter
print(img.size)
delimiter
print(repr(line))
delimiter
b[:, :, (some_mask == 1)]
delimiter
file.write(part.get_payload(decode=True))
delimiter
job = Job.objects.get(pk=1)
delimiter
driver = webdriver.Chrome()
delimiter
conn.perform()
delimiter
sizer = wx.BoxSizer(wx.VERTICAL)
delimiter
df.index[0], v.iloc[-1]
delimiter
driver = webdriver.Firefox(firefox_profile)
delimiter
__init__.py
delimiter
[(5, 6), (6, 7)]
delimiter
soup = BeautifulSoup(html)
delimiter
np.array(x.tolist())
delimiter
self.l.append({})
delimiter
dateutil.parser.parse(node.value)
delimiter
self.f = args[0]
delimiter
logging.Logger.__init__(self, name)
delimiter
p = Process(target=f, args=(q,))
delimiter
self.sizer = wx.BoxSizer(wx.VERTICAL)
delimiter
QtCore.QModelIndex()
delimiter
df.dtypes
delimiter
pool = Pool(5)
delimiter
plt.plot(A, B)
delimiter
app.run()
delimiter
__main__.py
delimiter
a = np.random.rand(n, m)
delimiter
entity1_id = Column(Integer, primary_key=True)
delimiter
diff_as_html = ghdiff.diff(md1, md2)
delimiter
p(i - 1) / 2 + p(i + 2) / 2
delimiter
help(module)
delimiter
Pdb().set_trace()
delimiter
time.sleep(2)
delimiter
tex.pack(side=tk.RIGHT)
delimiter
cettime.isoformat()
delimiter
content = response.content
delimiter
self._is_running = False
delimiter
mask = cv2.bitwise_or(mask1, mask2)
delimiter
http_server.listen(8080)
delimiter
len(data) == 0
delimiter
turtle.forward(size)
delimiter
new.setdefault(key, []).append(temp)
delimiter
do_something()
delimiter
data, addr = sock.recv(1024)
delimiter
item = list[2][2]
delimiter
True
delimiter
contains_vectorized(geo_polygons, geo_points[:, (np.newaxis)])
delimiter
func(x, y, z, a, b, c)
delimiter
print(list(keep_n_dupes(lst, 2)))
delimiter
myobj[5] = 1
delimiter
values = np.array([4, 4, 4, 4, 4, 4, 4, 4, 4, 4])
delimiter
myParent.__init__(self)
delimiter
G.add_edge(1, 2)
delimiter
im.update()
delimiter
s.read()
delimiter
ans = math.factorial(N)
delimiter
ssh.close()
delimiter
lines = [line.strip() for line in file]
delimiter
Py_Initialize()
delimiter
db = mongo.db
delimiter
show()
delimiter
queue.append(clientsocket.recv(1024))
delimiter
test_writer = tf.train.SummaryWriter(this_test)
delimiter
main()
delimiter
plt.imshow(frames[k], cmap=plt.cm.gray)
delimiter
a_cursor.execute(sql, (val1, val2))
delimiter
ti, xi = np.meshgrid(ti, xi)
delimiter
f.close()
delimiter
sleep(20)
delimiter
self.stack.append(len(self.get_item()) - 1)
delimiter
type(a.tolist())
delimiter
print(str(uuid.uuid4())[:8])
delimiter
results.append(a_dict[id])
delimiter
bin((1 << 7) - 1)
delimiter
psutil.get_pid_list()
delimiter
HTMLParser.__init__(self)
delimiter
print(para_group_demo.sum(df.a, df.b))
delimiter
DateR = date.compile()
delimiter
np.random.shuffle(idx)
delimiter
fig = pyplot.figure()
delimiter
{k: dict_[k] for k in keys}
delimiter
self.entry.pack()
delimiter
imscatter(x, y, image_path, zoom=0.1, ax=ax)
delimiter
plot(tmp.min(axis=0))
delimiter
ucontent = str(content, encoding)
delimiter
val = int(input, 16)
delimiter
f_out_intkeys.write(line)
delimiter
f_out_quot.write(line)
delimiter
f_out_frb.write(line)
delimiter
f_out_dtwrld.write(line)
delimiter
driver = webdriver.Chrome()
delimiter
foo()
delimiter
print(sum(map(d.get, itertools.takewhile(lambda key: key != 5, d))))
delimiter
s = sys.stdout.getvalue()
delimiter
X, Y = np.meshgrid(x, y)
delimiter
signal.alarm(seconds)
delimiter
do_stuff_with_two_lines(previous_line, current_line)
delimiter
print(json.dumps(doc, default=ComplexHandler))
delimiter
x = x + c
delimiter
dict_setitem(dct, key, value)
delimiter
z.update(y)
delimiter
self.listbox.insert(0, option)
delimiter
next(itertools.islice(cpy, index, index + 1))
delimiter
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
delimiter
values = np.random.rand(len(indices))
delimiter
self.ProgressBar.SetRange(event.total)
delimiter
plt.xlim(0, 1)
delimiter
ui.show()
delimiter
X_plot = np.linspace(0, 1, 100)
delimiter
main()
delimiter
img_io = StringIO()
delimiter
{{form.errors}}
delimiter
sns.set(**kwargs)
delimiter
output.write(line)
delimiter
[s[i:i + width] for i in range(len(s) - width + 1)]
delimiter
plt.clf()
delimiter
logger.addHandler(progress)
delimiter
self.result_queue.put(result)
delimiter
logging.Handler.__init__(self)
delimiter
out = process.stdout.read(1)
delimiter
plt.tight_layout()
delimiter
b = int(a)
delimiter
sys.path.append(YOUR_PATH)
delimiter
browser.load(QtCore.QUrl(url))
delimiter
row = np.random.randn(100)
delimiter
tuple_list[i] = a, new_b
delimiter
object_id = models.PositiveIntegerField()
delimiter
data2 = np.asarray(data2)
delimiter
isinstance(os, types.ModuleType)
delimiter
df = pd.DataFrame(d)
delimiter
word[len(word):-len(word) - 1:-1]
delimiter
box.focus_set()
delimiter
plt.show()
delimiter
sum(map(int, item))
delimiter
len(x)
delimiter
print(string[i:j])
delimiter
tree = ElementTree.fromstring(xml, parser)
delimiter
dt_aware = localtz.localize(dt_unware)
delimiter
background_label.image = background_image
delimiter
print(every6(example_string))
delimiter
Goodbye
delimiter
do_stuff()
delimiter
plt.axhline(i, color=color)
delimiter
self.nout += 1
delimiter
widget2.update_idletasks()
delimiter
print(cv.GetCaptureProperty(stream, cv.CV_CAP_PROP_FRAME_COUNT))
delimiter
self.update(dict(*args, **kwargs))
delimiter
Pool()
delimiter
a = np.vstack((a, np.array([[1, 1, 0, 0, 0, 0, 0, 1]])))
delimiter
ssh = paramiko.SSHClient()
delimiter
a + b
delimiter
driver = webdriver.Firefox()
delimiter
cur.close()
delimiter
ax.set_xlim(0, 1.4)
delimiter
srcname = os.path.join(src, name)
delimiter
x = random.randint(0, walnut.size[0] - 1)
delimiter
bar.buzz()
delimiter
xl.Quit()
delimiter
list_size_2 = numpy.array(list_size_2)
delimiter
response
delimiter
fd = sys.stdin.fileno()
delimiter
l.set_option(ldap.OPT_X_TLS_DEMAND, True)
delimiter
fig = plt.figure()
delimiter
dict.clear()
delimiter
events[-1].append(line)
delimiter
exec(open(filename).read())
delimiter
sorted(x, key=functools.cmp_to_key(customsort))
delimiter
plt.show()
delimiter
draw.line((x1, y1, x2, y2), fill=col, width=1)
delimiter
testsite_array.append(line)
delimiter
isinstance(bar, types.UnboundMethodType)
delimiter
new_list = list(generate_items)
delimiter
time.sleep(5)
delimiter
a - b
delimiter
print(form.instance.id)
delimiter
print(f2.readline())
delimiter
print(count_rec(0, 0))
delimiter
auth.set_access_token(access_key, access_secret)
delimiter
text = row[1]
delimiter
python - mfoo.bar
delimiter
self.thread.start()
delimiter
form.fileName.file.save(file_path)
delimiter
handle.flush()
delimiter
np.repeat(uniques, np.clip(count, 0, 2))
delimiter
sys.stderr = sys.__stderr__
delimiter
1 / 0
delimiter
wx.StaticBitmap(panel, -1, png, (10, pos), (png.GetWidth(), png.GetHeight()))
delimiter
ax.set_axis_off()
delimiter
values(np.arange(len(A)))
delimiter
[(j + i) for i in strings for j in listSubstrings if i.find(j) > -1]
delimiter
layout.addWidget(self.splitter)
delimiter
do_something(line)
delimiter
parser = argparse.ArgumentParser()
delimiter
x.reshape(zt, -1)[idx.ravel(), np.arange(yt * xt)].reshape(-1, xt)
delimiter
df.mask(np.triu(np.ones(df.shape)).astype(np.bool))
delimiter
objectA.delete()
delimiter
sys.modules[name] = module
delimiter
json.loads(list_dump)
delimiter
b = bytes([x])
delimiter
id = Column(Integer, primary_key=True)
delimiter
brr.sort()
delimiter
defaults.update(kwargs)
delimiter
datetime.combine(date.today(), exit) - datetime.combine(date.today(), enter)
delimiter
app = Flask(__name__)
delimiter
s = map(str, numList)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
deleteL[::L[0]]
delimiter
a = numpy.ones((2, 4))
delimiter
df.gdp.drop(df.gdp.shape[0] - 1, inplace=True)
delimiter
[myList[i] for i in sorted(indices)]
delimiter
self.SetDiagram(self.diagram)
delimiter
turtle.right(angle)
delimiter
fh.write(output_from_parsed_template)
delimiter
dict.__init__(self, *args, **kwargs)
delimiter
str(1056) is str(1056)
delimiter
t.start()
delimiter
plt.legend()
delimiter
a[arange(2), 0, 0], b[arange(2), 0, 0] = b[arange(2), 0, 0], a[arange(2), 0, 0]
delimiter
ws.close()
delimiter
pprint(sorted_dict)
delimiter
buffer1[pos:pos + len(buffer2)] = buffer2
delimiter
self.data[key]
delimiter
np.any(a == 2, axis=0)
delimiter
self.layout = QtGui.QHBoxLayout()
delimiter
A.shape
delimiter
ax.set_theta_offset(np.radians(90))
delimiter
app.register_blueprint(bp)
delimiter
conacatData = [(x[0] + x[1]) for x in testdata]
delimiter
web.load(QUrl(url))
delimiter
self.write(figdata.getvalue())
delimiter
pool = mp.Pool(processes=1)
delimiter
options, args = parser.parse_args()
delimiter
logger.addHandler(file_handler)
delimiter
[b, c, d, e, f]
delimiter
print(instance.ip_address)
delimiter
[1, 0, 1, 1, 0]
delimiter
cls(wfd, bfd, wildfd, tfd, ffd)
delimiter
p.start()
delimiter
it = iter(the_list)
delimiter
f(6)
delimiter
t.render(c)
delimiter
[2, 2, 5, 7, 7]
delimiter
plt.plot(x_new, ffit(x_new))
delimiter
im.size
delimiter
msg.attach(part1)
delimiter
setattr(cls, key, wrapper(value))
delimiter
myList = []
delimiter
print(df)
delimiter
admin.site.unregister(User)
delimiter
self.testButton.clicked.connect(self.change_text)
delimiter
drand48()
delimiter
s = socket.socket()
delimiter
time.sleep(1)
delimiter
list = list + [(0) for _ in range(4 - len(list))]
delimiter
list_of_unique_dicts = list(np.unique(np.array(list_of_dicts)))
delimiter
self.view.setEditTriggers(QtGui.QAbstractItemView.NoEditTriggers)
delimiter
mlab.show()
delimiter
image = image.astype(np.uint8)
delimiter
print(my_list[0])
delimiter
help(foo.bar)
delimiter
response = urllib.request.urlopen(url)
delimiter
heapq.heappush(heap, (row[1], row))
delimiter
urllib.request.install_opener(opener)
delimiter
x = list(range(1, 10))
delimiter
self.assertEqual(forty_two, 42)
delimiter
ser.close()
delimiter
ax.errorbar(theta, r, yerr=1, xerr=0.1, capsize=0)
delimiter
suite.addTest(unittest.defaultTestLoader.loadTestsFromName(t))
delimiter
df
delimiter
s.strip()
delimiter
table.horizontalHeader().setStretchLastSection(True)
delimiter
self.master.destroy()
delimiter
a.foo = 2
delimiter
os.write(fd, data)
delimiter
idx = where(abs(A[:, (newaxis), :] - B).sum(axis=2) == 0)
delimiter
screen = pygame.display.set_mode((100, 100))
delimiter
start_date = timezone.now().date()
delimiter
x1, x2 = np.nonzero((diffs < tol).all(2))
delimiter
[random.choice(xs) for _ in range(sample_size)]
delimiter
second_column = [row[1] for row in a]
delimiter
serializer.save(user_id=15)
delimiter
Response(serializer.data)
delimiter
list(self.__dict__.keys())
delimiter
result = np.empty_like(arr)
delimiter
(A != 0).cumsum(1)
delimiter
models.DateTimeField.to_python(self, value)
delimiter
dialect = csv.Sniffer().sniff(f1.read())
delimiter
print(regx.findall(content))
delimiter
self.frame.pack_propagate(False)
delimiter
a = numpy.array(list(range(10)))
delimiter
A_from_python()
delimiter
id = Column(Integer, primary_key=True)
delimiter
fp.close()
delimiter
self._socket.send(bytes)
delimiter
np.allclose(a.data, b.data)
delimiter
print(str(x))
delimiter
c.save()
delimiter
self.log_message(format, *args)
delimiter
len(obj)
delimiter
InfoDF = pd.concat([InfoDF, tempDF])
delimiter
line = proc.stderr.readline()
delimiter
rgb = np.empty_like(hsv)
delimiter
self.cj = cookielib.CookieJar()
delimiter
img2 = img.copy()
delimiter
ngrams(string1, n) & ngrams(string2, n)
delimiter
offset = cet.utcoffset(dt, is_dst=True)
delimiter
[mylist[cumlist[i]:cumlist[i + 1]] for i in range(len(cumlist) - 1)]
delimiter
streams = [data[:, (stream_index == i)].ravel() for i in range(k)]
delimiter
len(L) == len(E)
delimiter
app.db = db
delimiter
app.processEvents()
delimiter
self.get()
delimiter
[1, 2]
delimiter
dt = datetime.datetime(2012, 1, 1, 0, 0)
delimiter
ax1 = fig.add_subplot(111)
delimiter
pprint(data, indent=4)
delimiter
sum(array[mask])
delimiter
x + 1
delimiter
extension = guess_extension(guess_type(url)[0])
delimiter
data = data[tuple(ind)]
delimiter
parser.feed(your_html_string)
delimiter
print(now + dateutil.relativedelta.relativedelta(months=-1))
delimiter
ax.set_xticklabels(xlabels)
delimiter
nanargmax(a)
delimiter
data = f.read()
delimiter
[i for i in l if re.search(s, i)]
delimiter
num * X(X, b - 1) if num > 0 else 1
delimiter
INF = _Infinity()
delimiter
print(kmeans.cluster_centers_)
delimiter
print({k for k, v in list(counts.items()) if v >= 2})
delimiter
msg.attach(plain_text)
delimiter
driver = webdriver.PhantomJS()
delimiter
print(my_string)
delimiter
main()
delimiter
Response(serializer.data)
delimiter
row.pop()
delimiter
time.sleep(2)
delimiter
img = c.getImage()
delimiter
string.printable
delimiter
operator.itemgetter(*b)(a)
delimiter
os.makedirs(whatever)
delimiter
img.write(artwork)
delimiter
data[key]
delimiter
widget = widget.get_parent()
delimiter
picture.putpixel((x, y), new_color)
delimiter
file.seek(0, 2)
delimiter
result = [foo(p1, p2) for p1 in people for p2 in people]
delimiter
np.transpose(np.nonzero(b))
delimiter
factor.P()
delimiter
whos
delimiter
print({k: (x.get(k, 0) + y.get(k, 0)) for k in set(x) & set(y)})
delimiter
app = Eve(auth=globalauth.TokenAuth)
delimiter
time.sleep(1)
delimiter
y = tuple(x)
delimiter
array([[1.0, 1.0], [1.0, 1.0]])
delimiter
getattr(obj, name)
delimiter
plt.plot([1, 2])
delimiter
engine = innodb
delimiter
app.logger.addHandler(file_handler)
delimiter
proc = subprocess.call(command, stderr=subprocess.OUTPUT)
delimiter
ax.set_xticks(ind + width / 2)
delimiter
f()
delimiter
lines.append(line)
delimiter
dates.year
delimiter
widget.show()
delimiter
len(bin(10)) - 2
delimiter
plt.yticks(list(range(y.max() + 1)), labels)
delimiter
list(self.keys())
delimiter
r = requests.post(url, data=json.dumps(payload), headers=headers)
delimiter
response = requests.get(url, params=query)
delimiter
tree = tree.getroottree()
delimiter
app = Flask(__name__)
delimiter
os.rename(original, output)
delimiter
orderdict = dict((y, x) for x, y in enumerate(wantedorder))
delimiter
a = np.random.random(20).reshape(4, 5)
delimiter
d.setdefault(key, []).append(val)
delimiter
pool.join()
delimiter
{{tag}}
delimiter
NULL
delimiter
t.total_seconds()
delimiter
int()
delimiter
QtCore.QCoreApplication.instance().quit()
delimiter
mask = np.ones(len(data), np.bool)
delimiter
slices = [sli for sli in (list(islice(it, 0, i)) for i in seclist) if sli]
delimiter
print({k: (x.get(k, 0) + y.get(k, 0)) for k in set(x)})
delimiter
(string_to_expand * (length / len(string_to_expand) + 1))[:length]
delimiter
my_string = my_string.lower().split()
delimiter
s = s[::-1]
delimiter
df1.columns = pd.MultiIndex.from_tuples(new_cols)
delimiter
Base.metadata.create_all(e)
delimiter
client.Resolver.__init__(self, servers=servers)
delimiter
print(is_summer_time(aware))
delimiter
b = sorted(sorted(a, key=lambda x: x[0]), key=lambda x: x[1], reverse=True)
delimiter
t.cancel()
delimiter
map(add, a, itertools.repeat(2, len(a)))
delimiter
finder1.apply_freq_filter(2)
delimiter
data = np.arange(100, dtype=np.int)
delimiter
diff = set(zip(df2.Buyer, df2.Quantity)) - set(zip(df1.Buyer, df1.Quantity))
delimiter
datesDF = pd.DataFrame(dates)
delimiter
threading.Timer(1, foo).start()
delimiter
n[1]
delimiter
print(kwlist)
delimiter
a.name()
delimiter
sleep(1)
delimiter
p.stdout.readline()
delimiter
Parent.__init__(self, x)
delimiter
list(d.items())
delimiter
subtraction = int(start_big) - int(start_small)
delimiter
pcolor(my_array, cmap=cmap, norm=NoNorm())
delimiter
r.clipboard_clear()
delimiter
b = [1, 2, 5]
delimiter
x = np.lib.stride_tricks.as_strided(y, shape=(A, B), strides=(n, n))
delimiter
os.makedirs(f)
delimiter
plt.bar(x[i], y[i], color=cm.jet(1.0 * i / len(x)))
delimiter
dict((v, k) for k, v in d1.items())[55]
delimiter
button.setVisible(False)
delimiter
print(tailq.get())
delimiter
app = Flask(__name__)
delimiter
ordered = list([x for x in ordered if x not in unordered])
delimiter
next(c)
delimiter
app = Flask(__name__)
delimiter
self.assertEqual(e.args[0], 42)
delimiter
result = pool.map_async(task, [(x, q) for x in range(10)])
delimiter
some_queryset[:length] if length else some_queryset[:]
delimiter
listmatrixMap(add, a, b)
delimiter
session = requests.session(cookies=cookies)
delimiter
new_list.append(v)
delimiter
list(calendar.day_abbr)
delimiter
compare_lists(a[1:], b[1:])
delimiter
msvcrt.getch()
delimiter
(5)()
delimiter
np.arange(10)[10:-10:-1]
delimiter
f.close()
delimiter
cleaned_list = list(filter(is_not_thing, some_list))
delimiter
pylab.xlim(xmin=0)
delimiter
fh.close()
delimiter
help(f)
delimiter
money = Column(Integer, default=100)
delimiter
sp.stdin.close()
delimiter
p.communicate(input=str)
delimiter
print(x)
delimiter
df.iloc[idx]
delimiter
MyClass.call_me()
delimiter
some_value
delimiter
imgtk = ImageTk.PhotoImage(image=im)
delimiter
zeroMatrix = [zeroArray[:] for i in range(Np)]
delimiter
utc_dt + timedelta(hours=longitude / math.pi * 12)
delimiter
np.sqrt(val / 2.0 / a.shape[0])
delimiter
transaction.commit()
delimiter
self._fp.close()
delimiter
re.sub(r, replacer, string)
delimiter
bundle.obj == bundle.request.user
delimiter
soup = BeautifulSoup(html_doc)
delimiter
ax.yaxis.set_major_formatter(matplotlib.ticker.ScalarFormatter())
delimiter
lock.release()
delimiter
a = np.array([1, 2, 1, 1, 2])
delimiter
wait()
delimiter
self.pressed.connect(self.update)
delimiter
df.index = pd.MultiIndex.from_tuples(df.index)
delimiter
print(spectra_list[0])
delimiter
assert np.allclose(expected, result)
delimiter
print(t.timeit(5))
delimiter
fig = plt.figure(figsize=(10, 8))
delimiter
imp.get_suffixes()
delimiter
self.seek(0)
delimiter
views.py
delimiter
plt.draw()
delimiter
[i for i in range(2, 25) if f(i)]
delimiter
print(numpy.array([n.activate(x) for x, _ in d]))
delimiter
b = ma.masked_array([0, 1, 2, 4], [True, True, False, False])
delimiter
letterGoodness = dict(zip(string.ascii_uppercase, letterGoodness))
delimiter
dict(d)
delimiter
np.add.reduceat(a, w[:-1]).astype(float) / np.diff(w)
delimiter
a.symmetric_difference(b)
delimiter
atexit.register(whatever)
delimiter
enternum.pack()
delimiter
config = ConfigParser.ConfigParser()
delimiter
map(lambda x: x[0] == 1, a_list)
delimiter
closest_date = min(later, key=lambda d: get_datetime(d[0]))
delimiter
process(line)
delimiter
time.sleep(SPINUP_WAIT_TIME)
delimiter
self.master.destroy()
delimiter
session.commit()
delimiter
self.button.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
delimiter
print(sum((a - i) ** 2, 1).argmin())
delimiter
print(mywrap(s, 10))
delimiter
sorted(versions, key=LooseVersion)
delimiter
a[0] * b[0] + a[1] * b[1] + a[2] * b[2]
delimiter
c.setopt(c.WRITEFUNCTION, storage.write)
delimiter
extension = guess_extension(guess_type(url))
delimiter
show(layout)
delimiter
temp = temp.reshape(1, -1)
delimiter
np.delete(myarray, np.r_[tuple(mylist)])
delimiter
sockOutfile.write(readRequest)
delimiter
pd.DataFrame((d2 - sums2 / n) / stds2 / n, df.columns, df.columns[k:l])
delimiter
time.sleep(5)
delimiter
sys.exit(1)
delimiter
fig, ax = plt.subplots()
delimiter
self.setFixedSize(pic.size())
delimiter
screen = win.get_screen()
delimiter
print((i[0] + 1, i[1]))
delimiter
_epoch + timedelta(days=ordinal - 1)
delimiter
print(a[150001, 2])
delimiter
A.__init__(self, *args, **kwargs)
delimiter
data = cur.fetchone()[0]
delimiter
1, 1, 1, 1, 1, 1, 0, 0, 20160224, 20160226
delimiter
datetime.datetime.fromordinal(t.toordinal())
delimiter
D = np.random.random_integers(0, 1, (5, 5))
delimiter
combs.append((x, y))
delimiter
print(soup)
delimiter
{2, 4, 10}.issubset(chain.from_iterable(x))
delimiter
result.append(s)
delimiter
a = np.arange(10)
delimiter
mylist = []
delimiter
sys.__repr__()
delimiter
photo = models.ImageField(upload_to=photo_path, blank=True)
delimiter
print(new_data.shape)
delimiter
img_file.save(new_image_name)
delimiter
text.set_text(s)
delimiter
out[idx, idx] = A[idx, idx]
delimiter
n_grams = CountVectorizer(ngram_range=(1, 5))
delimiter
QWebPage.__init__(self)
delimiter
[0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1]
delimiter
ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])
delimiter
[(word[:i] + word[i + 1:]) for i in indexes]
delimiter
locale.currency(188518982.18)
delimiter
print(sys.executable)
delimiter
lambda x: sum(f(x) for f in terms)
delimiter
sys.__stdout__.write(data)
delimiter
points = [(i, j) for i, j in zip(x, y)]
delimiter
inprogress.append(taskindex)
delimiter
icon_theme = gtk.icon_theme_get_default()
delimiter
ax.set_yticks(majorticks, minor=False)
delimiter
ssc.start()
delimiter
datetime.date(year, month, day)
delimiter
print([cls.__name__ for cls in X.mro()])
delimiter
blah = models.IntegerField(choices=BLAH_CHOICES)
delimiter
sanitised_filename = sanitise_filesystem_name(filename)
delimiter
X = [i[0] for i in Counter(df.X).most_common()]
delimiter
data = [[float(x) for x in y] for y in data]
delimiter
print(flatten(list))
delimiter
fronts = np.empty(len(M), int)
delimiter
name = models.CharField(max_length=128)
delimiter
sio.readlines()
delimiter
plt.loglog(list(range(100)))
delimiter
ax.xaxis.set_tick_params(size=0)
delimiter
out = idx[mask].argsort()[unqID]
delimiter
token = token_handler.create_token(request, self.refresh_token)
delimiter
time.sleep(0.1)
delimiter
print(sys.path)
delimiter
heapq.heappush(self.heap, (pri, d))
delimiter
print(strings.group(0))
delimiter
views.py
delimiter
t.to_pydatetime()
delimiter
fcntl.fcntl(fd, fcntl.F_SETFL, fcntl.fcntl(fd, fcntl.F_GETFL) | os.O_NONBLOCK)
delimiter
a[idx]
delimiter
locals() is globals()
delimiter
window = NSApp.mainWindow()
delimiter
tuples = [(x, y) for x in L1 for y in L1 if x != y]
delimiter
emissions = [[float(x) for x in nextline().split()] for i in range(n)]
delimiter
ImageDraw.Draw(halo).text(position, text, font=font, fill=halo_col)
delimiter
bit_array[25] = 1
delimiter
self.fd.seek(offset)
delimiter
foo = Foo()
delimiter
self.html_file.close()
delimiter
widget.show()
delimiter
abs(g(a + b * f(c)) + g(a - b * f(c)) - 1) < 1e-10
delimiter
min(s[max(0, i - 1):i + 2], key=lambda t: abs(ts - t))
delimiter
crustFrame.Show()
delimiter
asyncore.dispatcher.__init__(self)
delimiter
[x_y_z for x_y_z in a if x_y_z[0] + x_y_z[1] + x_y_z[2] > 6]
delimiter
statement.parseString(text)
delimiter
A = np.arange(10)
delimiter
layout = QtGui.QVBoxLayout()
delimiter
firsttwo = words[:2]
delimiter
f1.close()
delimiter
a = np.array(ulysses.split())
delimiter
self.model.fetchMore()
delimiter
demandimport.__file__
delimiter
a = numpy.random.randn(100, 200)
delimiter
df[df < 1] = 0
delimiter
cookies = cookielib.LWPCookieJar()
delimiter
__init__.py
delimiter
text = models.TextField()
delimiter
User[1] == {}
delimiter
r = requests.get(url)
delimiter
self.assertAlmostEqual(em(1, 2), 0.2188, 4)
delimiter
b = tf.square(tf.matrix_determinant(a))
delimiter
counts = np.bincount(id[mask1] - 1)
delimiter
wjdata = json.loads(wjson)
delimiter
elem.clear()
delimiter
root = tree.getroot()
delimiter
widget.deleteLater()
delimiter
parent.remove(elem)
delimiter
img.resize(width=scaled_width, height=scaled_hight)
delimiter
id = Column(Integer, primary_key=True)
delimiter
print(x)
delimiter
new = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
setp(a, xticks=[], yticks=[])
delimiter
f.name
delimiter
data.setdefault(k, [])
delimiter
print(type((1,)))
delimiter
copy.deepcopy(self)
delimiter
self.window.addstr(1 + index, 1, msg, mode)
delimiter
list.sort()
delimiter
psutil.virtual_memory()
delimiter
partials.append([])
delimiter
BlogComment.save()
delimiter
url = opener.open(request)
delimiter
int(self)
delimiter
new_foo = filter_divisible_by_three(foo)
delimiter
instance.new()
delimiter
args = parser.parse_args()
delimiter
ecef_cities = [geodetic2ecef(lat, lon) for lat, lon in cities]
delimiter
new_pressures[-1] += p[index]
delimiter
script.extract()
delimiter
accum &= np.abs(a[:, (i)] - b[:, (i)].ravel()) < tol[i]
delimiter
handler.setLevel(logging.CRITICAL)
delimiter
df
delimiter
u in G.neighbors(v)
delimiter
cvtColor(im, imgrey, CV_RGB2GRAY)
delimiter
self.cam.release()
delimiter
words.append(random.sample(novel, 100))
delimiter
{key: tuple(d[key] for d in dicts) for key in common_keys}
delimiter
{key: obj.__dict__}
delimiter
output_set = set(itertools.chain(first_list, second_list))
delimiter
a == b
delimiter
hist(x)
delimiter
si.imgdata = im.tostring()
delimiter
{{(game.description | safe | truncatewords): 65}}
delimiter
(date(2015, 10, 7) - date(1, 1, 1)).days
delimiter
time.sleep(self.delay)
delimiter
print(daily_prices[2])
delimiter
print(resp.status_code)
delimiter
parser = etree.XMLParser(remove_blank_text=True)
delimiter
plt.colorbar(im, fraction=0.046, pad=0.04)
delimiter
osa.communicate(ascript)[0]
delimiter
velcro.right(90)
delimiter
print(len(S1), len(S2))
delimiter
x = json2obj(data)
delimiter
out[idx[:, (0)], idx[:, (1)]] = vals
delimiter
QtGui.QWidget.eventFilter(self, source, event)
delimiter
sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))
delimiter
list(self.__graph_dict.keys())
delimiter
values = np.sum(weights * features + bias)
delimiter
frame.pack()
delimiter
f_output.write(file_bytes.read())
delimiter
A[:, (1)] *= 5.2
delimiter
unittest.main()
delimiter
fig = plt.figure()
delimiter
pd.rolling_mean(pivot, 90, center=True, min_periods=1)
delimiter
np.vstack((dst[idx], rows[idx], cols[idx])).T
delimiter
session.add(h)
delimiter
audio_array = audio_array.reshape((len(audio_array) / 2, 2))
delimiter
self.data.config(yscrollcommand=self.scrollbar.set)
delimiter
ax = plt.gca()
delimiter
plt.colorbar(sm)
delimiter
script = sys.argv[0]
delimiter
values = [is_prime(x) for x in PRIMES]
delimiter
print(df)
delimiter
distance = [[[(0) for k in range(n)] for j in range(n)] for i in range(n)]
delimiter
callable(fn)
delimiter
sys.exit(0)
delimiter
browser = webdriver.Firefox()
delimiter
func(*args)
delimiter
pprint.pprint(list(collection.aggregate(pipeline=pipeline)))
delimiter
list(x)
delimiter
print(readline.get_history_item(i + 1))
delimiter
self.frame.Show(True)
delimiter
self.queue.append(data)
delimiter
print(a, b)
delimiter
chars.extend(line)
delimiter
file = jpgs[-1]
delimiter
sleep(1)
delimiter
column_label.show()
delimiter
res0.remove(element)
delimiter
x = session.query(Foo).all()
delimiter
Employee.__init__(self, name, salary)
delimiter
list(filter(filterfunc, l1))
delimiter
recursion(0, 0)
delimiter
dict(zip(student_names, average_of_all_assignments))
delimiter
t.start()
delimiter
args = parser.parse_args()
delimiter
sum([True, True, False], False)
delimiter
705.0, 690.0, 705.0, 680.0, 715.0, 705.0, 670.0, 705.0, 705.0, 650.0
delimiter
afield = forms.ChoiceField(choices=INITIAL_CHOICES)
delimiter
screen.fill((255, 0, 0), (self.x, self.y, 10, 10))
delimiter
draw = ImageDraw.Draw(image)
delimiter
list(reversed([i[0] for i in l[1:-1]]))
delimiter
f(a, b).A
delimiter
list.append(map(itemgetter(1), g))
delimiter
self.label.pack(padx=10, pady=10)
delimiter
cursor.execute(SQL)
delimiter
print(df.reindex(idx))
delimiter
np.allclose(B.todense(), B2.T)
delimiter
response
delimiter
deleteelem.getparent()[0]
delimiter
[list(i) for i in zip(*theArray)]
delimiter
fig = pl.figure()
delimiter
G.add_path([0, 2, 5])
delimiter
plt.show()
delimiter
dt = datetime.datetime.fromtimestamp(float(datestring))
delimiter
func(xy[0], xy[1], data)
delimiter
print(str(i))
delimiter
module_name = inspect.getmodule(s[1][0]).__name__
delimiter
sorted_files.append(f)
delimiter
json.loads(value)
delimiter
c, d = np.meshgrid(a, b)
delimiter
collections.defaultdict(nested_dict)
delimiter
args = parser.parse_args()
delimiter
leg = ax.legend()
delimiter
hash_md5.update(chunk)
delimiter
pyplot.ylim(ymin=0)
delimiter
pool.join()
delimiter
response = urllib.request.urlopen(req)
delimiter
server.set_debuglevel(1)
delimiter
self.fn(*args, **kwargs)
delimiter
x.loc[(x.A >= 2.0) & (x.A <= 4.0)]
delimiter
np.all(a == a.T)
delimiter
-1 if not a or a.isspace() else a.index(a.lstrip()[0])
delimiter
count[letter] = 1
delimiter
ax = fig.add_subplot(111)
delimiter
opener = urllib.request.build_opener(handler)
delimiter
cursor = db.cursor()
delimiter
foo[somestuff]
delimiter
dict1.items() ^ dict2.items()
delimiter
stdv.reset()
delimiter
key = models.PositiveIntegerField()
delimiter
grey_image = cv.CreateImage(cv.GetSize(frame), cv.IPL_DEPTH_8U, 1)
delimiter
shutil.rmtree(dir)
delimiter
utc_seconds = time.mktime(t.timetuple())
delimiter
lst[(len(lst) + 1) / 2 - 1]
delimiter
plt.figure()
delimiter
a[x] + a[y]
delimiter
self.cleaned_data
delimiter
parser.parse_args(args)
delimiter
df.describe()
delimiter
integrate.quad(func, a, b, args=(y,))[0]
delimiter
fig = plt.gcf()
delimiter
a + (b - a) * self.random()
delimiter
df
delimiter
ax.scatter(xs, ys, zs, c=c, marker=m)
delimiter
m = ctypes.c_int(x.shape[0])
delimiter
plt.show()
delimiter
self.window.add(self.image)
delimiter
ioctl(fd, USBDEVFS_RESET, 0)
delimiter
zipf.close()
delimiter
np.random.choice(make_sampling_arr(n_k), m)
delimiter
s.send(tmsg)
delimiter
a[20:] = zip(*zip(a[20:], itertools.repeat(0)))[1]
delimiter
instance.topping_set.clear()
delimiter
ww.writeframes(new_frames)
delimiter
ET.dump(root)
delimiter
[c, d, f]
delimiter
{{mywidget.css()}}
delimiter
form_data = urllib.parse.urlencode(form_fields, doseq=True)
delimiter
ConstantFunction(constant)
delimiter
sum(b << k * 8 for k, b in enumerate(bytes))
delimiter
plt.clf()
delimiter
x.append(Foo())
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
app.listen(8888)
delimiter
suffix_array.sort(key=lambda a: content[a:])
delimiter
Maybe(val)
delimiter
matrix = matrix[0:100, 0:80]
delimiter
print(new_url)
delimiter
found_extensions.add(os.path.splitext(f)[-1])
delimiter
a = numpy.linspace(-1, 1, 20)
delimiter
u = np.sin(np.pi * x) * np.cos(np.pi * y) * np.cos(np.pi * z)
delimiter
chart.Copy()
delimiter
x = theano.shared(numpy.arange(10))
delimiter
now += timedelta(minutes=1)
delimiter
ranges.append((last_start, offset - 1, current_set))
delimiter
my_dict[key] = indices
delimiter
xmlOutput += self.dirToXML(os.path.join(root, subdir))
delimiter
ax = pl.subplot(111)
delimiter
self.__dict__.update(name_value_dict)
delimiter
win.setWindowFlags(win.windowFlags() | QtCore.Qt.CustomizeWindowHint)
delimiter
ndata = np.frombuffer(data, np.int8)
delimiter
type(int(s))
delimiter
[0, 0, 0, 17, 0, 0, 0, 40, 0, 0, 0, 0, 0],
delimiter
__init__.py
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
listWidget.setItemWidget(item, w)
delimiter
result.update(dictionary)
delimiter
corpus.sort(cmp=locale.strcoll)
delimiter
info[1][1] == 4
delimiter
np.random.seed(22)
delimiter
df1 = df.iloc[:, :-1]
delimiter
session.expunge(item)
delimiter
list(unique_everseen(a, key=set))
delimiter
hash(dumps(data))
delimiter
self.__dict__.update(kwds)
delimiter
[tmp.setdefault(name, len(tmp)) for name in names]
delimiter
new_points = list(do_something_with(x, y, z) for x, y, z in surface.points)
delimiter
self.assertAlmostEqual(em(2, 2), 0.4251, 4)
delimiter
list(b)
delimiter
z.append(matchobj.group(1))
delimiter
[foo() for x in range(10)]
delimiter
time.sleep(4)
delimiter
plt.bar(list(range(0, 100)), x)
delimiter
fig = pylab.figure(figsize=(12, 9))
delimiter
mask = np.ones(len(a), dtype=bool)
delimiter
lst = [(int(s) if s.isdigit() else s) for s in lst]
delimiter
sys.stdout = sys.__stdout__
delimiter
print(numpy.__path__)
delimiter
random.shuffle(some_list_of_stuff)
delimiter
type(n) is int
delimiter
arr = np.dstack((r, g, b, a))
delimiter
x.update([i])
delimiter
numpy.arange(a.shape[0])[numpy.in1d(a, b)]
delimiter
sock.bind((HOST, PORT))
delimiter
tck = scipy.interpolate.splrep(x, y)
delimiter
datenow = datenow.replace(hour=16, minute=0, second=0, microsecond=0)
delimiter
data = pickle.load(fp)
delimiter
axes[0].legend().set_visible(False)
delimiter
playlists = [i[1] for i in list(radio.items())]
delimiter
0.5 * (1 + tsr.erf((x - mu) / (sd * tsr.sqrt(2))))
delimiter
a.extend(map(add, lst))
delimiter
print([set(x) for x in bodylist])
delimiter
-__init__.py
delimiter
new_db.executescript(query)
delimiter
b = a[:]
delimiter
zip_longest(fillvalue=fillvalue, *args)
delimiter
a[(labels.view(np.ndarray).ravel() == 1), :]
delimiter
print(sys._getframe().f_code.co_name)
delimiter
soup = BeautifulSoup(data)
delimiter
p.wait()
delimiter
MyObj2 = MyModel.objects.all()[index2]
delimiter
plt.plot(X, Y1, lw=0)
delimiter
samp_rate, data = scipy.io.wavfile.read(filename)
delimiter
test_module2.py
delimiter
plt.pause(1e-09)
delimiter
draw = ImageDraw.Draw(circle)
delimiter
timeit(lambda : list(assignments(12, 5)), number=1)
delimiter
serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
file_handler.setLevel(logging.DEBUG)
delimiter
foo(nonsene=True, blather=False)
delimiter
byweekday = byweekday, byhour = byhour, byminute = byminute, bysecond
delimiter
ax.set_xlim(0, 5)
delimiter
os.path.splitext(fn)[1] != ext
delimiter
a[i, j]
delimiter
dfs = pd.concat(df_list)
delimiter
np.random.seed(0)
delimiter
user = User.objects.get(pk=uid)
delimiter
cv2.waitKey(1000)
delimiter
delete_keys_from_dict(v, lst_keys)
delimiter
tk.Tk.__init__(self)
delimiter
statuses = [a.wait(), b.wait()]
delimiter
search = np.array([1, 2], dtype=e.dtype).view(dt)
delimiter
[y for y in x.split() if len(y) > 2]
delimiter
time.sleep(1)
delimiter
a.take((1,), axis=1)
delimiter
os.startfile(filepath)
delimiter
self._tunnel()
delimiter
writer = csv.writer(f)
delimiter
BeautifulSoup(badString, markupMassage=myNewMassage)
delimiter
result.append(elem)
delimiter
fig = plt.figure()
delimiter
print(p.match(input).groups())
delimiter
dummy_event.wait()
delimiter
datetime.datetime(2012, 1, 2, 0, 0, 0),
delimiter
zeroMatrix = numpy.zeros((Np, Np))
delimiter
points.append((x, y))
delimiter
pickle.loads(encoded)
delimiter
jsonify(x.serialize())
delimiter
rd = dateutil.relativedelta.relativedelta(dt2, dt1)
delimiter
Widget.__init__(self, parent)
delimiter
s = set(fus_d.keys())
delimiter
torfile.set_priv(torinfo.priv())
delimiter
b = [(1 if i else 0) for i in a]
delimiter
print(sum(1 for _ in takewhile(lambda x: x == l[0], l)))
delimiter
q = multiprocessing.Queue()
delimiter
df /= df.max()
delimiter
form.show()
delimiter
tk.Tk.__init__(self, *args, **kwargs)
delimiter
[sum(combination, []) for combination in itertools.product(*outer)]
delimiter
node
delimiter
article.author = self.request.user
delimiter
article.headline_set.all()
delimiter
data[tuple(ind)]
delimiter
isinteger(1)
delimiter
itertools.combinations(items, 2)
delimiter
dfasamplefive = dfa.sample(n=5)
delimiter
server()
delimiter
L[-1]
delimiter
np.array([np.bincount(ii, r) for r in a.T]).T
delimiter
result_queue = multiprocessing.Queue()
delimiter
L[:] = [x for x in L if d[x] == 1]
delimiter
years_dict[line[0]] = [line[1]]
delimiter
w = Gtk.Window()
delimiter
thiselem, nextelem = nextelem, next(licycle)
delimiter
os.play()
delimiter
print(form.username)
delimiter
req = urllib.request.Request(url)
delimiter
B = numpy.array(A)
delimiter
Time.insert(0, time)
delimiter
print(y, len(y))
delimiter
print(conn.sock.getpeercert())
delimiter
type(d)
delimiter
s.seek(0)
delimiter
pylab.plot(x)
delimiter
self.d[index] = [value]
delimiter
d + datetime.timedelta(days_ahead)
delimiter
id = models.IntegerField(primary_key=True)
delimiter
max_value = np.iinfo(im.dtype).max
delimiter
self.close()
delimiter
f = open(filename)
delimiter
d.setdefault(m, []).append(k)
delimiter
m.getch()
delimiter
max(L[0], 0)
delimiter
opener = urllib.request.build_opener(urllib.request.HTTPRedirectHandler)
delimiter
print((lambda b: Y)(num))
delimiter
t = xml.fromstring(s)
delimiter
np.ma.array(x, mask=~bool_arr).argmax()
delimiter
ax.add_patch(patch)
delimiter
print(tavnit % tuple(columns))
delimiter
show()
delimiter
shape = np.array(a.shape)
delimiter
(alist[i:j] for i, j in pairs)
delimiter
pathqueue.join()
delimiter
PyMODINIT_FUNC
delimiter
root = tree.getroot()
delimiter
request = requests.get(url, stream=True)
delimiter
set(c).issubset(set(a))
delimiter
numbers = [int(w) for line in lines for w in line.split()]
delimiter
stdout, stderr = p.communicate()
delimiter
new_col = sc.parallelize(np.array([20, 20, 20, 20]), n).map(int)
delimiter
pythoncom.CoInitialize()
delimiter
archive_path = os.path.abspath(sys.argv[0])
delimiter
painter.rotate(90)
delimiter
frozenset(some_item for some_set in some_sets for some_item in some_set)
delimiter
myDict[key] = 20
delimiter
seen.add(item)
delimiter
print(values[:, (1)].sum())
delimiter
self.handle_request()
delimiter
width = win.winfo_width()
delimiter
option.NPV()
delimiter
key_name = lipis.key().name()
delimiter
l2 = [0, 2, 5, 6, 8, 9]
delimiter
print(statlib.__version__)
delimiter
cs = axs[1].contourf(X, Y, zdata, levels=[-1, 0, 1])
delimiter
divmod(c.days * 86400 + c.seconds, 60)
delimiter
QApplication.restoreOverrideCursor()
delimiter
myarray[x.group(1)] = [x.group(2)]
delimiter
do_case0()
delimiter
self.socket.sendall(length)
delimiter
peewee.create_model_tables(models)
delimiter
queue.start()
delimiter
yi, zi = np.zeros_like(xi), np.zeros_like(xi)
delimiter
help(CM)
delimiter
ynew
delimiter
((key, mydict[key]) for key in mydict)
delimiter
profile.options.filter(id=option_id).count()
delimiter
stack.pop()
delimiter
np.choose(m, p_vec).sum(axis=1)
delimiter
transsurface.set_colorkey((255, 0, 255))
delimiter
B[:, :] = v.dot(A)
delimiter
a = A[:, (j)]
delimiter
plt.tight_layout()
delimiter
not bool(condition)
delimiter
np.diff(np.r_[0, np.where(np.diff(data) != 1)[0] + 1, data.size])
delimiter
pl.show()
delimiter
ax.set_yticks([-0.5, 0.5])
delimiter
cur = con.cursor()
delimiter
req.add_data(urllib.parse.urlencode(kwargs))
delimiter
0 if len(cn) > 1 and cn[0][1] == cn[1][1] else next(iter(cn), [0])[0]
delimiter
list1[:]
delimiter
a1Note.play()
delimiter
array[np.abs(array) < eps] = 0
delimiter
False
delimiter
d.get_state()
delimiter
root.mainloop()
delimiter
ax = fig.add_subplot(111)
delimiter
file_handler.setLevel(logging.DEBUG)
delimiter
thrs.append(threading.Thread(target=targ))
delimiter
new_v = (this_array[indices[0] - 1] + this_array[indices[-1] + 1]) / 2
delimiter
row_ind = [k for k, v in d.items() for _ in range(len(v))]
delimiter
self.values.remove(item[1])
delimiter
print(file_type(filename))
delimiter
workers = [ageName(row[0], row[1]) for row in reader]
delimiter
tty.setraw(sys.stdin.fileno())
delimiter
User.__unicode__ = User.get_full_name()
delimiter
self.blocks.clear()
delimiter
pool.apply_async(func, callback=callback)
delimiter
main()
delimiter
frame.Show()
delimiter
table = list(itertools.product([False, True], repeat=n))
delimiter
out = pcorr[np.nanargmax(np.abs(pcorr), axis=0), np.arange(pcorr.shape[1])]
delimiter
process.start()
delimiter
len(l)
delimiter
sys.exit(0)
delimiter
source.yaml
delimiter
out[:, (mask)] = B[:, :, ::-1][:, (mask[:, ::-1])]
delimiter
root.focus_force()
delimiter
bool(urlparse(url).netloc)
delimiter
self.wfile.write(f.read())
delimiter
Py_Finalize()
delimiter
id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
delimiter
platform.version()
delimiter
data = f.read()
delimiter
print(binascii.b2a_hex(os.urandom(15)))
delimiter
fn_globals.update(globals())
delimiter
f()
delimiter
pycallgraph.start_trace(filter_func=filtercalls)
delimiter
uniques = npi.intersection(x, y)
delimiter
print(s[:117])
delimiter
ifr.ifr_flags |= IFF_PROMISC
delimiter
pickle.dump(_object, self.transport)
delimiter
im = cv2.imread(sample)
delimiter
email = db.Column(db.String(45), unique=True)
delimiter
len(y[b])
delimiter
len(result.index.names) > 1
delimiter
njit(simulator)
delimiter
box.show()
delimiter
os.setsid()
delimiter
end_time = time.time()
delimiter
cursor = collection.find({})
delimiter
make_xml().write(sys.stdout)
delimiter
{{form.name()}}
delimiter
s = input()
delimiter
socket.listen(1)
delimiter
do_something()
delimiter
show(p)
delimiter
id = Column(Integer, primary_key=True)
delimiter
np.where(np.eye(A.shape[0], dtype=bool), A, A.T + A)
delimiter
[0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 17, 0],
delimiter
window.show()
delimiter
lst[out.sum(axis=1) == 1]
delimiter
res2 = numpy.array(list(zip_longest(fillvalue=0, *a))).transpose()
delimiter
arr.reshape(-1, la)
delimiter
sys.exit(-1)
delimiter
df = pd.concat([df] * 10000).reset_index(drop=True)
delimiter
print(e.message)
delimiter
self.__dict__ = self
delimiter
editAdForm = AdForm(obj=ad)
delimiter
l = numpy.array(l, dtype=int) * 2
delimiter
self._is_owned()
delimiter
a.extend(list(range(0, 1000000)))
delimiter
obj.do_something()
delimiter
app = QtGui.QApplication([])
delimiter
process(f)
delimiter
np.linalg.det(individual.reshape(self.N, self.N)),
delimiter
title = models.CharField(max_length=128, blank=True)
delimiter
print(len(line))
delimiter
int(value)
delimiter
sns.barplot(x=data.index, y=data, palette=np.array(pal[::-1])[rank])
delimiter
np.ascontiguousarray(c)
delimiter
myFunc()
delimiter
dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
delimiter
yests = []
delimiter
MyModel.BLAH_GOO_GOO_GAA_GAA
delimiter
thread = threading.Thread(target=target)
delimiter
self._server.show()
delimiter
range_start + int(drand48() * range_size)
delimiter
text_file.write(contents)
delimiter
g.__code__ is f.__code__ is creator.__code__.co_consts[1]
delimiter
len(net.layers[1].blobs)
delimiter
plt.figure()
delimiter
current_milli_time = lambda : int(round(time.time() * 1000))
delimiter
button.grid(row=1, column=4)
delimiter
shutil.copyfileobj(source, target)
delimiter
print(arr[10])
delimiter
self.user.delete()
delimiter
datetime.datetime(2010, 5, 17, 0, 0)
delimiter
xticks = ax.xaxis.get_major_ticks()
delimiter
max(string.rfind(s) for s in findees)
delimiter
self.panel.SetFocus()
delimiter
print(list(map(tuple, list(od.values()))))
delimiter
self.features = {k: v for k, v in list(kwargs.items())}
delimiter
values = np.array([1, 1, 1, 1, 1])
delimiter
pd.DataFrame(df.values[slc], df.index[slc])
delimiter
id = Column(Integer, primary_key=True)
delimiter
self.name = name
delimiter
stdout, stderr = proc.communicate()
delimiter
df.ix[0, 0]
delimiter
dict((k, v.dropna().to_dict()) for k, v in compat.iteritems(data))
delimiter
(a > 1).all() and (a < 5).all()
delimiter
print(get_last_non_zero_index([0, 0, 0]))
delimiter
tk.Tk.__init__(self, *args, **kwargs)
delimiter
list(set(a).difference(b))[:100]
delimiter
array([[0, 2, 6], [9, 4, 8], [7, 5, 1]])
delimiter
print(s.to_string(index=False))
delimiter
print(score_sum_py(pd.factorize(df.page_id)[0], df.score))
delimiter
buffer += ser.read(1)
delimiter
f(*args, **kwargs)
delimiter
Base.prepare()
delimiter
f.write(tempfile.read())
delimiter
plt.show()
delimiter
a = TestC()
delimiter
os.rename(renamee, pre + new_extension)
delimiter
max_index = max_sub[0]
delimiter
raise ValidationError(self.errors)
delimiter
setup.py
delimiter
lst.append(x)
delimiter
[True, False]
delimiter
t.show()
delimiter
ax.set_yticks(np.arange(nba_sort.shape[0]) + 0.5, minor=False)
delimiter
f.readinto(data)
delimiter
root = Tkinter.Tk()
delimiter
[x[0] for x in groupby(L)]
delimiter
obj.__dict__
delimiter
fig = plt.figure(figsize=(1, 1), dpi=400)
delimiter
module_a.py
delimiter
topbottom = np.empty((1, 2 * im.shape[1]), dtype=np.uint16)
delimiter
fake_restaurant.delete()
delimiter
user = request.user
delimiter
mpl.rcParams.update(saved_state)
delimiter
process = subprocess.Popen(cmd, shell=True)
delimiter
self.b.pack()
delimiter
sum(map(str.islower, string))
delimiter
p.cpu_percent(interval=1)
delimiter
np.bincount(diag_idx.ravel(), weights=a.ravel())
delimiter
plt.clf()
delimiter
data = [str(round(float(fractions.Fraction(x)), 2)) for x in data]
delimiter
bokeh.io.show(p)
delimiter
my_string = my_string.translate(trans)
delimiter
d = {}
delimiter
Potion.all_potions.append(self)
delimiter
plt.subplot(122)
delimiter
sum(data) / n
delimiter
result = list(chain.from_iterable(pattern.split(w) for w in input_list))
delimiter
Py_Finalize()
delimiter
fig, ax = plt.subplots()
delimiter
np.full((10, 5), list(vals))
delimiter
[x for x in k if x in kDash]
delimiter
cv2.waitKey(0)
delimiter
temp = temp[1:]
delimiter
print(os.__file__)
delimiter
print(np.squeeze(a))
delimiter
print(s.format(*x))
delimiter
np.random.shuffle(ages)
delimiter
file.close()
delimiter
plt.ylim(0.5, 4)
delimiter
candlestick(plt.gca(), quotes)
delimiter
grid.flat[np.flatnonzero(mask)[second_mask]] = 100
delimiter
leadingzerocounts[0] += 4
delimiter
new_df = old_df[list_of_columns_names]
delimiter
data = data.astype(dt)
delimiter
rdd2 = sc.parallelize([4, 5, 6])
delimiter
oldstdout = sys.stdout
delimiter
response.url
delimiter
x = np.arange(10)
delimiter
gender = models.BooleanField(choices=BOOL_CHOICES)
delimiter
server.start()
delimiter
self.obj = obj
delimiter
int(Decimal(2))
delimiter
print((f.__name__, timeit.timeit(f, number=1000)))
delimiter
k[v.index(max(v))]
delimiter
assert datetime.datetime.now() == datetime.datetime(2012, 1, 14)
delimiter
x = [k] * len(v)
delimiter
ax = fig.add_subplot(2, 1, 1)
delimiter
f.truncate()
delimiter
msg.attach(part2)
delimiter
shutil.copyfileobj(source, target)
delimiter
time.localtime(time.time())[2]
delimiter
web.input(**my_args)
delimiter
id = db.Column(db.Integer, primary_key=True)
delimiter
html_decoded_string = parser.unescape(html_encoded_string)
delimiter
print(response.read())
delimiter
[1, 2] == sorted([2, 1])
delimiter
f(0, 1, 0)
delimiter
print(current_credentials.access_key)
delimiter
getattr(mod, class_name)
delimiter
line(res, vertices[0][0], vertices[1][0], color, 5)
delimiter
Y[X == X.max(axis=0)].reshape(X.max(axis=0).shape)
delimiter
pdb.set_trace()
delimiter
[2.29, 47.77]
delimiter
[2.01, 57.28]
delimiter
[2.61, 66.82]
delimiter
[2.49, 85.85]
delimiter
[2.55, 104.9]
delimiter
[2.65, 114.47]
delimiter
sess = tf.Session()
delimiter
QtGui.QMainWindow.__init__(self, parent)
delimiter
df = pd.read_csv(data, delim_whitespace=True)
delimiter
root.mainloop()
delimiter
rand_numbers = np.random.random(5)
delimiter
not bool
delimiter
ch.flush()
delimiter
encapsulated()
delimiter
deletemylist[:n]
delimiter
sys.stdout = capturer
delimiter
procs[-1].start()
delimiter
p.stdout.close()
delimiter
np.testing.assert_allclose(res1, res2)
delimiter
print(i, d[i])
delimiter
ax.autoscale(False)
delimiter
self.statusitem.setHighlightMode_(1)
delimiter
self.table = QtGui.QTableView(self)
delimiter
os.path.join(directory, filename)
delimiter
A = np.delete(A, 2, 1)
delimiter
os._exit(1)
delimiter
rivers = np.ma.masked_where(rivers == 0, rivers)
delimiter
event.Skip()
delimiter
self.func = func
delimiter
assert add(a, b) == a + b
delimiter
new_index = random.randrange(0, len(data))
delimiter
socketIO.wait(seconds=1)
delimiter
ssh = paramiko.SSHClient()
delimiter
ax1 = fig.add_subplot(121)
delimiter
self.client.connect(self.host, self.port)
delimiter
Py_DECREF(mylist)
delimiter
HiddenFormMixin.__init__(self, *args, **kwargs)
delimiter
self._request = urllib.request.urlopen(url)
delimiter
plt.show()
delimiter
student.courses[c.title] = form[c.title].data
delimiter
proc.kill()
delimiter
mylist.append((pair[0], pair[1]))
delimiter
print(start.date())
delimiter
r.wait()
delimiter
pd.DataFrame(a).fillna(0)
delimiter
d[key] = value / 2
delimiter
self.__dict__.update(*args, **kwargs)
delimiter
print(repr(p.value))
delimiter
min(min(p[1:]) for p in PlayerList)
delimiter
solve([sigma * (y - x), x * (rho - z) - y, x * y - beta * z], [x, y, z])
delimiter
td2 = datetime.timedelta(hours=t.hour, minutes=t.minute, seconds=t.second)
delimiter
b = [(i + 1) for i, (x, y) in enumerate(zip(s, s[1:])) if y > x + 2]
delimiter
subplot(4, 1, 4)
delimiter
f.seek(max(fsize - 1024, 0), 0)
delimiter
tile_frame.pack()
delimiter
time.sleep(0.5)
delimiter
time.sleep(1)
delimiter
print(type(img_ipl))
delimiter
x += 1
delimiter
repr(self.dictify())
delimiter
print(json.dumps(data, sort_keys=True, indent=4))
delimiter
a.seek(0)
delimiter
a = [1, 2]
delimiter
itemgetter(*wanted_keys)(my_dict)
delimiter
np.random.seed(0)
delimiter
print(map(itemgetter(1), g))
delimiter
get_key(d, 2)
delimiter
do_something_else()
delimiter
print(p.stdout.read())
delimiter
x[1:4:2, 1:4:2]
delimiter
self.show()
delimiter
st.norm.cdf(1.64)
delimiter
ax.set_xticks(np.arange(n) - 0.5)
delimiter
map(itemgetter(0), sorted(list(dct.items()), key=itemgetter(1), reverse=True))
delimiter
pprint(combine(l))
delimiter
opener = urllib.request.build_opener(urllib.request.HTTPHandler)
delimiter
s = fp.read()
delimiter
client.server_receive_file(binary_data)
delimiter
func(**args)
delimiter
result = db.engine.execute(sql)
delimiter
r.raw.read(10)
delimiter
self.items = set(items)
delimiter
L = [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2]
delimiter
definition = CharField(max_length=100)
delimiter
biglist1.sort(key=(operator.itemgetter(2), operator.itemgetter(0)))
delimiter
all(x == items[0] for x in items)
delimiter
np.where(A > 50)
delimiter
ax.cla()
delimiter
pl.show()
delimiter
s.listen(5)
delimiter
self.dialog.setFocusPolicy(QtCore.Qt.StrongFocus)
delimiter
graph = facebook.GraphAPI(ACCESS_TOKEN)
delimiter
dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
delimiter
outputStream.close()
delimiter
response = requests.get(url, stream=True)
delimiter
time.sleep(0.1)
delimiter
time.sleep(1)
delimiter
hashlib.sha1(s).hexdigest()
delimiter
biglist[:] = newlist
delimiter
c.f(2)
delimiter
plt.xticks([0.4, 0.14, 0.2, 0.2], fontsize=50)
delimiter
proc.communicate()
delimiter
treeview = gtk.TreeView()
delimiter
{i: l[sum(ind[:i - 1]):sum(ind[:i - 1]) + i] for i in ind}
delimiter
c.bin
delimiter
[tag for tag in BeautifulSoup(doc, parseOnlyThese=links)]
delimiter
self.typename = typename
delimiter
assert not s.cookies
delimiter
time.sleep(0.05)
delimiter
print(url)
delimiter
loop2()
delimiter
fig.colorbar(surf, shrink=0.5, aspect=5)
delimiter
plt.imshow(np.dstack([im, im, im]))
delimiter
sys.stdout.flush()
delimiter
new_extpost.save()
delimiter
self.__dict__[key] = value
delimiter
Lv = np.array(Lv)
delimiter
fig = pyplot.figure()
delimiter
a.tostring()
delimiter
self.i = 1
delimiter
L.sort(key=lambda x: map(lower_if_possible, x))
delimiter
time.sleep(5)
delimiter
turtle.getscreen()._root.mainloop()
delimiter
wdiplay(img)
delimiter
your_dict[x]
delimiter
goodrows.append(row)
delimiter
int(time.mktime(d.timetuple())) * 1000
delimiter
parser.add_option_group(group)
delimiter
uniq.view(data.dtype).reshape(-1, data.shape[1])
delimiter
sys.exit(0)
delimiter
self.get_full_name()
delimiter
logger = logging.getLogger(__name__)
delimiter
some_module.classinstance = MyClass()
delimiter
run()
delimiter
self.client.disconnect()
delimiter
self._x = value
delimiter
int_list = [int(i) for i in line.split()]
delimiter
print(filecmp(sys.argv[1], sys.argv[2]))
delimiter
self.particles.extend(next(f))
delimiter
str(lst[0]), lst[1:]
delimiter
auth.set_access_token(access_token, access_secret)
delimiter
t.ix[0], t.ix[1] = t.ix[1], t.ix[0]
delimiter
cj = cookielib.LWPCookieJar()
delimiter
log(msg, x=5, y=6)
delimiter
d[k] = v
delimiter
tfidf[0:1]
delimiter
ax4.xaxis.set_visible(False)
delimiter
logging.basicConfig(level=log_level)
delimiter
[np.mean(model.trace(t).gettrace()) for t in timesteps]
delimiter
list[i] += 2
delimiter
show_log_button.Bind(wx.EVT_BUTTON, self._show_log)
delimiter
conn.close()
delimiter
plt.yticks(x, x)
delimiter
xs = np.arange(512)
delimiter
inner_lst.append(item)
delimiter
app = web.application(urls, globals())
delimiter
dc.DrawBitmap(self.bmp, 0, 0, True)
delimiter
print(line_intersection((A, B), (C, D)))
delimiter
dill.dumps(lambdified_expr)
delimiter
print([(val + [i]) for i, val in enumerate(A, 1)])
delimiter
INTP = ctypes.POINTER(ctypes.c_int)
delimiter
clf.fit(X[outer_train], Z[outer_train])
delimiter
listy[2].append(1)
delimiter
ifaces
delimiter
root = Tk()
delimiter
doSomething(x)
delimiter
data = f.read()
delimiter
out.writelines(lines)
delimiter
self._thread.close()
delimiter
timestamp1 = calendar.timegm(d.timetuple())
delimiter
driver = webdriver.Firefox(firefox_profile=profile)
delimiter
sys.path.insert(0, basePath)
delimiter
listNew.extend([element, element])
delimiter
list(set(neighbors))
delimiter
newarr = [splitfirst(a) for a in arr]
delimiter
f2 = np.exp(-copper[:, (1)] * 0.08128 * 8.96)
delimiter
self.filter(is_vegetarian=True)
delimiter
L = [([0] * 10) for i in range(10)]
delimiter
student.save()
delimiter
autorestart = true
delimiter
client = paramiko.SSHClient()
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
np.piecewise(x, conds, funcs)
delimiter
plt.figure(2)
delimiter
print(pop_list(nodes, 5, node_list))
delimiter
sorted(list(s2))
delimiter
print(list(d.values()))
delimiter
raise UnwindStack(lambda : _addup(n))
delimiter
os.stat(path)
delimiter
self.response.write(template.render())
delimiter
df[df.columns[5:][ridx]]
delimiter
os.rename(oldname, newname)
delimiter
tree = et.fromstring(sxml)
delimiter
data = [(1, 2), (40, 2), (9, 80)]
delimiter
cv2.circle(mask, (100, 70), 25, 0, -1)
delimiter
writer = csv.writer(fout)
delimiter
correct_prediction = tf.equal(tf.round(tf.nn.sigmoid(pred)), tf.round(y_))
delimiter
f.close()
delimiter
sum(zip(a, a[::-1]), ())[:len(a)]
delimiter
raise MyCustomException(str(e))
delimiter
time.sleep(10)
delimiter
aDict[key] = value
delimiter
list(map(func, itertools.zip_longest(*sequences)))
delimiter
print(b.shape)
delimiter
newList.append((oldList[i + 1][0], oldList[i][1]))
delimiter
self.table.setModel(model)
delimiter
[x.count for x in list(a.keys())]
delimiter
connection = pika.BlockingConnection()
delimiter
[(x * 2) for x in L]
delimiter
hex(chars[0])
delimiter
np.abs(a - b) <= atol + rtol * np.abs(b)
delimiter
logger.setLevel(logging.DEBUG)
delimiter
time.sleep(1)
delimiter
fig = plt.figure()
delimiter
l.save()
delimiter
u1 = (random.uniform(0, phi1) for _ in range(len(part)))
delimiter
itertools.chain(do_something(), do_something_else())
delimiter
mlab.show()
delimiter
canvas.PrepareDC(dc)
delimiter
form.save()
delimiter
self.allClasses.append(instance)
delimiter
p.stdin.close()
delimiter
data = sys.stdin.readlines()
delimiter
v[value].append(key)
delimiter
platform.release()
delimiter
data = infile.read()
delimiter
list[idx] = item
delimiter
assert isinstance(evaled_value, dict)
delimiter
[0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 40, 0],
delimiter
sum(map(operator.mul, topo[:-1], topo[1:]))
delimiter
os.remove(small)
delimiter
mask = (data_with_zeros.a == 0) & (data_with_zeros.b == 0)
delimiter
ids = list(itertools.islice(unique_sequence, 1000))
delimiter
self.orange_button.Bind(wx.EVT_BUTTON, self.orange_button_click)
delimiter
notNan = sliding_window(np.logical_not(np.isnan(a)), (2, 2))
delimiter
soup = BeautifulSoup(html_to_parse)
delimiter
plot_graph1()
delimiter
lst[-1] += st[:left]
delimiter
dstname = os.path.join(dst, name)
delimiter
line = p.stdout.readline()
delimiter
print(mystring[0])
delimiter
myVariable = testVariable or myVariable
delimiter
db = SQLAlchemy(app)
delimiter
n * s + m * s == (n + m) * s
delimiter
new_cols = list(zip(df1.columns.get_level_values(0)))
delimiter
id(a[0]), id(a[1])
delimiter
set(sample_generator(10000)) ^ set(range(10000))
delimiter
np.array(map(lambda x: round(x) - 1, result), dtype=np.uint64)
delimiter
result = [[(a * b) for a, b in zip(i, j)] for i, j in zip(list1, list2)]
delimiter
self.numbers.append(self)
delimiter
thrd2.start()
delimiter
nx.draw(G)
delimiter
zip_ref.close()
delimiter
result = base64.b64decode(body)
delimiter
expense.tags.add(*self.tags.all())
delimiter
len(l)
delimiter
sys.stdin.readline()
delimiter
a, b = result
delimiter
scipy.__version__
delimiter
dict((k.lower(), lower_keys(v)) for k, v in x.items())
delimiter
df.where(m, n, axis=1)
delimiter
a = np.arange(1, 100000.0, dtype=float)
delimiter
fig = plt.figure(figsize=plt.figaspect(1))
delimiter
im2.set_data([], [])
delimiter
new_list.append(x + y)
delimiter
G.add_edges_from([(x, y) for x in L1 for y in L2])
delimiter
os.makedirs(tmp)
delimiter
f()
delimiter
win.show_all()
delimiter
df = df[cols]
delimiter
fig, ax = plt.subplots()
delimiter
ax.plot(list(range(1024)))
delimiter
soda = a + b
delimiter
t.start()
delimiter
pprint(data)
delimiter
soup = BeautifulSoup(text)
delimiter
fh.close()
delimiter
response.close()
delimiter
lst[i:i + 2] = [nxt, cur]
delimiter
k = [(ord(x.upper()) - 64) for x in l]
delimiter
outfile.write(line)
delimiter
key = models.CharField(max_length=240, db_index=True)
delimiter
im = np.array(first_subreg * 255, dtype=np.uint8)
delimiter
usleep(100)
delimiter
(y != y.shift()).cumsum()
delimiter
list(int_filter(items))
delimiter
ax1.set_ylim(*np.log10(olim))
delimiter
img.show()
delimiter
csv_f = csv.reader(f)
delimiter
PLT.axis([x.min(), x.max(), y.min(), y.max()])
delimiter
t.seek(0)
delimiter
self.frame.Show(True)
delimiter
menu.show_all()
delimiter
a + b[i:]
delimiter
self.image = ImageTk.PhotoImage(self.photo)
delimiter
new_list.append(intermediate_dict[i])
delimiter
count = len(total) - np.count_nonzero(sum)
delimiter
os.remove(filename4)
delimiter
lengths = [len(x) for x in lst]
delimiter
f.seek(0)
delimiter
shutil.rmtree(tmpdir)
delimiter
dist = np.abs(X[:, (np.newaxis)] - Y)
delimiter
print([int(x) for x in a[1:]])
delimiter
data = cgi.FieldStorage()
delimiter
results = cursor.fetchone()
delimiter
d = datetime.date(year=1940, month=1, day=1).year
delimiter
a2b_hex()
delimiter
self.assertAlmostEqual(em(1, 1), 0.6765, 4)
delimiter
x = df.reset_index()
delimiter
foo[1:2]
delimiter
print(tokenize.untokenize([(toktype, tokval)]))
delimiter
axes.set_xticks([])
delimiter
show()
delimiter
bob4.save()
delimiter
bob5.save()
delimiter
bob6.save()
delimiter
{{(object | getattribute): field}}
delimiter
words = line.split()
delimiter
p.start()
delimiter
plt.subplot(2, 1, 1)
delimiter
c.save()
delimiter
A = array([[0, 1, 2], [0, 2, 0]])
delimiter
ax0a.plot(x, y)
delimiter
{{record.c}}, {{record.e}}
delimiter
s = random.randint(0, n - 1) + 1
delimiter
get()
delimiter
decorated.sort(key=lambda v: (v[1], -v[2]))
delimiter
s.order()
delimiter
X_train = np.random.randn(6, 2, 2)
delimiter
x = np.cumsum(np.random.random(1000) - 0.5)
delimiter
dict((k, vs[x]) for k, vs in self.O.items())
delimiter
pool = Pool()
delimiter
readfile.close()
delimiter
nzsum = mat[ixs[nzmask]].sum(axis=0)
delimiter
self.gzfile = gzip.open(filename)
delimiter
datetime.strptime(time1, format)
delimiter
ax.autoscale_view()
delimiter
parser.close()
delimiter
f.close()
delimiter
df[col] = X[:, (i)]
delimiter
scipy.stats.norm(0, 1)
delimiter
psycopg2.extensions.register_type(psycopg2.extensions.UNICODEARRAY)
delimiter
print(x[:n])
delimiter
instance = getattr(modul, class_name)()
delimiter
[1, 20] in a.tolist()
delimiter
lst.append(arg)
delimiter
np.random.seed(1977)
delimiter
cur.execute(query)
delimiter
ans.append(list(cur_set))
delimiter
msg.attach(body)
delimiter
[[[2, 4, 6], [1, 4, 7]]]
delimiter
unique_list = list(map(itemgetter(0), groupby(yourList)))
delimiter
cursor.execute(query, data)
delimiter
out.reshape(np.asarray(shp) * N)
delimiter
screen.fill(pygame.Color(255, 255, 255))
delimiter
type(_)
delimiter
[2.0, 2.0017]
delimiter
self.view.setModel(self.model)
delimiter
out_queue.put(test)
delimiter
root.columnconfigure(0, weight=1)
delimiter
dff.dropna(thresh=len(dff) - 2, axis=1)
delimiter
set(a).intersection(b)
delimiter
pd.Series(a1).isin(a2).any()
delimiter
output.write(line)
delimiter
raise Exception()
delimiter
pp(list(zip(*grid)))
delimiter
days = (start + timedelta(days=i) for i in range((end - start).days + 1))
delimiter
time.sleep(10)
delimiter
value.update((key, 0) for key in all_second_keys if key not in value)
delimiter
self.text = tk.Text(self)
delimiter
indices[i] += 1
delimiter
ax2.imshow(field2, cmap=plt.cm.YlGn, vmin=_min, vmax=_max)
delimiter
sys.settrace(self.oldtrace)
delimiter
my_struct = np.array([(1, 2)], dtype=my_struct_type)
delimiter
ax.set_ylim([-0.1, 1.1])
delimiter
allnames().visit(t)
delimiter
{b.pop(0): b.pop(0) for _ in range(1)}
delimiter
string[:idx if idx != -1 else len(string)]
delimiter
pylab.show()
delimiter
stopButton.pack()
delimiter
output.setparams(data[0][0])
delimiter
df
delimiter
fig, ax = plt.subplots()
delimiter
[sum(x) for x in zip(*myTuples)]
delimiter
YarnLogger.setup_logger()
delimiter
plt.plot(X, Y, lw=0)
delimiter
print(a, b, c, d)
delimiter
s.listen(1)
delimiter
np.column_stack((unq_x, avg_y, std_y))
delimiter
df.iloc[df.index.get_loc(window_stop_row.name)]
delimiter
c = np.ones((2, 6))
delimiter
sorted(set(a))[-2]
delimiter
list(range(5)) + list(range(10, 20))
delimiter
contourf(x, y, H1, levels1, cmap=cmap_nonlin1)
delimiter
new_dict_deepcopy = deepcopy(my_dict)
delimiter
grad * C * tf.transpose(Ainv)
delimiter
plt.colorbar()
delimiter
print(x)
delimiter
resp = requests.get(url=url, params=params)
delimiter
results = pbex.run()
delimiter
df = pd.concat(valid(chunks))
delimiter
model = models.Progress
delimiter
1.0 * sum(i * w[i] for i in xx & yy) / sum(i * w[i] for i in x)
delimiter
od.setdefault(a, []).append(b)
delimiter
urlParams = urlparse.parse_qs(urlparse.urlparse(url).query)
delimiter
object() == object()
delimiter
cv2.imwrite(face_file_name, sub_face)
delimiter
ip_list = []
delimiter
x + 2
delimiter
array = [LoL[i][j] for i, j in product(list(range(*r)), list(range(*s)))]
delimiter
datalisten_thread.start()
delimiter
abs((d2 - d1).days)
delimiter
os.makedirs(dir)
delimiter
self._value
delimiter
tk.Tk.__init__(self)
delimiter
patch_jedi()
delimiter
source._get_numeric_data()
delimiter
list(map(lambda x: False if x == 0 or x == 1 else True, map(int, lst)))
delimiter
s = socket.socket()
delimiter
b = [(ctr[frozenset(x)] == 1) for x in a]
delimiter
dt.fit(df.ix[:, :2], df.dv)
delimiter
x.g(2)
delimiter
B[:, :, (1)] = 1
delimiter
{file: any(file.endswith(ext) for ext in extensions) for file in files}
delimiter
token.get_access_token(uri.query)
delimiter
plt.suptitle(date)
delimiter
raise_exception()
delimiter
pool = multiprocessing.Pool(processes=count)
delimiter
print(dict(d))
delimiter
plt.cm.RdYlGn._segmentdata
delimiter
out = np.split(sidx, np.nonzero(sorted_ids[1:] > sorted_ids[:-1])[0] + 1)
delimiter
myseries_one.iloc[0:2]
delimiter
fig = plt.figure()
delimiter
delta = datetime.timedelta(days=1)
delimiter
yaml.dump(data, stream, OrderedDumper, **kwds)
delimiter
list(range(*args))
delimiter
resp = client.service.Execute(req)
delimiter
wav_file.close()
delimiter
p.communicate()
delimiter
mask = mahotas.dilate(mask, np.ones((48, 24)))
delimiter
abs_file_path = os.path.join(script_dir, rel_path)
delimiter
sleep(1)
delimiter
hmag = np.array(hmag)
delimiter
python - v
delimiter
os.remove(path)
delimiter
sys.path.remove(rundir)
delimiter
conn.sendall(error)
delimiter
df1.fillna(1).sort(axis=1).eq(df2.fillna(1).sort(axis=1)).all().all()
delimiter
fig.colorbar(coll)
delimiter
[snip]
delimiter
print(x[y][i][z])
delimiter
n.getme()
delimiter
fastest = ranked[0][1]
delimiter
uo_fclose(hFile)
delimiter
x = [6, 7, 8, 9, 10, 11, 12]
delimiter
float(n) / (1 << int(log(n, 2)))
delimiter
pylab.ylim(ymin=0)
delimiter
time.sleep(1.0)
delimiter
x = np.array([0, 0, 1, 1, 2, 2])
delimiter
print(settings.myList[0])
delimiter
tk.Tk.__init__(self)
delimiter
f()
delimiter
ax2.set_ylim([np.amin(image[:, (5), (5)]), np.amax(image[:, (5), (5)])])
delimiter
plt.imshow(skel)
delimiter
len(get_file_contents(filename))
delimiter
True
delimiter
list(chain(*zip(l, map(partial(add, 1), l))))
delimiter
data.__dict__.update(json.parse(data))
delimiter
cursor.close()
delimiter
f(a, b)
delimiter
G.add_path([2, 4, 0, 5])
delimiter
attr(*args, **kwargs)
delimiter
reactor.do(thing2)
delimiter
new_data = new_data.reshape((4, 5, 10))
delimiter
test()
delimiter
msg.send()
delimiter
ax.set_xticklabels(lab)
delimiter
series = series.astype(float)
delimiter
print(X[0], Y[0], calc_fast(X[0], Y[0]))
delimiter
self.transitions = transitions
delimiter
tornado.ioloop.IOLoop.instance().add_callback(self.loop)
delimiter
sys.stdout.flush()
delimiter
l[0], l[-1]
delimiter
fig.autofmt_xdate()
delimiter
ax = plt.gca()
delimiter
buildings = get_hospital_buildings(hospital_obj)
delimiter
finished = cv2.warpPerspective(img, transform, img.shape[1::-1])
delimiter
df.iloc[:, 1:].idxmax(axis=1)
delimiter
fig, ax = plt.subplots()
delimiter
str_list = list(filter(len, str_list))
delimiter
print(objfunc([1.0, 0.0]))
delimiter
df = pd.DataFrame(data=d)
delimiter
bool({}) == False
delimiter
a, b = b, a + b
delimiter
raise unittest.SkipTest(message)
delimiter
platform.python_compiler()
delimiter
ax4 = fig.add_subplot(2, 2, 4)
delimiter
numpy.linalg.norm(a - b)
delimiter
print((len(al), al.get_alignment_length()))
delimiter
getattr(obj, self.name)
delimiter
main()
delimiter
zip(list(range(len(l) - 1, -1, -1)), l)
delimiter
f(*args, **kwargs)
delimiter
print(ruamel.yaml.dump(data, allow_unicode=True))
delimiter
sleep(1)
delimiter
aList.append([xc, yc])
delimiter
True
delimiter
plt.plot(t, f(t))
delimiter
output = PdfFileWriter()
delimiter
r = random.sample(list(range(len(x))), 10)
delimiter
X_train_1 = X_train[y_train != 0]
delimiter
msg.attach(image)
delimiter
self._list.append(o)
delimiter
sys.stdout.flush()
delimiter
sherr.pop(0)
delimiter
_api_client.ExecuteBatch(batch_request, cells.GetBatchLink().href)
delimiter
step4.communicate()[0]
delimiter
{GOOGLE_APP_ENGINE} / dev_appserver.py
delimiter
print(is_true(x) or is_false(x))
delimiter
session = Session(key=seshKey)
delimiter
result = [dict(zip(fields, row)) for row in cursor.fetchall()]
delimiter
[f(x, fixed) for x in srclist]
delimiter
print(link.text)
delimiter
df.columns
delimiter
fig = plt.figure()
delimiter
[(x + Ly[i]) for i, x in enumerate(Lx)]
delimiter
stuff()
delimiter
n = n + 1
delimiter
pInt = POINTER(c_int)()
delimiter
atexit.register(__terminate)
delimiter
self.browserHandle = webdriver.Firefox(firefoxProfile)
delimiter
pylab.show()
delimiter
sys.exit(not result.wasSuccessful())
delimiter
binascii.unhexlify(x)
delimiter
image_pixels = image.load()
delimiter
id = Column(Integer, primary_key=True)
delimiter
nodes.CallBlock(call, [], [], [])
delimiter
resultcode = proc.wait()
delimiter
output.append(char)
delimiter
df.sample(frac=1)
delimiter
x1 = np.linspace(0, 0.4, 100)
delimiter
shutil.copyfile(source, destination)
delimiter
word in wordList
delimiter
fig = plt.figure()
delimiter
self.ax.relim()
delimiter
y[0]
delimiter
elem.clear()
delimiter
app.exec_()
delimiter
d = a[1::2]
delimiter
df1 = pd.DataFrame([dict(x) for x in df.word_prob_pair])
delimiter
app.register_blueprint(feed)
delimiter
print(type(element))
delimiter
s.loc[~np.isfinite(s) & s.notnull()] = np.nan
delimiter
myFunc(False, False, True)
delimiter
assert diff_month(datetime(2010, 10, 1), datetime(2009, 10, 1)) == 12
delimiter
canvas.setPageSize(width, height)
delimiter
chimpchat.shutdown()
delimiter
ssh_client = paramiko.SSHClient()
delimiter
print((i, key, value))
delimiter
session.flush()
delimiter
app = Flask(__name__)
delimiter
{k: v for d in dicts for k, v in list(d.items())}
delimiter
layout = QtGui.QVBoxLayout()
delimiter
fun(ctypes.byref(indata), 5, 6, ctypes.byref(outdata))
delimiter
self.picture = QtGui.QPixmap(imagePath)
delimiter
s = pd.Series(np.arange(4) ** 2, index=np.arange(4))
delimiter
tree = Tree()
delimiter
fig, axes = plt.subplots(nrows=4, ncols=4)
delimiter
list(itertools.accumulate(nums))
delimiter
data.append([c.text for c in row.getchildren()])
delimiter
child.show()
delimiter
print(calendar.timegm(utc_dt.timetuple()))
delimiter
self.panel = wx.Panel(self, wx.ID_ANY)
delimiter
user = models.OneToOneField(User)
delimiter
first_list.append(ls[0])
delimiter
app = Flask(__name__)
delimiter
print([myround(x) for x in list_num])
delimiter
pool.join()
delimiter
scipy.nanmean(b_padded.reshape(-1, R), axis=1)
delimiter
text = in_file.read()
delimiter
cnxn.close()
delimiter
print(Bar().x)
delimiter
classifier.fit(X_train, y_train)
delimiter
new_list = []
delimiter
type(dates[0]) == pandas.tslib.Timestamp
delimiter
df = df.append(new_rows).sort_index().reset_index(drop=True)
delimiter
window.show()
delimiter
a = Counter(your_list)
delimiter
axs[0].xaxis.set_major_locator(x_major_lct)
delimiter
line(src, Q4, Q1, Scalar(0, 0, 255), 1, CV_AA, 0)
delimiter
wn.synsets(word)
delimiter
reader = csv.DictReader(fh, fieldnames=header)
delimiter
bar()
delimiter
os.symlink(target, link_name)
delimiter
queryset = Simple.objects.all()
delimiter
fig = plt.figure(figsize=(10, 10))
delimiter
print(sys.path)
delimiter
self.data = numpy.delete(self.data, i, 0)
delimiter
Process(target=loop_b).start()
delimiter
np.testing.assert_allclose([1], [[1]])
delimiter
data += np.random.normal(size=data.shape)
delimiter
call_quack()
delimiter
a = np.frombuffer(ArrayType.from_address(addr))
delimiter
df = df.dropna()
delimiter
browswer_proc = subprocess.Popen(cmd, shell=True)
delimiter
dist = np.sqrt(dist)
delimiter
np.median([0, 1, np.inf])
delimiter
vdisplay.start()
delimiter
myqserver.delete_current()
delimiter
frame = cv2.flip(frame, 0)
delimiter
leng(s)
delimiter
multiprocessing.freeze_support()
delimiter
[i - 1, i + 1]
delimiter
G = nx.Graph()
delimiter
plt.register_cmap(cmap=newcmap)
delimiter
b = fig2.add_subplot(2, 2, i)
delimiter
int_list = models.CommaSeparatedIntegerField(max_length=200)
delimiter
Py_DECREF(newobj)
delimiter
sum(100.0 * (x[1:] - x[:-1] ** 2.0) ** 2.0 + (1 - x[:-1]) ** 2.0)
delimiter
tornado.ioloop.IOLoop.instance().start()
delimiter
parser = argparse.ArgumentParser()
delimiter
plt.plot(x, y)
delimiter
print(df)
delimiter
output_notebook()
delimiter
models.IntegerField.__init__(self, verbose_name, name, **kwargs)
delimiter
print(tab[i])
delimiter
permutations(string_copy, step + 1)
delimiter
self.delta = wx.Point(0, 0)
delimiter
Matrix.map(lambda a, b, **kw: a - b, self, other)
delimiter
app.config.from_pyfile(config, silent=True)
delimiter
self.username
delimiter
np.triu(out)
delimiter
os.makedirs(dir)
delimiter
draw = ImageDraw.Draw(image)
delimiter
glLoadIdentity()
delimiter
1 / 2
delimiter
ax2 = ax1.twinx()
delimiter
result[i] = func1d(x)
delimiter
df = pd.Dataframe(dict)
delimiter
self.mthread = QThread()
delimiter
self.get(timeout=1000)
delimiter
cursor.execute(sql, [this_year])
delimiter
reactor.run()
delimiter
time.sleep(1)
delimiter
fig = plt.figure()
delimiter
max(lo, min(hi, x))
delimiter
list(grpname.values())
delimiter
foo()
delimiter
self.file.close()
delimiter
allkey.append(key)
delimiter
l.append(hash((x, y)))
delimiter
hash(self.a) ^ hash(self.b)
delimiter
print(myForm.__dict__)
delimiter
fig.canvas.blit(ax.bbox)
delimiter
other_data = data[mask]
delimiter
cls.static_method_to_call()
delimiter
wb.Save()
delimiter
temp = [(t.count(str(i)) / len(x)) for i in range(1, 5)]
delimiter
df = pd.DataFrame(np.random.randn(10, 6))
delimiter
app.register_blueprint(mod)
delimiter
html_content = urllib.request.urlopen(req).read()
delimiter
response
delimiter
fig, ax1 = plt.subplots()
delimiter
a = np.random.rand(size, size)
delimiter
d += timedelta(weeks=4)
delimiter
isinstance(True, int)
delimiter
root.mainloop()
delimiter
array(ranked)
delimiter
transport.accept()
delimiter
print(df1.head())
delimiter
df[1][df[1] == 4]
delimiter
ax.plot(data1)
delimiter
any(x in sb for x in a)
delimiter
self._lock.__enter__()
delimiter
f()
delimiter
plt.xlim((0, AUC.shape[1]))
delimiter
ax2.set_xticks(numpy.arange(x1 - 1, x2 + 1, 0.5))
delimiter
deleted[id]
delimiter
df = pd.DataFrame(dict(A=np.arange(70)), tidx)
delimiter
ax = plt.axes(xlim=(0, 2), ylim=(-2, 2))
delimiter
smtp.starttls()
delimiter
lexobj
delimiter
r = requests.post(url, files=files)
delimiter
do_something()
delimiter
foo()
delimiter
t.render(form=MyForm())
delimiter
l.append(element)
delimiter
ax.set_axis_off()
delimiter
the_string = input()
delimiter
register = models.DateField(auto_now_add=True)
delimiter
squared = lambda li: map(lambda x: x * x, li)
delimiter
diff = [(v[0] - v[1]) for v in zip(a[0:-1], a[1:])]
delimiter
m.group(2)
delimiter
test(100, 500, 11)
delimiter
df.describe()
delimiter
worker.work()
delimiter
p.start()
delimiter
parser.parse_args()
delimiter
f(*args, **kwargs)
delimiter
sys.exit(1)
delimiter
platform()
delimiter
f.close()
delimiter
NULL
delimiter
pool.join()
delimiter
c.showPage()
delimiter
sheet1.cell(row=row, column=col).value = sheet.cell_value(row, col)
delimiter
a.transpose(0, 2, 1)
delimiter
self.driver.get(response.url)
delimiter
print(indent(text, 4))
delimiter
avg = avg.replace(microsecond=0)
delimiter
os.remove(fl)
delimiter
self.axes.clear()
delimiter
l = literal_eval(s)
delimiter
[1, 1, 0, 0]
delimiter
np.hstack(np.where(a == a.max()))
delimiter
time.sleep(1)
delimiter
worksheet1.set_column(1, 1, 25)
delimiter
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
delimiter
a.bar
delimiter
data = np.fromfile(file, dtype=dt)
delimiter
list(league.items())[0]
delimiter
raise SystemExit(0)
delimiter
QtCore.QAbstractTableModel.__init__(self, parent)
delimiter
str(bar)
delimiter
time.sleep(0.1)
delimiter
logging.Formatter.converter = time.localtime
delimiter
print(firstLine[0], firstline[1], sum(int(x[2]) for x in lines))
delimiter
print([dict(zip(reader[0], x)) for x in reader])
delimiter
self.lock.release()
delimiter
df.ix[dates]
delimiter
form.populate_obj(student_courses)
delimiter
plt.show()
delimiter
result.append(line.upper())
delimiter
y = np.zeros((yt, xt))
delimiter
x = np.random.random((100, 100, 100))
delimiter
np.array([[array2 for _ in row] for row in array1.tolist()])
delimiter
targetFile.write(contents)
delimiter
time.sleep(5)
delimiter
fib(n - 2) + fib(n - 1)
delimiter
plt.subplot(212)
delimiter
bool(6)
delimiter
plt.clabel(CS, inline=1, fontsize=10, manual=manual_locations)
delimiter
max_idx, max_val = max(enumerate(l), key=operator.itemgetter(1))
delimiter
plt.show()
delimiter
float_in[0:16] = list(arr_in[0:16])
delimiter
plt.show()
delimiter
b[-1]
delimiter
mp.scatter(xvals[i], yvals[i], s=rvals[i])
delimiter
plt.xlim(xmin, xmax)
delimiter
writer.writerow(row)
delimiter
s.indices(0)
delimiter
__init__.py
delimiter
print((i, el))
delimiter
self.run()
delimiter
dosomething()
delimiter
d = defaultdict(list)
delimiter
HttpResponseRedirect(redirect_to)
delimiter
barycoords = barycoords[:, (np.all(barycoords >= 0, axis=0))]
delimiter
f.__qualname__
delimiter
stats.f_oneway(a, b)
delimiter
root.mainloop()
delimiter
op.outputs[0] * tf.transpose(tf.matrix_inverse(op.inputs[0]))
delimiter
mail.quit()
delimiter
print(d[p])
delimiter
a.set_xticklabels([])
delimiter
self.e.pack()
delimiter
screen.keypad(1)
delimiter
cv2.drawContours(imgBWcopy, contours, idx, (0, 0, 0), -1)
delimiter
db.close()
delimiter
f(v, w)
delimiter
friendlies = []
delimiter
driver.maximize_window()
delimiter
plt.show()
delimiter
groups[tuple(row[c] for c in key_columns)].append(i)
delimiter
dbx.files_upload(f.read(), file_to)
delimiter
print((repr(group[0]), len(group)))
delimiter
df.columns[pd.isnull(df).sum() > 0].tolist()
delimiter
foo()
delimiter
dict_writer.writeheader()
delimiter
r = tk.Tk()
delimiter
sys.exit(app.exec_())
delimiter
pl.hist(h, normed=True)
delimiter
np.cumsum(cols, out=cols)
delimiter
numpy.zeros(height, width)
delimiter
listb = [x for x in listb if x[2] != 0]
delimiter
any(c.isdigit() for c in value)
delimiter
logger = logging.getLogger(__name__)
delimiter
pygame.display.update()
delimiter
print(MyClass.bar)
delimiter
os.makedirs(mydir)
delimiter
(p0[0] - p1[0]) ** 2 + (p0[1] - p1[1]) ** 2
delimiter
newData.append((255, 255, 255, 0))
delimiter
1, 1, 1
delimiter
link_model = models.ForeignKey(settings.LINK_MODEL)
delimiter
new_list.append(obj)
delimiter
print(repr(tokzr_WORD(inp1)))
delimiter
links.append((url, rule.endpoint))
delimiter
print(delta.days)
delimiter
(x for x in data if func(x))
delimiter
name = models.CharField(max_length=50)
delimiter
sample_object.save()
delimiter
lines = random.sample(all_lines, 40)
delimiter
[(2 ** i) for i in range(n)]
delimiter
result = client.service.methodName(Inputs)
delimiter
True
delimiter
print(df)
delimiter
ax.set_ylim(50, 0)
delimiter
os.path.walk(your_dir, print_it, 0)
delimiter
y = np.zeros(data.shape[1:], data.dtype)
delimiter
b = np.array([1, 1])
delimiter
unmanhattan_patch = descartes.PolygonPatch(unmanhattan)
delimiter
plt.show(block=True)
delimiter
ax2.set_xbound(ax1.get_xbound())
delimiter
ax2 = plt.subplot2grid((6, 1), (1, 0))
delimiter
pool.close()
delimiter
np.argwhere(np.diff(bool_array)).squeeze()
delimiter
urllib.request.install_opener(opener)
delimiter
setup(ext_modules=[module])
delimiter
numpy.roots([2, -6])
delimiter
atexit.register(interrupt)
delimiter
b = np.in1d(np.arange(n), np.random.randint(0, n, n))
delimiter
plt.plot(t, y[0])
delimiter
sns.set(font_scale=5)
delimiter
response.iter_lines(chunk_size=1)
delimiter
time.sleep(self.interval)
delimiter
a.shape
delimiter
print(app_info.get_name(), app_info.get_executable(), app_info.get_icon())
delimiter
sys.exit(11)
delimiter
d[sku] = price[0]
delimiter
redirect(rp[:-1])
delimiter
(x + y) % 12
delimiter
dynmodule.load(module_code)
delimiter
[r.pop(1) for r in L]
delimiter
next(i for i, d in enumerate(lod) if 1 in d)
delimiter
fig, ax = plt.subplots()
delimiter
plt.figure()
delimiter
{e for l in lst for e in l}
delimiter
ax.imshow(gray_data, cmap=cm.gray)
delimiter
self._foo
delimiter
unq_idx = np.split(sort_idx, np.cumsum(unq_count[:-1]))
delimiter
attrs.update({(1): 1})
delimiter
[k for item in map(lambda x: [g(x) for g in listFunc], ListArg) for k in item]
delimiter
b2.pack()
delimiter
help(property)
delimiter
print(os.getcwd())
delimiter
(s - np.mean(s)) / np.std(s)
delimiter
already_inserted = all(bitfield[i] for i in indexes)
delimiter
m.drawcoastlines()
delimiter
[(a, b) for a in res for b in B if a.search(b)]
delimiter
dis.dis(method2)
delimiter
user = models.ForeignKey(User)
delimiter
sub_df.columns = list(range(12))
delimiter
-(x + a) + b / (1 + np.exp(-(x + c)))
delimiter
writer.writerow(headers)
delimiter
isinstance(object, type)
delimiter
s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
delimiter
A[~np.isnan(A)]
delimiter
Py_Initialize()
delimiter
gtk.Entry.do_key_press_event(self, event)
delimiter
fd.close()
delimiter
second_largest([1, 1, 1, 1, 1, 2])
delimiter
s.plot(ax=ax)
delimiter
app = QApplication(sys.argv)
delimiter
self.setGeometry(800, 400, 250, 80)
delimiter
(t for t in tuples if all(f(t) for f in filters))
delimiter
ax2 = plt.subplot(gs[1])
delimiter
main()
delimiter
df.stack().idxmax()
delimiter
b[:, (0), (0)] = t
delimiter
print(pd.DataFrame(com.convert_robj(r_DF)))
delimiter
df.C = a
delimiter
out[mask] = B[:, ::-1][mask[:, ::-1]]
delimiter
main()
delimiter
df.mask(outliers_low, down_quantiles, axis=1)
delimiter
obj.__class__.__dict__[2]
delimiter
r = requests.get(url, cookies=cookies)
delimiter
[NOSE_XUNIT_FILE]
delimiter
np.isnan(a[2])
delimiter
d1 + timedelta(days=-1)
delimiter
NULL
delimiter
s.update(list(fus_s.keys()))
delimiter
newList = list(convert(oldList))
delimiter
l1.append([x[1] for x in zip(pattern, facs) if x[0]])
delimiter
jobs.apply_async()
delimiter
11
delimiter
self.edit1 = QLineEdit()
delimiter
date(year, month, day)
delimiter
testFunc()
delimiter
monkey.patch_all()
delimiter
data = {k.strip(): [fitem(v)] for k, v in list(reader.next().items())}
delimiter
m = np.ones(len(a), dtype=bool)
delimiter
ax = plt.gca()
delimiter
out_queue = mp.Queue()
delimiter
pygame.init()
delimiter
objects.sort(key=getScore)
delimiter
observer.start()
delimiter
start_urls = [url.strip() for url in f.readlines()]
delimiter
print(cell.text_content())
delimiter
app.debug = True
delimiter
sorted(student_tuples, key=student_key)
delimiter
self.panel.SetBackgroundColour(wx.Colour(250, 250, 250))
delimiter
log = logging.getLogger()
delimiter
auth.load_session()
delimiter
np.matlib.identity(n)
delimiter
df
delimiter
s.iloc[s.first_valid_index():]
delimiter
VAR1
delimiter
byrempcs = sorted(promotion_items, key=bypcs)
delimiter
quicksort(array, i + 1, end)
delimiter
char = chr(ord(char) + 1)
delimiter
print(m.group(0))
delimiter
result.append(int(item))
delimiter
name = models.CharField(max_length=1024, blank=True)
delimiter
b = list(a)
delimiter
IGNORE_TESTS = ()
delimiter
cj = cookielib.CookieJar()
delimiter
[syndication]
delimiter
ax2.yaxis.set_major_formatter(ticks_y)
delimiter
oldout, olderr = sys.stdout, sys.stderr
delimiter
turtle.forward(200)
delimiter
output = popen.stdout.read()
delimiter
t = datetime.datetime.now()
delimiter
shutil.get_terminal_size((80, 20))
delimiter
f.close()
delimiter
df.dtypes
delimiter
driver.set_page_load_timeout(10)
delimiter
ax = pylab.gca()
delimiter
zip.extractall()
delimiter
self.SetSizer(grid_sizer_1)
delimiter
app.MainLoop()
delimiter
[item for item in full_list if not omit & set(item)]
delimiter
f()
delimiter
a.__dict__
delimiter
pprint.pprint(data)
delimiter
product = models.ForeignKey(Product)
delimiter
my_list = list(range(10))
delimiter
urllib.request.install_opener(opener)
delimiter
found = any(matched(line) for line in file)
delimiter
reader = csv.reader(in_file)
delimiter
sys.stdout = sys.__stdout__
delimiter
sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_KEEPIDLE, after_idle_sec)
delimiter
__init__.py
delimiter
signals.pre_save.connect(User.pre_save, sender=User)
delimiter
c[:len(b)] += b
delimiter
[mylist.__setitem__(i, thing) for i, thing in enumerate(mylist)]
delimiter
args = parser.parse_args()
delimiter
PyArray_ENABLEFLAGS(arr, np.NPY_OWNDATA)
delimiter
self.layout.addWidget(self.progressBar)
delimiter
out = np.empty(len(a), dtype=object)
delimiter
XXXX
delimiter
df = pd.concat([df.iloc[:, :4], df.iloc[:, 4:]]).reset_index()
delimiter
ax.set_ylim(-2, 2)
delimiter
run.py
delimiter
content = pdf.getPage(1).extractText()
delimiter
func(*args, **kwargs)
delimiter
self.tk.config(menu=self.blank_menu)
delimiter
b = a.ravel()
delimiter
print(df.columns[2:5])
delimiter
time.sleep(1)
delimiter
args._get_kwargs()
delimiter
L[i:i + 2] = L[i + 1:i - 1:-1]
delimiter
frame.Show()
delimiter
fig1 = plt.figure(figsize=(8, 5))
delimiter
p.wait()
delimiter
print(item)
delimiter
(match.group(0) for match in sentence.finditer(text))
delimiter
data = [rndseries, rndseries, rndseries, rndseries, rndseries, rndseries]
delimiter
main()
delimiter
termios.tcsetattr(fd, termios.TCSANOW, attrs)
delimiter
sq_sum.append((A ** 2).sum(axis=1).mean())
delimiter
print(line)
delimiter
np.random.shuffle(arr)
delimiter
[x for x in string_list if x.isdigit()]
delimiter
a = np.ones(2)
delimiter
self.new_names[name] = value
delimiter
p.get_lines()[0].get_ydata()
delimiter
parent = psutil.Process(pid)
delimiter
print(u.__dict__)
delimiter
b = array([1, 4, 5])
delimiter
list(range(0, 0.4, 0.1))
delimiter
data = np.fromfile(f, dtype=dtype)
delimiter
Parent.__init__(self, x, y, z)
delimiter
set(itertools.chain(l1, l2))
delimiter
str_object2 = zlib.decompress(str_object1)
delimiter
entry.focus()
delimiter
result
delimiter
Thread(target=receiving, args=(ser,)).start()
delimiter
f.seek(-pos, 2)
delimiter
db.session.commit()
delimiter
cur.execute(query, my_dict)
delimiter
self.things.append(0)
delimiter
client.set_options(headers=headers)
delimiter
sorted(set(xyz).difference(a))
delimiter
graph.set_xticks(x)
delimiter
app = Flask(__name__)
delimiter
self.columnconfigure(1, weight=0)
delimiter
plt.plot(np.sin(theta), np.cos(theta))
delimiter
xmlstring = re.sub(pattern, lambda m: substitutions[m.group(1)], xmlstring)
delimiter
tk.Tk.__init__(self)
delimiter
f.write(data)
delimiter
a = [[0, 0], [0, 0]]
delimiter
genre_count.sort(ascending=False)
delimiter
raise ValueError(ret)
delimiter
processes.append((p, f))
delimiter
print(ipath[i])
delimiter
plt.plot(x, i * x + 5 * i)
delimiter
df.delta.apply(lambda x: x.microseconds)
delimiter
plot(f, p)
delimiter
ax2.xaxis.set_major_formatter(ticks_x)
delimiter
datareader = csv.reader(io.TextIOWrapper(webpage))
delimiter
model.add(Dropout(0.5))
delimiter
m = re.search(pat, t)
delimiter
im.putpalette(mypalette)
delimiter
self.sleep(1)
delimiter
count += 1
delimiter
sys.stderr = sys.stdout
delimiter
self.functor(*args, **kwargs)
delimiter
view_pyc_file(sys.argv[1])
delimiter
ax4.plot(np.linspace(0, len(xp), len(xp)), xp)
delimiter
os.path.basename(f)
delimiter
x = dict.fromkeys(list(range(0, 10)), 0)
delimiter
do_stuff()
delimiter
math.cos(_ / 2)
delimiter
my_array[:, (0)] = my_array[:, (1)]
delimiter
conn.close()
delimiter
s = s.strip()
delimiter
root.grid_rowconfigure(1, weight=1)
delimiter
raise Exception()
delimiter
list({frozenset(list(Counter(tup).items())): tup for tup in data}.values())
delimiter
bisect.bisect_left(dates, datetime.datetime(2007, 1, 6))
delimiter
print(row)
delimiter
days, hours, minutes, seconds
delimiter
set(list1) & set(compSet)
delimiter
logger.addHandler(fileHandler)
delimiter
manager.start()
delimiter
file_path = os.path.join(root, filename)
delimiter
total += 1
delimiter
ax.set_yticks(np.arange(-0.5, height, 1), minor=True)
delimiter
self.append([])
delimiter
gray = cv2.cvtColor(image_src, cv2.COLOR_BGR2GRAY)
delimiter
print(line_count)
delimiter
combine([9, 8], [2, 1])
delimiter
myLists.append([122284.8, 111161.8, 106581.1, 141419.9])
delimiter
self.Show()
delimiter
pfile.truncate()
delimiter
req = urllib.request.Request(url, data)
delimiter
s.sort()
delimiter
sock.close()
delimiter
cursor.execute(qry)
delimiter
self.timeout = timeout
delimiter
interpreter.process_page(page)
delimiter
tf.logging.set_verbosity(tf.logging.ERROR)
delimiter
sum(c, [])
delimiter
array([0, 1, 1, 2])
delimiter
self.ax = self.fig.add_subplot(111)
delimiter
fh.write(text)
delimiter
f()
delimiter
self.origstream.flush()
delimiter
float(2 ** _random_decimal(min_exp, max_exp, 64))
delimiter
dict(Counter(A).most_common(5))
delimiter
s = requests.Session()
delimiter
print(request.error_message)
delimiter
a_n82_remember_4ever()
delimiter
len(self._data)
delimiter
b = random.choice(range(0, a))
delimiter
body = resp.read()
delimiter
context_for_rendering_inclusion_tag
delimiter
bre.close()
delimiter
c = pymongo.MongoClient()
delimiter
remote.close()
delimiter
timestamp2 = time.mktime(d.timetuple())
delimiter
QtCore.QThread.__init__(self, parent)
delimiter
datetime.datetime(*t.timetuple()[:-4])
delimiter
print(hex(i)[2:].zfill(2))
delimiter
os.path.dirname(os.path.abspath(file))
delimiter
tf.reduce_sum(x) < 100
delimiter
collections.deque(itertools.islice(iterator, n))
delimiter
zipDocument = zipfile.ZipFile(StringIO.StringIO(response.content))
delimiter
turtle.left(90)
delimiter
(recursive_map(f, x) if isinstance(x, tuple) else f(x) for x in it)
delimiter
cur.execute(sql, (lite.Binary(data),))
delimiter
tuple(int(entry) for entry in s)
delimiter
print(G.edge[0][1])
delimiter
(first_num, first_arr), (second_num, second_arr) = generate_arrangements(data)
delimiter
os.dup2(0, 2)
delimiter
dict.__getitem__(self, keys)
delimiter
type(f)
delimiter
datetime.datetime(2012, 1, 5, 0, 0, 0),
delimiter
stats.norm.interval(0.68, loc=mu, scale=sigma / sqrt(N))
delimiter
stats.normaltest(y)
delimiter
PyArray_ENABLEFLAGS(arr, np.NPY_OWNDATA)
delimiter
tf.nn.relu(x + c)
delimiter
per_column = zip(*per_row)
delimiter
anotherfunc()
delimiter
self.left = FibTree(n - 1)
delimiter
np.array_equal(org_approach(data, reference), vect_approach(data, reference))
delimiter
fig, axs = plt.subplots(1, 2)
delimiter
b = collections.OrderedDict(sorted(list(a.items()), key=lambda t: get_key(t[0])))
delimiter
s.update(list(fus_s.keys()))
delimiter
sum((a - b) ** 2 for a, b in zip(a, b))
delimiter
df
delimiter
func2()
delimiter
np.column_stack((slope, intercept))
delimiter
plt.subplot(212)
delimiter
draw = ImageDraw.Draw(img)
delimiter
lst.extend(list(range(11, 14)))
delimiter
ws.run_forever()
delimiter
sys.exit(0)
delimiter
token = token_handler.create_token(request, refresh_token=False)
delimiter
ui.syn()
delimiter
json.dumps(o)
delimiter
self.log.removeHandler(self.handler)
delimiter
self.successors.append(other)
delimiter
help(math.sin)
delimiter
root.update()
delimiter
events.sort(key=lambda x: x[0])
delimiter
froms = collections.defaultdict(list)
delimiter
next(key for key, values in list(d.items()) if search_value in values)
delimiter
self.wrapee = wrapee
delimiter
rows = iter(csv.reader(file))
delimiter
np.array(list_).sum(0).prod()
delimiter
False
delimiter
f1.close()
delimiter
driver.switch_to.window(handle)
delimiter
G.add_edge(1, 2)
delimiter
listening_socket.listen(backlog)
delimiter
author = models.CharField(max_length=20)
delimiter
makeArchive(dirEntries(folder, True), zipname, folder)
delimiter
print(b.shape)
delimiter
[x[i:i + chunk_size] for i in range(0, chunks, chunk_size)]
delimiter
show()
delimiter
foo.__setitem__(something, bar)
delimiter
result.reset_index()
delimiter
data = get_data()
delimiter
print(df.col.str.split(expand=True))
delimiter
server.sendmail(fromaddr, toaddrs, message)
delimiter
lognorm.cdf(x, sigma, 0, mean)
delimiter
[list(row) for row in zip(*mat)]
delimiter
print(foo[0:5])
delimiter
content = f.read()
delimiter
df
delimiter
self.auth.username
delimiter
cluster.setdefault(label, []).append(word)
delimiter
self.search_list(request, *args, **kwargs)
delimiter
c = initval
delimiter
key = lambda x: customlist.index(x)
delimiter
idx = npi.indices(b, a)
delimiter
crawler.start()
delimiter
sys.stdout.write(inp_data)
delimiter
self.tweet_list.append(json.loads(data))
delimiter
app.MainLoop()
delimiter
key = np.array([0, 10])
delimiter
pygame.init()
delimiter
G = nx.Graph()
delimiter
df = pd.concat([df1, df2])
delimiter
print(i)
delimiter
data = list(image.getdata())
delimiter
cym.year, cym.month
delimiter
print(F.__code__.co_stacksize)
delimiter
column_widget.show()
delimiter
print(arr[np.ix_(rows, cols)])
delimiter
print(matplotlib.colors.rgb2hex(rgb))
delimiter
KERNEL[1, 1] = 0
delimiter
app.exec_()
delimiter
parser = argparse.ArgumentParser()
delimiter
ax.quiver(x, y, z, u, v, w, length=0.1)
delimiter
self.b2.pack()
delimiter
signal.signal(signal.SIGINT, signal.SIG_IGN)
delimiter
y_train_1 = y_train[y_train != 0]
delimiter
df = pd.DataFrame()
delimiter
root = tk.Tk()
delimiter
slug = defaultfilters.slugify(unidecode(input_text))
delimiter
fig = plt.figure(figsize=(8, 2))
delimiter
self.assertAlmostEqual(em(2, 1), 0.0584, 4)
delimiter
c.update(d)
delimiter
ndata.append([(start + end) / 2.0, np.mean(np.array(within))])
delimiter
byvalue[x].append(i)
delimiter
m.indices = (indices - 1) % m.shape[1]
delimiter
print(filename)
delimiter
python / path / to / script.py
delimiter
print(df)
delimiter
np.issubdtype(float, np.floating)
delimiter
interleaved = pd.concat([s1, s2]).sort_index()
delimiter
logger = logging.getLogger(__name__)
delimiter
time.sleep(0.001)
delimiter
b = np.array([[4], [5], [6]])
delimiter
data.append(row)
delimiter
label_group_bar(ax, data)
delimiter
r = requests.get(QUERY_URL)
delimiter
qs = self.get_query_set().filter(*args, **kwargs)
delimiter
wb = load_workbook(StringIO.StringIO(xlsx))
delimiter
line = process.stdout.readline()
delimiter
df = df[df[c].isin(df[c].value_counts()[df[c].value_counts() > m].index)]
delimiter
c[1, 2]
delimiter
self.sizer.Add(self.log, 1, wx.EXPAND)
delimiter
print(func.locals)
delimiter
regex_compiled.pattern
delimiter
reducefn(dic1)
delimiter
pprint(l)
delimiter
plt.show()
delimiter
self.file.close()
delimiter
next_line = lines[i + 1]
delimiter
params = urllib.parse.urlencode(params)
delimiter
Baz().foo()
delimiter
l.append(float(rec[col]))
delimiter
ax.set_xticks(np.arange(nba_sort.shape[1]) + 0.5, minor=False)
delimiter
p = argparse.ArgumentParser()
delimiter
b = a + b
delimiter
{{thing}}
delimiter
Decimal(1.5).quantize(0, ROUND_HALF_UP)
delimiter
int(toks[0])
delimiter
friend_id = Column(Integer, ForeignKey(User.id), primary_key=True)
delimiter
start = urllib.request.urlopen(image_url).read(24)
delimiter
[0.0, -1.0]
delimiter
result = a or b or c or default
delimiter
line = line.strip()
delimiter
plt.colorbar(p)
delimiter
list(l)
delimiter
pylab.hist(A[~np.isnan(A)])
delimiter
print(p.stdout.read())
delimiter
soup = BeautifulSoup(urllib.open(url).read())
delimiter
pool = Pool(processes=4)
delimiter
plt.show()
delimiter
[s.split()[:2] for s in strings]
delimiter
dict.__setitem__(self, key, value)
delimiter
x = random.random()
delimiter
pInt[0]
delimiter
tuple(lst)
delimiter
f.readline()
delimiter
x = np.empty((), dtype=object)
delimiter
name = models.CharField(max_length=200)
delimiter
app
delimiter
c.setopt(c.NOBODY, 1)
delimiter
s.loc[:] = [7, 8]
delimiter
list(individual(nest))
delimiter
-24.784805 - 0.927448
delimiter
print(result.read())
delimiter
np.cumsum(hist)
delimiter
output.write(line)
delimiter
ax = fig.add_subplot(111)
delimiter
ax.add_patch(arc)
delimiter
p.join()
delimiter
[dct for dct in listA if dictA.items() <= dct.items()]
delimiter
B = np.random.randint(0, 1000, 10000)
delimiter
print(G.__code__.co_names)
delimiter
fig = plt.figure()
delimiter
fig = plt.figure()
delimiter
f = open(mkstemp()[0])
delimiter
print([b(5) for b in bases])
delimiter
cursor.execute(query, params)
delimiter
df[df.Group.map(df.Group.value_counts().ge(4))]
delimiter
fig.canvas.draw()
delimiter
sys.stdout.write(str(time))
delimiter
sys.stdin.read(1)
delimiter
[self[i] for i in index]
delimiter
s.send(query)
delimiter
print(response.read())
delimiter
self.d[index].append(value)
delimiter
float(c[a]) / len(x)
delimiter
func()
delimiter
sys.exit(2)
delimiter
print(indented)
delimiter
sock.send(data)
delimiter
s.setDTR(True)
delimiter
self.ham = dict()
delimiter
raise ArgumentError(action, msg)
delimiter
root.overrideredirect(True)
delimiter
a = [[0, 1], [0, 1]]
delimiter
print(sys.exc_info()[0])
delimiter
fig = plt.figure()
delimiter
fig1 = plt.figure()
delimiter
result = list(join_unescaped(list_1))
delimiter
[tuple(y for y in x if y != False) for x in df.to_records()]
delimiter
nums.insert(index, mean(nums[index - 1], nums[index]))
delimiter
ax = fig.add_subplot(111)
delimiter
print(i, line)
delimiter
conn = listener.accept()
delimiter
fuse(x, y)
delimiter
get_nested_list(a[0])
delimiter
article.save()
delimiter
grid = [[a, b, c], [d, e, f], [g, h, i]]
delimiter
painter.drawText(QtCore.QPoint(0, -pen.width()), QtCore.QString(hw[i]))
delimiter
os.chdir(sys.argv[1])
delimiter
roi = gray[y1:y2, x1:x2]
delimiter
array = []
delimiter
pd.Series(c, u)
delimiter
pl.plot(x, y)
delimiter
choice = forms.ChoiceField(widget=RadioSelect, choices=choices)
delimiter
print(guyGenerator([2, 2, 2, 2, 2], [1, 1, 1, 1, 1]))
delimiter
y[REPLACE_EVERY_Nth - 1::REPLACE_EVERY_Nth] = REPLACE_WITH
delimiter
[d[x] for x in a]
delimiter
signal.alarm(0)
delimiter
decorator
delimiter
count[letter] += 1
delimiter
periodic_task.save()
delimiter
[dishes[x] for x in crucial if x in dishes]
delimiter
[random.uniform(low, high) for _ in range(size)]
delimiter
mylist1.sort(key=sort_order.index)
delimiter
l = [1, 5, 7]
delimiter
output.close()
delimiter
self.cb = self.figure.colorbar(hb)
delimiter
G = nx.Graph()
delimiter
l.append(Test(0))
delimiter
index_list = []
delimiter
app.add_url_rule(url, view_func=view)
delimiter
p.stdin.write(data)
delimiter
gc.get_objects()
delimiter
print(line)
delimiter
numpy.set_printoptions(linewidth=160)
delimiter
self.queue.clear()
delimiter
sys.exit(ret)
delimiter
app.exec_()
delimiter
vect = CountVectorizer(ngram_range=(1, 4))
delimiter
1, 0, 1, 0, 0, 0, 0, 0, 1
delimiter
cursor.close()
delimiter
self.connect((host, 80))
delimiter
self.start()
delimiter
t0 = time.time()
delimiter
x = 4
delimiter
print((x, y, z))
delimiter
urllib.request.urlretrieve(link, file_name)
delimiter
intercepting_func
delimiter
c = cv2.VideoCapture(0)
delimiter
ru = {}
delimiter
[_f for _f in l if _f]
delimiter
c = pycurl.Curl()
delimiter
StoppableThread.__init__(self)
delimiter
layout.addWidget(self.button)
delimiter
np.add(*np.indices((nrow, ncol)))
delimiter
print(df)
delimiter
(datetime.date.today() - date_cand).days
delimiter
fig, ax = plt.subplots()
delimiter
DEBUG = False
delimiter
pylot.draw()
delimiter
newImage = Image.new(mode, (newWidth, newHeight))
delimiter
wr.writerow(sheet.row_values(0))
delimiter
data_y = [5, 6, 15, 20, 21, 22, 26, 42, 45, 60, 55, 58, 55, 50, 49]
delimiter
os.unlink(fname)
delimiter
print(find_eulerian_tour(graph))
delimiter
w.writerow(a)
delimiter
server.NOT_DONE_YET
delimiter
map(list1.__setitem__, indices, list2)
delimiter
img_bgr = cv2.merge([b, g, r])
delimiter
os.remove(f)
delimiter
compare(a, b)
delimiter
tag.update()
delimiter
row_dict[col] = row[i]
delimiter
df.show()
delimiter
self.browser.quit()
delimiter
X.mean(axis=1)
delimiter
print(repr(object))
delimiter
print(xml2json.xml2json(s))
delimiter
hiddenimports = [],
delimiter
print(line)
delimiter
f(x, (a[x], a[y])), f(y, a[x][0]), f(x, a[x][1])
delimiter
top_names = dict(heapq.nlargest(5, list(names_dict.items()), key=itemgetter(1)))
delimiter
print(fpp[0])
delimiter
self.lineedit.selectAll()
delimiter
script1.py
delimiter
shout.start()
delimiter
iso8601(datetime.timedelta(0, 18, 179651))
delimiter
dumper.represent_dict(iter(data.items()))
delimiter
getitem_rlist = lambda s, i: getitem_rlist(s[1:][0], i - 1) if i > 0 else s[0]
delimiter
b = [[7, 9], [1, 2], [2, 9]]
delimiter
uchar * uimg
delimiter
pdb.set_trace()
delimiter
head[0][0:]
delimiter
c = Counter(a)
delimiter
dict(enumerate(df.five.cat.categories))
delimiter
debuild - us - uc
delimiter
main()
delimiter
ts = pd.Series(np.random.randn(6), index=dates)
delimiter
accuracy = (true_pos + true_neg) / float(len(gold)) if gold else 0
delimiter
math.factorial(170)
delimiter
Category.add(row[1])
delimiter
next(a)
delimiter
result = []
delimiter
ax = f.add_subplot(111, polar=True)
delimiter
ax.set_xlim(min(x), max(x))
delimiter
outfile.write(filedata.file.read())
delimiter
string.ascii_uppercase
delimiter
mercury.speed(0)
delimiter
subprocess.popen(command, shell=True)
delimiter
selected = dict(zip(selected, selected))
delimiter
vbdref1 = session.xenapi.VBD.create(vbdconnectcd)
delimiter
df.index = list(range(1, n)) + [0] + list(range(n, df.index[-1] + 1))
delimiter
py.test
delimiter
parser.parse_args()
delimiter
self.realnames[name]
delimiter
NULL
delimiter
d1.update(b1)
delimiter
self.line.set_color(self.get_color())
delimiter
True
delimiter
sq = [(np.subtract.outer(item, item) ** 2).sum() for item in items]
delimiter
c()
delimiter
b[..., ([2, 2])]
delimiter
ax = df.plot()
delimiter
unittest.TextTestRunner(verbosity=2).run(fullSuite)
delimiter
ts = time.time()
delimiter
m.fit(X / np.std(X, 0), y)
delimiter
plt.figure()
delimiter
sample_weight = np.array([(5 if i == 0 else 1) for i in y])
delimiter
self.coconut = coconut
delimiter
sum(islice(count(1, step=4), 101, 200))
delimiter
print(d[4])
delimiter
plt.xlim(0, 20 + i)
delimiter
dc.SetPen(wx.Pen(self.GetForegroundColour()))
delimiter
layout.addWidget(self.listview)
delimiter
x = np.random.random((5000, 5000)) - 0.5
delimiter
(datetime.date.today() - date_cand.date()).days
delimiter
process.join()
delimiter
g.add_edge(6, 7)
delimiter
self.move(global_point - QtCore.QPoint(self.width(), 0))
delimiter
pos = pygame.mouse.get_pos()
delimiter
a = np.zeros((5, 10))
delimiter
P.figure()
delimiter
curses.setsyx(-1, -1)
delimiter
plt.ylim(0, 1)
delimiter
a1 = np.arange(1, 11)
delimiter
res.update({k: v for k, v in list(b.items()) if k not in a})
delimiter
plt.tricontourf(x, y, T.triangles, v)
delimiter
new_string = str(string, enc)
delimiter
self.lc = wx.ListCtrl(self, style=wx.LC_REPORT)
delimiter
now = datetime.now(mytz)
delimiter
fh.seek(0, os.SEEK_END)
delimiter
start = end + 1
delimiter
print(n)
delimiter
[processed(x) for x in input_array]
delimiter
base.py
delimiter
lrg = np.arange(2).reshape((2, -1)).repeat(1000000, -1).flatten()
delimiter
logmod.fit(x, y)
delimiter
doms = doms.split()
delimiter
add(*x)
delimiter
df
delimiter
mylist = [True, True, False]
delimiter
print(df)
delimiter
B.__init__(self)
delimiter
plot_bars(x_bar, y_bar, angle, ax)
delimiter
fig1 = plt.figure()
delimiter
conn.execute(penguin)
delimiter
abort(401)
delimiter
word = word[:index] + char + word[index + 1:]
delimiter
sys.stdout = self.stdout
delimiter
ab[s][np.concatenate(([True], t[1:] != t[:-1]))]
delimiter
ax = fig.add_subplot(111)
delimiter
self.strategies = strategies
delimiter
User.objects.bulk_create(iter(users_iterator()))
delimiter
doctest.testmod()
delimiter
y = np.cumsum(x, dtype=np.intp)
delimiter
np.sin(n * np.pi * x) * g(x)
delimiter
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
plt.subplot(2, 1, 2)
delimiter
self.y2 += mh
delimiter
self.parser.parse_args(namespace=self)
delimiter
print(xmlFile.toprettyxml())
delimiter
logger = logging.getLogger(__name__)
delimiter
proc.wait()
delimiter
s.mean(level=1)
delimiter
email.send()
delimiter
Tup()[1]
delimiter
itemDict.append(r)
delimiter
startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
delimiter
log.close()
delimiter
print(nltk.tokenize.WordPunctTokenizer().tokenize(german))
delimiter
win.add(notebook)
delimiter
orig.update(extra)
delimiter
result = np.reshape(result, (frames_per_buffer, 2))
delimiter
now = datetime.now()
delimiter
[{next(cyc): y for y in x} for x in v]
delimiter
df.applymap(list).sum(1).apply(set)
delimiter
conn = boto.connect_ec2()
delimiter
face_cascade = cv2.CascadeClassifier()
delimiter
serializer = AvatarSerializer(data=request.DATA, files=request.FILES)
delimiter
{{form.as_p}}
delimiter
pandas2ri.activate()
delimiter
spawn()
delimiter
someClass.start()
delimiter
ss.expon.fit(data, floc=0)
delimiter
m = np.zeros(size, dtype=np.uint8)
delimiter
min(timeit.repeat(lambda : {k: v for k, v in zip(keys, values)}))
delimiter
doubles[x] = x * 2
delimiter
latest_date = B.select(B.date).order_by(B.date.desc()).limit(1).scalar()
delimiter
df.reindex(np.roll(df.index, shift))
delimiter
Counter.objects.get_or_create(name=name)
delimiter
p.join()
delimiter
plt.figure()
delimiter
IM20010809, IM75550511, CL0700100U
delimiter
out = vec.cumsum()
delimiter
plt.gcf().autofmt_xdate()
delimiter
listbox.insert(0, option)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
raise ValueError
delimiter
plt.plot(list(range(10)))
delimiter
plt.imshow(frames[k], cmap=plt.cm.gray)
delimiter
str(a)
delimiter
fig, ax = plt.subplots(1, 1)
delimiter
print(list(itertools.product(*combs)))
delimiter
chambersinreactor, cardsdiscarded
delimiter
(a[i * k + min(i, m):(i + 1) * k + min(i + 1, m)] for i in range(n))
delimiter
cmd.wait()
delimiter
len(f.readlines())
delimiter
fig = plt.figure()
delimiter
dirname = os.path.splitext(f)[0]
delimiter
xnew = np.linspace(0, 1, Newx)
delimiter
new_dataset.sort(key=lambda item: item[group_by_key])
delimiter
x * x
delimiter
main()
delimiter
asarray(all_data)
delimiter
writer.save()
delimiter
post = db.session.query(Post).get(1)
delimiter
parser = argparse.ArgumentParser()
delimiter
np.dot(np.array(n0), np.array(p) - np.array(p0))
delimiter
a = dict.fromkeys(iter(a.keys()), 0)
delimiter
test_list += [([0] + list(x)) for x in itertools.product(*args)]
delimiter
print(newcorpus.words(newcorpus.fileids()[0]))
delimiter
{{form.id}}
delimiter
c.mymethod1()
delimiter
session1.close()
delimiter
matrix = sparse.lil_matrix((rows, columns))
delimiter
list(set(raises))
delimiter
out.write(b)
delimiter
sample_object.users.through.objects.create(user_id=2, sample_id=sample_id)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
f.seek(pos)
delimiter
sys.exit(2)
delimiter
table.rename(index=str).index[0]
delimiter
language = form.language.data
delimiter
workbook.add_format(dict(list(new_dict.items()) + list(dict_of_properties.items())))
delimiter
skel_coords.append((r, c))
delimiter
print(status._json)
delimiter
my_file.write(a)
delimiter
init_p = numpy.array(init_a)
delimiter
assert diff_month(datetime(2010, 10, 1), datetime(2009, 11, 1)) == 11
delimiter
b = dict(a)
delimiter
a = json.loads(s, object_hook=registry.object_hook)
delimiter
path[:-len(ext)], path[-len(ext):]
delimiter
print(Timetable([random_row(50) for _ in range(15)]))
delimiter
file_handler.setLevel(logging.INFO)
delimiter
module.stuff()
delimiter
row = next(reader)
delimiter
[dishes[x] for x in set(crucial) & set(dishes)]
delimiter
result.append(current.pop())
delimiter
content = f.read()
delimiter
self.w.setGeometry(QRect(100, 100, 400, 200))
delimiter
print(regexp.search(s).group(1))
delimiter
ax.xaxis.set_ticks([0, tick_limit])
delimiter
mlab.axes(extent=(0, 1, 0, 1, 0, 1))
delimiter
(item for item in my_iterable if my_filter(item))
delimiter
A = [0, 0, 0, 1, 0, 1]
delimiter
[1.0, 0.0, 1.0, 0.0, 1.0],
delimiter
results = dict([(i, []) for i in inputs])
delimiter
lastHourDateTime = datetime.today() - timedelta(hours=1)
delimiter
db.session.add(p)
delimiter
xy[-2]
delimiter
list(df)
delimiter
using_clump(x)
delimiter
out.reshape(N, -1)[:, (7)] = sinv
delimiter
draw = ImageDraw.Draw(image1)
delimiter
y.append(row[1])
delimiter
parser = argparse.ArgumentParser()
delimiter
self.fc1.draw()
delimiter
rows.nonzero()
delimiter
cnt == cnt.max()
delimiter
bokeh.io.show(layout)
delimiter
[tuple(map(sum, zip(x, y))) for x, y in zip(a, b)]
delimiter
print(last_lines.pop(0))
delimiter
form.fields[DELETION_FIELD_NAME].widget = forms.HiddenInput()
delimiter
q = np.frombuffer(r, dtype=np.float64)
delimiter
sorted(a, key=a.count)
delimiter
numStreak = ([(a[0] == n) for n in a] + [False]).index(False)
delimiter
array([1, 1, -1, 0, 0, -1, 1, 0, -1, -1])
delimiter
all(c <= indices[i + 1] for i, c in enumerate(indices[:-1]))
delimiter
t.print_exc()
delimiter
scipy.stats.poisson(9.2 * 25).cdf(254 - 50)
delimiter
Foo().ham
delimiter
ii = np.where(values == searchval)[0]
delimiter
hypot(x2 - x1, y2 - y1)
delimiter
self.wfile.write(chunk)
delimiter
object.__setattr__(self, name, value)
delimiter
k.lower() in self._s
delimiter
run.py
delimiter
soup = BeautifulSoup.BeautifulSoup(html)
delimiter
lines.reverse()
delimiter
ax.legend(handles, labels)
delimiter
func(**filter_dict(kwargs, get_input_names(func)))
delimiter
list(map(deep_reverse, to_reverse[::-1]))
delimiter
file_size = file_size + len(buf)
delimiter
app = Flask(__name__)
delimiter
BOMLEN = len(codecs.BOM_UTF8)
delimiter
t = pd.to_datetime(t)
delimiter
end = min(len(list1), len(list2))
delimiter
master.minsize(width=666, height=666)
delimiter
ranges[-1].append(oldidx)
delimiter
listening_socket.close()
delimiter
nzsum = np.bincount(ixs[nzmask] - 1, minlength=mat.shape[0] - 1).dot(mat[1:])
delimiter
total += int(string[:j]) + sum_string(string[j:])
delimiter
setup.py
delimiter
timeit(lambda : list(fulldict.keys()))
delimiter
self.log.write(data)
delimiter
x = np.random.rand(n)
delimiter
plt.fill(x, y)
delimiter
a = [1, 1, 5, 1, 1]
delimiter
myseries_two.iloc[0:2]
delimiter
pkg_resources.require(dependencies)
delimiter
flat = [x for sublist in nested for x in sublist]
delimiter
random_array = np.random.randint(0, 16, (4, 4))
delimiter
pdb.Pdb.postloop(self)
delimiter
Z = np.random.normal(size=N)
delimiter
my_df.reset_index(inplace=True)
delimiter
b = pd.Series(data=[4, 5, 6])
delimiter
pencil.py
delimiter
value = sa.Column(sa.String, nullable=False)
delimiter
eventLoopThread.setDaemon(True)
delimiter
not any(bool(a) ^ bool(b) for a, b in zip(it1, it2))
delimiter
browser = mechanize.Browser()
delimiter
remove_if_not_substring(l1, l2)
delimiter
print(extmodule.makeBalls(1, 2))
delimiter
parser = argparse.ArgumentParser()
delimiter
soup = BeautifulSoup(html)
delimiter
list(range(1, n + 1))
delimiter
b.append(item)
delimiter
a[i < 0]
delimiter
self.nodes.append(node)
delimiter
any(i in L1 for i in L2)
delimiter
firstNlines = myfile.readlines()[0:5]
delimiter
show(p)
delimiter
df = pd.concat([ars, che], axis=1)
delimiter
soup = BeautifulSoup(html)
delimiter
rows.append(row)
delimiter
sys.stdout = StringIO()
delimiter
stdout, stderr = proc.communicate()
delimiter
ax.set_zticks([])
delimiter
toss = pd.Series(toss)
delimiter
sum(asum(x) for x in a)
delimiter
id = Column(Integer, primary_key=True)
delimiter
raise TimeoutError()
delimiter
zip(l[::2], l[1::2])
delimiter
checksum = hashlib.md5(open(path).read())
delimiter
(1000000 * delta.seconds + delta.microseconds) / 1000000.0
delimiter
print(format_float(1.5e-06))
delimiter
keyword2func[word]()
delimiter
testclass().testmethod()
delimiter
image = Image.open(image)
delimiter
assert hash(42) == 42
delimiter
f.close()
delimiter
start_date = date.today().replace(day=1, month=1).toordinal()
delimiter
li.append(x + y)
delimiter
print(k, od[k])
delimiter
scores = []
delimiter
fig.tight_layout()
delimiter
print(ndimage.zoom(data, (1, 2, 2)))
delimiter
send_file(io.BytesIO(image_binary))
delimiter
ax = plt.axes([0.0, 0.0, 1.0, 1.0], frameon=False, xticks=[], yticks=[])
delimiter
my_list.insert(index, insert_string)
delimiter
tree = ET.ElementTree(root)
delimiter
d[key][k] = v
delimiter
combined_meta_data._add_table(table_name, table.schema, table)
delimiter
r[~numpy.iscomplex(r)]
delimiter
b[1, 1] = 100
delimiter
fig = plt.figure()
delimiter
time = datetime.strftime(time, DATETIME_FORMAT)
delimiter
self.factories = []
delimiter
self.platforms = []
delimiter
self.emitter = []
delimiter
print(foo())
delimiter
[(1, 2), (2, 4)]
delimiter
new_list = sorted(mylist, key=lambda x: x[1])
delimiter
sys.stderr.write(msg)
delimiter
cimage = Image.open(cimage)
delimiter
print(bigmat[:, (x), (y)])
delimiter
results = self.clickcursor.fetchall()
delimiter
Test(**fields)
delimiter
df_crawls.dtypes
delimiter
send_from_directory(MEDIA_FOLDER, filename, as_attachment=True)
delimiter
print(type(df.iloc[0, 0]))
delimiter
angleInDegrees = arctan(deltaY / deltaX) * 180 / PI
delimiter
id = Column(Integer, primary_key=True)
delimiter
c = a + b
delimiter
reactor.listenUDP(Protocol(timeout))
delimiter
startButton.pack()
delimiter
self.Bind(wx.EVT_CHAR_HOOK, self.OnKeyUP)
delimiter
sys.exit(main())
delimiter
Dbins = np.linspace(D.min(), D.max(), 24)
delimiter
plt.bar(ind, data[0], color=colors[0])
delimiter
dict[entry[0]] = entry[1:]
delimiter
zip(*a)
delimiter
flags = tools.argparser.parse_args(args=[])
delimiter
timestamp = (utc_date - date(1970, 1, 1)).days * DAY
delimiter
[x for x in ls if isinstance(x, dict)]
delimiter
all(a + b == c)
delimiter
blist = [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0]
delimiter
self.addItem(item)
delimiter
mydict[s[0:1]] + s[1:]
delimiter
mmc.serial.close()
delimiter
self.bottom = 0
delimiter
print(repr(a))
delimiter
pd.read_csv(io.StringIO(df.to_csv()))
delimiter
sys.exit(0)
delimiter
b = numpy.random.rand(N)
delimiter
conn.close()
delimiter
Image.open(buff)
delimiter
math.atan2(0.0, -0.0) == math.atan2(-0.0, -0.0)
delimiter
print(k, v)
delimiter
{{encoded}}
delimiter
os.chdir(search_dir)
delimiter
subprocess.call
delimiter
m = re.search(self.BASE_RE, elem.text)
delimiter
print(d[key])
delimiter
False
delimiter
root = Tk()
delimiter
result = [list(t) for t in l]
delimiter
df
delimiter
buffer[:] = bytearray(size)
delimiter
hfile.seek(0, os.SEEK_SET)
delimiter
my_list.extend(sorted(my_dict.get(k)))
delimiter
pos = nx.spring_layout(G)
delimiter
assert True
delimiter
bar()
delimiter
df2.mul(np.log(df2)).sum(1)
delimiter
remove_from[:index + 1] + remove_from[endIndex:]
delimiter
send_file(image_file)
delimiter
ax = fig.add_subplot(2, 1, 1)
delimiter
f.close()
delimiter
threading.Thread(target=foo).start()
delimiter
dall.update(d1)
delimiter
h5file.close()
delimiter
b = np.array([99999, 99997, 99999])
delimiter
contour_info.append((c, cv2.isContourConvex(c), cv2.contourArea(c)))
delimiter
STACKADJ(-oparg)
delimiter
list1[:next(compress(count(), map(ne, list1, list2)), 0)]
delimiter
fig = plt.figure()
delimiter
CS = plt.contour(X, Y, Z)
delimiter
digits.extend([0] * (sigfig - len(digits)))
delimiter
insert_into_homefeed.delay(photo_id, user_id, range_limit + 1)
delimiter
m = __import__(module_name, globals(), locals(), func_names, -1)
delimiter
json_data[key] = value.strip()
delimiter
list(filter(partial(foo, 1, c=4), myTuple))
delimiter
ax.set_xticks([0.5, 1.5, 2.5])
delimiter
brlxusd.split()[0]
delimiter
graph[a].append(b)
delimiter
print(is_arr_in_list(myarr0, mylistarr))
delimiter
im = Image.fromstdin()
delimiter
fig = plt.figure()
delimiter
name = models.CharField(max_length=100)
delimiter
zip(*rows)
delimiter
sys.stderr = f
delimiter
line_split = list(line.split()[0])
delimiter
b = np.array([1, 760])
delimiter
[1]
delimiter
time.mktime(obj.updated_at.timetuple()) * 1000
delimiter
np.dot(A.T, B)
delimiter
d87f7e0c
delimiter
d2d10e28
delimiter
print(min(resolutions, key=keyfunc))
delimiter
final.append(s[x:i + 1])
delimiter
np.in1d(a, b, assume_unique)
delimiter
result.extend([int(b) for b in bits])
delimiter
__init__.py
delimiter
str(int(matchObject.group()) + 10)
delimiter
ftp.connect(host, port)
delimiter
fig, ax = plt.subplots(figsize=(11, 4))
delimiter
first = [x for x, y in data]
delimiter
td.total_seconds()
delimiter
window.stick()
delimiter
self.page()
delimiter
run_wsgi_app(application)
delimiter
time.sleep(waittime)
delimiter
json.loads(urllib.request.urlopen(req).read())
delimiter
df.T.apply(lambda x: x.dropna()[n - 1:].index[0])
delimiter
w.set_foreground()
delimiter
root = tree.getroot()
delimiter
x + y * z
delimiter
s.index = pd.MultiIndex.from_tuples(s.index)
delimiter
plt.legend()
delimiter
p.wait()
delimiter
bv[i] = 1
delimiter
self.fn(*args)
delimiter
parser = argparse.ArgumentParser()
delimiter
rdd = list(sc.wholeTextFiles(input_dir).values())
delimiter
process.start()
delimiter
all(ord(l[i + 1]) - ord(l[i]) == 1 for i in range(len(l) - 1))
delimiter
s.decode(encoding)
delimiter
time.time(), int(in_bytes), int(out_bytes)
delimiter
turtle.begin_fill()
delimiter
pickle.load(f)
delimiter
print(canvas.find_closest(x, y))
delimiter
myList = map(gen_rand, myList)
delimiter
xs.min(axis=0)
delimiter
do_case1()
delimiter
do_case2()
delimiter
httplib.HTTPConnection.__init__(self, *args, **kwargs)
delimiter
deltas[(deltas < 0) | (deltas > 100)] = 0
delimiter
f = lambda x, y: x + y
delimiter
output = data[2] + data[2]
delimiter
np.where(m.any(1), idx0, np.nan)
delimiter
zf.close()
delimiter
lines = tuple(l.rstrip() for l in text_file.readlines())
delimiter
fig = plt.figure()
delimiter
print(dict(regex.findall(r, z)))
delimiter
ax.plot(new_series, your_pandas_dataframe)
delimiter
fig = plt.figure()
delimiter
print(tag.string)
delimiter
os.kill(2405, 15)
delimiter
c = [True, True, False]
delimiter
(0.0, [0.0, 0.0, 0.0], [0.0, 0.0]),
delimiter
zerolistmaker(15)
delimiter
ax.plot(x1, np.sin(x1))
delimiter
dev.off()
delimiter
0, 1, 0, 1, 0, 1, 0, 0, 0
delimiter
image.thumbnail(size, Image.ANTIALIAS)
delimiter
pathqueue.put(path)
delimiter
im = Image.open(image_path)
delimiter
all(v > 0 for v in pairs.values())
delimiter
tokens = nltk.word_tokenize(sentence)
delimiter
print([x for x, c in list(Counter(chain(*lists)).items()) if c != len(lists)])
delimiter
vals = np.array(list(d.values()))
delimiter
gain = (1 - R ** 2) * sqrt(1 - c ** 2)
delimiter
data = os.read(self.pipe_out, 1)
delimiter
pandas2ri.activate()
delimiter
time.sleep(1)
delimiter
(self.i, self.k, self.j) == (other.i, other.k, other.j)
delimiter
x = np.arange(5)
delimiter
soup.b.contents[0]
delimiter
channel.basic_consume(on_message, queue_name)
delimiter
select.select([], [], [])
delimiter
print(np.all(A[idx_a] == B[idx_b]))
delimiter
os.fsync(file.fileno())
delimiter
c.append(random.choice(tmp).pop(0))
delimiter
re.findall(re1, text)
delimiter
size += os.path.getsize(os.path.join(path, f))
delimiter
hxs = HtmlXPathSelector(response)
delimiter
image.file.seek(0)
delimiter
img = numpy.zeros_like(img, dtype=numpy.uint8)
delimiter
new_col.shape
delimiter
sys.stdout.close()
delimiter
print(in_nested_list(x, 5))
delimiter
t = np.arange(0, 0.001, dt)
delimiter
time.sleep(2)
delimiter
main()
delimiter
np.interp(np.linspace(0, tmp.max(), nbin + 1), tmp, np.sort(x))
delimiter
self.running = True
delimiter
x, y = Point(0, 1)
delimiter
print(sum(odd))
delimiter
my_list
delimiter
json = urllib.request.urlopen(url).read()
delimiter
method(**options)
delimiter
_grow
delimiter
name = Column(String(20), primary_key=True)
delimiter
opt.text.clear()
delimiter
D[key].update(item)
delimiter
today = datetime.datetime.today()
delimiter
doc = tree.getroot()
delimiter
wr.writerow([py_date] + sheet.row_values(rownum)[1:])
delimiter
print([hex(ord(byte)) for byte in bytes])
delimiter
turtle.fillcolor(color)
delimiter
self.stream.start_stream()
delimiter
file.write(file_data)
delimiter
print(dict(parse_key_value_list(text)))
delimiter
pprint(etree_to_dict(e))
delimiter
print(dishes[key])
delimiter
self._callbacks.append(callback_ref)
delimiter
self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
settings.MY_SETTING
delimiter
id = Column(Integer, primary_key=True)
delimiter
logger.addHandler(my_handler)
delimiter
out.append((a, b))
delimiter
handler = logging.StreamHandler()
delimiter
random.random() * 6 + 1
delimiter
arr[offs_x:offs_x + shape[0], offs_y:offs_y + shape[1]]
delimiter
df.ix[[0, -1]]
delimiter
to = models.EmailField(null=False, blank=False)
delimiter
csv_output = csv.writer(f_output)
delimiter
ax.yaxis.tick_right()
delimiter
print(winner.flatten().tolist())
delimiter
libvirt.virEventRegisterDefaultImpl()
delimiter
python / path / to / filename.py
delimiter
t = threading.Thread(target=run_one, args=(source,))
delimiter
d.append(line)
delimiter
_g = globals()
delimiter
a = numpy.zeros((6, 6), dtype=numpy.int)
delimiter
self.user_id == other.user_id
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
result1.add(j + 1)
delimiter
outputStream.close()
delimiter
print(df)
delimiter
process = Popen(command, stdout=PIPE, stderr=PIPE, bufsize=1)
delimiter
rank = dict.get(key, 1.0)
delimiter
c = list(itertools.product(a, b))
delimiter
log = logging.getLogger()
delimiter
exec(code, module.__dict__)
delimiter
hbox.addWidget(self.view)
delimiter
f.seek(0)
delimiter
requests.post(url, data=data, headers=json.loads(headers))
delimiter
df = DataFrame(flattened_records)
delimiter
d.set_state(gst.STATE_NULL)
delimiter
subprocess.call(shlex.split(command))
delimiter
ax = fig.add_subplot(1, 1, 1, polar=True)
delimiter
x = np.random.rand(25, 4)
delimiter
output = {k: v for k, v in list(input.items()) if key_satifies_condition(k)}
delimiter
fn(*args, **kwargs)
delimiter
X = np.arange(100).reshape(10, 10).astype(float)
delimiter
plt.colorbar(sc)
delimiter
data = urllib.parse.urlencode(data)
delimiter
visited_nodes.update(path)
delimiter
axicon.set_yticks([])
delimiter
np.delete(p_a_colors, indices, axis=0)
delimiter
v[0] = 10
delimiter
plt.show()
delimiter
n > 1 and all(n % i for i in range(2, n))
delimiter
turtle.left(90)
delimiter
self.__dict__ = self
delimiter
print((name, add, num))
delimiter
nosetests
delimiter
word[len(word):-(len(word) + 1):-1]
delimiter
print(x)
delimiter
QSize(200, 200)
delimiter
c_long_p = ctypes.POINTER(ctypes.c_long)
delimiter
print_decimal(b, prec)
delimiter
counter = db.IntegerProperty(default=0)
delimiter
f.read(1024)
delimiter
self.func(*args, **kwargs)
delimiter
self.openBtn.clicked.disconnect()
delimiter
bytes([255])
delimiter
df2.index = pd.MultiIndex.from_arrays(df1.values.T)
delimiter
self.parse_request()
delimiter
self.user = current_user()
delimiter
user = models.OneToOneField(User)
delimiter
self.hbox.pack_start(self.poles, False, False, 0)
delimiter
plt.figure()
delimiter
target.add_edge(1, 2)
delimiter
result = zip(a, b, c)
delimiter
driver.get(url)
delimiter
accept.start()
delimiter
foo(lcl)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
l1 = [(x, y) for x in range(n) for y in range(n)]
delimiter
User.objects.filter(active=False)
delimiter
print(repr(e))
delimiter
s.close()
delimiter
index += 1
delimiter
reader = csv.DictReader(f)
delimiter
sum(results) / len(results)
delimiter
metadata.create_all(engine)
delimiter
fff(train_set_x[index:index + 1])
delimiter
func()
delimiter
file = cStringIO.StringIO(urllib.request.urlopen(URL).read())
delimiter
res = argparse.ArgumentParser.parse_args(self, *args, **kw)
delimiter
str(lst[0])
delimiter
nll
delimiter
assert np.all(m[:, (i), :] == m_swapped[..., (i)])
delimiter
send(packet1)
delimiter
d = dict((v, k) for k, v in list(adict.items()))
delimiter
user = models.OneToOneField(User)
delimiter
draw.line([0, center, width, center], green)
delimiter
Py_Finalize()
delimiter
fig = plt.figure()
delimiter
map(float, mystr.split()[:2])
delimiter
request.session[SESSION_KEY] = user.id
delimiter
self._printTree(self.root)
delimiter
b.insert(index, a)
delimiter
dict_writer.writerows(groupdata)
delimiter
print((d.get(20), d.get(60), d.get(200)))
delimiter
Super.__init__
delimiter
f.seek(0)
delimiter
curses.noecho()
delimiter
d = dict(regex.findall(r))
delimiter
lines = text_file.readlines()
delimiter
D.update([1, 2])
delimiter
title = models.CharField(max_length=100, unique=True)
delimiter
self.wrong_values.clear()
delimiter
main_dir = os.path.dirname(os.path.realpath(sys.argv[0]))
delimiter
canvas.pack()
delimiter
logging.root.setLevel(logging.DEBUG)
delimiter
cv.Flip(frame, flipMode=-1)
delimiter
new.show()
delimiter
random.shuffle(l)
delimiter
d1 = datetime.date.today()
delimiter
plt.show()
delimiter
sys.exit(1)
delimiter
subprocess.Popen(command)
delimiter
sys.stdout.flush()
delimiter
os.urandom(10)
delimiter
im.point(lut * im.layers)
delimiter
cr = func(*args, **kwargs)
delimiter
raise IOError
delimiter
session.expunge(obj1)
delimiter
ax = plt.axes([0.0, 0.0, 1.0, 0.8], frameon=False, xticks=[], yticks=[])
delimiter
cursor = conn.cursor(MySQLdb.cursors.DictCursor)
delimiter
[[-4, -4, -4, -4], [-7, 2, 2, 2], [-1, -1, -1, -1, -1]]
delimiter
print(child.tag, child.text)
delimiter
title = models.CharFiled(max_length=1000, blank=True)
delimiter
str(thing)
delimiter
inst = session.query(Model).first()
delimiter
result.append(new_t)
delimiter
df.sort_index(inplace=True)
delimiter
M = np.random.random((5, 8))
delimiter
thread.start_new_thread(self.Run, ())
delimiter
zip(a, b)
delimiter
t2 = [(a + b) for a, b in zip_longest(t, t[1:], fillvalue=t[0])]
delimiter
plt.show()
delimiter
self._s.close()
delimiter
data = data[:75]
delimiter
b.append(str(z))
delimiter
process[-1].start()
delimiter
f.write(chunk)
delimiter
matches = [mapping[value] for value in a1 if value in mapping]
delimiter
plt.show()
delimiter
key = Column(Integer, primary_key=True)
delimiter
ax.imshow(data.sum(axis=2).T)
delimiter
sys.exit(1)
delimiter
plt.show()
delimiter
fig, ax = plt.subplots(1)
delimiter
df[df.columns.intersection(col_list)]
delimiter
float(item)
delimiter
object.__getattribute__(self, x)
delimiter
pcap_lookupnet(dev, ctypes.pointer(net), ctypes.pointer(mask), errbuf)
delimiter
[list(x) for x in {tuple(e) for e in a}]
delimiter
timestamp = (aware_dt - datetime(1970, 1, 1, tzinfo=pytz.utc)).total_seconds()
delimiter
ax = fig.add_subplot(111)
delimiter
time.sleep(0.25)
delimiter
ws = root.winfo_screenwidth()
delimiter
X, Y = np.meshgrid(np.arange(N), np.arange(N))
delimiter
print(df2)
delimiter
row = cursor.fetchone()
delimiter
print(L[i])
delimiter
b.append(c)
delimiter
ranges = np.vstack((a, b))
delimiter
self.mylist[i]
delimiter
cur = conn.cursor()
delimiter
http_server = tornado.httpserver.HTTPServer(application)
delimiter
a.remove(item)
delimiter
l = [_f for _f in l if _f]
delimiter
type(z[0])
delimiter
print([format_string.format(v, i) for i, v in enumerate(a)])
delimiter
assert User.objects.count() == 0
delimiter
self.right[i - len(self.left)]
delimiter
print(counts[1])
delimiter
numpy.nextafter(0, 1)
delimiter
groups = Group.objects.filter(member=p1).filter(member=p2)
delimiter
filename = socket.recv(1024)
delimiter
{{p.first_name}}
delimiter
arr = numpy.empty([0, 1], dtype=type1)
delimiter
self.setContentsMargins(0, 0, 0, 0)
delimiter
texts = list(chain.from_iterable(x[1] for x in posts))
delimiter
list(data)
delimiter
result.append(i)
delimiter
urllib.request.install_opener(opener)
delimiter
B = np.array([2, 4, 6])
delimiter
set(fruits).intersection(fruit_dict1)
delimiter
time.sleep(1)
delimiter
print((df.Symbol1 == df.Symbol2) & (df.BB == df.CC))
delimiter
browser = mechanize.Browser()
delimiter
json.load(io)
delimiter
c.extend(combinations(x, i + 1))
delimiter
indices[i] += 1
delimiter
sons.append(son)
delimiter
urllib.request.urlretrieve(dirpath + file, localfilelocation)
delimiter
a = np.ma.array(a, mask=False)
delimiter
print([y for y in (x.giveMyNum() for x in q) if y > 1])
delimiter
os.kill(os.getpid(), signal.SIGTERM)
delimiter
admin.add_view(PaidOrderView(Order, db.session))
delimiter
result = bar(*args, **kwargs)
delimiter
conn.logout()
delimiter
redirect(url, code=code)
delimiter
func(cpy)
delimiter
xsheet.write_row(0, 0, a)
delimiter
urlparse.urljoin(url1, url2)
delimiter
(x1, y1, q11), (_x1, y2, q12), (x2, _y1, q21), (_x2, _y2, q22) = points
delimiter
[t for t in targets if t.startswith(prefixes)]
delimiter
fig.subplots_adjust(left=0.1)
delimiter
mask = (foo < 40) | (foo > 60)
delimiter
geocalc(55.071, -6.508, 51.622, -8.886)
delimiter
strprime = str(prime)
delimiter
getattr(obj, attr_name)[index]
delimiter
gy = np.zeros_like(f)
delimiter
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(jar))
delimiter
sorted(value, key=lambda k: k[0])
delimiter
bar()
delimiter
print(json.dumps(dict(data=x.tostring(), shape=x.shape, dtype=str(x.dtype))))
delimiter
msg.attach(MIMEText(text))
delimiter
zip(x[0], x[1])
delimiter
data.append(int(el.text))
delimiter
p.create_time()
delimiter
code.interact(local=locals())
delimiter
dict(e for i, e in enumerate(d.items()) if begin <= i <= end)
delimiter
HttpResponse()
delimiter
sys.stdout, sys.stderr = out
delimiter
datetime.datetime.today()
delimiter
print(df.head())
delimiter
max(g(sorted(L)), key=lambda x_v: (len(list(x_v[1])), -L.index(x_v[0])))[0]
delimiter
pool = mp.Pool(processes=10)
delimiter
plt.plot(x, L.T)
delimiter
fig.tight_layout()
delimiter
get_localizer(request)
delimiter
sleep(0.1)
delimiter
zfile = zipfile.ZipFile(path)
delimiter
self.pack()
delimiter
app = Flask(__name__)
delimiter
Cls.foo.__func__ is obj.foo.__func__
delimiter
deletesys.argv[0]
delimiter
forms.CharField(required=0),
delimiter
self.Bind(wx.EVT_PAINT, self.OnPaint)
delimiter
handlers.append(urllib.request.HTTPCookieProcessor(cookiejar))
delimiter
result()
delimiter
[j for i, j in mylist]
delimiter
fig, ax = plt.subplots()
delimiter
c.callback()
delimiter
a, b = map(list, zip(*l))
delimiter
HttpResponse()
delimiter
curr_points = [Point(p[0], p[1]) for p in paired_points]
delimiter
print(my_list[0::2])
delimiter
self.send_response(200)
delimiter
rgb = scipy.misc.toimage(np_array)
delimiter
self.transport.write(message)
delimiter
item
delimiter
len(net.layers[0].blobs)
delimiter
foo()
delimiter
a = list(filter(partial(ne, [1, 1]), a))
delimiter
gzf.read()
delimiter
obj.save(**kwargs)
delimiter
m.mask = i == j
delimiter
controlset.a.plot(self.dummyx, self.dummyy, self.dummyz)
delimiter
app = flask.Flask(__name__)
delimiter
cap.set(cv.CV_CAP_PROP_FRAME_WIDTH, int(x))
delimiter
docs = [[0, 1], [0, 0], [1, 0, 1]]
delimiter
column += 1
delimiter
initial_list.remove(item1)
delimiter
df2
delimiter
cust_dict[row[0]] = row[1:]
delimiter
name = models.CharField(max_length=50)
delimiter
files = [f for f in sorted(os.listdir(FileDirectoryPath))]
delimiter
list1.remove(item)
delimiter
metadata.create_all(db)
delimiter
dict()
delimiter
commatoze(input_str)
delimiter
event.wait()
delimiter
idx = np.linspace(0, 2 * np.pi, 100)
delimiter
print([g.subs(x, k) for k in range(4)])
delimiter
sys.stdin.readlines()
delimiter
print(output)
delimiter
competitors = Competitors.objects.all()
delimiter
fig = plt.figure()
delimiter
sa = np.sort(a)[::-1]
delimiter
number_of_rows = sheet.nrows
delimiter
seen = set()
delimiter
np.clip(im[..., (0)], 0, threshold, out=im[..., (0)])
delimiter
plt.margins(0.1, 0.1)
delimiter
print(a, b, c)
delimiter
self.assertEqual(cm.exception.code, 1)
delimiter
plt.figure()
delimiter
auth.set_access_token(access_token, access_token_secret)
delimiter
template = env.from_string(template_string)
delimiter
app.MainLoop()
delimiter
process.wait()
delimiter
[4, 5, 6, 7, 8]
delimiter
any(check_string(line, word_list) for line in some_file)
delimiter
fig, axs = plt.subplots(2, 2, figsize=(8, 8))
delimiter
cursor = cx_Oracle.Cursor(connection)
delimiter
records = Record.objects.all()
delimiter
local_path = os.path.join(root, filename)
delimiter
-1 * np.arange(20)
delimiter
sleep(0.1)
delimiter
b = np.array([1, 5, 20, 25])
delimiter
writer.writerow(dict((h, h) for h in headers))
delimiter
duration = models.PositiveIntegerField()
delimiter
inspect.signature(io.BytesIO.read)
delimiter
np.logical_or.reduce(xyz)
delimiter
patlist.append(idx)
delimiter
axins.boxplot(data)
delimiter
s.sendmail(sender, recipients, msg.as_string())
delimiter
foo = Foo()
delimiter
x.most_common(1)
delimiter
fig = plt.figure()
delimiter
print(tone2)
delimiter
__setitem__
delimiter
pylab.plot(x, psi)
delimiter
p.terminate()
delimiter
lines.add(line)
delimiter
driver = webdriver.Firefox()
delimiter
Response(status=404)
delimiter
num2words(1e+25)
delimiter
print(data)
delimiter
data = f.read()
delimiter
np.maximum.reduceat(a, [0, 4, 7])
delimiter
nested_class()
delimiter
hxs = HtmlXPathSelector(self.br.page_source)
delimiter
print(datetime.datetime.now())
delimiter
a_t = np.vstack((a, np.zeros_like(a)))
delimiter
[X, L] = octave.eig(A)
delimiter
data = []
delimiter
say_hello()
delimiter
group.to_excel(writer, name)
delimiter
M = M[:, (M.getnnz(0) > 0)]
delimiter
self.a = []
delimiter
blah_name = [k for k, v in locals().items() if v is blah][0]
delimiter
line = line.split()
delimiter
name = models.CharField(max_length=255)
delimiter
ts = (midnight - datetime(1970, 1, 1, tzinfo=pytz.utc)).total_seconds()
delimiter
diagmat = np.diag(d)
delimiter
zerolistmaker(5)
delimiter
sh2 = sct_subscript()
delimiter
Users().save()
delimiter
True
delimiter
data = JSONField(db_index=True)
delimiter
port = sock.getsockname()[1]
delimiter
array = list(accumulate(rand(100)))
delimiter
bv.setall(0)
delimiter
out = coo_matrix((vals, (idx[:, (0)], idx[:, (1)])), dims).toarray()
delimiter
fact = lambda x: x == 0 and 1 or x * fact(x - 1)
delimiter
print(list(counter.values()))
delimiter
print(r.text)
delimiter
print([x.group() for x in pat.finditer(mystr)])
delimiter
random.shuffle(list1)
delimiter
CELERY_STORE_ERRORS_EVEN_IF_IGNORED = True
delimiter
time.sleep(20)
delimiter
print(my_class.__name__)
delimiter
sorted(lists, key=lambda x: sorted(x, reverse=True), reverse=True)
delimiter
giveupthefunc()
delimiter
turtle.end_fill()
delimiter
self.server = xmlrpclib.ServerProxy(self.url)
delimiter
dollars = decimal.Decimal(cents) / 100
delimiter
bool(a)
delimiter
random_sample_output.writelines(random_sample_input)
delimiter
logger.setLevel(logging.DEBUG)
delimiter
rtc.BeginTextColour((255, 0, 0))
delimiter
cb = fig.colorbar(im, cax=cax)
delimiter
l.pop(0)
delimiter
ring += 1
delimiter
imshow(im)
delimiter
x = self.get_subclass_name()
delimiter
print(subprocess.list2cmdline(params))
delimiter
output += np.sum(integrand(b), axis=1)
delimiter
__import__(module_name)
delimiter
root = tk.Tk()
delimiter
setattr(obj, name, value)
delimiter
driver = webdriver.Firefox()
delimiter
print(repr(astr))
delimiter
today = datetime.datetime.today()
delimiter
record = dict(grouper(2, fields))
delimiter
True
delimiter
soup = BeautifulSoup(html_text)
delimiter
new_array
delimiter
compare_listcomp(a, b)
delimiter
print(names_of1(x, locals()))
delimiter
f.subs(x, 0)
delimiter
listen_thread.start()
delimiter
c = 55.6
delimiter
Book.objects.filter(**filters)
delimiter
b = np.array([2, 4, 6])
delimiter
bpy.utils.register_class(customToolshelfPanel)
delimiter
l[1::2] += 1
delimiter
x = np.linspace(xmin, xmax, 100)
delimiter
cursor.execute(query)
delimiter
new_list = []
delimiter
print(list(m))
delimiter
smoothedData = dataSeries.rolling(10, center=True).median()
delimiter
pdf.savefig(fig)
delimiter
[[item] for item in ll[0]]
delimiter
closey = close.copy()
delimiter
l1.remove(item)
delimiter
str(obj)
delimiter
keys = [k for k, v in list(my_dict.items()) if v < threshold_value]
delimiter
self.emitter.daemon = True
delimiter
Image.objects.all().portraits().small()
delimiter
buf[i:i + 2] = foo
delimiter
lines = f1.readlines()
delimiter
settings.py
delimiter
time.sleep(10)
delimiter
wr.writerows(list(Counter(textSorted).items()))
delimiter
one_day = datetime.timedelta(days=1)
delimiter
conn.rollback()
delimiter
request.form
delimiter
my_file.write(c)
delimiter
f.write(s)
delimiter
parser = argparse.ArgumentParser()
delimiter
ax.add_collection(lines)
delimiter
result = storage.save(djangofile.name, djangofile)
delimiter
plot_chart(df, fig, ax)
delimiter
mcastsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
delimiter
surface.get_npimage()
delimiter
df = pd.concat([df] * 1000).reset_index(drop=True)
delimiter
user = session.query(User).one()
delimiter
modul.func()
delimiter
smtp = smtplib.SMTP(server)
delimiter
G = nx.DiGraph()
delimiter
deletelist_of_g[to_idx:]
delimiter
print(key)
delimiter
list(itertools.combinations(l, 2))
delimiter
dosomething()
delimiter
print(next(t))
delimiter
angle = atan((neuron2.x - neuron1.x) / float(neuron2.y - neuron1.y))
delimiter
cur_set.pop()
delimiter
root = Tk()
delimiter
method()
delimiter
print(err.lineno)
delimiter
solve(sin(z) - 2, z)
delimiter
{1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0}
delimiter
result[0]
delimiter
p2out = f.read()
delimiter
f(*args, **kw)
delimiter
counts[x] += 1
delimiter
sys.stdout.write(processed_line)
delimiter
zinfo.file_size = file_size
delimiter
get_object_or_404(queryset, **filter)
delimiter
plt.show()
delimiter
iconfile.close()
delimiter
sys.exit = new_sys_exit
delimiter
gr1.switch()
delimiter
console._run()
delimiter
f = signal.filtfilt(b, a, f)
delimiter
jsondata = json.load(urllib.request.urlopen(url))
delimiter
x = numpy.arange(0, 10)
delimiter
signal.signal(signal.SIGALRM, signal_handler)
delimiter
print(myre.group(1))
delimiter
cur = con.cursor()
delimiter
z[np.arange(k - i), np.arange(k - i) + i]
delimiter
self.finish()
delimiter
sys.exit(app.exec_())
delimiter
x.pop(0)
delimiter
fig = plt.figure()
delimiter
query_pairs = [(k, v) for k, vlist in d.items() for v in vlist]
delimiter
getattr(inst, self.name)
delimiter
x = numpy.asarray(x)
delimiter
body = response.read()
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
Employee.__init__(self, name, salary)
delimiter
pygame.display.update()
delimiter
sorted(names, key=splittedname)
delimiter
z[np.arange(k - i) + i, np.arange(k - i)]
delimiter
img = (np.random.rand(200, 200) * 256).astype(np.uint8)
delimiter
Base.metadata.create_all(e)
delimiter
print(covered_list)
delimiter
list(map(lambda x: x * 2, [2, 2]))
delimiter
cells = [str(i) for i in range(1, 10)]
delimiter
setattr(p, s, new_value)
delimiter
AB = map(sum, itertools.zip_longest(A, B, fillvalue=0))
delimiter
m.tolist()
delimiter
bbox = x.get_window_extent()
delimiter
new = [k for k, g in groupby(data) if len(list(islice(g, 2))) == 1]
delimiter
print([next(c) for _ in range(4)])
delimiter
m1 = (pt1.getY() - pt1.getY()) / 1
delimiter
map_nested_dicts(x, lambda v: v + 7)
delimiter
sys.path.append(os.getcwd())
delimiter
obj[name]
delimiter
description = models.CharField(max_length=100, blank=True)
delimiter
list(range(1, n + 1, 2))
delimiter
sum(f(x) for f in phi)
delimiter
np.correlate(a, [0, 0] + v + [0, 0])
delimiter
local_minima.append([i, A[i]])
delimiter
sorted(list(dct.items()), key=itemgetter(1), reverse=True)
delimiter
decorator
delimiter
plt.show()
delimiter
{}
delimiter
b = np.vstack((a, a))
delimiter
app.listen(settings.TORNADO_PORT)
delimiter
ee.connexion.add(*e.connexion.all())
delimiter
canvas.tag_raise(firstRect)
delimiter
layout.addWidget(self.button)
delimiter
file_.close()
delimiter
np.add.at(a, b, 1)
delimiter
df
delimiter
ax1.plot(pd.Series(np.random.uniform(0, 1, size=10)))
delimiter
screen.fill(white)
delimiter
pixel = walnut.getpixel((x, y))
delimiter
self.linenumbers.redraw()
delimiter
sys.stdout.write(line)
delimiter
rowMean = a.sum(1) / (a != 0).sum(1)
delimiter
print(avg_positive_speed([0.0, 0.0]))
delimiter
doing_fd.truncate()
delimiter
user = Column(String)
delimiter
list1, list2 = filterer(list1, list2)
delimiter
plt.plot(t, s)
delimiter
count(s, li)
delimiter
dis.dis(f)
delimiter
print(line)
delimiter
cv.SetCaptureProperty(video1, cv.CV_CAP_PROP_FRAME_WIDTH, 800)
delimiter
etree.tostring(tree)
delimiter
self.f(obj, *args, **kw)
delimiter
data = json.load(fp)
delimiter
lower.append(word)
delimiter
line(src, Q1, Q2, Scalar(0, 0, 255), 1, CV_AA, 0)
delimiter
t.pack()
delimiter
pattern.search(html).group()
delimiter
logdet = np.add.reduce(absd, axis=-1)
delimiter
list[0] += 1
delimiter
print(interleave(a, b))
delimiter
A = np.random.randint(0, 10, 100)
delimiter
item.setExpanded(True)
delimiter
reactor.connectTCP(HOST, PORT, factory)
delimiter
csv_output.writerow(fieldnames)
delimiter
shmctl(shmid, IPC_RMID, NULL)
delimiter
display.stop()
delimiter
p = argparse.ArgumentParser()
delimiter
distance[0][1]
delimiter
conn.set_debuglevel(False)
delimiter
queryset = Profile.objects.all()
delimiter
{{formset.management_form}}
delimiter
tree_selection.set_mode(gtk.SELECTION_MULTIPLE)
delimiter
recurse_matches_py(a, b, alo, blo, ahi, bhi, answer, maxrecursion - 1)
delimiter
new_nums.append(mean(nums[index - 1], nums[index]))
delimiter
last_name = models.CharField(max_length=50)
delimiter
self.ax.figure.canvas.draw()
delimiter
G.add_nodes_from((n, B.node[n]) for n in nodes)
delimiter
self.queue.put(message)
delimiter
[chr(item) for item in range(ord(s[0]), ord(s[-1]) + 1)]
delimiter
grview.setScene(scene)
delimiter
send_from_directory(app.static_folder, filename)
delimiter
conn.rollback()
delimiter
zip(*theArray)
delimiter
print(a, b, c, d)
delimiter
pl.plot(x, dist.cdf(x))
delimiter
result.reverse()
delimiter
print(thelog)
delimiter
session.add(user)
delimiter
fsizer = wx.BoxSizer(wx.HORIZONTAL)
delimiter
print(max(map(len, inverse_regex.ipermute(data))))
delimiter
value = random.choice(mylist)
delimiter
response.set_status(exception.status_int)
delimiter
ax2.set_navigate(False)
delimiter
result.fillna(0, inplace=True)
delimiter
s.say_hello()
delimiter
RSI2.plot()
delimiter
wb.Close()
delimiter
print(m.group(1))
delimiter
pickle.dumps(ThreadPoolExecutor(1))
delimiter
random.shuffle(list2)
delimiter
b = a.copy()
delimiter
print(item)
delimiter
i += 1
delimiter
pBuf = ctypes.create_string_buffer(init_size)
delimiter
random.randrange(5, 60, 5)
delimiter
foo()
delimiter
root_logger.setLevel(logging.DEBUG)
delimiter
sqs._endpoint.http_session.close()
delimiter
unittest.main()
delimiter
data = json.loads(api_data)
delimiter
h = HTMLParser.HTMLParser()
delimiter
dir()
delimiter
print(get_numbers_from_filename(filename))
delimiter
print(new.timestamp())
delimiter
print(e.subs([(a, c), (b, d)]))
delimiter
df = pd.DataFrame(dict(zip(headers, foo)))
delimiter
z.append(x[i] + y[i])
delimiter
print(list(groups.values()))
delimiter
ax.imshow(A, **kwargs)
delimiter
sys.stdout.flush()
delimiter
shift_idx = np.flatnonzero(sorted_a[1:, (1)] > sorted_a[:-1, (1)]) + 1
delimiter
print(r[0])
delimiter
sleep(1)
delimiter
res = [lookupdict[k] for k in arr.tolist()]
delimiter
a[:2, :2] = np.arange(4).reshape((2, 2))
delimiter
t.start()
delimiter
strided.reshape(dim)
delimiter
print(args)
delimiter
df = pd.concat([num_df, enum_df], axis=1)
delimiter
print([a.value for a in arr])
delimiter
np.divide(sumA, sumB)
delimiter
op(x, y)
delimiter
fig, ax = plt.subplots()
delimiter
G.add_edge((q, r), (q + 1, r - 1))
delimiter
composite_list = [my_list[x:x + 5] for x in range(0, len(my_list), 5)]
delimiter
idx = np.array([0, 0, 0])
delimiter
model.add(act)
delimiter
sys.exit(a)
delimiter
(1.0, [1.0, 1.0, 1.0], [0.0, 0.0]),
delimiter
ID = db.Column(db.Integer, primary_key=True)
delimiter
dd[key].append(value)
delimiter
a2Note.play()
delimiter
submodule1.py
delimiter
template.format(*x)
delimiter
signal = signal.sum(-1)
delimiter
df = pd.DataFrame(list(zip(*foo)), columns=headers)
delimiter
f2.close()
delimiter
all(item in list(d2.items()) for item in list(d1.items()))
delimiter
stdout, stderr = proc.communicate()
delimiter
madata
delimiter
print(model.intercept_, model.coef_)
delimiter
R = np.array([0.5, 0.5, 0.5])
delimiter
thing = getattr(obj, name)
delimiter
x + y
delimiter
[expression for item in list if conditional]
delimiter
comm.Recv([data, MPI.CHARACTER], source=0, tag=22)
delimiter
foo.bar(1, 2)
delimiter
p.terminate()
delimiter
root.iconify()
delimiter
list_list = []
delimiter
list(self._sa_instance_state.attrs.items())
delimiter
diff.extend([i for i in range(len(small), len(big)) if i not in ignore])
delimiter
gy = np.array([[1, 2, 1], [0, 0, 0], [-1, -2, -1]])
delimiter
type(x[0])
delimiter
add_subdirectory(name_of_python_app)
delimiter
df = pandas.DataFrame(x_scaled)
delimiter
sleep(5)
delimiter
print(combs(sampleip))
delimiter
response = br.response()
delimiter
tests.test_001_func()
delimiter
hash(b)
delimiter
mock_sgc_obj.assert_called_once_with(mock_mail_obj)
delimiter
self.mocks
delimiter
list(it)
delimiter
__c = ctypes.c_void_p(0)
delimiter
print(pool.map(worker, list(range(5))))
delimiter
timezone.make_aware(datetime.now(), timezone.get_current_timezone())
delimiter
metadata = MetaData()
delimiter
screen.keypad(0)
delimiter
arr[:n, :n]
delimiter
plt.ioff()
delimiter
cursor = conn.cursor()
delimiter
print(line)
delimiter
np.all(s == s2)
delimiter
tour.append(current_vertex)
delimiter
holes = np.logical_and(cskel, noholes)
delimiter
print(convert_excel_time(1.4006944444444))
delimiter
print([group.mean() for group in np.split(x, np.where(np.diff(x) > th)[0] + 1)])
delimiter
sum(p)
delimiter
root = Tkinter.Tk()
delimiter
Response(serialized_student_detail.data)
delimiter
data.sort(key=lambda r: r[1])
delimiter
self.argspec = inspect.getargspec(src_func)
delimiter
q[p] = np.arange(len(p))
delimiter
self.fptr = fptr
delimiter
recursiveBinaryChop(value, elementList, min, max)
delimiter
ranges = zip(cuts, cuts[1:])
delimiter
self.screen.blit(self.img, (0, 0))
delimiter
print(line)
delimiter
self.fig = plt.figure()
delimiter
{{form.title}}
delimiter
elem.clear()
delimiter
self.__dict__.update(self._defaults)
delimiter
[k[0] for k in d]
delimiter
isinstance(sys.stdin, file)
delimiter
list(set(theList).intersection(theDict))
delimiter
matrix[2][0] = 5
delimiter
print(line.split()[1])
delimiter
label.master.lift()
delimiter
page = str(BeautifulSoup(response.content))
delimiter
zf.extract(member, path)
delimiter
my_cmd.cmdloop()
delimiter
in_memory_file = s.getvalue()
delimiter
encodings.insert(0, denc)
delimiter
{{animal.p}}
delimiter
row_count += chunk.shape[0]
delimiter
tweettext = f.read()
delimiter
p.join()
delimiter
a.foo()
delimiter
srf.blit(f.render(unistr, True, (255, 0, 0)), (0, 0))
delimiter
self.name = name
delimiter
print(list(df.keys()))
delimiter
parser = argparse.ArgumentParser()
delimiter
numbers_float = [float(x) for x in numbers_str]
delimiter
print(image.get_rect().size)
delimiter
ax2 = fig.add_subplot(122)
delimiter
sw.pack(side=LEFT, fill=Tix.BOTH, expand=1)
delimiter
lasts = []
delimiter
dict([[i, j[0]] for i, j in enumerate(x)])
delimiter
image.show()
delimiter
bins = bins[:-1] + (bins[1] - bins[0]) / 2
delimiter
serializer_class = SpeakerSerializer
delimiter
i = np.argmin(np.abs(df.index.to_pydatetime() - image_time))
delimiter
word[0].isupper()
delimiter
crawler.crawl(spider)
delimiter
array([[0, 1, 0], [1, 1, 1], [0, 1, 0]])
delimiter
plt.show()
delimiter
q.try_run()
delimiter
b = a[:, (np.arange(a.shape[1]) != 50)]
delimiter
[item for _, item in zip(list(range(items)), list(self.items()))]
delimiter
self.tristate_parent(parent)
delimiter
ser.write(theinput)
delimiter
data = f.read()
delimiter
arr.shape
delimiter
theta = np.linspace(0, 2 * np.pi, 40)
delimiter
list(set(first) | set(second))
delimiter
self.buttonPanel1.Show(False)
delimiter
print(type(a))
delimiter
isinstance(s, str)
delimiter
reader = csv.DictReader(f)
delimiter
m.hexdigest()
delimiter
abs(hash(s)) % 10 ** 8
delimiter
db.init_app(app)
delimiter
tk.Frame.__init__(self, *args, **kwargs)
delimiter
wx.Panel.__init__(self, parent)
delimiter
it.dropwhile(lambda x: x != 4, it.cycle(l))
delimiter
data.append(el.text)
delimiter
parser = HTMLParser()
delimiter
self.count += 1
delimiter
searchlines = f.readlines()
delimiter
threadB.run()
delimiter
a[np.arange(len(a)), lst]
delimiter
name = models.CharField(max_length=128)
delimiter
a is np.asarray(a)
delimiter
browser = webdriver.Firefox()
delimiter
assert addup(5000) == sum(range(5001))
delimiter
np.sqrt(np.sum((v1 - v2) ** 2))
delimiter
time.sleep(0.1)
delimiter
d = {part: d}
delimiter
random.shuffle(listOfItems)
delimiter
L = L[ndx]
delimiter
column_names = [row[0] for row in cursor]
delimiter
print(c.most_common(5))
delimiter
print(line)
delimiter
bool_arr = np.array([myfunc(row) for row in x])
delimiter
self.children.append(child)
delimiter
fig = plt.figure()
delimiter
b()
delimiter
e.set_alpha(1.0)
delimiter
np.where(pd.Index(pd.unique(B)).get_indexer(A) >= 0)[0]
delimiter
pyfoo
delimiter
getattr(item[1], item[0])()
delimiter
soup = BeautifulSoup(htmlSource)
delimiter
np.array(x)
delimiter
deletelist
delimiter
f_out_blg.write(line)
delimiter
f_out_extkeys.write(line)
delimiter
partition = lambda p, xs: (list(filter(p, xs)), [f for f in xs if not p(f)])
delimiter
f(*args, **kwds)
delimiter
self.name = name
delimiter
ax.xaxis.label.set_rotation(90)
delimiter
parser.add_argument()
delimiter
block = a[y_coords[row, col][:, (np.newaxis)], x_coords[row, col]]
delimiter
plt.ylim(np.log10(ilim))
delimiter
main()
delimiter
axis.set_major_locator(MaxNLocator())
delimiter
plt.gca().add_artist(leg1)
delimiter
myarray[0][:1]
delimiter
b - b.multiply(a)
delimiter
self.ax.xaxis.set_major_locator(month)
delimiter
sys.stdout.write(c)
delimiter
plt.plot(t, 2 * s, c=seaborn.color_palette()[2])
delimiter
surface.blit(word_surface, (x, y))
delimiter
print(fmt.format(*x))
delimiter
json.dumps(value)
delimiter
functools.reduce(add, list(range(1, 11)))
delimiter
data = numpy.zeros((200, 200, 4), dtype=numpy.uint8)
delimiter
yidx = (raw[:, (1)] - yrange[0]).astype(int)
delimiter
ax = plt.subplot(211)
delimiter
choices.pop(0)
delimiter
self.client_tcp_timeout.cancel()
delimiter
ax.autoscale_view()
delimiter
last_digit = n % 10
delimiter
r = congruent.index.to_series().map(lkp).values
delimiter
A()
delimiter
a, b = b, a
delimiter
pickle.dump(results, f)
delimiter
requests.get(queryurl, auth=headeroauth)
delimiter
b = list(set(a))
delimiter
run()
delimiter
idx_max = max(enumerate(x), key=lambda x: x[1])[0]
delimiter
a.index(f(a))
delimiter
sys.path.append(egg_path)
delimiter
print(string.ascii_lowercase)
delimiter
cl = HierarchicalClustering(L, lambda x, y: abs(x - y))
delimiter
file.write(response.text)
delimiter
df_slcd
delimiter
d = np.diff(x1.astype(int))
delimiter
print((lst, sum(lst)))
delimiter
ax.add_patch(rect)
delimiter
print(c.most_common(1))
delimiter
fig.tight_layout()
delimiter
b.build_platlib
delimiter
conn.connect((ip, port))
delimiter
np.add.at(out_count, np.where(mask2)[0], b[:, (1)])
delimiter
s[n:]
delimiter
m = np.ma.masked_where(y > 2, y)
delimiter
new_list = [[x[1] for x in y] for y in the_list]
delimiter
gprun()
delimiter
{url.current()}
delimiter
text.see(tk.END)
delimiter
cursor = conn.cursor()
delimiter
count += countit(target, key, count) + 1
delimiter
new_dict = deepcopy(orig_dict)
delimiter
c = numpy.repeat(b, a)
delimiter
self.my_stuff = my_stuff
delimiter
draw.rectangle((67, 0, 100, 100), fill=(255, 0, 0, 0))
delimiter
sum(char == c for c in word)
delimiter
fig = plt.figure()
delimiter
df
delimiter
a.py
delimiter
list(fun(d))
delimiter
d[item] += 1
delimiter
plt.draw()
delimiter
fig = plt.figure()
delimiter
Response(up_file.name, status.HTTP_201_CREATED)
delimiter
c = np.arange(10).reshape(5, 2)
delimiter
np.repeat(np.repeat(A, 2).reshape(2, 4), 2, 0)
delimiter
c.setopt(c.HEADERFUNCTION, headers.write)
delimiter
ndates = (reobj.match(date).groups() for date in dates)
delimiter
plt.show()
delimiter
pygame.draw.circle(screen, (200, 0, 0), pos, 10, 2)
delimiter
self.signal.connect(self.receiver, **self.kwargs)
delimiter
leerdammer = Cheese.slightly_holey()
delimiter
print(formatdate(timeval=stamp, localtime=False, usegmt=True))
delimiter
self.image.show()
delimiter
df = pd.DataFrame(np.random.rand(480, 4000), dates, stoks)
delimiter
self.rect = self.image.get_rect()
delimiter
a.append(i)
delimiter
print((choice_data.i, choice_data.card))
delimiter
self.damp = damp
delimiter
counts = Counter((k[1], v) for k, v in dictA.items())
delimiter
reverseCom([4, 5, 6], 2)
delimiter
lines = f.readlines()
delimiter
tick.set_markersize(6)
delimiter
{valid: true, data: whatyouwanttostore}
delimiter
print(list(my_splitter))
delimiter
disable()
delimiter
key_func()
delimiter
g.close()
delimiter
action.click()
delimiter
[theDict[item] for item in theList if item in theDict]
delimiter
r = [(a, b) for a, b in itertools.zip_longest(l, l[1:], fillvalue=l[0])]
delimiter
data = json.load(sys.stdin)
delimiter
new_nums.append(nums[index - 1])
delimiter
plt.mlab_source.set(x=x, y=y, z=z)
delimiter
print(tuple(chain(*base_lists)))
delimiter
today + relativedelta.relativedelta(weeks=1, weekday=1)
delimiter
signal.pause()
delimiter
counters = counters.reshape(len(peptides), 16, 5)
delimiter
draw.rectangle((0, 67, 100, 100), fill=(0, 255, 0, 0))
delimiter
test1.foo()
delimiter
self.remove(value)
delimiter
fmax = np.maximum(f1, f2)
delimiter
fout.write(fin.read())
delimiter
a.foo()
delimiter
print(m.__class__.__name__)
delimiter
tuple([(x.fptr if isinstance(x, self.__class__) else x) for x in t])
delimiter
legend = ax.legend()
delimiter
fame = models.PositiveIntegerField(default=1)
delimiter
ctypes.cast(a.ctypes.data, ctypes.POINTER(ctypes.c_float))[0]
delimiter
b = random.choice(range(a, len(xs)))
delimiter
ax1.set_xticks(list(range(len(data.columns))))
delimiter
new_df = pd.DataFrame()
delimiter
QtDBus.QDBusConnection.sessionBus().send(msg)
delimiter
server.shutdown()
delimiter
p1 = subprocess.Popen(args, stdout=subprocess.PIPE)
delimiter
print(df)
delimiter
type(self) == type(other) and self.value == other.value
delimiter
Request(url=self.login_page, callback=self.login)
delimiter
print(generate(client, sys.argv[1]))
delimiter
self.queue.add(item)
delimiter
print(line)
delimiter
t = Text(root)
delimiter
glOrtho(0, w, h, 0, 0, 1)
delimiter
self.assertTrue(wrn)
delimiter
parser = argparse.ArgumentParser()
delimiter
print(list(headers.keys()))
delimiter
self.bttn.grid()
delimiter
repr(f.__closure__[0])
delimiter
driver = selenium.webdriver.PhantomJS()
delimiter
dostufF()
delimiter
ax.set_yticks(arange(df.shape[0]))
delimiter
f(test=1)
delimiter
[4, 5, 10]
delimiter
app = Flask(__name__)
delimiter
signal.signal(signum, _kronos)
delimiter
b.pack()
delimiter
b_thread.join()
delimiter
Z = np.zeros((2, 2), dtype=int)
delimiter
p.append(e)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
ax = fig.add_subplot(111)
delimiter
mean_vals = np.bincount(out, weights=A) / np.bincount(out)
delimiter
myfunc()
delimiter
d[k] = frozenset(v)
delimiter
rows = cursor.fetchall()[-10::1]
delimiter
zip_longest(fillvalue=fillvalue, *args)
delimiter
lines = f.readlines()
delimiter
sys.stdout.flush()
delimiter
print(t.timeit(number=1))
delimiter
print(f(2))
delimiter
self.scrollbar.config(command=self.text.yview)
delimiter
app.exec_()
delimiter
writer = csv.writer(f)
delimiter
lst = [0, 1], [0, 4], [1, 0], [1, 4], [4, 0], [4, 1]
delimiter
d += timedelta(days=1)
delimiter
self.response.out.write(json.dumps(response))
delimiter
x, y = [], []
delimiter
self.button.setIconSize(QtCore.QSize(128, 128))
delimiter
f.close()
delimiter
self.__dict__.update(kwargs)
delimiter
log.start(loglevel=log.DEBUG)
delimiter
print(stdout)
delimiter
rd.fit(X, y)
delimiter
df2 = pd.DataFrame(randn(5, 10))
delimiter
new_df = new_df.append(view)
delimiter
num_int = int(num_str)
delimiter
cancel(-a * b * exp(a * b * x) / (1 + exp(a * b * x)))
delimiter
{{comment.comment}}
delimiter
file_date_tuple_list.sort(key=lambda x: x[1])
delimiter
f.close()
delimiter
gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)
delimiter
wait = WebDriverWait(driver, 10)
delimiter
all(some_list)
delimiter
count(i + 1, j) + (count(i + 1, j + 1) if seq[i] == sub[j] else 0)
delimiter
succs[u].add(v)
delimiter
print(not any(dict1.values()))
delimiter
[(x, y) for x, y in zip_longest(it1, it2)]
delimiter
self[something]
delimiter
root = Tk()
delimiter
i = int(i)
delimiter
animate / path / to / animated.gif
delimiter
self.clear()
delimiter
view.sel().add(sublime.Region(0, 0))
delimiter
frozenset(x).intersection(y)
delimiter
jobs.append(task2())
delimiter
d = dict(map(reversed, list(a.items())))
delimiter
random_sample_output.close()
delimiter
n -= 1
delimiter
results.put(simulation_result)
delimiter
self.a.b.c
delimiter
sum2 = data1[np.in1d(idx1, idx2)].dot(data2[np.in1d(idx2, idx1)])
delimiter
keys = [r[1] for r in data]
delimiter
response = requests.get(url)
delimiter
pyplot.subplot(2, 1, 1)
delimiter
m.get_server().serve_forever()
delimiter
it = chain(a, b)
delimiter
gevent.sleep(1)
delimiter
dc.SetBrush(wx.Brush(self.GetForegroundColour()))
delimiter
a = np.arange(2, 10)
delimiter
fmt.format(msg, lineno, colno, endlineno, endcolno, pos, end)
delimiter
match.group(1).upper()
delimiter
file_write.write(r.read())
delimiter
gridy = np.linspace(-1, 1, 5)
delimiter
fp.truncate()
delimiter
df.loc[~(trans_neg | trans_neg.shift(-1))]
delimiter
print(df.iloc[i - N:i])
delimiter
socket.inet_pton(socket.AF_INET6, domain)
delimiter
file.close()
delimiter
parsed = json.load(handle)
delimiter
response
delimiter
print(type(foo))
delimiter
acceptable
delimiter
libvirt.virEventRunDefaultImpl()
delimiter
pl.show()
delimiter
QtCore.QCoreApplication.quit()
delimiter
print((a, b, c, d))
delimiter
self.uncheck_descendant(item)
delimiter
sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2)
delimiter
logger.setLevel(logging.DEBUG)
delimiter
plt.imshow(np.mod(data, 42))
delimiter
print(dict(**f))
delimiter
ExampleModel.objects.update(string_field=f)
delimiter
print((address, networka, networkb))
delimiter
im.set_data(frame)
delimiter
fd = os.open(filename, os.O_RDWR | os.O_CREAT)
delimiter
print(json.dumps(get_classes_from_text(text), indent=4))
delimiter
res = urllib.request.urlopen(url)
delimiter
plt.setp(xtickNames, rotation=0, fontsize=40)
delimiter
data = json.load(open(filename))
delimiter
recursion(index + 1, result + ls[index])
delimiter
a = np.sort(a)
delimiter
[(temp[0] + x) for x in temp[1:]] if len(temp) > 1 else input
delimiter
srf = pygame.display.set_mode((500, 500))
delimiter
self.agg_log.addHandler(logging.StreamHandler())
delimiter
gens.append(gen())
delimiter
mapf = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_WRITE)
delimiter
print(round.__doc__)
delimiter
dict()
delimiter
print(buff[:-1])
delimiter
test.cvec()[0] = 0
delimiter
rs = func(*args, **kwargs)
delimiter
pygame.init()
delimiter
print(pd.concat([df.iloc[(0), :], df.iloc[(-1), :]], axis=1).T)
delimiter
sip.delete(self.widget_name)
delimiter
a = np.zeros((4, 4))
delimiter
primerange(a, b)
delimiter
fig = plt.figure(figsize=(8, 6), dpi=100)
delimiter
plt.xticks(xvals, xnames)
delimiter
say_captcha_is_invalid()
delimiter
numSeq(1, 0, 0)
delimiter
file_content = f.read()
delimiter
f = (lambda a, b, c, **rest: lambda x: a + b * c - x)(**locals())
delimiter
container = models.ForeignKey(Dicty, db_index=True)
delimiter
iter(foo.splitlines())
delimiter
self.root.setLevel(logging.DEBUG)
delimiter
ax.set_xticks(arange(df.shape[1]))
delimiter
my_path = module_locator.module_path()
delimiter
self.testbed.deactivate()
delimiter
pb = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, False, 8, sz[0], sz[1])
delimiter
sys.stdout.write(frame.tostring())
delimiter
all_same([])
delimiter
[v for b, v in self._choices if b & selection]
delimiter
db = SQLAlchemy(app)
delimiter
self.companion.stdin.write(datum)
delimiter
type.__new__(self, name, bases, classdict)
delimiter
controllers / default.py
delimiter
img = Image.open(sys.argv[1])
delimiter
draw()
delimiter
ret = numpy.zeros(data.shape[:2], dtype=numpy.bool)
delimiter
WSGIPythonExecutable / path / to / python / 2.5 / exe
delimiter
plt.clf()
delimiter
d = os.path.abspath(startPath)
delimiter
fp.close()
delimiter
poly = PolyCollection(verts, facecolors=(1, 1, 1, 1), edgecolors=(0, 0, 1, 1))
delimiter
m.groupdict()
delimiter
self.Bind(wx.EVT_CHECKBOX, self.EvtCheckBox, self.checkbox[i])
delimiter
ui.syn()
delimiter
{{animal}}
delimiter
saved = locale.setlocale(locale.LC_ALL)
delimiter
example2(x, a, b, D)
delimiter
s.setsockopt(socket.SOL_TCP, socket.TCP_KEEPINTVL, 1)
delimiter
deletesys.modules[__name__]
delimiter
data.sort()
delimiter
plot(x, y1)
delimiter
MagicMock.__init__(self, *args, **kwargs)
delimiter
G.add_node(1, pos=(1, 1))
delimiter
user = models.OneToOneField(User)
delimiter
unittest.TextTestRunner(verbosity=2).run(suite())
delimiter
a = itertools.chain.from_iterable(x)
delimiter
self.node = Node()
delimiter
tup[1] << 8 | tup[0]
delimiter
assert len(s1) == len(s2)
delimiter
frame.grid_rowconfigure(0, weight=1)
delimiter
zip_longest(fillvalue=fillvalue, *args)
delimiter
self.lock = threading.Lock()
delimiter
shared_queue_list.append(shared_queue.get())
delimiter
fig, ax = plt.subplots(figsize=(8, 6))
delimiter
logger = logging.getLogger(__name__)
delimiter
digs[0]
delimiter
confused_array[mask] = 1
delimiter
child.kill()
delimiter
c.execute(query, flattened_values)
delimiter
[list(i) for i in set(map(tuple, (sorted(i) for i in a)))]
delimiter
person.guilds.append(self.key)
delimiter
self.master.rowconfigure(5, weight=1)
delimiter
np.isnan(A)
delimiter
[l[i:i + n] for i in range(0, len(l), n)]
delimiter
fig1 = plt.figure()
delimiter
cj = cookielib.CookieJar()
delimiter
python - pip
delimiter
list(islice(missing, 0, count))
delimiter
PyparsingGrammar.parseString(line)
delimiter
counts = Counter(a)
delimiter
os.rename(out_fname, fname)
delimiter
subprocess.call(cmd)
delimiter
results.predict(start, end)
delimiter
{an_object.name: an_object for an_object in object_list}
delimiter
b = models.ForeignKey(B)
delimiter
self.buf.read() + self.fileobj.read()
delimiter
x = SimpleClass()
delimiter
self.__dict__ = json.loads(j)
delimiter
uncompressed = zippy.read()
delimiter
plt.xlim(-1, 1)
delimiter
df.columns = df.columns.droplevel()
delimiter
median = df.impwealth[cumsum >= cutoff].iloc[0]
delimiter
time.sleep(timeout)
delimiter
help(my_list.append)
delimiter
array[i, j] += 10
delimiter
output = p2.communicate()[0]
delimiter
next_file.write(row)
delimiter
a.add(1)
delimiter
dosomethingelse
delimiter
fobj.seek(0)
delimiter
int(math.floor(math.log10(self.n) + 1))
delimiter
br.set_handle_robots(False)
delimiter
ax1.xaxis.tick_top()
delimiter
time.sleep(5)
delimiter
os.chown(path, _user, _group)
delimiter
stage.py
delimiter
result = list(create(20, dict))
delimiter
arrays = [np.asarray(x) for x in arrays]
delimiter
axes_1.axis([-5, 5, -5, 5])
delimiter
X = np.linalg.solve(A, np.ones((2 * (n - 1),)))
delimiter
list(db.collection.aggregate(pipeline))
delimiter
[pypitest]
delimiter
bpos += blo
delimiter
loader.write(response.read())
delimiter
np.prod(c.shape) == np.prod(a.shape) * np.prod(b.shape)
delimiter
dict2 = dict(dict1)
delimiter
id, value = zip(*ans)[:2]
delimiter
max(mywords, key=len)
delimiter
socket.inet_aton(addr)
delimiter
[(row[:column] + row[column + 1:]) for row in matrix]
delimiter
sorted(set(it.chain(*ranks)), key=c.__getitem__, reverse=True)
delimiter
a[b].mean()
delimiter
plt.figimage(a, cmap=plt.gray())
delimiter
spam_list.sort(key=order.get)
delimiter
fig, ax = plt.subplots()
delimiter
apply_labels(p1, labels)
delimiter
browser.close()
delimiter
cu.save()
delimiter
print(item.unique())
delimiter
coo = numpy.random.randint(0, N, size=(M, 2))
delimiter
normY = np.sqrt(ssY)
delimiter
RSAkey = RSA.generate(1024, rng)
delimiter
self.children.append(node)
delimiter
print(next(line))
delimiter
c = conn.cursor()
delimiter
control = wx.StaticBitmap(self, -1, bitmap)
delimiter
x = np.linspace(0, 2 * np.pi, 100)
delimiter
mailServer.close()
delimiter
project.save()
delimiter
list()
delimiter
map(itemgetter(1), sorted(m.groupdict().items()))
delimiter
win.add(scroll_win)
delimiter
pylab.gca().add_patch(patches.Polygon(pp, closed=False, fill=False))
delimiter
[e for e in l if e % 2]
delimiter
plt.show()
delimiter
outlist[-1].append(json.dumps({k: d[k]}))
delimiter
fig = plt.figure()
delimiter
result_queue.put(res)
delimiter
pdf = pyPdf.PdfFileReader(p)
delimiter
assert np.allclose(x, x1) and np.allclose(y, y1)
delimiter
matplotlib.__version__
delimiter
tfc = tf.Variable(npc)
delimiter
word_counter = Counter(words)
delimiter
result = [item for item in list_y if item[0:2] not in list_x_set]
delimiter
res.show()
delimiter
ax.contour(X, Y, Z)
delimiter
print(l[i])
delimiter
self.send_blob(blob_info, save_as=False)
delimiter
self.__dict__.update(kwargs)
delimiter
self.doc.getroot()
delimiter
l[i] = l[i] * 2
delimiter
print(mydict[alias1])
delimiter
i += 1
delimiter
data = np.random.random((N, 7))
delimiter
ax.set_aspect(1)
delimiter
neurons = [Neuron() for n in range(5)]
delimiter
getattr(self.obj, self.property_names[item])
delimiter
res.append(1)
delimiter
foo(iterable)
delimiter
joinable.append(mpp)
delimiter
self.pool = multiprocessing.Pool(processes=N_PROC)
delimiter
df
delimiter
c = b.flat
delimiter
gluOrtho2D(0.0, 1.0, 0.0, 1.0)
delimiter
plt.show()
delimiter
ax.figure()
delimiter
{letter: max(d[letter] for d in dicts) for letter in dicts[0]}
delimiter
ax.legend()
delimiter
result = requests.get(url)
delimiter
rlcn.method2()
delimiter
resident.ssa_set.all()
delimiter
i.split()
delimiter
user = session.query(User).get(someid)
delimiter
responses.pop()
delimiter
ax = plt.gca()
delimiter
print(i)
delimiter
y[words[0]].append(words[2])
delimiter
myModule.printY()
delimiter
fo.close()
delimiter
[e for e in foo(bar)]
delimiter
nbr_edgeobjects += 1
delimiter
foo.bar = bar
delimiter
target.send((key, n * 10))
delimiter
__init__.py
delimiter
handler = logging.StreamHandler()
delimiter
str.__new__(cls, content.upper())
delimiter
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
delimiter
response = requests.get(url)
delimiter
conn = imaplib.IMAP4_SSL(servername)
delimiter
Queue._put(self, item)
delimiter
ax.set_zlim([-1, 8])
delimiter
pdb.set_trace()
delimiter
2
delimiter
argsdict.update({argname: argvalue})
delimiter
plt.plot(list(range(10)))
delimiter
requests_log.setLevel(logging.WARNING)
delimiter
html = f.read()
delimiter
(1.5 < a) & (a < 2.5)
delimiter
print(list(cm.datad.keys()))
delimiter
json.dumps(dict(nodes=graph.nodes(), edges=graph.edges()))
delimiter
c = np.r_[a, b]
delimiter
fs, data = wavfile.read(filename)
delimiter
(0, 1), (5, 4)
delimiter
self.window.move(gtk.gdk.screen_width() - 100, 0)
delimiter
(xdiff.dot(Sigma_inv) * xdiff).sum(axis=-1)
delimiter
[0, 0, 0, 0, 0],
delimiter
mat[0] * (len(ixs) - np.count_nonzero(nzmask)) + nzsum
delimiter
partition(list(range(105)), 10)
delimiter
serverSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
opener = urllib.request.build_opener(authhandler)
delimiter
app.exec_()
delimiter
self.outstream.write(self.theA)
delimiter
plt.clf()
delimiter
cgi.test()
delimiter
fig = PLT.figure()
delimiter
1, 0, 0, 0, 1, 0, 1, 0, 0
delimiter
ranges.append((group[0], group[-1]))
delimiter
arr = input()
delimiter
a.insert(2, x)
delimiter
shutil.rmtree(tmp_dir)
delimiter
self.SetTopWindow(self.frame)
delimiter
self._d[self._s[k.lower()]]
delimiter
print(model.score(X, y))
delimiter
B = [4, 5, 6]
delimiter
all(list_of_bools)
delimiter
root = ET.fromstring(xml_str)
delimiter
deleted[k, j]
delimiter
some_value
delimiter
p.exists()
delimiter
fig.canvas.draw()
delimiter
row_ind.extend([k] * len(v))
delimiter
gcf().canvas.draw()
delimiter
dicto[ele[0][0]].append(ele)
delimiter
Fruit.__init__(self, **kwargs)
delimiter
width = t.winfo_width()
delimiter
task.retry(queue=task.request.hostname)
delimiter
hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
delimiter
mdls_output = pat.sub(myfn, mdls_output)
delimiter
print(obj.__class__.__name__)
delimiter
0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0
delimiter
pprint.pprint(value)
delimiter
(a[0], b[0]),
delimiter
data = numpy.where(selected_indices, [4, 5, 6], data)
delimiter
pd.DataFrame({n: foo(df.T[row].nlargest(k)) for n, row in enumerate(df.T)}).T
delimiter
pickle.dump(i, sys.stdout)
delimiter
df.drop_duplicates().A.value_counts()
delimiter
self.l.append(Tree(i - 1))
delimiter
result = urllib.request.urlopen(request).read()
delimiter
foo(*values)
delimiter
driver.close()
delimiter
b = numpy.random.randn(20, 20)
delimiter
parser = argparse.ArgumentParser()
delimiter
tree = ET.parse(filename, parser=LineNumberingParser())
delimiter
print(root.tk.splitlist(filez))
delimiter
grouped.last()
delimiter
c1, r1 = np.array([np.arange(10), np.arange(10)])
delimiter
im = im.resize((int(width / rat), int(height / rat)))
delimiter
df.groupby(date.values).mean()
delimiter
ax = plt.subplot(gs[:2, :])
delimiter
self.nesting += 1
delimiter
logging.setLoggerClass(Logger)
delimiter
number += 1
delimiter
sys.stdout.flush()
delimiter
imagelist.extend(glob.glob(os.path.join(image_directory, ext)))
delimiter
deletesys.path[-1]
delimiter
reader = csv.reader(f)
delimiter
data.mode
delimiter
server = smtplib.SMTP()
delimiter
angle2 = abs(math.degrees(math.atan(slope2)))
delimiter
df[list_of_cols].dropna(thresh=1).head()
delimiter
sys.modules[__name__] = Wrapper(sys.modules[__name__])
delimiter
probs = [0.1, 0.2, 0.5, 0.2]
delimiter
sys.excepthook = debugexcept
delimiter
[strs[i] for i in list(ret)]
delimiter
draw.ellipse([left, top, right, bottom], fill=fill)
delimiter
a.some.__self__ is a
delimiter
x += np.random.random(size=12)
delimiter
toc2(False)
delimiter
print(django.get_version())
delimiter
print(str(item))
delimiter
worksheet.update()
delimiter
pattern = eval(input())
delimiter
source = inspect.getsource(func)
delimiter
tot += (((data[i + 1:] - data[i]) ** 2).sum(1) ** 0.5).sum()
delimiter
my_set = set(my_list)
delimiter
x = np.arange(100, 1, -1)
delimiter
h.digest()
delimiter
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
fig.canvas.draw()
delimiter
angle1 = abs(math.degrees(math.atan(slope1)))
delimiter
slither / slither / __init__.py
delimiter
columns = [i[0] for i in cursor.description]
delimiter
c = [(x + y) for x, y in zip(a, b)]
delimiter
mail.inbox()
delimiter
pydevd.settrace(suspend=False)
delimiter
print(f.read())
delimiter
driver.set_window_size(1024, 768)
delimiter
url = s.get_location()
delimiter
self.close()
delimiter
ax = subplot(111)
delimiter
setattr(theclass, x, logging(getattr(theclass, x)))
delimiter
i = Image.open(sys.argv[1])
delimiter
a = qt.QApplication(sys.argv)
delimiter
ax = fig.add_subplot(111)
delimiter
sys.exit()
delimiter
my_opener = urllib.request.build_opener(MyHTTPHandler)
delimiter
datetime.datetime(*t[:6])
delimiter
cv2.line(vis, (x1, y1), (x2, y2), green)
delimiter
[[x.strip() for x in row] for row in reader]
delimiter
fn = (lambda x: x) if True else lambda x: x * x
delimiter
ax.add_patch(p1)
delimiter
k, v = t.pop(0)
delimiter
blih()
delimiter
bluh()
delimiter
sys.stdin.readline()
delimiter
shutil.rmtree(to_path)
delimiter
repeated = [i for i in lst if lst.count(i) > 1]
delimiter
ax.plot(list2)
delimiter
response = urllib.request.urlopen(req)
delimiter
logging.info(str(item))
delimiter
fig = pl.figure()
delimiter
result = [[i for i, row in enumerate(X) if (s == row).all()] for s in S]
delimiter
mask = np.ones(a.shape, dtype=bool)
delimiter
print(new_str)
delimiter
counts, edges = np.histogram(np.random.rand(100), bins=cdf)
delimiter
Ig = arange(t1.min(), t1.max(), 1)
delimiter
sys.stdout.write(c)
delimiter
nx.simple_cycles(G)
delimiter
print(str(d))
delimiter
np.maximum(x, 0)
delimiter
self.timer = QtCore.QTimer()
delimiter
final.append(compound[x - 1])
delimiter
w, h = map(int, f.readline().split())
delimiter
re.findall(RE, string)
delimiter
df[cols].sum(axis=1)
delimiter
dc.SetBackground(wx.Brush(self.GetBackgroundColour()))
delimiter
pd.DataFrame(Dict)
delimiter
module = sys.modules[__name__]
delimiter
GinvVV = np.asarray(GinvVV)
delimiter
data = urllib.request.urlopen(url).read()
delimiter
c.release()
delimiter
jsonObj = json.dumps(data)
delimiter
key, value = line.split()
delimiter
parser = argparse.ArgumentParser()
delimiter
100 * np.round(dfrm, 2)
delimiter
[2]
delimiter
result = {}
delimiter
self.response.write(rv)
delimiter
self.schedule.cancel(self.event)
delimiter
win.SetPosition((x, y))
delimiter
__hello()
delimiter
word_freq.update(line.split())
delimiter
foo(a)
delimiter
self.cursor.close()
delimiter
cr.set_source_rgba(0.0, 0.0, 0.0, 0.0)
delimiter
next(func)
delimiter
s[:i] + s[i:].capitalize()
delimiter
sys.path.append(os.path.dirname(fullpath))
delimiter
ax = fig.add_subplot(111)
delimiter
temp.__setitem__(0, 1)
delimiter
fig.colorbar(im)
delimiter
np.lib.stride_tricks.as_strided(a, shape=shape, strides=strides)
delimiter
myset.pop()
delimiter
self.__dict__.update(*args, **kwargs)
delimiter
print(key, value)
delimiter
MyModel2.mymodel1.through.objects
delimiter
p.open_files()
delimiter
self.mtx.lock()
delimiter
test[-1] += 1
delimiter
ax.yaxis.set_tick_params(size=0)
delimiter
self.lock = multiprocessing.Lock()
delimiter
ode15s.set_initial_value(u0, t0)
delimiter
print(input[indices[indices < 5]])
delimiter
gen = (n for n in range(0, 11))
delimiter
pwd.getpwuid(os.getuid())[0]
delimiter
db.collection.find(condition).limit(1).skip(Math.floor(Math.random() * N))
delimiter
iter([self.instanceA, self.instanceB, self.instanceC])
delimiter
new_body_text = re.sub(pattern, FootnoteNumbers(), text)
delimiter
args.func(**args_for_func)
delimiter
foo()
delimiter
myPopy.wait()
delimiter
SPN[0].shape
delimiter
QtCore.QObject.__init__(self, parent)
delimiter
indices = range(len(li) - 1, 0, -1)
delimiter
self.move(frameGm.topLeft())
delimiter
nDigits = 1 + floor(log(nmb, base))
delimiter
print(etree.tostring(root))
delimiter
p.name()
delimiter
f(*args, **kwargs)
delimiter
print(repr(s.getvalue()))
delimiter
df
delimiter
Z = inner1d(X, Y)
delimiter
print(df.columns[np.argsort(-df.values, axis=1)[:, :2]])
delimiter
a = np.arange(50)[::-1]
delimiter
ax1 = fig.add_subplot(2, 1, 1)
delimiter
list(range(10 ** 14, 10 ** 15, 10 ** 14))
delimiter
form = ModelForm(request.POST, request.FILES)
delimiter
print(s.rhyme())
delimiter
pytime = os.path.getmtime(os.path.join(root, sc))
delimiter
self.cumweights.append(cumsum)
delimiter
copytree(srcname, dstname, symlinks, ignore)
delimiter
line = input()
delimiter
pool = multiprocessing.Pool()
delimiter
df = df.sort()
delimiter
mylist.pop(0)
delimiter
f.seek(0)
delimiter
db = SQLAlchemy(app)
delimiter
id(np.nan) == id(np.nan)
delimiter
x[i] = y - 1
delimiter
sys.exit()
delimiter
tree = et.fromstring(xml)
delimiter
user = models.ForeignKey(User, unique=True)
delimiter
self.tags.add(tag)
delimiter
data = np.array(im)
delimiter
c2.setopt(pycurl.PROXYTYPE, pycurl.PROXYTYPE_SOCKS5)
delimiter
print(e.tag, e.text, repr(e.tail))
delimiter
G.add_edge(1, 2)
delimiter
start_thread()
delimiter
out.write(txt)
delimiter
self.SetSizer(sizer)
delimiter
len(answer) - star_len, star_len, len(prediction) - star_len
delimiter
G.add_edge(4, 5)
delimiter
plt.figure()
delimiter
cmat1 = scipy.sparse.csc_matrix(mat1)
delimiter
{1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0}
delimiter
f.set_axis_off()
delimiter
print(s)
delimiter
obj = json.loads(s, object_hook=_decode_dict)
delimiter
zip_longest(fillvalue=padvalue, *([iter(iterable)] * n))
delimiter
canvas.show()
delimiter
print(df1.div(len(df.index)))
delimiter
np.sum(a.dot(b), axis=0)
delimiter
client.set_missing_key_policy(paramiko.AutoAddPolicy())
delimiter
df1.update(df1_updater)
delimiter
sfile.close()
delimiter
npage = pdf_im.getNumPages()
delimiter
virtualenv - p / path / to / python - anaconda - version
delimiter
Xmesh, Ymesh = np.meshgrid(np.linspace(0, 1, Nx), np.linspace(0, 1, Ny))
delimiter
self.run()
delimiter
fig, axes = plt.subplots(nrows=2, ncols=2)
delimiter
tf.pack(states)
delimiter
s.quit()
delimiter
args = parser.parse_args()
delimiter
(a[i:] > a[i]).nonzero()[0][0] + i
delimiter
tar.close()
delimiter
cr.rectangle((0, 0) + size)
delimiter
nanoseconds = int(time.time() * 1000000000.0)
delimiter
xs = np.random.choice(arr, n - 1)
delimiter
screen.getch()
delimiter
page_source = browser.page_source
delimiter
opener.open(url).read()
delimiter
handles, labels = ax.get_legend_handles_labels()
delimiter
open(path, mode)
delimiter
wPM.restype = wintypes.BOOL
delimiter
tokens = [t.lower() for t in tokens]
delimiter
i = i + 1
delimiter
out, err = process.communicate()
delimiter
d.setdefault(k, set())
delimiter
window.mainloop()
delimiter
line = proc.stdout.readline()
delimiter
plt.show()
delimiter
plt.plot(x, s(x))
delimiter
df = (df1 - df2).dropna().copy()
delimiter
array[x, y]
delimiter
print((date_cand, (datetime.date.today() - date_cand.date()).days))
delimiter
b = [4, 5, 6]
delimiter
base64.b64encode(dig).decode()
delimiter
plt.imshow(image)
delimiter
pygame.init()
delimiter
local_p = subprocess.Popen(local_command, shell=True, stdout=subprocess.PIPE)
delimiter
x
delimiter
mail = outlook.CreateItem(0)
delimiter
self.updateimage(0)
delimiter
x.bit_length() - 1
delimiter
result = float(literal_eval(float_str))
delimiter
d_out.update(d)
delimiter
self.server_activate()
delimiter
mvaddch(y, x, ch)
delimiter
updated_dict = dict(old_dict, **extra_dict)
delimiter
get_func.__func__ is Client.get.__func__
delimiter
pix[x, y] = value
delimiter
getattr(self, name)
delimiter
key in self.data
delimiter
move_set.add(random.randrange(0, 10))
delimiter
conn.starttls()
delimiter
self.table.verticalHeader().setTextElideMode(QtCore.Qt.ElideRight)
delimiter
self.figure = Figure()
delimiter
now.date()
delimiter
browser = mechanize.Browser()
delimiter
popularity = sorted(d, key=d.get, reverse=True)
delimiter
c[:, 1:] == c[:, :-1]
delimiter
user = User.objects.get(pk=profile.user_id)
delimiter
set_columns(widget.columnCount(), 0)
delimiter
plt.yticks([])
delimiter
print(platform.mac_ver()[0])
delimiter
self.cdfunc._func(self.obj, *args, **kwargs)
delimiter
a, b, c, d, e
delimiter
plt.plot(X, Y)
delimiter
defaultdict(partial(numpy.ndarray, 0))
delimiter
f = urllib.request.urlopen(self.url)
delimiter
nosetests - s
delimiter
cv2.LUT(image, table)
delimiter
driver = webdriver.Firefox()
delimiter
test_column = Column(Unicode(2), primary_key=True)
delimiter
(a - b).days
delimiter
date += timedelta(days=10)
delimiter
print(time.time() - start)
delimiter
csv.writer(fw).writerows(data)
delimiter
position = models.CharField(max_length=128)
delimiter
monthrange(2011, 2)
delimiter
np.random.choice(np.arange(len(b)), 5, p=b / len(a), replace=False)
delimiter
output.append(line)
delimiter
myset = set(mylist)
delimiter
pool.map(process_image, data_inputs)
delimiter
bs = BeautifulSoup.BeautifulSoup(data)
delimiter
form = CostForm(request.POST)
delimiter
print(matches.group(1))
delimiter
l1 = list(set(l1).difference(l2))
delimiter
self.left.append(v)
delimiter
self.entry = tk.Entry(self)
delimiter
sys.exit(-1)
delimiter
len(set((t0, t1)))
delimiter
plt.subplots_adjust(wspace=0)
delimiter
len(d.stack())
delimiter
grouped.JobNos.sum().idxmax()
delimiter
ax.set_xticks(his[1][1:] + offset)
delimiter
s.close()
delimiter
transCount % 2 == 0
delimiter
y[(0), :, (0), :]
delimiter
nums = [random.randrange(1, 10) for i in range(digit_count)]
delimiter
{k: set(g) for k, g in itertools.groupby(words_sorted, key=len)}
delimiter
lock = threading.Lock()
delimiter
curs.fetchone()
delimiter
diff_unique = list(set(diff_list) - set(source_list))
delimiter
d.div(d.abs()).fillna(0)
delimiter
tree = ET.ElementTree(root)
delimiter
tmp_arr.append(float(j) / float(a))
delimiter
ch = os.read(sys.stdin.fileno(), 1)
delimiter
first_it = iter(my_list)
delimiter
printbob.py
delimiter
list(zip(s, s[1:] + s[:1]))
delimiter
self.cam.read()
delimiter
choices = [random.choice(v) for k, v in list(your_dict.items())]
delimiter
fig.tight_layout()
delimiter
output.close()
delimiter
sum(g)
delimiter
dbs
delimiter
dx = 0
delimiter
df = pd.DataFrame(d)
delimiter
seen.add(item)
delimiter
self.crawler.install()
delimiter
plt.xlim(0, X.shape[1])
delimiter
loglogmod.fit(x, y)
delimiter
data.append([c.text_content() for c in row.getchildren()])
delimiter
os.system
delimiter
self.board[x]
delimiter
tuple([x for x, y, z in G])
delimiter
ourSocket = socket.socket(socket.AF_INET6, socket.SOCK_STREAM, 0)
delimiter
args = parser.parse_args()
delimiter
print(values[:, (0)].sum())
delimiter
getattr(self, attr_name)
delimiter
max(map(len, stringlist))
delimiter
g.nth(1).dropna()
delimiter
wx.EVT_UPDATE_UI(self, self.GetId(), self.onUpdateUI)
delimiter
b = np.zeros((M.shape[0], M.shape[1], M.shape[1]))
delimiter
df
delimiter
names = dir(self.__class__)
delimiter
df.apply(pd.Series.value_counts)
delimiter
task_postrun.connect(self.task_done)
delimiter
self.browser.select_form(nr=0)
delimiter
result.append(key_result)
delimiter
dis.dis(test6)
delimiter
df.loc[:, (cols)] = df[cols].where(df[cols].where.ge(0), np.nan)
delimiter
z.min(), z.argmin()[0], z.argmin()[1]
delimiter
self.ser.write(packet)
delimiter
doc.firstChild.appendChild(elem)
delimiter
zip_list = zip(A, cycle(B)) if len(A) > len(B) else zip(cycle(A), B)
delimiter
sns.plt.show()
delimiter
d = defaultdict(dict)
delimiter
modify_legend(numpoints=1)
delimiter
plt.legend()
delimiter
sum(bits * u[::-1], 1)
delimiter
dis.dis(bar)
delimiter
df
delimiter
r, g, b = hsv_to_rgb(h, s, v)
delimiter
d = {}
delimiter
np.ma.MaskedArray(a, mask=(np.ones_like(a) * (a[:, (0)] == 1)).T)
delimiter
main()
delimiter
f(d)
delimiter
self.date = d.astimezone(pytz.utc)
delimiter
result = sorted((min_value, result, max_value))[1]
delimiter
list_req = [my_replace(seq, *x) for x in l]
delimiter
print(element.text)
delimiter
tmp[i][j] = src[i, j]
delimiter
print(str(b))
delimiter
n_items = take(n, iter(d.items()))
delimiter
array([lapack_inverse(a) for a in A])
delimiter
p2 = interpolate.PiecewisePolynomial(x2, y2[:, (np.newaxis)])
delimiter
array([[True, False], [False, False]], dtype=bool)
delimiter
G.add_edge(1, 2)
delimiter
memcache_client.set(key, obj)
delimiter
s.send(line)
delimiter
line = input.readline().strip()
delimiter
time.sleep(0.5)
delimiter
numpy.sqrt(numpy.sum((x - y) ** 2))
delimiter
ax.scatter(x, y, z)
delimiter
logging.Handler.__init__(self)
delimiter
item.setToolTip(item.text())
delimiter
sleep(0)
delimiter
structured_dictionary = json.loads(string_received)
delimiter
simplejson.dumps(userJSON)
delimiter
axins.set_xlim(x1, x2)
delimiter
self._data
delimiter
print(files.sort(reverse=True))
delimiter
dominated.append(candidate)
delimiter
f.write(template.format(df.to_latex()))
delimiter
lines[:, (-offset)]
delimiter
foo()
delimiter
self.layout = QtGui.QVBoxLayout(self)
delimiter
print(list(squares(20, 90)))
delimiter
result.resize((64, 64), Image.ANTIALIAS).save(sys.argv[2])
delimiter
self.data[i]
delimiter
f.readlines()[line_number - 1]
delimiter
plt.scatter(x, y, c=z)
delimiter
Base = declarative_base()
delimiter
[alist[i::sublen] for i in range(numrows)]
delimiter
map(str.upper, strs)
delimiter
print(t[1][0])
delimiter
lines = [line.strip() for line in file if line.strip()]
delimiter
taskbar.SetProgressValue(self.winId(), 40, 100)
delimiter
potentialClosest = dist.argmin(axis=1)
delimiter
myseries_three.iloc[0:2]
delimiter
writer.writerow(row)
delimiter
print(yaml.dump(o1))
delimiter
pd.DataFrame(arr).groupby([0, 1, 2]).max().reset_index()
delimiter
root.destroy()
delimiter
print(response.read())
delimiter
absx = np.abs(X[-np.isnan(X)])
delimiter
f(*full_args, **kwargs)
delimiter
mn = s.index(t.lower())
delimiter
[[map[x] for x in y] for y in input]
delimiter
my_list = [1, 2, 4, 6, 7]
delimiter
context = self.get_context_data(**kwargs)
delimiter
counts = map(Counter, zipped)
delimiter
mults.append(1)
delimiter
g.__name__
delimiter
subprocess.check_call(cmd, stdout=outputfile, stderr=subprocess.STDOUT)
delimiter
ax.set_aspect(1)
delimiter
count += 1
delimiter
pygame.font.init()
delimiter
wmctrl - l
delimiter
worksheet.write(r, c, col)
delimiter
app.run(debug=True)
delimiter
df1 = df[~mask].copy()
delimiter
count += 1
delimiter
accumulationList = []
delimiter
plt.plot(list(range(5)))
delimiter
print(df)
delimiter
A.print_x(b)
delimiter
data = db.query(sql).store_result()
delimiter
activate(settings.TIME_ZONE)
delimiter
sorted_li.sort(key=itemgetter(0))
delimiter
print(sess.run(y, feed_dict={x: data}))
delimiter
u, array([len(input[all(input == x, axis=1)]) for x in u], dtype=int)
delimiter
c = Counter(tuple(x) for x in iter(list1))
delimiter
start += step
delimiter
ssq1 = ((yfit1 - ydata) ** 2).sum()
delimiter
conn.commit()
delimiter
print(df.index.name)
delimiter
os.seteuid(0)
delimiter
signal.signal(signal.SIGINT, signal_handler)
delimiter
print([T(val, [0.29, 4.5]) for val in data[0]])
delimiter
isinstance(bar, types.FunctionType)
delimiter
tws.connect()
delimiter
canvas.setPageSize(11 * inch, 8.5 * inch)
delimiter
sorted(x * x for x in range(10))
delimiter
q = Queue()
delimiter
OrderedDict((newkey if k == oldkey else k, v) for k, v in _.items())
delimiter
self.some_text.SetLabel(mysql_data)
delimiter
final_sorted = [(y, z) for x, y, z in sorted_stuff]
delimiter
draw.ellipse((0, 0) + bigsize, fill=255)
delimiter
a = [sorted(i) for i in a]
delimiter
root = tree.getroot()
delimiter
app.exec_()
delimiter
result.append(x)
delimiter
wordorder.index(word)
delimiter
choice = input()
delimiter
items.append(x)
delimiter
view.show()
delimiter
tree = ET.parse(pathToFile, OrderedXMLTreeBuilder())
delimiter
t.start()
delimiter
width = img.get_width()
delimiter
start.focus_set()
delimiter
random.shuffle(lst)
delimiter
p.xs(0)
delimiter
unittest.main()
delimiter
b = copy.deepcopy(a)
delimiter
BW = 20000.0
delimiter
fig.get_size_inches()
delimiter
ax.legend(bbox_to_anchor=(1.1, 1.05))
delimiter
root = Tk()
delimiter
X, Y = np.ogrid[0:sx, 0:sy]
delimiter
pool = multiprocessing.Pool(processes=6)
delimiter
ax = plt.subplot(111)
delimiter
map(lambda e: (e, key), elements)
delimiter
wrapper
delimiter
list(data_set.itertuples(index=False))
delimiter
a = np.ascontiguousarray(a)
delimiter
{{mywidget.body()}}
delimiter
self.write(self.request.path)
delimiter
print(p.findall(s))
delimiter
args = parser.parse_args()
delimiter
cols = np.ones(rows.shape[0], dtype=np.int)
delimiter
r.append(random.choice(a))
delimiter
pl.show()
delimiter
trans = ssh.get_transport()
delimiter
self._window.show_all()
delimiter
sys.stdout = F()
delimiter
df = sqlContext.createDataFrame(pdf)
delimiter
height = win.winfo_height()
delimiter
a.append(1)
delimiter
j = b.index(p[1])
delimiter
a = numpy.array([1, 2, 1e1000, 1e1000, 42])
delimiter
plot(x, y2)
delimiter
sheet = book.sheet_by_name(name)
delimiter
self.lock = threading.Lock()
delimiter
g.map_dataframe(lambda data, color: sns.heatmap(data.corr(), linewidths=0))
delimiter
c.hello()
delimiter
ax.plot(theta, mapr(r))
delimiter
lists.append(lst)
delimiter
random.randint(1, 100)
delimiter
array = np.array(list(result.items()), dtype=dtype)
delimiter
br.select_form(nr=1)
delimiter
item1, item2 = random.sample(list1, 2)
delimiter
float.hex(6.6)
delimiter
exit()
delimiter
a.quantize(b) == b
delimiter
self.scrollbar.config(command=self.text.yview)
delimiter
func()
delimiter
[k for k in list(mydict.keys()) if k >= 6]
delimiter
self.text.configure(yscrollcommand=self.vsb.set)
delimiter
layout.addWidget(self.le)
delimiter
mocked = MockAnything()
delimiter
random.shuffle(s)
delimiter
s.translate(table, string.punctuation)
delimiter
file.close()
delimiter
array([0.09, 0.1, 0.1, 0.08, 0.08, 0.14, 0.1, 0.12, 0.09, 0.1])
delimiter
raise ValueError
delimiter
df[new_col] += [int(a != 0) for a in df[col]]
delimiter
_.reshape(-1, ncols)
delimiter
print(current_credentials.token)
delimiter
process.start()
delimiter
s = socket.socket()
delimiter
print(date.fromtimestamp(d))
delimiter
self.Layout()
delimiter
M = np.matrix([[1.0, 0.0], [0.5, 0.5]])
delimiter
[f(0) for f in fs]
delimiter
mask = x ** 2 + y ** 2 <= r ** 2
delimiter
input_thread.start()
delimiter
p.hello()
delimiter
print(child.tag, child.text)
delimiter
os.setsid()
delimiter
new_list = old_list[:]
delimiter
print(line)
delimiter
out.append(s)
delimiter
f2.write(line)
delimiter
c.call(1)
delimiter
repr(tst)
delimiter
a, b = tee(iterable)
delimiter
[s for s in students if s[1] == value or s[2] == value]
delimiter
sys.stdout.buffer.flush()
delimiter
ax.add_artist(circle2)
delimiter
ax.add_artist(circle1)
delimiter
numpy.around(arr, 10, arr)
delimiter
exec(my_code, mymodule.__dict__)
delimiter
print(fn(5, 7))
delimiter
[4]
delimiter
send_from_directory(app.static_folder, request.path[1:])
delimiter
bf.close()
delimiter
object.__cmp__(self, other)
delimiter
[s for s in strs if s.isalpha()]
delimiter
app = Flask(__name__)
delimiter
b = [a] * 5
delimiter
self._socket = socket.socket()
delimiter
eggs.parent.bar()
delimiter
r.connection.close()
delimiter
event.Skip()
delimiter
conf.write()
delimiter
tf.reset_default_graph()
delimiter
2 - 1.0585
delimiter
form = YourForm()
delimiter
button.pack(side=RIGHT)
delimiter
fpout.write(jsonform)
delimiter
plt.grid(True)
delimiter
pipe = sp.Popen(command, stdout=sp.PIPE, stderr=sp.STDOUT)
delimiter
f(*list(newdict.values()))
delimiter
print(args.foo)
delimiter
[0, 8, 8, 8, 8, 8, 8, 8, 8, 8]
delimiter
Pool(processes, initializer, initargs, maxtasksperchild)
delimiter
df.index = pd.MultiIndex.from_tuples([tup])
delimiter
count = count + 1
delimiter
results = multiprocessing.Queue()
delimiter
l.remove(x)
delimiter
set_to_string = dict(zip([frozenset(s.split()) for s in strings], strings))
delimiter
fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)
delimiter
y_train_0 = y_train[y_train == 0]
delimiter
soup = BeautifulSoup(data)
delimiter
fo.write(fi.read())
delimiter
fig, ax = plt.subplots()
delimiter
C[i][j] += A[i][k] * B[k][j]
delimiter
new_dict = {}
delimiter
setattr(cls, name, decorator(m))
delimiter
b.update({key: (a[key], b[key]) for key in set(a.keys()) & set(b.keys())})
delimiter
fig, ax = plt.subplots(1, 1)
delimiter
r.supplier.name
delimiter
favicon.ico
delimiter
results[el] = [select(ls2, ii) for ii in [0, 1, 2]]
delimiter
current_user.append(line[9:].strip())
delimiter
print(wts[1])
delimiter
img = cam.get_image()
delimiter
print(someclass())
delimiter
list_size_1 = numpy.array(list_size_1)
delimiter
layout.addWidget(frame)
delimiter
source.applescript
delimiter
net.layers[1].blobs[1].data.shape
delimiter
app = flask.Flask(__name__)
delimiter
rss = psutil.Process(os.getpid()).get_memory_info().rss
delimiter
row[0] + row[1]
delimiter
self.delays[type].setdefault(key, 0)
delimiter
req = urllib.request.urlopen(url)
delimiter
strings = [frozenset(s.split()) for s in strings]
delimiter
plt.clf()
delimiter
ax = plt.gca()
delimiter
len([c for c in word if c == char])
delimiter
decorator1(decorator2(func))
delimiter
time.sleep(0)
delimiter
[0, 0, 0, 0, 0, 0, 0, 0, 162, 2],
delimiter
df = pd.DataFrame(np.random.randint(4, size=(5, 1)))
delimiter
bar1 = Bar.objects.get(pk=1)
delimiter
now = datetime.datetime.now()
delimiter
r.append(etree.tostring(item, with_tail=False))
delimiter
wx.StaticBitmap(panel, -1, gif, (10, pos), (gif.GetWidth(), gif.GetHeight()))
delimiter
parser = etree.XMLParser(remove_comments=True)
delimiter
results = [r for r, in results]
delimiter
plt.plot(pd.Series(data=np.random.randn(100), index=i))
delimiter
os.fchmod(fd.fileno(), stat.S_IMODE(mode))
delimiter
(a,) + ((b,) if bret else ()) + ((c,) if cret else ())
delimiter
res[0] += val
delimiter
sympy.diff(f, x)
delimiter
display(yourobject)
delimiter
Thread(target=print_output, args=(p.stdout,)).start()
delimiter
df = pd.DataFrame(lst)
delimiter
xadf = np.diff(xa1)
delimiter
ax.plot(data2)
delimiter
match = re.search(pattern, s)
delimiter
anniversary = models.ForeignKey(Anniversary)
delimiter
self.numbers = list(range(1, 10))
delimiter
B = np.array([0, 0, 0])
delimiter
pyplot.show()
delimiter
p = multiprocessing.Pool(processes=4)
delimiter
all_gt10 = [i for i in mylist if i > 10]
delimiter
offsets = itertools.product([-1, 0, 1], [-1, 0, 1])
delimiter
csvfile.truncate()
delimiter
list.__getitem__(self, item)
delimiter
action()
delimiter
[isinstance(x, numbers.Number) for x in (0, 0.0, 0j, decimal.Decimal(0))]
delimiter
parser = argparse.ArgumentParser()
delimiter
underscoreize(data)
delimiter
ax.plot(x, np.sin(x) + i)
delimiter
Planet.VENUS.radius
delimiter
app.send_static_file(filename)
delimiter
handler = logging.StreamHandler()
delimiter
grdevices.dev_off()
delimiter
own_fhd = True
delimiter
df = pd.DataFrame(np.random.rand(15, 5), index=[0] * 15)
delimiter
AC_PROG_LIBTOOL
delimiter
plt.legend()
delimiter
in_tree[0:1] + in_tree[1:][::-1]
delimiter
print(add(**kwargs))
delimiter
dir(e.args[0])
delimiter
[foo]
delimiter
client_socket.send(strng)
delimiter
p.kill()
delimiter
self.items.append(item)
delimiter
b_to_a = np.argsort(a_to_b)
delimiter
print(stopword_pattern)
delimiter
self.view.setModel(self.model)
delimiter
dropped = df.drop(list(range(5)), inplace=True)
delimiter
instance = class_()
delimiter
new_data = ndi.map_coordinates(data, idx)
delimiter
driver = webdriver.Chrome()
delimiter
func = lambda x, y: (x, y)
delimiter
print(f.__defaults__)
delimiter
print(x.eval())
delimiter
[ax.add_patch(rect) for rect in rects]
delimiter
int(argv[2])
delimiter
Counter(tuple(x) for x in a)
delimiter
print(df1.combine_first(df2))
delimiter
logging.Handler.__init__(self)
delimiter
[next(part for part in path.split(os.path.sep) if part) for path in paths]
delimiter
plt.plot(h, pdf)
delimiter
self.ax.set_xlim(xmin, xmax)
delimiter
k = literal_eval(s)
delimiter
b_set = set(map(tuple, a))
delimiter
list(od.keys())
delimiter
2, [True, False, True, False]
delimiter
termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
delimiter
interpreter.process_page(page)
delimiter
print(input())
delimiter
list(globals().keys())
delimiter
ax = self.figure.add_subplot(111)
delimiter
plt.show()
delimiter
do_something(current_file)
delimiter
dict(next(iter(i.items())) for i in g)
delimiter
it.operands[-1]
delimiter
is_const(x) and is_datatype_constructor(x)
delimiter
num = int(s)
delimiter
next(zip(*G))
delimiter
td.seconds / 60
delimiter
print(line, count)
delimiter
unattachedvolumes()
delimiter
evts = poller.poll(1000)
delimiter
newfunc
delimiter
G.add_edge((q, r), (q - 1, r + 1))
delimiter
session.query(entity).filter_by(name=name).one()
delimiter
print(df)
delimiter
list1[:i]
delimiter
x, y = screen.get_size()
delimiter
cur = conn.cursor()
delimiter
Q0 = e1sq * math.pow(math.cos(phi1), 2)
delimiter
df6[col] = df6[col].astype(dtype)
delimiter
sorted(set(li))[-(n + 1)]
delimiter
p2.join()
delimiter
pattern.findall(data)
delimiter
output = int(process.stdout.readline())
delimiter
[r for r in x if not yy.search(r)]
delimiter
traces = traces[::-1]
delimiter
r = [s[i:i + 2] for i in range(0, len(s), 2)]
delimiter
oggi = datetime.now(IT).date()
delimiter
sublist(a[1:], b[k + 1:])
delimiter
dt
delimiter
nat != nat
delimiter
fig = plt.figure()
delimiter
thread.start()
delimiter
np.put(arr, list(range(num)), np.nan)
delimiter
list(range(item.start, item.stop, item.step))
delimiter
print(hash.hexdigest())
delimiter
dict_words = map(str.lower, list(dict_1.values()))
delimiter
fig = plt.figure()
delimiter
x = [True, False, False, True]
delimiter
f(my_list)
delimiter
print(len(set(hashes)))
delimiter
self.window.show()
delimiter
list(sympy.sieve.primerange(0, 100))
delimiter
self.urole
delimiter
b = np.where(a.all(axis=1).any(axis=1))[0]
delimiter
start_server()
delimiter
testVar.append(2)
delimiter
b = models.ForeignKey(B)
delimiter
df.columns[1:]
delimiter
append(result, i, j)
delimiter
df2.name.str.strip().str.upper()
delimiter
CoverageACol = arange(10).reshape(2, 5)
delimiter
result = np.vstack((ranges[starts, 0], ranges[ends, 1])).T
delimiter
s = {n for v in list(my_dict.values()) for n in v}
delimiter
print(unique_list)
delimiter
self.__dict__[attr] = value
delimiter
ax.yaxis.set_major_locator(MaxNLocator(integer=True))
delimiter
monkey.patch_all()
delimiter
[1, 2, 6, 7, 8, 9, 10, 11]
delimiter
assert not self.test_user.is_staff
delimiter
start_of_week
delimiter
temp_data.remove(word)
delimiter
cv2.drawContours(img, [cnt], 0, (255, 0, 0), 2)
delimiter
ctypes.pythonapi.Py_DecRef(pyobj)
delimiter
random.shuffle(lines)
delimiter
soup = BeautifulSoup(data)
delimiter
parser.parse_args()
delimiter
plt.subplot(121)
delimiter
imshow(mycmap(Z2), extent=extent)
delimiter
session.cookies.get_dict()
delimiter
termf.pack(fill=BOTH, expand=YES)
delimiter
fig.canvas.draw()
delimiter
timezone.localtime(value)
delimiter
ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER)
delimiter
numpy_dict = np.array(values, dtype=dtype)
delimiter
round_to_1(4)
delimiter
nms[nms.name.notnull()]
delimiter
a = np.random.rand(500, 500)
delimiter
parser.parse(strtime)
delimiter
option.impliedVolatility(11.1, process)
delimiter
print(k, v)
delimiter
c = wmi.WMI()
delimiter
SUDO_UID
delimiter
self.value < other.value
delimiter
a[0, 2]
delimiter
sum(random.permutation(x))
delimiter
[df[1:]]
delimiter
set(l1)
delimiter
A * numpy.exp(-(x - mu) ** 2 / (2.0 * sigma ** 2))
delimiter
logger.addHandler(handler1)
delimiter
text(np.mean(s[:, (0)]), np.mean(s[:, (1)]), str(i), fontsize=14)
delimiter
self.commitData.emit(self.sender())
delimiter
user1 = User.query.filter_by(id=1).first()
delimiter
client = gspread.authorize(credentials)
delimiter
list(chain.from_iterable(listOfLists))
delimiter
print(result)
delimiter
f.write(file_content)
delimiter
s = paramiko.SSHClient()
delimiter
tree.write(datafile)
delimiter
to_product.append([(k, i) for i in v])
delimiter
ConvertToString(HexString)
delimiter
app.exec_()
delimiter
sb.set_palette(cmap, n_colors=8)
delimiter
HTMLParser.__init__(self)
delimiter
print(is_int(x))
delimiter
do_stuff()
delimiter
main()
delimiter
self.main_container.grid_columnconfigure(0, weight=1)
delimiter
sess = tf.Session(config=session_config, graph=graph)
delimiter
ax2 = pyplot.axes([0, 0, 1, 1], axisbg=(1, 1, 1, 0))
delimiter
a, b = zip(*z)
delimiter
config.VAR1
delimiter
layout = QtGui.QVBoxLayout(self)
delimiter
file.seek(0, os.SEEK_END)
delimiter
bool(ImageChops.difference(*imgs).getbbox())
delimiter
plt.semilogy(xf, 2.0 / N * np.abs(yf[0:N / 2]))
delimiter
time.sleep(self.interval)
delimiter
fig = plt.figure(figsize=(10, 6))
delimiter
Gtk.main_quit()
delimiter
s2 = my_df.fillna(0).to_sparse(fill_value=0)
delimiter
max_water_heldover([9, 8, 7, 8, 9, 5, 6])
delimiter
pool = multiprocessing.Pool()
delimiter
x[ind] = y[ind]
delimiter
f(l)
delimiter
pd.DataFrame({d: df[d] for d in df.columns if d not in dupes})
delimiter
re.findall(pattern, clause)
delimiter
cimg = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)
delimiter
self.fmt.format(*self.args, **self.kwargs)
delimiter
z = zipfile.ZipFile(filename)
delimiter
df.shift(1)
delimiter
os.remove(f)
delimiter
sys.exit(1)
delimiter
salt = bcrypt.gensalt()
delimiter
yest = np.array(yests)
delimiter
coo_matrix(c.multiply(np.dot(a, b)))
delimiter
plt.ylim(0, X.shape[0])
delimiter
cls(wfd, bfd, wildfd, tfd)
delimiter
tostring(element)
delimiter
sys.path[0] = os.path.dirname(mainpyfile)
delimiter
update_handler_level(mylogger, logging.StreamHandler)
delimiter
Books.objects.all()
delimiter
plt.imshow(result)
delimiter
f_in.seek(0)
delimiter
rank = Model.objects.filter(score__gt=obj.score).count()
delimiter
d = date(year, 1, 1)
delimiter
soup = BeautifulSoup(page)
delimiter
str(self.year)
delimiter
x1 = y1 = x2 = y2 = 0
delimiter
lst.remove(x)
delimiter
timedelta(microseconds=1000)
delimiter
wr.writerow(sh.row_values(rownum))
delimiter
plt.show()
delimiter
parser = argparse.ArgumentParser()
delimiter
hxs = HtmlXPathSelector(response)
delimiter
parent_dir = os.path.abspath(os.path.dirname(__file__))
delimiter
print(topological_sort(connections))
delimiter
plt.figure()
delimiter
df_norm = (df - df.mean()) / (df.max() - df.min())
delimiter
app = recording.appstats_wsgi_middleware(app)
delimiter
assert np.allclose(f(X, Y), X ** 2 + 2 * X * Y + Y ** 2)
delimiter
matrices[:, (2), (2)] = c
delimiter
Polygon([(points_x[i], points_y[i]) for i in range(600)])
delimiter
True
delimiter
soup = BeautifulSoup(page)
delimiter
sorted(string)
delimiter
lst2 = [item[0] for item in lst]
delimiter
idx = np.nonzero(mask[1:] != mask[:-1])[0]
delimiter
dict(d1, **d2)
delimiter
grammar.load()
delimiter
logging.config.dictConfig(D)
delimiter
data[school].append(datum)
delimiter
plt.show()
delimiter
lines_seen.add(line)
delimiter
axis.set_major_formatter(ScalarFormatter())
delimiter
sleep(1)
delimiter
-libpng - dev
delimiter
stdin, stdout, stderr = ssh.exec_command(cmd)
delimiter
tgt.write(uglybuf)
delimiter
now = time.time()
delimiter
ax = fig.add_subplot(111)
delimiter
text_img.drawText(name, 0, 0)
delimiter
int(argv[2])
delimiter
Base.metadata
delimiter
node.render(context)
delimiter
fig, ax = plt.subplots()
delimiter
response = FileResponse(os.path.abspath(f.name))
delimiter
a + b + c
delimiter
root2.update()
delimiter
q.task_done()
delimiter
sys.exit(0)
delimiter
fig.circle(x, y, color=color, **point_kwargs)
delimiter
NULL
delimiter
np.set_printoptions(*args, **kwargs)
delimiter
z.append(matchobj.group(2))
delimiter
cursor.execute(insert, (my_point_list,))
delimiter
print(generate_list(10))
delimiter
print(my_object.contents)
delimiter
current.append(x)
delimiter
print(np.dot(eigenvector.T, np.dot(cov_matrix, eigenvector)))
delimiter
print(df.index.dtype)
delimiter
a[0]
delimiter
print(foo())
delimiter
lst = list(range(1, 10))
delimiter
mlab.view(azimuth=45, elevation=60, distance=0.01, focalpoint=(0, 0, 0))
delimiter
x == n * (n + 1) / 2
delimiter
asyncio.set_event_loop(loop)
delimiter
path = os.path.normpath(os.path.expanduser(path))
delimiter
a = np.arange(125).reshape(5, 5, 5)
delimiter
[self.classify(x) for x in xs]
delimiter
threads.append(MyThread(q, args=(t % 2 == 0,)))
delimiter
True
delimiter
s.shape
delimiter
b.sum(axis=2)
delimiter
new_dict = json.loads(json.dumps(my_dict))
delimiter
self.connected = True
delimiter
print(element.firstChild.nodeValue)
delimiter
p.stdout.close()
delimiter
print(types[bisect.bisect(points, Point(0.6, 0.6)) - 1])
delimiter
H = np.meshgrid(np.arange(5), np.arange(5))[0]
delimiter
y = np.zeros_like(x)
delimiter
a = NP.empty(shape=(0, 0))
delimiter
np.sum(a.dot(b), axis=1)
delimiter
revchoice = arr[~mask]
delimiter
np.put(arr, list(range(num)), np.nan)
delimiter
print(line)
delimiter
[str(chr(i)) for i in h]
delimiter
assert all(a[key] > b[key] for key in b)
delimiter
u = random.random() + random.random()
delimiter
redirect(self.get_success_url())
delimiter
Py_Finalize()
delimiter
[10, 12, 14]
delimiter
print(df[mask])
delimiter
[map(first, row) for row in data]
delimiter
print(resp.status_code, resp.url)
delimiter
inspect.ismodule(os)
delimiter
str(x)
delimiter
ipdb.set_trace()
delimiter
np.random.seed(1)
delimiter
print(corn.get_next())
delimiter
cv2.waitKey(0)
delimiter
input = sys.stdin.read(1)
delimiter
print(result[0][4])
delimiter
out = sidx[np.searchsorted(X1D, searched_valuesID, sorter=sidx)]
delimiter
self.socket.bind(self.server_address)
delimiter
some_func(foo, bar, baz, quux)
delimiter
text = ndb.TextProperty()
delimiter
g = copy_func(f)
delimiter
logger.setLevel(logging.DEBUG)
delimiter
e.submit(slow_work, *args, **kwargs)
delimiter
fn(*args, **kwargs)
delimiter
plugged()
delimiter
f.write(tmplines)
delimiter
foo()
delimiter
dates_dict[key].append(date)
delimiter
self.__dict__[key]
delimiter
words = input.split()
delimiter
ax.text(*angle_text)
delimiter
rect.set_xy((dx.start, dy.start))
delimiter
channel = client.invoke_shell()
delimiter
time.sleep(2)
delimiter
plt.setp(ax.get_xmajorticklabels(), visible=False)
delimiter
next(iterator)
delimiter
ml.run()
delimiter
reader = csv.reader(f, skipinitialspace=True)
delimiter
p = multiprocessing.Process(target=func)
delimiter
do_something_with(key, value)
delimiter
print(match.span())
delimiter
cal_vbox.pack_start(gtk.Calendar(), True, False, 0)
delimiter
arrayList.append(copy.copy(wM))
delimiter
driver = webdriver.Firefox()
delimiter
[mydict[k] for k in list(mydict.keys()) if k >= 6]
delimiter
plt.plot(X, Y1, lw=4)
delimiter
t1 = linspace(-50, 50, 100)
delimiter
ast.literal_eval(d)
delimiter
Image(path, width=width, height=width * aspect)
delimiter
print(columns[1])
delimiter
layout.addWidget(self.button)
delimiter
packet = packet.__class__(str(packet))
delimiter
id = Column(Integer, primary_key=True)
delimiter
numC = random.randint(1, 100)
delimiter
line = line_data[k]
delimiter
df.values
delimiter
result = [copy.deepcopy(result) for _ in range(d)]
delimiter
os.execv(sys.argv[0], sys.argv)
delimiter
loop = asyncio.get_event_loop()
delimiter
print(sys.path)
delimiter
p2 = np.power(np.linalg.det(cov), -0.5)
delimiter
l2 = [5, 6, 7, 8]
delimiter
y = np.arange(-5, 5, 0.2)
delimiter
int(round(n[0]))
delimiter
line(res, vertices[1][0], vertices[2][0], color, 5)
delimiter
my_regex = re.compile(my_pattern, re.DOTALL | re.IGNORECASE)
delimiter
(a if condition(item) else b).append(item)
delimiter
client.close()
delimiter
soup = BeautifulSoup(html)
delimiter
set(short_list).intersection(long_list)
delimiter
print(repr(l[0]), repr(int(l[1])))
delimiter
result = session.query(cls)
delimiter
conn.setopt(pycurl.DEBUGFUNCTION, test)
delimiter
plt.show()
delimiter
t.join()
delimiter
btn.Bind(wx.EVT_BUTTON, self.changeCursor)
delimiter
fig = plt.figure()
delimiter
ret.append(np.zeros(len(tmp)))
delimiter
__all__ = list(import_submodules(__name__).keys())
delimiter
plt.gca().invert_yaxis()
delimiter
set_column(first_col, last_col, width, cell_format, options)
delimiter
answer = np.linalg.solve(A, b)
delimiter
startupinfo = subprocess.STARTUPINFO()
delimiter
solve([0, 10], [12, 20])
delimiter
a = np.arange(18).reshape(9, 2)
delimiter
process = Popen(command, stdout=PIPE, stderr=STDOUT, bufsize=1)
delimiter
line = line.strip()
delimiter
time.sleep(1)
delimiter
self.edit = QtGui.QLineEdit(self)
delimiter
crawler.start()
delimiter
true_x = np.linspace(0.0, 10.0, N)
delimiter
df_new
delimiter
main()
delimiter
familiesNew = [[x for x in j if x != i] for i, j in enumerate(families)]
delimiter
self.b2.pack()
delimiter
colorbar.set_ticklabels(np.unique(data))
delimiter
axs[1].xaxis.set_major_locator(x_major_lct)
delimiter
print(s[match.start():match.end()])
delimiter
all(earlier >= later for earlier, later in zip(seq, seq[1:]))
delimiter
msg.append(500)
delimiter
bootfile = subprocess.check_output(cmd, shell=True)
delimiter
int(hours) * 60 + int(minutes)
delimiter
mlab.draw()
delimiter
d2 = dict(list(d.items())[:len(d) / 2])
delimiter
ax = fig.add_subplot(111)
delimiter
numpy.percentile(df.a, 95)
delimiter
out = a + val * np.identity(a.size).reshape(np.append(-1, shp))
delimiter
f.close()
delimiter
self.send_response(200)
delimiter
deleteself.cobj
delimiter
print(map(lambda x: not x, a))
delimiter
field.widget = forms.RadioSelect()
delimiter
glVertex2i(110, 10)
delimiter
entity_manager.query(Result).filter_by(job_id=job_id).delete()
delimiter
new_arr.shape
delimiter
soup = BeautifulSoup(html)
delimiter
list(product(*[list(range(i + 1)) for i in [x, y, z]]))
delimiter
a = a.__iadd__(da)
delimiter
soup_original_1.body.append(element)
delimiter
data = socket.gethostbyname_ex(x)
delimiter
plt.grid(True)
delimiter
canvas = np.zeros((10, 10))
delimiter
out.close()
delimiter
fig, ax = plt.subplots()
delimiter
m.update(f.__class__.__name__)
delimiter
a.close()
delimiter
self.root = tk.Tk()
delimiter
self.transport.loseConnection()
delimiter
str(self.value)
delimiter
Py_Initialize()
delimiter
srf = pygame.display.set_mode((640, 480))
delimiter
self.video_cap = cv2.VideoCapture(self.device_index)
delimiter
{y, x, 0}
delimiter
norm1 = x / np.linalg.norm(x)
delimiter
session.merge(row_data)
delimiter
root = tk.Tk()
delimiter
fig = plt.figure()
delimiter
match.group(1)
delimiter
gmpy.divm(1, 0, 5)
delimiter
td.text
delimiter
root = lxml.html.fromstring(doc)
delimiter
str(self._list)
delimiter
math.ldexp(m, e)
delimiter
ax1 = fig1.add_subplot(111)
delimiter
self.name = name
delimiter
np.mgrid[0:6, 1:10, 0:20][1]
delimiter
mod.doSomething()
delimiter
outshift = numbits - obits
delimiter
max(list(c.items()), key=itemgetter(1))
delimiter
list(find_creators(f, list(globals().values())))
delimiter
lens[:-1].cumsum()
delimiter
ax1.set_yticks(list(range(len(data.index))))
delimiter
deriv = np.diff(wei.cdf(x)) / dx
delimiter
np.bincount(np.arange(mask.size) // 20, mask)
delimiter
True
delimiter
plt.colorbar(surf, shrink=0.75, aspect=5)
delimiter
list.__init__(self, *args)
delimiter
print(ordered_dict)
delimiter
instance = forms.ModelForm.save(self)
delimiter
d = dict.fromkeys(list(range(100)))
delimiter
command.run(timeout=1)
delimiter
im = np.array(second_subreg * 255, dtype=np.uint8)
delimiter
thread.start()
delimiter
gtk.gdk.threads_init()
delimiter
datetime.fromtimestamp(ts, tz=pytz.utc)
delimiter
file.close()
delimiter
[int(x) for row in inputVals for x in row]
delimiter
ax.hold(True)
delimiter
db.execute(ddl)
delimiter
axes[-1, -1].set_ylim(ylimits)
delimiter
s = map(int, s.split())
delimiter
result = sm.WLS(y, exog, weight=w).fit()
delimiter
x, y = np.linspace(x0, x1, num), np.linspace(y0, y1, num)
delimiter
yaml.add_representer(anydict, _represent_dictorder)
delimiter
ax.set_xticks(centers)
delimiter
obj = MyClass()
delimiter
p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
delimiter
print(df.sort_index())
delimiter
np.allclose(a[:, :, :, (2)], collapse_dims(a)[:, :, 4:6])
delimiter
shutil.copyfileobj(f, sys.stdout)
delimiter
print(gaussian_filter())
delimiter
NULL
delimiter
s = MLStripper()
delimiter
json.dumps(json.JSONDecoder().decode(str_w_quotes))
delimiter
map(print_node, ts.cursor.get_children())
delimiter
print(line)
delimiter
log_message_button.Bind(wx.EVT_BUTTON, self._log_message)
delimiter
Session = scoped_session(sessionmaker())
delimiter
help(re.sub)
delimiter
LIST = [1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1]
delimiter
t.start()
delimiter
traceback.print_stack()
delimiter
gdal.ReprojectImage(src, dst, src_proj, match_proj, gdalconst.GRA_Bilinear)
delimiter
assert len(set(str(number))) == n - 1 or number == 0 and n == 1
delimiter
script_dir = os.path.dirname(os.path.abspath(__file__))
delimiter
plt.ylim(0, 2.1)
delimiter
x = 10 * np.random.random(100)
delimiter
mylist = literal_eval(fsock.read())
delimiter
root = etree.parse(urllib.request.urlopen(url))
delimiter
axs[i].set_title(str(250 + i))
delimiter
doc.setHtml(label.text())
delimiter
a_list[:half], a_list[half:]
delimiter
irenL.Initialize()
delimiter
deletea[1]
delimiter
np.bitwise_or.reduce(c) == c[0]
delimiter
m_close.Bind(wx.EVT_BUTTON, self.OnClose)
delimiter
[i_j_k for i_j_k in a if i_j_k[0] + i_j_k[1] + i_j_k[2] > N]
delimiter
sys.stdout.write(line.lower())
delimiter
[tuple(g) for valid, g in groupby(init, key=lambda x: len(x) != 0) if valid]
delimiter
A.sort(axis=1)
delimiter
root.withdraw()
delimiter
sum(a * b for a, b in zip(v1, v2))
delimiter
window.show_all()
delimiter
htmlSource = driver.page_source
delimiter
gtk.timeout_add(60 * 1000, my_timer)
delimiter
root = Tk()
delimiter
l.append(x)
delimiter
proc = subprocess.call(command, stdout=out, stderr=subprocess.OUTPUT)
delimiter
self.lift()
delimiter
driver = webdriver.Firefox(proxy=proxy)
delimiter
locale.setlocale(locale.LC_ALL, l)
delimiter
keys = pygame.key.get_pressed()
delimiter
reactor.run()
delimiter
reader = csv.reader(f)
delimiter
d.sort(key=sorting)
delimiter
plt.bar(ind, data[1], color=colors[j], bottom=bottom[i - 1])
delimiter
cr.set_line_width(brush.width)
delimiter
sys.stdout = Logger()
delimiter
nll = -1 * numpy.sum(lg)
delimiter
self._age = value
delimiter
allUuids.append(x.id)
delimiter
parser = argparse.ArgumentParser()
delimiter
p.__dict__.update(d)
delimiter
ax = plt.gca()
delimiter
excel.Visible = True
delimiter
y[:, (newaxis)] - x
delimiter
title = models.CharField(max_length=100)
delimiter
net.layers[1].blobs[1].diff.shape
delimiter
cap.release()
delimiter
metrics.roc_auc_score(y, scores)
delimiter
r = requests.get(url)
delimiter
instance.username = username
delimiter
s.method()
delimiter
print(numpy.lib.format.open_memmap.__doc__)
delimiter
ax = plt.subplot(111)
delimiter
squaredlengthba = (b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y)
delimiter
ax = plt.gca()
delimiter
unicode_text = r.read().decode(encoding)
delimiter
session.add(object)
delimiter
data = np.recarray(data.shape, data.dtype, buf=data)
delimiter
self.y1 += self.speed * math.sin(self.bearing)
delimiter
foo()
delimiter
soup = BeautifulSoup(page.read())
delimiter
line = next(islice(f, line_number - 1, line_number))
delimiter
pickle.loads(pickled_value)
delimiter
T = np.zeros((len(x), len(y), len(z)))
delimiter
q.put((i, url))
delimiter
filename = models.CharField(max_length=128)
delimiter
handles, labels = ax.get_legend_handles_labels()
delimiter
ax.lines
delimiter
assert all(p.fitness == 2 * p.i for p in particles)
delimiter
ax2.plot(list(range(10)))
delimiter
d[x] += 1
delimiter
Z += np.random.normal(0, noise, Z.shape)
delimiter
a = np.random.randint(0, 100, 10)
delimiter
html.document_fromstring(doc)
delimiter
platform.mac_ver()
delimiter
pygame.init()
delimiter
fig.canvas.draw()
delimiter
n = np.prod([x.size for x in arrays])
delimiter
self.response.write(template.render(template_values))
delimiter
print(self.request.id)
delimiter
max_water_heldover([8, 8, 4, 5])
delimiter
copy_with_prog(src, dest, lambda pos, total: prog.update(pos, total))
delimiter
print(request.__dict__)
delimiter
self.__c = value
delimiter
s[0:n], s[n:]
delimiter
res[selfpow + valpow] += selfco * valco
delimiter
d = datetime.datetime.today().replace(microsecond=0)
delimiter
get_something(a)
delimiter
G = nx.DiGraph()
delimiter
np.apply_along_axis(wrapper, axis, F)
delimiter
disassemble(x)
delimiter
grad_vals = sess.run([grad[0] for grad in grads])
delimiter
proc.start()
delimiter
tab.add_row(list(row.values()))
delimiter
wr.writerow(mylist)
delimiter
fig = plt.figure(figsize=(8, 8))
delimiter
logger.addHandler(handler)
delimiter
timeit(easydiff1, easydiff2, 1000000)
delimiter
a[0]()
delimiter
ax.set_yticks(np.arange(data.shape[0]) + 0.5, minor=False)
delimiter
[k.key for k in {IPKey(k) for k in workers}]
delimiter
soup = BeautifulSoup(urllib.request.urlopen(url).read())
delimiter
os.chdir(dir)
delimiter
rChannel.items.append(item)
delimiter
[1, 8, 8]
delimiter
print(herp.derp.foo)
delimiter
M.append(1)
delimiter
self.list(request, *args, **kwargs)
delimiter
gca().xaxis.set_major_locator(NullLocator())
delimiter
pylab.imshow(arr, cmap=cm.Greys_r)
delimiter
colors = [cm.jet(x) for x in linspace(start, stop, number_of_lines)]
delimiter
main_str.startswith(check_str) and main_str.endswith(check_str)
delimiter
s = str(x)
delimiter
stdscr.getch()
delimiter
print(H[-1, -1])
delimiter
pool.close()
delimiter
print(paramiko.__version__)
delimiter
outfile.write(line)
delimiter
root = tree.getroot()
delimiter
TOA14 = Ta - Td
delimiter
newList.append(oldList[-1])
delimiter
list.append(sentence.lower())
delimiter
total = xtabs.stack().sum(1)
delimiter
self.send(msg.body)
delimiter
dframe[gindex]
delimiter
mymodule.MyClass.getImg()
delimiter
line(res, vertices[2][0], vertices[0][0], color, 5)
delimiter
g.write(header(delimiter, fields))
delimiter
output = list(seq[::-1])
delimiter
f2(1)
delimiter
int(a ** b)
delimiter
lol = LoL([list(range(10)) for i in range(10)])
delimiter
screen.nodelay(1)
delimiter
a[0].value
delimiter
send_post(server, data, files)
delimiter
Hyphenator.run()
delimiter
df.agg(*exprs).show()
delimiter
print(someclass.__name__)
delimiter
str(2.999999999999999)
delimiter
id = db.Column(db.Integer, primary_key=True, nullable=False)
delimiter
idx = np.array(list(d.keys()))
delimiter
x.append(1)
delimiter
sys.stderr = sys.__stderr__
delimiter
list2 = [5, 6, 7, 8, 9]
delimiter
new_data.apply(directionDescribe)
delimiter
a.goodbye()
delimiter
result.append(item)
delimiter
index = np.arange(len(a))
delimiter
plt.pause(0.001)
delimiter
total += int(match.group())
delimiter
curses.echo()
delimiter
dis.dis(lambda : a < b < c)
delimiter
lock = threading.Lock()
delimiter
picture = pygame.image.load(filename)
delimiter
xml.etree.ElementTree.dump(group)
delimiter
bytes([a[0] & b[0]])
delimiter
self.turnnow
delimiter
fh.seek(file_size - offset)
delimiter
ser.read(1)
delimiter
self._x = x
delimiter
tmp = tmp.apply(lambda x: str(x[0]))
delimiter
do_something_1()
delimiter
ax2 = ax1.twinx()
delimiter
html = urllib.request.urlopen(url).read()
delimiter
server.sendmail(username, to, msg.as_string())
delimiter
cherrypy.quickstart(HelloWorld())
delimiter
x = np.empty([n, 2])
delimiter
df[df < pd.Timedelta(0)] = 0
delimiter
sum(l[::2]) - sum(l[1::2])
delimiter
print(x.toprettyxml())
delimiter
db = current_app.db
delimiter
tocrawl.add(link)
delimiter
a = np.array([0, 1, 0, 1, 1])
delimiter
pylab.show()
delimiter
ser.open()
delimiter
main.show()
delimiter
logger = logging.getLogger(__name__)
delimiter
row * (row + 1) / 2 + 1
delimiter
client.describe_cache_engine_versions()
delimiter
reversed_dict[value].append(key)
delimiter
ax.set_zlim(-1.01, 1.01)
delimiter
os.ftruncate(fd, 0)
delimiter
len(frozenset(objs)) == len(objs)
delimiter
print(x)
delimiter
retval = prof.runcall(self.method_actual, *args, **kwargs)
delimiter
plt.gca().add_patch(plt.Circle((posx, posy), radius=0.05, fc=color))
delimiter
df.loc[mask]
delimiter
plt.yticks(list(range(0, max(yvals), yinterval)))
delimiter
g.add_edge(5, 6)
delimiter
YBL007C = ribosome
delimiter
{(x + 1): (0) for x in l}
delimiter
deletelist[index]
delimiter
print(n)
delimiter
[20, 40, 60, 80, 100]
delimiter
inspect.getmembers(parser, predicate=inspect.ismethod)
delimiter
sns.heatmap(data, linewidth=0, yticklabels=yticks, xticklabels=xticks)
delimiter
sympy.exp(x)
delimiter
cmp(adiff, bdiff)
delimiter
sim = gensim.matutils.cossim(vec_lda1, vec_lda2)
delimiter
sys.exit(0)
delimiter
here = os.path.dirname(__file__)
delimiter
n.append(c)
delimiter
stats.exponweib.fit(data, floc=0, f0=1)
delimiter
Euler5(start + 1, end, x)
delimiter
T.append(df)
delimiter
self.builder.add_from_file(self.glade_file)
delimiter
merp[j].append(i)
delimiter
cpus = multiprocessing.cpu_count()
delimiter
reactor.run()
delimiter
logging.shutdown()
delimiter
ax1.set_title(title)
delimiter
widget.insertRow(widget.rowCount())
delimiter
values = heapq.nlargest(2, my_list)
delimiter
l1.grid(row=0, column=0, padx=(100, 10))
delimiter
ax.yaxis.set_major_formatter(y_format)
delimiter
self.setCentralWidget(self.edit)
delimiter
self.__storage.pop()
delimiter
print(str.__doc__)
delimiter
mpl.get_cachedir()
delimiter
G.data[G.data != 0] = 1
delimiter
-1 - value
delimiter
sb.set_palette(cmap)
delimiter
comment = sh.Cells(1, 1).Comment.Text()
delimiter
f()
delimiter
create_table(my_test_db, _create_sql)
delimiter
cls(reader1, reader2)
delimiter
ws = wb.get_active_sheet()
delimiter
r[k][v] += 1
delimiter
df.join(newFactor.reindex(df.index, level=0))
delimiter
user2 = User.query.filter_by(id=2).first()
delimiter
a.start()
delimiter
hello_world.py
delimiter
[1.0001]
delimiter
display.start()
delimiter
b = [(i * 2) for i in range(1, 10)]
delimiter
self.ToggleTool(self._NTB2_ZOOM, False)
delimiter
print(hex(intNum))
delimiter
r.text
delimiter
print(A.B.__name__)
delimiter
main()
delimiter
print(window.get_name())
delimiter
df[2].replace(4, 17)
delimiter
print(s)
delimiter
plt.show()
delimiter
g.apply_async()
delimiter
time.sleep(5)
delimiter
match.group()
delimiter
sizer.Add(anotherWidget, proportion=0, style=wx.ALL, border=5)
delimiter
timeComboBox.currentIndexChanged.connect(self.test)
delimiter
ax.scatter(x, y)
delimiter
choose_from_axis(x, 1, 1, 2)
delimiter
message.pack(padx=8, pady=8)
delimiter
a[a < 0.7].max()
delimiter
datetime.timedelta(int(deltatuple))
delimiter
s = slice(start, stop, step)
delimiter
ewh.clicked()
delimiter
session.prepare()
delimiter
print(pformat(x, formatfloat))
delimiter
getattr(instance, attr)
delimiter
df1.foo.isnull().sum() * 100.0 / len(df1)
delimiter
print(o_form.producetype())
delimiter
foo = (x * x for x in range(10))
delimiter
self.my_dict[key] = frozenset(value)
delimiter
df
delimiter
[str(x) for x in EmployeeList]
delimiter
view.set_overwrite_status(True)
delimiter
date_joined = datetime.now()
delimiter
display(str(num))
delimiter
print(list(gen(a)))
delimiter
id = Column(Integer, primary_key=True)
delimiter
ymin, ymax = min([i.min() for i in ys]), max([i.max() for i in ys])
delimiter
csvfile.seek(0)
delimiter
plt.show()
delimiter
response
delimiter
process.stdin.write(modified_line)
delimiter
dropbox_folder = os.path.join(dirname, subdirname)
delimiter
multiply_anything(0, 8)
delimiter
ctypes.addressof(some_long)
delimiter
len(solns8)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
ax.plot(x, y, lw=2)
delimiter
test[::-1]
delimiter
df.apply(lambda s: s[np.isfinite(s)].dropna()).sum()
delimiter
f2 = f2 * np.max(f1) - np.min(f1) * (f2 - 1)
delimiter
list(self.__dict__.values())
delimiter
df.isnull() | df >= threshold
delimiter
print(df.head())
delimiter
metadata = MetaData(engine)
delimiter
Gtk.main_quit()
delimiter
p = subprocess.Popen([fn], shell=False)
delimiter
print(l)
delimiter
self.resize(640, 480)
delimiter
print(q.cancel())
delimiter
all(type(i) is int for i in lst)
delimiter
root.mainloop()
delimiter
start = time.time()
delimiter
classifier.fit(X_train, y_train)
delimiter
ch.setFormatter(formatter)
delimiter
container.grid_rowconfigure(0, weight=1)
delimiter
results[i] = urlopen(url).read()
delimiter
sys.excepthook = my_excepthook
delimiter
c = cv2.cvtColor(c, cv2.COLOR_BGR2RGB)
delimiter
array([1, 0])
delimiter
s.reverse()
delimiter
GL.glClearColor(0.5, 0.5, 0.5, 1.0)
delimiter
pp(list(find_days(start, end, 1, 2)))
delimiter
csvwriter.writeheader()
delimiter
print(list(accumulate(L)))
delimiter
self.discard(item)
delimiter
print(self.correct_response)
delimiter
data = json.loads(request.raw_post_data)
delimiter
c.append(solve(new_matrix, size - 1) * matrix[j] * (-1) ** (j + 2))
delimiter
p.resume()
delimiter
self.crawler = CrawlerProcess(settings.SCRAPY_SETTINGS)
delimiter
decisions.complete_workflow_execution()
delimiter
sys.path.insert(0, cmd_folder)
delimiter
result.append(offset)
delimiter
pythoncom.PumpWaitingMessages()
delimiter
args.value = values.get(args.values)
delimiter
a[:] += da[:]
delimiter
print(a[1, 1])
delimiter
x.reshape(x.shape[0] / 5, 5)[:, :2].flatten()
delimiter
link = Field()
delimiter
a[0][1] = 10
delimiter
node.orth_
delimiter
d.join(s.split(d)[:n])
delimiter
{(1): 2} in {1, 2}
delimiter
textdata.columns - csvdata.columns
delimiter
result.append(i + j)
delimiter
print(a, b, c)
delimiter
transactions = Transaction.objects.for_account(account_id)
delimiter
pgs = pdf.getNumPages()
delimiter
random.shuffle(results)
delimiter
s < t.isoformat()
delimiter
df.max(1)
delimiter
value = myDict[key]
delimiter
session.expunge(inst)
delimiter
not np.any((a == b).mask) and np.alltrue((a == b).compressed())
delimiter
array1 = [[0, 0], [0, 0]]
delimiter
set_value(dict_nested, list_address[:-2], *list_address[-2:])
delimiter
df = pd.DataFrame(d)
delimiter
json.loads(dict_str)
delimiter
soup = BeautifulSoup(html)
delimiter
a.sort(object_compare)
delimiter
cleared.append(candidate)
delimiter
ker = 1.0 / 4.0 * np.array([1, 1, 0, 0, 0, 1, 1], dtype=np.float)
delimiter
self.get_name()
delimiter
unfold(lambda y: (y, f(y)), x)
delimiter
[singleitem] = mylist
delimiter
yourThread.start()
delimiter
encoder.encodefile(corpusfile_plaintext, corpusfile)
delimiter
repr(c)
delimiter
id = Column(Integer, primary_key=True)
delimiter
interactive(set_cursor, x=ax.get_xlim(), y=ax.get_ylim())
delimiter
print(word)
delimiter
bool_list = [False for item in bool_list]
delimiter
[(d.month, d.year) for d in rrule(MONTHLY, dtstart=start, until=end)]
delimiter
layout.addWidget(self.table, 1, 0)
delimiter
form = RecipeForm(request.form)
delimiter
L.append(L[i])
delimiter
signal.signal(signal.SIGALRM, handler)
delimiter
master = tk.Tk()
delimiter
rootApp.run(debug=True)
delimiter
print(newcorpus.paras(newcorpus.fileids()[0]))
delimiter
parsed_url = urlparse.urlparse(url)
delimiter
file.close()
delimiter
model.load_weights(weights_path)
delimiter
self.video_out.write(video_frame)
delimiter
random.shuffle(iters)
delimiter
groupedby(enumerate(s), key=itemgetter(1), keep=itemgetter(0))
delimiter
x_train = np.random.normal(0, 1, [50, 10])
delimiter
pdb.set_trace()
delimiter
foo.__annotations__
delimiter
df.index.get_loc(window_stop_row.name)
delimiter
csv_reader = csv.DictReader(utf8_data, **kwargs)
delimiter
tree = ET.parse(source)
delimiter
amp * np.exp(-(x - cen) ** 2 / (2.0 * sigma ** 2))
delimiter
coop = task.Cooperator()
delimiter
type(df1)
delimiter
pdf_reader = PdfFileReader(f)
delimiter
m = mp.Manager()
delimiter
tm.assert_frame_equal(df, df)
delimiter
output = p2.communicate()[0]
delimiter
parts = line.split()
delimiter
expm1(1e-05)
delimiter
self.pack(side=BOTTOM)
delimiter
self.view.setModel(self.proxy)
delimiter
a = [[0, 1, 0], [1, 0, 0], [1, 1, 1]]
delimiter
s = pd.Series([True, True, False, True])
delimiter
df2.set_index(np.arange(len(df2.index)))
delimiter
wr.writerow(sheet.row_values(rownum))
delimiter
False
delimiter
doc = lh.parse(urllib.request.urlopen(url))
delimiter
n = find_words_in_image(open(sys.argv[1]).read())
delimiter
print(str_list)
delimiter
self.num = num
delimiter
out = collections.defaultdict(list)
delimiter
s.quit()
delimiter
s.bind((HOST, 0))
delimiter
result.append(str(s))
delimiter
(x[i] for x in copies[i])
delimiter
mylist.sort(key=lambda x: x[1])
delimiter
sio.reset()
delimiter
df6 = pd.DataFrame(values2, index=index, columns=columns)
delimiter
_list.extend(list(range(r[0], r[1])))
delimiter
self.lom.append(name)
delimiter
g(1000, y=2000, z=500)
delimiter
reversed_dict[value].append(key)
delimiter
d[i].append(x[j])
delimiter
print(timedelta(hours=time.timezone / 60 / 60))
delimiter
x = random.choice([left, right])
delimiter
plt.scatter(delta[idx], vf[idx], c=dS[idx], alpha=0.7, cmap=cm.Paired)
delimiter
deletesys.modules[name]
delimiter
assert len(bytes) == 8
delimiter
pd.concat(frames, keys=dates, axis=1)
delimiter
getattr(self._instance, attr)
delimiter
a = [[], [], []]
delimiter
update_wrapper(result, func)
delimiter
urlpatterns.append(url(main_view_re, MainView.as_view()))
delimiter
w = np.fft.fft(data)
delimiter
self.data[k] = v
delimiter
print(max(list))
delimiter
cols = df.columns.values.tolist()
delimiter
response = urllib.request.urlopen(req)
delimiter
my_list
delimiter
data = f.read(1)
delimiter
inf.seek(0)
delimiter
np.arange(10)[10:0:-1]
delimiter
app.debug = True
delimiter
internet.TCPServer(1025, factory).setServiceParent(application)
delimiter
a = 2
delimiter
print(data)
delimiter
shutil.rmtree(dir)
delimiter
eval(input())
delimiter
plt.colorbar(sm, ticks=list(range(4)))
delimiter
dict_result = [item.get_dict() for item in root]
delimiter
MyClass().id
delimiter
self.selectedFiles
delimiter
pdb.Pdb(stdout=sys.__stdout__).set_trace()
delimiter
cur.execute(query)
delimiter
gc.collect()
delimiter
i.update(7)
delimiter
f.truncate()
delimiter
my_dict[list[0]] = list[:]
delimiter
print(f())
delimiter
duck.quack()
delimiter
fractExpr.setParseAction(lambda t: sum(t))
delimiter
h.append({k: td.get(k) for k in get_keys})
delimiter
plt.clf()
delimiter
QWebPage.__init__(self)
delimiter
os.makedirs(outdir)
delimiter
plt.close()
delimiter
self.close()
delimiter
self.assertTrue(parser.long)
delimiter
pygame.event.wait()
delimiter
len(x) != len(y) and max([x, y], key=len) or min(x, y)
delimiter
{{pform.as_p}}
delimiter
(xdiff.T * lu_solve(Sigma_inv, xdiff.T)).sum(axis=0)
delimiter
t.refresh()
delimiter
df = df.astype(int)
delimiter
{key: [s for s in a[key] if s not in b.get(key, [])] for key in a}
delimiter
GEN_RUNNING
delimiter
a.shape
delimiter
denom_ACGT = list(d1[0].values()) + list(d1[1].values())
delimiter
test()
delimiter
a * c == b * d
delimiter
sherr.pop()
delimiter
MULTI()
delimiter
any(x in myDict for x in myList)
delimiter
users = User.query.all()
delimiter
parent.wait(5)
delimiter
[unicodedata.category(c) for c in a]
delimiter
path, module_name = os.path.split(module_path)
delimiter
file.seek(2)
delimiter
p.start()
delimiter
Response(serializer.data)
delimiter
args = parser.parse_args()
delimiter
ordered[k] = mydict[k]
delimiter
bar.py
delimiter
res.append(total_sum - 2 * sum_smaller + x * (2 * num_smaller - i))
delimiter
answer2 = [(i, v) for i, v in enumerate(answer1) if v]
delimiter
tuple(x for x, y, z in G)
delimiter
plt.matshow(df_confusion, cmap=cmap)
delimiter
5 < (1, 2)
delimiter
s = [[0] * 4] * 4
delimiter
curs.execute(sql_command)
delimiter
arr[i:] + arr[:size - (len(arr) - i)]
delimiter
K.set_value(self.model.optimizer.lr, lr - 10000 * self.losses[-1])
delimiter
s.sendmail(me, you, msg.as_string())
delimiter
type(b).mro()
delimiter
logger = logging.getLogger()
delimiter
kclass.append(min(data_list))
delimiter
directory = os.path.realpath(directory)
delimiter
x = np.hstack((x, x[::-1]))
delimiter
timings.sort()
delimiter
print(Xc.todense())
delimiter
datetime.date(first.year, first.month, lastday)
delimiter
doSomething(line.strip())
delimiter
p(sys.path)
delimiter
self.wfile.write(np.array(buf).tostring())
delimiter
np.isnan(b)
delimiter
test2(*args, **kwargs)
delimiter
pairs = {(x, x + 2) for x in primes if x + 2 in primes}
delimiter
fftf = numpy.fft.fftn(f)
delimiter
ser.close()
delimiter
walk_dict(d)
delimiter
Y = X.reshape(9, 4, 1).repeat(4096, 2)
delimiter
df = df.stack()[[1, 0]].reset_index(level=2, drop=True).reset_index()
delimiter
self.table.installEventFilter(self)
delimiter
t.daemon = True
delimiter
print(result)
delimiter
kalman_x, kalman_y = zip(*result)
delimiter
1125, 1125, 1125, 1125, 1125, 1250, 1062, 1250
delimiter
qq.close()
delimiter
rest = list(i)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
bigram_measures = nltk.collocations.BigramAssocMeasures()
delimiter
df1 = df.unstack(0)
delimiter
sector_el = [item[1] for item in remaining]
delimiter
ax1.plot(xvals, yvals, linewidth=4)
delimiter
start_response(status, headers)
delimiter
ax.add_patch(clip_path)
delimiter
c = np.concatenate((a, b))
delimiter
gray = cv.CreateMat(img.height, img.width, cv.CV_8UC1)
delimiter
print(hashlib.sha1(str(a_sorted_list)).hexdigest())
delimiter
list(dict(reversed(items)).items())
delimiter
globals(), pickle.loads(pickled_name), pickle.loads(pickled_arguments)
delimiter
L = L[::-1]
delimiter
MAIL_USE_SSL = True
delimiter
result = np.zeros_like(b)
delimiter
y = x
delimiter
threads = [threading.Thread(target=func, args=(i, q)) for i in range(5)]
delimiter
im2, = ax2.plot([], [], color=(0, 0, 1))
delimiter
r = requests.post(url, files=files)
delimiter
keys
delimiter
do_something_with_update(MsUpdate)
delimiter
df = pd.concat(df_list)
delimiter
a = np.arange(1, n * m + 1).reshape(n, m)
delimiter
Repo.clone_from(git_url, repo_dir)
delimiter
plt.show()
delimiter
print(urls)
delimiter
print(delta.total_seconds())
delimiter
p.print_stats()
delimiter
results.append(tag)
delimiter
plt.close(fig)
delimiter
ax.legend(proxies, descriptions, numpoints=1, markerscale=2)
delimiter
y = [4, 5, 6]
delimiter
ax.xaxis.set_ticks(df.index)
delimiter
df.index
delimiter
xx, yy = np.meshgrid(x, y)
delimiter
cur = conn.cursor()
delimiter
show()
delimiter
np.column_stack(np.nonzero(result))
delimiter
Base = declarative_base()
delimiter
parking_rows.append(ParkingLotRow((1, 20), (496, 41), 25))
delimiter
expiry_date = models.DateField()
delimiter
sublist.append(i)
delimiter
y.set_color(label_colors[y.get_text()])
delimiter
out.flush()
delimiter
plt.show()
delimiter
print(repr(combined_astr))
delimiter
c = a[(ii), :]
delimiter
ax.add_patch(ellip)
delimiter
bysetpos = bysetpos, bymonth = bymonth, bymonthday = bymonthday,
delimiter
X_train = clf.fit_transform(X_train)
delimiter
iT += 1
delimiter
ar = [int(i) for i in input().strip().split()]
delimiter
gibberish(4)
delimiter
print(char2, len(char2), len(char2[0]))
delimiter
textbox.pack()
delimiter
layout.addWidget(picture)
delimiter
x = np.isnan(A).ravel().nonzero()[0]
delimiter
response
delimiter
contents = output.getvalue()
delimiter
dh = urllib.request.urlopen(url)
delimiter
result = mysql_cursor.fetchone()
delimiter
set(a) < set(b)
delimiter
list(query_set)
delimiter
rgba = numpy.concatenate((rgb, numpy.zeros((205, 54, 1))), axis=2)
delimiter
mark_safe(form_as_div)
delimiter
help(str.join)
delimiter
df
delimiter
self._get_frame_nos()
delimiter
print_tree(child, indent=next_indent, last=next_last)
delimiter
dfile.flush()
delimiter
B()
delimiter
name = models.CharField(max_length=255)
delimiter
bullet.DISABLE_SIMULATION
delimiter
ax.yaxis.set_label_coords(labelx, 0.5)
delimiter
xs.sort(key=len)
delimiter
text[-1] + backward(text[:-1])
delimiter
M.ix[(0, 1), (0, 1)] = 1
delimiter
ax.set_axis_off()
delimiter
df2 = pd.DataFrame(d1)
delimiter
my_path = os.path.abspath(__file__)
delimiter
session = Session.objects.get(session_key=session_key)
delimiter
l[n:] = [0] * (n - len(l))
delimiter
toplevel.update_idletasks()
delimiter
img = filedescriptor.read()
delimiter
root = tk.Tk()
delimiter
do_pre_install_stuff()
delimiter
old_filename = file_path[-1]
delimiter
ax = plt.gca()
delimiter
Base.metadata.create_all(engine)
delimiter
getattr(self.obj, key)
delimiter
soup.root.contents[0].name
delimiter
result.append((k, length, index))
delimiter
serv.start()
delimiter
print(df.to_csv())
delimiter
G.add_edges_from((i, j) for i, j, sim in edges if sim >= THRESHOLD)
delimiter
pipe = Popen(command_2, shell=True, stdin=PIPE, stdout=PIPE)
delimiter
lines = set(f)
delimiter
model = Sequential()
delimiter
my_dict[key[-1]] = value
delimiter
bc.as_datetime()
delimiter
print(cell.text_content())
delimiter
s.cookies.save()
delimiter
ax = plt.subplot(111)
delimiter
data = [np.arange(8).reshape(2, 4), np.arange(10).reshape(2, 5)]
delimiter
f.write(line)
delimiter
print(len(s))
delimiter
proc.start()
delimiter
print(np.exp(-(A + B)))
delimiter
counts_counter = Counter(list(counter.values()))
delimiter
now = datetime.now()
delimiter
admin.site.register(Author, AuthorAdmin)
delimiter
pos = nx.spring_layout(G)
delimiter
plt.figure(4)
delimiter
idx = np.clip(idx, 1, len(A) - 1)
delimiter
tabfile = StringIO(contents)
delimiter
my_map.etopo()
delimiter
pd.notnull(np.nan)
delimiter
print(random_list)
delimiter
self.assertEqual(target.int(), b10)
delimiter
gevent.spawn(test)
delimiter
lineno = traceback.tb_lineno
delimiter
setattr(self, attr_name, fn(self))
delimiter
num if start < num < end else start if num <= start else end
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
plt.imshow(imgmap, zorder=4)
delimiter
vline.set_xdata((x, x))
delimiter
ax1 = fig.add_subplot(221)
delimiter
fig, ax = plt.subplots()
delimiter
c = p.stdout.read(1)
delimiter
cap1.set(4, 120)
delimiter
assert np.allclose(x.todense(), y.todense())
delimiter
count, division = np.histogram(series, bins=[-201, -149, 949, 1001])
delimiter
df
delimiter
cursor.close()
delimiter
groups = Group.objects.filter(player=p1).filter(player=p2)
delimiter
myArray.__len__()
delimiter
gevent.joinall(jobs)
delimiter
result_queue = Queue()
delimiter
parser.parse_args()
delimiter
convert_dict(v)
delimiter
theList[4:7] + theList[12:18]
delimiter
A[1] = previous_A[1]
delimiter
plt.colorbar()
delimiter
print(list(dd.keys()))
delimiter
manager.start()
delimiter
im = Image.open(filename)
delimiter
msmdsrvini.close()
delimiter
array_c.append(x)
delimiter
ogl.CGLSetParameter.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p]
delimiter
sess.run(init_op)
delimiter
csv2.readline()
delimiter
pool.close()
delimiter
setattr(self, k, v)
delimiter
np.take(x, lin_idx)
delimiter
time.sleep(1)
delimiter
data = f.read(BUF_SIZE)
delimiter
logger.removeHandler(logger.handlers[0])
delimiter
img.save(filename)
delimiter
itineraryArray.itinerary.append(itinerary0)
delimiter
np.complex(0, 1)
delimiter
print(len(your_list))
delimiter
pylab.xticks(list(range(len(allinterests))), allinterests)
delimiter
db = SQLAlchemy(app)
delimiter
f = f.simplify()
delimiter
ax2.set_ylim(0, ax2.get_yticks()[-1])
delimiter
sorted_KP.remove(item)
delimiter
mask = array1 == array2
delimiter
layout.addWidget(self.button)
delimiter
g = gevent.spawn(urllib.request.urlopen, url)
delimiter
d = (1 + math.sqrt(1 + 8 * len(condensed_matrix))) / 2
delimiter
example[4:1] = [122]
delimiter
t.start()
delimiter
self._db = db
delimiter
print(line)
delimiter
operator.add(1, 2)
delimiter
xml.sax.xmlreader
delimiter
self.serve_forever()
delimiter
self.txt = ScrolledText(self.root, undo=True)
delimiter
initdelorean()
delimiter
initfoo()
delimiter
print(data)
delimiter
time.sleep(0.1)
delimiter
time.sleep(0.5)
delimiter
c = t[2]
delimiter
worksheet.set_column(i, i, column_len)
delimiter
max(0, -n.as_tuple().exponent)
delimiter
args = parser.parse_args()
delimiter
co.co_code, co.co_consts, co.co_names
delimiter
ax.barh(ind, vals, width, color=colors)
delimiter
first_name = models.CharField(max_length=50)
delimiter
itertools.combinations(stuff, 4)
delimiter
file.close()
delimiter
[10, 4, 1]
delimiter
print(resp.read())
delimiter
clusters.setdefault(v, []).append(k)
delimiter
df1.apply(assign_metric_vals, 1)
delimiter
ax.plot(x, y)
delimiter
y_train = np.random.randint(0, 10, [50])
delimiter
random.uniform(float(start), float(start + width))
delimiter
s.sendmail(me, you, msg.as_string())
delimiter
fig, axes = plt.subplots(nrows=2, ncols=2, sharey=True, sharex=True)
delimiter
fig = plt.figure(figsize=(9, 9))
delimiter
pprint.pprint(gc.get_referrers(l))
delimiter
x + y
delimiter
first_day = today.replace(day=1)
delimiter
A[:, (0)] = A[:, (D2 - 1)]
delimiter
s.recv_info(q)
delimiter
self._bar
delimiter
diff = np.empty_like(img1)
delimiter
time.sleep(0.5)
delimiter
b.max()
delimiter
x[1][0:2][2]
delimiter
ser.close()
delimiter
asyncore.dispatcher.__init__(self)
delimiter
L = [0] * 10
delimiter
fig = plt.figure()
delimiter
ax.xaxis_date()
delimiter
(2 ** i for i in range(n))
delimiter
timer.start()
delimiter
model1.objects.create()
delimiter
colors = np.linspace(0, 1, N)
delimiter
result = Image.fromarray((visual * 255).astype(numpy.uint8))
delimiter
f2.write(Lines[i])
delimiter
gram_matrix
delimiter
pd.read_clipboard()
delimiter
print(res.first_name, res.last_name)
delimiter
myDict[key] += value
delimiter
timediff.total_seconds()
delimiter
eval.__text_signature__
delimiter
np.allclose(diam, dam_out)
delimiter
ax.set_yticks(np.arange(0.5, 10.5, 1))
delimiter
assert all(0 <= element < N for lst in list_of_lists for element in lst)
delimiter
ax2 = plt.subplot(1, 2, 2)
delimiter
engine = create_engine(dbconninfo)
delimiter
value = cache[key] if key in cache else cache.setdefault(cache, func(key))
delimiter
B.objects.create(a=some_a)
delimiter
tuple(sum(base_lists, []))
delimiter
df1 = pd.DataFrame([x for x in df2.teams])
delimiter
figure = pylab.figure(figsize=figsize)
delimiter
asyncore.loop()
delimiter
min(list(res.items()), key=itemgetter(0))[1]
delimiter
Image.composite(img, blurred_halo, ImageChops.invert(blurred_halo))
delimiter
x, y, z = z, x, y
delimiter
sum_digits(1969)
delimiter
t.start()
delimiter
out.close()
delimiter
main()
delimiter
p = webdriver.FirefoxProfile()
delimiter
genn(igap, igap + 1)
delimiter
toolsmodule.printdatabase()
delimiter
buffer.append(line.strip())
delimiter
figure.show()
delimiter
plt.plot(list(range(10)), x, next(linecycler))
delimiter
print(type(f))
delimiter
self.harmstat = harmstat
delimiter
map(lambda t: t.start(), tlist)
delimiter
print(df.values)
delimiter
c = nprect(1, x)
delimiter
gmpy.divm(1, 4, 8)
delimiter
self.particles = []
delimiter
fig, ax1 = plt.subplots()
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
[(x, list(y)) for x, y in groupby(mylist, get_field_sub)]
delimiter
selobj.path
delimiter
out.append(int(n))
delimiter
print(A[i, j, B])
delimiter
a, x, b = np.asarray(a), np.asarray(x), np.asarray(b)
delimiter
results = map(process_file, [os.path.join(dirname, name) for name in names])
delimiter
doc = etree.parse(f_source, parser)
delimiter
curses.noecho()
delimiter
s.connect((host, port))
delimiter
plt.figure()
delimiter
ax.coastlines()
delimiter
newgrid = [[x[i] for x in grid] for i in range(len(grid[0]))]
delimiter
ax1 = fig.add_subplot(111)
delimiter
print(response.status_code)
delimiter
lst.sort(key=MyStrOrder)
delimiter
list(sum(tupleOfTuples, ()))
delimiter
file_writer = csv.writer(test_file)
delimiter
pet.say()
delimiter
thread.start()
delimiter
util.log_to_stderr(level=logging.DEBUG)
delimiter
arr[mask] = np.nan
delimiter
c = db.cursor()
delimiter
httpdkenlogger.addHandler(fh)
delimiter
print(str.isdigit.__doc__)
delimiter
c = array([a, b])
delimiter
pilimg.show()
delimiter
r = requests.get(url)
delimiter
sys.exit(0)
delimiter
self.finish()
delimiter
pyl.clabel(CS, inline=1, fontsize=10)
delimiter
print(A.func1.__doc__)
delimiter
words = my_string.split()
delimiter
binary_f(lambda x: f(x) != val0, list)
delimiter
view_menu = tk.Menu(menubar)
delimiter
dict = {(x ** p): expr.collect(x).coeff(x ** p) for p in range(1, n)}
delimiter
c.setopt(c.WRITEFUNCTION, data.write)
delimiter
GPS_EPOCH + datetime.timedelta(seconds=t1_seconds, microseconds=t1_us)
delimiter
myThread.join()
delimiter
D = sorted(C, key=lambda x: x[1])
delimiter
[dict(e) for e in set(lst).difference(dups)]
delimiter
[0, 0, 0, 0, 0, 0, 0, 162, 1, 164],
delimiter
dict(form=form)
delimiter
root.mycontainer.myattr
delimiter
a.start()
delimiter
channel = connection.channel()
delimiter
np.cross(a, b, axisa=0, axisb=0)
delimiter
setp(ax.get_xticklabels(), fontsize=8)
delimiter
t.start()
delimiter
json.dump(row, sys.stdout)
delimiter
self.output_logger
delimiter
boundaries = [i for i in range(1, len(x)) if x[i] != x[i - 1] + 1]
delimiter
temp[0] = 1
delimiter
WLAN_AVAILABLE_NETWORK_CONNECTED = 1
delimiter
p = subprocess.Popen(args, stderr=sys.stdout.fileno(), stdout=subprocess.PIPE)
delimiter
pem = ssl.get_server_certificate((host, port))
delimiter
self.initial_parameternameX = self.parameternameX
delimiter
x = f.readline()
delimiter
ff = webdriver.Firefox()
delimiter
hash_md5.hexdigest()
delimiter
store = Gtk.ListStore(str, GdkPixbuf.Pixbuf, bool)
delimiter
print(tuple([a]))
delimiter
a = np.asarray(a)
delimiter
timerthread[0].start()
delimiter
bisect_right(a, x)
delimiter
sys.stderr.write(highlight(tbtext, lexer, formatter))
delimiter
result.addFailure(self, sys.exc_info())
delimiter
[(i * i) for i in range(5)]
delimiter
im = Image.open(StringIO(fd.read()))
delimiter
a.replace(b, c)
delimiter
XS, YS, ZS = [], [], []
delimiter
Base.metadata.create_all(self._conn)
delimiter
pool.close()
delimiter
self.transport.write(data)
delimiter
a.sort(key=lambda x: x[1], reverse=True)
delimiter
print(channel.recv(1024))
delimiter
ax.legend_.remove()
delimiter
self.deletecommand(funcid)
delimiter
C = np.searchsorted(A, B)
delimiter
df.iloc[-6:-1]
delimiter
ssh.load_system_host_keys()
delimiter
x = np.arange(20)
delimiter
isect.append([event[0], 0])
delimiter
deletedictionary[oldkey]
delimiter
print(a - b)
delimiter
print(x.most_common())
delimiter
finalurl = res.geturl()
delimiter
print([row for row in r if row])
delimiter
print(args)
delimiter
root.config(menu=menu_bar)
delimiter
print(list(solve(x)))
delimiter
result_s.casefold() == result_s.casefold()[::-1]
delimiter
df = pd.concat(df)
delimiter
pdb.Pdb.setup(self, f, t)
delimiter
sum(i for i in x if i in y) * w[i] / sum(i for i in x) * w[i]
delimiter
print(sys.path[0])
delimiter
buffer += ser.read(ser.inWaiting())
delimiter
self.request.user
delimiter
test2 = pd.concat(data, ignore_index=True)
delimiter
print(key, my_dict[key])
delimiter
ax1.set_xticklabels(data.columns)
delimiter
self.driver = webdriver.Firefox()
delimiter
db_crsr.close()
delimiter
p.start()
delimiter
abcd = ABCD()
delimiter
inotify.close()
delimiter
zipfile.ZipFile(memory_zip)
delimiter
min(cluster, key=lambda t: abs(ts - t))
delimiter
window = MainWindow()
delimiter
f.seek(0)
delimiter
pprint.pprint(data)
delimiter
plt.show()
delimiter
here = os.path.dirname(os.path.realpath(__file__))
delimiter
s.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)
delimiter
a.to_frame().join(b.to_frame())
delimiter
q.shape
delimiter
dict.__init__(self, *args, **kwargs)
delimiter
output.addPage(page)
delimiter
table.insertRow(rowPosition)
delimiter
piechart[0][i].set_hatch(patterns[i % len(patterns)])
delimiter
print(repr(y))
delimiter
server.starttls()
delimiter
func(*params)
delimiter
print(count)
delimiter
f = {x: make_func(x) for x in range(10)}
delimiter
now = datetime.now()
delimiter
bcut.ax.patch.set_visible(False)
delimiter
data = sys.argv[1]
delimiter
ndarray = np.PyArray_SimpleNewFromData(1, shape, np.NPY_DOUBLE, self.data_ptr)
delimiter
print([dict(zip(list(options.keys()), p)) for p in product])
delimiter
image.set_from_pixbuf(handle.get_pixbuf())
delimiter
result()
delimiter
sympy_exp.evalf(subs={a: 6, b: 5, c: 2})
delimiter
foo = lambda x, y, z: x + y + z
delimiter
[[1, 1], [1, 2], [2, 2]]
delimiter
A[j], A[k] = A[k], A[j]
delimiter
get_current_fig_manager().window.raise_()
delimiter
plt.subplot(211)
delimiter
A.resize((D1, D2 - 1), refcheck=False)
delimiter
self._current_browser()
delimiter
result = []
delimiter
app.register_blueprint(chat)
delimiter
[1, 4, 7, 10]
delimiter
dic[keys[-1]] = value
delimiter
matchingVals = [x for x in a if x > 2]
delimiter
ax1.get_xaxis().set_major_formatter(ticker.FuncFormatter(my_formatter_fun))
delimiter
pylab.setp(ax.get_xticklabels(), visible=True)
delimiter
file.seek(line_offset[n])
delimiter
{i: zip(*np.where(z == i)) for i in np.unique(z) if i}
delimiter
p = Process(target=f, args=(d,))
delimiter
print(ned)
delimiter
setattr(inst, self.name, value)
delimiter
prop1 = db.String
delimiter
True
delimiter
columns.append(cd[0])
delimiter
[foo, bar]
delimiter
A = np.random.randint(0, 1000, 10000)
delimiter
x = random.randrange(0, maxx)
delimiter
print(x)
delimiter
set(l1) | set(l2)
delimiter
logging.Formatter.converter = time.gmtime
delimiter
id, nm, lat, lon, code = line.split()
delimiter
decimal.Decimal(-1200).exp()
delimiter
sum(i * i for i in range(5))
delimiter
ax.plot(x, y)
delimiter
ng.append(history[_id])
delimiter
fig = plt.figure()
delimiter
this_year = DT.date(DT.date.today().year, 1, 1)
delimiter
help(math)
delimiter
cat.head(15)
delimiter
pool.join()
delimiter
df = pandas.DataFrame(dfdict)
delimiter
today = date.today()
delimiter
help(Assignment)
delimiter
sys.modules[name] = module
delimiter
b = a[:]
delimiter
print(func(x))
delimiter
lines = [l for l in r]
delimiter
a = np.empty((1,), dtype=np.object)
delimiter
a[1:1] = [6, 7]
delimiter
os.path.join([conf.TEMPLATES_UPLOAD_DIR, filename])
delimiter
print(C.b.__doc__)
delimiter
self.axis = self.figure.add_subplot(111)
delimiter
testsite_array = f.readlines()
delimiter
print(reverse_cumsum(array))
delimiter
max(files, key=filetimestamp)
delimiter
print(vc[vc > 2].index[0])
delimiter
instance = Child.do_something(instance)
delimiter
f.write(br.response().read())
delimiter
top.after(1000, start, False)
delimiter
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
delimiter
img = Image.open(image)
delimiter
deletev[:-1]
delimiter
client.service.GetWeatherInformation()
delimiter
show()
delimiter
page = f.read()
delimiter
pvt.apply(lambda x: x / pvt.sum(1))
delimiter
norm = matplotlib.colors.Normalize(vmin=10.0, vmax=20.0)
delimiter
self.value.increment()
delimiter
f()
delimiter
print(x)
delimiter
check = (a[:, (1)] == 4) | (a[:, (1)] == 6)
delimiter
df.append(row)
delimiter
ax = fig.add_subplot(111)
delimiter
res = f(*args, **kwargs)
delimiter
4 / float(100)
delimiter
timestamp = d - datetime(1970, 1, 1, tzinfo=pytz.utc)
delimiter
gtksink.props.widget.show()
delimiter
print(mail.unread())
delimiter
assert np.all(Ay[ix:ix + Bx.shape[0], iy:iy + Bx.shape[1]] == By)
delimiter
ax.get_yaxis().set_major_formatter(ticker.FuncFormatter(comma_format))
delimiter
b = a + b
delimiter
api / __init__.py
delimiter
df = pd.concat([df] * 10000).reset_index(drop=True)
delimiter
output = f.read()
delimiter
map(np.max, np.split(v, np.where(mask)[0] + 1))
delimiter
arr = np.empty(shape, dtype=object)
delimiter
result = []
delimiter
local_filename
delimiter
--startas / tmp / testdaemon.py
delimiter
fig, ax = plt.subplots()
delimiter
draw.line((0, 0) + im.size, fill=128)
delimiter
plt.gca().add_patch(plt.Circle((posx, -posy), radius=0.1, fc=color))
delimiter
fliers[i].set_data([fdata[0][id], fdata[1][id]])
delimiter
b.clicked.connect(self.processButton)
delimiter
linesamples.add(int(4 * i + 0))
delimiter
719529
delimiter
a = np.arange(10)
delimiter
transaction.rollback()
delimiter
K[K.argsort()[-5:]]
delimiter
writer = csv.writer(outfile)
delimiter
[item[0] for item in d1.items() if item[1] == 55][0]
delimiter
get_value(dic, 70)
delimiter
(2 ** 52) ** (log(b, 2) - log(a, 2))
delimiter
print(list(flatten_group(a)))
delimiter
ylim(ax1.get_ylim())
delimiter
cache = self.get_cache()
delimiter
print_matrix(matrix, size)
delimiter
B.nbytes
delimiter
g in df.index.values
delimiter
pandas.concat(df_l)
delimiter
t.start()
delimiter
result
delimiter
show_url.allow_tags = True
delimiter
print(string)
delimiter
[row[cols] for row in self[rows]]
delimiter
site = SiteData.objects.filter(query)
delimiter
m = (1 << bits) - 1
delimiter
funcs.append(func)
delimiter
print(np.unpackbits(xp))
delimiter
[2, 2, 2]
delimiter
imouto.name
delimiter
numpy.column_stack((a, b))
delimiter
print(item)
delimiter
X[0] - a
delimiter
sum([0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])
delimiter
plt.pcolor(X, Y, f(data), cmap=cm, vmin=-4, vmax=4)
delimiter
pygame.camera.init()
delimiter
bow_length = perimeter / (desired_number_of_full_bows + 0.5)
delimiter
sock.connect((host, port))
delimiter
a_set
delimiter
(np.expand_dims(a, -1) == np.expand_dims(b, 1)).sum(axis=-1).sum(axis=-1)
delimiter
sched.start()
delimiter
map(functools.partial(add, y=2), a)
delimiter
[tdgi(item) for item in theList if tdin(item)]
delimiter
a.set_yticklabels([])
delimiter
pool.close()
delimiter
os.getcwd()
delimiter
print(better_uc)
delimiter
deleteself._x
delimiter
ax = fig.add_axes([0, 0, 1, 1])
delimiter
message = email.message_from_string(email_data)
delimiter
yaml.add_representer(collections.OrderedDict, dict_representer)
delimiter
a.pop(2)
delimiter
consumer.start()
delimiter
curses.initscr()
delimiter
multi_line_word = ZeroOrMore(split_word) + word
delimiter
self.manager.start()
delimiter
dlclose(handle)
delimiter
testRunner = unittest.TextTestRunner(verbosity=0)
delimiter
ws.send(msg)
delimiter
comprehended.repeat()
delimiter
list(reorder(a))
delimiter
soup = BeautifulSoup(html, convertEntities=BeautifulSoup.HTML_ENTITIES)
delimiter
len2 = math.hypot(x2, y2)
delimiter
metadata.append(row)
delimiter
ax1.set_title(title)
delimiter
doc = html.fromstring(content, base_url=url)
delimiter
plt.draw()
delimiter
warnings.showwarning = customwarn
delimiter
print(D[key])
delimiter
self.pw.pic = ImageTk.PhotoImage(image)
delimiter
fig.subplots_adjust(left=0.25, bottom=0.25)
delimiter
img = image.resize((188, 45), Image.ANTIALIAS)
delimiter
current.start()
delimiter
sorted(structure, key=keyfunc)
delimiter
df_s.groupby(cols).apply(Full_coverage_nosort)
delimiter
os.mkdir(dirname)
delimiter
a_new = [d.get(e, e) for e in a]
delimiter
1, 2
delimiter
ssh.close()
delimiter
pp([dict((attr.tag, attr.text) for attr in el) for el in et.fromstring(xs)])
delimiter
x | y
delimiter
x * np.sqrt(y)
delimiter
app.MainLoop()
delimiter
self.model = QtGui.QStandardItemModel()
delimiter
self.__key__() < other.__key__()
delimiter
print(A[np.searchsorted(A[:, (0)], I)])
delimiter
self.sizer.Add(self.button, flag=wx.EXPAND | wx.ALL, border=5)
delimiter
RenderJSON(your_json)
delimiter
getattr(object, f)
delimiter
a_sorted_list = [(key, a[key]) for key in sorted(a.keys())]
delimiter
a.read()
delimiter
()
delimiter
c = [(a[i] + b[i]) for i in range(len(a))]
delimiter
columns = [m.key for m in model.__table__.columns]
delimiter
root = tk.Tk()
delimiter
pickle.dumps(picklable)
delimiter
[average(n) for n in zip(*l)]
delimiter
thread = threading.Thread(target=server.serve_forever)
delimiter
self.deletecommand(funcid)
delimiter
ax = plt.gca()
delimiter
UPPER[LOWER.index(s)]
delimiter
tup[:ix] + (val,) + tup[ix + 1:]
delimiter
bokeh.io.save(layout)
delimiter
house_list.append(House(str(new_house)))
delimiter
db.session.query(Vehicle).filter(str(Car.id) == Vehicle.value)
delimiter
print(textwrap.fill(str(collections.Counter(chars)), width=79))
delimiter
key = operator.itemgetter(0)
delimiter
time.sleep(polling_interval - work_duration)
delimiter
sys.exit(app.exec_())
delimiter
HttpResponse(simplejson.dumps(user.toJSON()))
delimiter
t1.save()
delimiter
sess.query(Tag).distinct(Tag.name)
delimiter
subparsers = parser.add_subparsers()
delimiter
dc = wx.ClientDC(self)
delimiter
sess = tf.InteractiveSession()
delimiter
self._classes = {}
delimiter
net._setParameters(new_params)
delimiter
fig = plt.figure(1)
delimiter
raise Http404()
delimiter
axes_2.axis([-5, 5, -5, 5])
delimiter
x = 2
delimiter
display.popen.kill()
delimiter
print(cell.text)
delimiter
df
delimiter
pd.read_csv(io.StringIO(t), header=0)
delimiter
process2.wait()
delimiter
f.write(data)
delimiter
plt.plot(X, Y2, lw=4)
delimiter
pandas.get_dummies(input_df)
delimiter
print(check_for_triangle(tri2, lines))
delimiter
self.mainframe.columnconfigure(column, weight=1)
delimiter
b = TestC()
delimiter
cm.print_stats()
delimiter
result = [foo(p1, p2) for p1 in people for p2 in people if p1 != p2]
delimiter
z = np.array([False, False, False, False])
delimiter
isdefarg()
delimiter
max(sum(tableData, []), key=len)
delimiter
self.cowButton.grid(row=0, column=0)
delimiter
br.form.fixup()
delimiter
x = list(df1.columns.values)
delimiter
plt.show()
delimiter
self.close()
delimiter
dbconn.commit()
delimiter
a = []
delimiter
uppers.append(word) if word[0].isupper() else lowers.append(word)
delimiter
urllib.request.urlopen(req)
delimiter
t = tuple(reader)
delimiter
self.image.set_from_pixbuf(self.loader.get_pixbuf())
delimiter
id = Column(Integer, primary_key=True)
delimiter
self.lineedit.clear()
delimiter
out = np.asarray(out).reshape((xsize, ysize))
delimiter
datelist = pd.date_range(pd.datetime.today(), periods=100).tolist()
delimiter
pycurl_connect = pycurl.Curl()
delimiter
connection = engine.connect()
delimiter
c1.setopt(pycurl.PROXYTYPE, pycurl.PROXYTYPE_SOCKS5)
delimiter
print(list(iter(root)))
delimiter
img = Image.open(FILENAME)
delimiter
print(ned)
delimiter
wx.Panel.__init__(self, parent=parent)
delimiter
a[1].value
delimiter
file.close()
delimiter
summt = tf.Summary()
delimiter
difs = numpy.diff(bounded)
delimiter
print(df.types)
delimiter
cb = fig.colorbar(surf)
delimiter
inspect.isclass(o) and issubclass(o, A)
delimiter
d.close()
delimiter
fig, ax = plt.subplots()
delimiter
curl.setopt(pycurl.WRITEFUNCTION, buff.write)
delimiter
user1 = forms.ChoiceField(choices=[])
delimiter
t.play()
delimiter
deleteL[i]
delimiter
pprint.pprint(l)
delimiter
print(a[:, (2)])
delimiter
win.refresh()
delimiter
layout = QtGui.QVBoxLayout(self)
delimiter
count += 1
delimiter
time.sleep(1)
delimiter
df1
delimiter
np.exp(-z) * np.sin(t - z)
delimiter
weight = tf.Variable(tf.truncated_normal([data_size, target_size]))
delimiter
self.timeout = timeout
delimiter
body = models.TextField(null=False, max_length=1024)
delimiter
s = s.lower()
delimiter
self.i += 1
delimiter
isinstance(obj, tuple)
delimiter
subq = session.query(User.id).filter(User.is_admin == True).subquery()
delimiter
foo.close()
delimiter
numcount = dict((num, numlist.count(num)) for num in set(numlist))
delimiter
result.append((g[0][0], g[-1][-1], k))
delimiter
listWidget.insertItem(item)
delimiter
G.add_node(2, pos=(2, 2))
delimiter
list(Counter(words).keys())
delimiter
self.handle_read_callback(self)
delimiter
sess.run(init_op)
delimiter
fig = plt.figure()
delimiter
count = (sums.reshape(-1, s1.shape[1]) == 0).all(1).sum()
delimiter
p1 = Thread(target=process_output, args=(dcmpid,))
delimiter
grouped = grouped.reset_index()
delimiter
pizzas_bought = models.ManyToManyField(Pizza)
delimiter
html = urllib.request.urlopen(url).read()
delimiter
p.start()
delimiter
x = copy.copy(x)
delimiter
parse_qs(parsed_url.query)
delimiter
fig, ax = plt.subplots()
delimiter
array([2, 0, 1])
delimiter
regex.match(data.getvalue())
delimiter
perms.append(map(list, zip(*tables)))
delimiter
desks
delimiter
all(some_func(x) or True for x in some_list if x > 5)
delimiter
window = tk.Tk()
delimiter
[1, 0, 2, 1]
delimiter
ws.column_dimensions[col].width = value
delimiter
print(data)
delimiter
self.assertEqual(2, 2)
delimiter
glEnd()
delimiter
b = random.randint(0, 20 - a)
delimiter
u.save()
delimiter
cal.save()
delimiter
count = (array_1d == row_scalar).sum()
delimiter
any(s in l for l in lines1 for s in search_strings)
delimiter
fig = plt.figure()
delimiter
b * X(X, b - 1) if b > 0 else 1
delimiter
instance.save()
delimiter
np.isnan([nan, nan])
delimiter
htemp, jnk = np.histogram(d, mybins)
delimiter
y = np.concatenate(y)
delimiter
accept.stop()
delimiter
line = line.rstrip()
delimiter
celery.init_app(app)
delimiter
A(1, 2).asdict()
delimiter
a if len(a) < len(b) else b
delimiter
plt.show()
delimiter
sys.__excepthook__(type, value, tb)
delimiter
filename = os.path.basename(path)
delimiter
print(i)
delimiter
df.replace(eq, 1, inplace=True)
delimiter
self.running = False
delimiter
getattr(os, s)()
delimiter
print(x)
delimiter
Thread(target=process_output, args=[process]).start()
delimiter
prices[:-1] / prices[1:].values - 1
delimiter
math.ceil(4500 / 1000.0)
delimiter
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
delimiter
a + b
delimiter
list(kw.values())[0]
delimiter
x + y
delimiter
clf.fit(X, y)
delimiter
bools = [True, True, False, True, True, False, True]
delimiter
help(__future__)
delimiter
fig, ax = plt.subplots()
delimiter
reactor.stop()
delimiter
entity = query.get()
delimiter
df = df.stack().reset_index()
delimiter
print(str(some_delta))
delimiter
imgaxes.set_xlim((x1, x2))
delimiter
np.sin(theta, out=x[:, (1)])
delimiter
socket.setdefaulttimeout(60)
delimiter
text.set_color(color)
delimiter
self.worker.flag = True
delimiter
row.append(np.array(list(range(0, num_rows))))
delimiter
self.select_range(self.position, Tkinter.END)
delimiter
a.count(item) == 1
delimiter
print(hello())
delimiter
[_f for _f in pattern.split(s) if _f]
delimiter
np.place(dat, np.in1d(dat, old_val), new_val)
delimiter
os.killpg(os.getpgid(pro.pid), signal.SIGTERM)
delimiter
patcher.start()
delimiter
data = np.arange(1, 7)
delimiter
print(b.z)
delimiter
arr2d = np.zeros((10, 10))
delimiter
person = find_person(people_list, name)
delimiter
f(n)
delimiter
print(line)
delimiter
ax.invert_yaxis()
delimiter
min_value = min(d.values())
delimiter
indices = tf.constant([0, 2])
delimiter
dict((c, getattr(model, c)) for c in columns)
delimiter
s = f.getvalue()
delimiter
isinstance(0, collections.Sequence)
delimiter
self.neighbours = 0
delimiter
app = QApplication(sys.argv)
delimiter
vol += [volume[key] for key in sorted(volume)]
delimiter
soup = BeautifulSoup(page)
delimiter
(a, rec[a]), (b, rec[b])
delimiter
w.maximize()
delimiter
x, y = np.meshgrid(X, Y)
delimiter
obj.user.save()
delimiter
current_user.append(line[6:].strip())
delimiter
plt2 = fig.add_subplot(2, 1, 2)
delimiter
doc = BeautifulSoup.BeautifulSoup(req.content)
delimiter
group.delete()
delimiter
cursor = con.cursor()
delimiter
max_index = np.argmax(a[inds][mask])
delimiter
obj.starts += timedelta(days=1, hours=2)
delimiter
a + b + c
delimiter
df.columns
delimiter
tcp_send(pickle.dumps(dict))
delimiter
gs = gridspec.GridSpec(2, 1, height_ratios=[1, 4])
delimiter
output = os.rename(infilename, newname)
delimiter
f.read()
delimiter
html.format(model=model, content=data, theaders=theaders)
delimiter
[convert(i) for i in obj]
delimiter
max(map(len, line.split()))
delimiter
f.close()
delimiter
plt.legend(recs, classes, loc=4)
delimiter
opener = urllib.request.build_opener()
delimiter
next(f)
delimiter
colr1 = getRGBfromI(i1)
delimiter
print(sum(1 for x in l if my_condition(x)))
delimiter
DBSession.commit()
delimiter
ax2.set_yticklabels(new_labels)
delimiter
set(chain(*list(obj.values())))
delimiter
M[row, col]
delimiter
list(d.values())
delimiter
m.drawcoastlines()
delimiter
random.choice(self.items)
delimiter
[1, 2, 1]
delimiter
os.makedirs(save_path)
delimiter
devnull = os.open(os.devnull, os.O_WRONLY)
delimiter
print(len(f.read()))
delimiter
arr.reshape(arr.size / 2, 2)
delimiter
rev_multidict.setdefault(value, set()).add(key)
delimiter
self.lock = threading.Lock()
delimiter
glViewport(0, 0, width, height)
delimiter
diff = [round(abs(x / float(y)), 1) for x, y in pairwise(your_iterable)]
delimiter
self.conn = MySQLdb.connect()
delimiter
d[item[0]].append(item)
delimiter
a[0] = c
delimiter
df
delimiter
ax.set_xticks(np.arange(data.shape[1]) + 0.5, minor=False)
delimiter
pyplot.plot(x, y)
delimiter
p.start()
delimiter
n % k == 0
delimiter
setattr(self, k, v)
delimiter
Example().run()
delimiter
interned
delimiter
_odbcinst_UserINI(szFileName, FALSE)
delimiter
request.finish()
delimiter
plt.figure()
delimiter
pl.plot_surface(X, Y, Z, alpha=0.4)
delimiter
p.join()
delimiter
a = np.zeros((2, 2))
delimiter
process(line)
delimiter
df = pd.DataFrame(dict(zip(*v)) for v in vals)
delimiter
print(data)
delimiter
pprint(stiff.subs({(-nuxy - 2 * nuxz ** 2 + 1): m}))
delimiter
self.setGeometry(100, 100, 500, 190)
delimiter
any(i in setA for i in rng)
delimiter
prefixes[key[:-1]].append(key)
delimiter
plt.tight_layout()
delimiter
self.tree.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
delimiter
math.sqrt(x * x + y * y), math.atan2(y, x)
delimiter
self.currentStack.append(obj)
delimiter
ax.plot(x, y)
delimiter
a = []
delimiter
time.sleep(0.01)
delimiter
isinstance(Ham2(), Ham1)
delimiter
c.setopt(c.URL, url)
delimiter
security_adapter.set_enable_user_folders(True)
delimiter
print(list(a))
delimiter
divisors.append(i)
delimiter
X[:, start:end] = x
delimiter
A_init = pd.DataFrame(np.random.binomial(1, 0.5, (1000, 500)))
delimiter
next(tuesdays_of_february)
delimiter
result = []
delimiter
interruptable_get(q)
delimiter
print(nextmatch)
delimiter
newroot.insert(0, root)
delimiter
df.diffs[idx] = df.value[idx].diff()
delimiter
HTMLParser.__init__(self, *args, **kwargs)
delimiter
writer = csv.writer(f)
delimiter
tool.stdout.close()
delimiter
dists.dot([1, 1, 1, 1])
delimiter
ax = plt.subplot(111)
delimiter
plt.show()
delimiter
print(resp.read())
delimiter
soup = BeautifulSoup(html)
delimiter
m.load()
delimiter
plt.show(False)
delimiter
result.add(tuple(sorted(factors)))
delimiter
instance.save()
delimiter
pythons_psutil[0].memory_info()
delimiter
mask = np.isnan(arr)
delimiter
cur = con.cursor()
delimiter
new_dict[k] = filmswiththisname
delimiter
names_and_jobs = {id: (names[id] + (jobs[id],)) for id in names}
delimiter
tkinter.createfilehandler(file, mask, callback)
delimiter
np.fromiter(v[0] for v in data)
delimiter
funcs[0]()
delimiter
prev.next = tmp.__next__
delimiter
print(df1)
delimiter
plt.hist(numpy.log2(data), log=True, bins=bins)
delimiter
time.sleep(60)
delimiter
os.getcwd()
delimiter
ax.loglog(x, y)
delimiter
sys.stderr.write(s)
delimiter
ax.add_patch(patch)
delimiter
content = wiki2plain.text
delimiter
print(a.shape, b.shape)
delimiter
(x < 255 * p).reshape(shape)
delimiter
collection.save(res)
delimiter
tmp.write(line)
delimiter
main()
delimiter
_, max_value = max(data, key=lambda item: item[1])
delimiter
reactor.run()
delimiter
Gtk.main()
delimiter
ax.set_yticks(k)
delimiter
i.active()
delimiter
main()
delimiter
locals().update(main())
delimiter
B = [b for _, b in sorted(zip(order, sorted(B)))]
delimiter
client = Client(url)
delimiter
img_temp.write(urllib.request.urlopen(url).read())
delimiter
a = np.arange(27)
delimiter
self.ax.xaxis.set_minor_locator(day)
delimiter
self.stop()
delimiter
ax2.yaxis.tick_right()
delimiter
J1d = I1d.any(axis=-1).reshape(pairs.shape[:2]).sum(axis=-1)
delimiter
B.T[r, c] = B.T[c - r, c]
delimiter
m.start()
delimiter
re.findall(pattern, string, flags=0)
delimiter
[X, Y] = np.meshgrid(x, y)
delimiter
os.setsid()
delimiter
df.ix[row, key] = val
delimiter
[0, 0, 1, 1, 1],
delimiter
link.pack()
delimiter
{k: sum(map(itemgetter(k), dict1)) for k in dict1[0]}
delimiter
new_queue[key] = queue[key]
delimiter
main()
delimiter
ax.legend()
delimiter
bpy.ops.transform.translate(value=(0, 0, v.length / 2))
delimiter
parser = argparse.ArgumentParser()
delimiter
db = SQLAlchemy()
delimiter
self.noisycount += 1
delimiter
self.quietcount += 1
delimiter
content
delimiter
text += elem.strip()
delimiter
os.chdir(directory)
delimiter
json.loads(data)
delimiter
print(m.group(2))
delimiter
lis1, lis2 = [x[0] for x in my_list], [x[1] for x in my_list]
delimiter
__init__.py
delimiter
any(keyword in string for string in c_lst for keyword in k_out)
delimiter
clock = pygame.time.Clock()
delimiter
newtest = [x[:-1] for x in test]
delimiter
df.columns.levels[0]
delimiter
self.status.configure(text=message)
delimiter
self.scrollbar.config(command=self.data.yview)
delimiter
all(x.count(value) == number for x in lst)
delimiter
net.stop()
delimiter
self.Bind(wx.EVT_LEFT_UP, self.on_left_up)
delimiter
dir(__builtins__)
delimiter
self.suggestions = []
delimiter
opener = urllib.request.build_opener(auth_handler)
delimiter
out.write(f.read())
delimiter
self.text = tk.Text(root)
delimiter
plt.xticks(rotation=90)
delimiter
x.normalize().to_eng_string()
delimiter
list(a)
delimiter
self.treeview.collapse_row(row.path)
delimiter
otherfoo.bar()
delimiter
df.index = [np.arange(len(df.index)), df.index]
delimiter
data = []
delimiter
ghostscript.Ghostscript(*args)
delimiter
a + b
delimiter
print(type(b))
delimiter
X[k, k] = exp_diag[k]
delimiter
num_of_weeks = math.ceil((end_date - start_date_monday).days / 7.0)
delimiter
self.__dict__.copy()
delimiter
e.foo()
delimiter
p.data
delimiter
self.cache[key] = self.func(*args, **kwargs)
delimiter
plt.bar(idx, c[0], color=hexencode(c[1]))
delimiter
conn = cx_Oracle.connect(conn_str)
delimiter
sock.close()
delimiter
fig.colorbar(im, ax=axes.ravel().tolist(), shrink=0.5)
delimiter
print(a, b)
delimiter
PyObject_HEAD_INIT(NULL)
delimiter
reader = csv.reader(ifile)
delimiter
time.sleep(0.5 * random.random())
delimiter
my_copy = {key: value[:] for key, value in list(my_dict.items())}
delimiter
app = QApplication(sys.argv)
delimiter
print(list(d(myset)))
delimiter
btn2.pack()
delimiter
A[i], A[j], A[k] = new_values
delimiter
emp.save()
delimiter
get_stuff(d, get_value, get_subitems)
delimiter
d[0]
delimiter
l.extend((21, 22))
delimiter
np.exp(a * np.log(x) + np.log(b))
delimiter
d.pop()
delimiter
print([x for x in thing])
delimiter
out = np.hstack([xyzcols, eyecols])
delimiter
[1, 2]
delimiter
plt.show()
delimiter
stream = cStringIO.StringIO()
delimiter
print(Counter(data).most_common())
delimiter
writer.writerows(enumerate(word_features, 1))
delimiter
y = np.zeros(yshape, data.dtype)
delimiter
assert list(itersplit(sample2)) == sample2.split()
delimiter
x = np.linspace(-5, 9, 10000)
delimiter
f2.write(f1.read())
delimiter
self.root.clipboard_append(self.msg)
delimiter
abs(a - b) <= chosen_value
delimiter
(0.25).as_integer_ratio()
delimiter
alist = [(1, 6), (2, 5), (2, 4), (7, 5)]
delimiter
self.logger.info(data)
delimiter
ssl._create_default_https_context = _create_unverified_https_context
delimiter
x = np.linspace(0, 1, 50)
delimiter
float_array.tofile(output_file)
delimiter
sys.modules[__name__] = MyReprModule(sys.modules[__name__])
delimiter
val ^ 1
delimiter
df.some_property
delimiter
colors.extend(mpl.cm.jet(np.linspace(0, 1, N - 1)))
delimiter
etree.tostring(root)
delimiter
form = EditProfile(obj=user)
delimiter
partition = lambda p, xs: (list(filter(p, xs)), [z for z in xs if not p(z)])
delimiter
parser = argparse.ArgumentParser()
delimiter
print(string.format(**dictionary))
delimiter
isgenerator(), istraceback(), isframe(), iscode(), isbuiltin()
delimiter
print(get_extension_id(sys.argv[1]))
delimiter
self.obj[name] = value
delimiter
_list.extend(list(range(r[0], r[1], r[2])))
delimiter
func(*args, **kwargs)
delimiter
data[:i]
delimiter
next(obj for obj in objs if obj.val == 5)
delimiter
command = os.path.basename(sys.argv[0])
delimiter
exec(f.read())
delimiter
cv2.drawContours(convexI, [ConvexHull], -1, color=255, thickness=-1)
delimiter
out = np.column_stack((out_id, out_count))
delimiter
cm = sns.clustermap(data)
delimiter
[]
delimiter
output[token.lower()][line[t + 1].lower()] += 1
delimiter
rgb = hsv_to_rgb(hsv)
delimiter
print(match.start(), match.end())
delimiter
writer = csv.writer(outfile)
delimiter
self.doc.build(pdf)
delimiter
tot.append(get_count(data, binmin, binmax, inclusive))
delimiter
A = numpy.array([(a, 0, 0), (c, d, 0), (0, 0, 1)], dtype=np.float64)
delimiter
pd.Series(dic)
delimiter
cap = cv.CaptureFromCAM(0)
delimiter
fig = plt.figure(figsize=(xinch, yinch / 0.8))
delimiter
plt.boxplot(x + i * 2, vert=0)
delimiter
1
delimiter
setattr(obj, field_name, sub_object)
delimiter
app.add_url_rule(url, url, redirect_url)
delimiter
keys.sort()
delimiter
fileHandler.setLevel(logging.FATAL)
delimiter
ent.delete(0, END)
delimiter
l1.extend(l2)
delimiter
df
delimiter
list(json_object[0].items())
delimiter
writer = csv.writer(g)
delimiter
quality = models.CharField(max_length=100, choices=CHOICES_QUALITY)
delimiter
c[key] = list(set(a[key]).difference(b.get(key, [])))
delimiter
execlist[i][1] = myctype
delimiter
time.time.__name__
delimiter
df = pd.DataFrame()
delimiter
print((df[0] == 0).idxmax())
delimiter
document.openProtection(spm)
delimiter
self.model = QtGui.QStandardItemModel(self)
delimiter
()
delimiter
Example().run()
delimiter
json.dumps((i * i for i in range(10)), iterable_as_array=True)
delimiter
dfy.apply(lambda x: x.between(df.FIRST.dt.year, df.LAST.dt.year)).astype(int)
delimiter
Bar.bar()
delimiter
print(colorful_json)
delimiter
all(it1) or not any(it2)
delimiter
form.instance.author = self.request.user
delimiter
driver = webdriver.Firefox()
delimiter
data[0](*data[1:])
delimiter
L = list(L[0]) if len(L) == 1 else L
delimiter
pi.save()
delimiter
img.paste(source, mask=border)
delimiter
startupinfo = subprocess.STARTUPINFO()
delimiter
interact(set_cursor, x=ax.get_xlim(), y=ax.get_ylim())
delimiter
all_cookies = self.driver.get_cookies()
delimiter
int(list(filter(str.isdigit, repr(nums))))
delimiter
soup.body.clear()
delimiter
i = len(s)
delimiter
ax = fig.add_axes([0.1, 0.1, 0.7, 0.85])
delimiter
x = x + 1
delimiter
crossproduct = (c.y - a.y) * (b.x - a.x) - (c.x - a.x) * (b.y - a.y)
delimiter
dialog.setFileMode(QtGui.QFileDialog.ExistingFile)
delimiter
type(d)
delimiter
A.__init__(self, x, y)
delimiter
res = func(*args, **kwargs)
delimiter
z = np.sqrt(x ** 2 + y ** 2) + np.sin(x ** 2 + y ** 2)
delimiter
True
delimiter
c = [a[i] for i in b]
delimiter
root.grab_set()
delimiter
self.textLayout.addWidget(text)
delimiter
t.start()
delimiter
im.draw(x=0, y=0, z=0, width=fig.width, height=fig.height)
delimiter
t = np.linspace(0, 4 * np.pi, N)
delimiter
f()
delimiter
cr.set_operator(cairo.OPERATOR_OVER)
delimiter
divisibleBySeven = [num for num in inputList if num and num % 7]
delimiter
app.register_blueprint(my_view)
delimiter
is_equal(df, using_precomputation, using_apply)
delimiter
print(t.render(c))
delimiter
writer.writerow(Digi_Results)
delimiter
[2, 499]
delimiter
np.eye(1, size, index)
delimiter
fig = pl.figure()
delimiter
d[9].append(100)
delimiter
browser = mechanize.Browser()
delimiter
cap = cv2.VideoCapture(0)
delimiter
t = np.hstack((np.zeros_like(a), np.ones_like(b)))[s]
delimiter
img = Image.open(filename)
delimiter
publication_year = models.IntegerField()
delimiter
ax.margins(0.05)
delimiter
fig = pylab.figure()
delimiter
parts[i] = re.escape(parts[i])
delimiter
zip(*args)
delimiter
a.append(1)
delimiter
p.close()
delimiter
t1 = threading.Thread(target=task1)
delimiter
background = pygame.Display.set_mode()
delimiter
L = [15, 16, 57, 59, 14]
delimiter
ylim(0, 10)
delimiter
get_monotonic_nums(2, reverse=True)
delimiter
0
delimiter
settings.init()
delimiter
self.qa.save()
delimiter
fileSet.add(os.path.join(root[len(myFolder):], fileName))
delimiter
d.shape
delimiter
self.label.installEventFilter(self)
delimiter
self.root.mainloop()
delimiter
t.start()
delimiter
main()
delimiter
xsorted = np.argsort(x)
delimiter
self.caddr = caddr
delimiter
Person.first_name
delimiter
s.value_counts()
delimiter
fp.close()
delimiter
out_im.putdata(list(image2cga(inp_im)))
delimiter
missingItems = [x for x in complete_list if not x in L]
delimiter
pygame.init()
delimiter
xmin, xmax = kde.get_xlim()
delimiter
average = float(total) / len(marks)
delimiter
type.__init__(cls, name, bases, dct)
delimiter
type(a)
delimiter
p.map(f, range(m1.shape[0]))
delimiter
unique_combs(A, 4)
delimiter
date = parse_date(date_str)
delimiter
axes.set_yticks(list(range(10)))
delimiter
part.get_payload(decode=1)
delimiter
ax.set_xlim(xmax=100)
delimiter
main()
delimiter
g = partial(f, 1, 2)
delimiter
isinstance(P, (collections.Sequence, np.ndarray))
delimiter
print(i, Counter(clf.predict(X[50:])))
delimiter
{k: v for k, v in list(locals().items()) if k in args}
delimiter
os.dup2(test.fileno(), 1)
delimiter
all_pixels.append(cpixel)
delimiter
pygame.draw.circle(screen, (50, 0, 0), p, 10, 2)
delimiter
busnum = 1
delimiter
b = B()
delimiter
query_ob = query_ob.filter(or_(*options))
delimiter
d = dict(((k.lower(), j), v) for (k, j), v in list(d.items()))
delimiter
sorted_df = df.T.sort(columns=last_row_name).T
delimiter
df
delimiter
files = [os.path.join(search_dir, f) for f in files]
delimiter
b.myfun()
delimiter
j = np.random.randint(0, 5)
delimiter
Py_DECREF(array)
delimiter
redemption_date.month
delimiter
myFunction()
delimiter
im.thumbnail(thumbnail_size, Image.ANTIALIAS)
delimiter
m = np.array([7, 6, 5, 4])
delimiter
img = Image.open(filename)
delimiter
_ = sock.recv_into(mview, AMOUNT)
delimiter
sess = tf.Session()
delimiter
opener = urllib.request.build_opener(cookie)
delimiter
fig, ax = plt.subplots()
delimiter
add_patch(axes[2], rasterized=False)
delimiter
print(line)
delimiter
a2[a2[:, (1)] > 10]
delimiter
time.sleep(0.1)
delimiter
print(df)
delimiter
assert False
delimiter
result = a[indices]
delimiter
QtGui.QSystemTrayIcon.__init__(self, icon, parent)
delimiter
seconds = seconds % 60
delimiter
fig = plt.figure()
delimiter
df = pd.DataFrame(testdict)
delimiter
d1 = dict(list(d.items())[len(d) / 2:])
delimiter
1.0 / np.linalg.det(a)
delimiter
client.sd[0].service.setlocation(new_url)
delimiter
fig = plt.figure()
delimiter
handle.set_visible(False)
delimiter
G[1][2]
delimiter
log.setLevel(logging.DEBUG)
delimiter
print(docopt(__doc__))
delimiter
values = np.random.rand(10000)
delimiter
style = ttk.Style()
delimiter
print(count)
delimiter
print(m.group())
delimiter
grid = dask.array.zeros((100, 100), chunks=(50, 50))
delimiter
arg = booleanize(arg)
delimiter
[x for x in user_list]
delimiter
map(sum, l) == [n] * len(l)
delimiter
wdb.set_trace()
delimiter
a = pickle.loads(s)
delimiter
df = df.reset_index()
delimiter
PLT.show()
delimiter
column_view.set_widget(column_widget)
delimiter
random.shuffle(lists)
delimiter
obj = model_class.objects.get(product=model.product, comment=model.comment)
delimiter
[str(chr(i)) for i in h]
delimiter
obj.__reduce__()
delimiter
entry2.grid(row=1, column=2)
delimiter
x = np.array([[1, 0], [0, 1]])
delimiter
next(itertools.islice(self.it, index, index + 1))
delimiter
print(datetime.now() - startTime)
delimiter
full_arr = full_arr[full_arr[:, (idx)].argsort()]
delimiter
id(ax), id(fig.axes[0])
delimiter
c = list(zip(a, b))
delimiter
button.pack()
delimiter
parser = argparse.ArgumentParser()
delimiter
title = models.CharField(max_length=256)
delimiter
NotImplemented
delimiter
self.orig_method(*args, **kwargs)
delimiter
fig.savefig(buf)
delimiter
sorter = np.argsort(b)
delimiter
config_path = os.path.join(application_path, config_name)
delimiter
df.iloc[0]
delimiter
average = session.query(func.avg(sums.subquery().columns.a1)).scalar()
delimiter
driver = webdriver.PhantomJS()
delimiter
[6, 15, 24]
delimiter
my_array = numpy.empty(length)
delimiter
print(datetime.datetime(1970, 1, 1) + datetime.timedelta(seconds=tt))
delimiter
ax = fig.add_subplot(111)
delimiter
parser.print_help()
delimiter
list(zip(word_list, itemgetter(*word_list)(cnts)))
delimiter
a, b in x
delimiter
t = np.linspace(0, 1, n)
delimiter
parser = argparse.ArgumentParser()
delimiter
print(lines[i + 7])
delimiter
print(a, b, c)
delimiter
second_driver = webdriver.Firefox()
delimiter
False
delimiter
clf = linear_model.LogisticRegression()
delimiter
p = argparse.ArgumentParser()
delimiter
chunkfile.close()
delimiter
cursor = cnxn.cursor()
delimiter
f1()
delimiter
f = np.vectorize(f)
delimiter
rows = cur.fetchall()
delimiter
name = models.CharField(max_length=50)
delimiter
Py_XDECREF(cls)
delimiter
q = session.query(Post).join(s, Post.id == s.c.key).order_by(s.c.sort_order)
delimiter
player.play()
delimiter
wordslist = line.split()
delimiter
my_series = pd.Series(my_dict)
delimiter
nonRepetitive_x.append(x[-1] + 1)
delimiter
self.pigButton.grid(row=0, column=1)
delimiter
[[item[0] for item in data] for key, data in groups]
delimiter
self.response.out.write(data)
delimiter
client.close()
delimiter
dict_writer.writerow(dict(zip(fieldnames, fieldnames)))
delimiter
print(parts[1])
delimiter
prev_i, next_i = indices[0] - 1, indices[-1] + 1
delimiter
newR = np.percentile(S, (100 * u).tolist())
delimiter
fn(self, *args, **dict(self.gen_args, **kwargs))
delimiter
print(line)
delimiter
df2.combine_first(df1)
delimiter
data = fp.read()
delimiter
parser = argparse.ArgumentParser()
delimiter
print(a.shape)
delimiter
a, b, c
delimiter
s.close()
delimiter
server.ehlo()
delimiter
my_c_func(py_object(my_list))
delimiter
ax4.set_xlim(x1[0], x1[-1])
delimiter
Tk.__init__(self)
delimiter
L.sort(key=f)
delimiter
app = QApplication(sys.argv)
delimiter
h.request(req.get_method(), req.get_selector(), req.data, headers)
delimiter
random.shuffle(a_list)
delimiter
tuple(z)
delimiter
data_mem = data[:]
delimiter
all_data.dtype.names
delimiter
ax.yaxis.set_visible(False)
delimiter
max_val = max(l)
delimiter
p.start()
delimiter
br.set_handle_equiv(True)
delimiter
choles = np.logical_not(noholes)
delimiter
subset2 = data[data[:, (0)] == 10002]
delimiter
fig = plt.figure()
delimiter
help(gdal.ReprojectImage)
delimiter
event.SetInt(0)
delimiter
((d.month, d.year) for d in rrule(MONTHLY, dtstart=start, until=end))
delimiter
sys.path.insert(0, mypath)
delimiter
logger.setLevel(logging.DEBUG)
delimiter
myList.append(1)
delimiter
print(df)
delimiter
print(b.calculate(1))
delimiter
plt.subplot(122)
delimiter
X = numpy.random.random((N, n))
delimiter
json.dumps(xmljson.badgerfish.data(xml))
delimiter
task2.start()
delimiter
task1.start()
delimiter
+bcolors.ENDC
delimiter
self.photo = Image.open(file)
delimiter
cache.init_app(app)
delimiter
reader = csv.reader(f)
delimiter
divider = make_axes_locatable(ax1)
delimiter
os.rename(tmppath, filepath)
delimiter
merge_dicts(d1, d2)
delimiter
im = img[:, 0:50, (0)]
delimiter
s.unstack()
delimiter
self.im.seek(0)
delimiter
n = int(x)
delimiter
gx = np.array([[1, 0, -1], [2, 0, -2], [1, 0, -1]])
delimiter
urlparse.parse_qs(o.query)
delimiter
reader = list(csv.reader(f))
delimiter
lambda realf: f(realf, *args, **kwargs)
delimiter
new_matrix = a / row_sums[:, (numpy.newaxis)]
delimiter
objects = UserManager()
delimiter
self.children.append(node)
delimiter
p = argparse.ArgumentParser()
delimiter
self.Bind(wx.EVT_LEAVE_WINDOW, self.on_leave_window)
delimiter
group.append([year, 0])
delimiter
self.recipe.name
delimiter
ax2 = fig.add_subplot(2, 1, 2)
delimiter
Gtk.CellRenderer.__init__(self)
delimiter
main()
delimiter
foo()
delimiter
thread1.start()
delimiter
doi_file.close()
delimiter
f()
delimiter
func(self, *args, **kwargs)
delimiter
[k for k, g in groupby(a) if len(list(islice(g, 0, 2))) == 2]
delimiter
cv.update()
delimiter
2142
delimiter
func2b()
delimiter
x = r * np.cos(t)
delimiter
dx = 1
delimiter
print(v.key, v.values[0].value)
delimiter
print(elem.text)
delimiter
y.sort()
delimiter
np.hstack((vector1, matrix2))
delimiter
plt.xlabel(ax.get_xlabel(), rotation=90)
delimiter
c = np.linalg.solve(a, b)
delimiter
alist2.append(alist[x][:])
delimiter
item = item.strip()
delimiter
br.open(url)
delimiter
end_date = start_date + timedelta(days=1)
delimiter
run(host=aserver, port=aport, debug=True)
delimiter
p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
delimiter
print(B[np.searchsorted(B[:, (0)], I)])
delimiter
sys.getsizeof(test_dict)
delimiter
pprint(d)
delimiter
sys.exit(app.exec_())
delimiter
globals()[c] = Variable(c)
delimiter
app = QApplication(sys.argv)
delimiter
result.append(tree.pop())
delimiter
df.loc[~((lengths % 2 == 1) & (grouped.cumcount() == lengths - 1))]
delimiter
draw = ImageDraw.Draw(image)
delimiter
df.loc[criteria, ser.index] = ser[(np.newaxis), :]
delimiter
print(cross_val_score(clf, X, y, cv=skf))
delimiter
traceback.print_tb(err.__traceback__)
delimiter
fig = matplotlib.pyplot.figure()
delimiter
mask = np.random.randint(2, size=(500, 500))
delimiter
i.append(0)
delimiter
print(x)
delimiter
plt.show()
delimiter
assert foo.bar == 1
delimiter
plt.ioff()
delimiter
myA.myattribute = 9
delimiter
(c == loop(x)).all()
delimiter
{{form.as_p}}
delimiter
leg = ax.legend()
delimiter
print([(k, mydict[k]) for k in ordering])
delimiter
fig = plt.figure()
delimiter
driver = webdriver.Firefox()
delimiter
NULL
delimiter
pool.close()
delimiter
s = pygame.Surface((1000, 750), pygame.SRCALPHA)
delimiter
tuple(np.hstack(np.where(a == a.max())))
delimiter
cursor.execute(query, (AsIs(c),))
delimiter
order_array.shape
delimiter
set(permutations(x * 2))
delimiter
arr = list(arr)
delimiter
print(list(func()))
delimiter
print(test[selected(test[:, (1)])])
delimiter
f.close()
delimiter
a = A()
delimiter
print(max(node.y for node in path.nodes))
delimiter
a = np.linspace(-2, 2, 5)
delimiter
love_ctx.add((charlie, loves, bob))
delimiter
wrapped_func(*args, **kwargs)
delimiter
df2.index = df2.index.map(lambda x: difflib.get_close_matches(x, df1.index)[0])
delimiter
ssh = paramiko.SSHClient()
delimiter
sys.exit(1)
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
similarity = sum((laplacian1[:k] - laplacian2[:k]) ** 2)
delimiter
result[cols] = result[cols].div(result[cols].sum(axis=1), axis=0)
delimiter
ax.relim()
delimiter
{key: foo(value) for key, value in list(d.items())}
delimiter
self.frame.pack()
delimiter
self.SetAcceleratorTable(tbl)
delimiter
random.sample(bigset, 1)[0]
delimiter
chunk = [next(gen) for i in range(lines_required)]
delimiter
u = [x for x, y in valCount(lst).items() if y > 1]
delimiter
dict = {x: 2 * a + 1, (x ** 2): 1}
delimiter
solve(set(range(2 ** N)), set())
delimiter
im = Image.fromarray(img)
delimiter
axes[0].title.set_size(40)
delimiter
self.stream.close()
delimiter
pprint.pprint(parse_message_to_tree(s))
delimiter
self.addHandler(console)
delimiter
idf = np.log(float(n_samples) / df) + 1.0
delimiter
np.set_printoptions(suppress=True)
delimiter
funcs.append((lambda i: lambda x: f(i, x))(i))
delimiter
f.seek(-4, 2)
delimiter
im = Image.open(im)
delimiter
sorted(data, cmp=cmpnan)
delimiter
pylab.show()
delimiter
self.inner_test = inner_test
delimiter
self.observer.start()
delimiter
appengine.monkeypatch()
delimiter
boom(x, y)
delimiter
foo()
delimiter
image.seek(0)
delimiter
current_process = psutil.Process()
delimiter
int(v)
delimiter
nnz = indptr[-1]
delimiter
df1.join(df2)
delimiter
deletesys.modules[key]
delimiter
z = np.polyfit(x, y, 1)
delimiter
print(max(abs(clf.coef_ - w)))
delimiter
fig = plt.figure()
delimiter
gif.seek(1)
delimiter
my_bytes = bytearray(data)
delimiter
self.cformat = cformat
delimiter
index = bisect.bisect(a, value)
delimiter
ssh = paramiko.SSHClient()
delimiter
f.close()
delimiter
run_func()
delimiter
line = doSomething(line, next(infile))
delimiter
[word for word in words_seq if pat.match(word)]
delimiter
a[::2]
delimiter
G = nx.Graph()
delimiter
lastHourDateTime = datetime.datetime.now() - datetime.timedelta(hours=1)
delimiter
data = cursor.fetchone()
delimiter
self.name = name
delimiter
len(s)
delimiter
Base.metadata.drop_all(bind=db.engine)
delimiter
filtered_word_list.remove(word)
delimiter
ax.plot(grouped.get_group(key))
delimiter
a = numpy.empty((1, 10), dtype=object)
delimiter
print(data[1])
delimiter
PREDICT(FOR_ITER)
delimiter
deltaX = P2_x - P1_x
delimiter
time.sleep((0.1 + random.random() / 10.0) / float(speed))
delimiter
Z = np.exp(-(X ** 2 + Y ** 2))
delimiter
QNetworkAccessManager.__init__(self)
delimiter
c = np.core.defchararray.equal(a, b)
delimiter
log.addHandler(JournalHandler())
delimiter
all_data = pd.concat(dfs, ignore_index=True)
delimiter
SOAPpy.__path__
delimiter
t.ix[1], t.ix[2] = t.ix[2], t.ix[1]
delimiter
cv.SetData(cv_img, img.rotate(180).tostring()[::-1])
delimiter
x_sorted = [x for y, x in yx]
delimiter
listbox.autowidth(250)
delimiter
dx = [size1, -size1, -size1, size1, size1]
delimiter
pool.join()
delimiter
cb = plt.colorbar(im)
delimiter
wx.Frame.__init__(self, parent, id, title, size=wx.DisplaySize())
delimiter
pd.rolling_std(s, window=5).head(10)
delimiter
browser.open(url)
delimiter
yticks(linspace(ylim()[0], ylim()[1], numSteps))
delimiter
user.save()
delimiter
root = tree.getroot()
delimiter
zip(*l)
delimiter
opener = urllib.request.build_opener(urllib.request.HTTPHandler(), cp)
delimiter
plt.close()
delimiter
True
delimiter
self._reader1 = reader1
delimiter
response.status = falcon.HTTP_200
delimiter
a * c + b * ~c
delimiter
d[i].extend(j)
delimiter
df2.Date = pd.to_datetime(df2.Date)
delimiter
pprint.pprint(ll)
delimiter
counter = collections.Counter(a)
delimiter
isitIn(char, aStr[len(aStr) // 2:])
delimiter
dict.__setitem__(self, key, value)
delimiter
model = Whatever
delimiter
False
delimiter
ax.set_ylim(0, 5)
delimiter
ax.xaxis.set_minor_formatter(plt.FuncFormatter(show_only_some))
delimiter
closedir(dir_p)
delimiter
Frame.__init__(self)
delimiter
msg = MIMEMultipart()
delimiter
print(s1[s1.index(s2) + len(s2):])
delimiter
print(line)
delimiter
do_something_with(node.value)
delimiter
df = pd.DataFrame(np.random.randn(100, 2))
delimiter
self.before.append(descendent)
delimiter
Frame.__init__(self, master)
delimiter
print(groups.aggregate(lambda x: np.mean(x[x > 0.5])))
delimiter
os._exit(0)
delimiter
admin.site.register(SomeModel, SomeModelAdmin)
delimiter
outdict[tmp[0]].append((tmp[1], float(tmp[2])))
delimiter
dt.datetime.fromtimestamp(timestamp)
delimiter
next(b)
delimiter
central = utc.astimezone(to_zone)
delimiter
Base.prepare()
delimiter
log()
delimiter
a.append(d)
delimiter
d = dict([(i, [a, b, c]) for i, a, b, c in zip(df.ID, df.A, df.B, df.C)])
delimiter
repo.index.add(file_list)
delimiter
gc.collect()
delimiter
root.update()
delimiter
difflib.SequenceMatcher(a=c, b=d).ratio()
delimiter
length = a.shape[0]
delimiter
n = len(s)
delimiter
[0.0, 0.0] / np.float64(0)
delimiter
sorted(personArray, key=lambda a: a.age)
delimiter
datenow -= timedelta(days=datenow.isoweekday() - 5)
delimiter
has_permission(permission, resource, request)
delimiter
self.serial = serial.Serial(self.inport)
delimiter
sys.exit(0)
delimiter
Thread.currentThread().interrupt()
delimiter
df = pd.DataFrame(columns=list(range(8)))
delimiter
[(k, list(g)) for k, g in evens_odds_grouped]
delimiter
job.start()
delimiter
csv_content = requests.get(DOC_URL).text
delimiter
np.eye(2, dtype=int)
delimiter
out.reshape(len(arrays), -1)
delimiter
print(f.read())
delimiter
Zij = np.arange(N)
delimiter
fout.write(lines)
delimiter
g.get().read()
delimiter
row_dict[col] = row[columns.index(col)]
delimiter
client_sock.send(response_body_raw)
delimiter
p.close()
delimiter
lpr.stdin.write(data_to_send_to_printer)
delimiter
common_chars = char_list.intersection(test_set)
delimiter
json.loads(json_data, object_hook=ascii_encode_dict)
delimiter
p12.get_certificate()
delimiter
top5 = array[:5]
delimiter
self.__dict__ == other.__dict__
delimiter
[LOGGING]
delimiter
logger.addHandler(sh)
delimiter
print(match.group(1))
delimiter
reader = csv.reader(f)
delimiter
self.session.add(entity)
delimiter
print(team([1, 1, 1, 1, 1, 1, 1, 1, 1, 9]))
delimiter
signers = p7.get0_signers(sk)
delimiter
setups.append(comb)
delimiter
objectify.deannotate(root, cleanup_namespaces=True, xsi_nil=True)
delimiter
f.read(1854)
delimiter
a_sum = a.sum(axis=0)
delimiter
ax2.contour(theta_edges, r_edges, H)
delimiter
process.start()
delimiter
ax22 = fig1.add_subplot(212)
delimiter
d = collections.defaultdict(list)
delimiter
dt = datetime.datetime.fromtimestamp(secs)
delimiter
soup = BeautifulSoup(html_doc)
delimiter
result.write(line)
delimiter
label1.pack()
delimiter
my_new_list.close()
delimiter
self.ax.xaxis.set_major_formatter(timeFmt)
delimiter
view.overwrite_status()
delimiter
print(max(p for p in lst1 if p < 0))
delimiter
circle1.remove()
delimiter
res = []
delimiter
zip_file.close()
delimiter
baz()
delimiter
fig, ax = plt.subplots()
delimiter
axs[i].contourf(np.random.rand(10, 10), 5, cmap=plt.cm.Oranges)
delimiter
humansize(18754875155724)
delimiter
descendents_ancestors = set()
delimiter
offset = datetime.timedelta(days=0)
delimiter
window.configure(stack_mode=X.Above)
delimiter
values = np.sum(weights * features) + bias * weights.size
delimiter
Z2 = np.array([np.dot(X[k], Y[k]) for k in range(10)])
delimiter
duplicate_dict = dict((k, v) for v, ks in by_val for k in ks[1:])
delimiter
indata = (ctypes.POINTER(ctypes.c_double) * 5)()
delimiter
print(sys.argv[2])
delimiter
filter.uniform_filter(a, size=5)
delimiter
g = rdflib.Graph()
delimiter
print(df)
delimiter
dreload(module)
delimiter
indicies = random.sample(range(len(data)), k)
delimiter
dict.__init__(self)
delimiter
M = np.random.rand(N * 10 * 10).reshape(N, 10, 10)
delimiter
show()
delimiter
prof.dump_stats(datafn)
delimiter
setpath(d[p[0]], p[1:], k)
delimiter
display.start()
delimiter
redis.set(key, pickle.dumps(value))
delimiter
print(_get_column_letter(1))
delimiter
i += 1
delimiter
arr[x] = x * np.ones(M)
delimiter
df = pd.DataFrame(data)
delimiter
nextprime(n)
delimiter
django.db.transaction.commit()
delimiter
PyErr_Print()
delimiter
arr[i] = -arr[i]
delimiter
cPickle.dump(root.sclX.config(), f, -1)
delimiter
response = urllib.request.urlopen(request)
delimiter
session.run(trainer, {feed_dict})
delimiter
self.left[-(i + 1)]
delimiter
p.join()
delimiter
[x for x, _ in sorted(enumerate(a), key=lambda i: i[1])]
delimiter
df
delimiter
text.get_window_extent().width
delimiter
response.render()
delimiter
linecache.clearcache()
delimiter
os.dup2(self.streamfd, self.origstreamfd)
delimiter
print(list1[:5])
delimiter
L = L[n:] + L[:n]
delimiter
fp.close()
delimiter
Fraction(58, int(X))
delimiter
Jmask = mask.sum(axis=-1)
delimiter
df = df.reset_index()
delimiter
hex(_)
delimiter
np.rollaxis(a, -1, 2).reshape(a.shape[0], a.shape[1], -1)
delimiter
G = nx.Graph()
delimiter
ax.grid(True)
delimiter
self.reset()
delimiter
generate_random_data()
delimiter
dynos = int(sys.argv[1])
delimiter
a_shared_task(self, *args, **kwargs)
delimiter
f()
delimiter
im.show()
delimiter
ax1 = ax0.twinx()
delimiter
fit_result = scipy.stats.expon.fit(data, floc=0)
delimiter
end_date = date(2015, 6, 2)
delimiter
file.seek(os.stat(filepath).st_size - 1)
delimiter
self.lst = []
delimiter
print(count)
delimiter
std_1 = numpy.std(list_size_1, axis=1)
delimiter
a = numpy.arange(25).reshape((5, 5))
delimiter
pool = ProcessPoolExecutor(max_workers=1)
delimiter
cal = Calendar.objects.get(pk=1)
delimiter
res = s.translate(remove_digits)
delimiter
setattr(K, name, eval(name))
delimiter
Foo().bar.__get__
delimiter
self.lock.release()
delimiter
pylab.yticks(list(range(len(names))), names)
delimiter
a[..., ([True, True])]
delimiter
plt.show()
delimiter
b.update({key: a[key] for key in set(a.keys()) - set(b.keys())})
delimiter
print(type(folder))
delimiter
[0, 0, 0, 1, 0],
delimiter
obj = MyModel.objects.get(pk=id)
delimiter
ax.set_title(str(d))
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
start_time = time.time()
delimiter
arr = np.array([list(map(int, line.strip())) for line in f])
delimiter
root_path = get_root_path()
delimiter
farmer = models.ForeignKey(Person)
delimiter
weights = np.ones_like(x) * mass
delimiter
client = paramiko.SSHClient()
delimiter
server_ssl.sendmail(FROM, TO, message)
delimiter
inner1d(A, B)
delimiter
d1.split()[0]
delimiter
col.set_expand(True)
delimiter
sorted(result.items())
delimiter
total = sum(get_numbers(input_string))
delimiter
data = [2, 2, 2, 2, 2]
delimiter
topsublist[i] = list(L)
delimiter
dct[p[0]].append(p[1])
delimiter
dis.dis(test2)
delimiter
type(logging.INFO)
delimiter
plt.show()
delimiter
u2 = (random.uniform(0, phi2) for _ in range(len(part)))
delimiter
client = mqtt.Client()
delimiter
keys = list(Digit.keys())
delimiter
self.setLayout(layout)
delimiter
plt.figure()
delimiter
C = np.where(cond, A, B)
delimiter
combined = defaultdict(lambda : defaultdict(lambda : defaultdict(int)))
delimiter
image = np.zeros((height, width, 4), dtype=np.uint8)
delimiter
output_string = json.dumps(o)
delimiter
server_sock.close()
delimiter
fd = sys.stdout.fileno()
delimiter
all_ids.sort()
delimiter
output.write(line)
delimiter
file.truncate()
delimiter
f.write(s)
delimiter
f.close()
delimiter
self[key]
delimiter
x = np.linspace(start, end, N)[:, (np.newaxis)]
delimiter
int(round(scipy.optimize.fmin(f, 100, args=(4, 100), xtol=0.5, ftol=0.5)[0]))
delimiter
django.VERSION
delimiter
strc_view[0, [0, 1]] = x
delimiter
sess = tf.Session()
delimiter
results = pool.map(convert, images[i:i + chunk_size])
delimiter
index = random.randint(0, len(a) - 1)
delimiter
X_train_0 = X_train[y_train == 0]
delimiter
list(d.values())
delimiter
scipy.version.version
delimiter
{k: v for k, v in list(a.items()) + list(b.items()) if k in symm_diff}
delimiter
Session.add(user)
delimiter
main()
delimiter
self.lbl.pack()
delimiter
map(lambda x: x % 2 == 0, l)
delimiter
G.add_weighted_edges_from(cur)
delimiter
d = np.arange(1, 21, dtype=np.float)
delimiter
list(map(d.update, extras))
delimiter
im.set_data(next(rw))
delimiter
coords = np.stack(np.meshgrid(x, y), axis=-1)
delimiter
startupinfo = subprocess.STARTUPINFO()
delimiter
self.items.append(item)
delimiter
test_data = data[50:]
delimiter
c = [(a[x] + [b[x]]) for x in range(len(b))]
delimiter
check(sys.stdin)
delimiter
ax.set_xticks(x_ticks[::2])
delimiter
[0, 0, 0, 0, 11, 12, 0, 0],
delimiter
lineno = i + 1
delimiter
lons = np.array([5.5, 102.5, 116.2, 5.5, 102.5, 116.2, 5.5, 102.5, 116.2])
delimiter
self.server_close()
delimiter
flush()
delimiter
int(max(solve(a * x ** 2 + b * x + c, x)))
delimiter
-0.5 * (x - mean).dot(inv(C)).dot(x - mean)
delimiter
self.irenR.Render()
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
np.array([a.tolist(), b.tolist()])
delimiter
image.set_data(self.image_data)
delimiter
args = parser.parse_args()
delimiter
ax2.plot(xvals, yvals, linewidth=4)
delimiter
EMAIL_USE_TLS = True
delimiter
ax.plot(x1, np.sin(x1 / 2.0))
delimiter
cumsum([0.2, 0.2, 0.2, 0.2, 0.2])
delimiter
print(b(a, 10))
delimiter
processBody(line)
delimiter
foo.stop()
delimiter
path = db.Key(opaque_id).to_path()
delimiter
newlist.extend(l)
delimiter
all_potions[self.name] = self
delimiter
map(id, b)
delimiter
pdb.set_trace()
delimiter
h, s, v = rgb_to_hsv(r, g, b)
delimiter
flask_login.login_user(user)
delimiter
ref_to_func()
delimiter
do_something_else(object_list[0])
delimiter
sorted(items, key=key())
delimiter
number_of_lines = len(f.readlines())
delimiter
self.clear_widgets()
delimiter
dfa = df.ix[:, ([1, 0])]
delimiter
y[0][1] = 4
delimiter
time.sleep(2)
delimiter
offs -= 1
delimiter
myset = set()
delimiter
df
delimiter
results = defaultdict(list)
delimiter
b.append(foo())
delimiter
LoPRIOpoller = zmq.Poller()
delimiter
flipped[value].append(key)
delimiter
relaxng_doc = etree.parse(f)
delimiter
serializer = TaskSerializer(tasks, many=True)
delimiter
dt.datetime(1970, 1, 1) + dt.timedelta(seconds=int(timestamp))
delimiter
random.random() < p
delimiter
hug(a)
delimiter
cgitb.enable()
delimiter
parking_rows.append(ParkingLotRow((1, 222), (462, 240), 22))
delimiter
ax.add_artist(pol2)
delimiter
lst = [10, 10, 20, 15, 10, 20]
delimiter
app.run()
delimiter
client = pymongo.MongoClient()
delimiter
f.close()
delimiter
ch.start()
delimiter
fig = plt.figure()
delimiter
parsed_url.geturl()
delimiter
a, b, c
delimiter
src = Image.open(src)
delimiter
Counter(string1) == Counter(string2)
delimiter
t.join()
delimiter
application = QtGui.QApplication(sys.argv)
delimiter
self.runButton.clicked.connect(self.callProgram)
delimiter
x = np.linspace(0, 1, 1000)
delimiter
parser.parse_args(extra_args, namespace)
delimiter
X, Y = np.meshgrid(x, x)
delimiter
self.groups.clear()
delimiter
replacements = [0, 0, 0, 0]
delimiter
relaxng = etree.RelaxNG(relaxng_doc)
delimiter
process = subprocess.Popen(cmd, shell=True)
delimiter
sympy.solve(exp)
delimiter
os.chdir(dir_of_your_choice)
delimiter
re.findall(re2, text)
delimiter
x = np.asarray(x)
delimiter
idcord.append(x1)
delimiter
s.listen(0)
delimiter
client.service.SomeMethod()
delimiter
print(p.sub(repl, s))
delimiter
print(len(argspec.args))
delimiter
ndates = (regx.split(date.strip()) for date in dates)
delimiter
defaultdict(lambda : 1)
delimiter
gencache.Rebuild()
delimiter
frame = cv.QueryFrame(capture)
delimiter
root = tk.Tk()
delimiter
[n for n in dir(f) if isinstance(getattr(f.__class__, n), property)]
delimiter
data[my_list].mean(axis=1)
delimiter
cell = xl.ActiveSheet.Cells(1, 2).Text
delimiter
snake.update()
delimiter
l.append(num)
delimiter
d.setdefault(parts[0], []).append(parts[1])
delimiter
metafunc.addcall()
delimiter
app = Flask(__name__)
delimiter
a_f = os.path.abspath(__file__)
delimiter
ynoisy = y + np.random.normal(0, 0.2, size=len(x))
delimiter
a.writerows(data)
delimiter
html += str(tag)
delimiter
jsonpickle.decode(jsonpickle.encode(Goal(), unpicklable=False))
delimiter
numpy.arange(25).reshape((5, 5))
delimiter
root.mainloop()
delimiter
args = parser.parse_args()
delimiter
bus = ibus.Bus()
delimiter
link = soup.find_all(**kwargs)[0]
delimiter
fig, (ax1, ax2) = plt.subplots(ncols=2, sharey=True)
delimiter
__all__.append(module_name)
delimiter
source / opt / python / current / env
delimiter
plt.show()
delimiter
itertools.combinations_with_replacement(list(range(min, max)), num)
delimiter
model.fit(X, y, nb_epoch=1, batch_size=data.batch_size, verbose=0)
delimiter
solution = driver.find_element_by_css_selector(css)
delimiter
print(line)
delimiter
answer.append([new_list[0][0], new_list[1][0]])
delimiter
QtGui.QWidget.__init__(self, parent)
delimiter
narray[i] = NULL
delimiter
np.array([tuple(values)], dtype)
delimiter
{{(blog_date | timesince): comment_date}}
delimiter
a.sort(key=id, reverse=True)
delimiter
bundle.obj = self._meta.object_class()
delimiter
foo.bars.add(1, 2)
delimiter
mux_fn(a, b)
delimiter
type(value)
delimiter
df = pd.read_csv(StringIO(text), delim_whitespace=True, dtype=str)
delimiter
main()
delimiter
reactor.stop()
delimiter
decorator(arg)
delimiter
app.mainloop()
delimiter
matrix = []
delimiter
A = np.array([0, 1, 2])
delimiter
OrderedDumper.add_representer(OrderedDict, _dict_representer)
delimiter
the_canvas.save()
delimiter
sig1 = sin(t1 / 2) + np.random.normal(scale=0.1, size=len(t1))
delimiter
end_date = time.strptime(end_date, fmt)
delimiter
print(nuc[frame:].translate(table))
delimiter
self.mock_requests = Mock()
delimiter
row.append(a[i][j] + b[i][j])
delimiter
print(df[col_list[2:5]])
delimiter
b = np.array(zip(a.T, a.T))
delimiter
soup = BeautifulSoup(new_text)
delimiter
CornerHarris(gray, harris, 5, 5, 0.1)
delimiter
readline.set_completer(tab_completer)
delimiter
Qapp.exec_()
delimiter
print(s % tuple(x))
delimiter
unpackbits(arange(2, dtype=uint16).view(uint8))
delimiter
d = {x: a.count(x) for x in a}
delimiter
fig.subplots_adjust(hspace=0.75)
delimiter
setup()
delimiter
ascii_lowercase.find(letters) != -1
delimiter
l[:] = first_found(l)
delimiter
ax.gridlines()
delimiter
functor = arity.__class__
delimiter
foo.__getitem__(something)
delimiter
background.paste(overlay, overlay.size, overlay)
delimiter
self.a + self.b
delimiter
res = [lookupdict[k] for k in list(arr)]
delimiter
print(str(100).zfill(2))
delimiter
f.write(text)
delimiter
some_long_task.delay(x, y)
delimiter
myDict = defaultdict(int)
delimiter
Foo().bar
delimiter
norm.ppf(0.95)
delimiter
pprint([(k, list(g)) for k, g in groupby(strs)])
delimiter
plt.show()
delimiter
Maybe(func(self.val))
delimiter
lastvals = y[-1] + np.abs(y[-half_window - 1:-1][::-1] - y[-1])
delimiter
a = np.random.rand(4, 4)
delimiter
particle.kill()
delimiter
ax.zaxis.set_rotate_label(False)
delimiter
result_dict[str(len(word))].add(word)
delimiter
r = Image.fromarray(numpy.uint8(r_array * 255.999))
delimiter
same_structure(a[1:], b[1:])
delimiter
Watchdog(1)
delimiter
user = User()
delimiter
raise NotImplementedError
delimiter
d.setdefault(i, [])
delimiter
nmask = [ord(c) for c in mask]
delimiter
ax.grid()
delimiter
application = get_wsgi_application()
delimiter
cts = datetime.fromtimestamp(ts)
delimiter
curr_points = [(x, y) for x, y in zip(first_points, second_points)]
delimiter
main()
delimiter
[(not y) for y in x]
delimiter
time.sleep(sleep_time)
delimiter
key1 = models.IntegerField(primary_key=True)
delimiter
ended = time.time()
delimiter
a = np.array([0, 47, 48, 49, 50, 97, 98, 99])
delimiter
A.print_x.__func__(b)
delimiter
rand_x_digit_num(10, False)
delimiter
f.seek(0)
delimiter
0.1 * randint(int(min_time * 10), int(m_time * 10))
delimiter
logging.Handler.close(self)
delimiter
print(longest_sum([1, 1, 1, 1, 1, 1, 4], 0, 0, 6))
delimiter
print(calculateDistance(2, 4, 6, 8))
delimiter
df.reindex(df.b.abs().sort(inplace=False).index)
delimiter
[[b.pop(0), b.pop(0)] for _ in range(1)]
delimiter
(1.0 + erf(x / sqrt(2.0))) / 2.0
delimiter
im = scipy.misc.imread(filename)
delimiter
z = np.arange(-5, 5, 0.2)
delimiter
masked_diff.argmin()
delimiter
myA[(myA > 5).nonzero()[0][:2]] = 0
delimiter
self.clientSocket.send(data)
delimiter
[(1, 2), (2, 0)]
delimiter
remove_odd([4, 5, 4, 7, 9, 11])
delimiter
fd.write(request.content.read())
delimiter
self.next_chunk = self.next_chunk[n:]
delimiter
Py_Finalize()
delimiter
browser.open(login_url)
delimiter
evt.Skip()
delimiter
ssh = paramiko.SSHClient()
delimiter
contribution.filter()
delimiter
handle_last_line(remaining)
delimiter
zip(x, y)
delimiter
p.start()
delimiter
hscrollbar.config(command=canvas.xview)
delimiter
np.random.seed(100)
delimiter
ret = f(*args, **kwargs)
delimiter
print(label.get_text())
delimiter
result = []
delimiter
session.flush()
delimiter
df.apply(lambda x: d[x.name].transform(x))
delimiter
foo(bar)
delimiter
time.sleep(sleeping_time)
delimiter
Question.objects.filter(test_id=fr).update(test=test_obj)
delimiter
t.sort()
delimiter
mlab.figure(size=(1024, 768), bgcolor=(1, 1, 1), fgcolor=(0.5, 0.5, 0.5))
delimiter
print(res.getheaders())
delimiter
second.nonzero()
delimiter
newlist.append([a, numlist[key]])
delimiter
pygame.quit()
delimiter
offset += len(line)
delimiter
np.amax(a[mask])
delimiter
msg = queue.get()
delimiter
print(entry.title)
delimiter
testclassa().testmethod1()
delimiter
foo = lambda x, y=2: x + y
delimiter
sys.exit()
delimiter
sock.connect((self.host, self.port))
delimiter
bar2 = Bar.objects.get(pk=2)
delimiter
options = webdriver.ChromeOptions()
delimiter
identifier = CharField(primary_key=True)
delimiter
fcntl.fcntl(w, fcntl.F_SETFL, old_flags | os.O_NONBLOCK)
delimiter
item1.setBackground(QtGui.QColor(255, 128, 128))
delimiter
a = MyModel.objects.get(id=1)
delimiter
thread = threading.Thread(target=target)
delimiter
file = forms.FileField()
delimiter
v = -np.cos(np.pi * x) * np.sin(np.pi * y) * np.cos(np.pi * z)
delimiter
start = time.time()
delimiter
read = f.read()
delimiter
primepi(n)
delimiter
timestamp = time.mktime(ntuple)
delimiter
t = Thread(target=print_updates, args=(q,))
delimiter
MAIL_USE_TLS = False
delimiter
self.panel_sizer = wx.BoxSizer(wx.HORIZONTAL)
delimiter
json_string = json.dumps(data, ensure_ascii=False)
delimiter
plt.imshow(np.random.random((10, 10)))
delimiter
t.start()
delimiter
plt.figure(figsize=(6, 5))
delimiter
np.testing.assert_almost_equal([x, x, x], [y, y, y], 5)
delimiter
p.remove(c)
delimiter
emitted.append(name)
delimiter
pygame.init()
delimiter
AFMT_S16_NE = ossaudiodev.AFMT_S16_BE
delimiter
sizer = wx.BoxSizer(wx.VERTICAL)
delimiter
plt.show()
delimiter
now = dt.datetime.now(timezone)
delimiter
root = dict()
delimiter
[idx for idx, el in enumerate(foo) if type(el) == type(arr)]
delimiter
p4 = ctypes.c_int(0)
delimiter
max(map(int, MyCount))
delimiter
words.append(ipta)
delimiter
client = oauth2.Client(consumer)
delimiter
self._server.running = True
delimiter
constant_dic = dict([(c, i) for i, c in enumerate(constants)])
delimiter
a[:, (1)] *= 5.2
delimiter
utf8_fh.readlines()
delimiter
my_answer.append(my_array[i])
delimiter
Counter(get_all_k_mer(s, k=2))
delimiter
output = PdfFileWriter()
delimiter
MainWin().main()
delimiter
sqlContext.createDataFrame(rdd, schema)
delimiter
raise OSError(e)
delimiter
t.start()
delimiter
NP.cumsum(A[:, (1)])
delimiter
p.start()
delimiter
ts = (utc_date - date(1970, 1, 1)).days * 86400
delimiter
quad(integrand, 0, 1000, points=[750])
delimiter
arr2 = arr.reshape(20, 500)
delimiter
l.set_rotation(0)
delimiter
s.unstack()
delimiter
ax.grid(False)
delimiter
df.set_value(i, j, value ** 2)
delimiter
sys.exit(main(sys.argv[1:]))
delimiter
np.where(y == 0, 0, x / y)
delimiter
title = models.CharField()
delimiter
threading.Thread.__init__(self)
delimiter
L[:next(n) + 1] = []
delimiter
ax.xaxis.tick_top()
delimiter
pool.apply_async(worker, (item,))
delimiter
y_val = [x[1] for x in data]
delimiter
Pear
delimiter
datetime.datetime.now()
delimiter
G.add_edge((q, r), (q, r + 1))
delimiter
print(instance[0].instances[0].start())
delimiter
sizer = wx.BoxSizer(wx.VERTICAL)
delimiter
corpus = Corpus(documents=[Document(x) for x in lst])
delimiter
words.remove(word)
delimiter
listB = [[1, 20], [21, 17]]
delimiter
pool.terminate()
delimiter
random.shuffle(indices)
delimiter
sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, 2)
delimiter
display.set(ast.literal_eval(display.get()))
delimiter
isinstance(instance, User)
delimiter
Food._meta.get_all_related_objects()
delimiter
dist = hamdist(trans[i][:-1], trans[j][:-1])
delimiter
obj.get_object()
delimiter
root = Tkinter.Tk()
delimiter
Frame.__init__(self, root)
delimiter
soup = parser.parse(text)
delimiter
plt.contour(X, Y, T[:, :, (round(len(z) / 2))], 64)
delimiter
data = numpy.random.normal(size=10000)
delimiter
iterator.__iter__()
delimiter
word = match.group(0)
delimiter
numbers = [x for x in range(length)]
delimiter
a[~mask]
delimiter
top_matrix.nullspace()
delimiter
self.treeview.append_column(self.tvcolumn1)
delimiter
cv_img = adaptors.PIL2Ipl(pil_img)
delimiter
swin = ScrolledWindow(frame, width=500, height=500)
delimiter
math.exp(-x)
delimiter
phases = phases.reshape((10, 1))
delimiter
tox - -tests / test_loader.py
delimiter
partial(_update_filename, path=path)
delimiter
sympy.solve(d)
delimiter
X = sparse.lil_matrix((100, 100))
delimiter
signal.alarm(seconds)
delimiter
plt.scatter(x, y)
delimiter
self.func_count += 1
delimiter
cols = df.columns.tolist()
delimiter
a = np.ones(y[-1], dtype=np.intp)
delimiter
app = Flask(__name__)
delimiter
(lambda x: lambda : x)(value).__closure__[0]
delimiter
max.append(-1 * q.get())
delimiter
p.get_children()[1].get_paths()
delimiter
A = [[INFINITY for i in range(n)] for j in range(2 ** n)]
delimiter
do_something_awesome(lines_of_interest)
delimiter
self.master.rowconfigure(r, weight=1)
delimiter
request = QNetworkRequest(QUrl(url))
delimiter
assert isinstance(f.read(), str)
delimiter
writer.commit()
delimiter
print([t[1] for t in Formatter().parse(s) if t[1]])
delimiter
n = int(input())
delimiter
next(it)
delimiter
sleep(5)
delimiter
base_start += timedelta(days=1)
delimiter
_cell.style.fill.start_color.index = Color.DARKGREEN
delimiter
max(left_depth, right_depth) + 1
delimiter
self.queries = []
delimiter
lambda x: exp(x)
delimiter
heapq.nlargest(5, A, key=A.get)
delimiter
root = Tk()
delimiter
d = d.reshape(partitions.shape[1], -1)
delimiter
x[0].append(1)
delimiter
line = f.readline()
delimiter
[item for item in list(set(L)) if L.count(item) > 1]
delimiter
sess = tf.InteractiveSession()
delimiter
inFile = sys.argv[1]
delimiter
ax.set_yticklabels(df.index, size=20)
delimiter
csvfile.close()
delimiter
y = np.asarray(y, dtype=np.uint8)
delimiter
mycsv = csv.reader(open(myfilepath))
delimiter
inverted_dictionary[new_key] = [key]
delimiter
[x for x in List1 if x in Set2]
delimiter
time.sleep(2)
delimiter
self.add(button)
delimiter
app = webapp.WSGIApplication(url_map, debug=False)
delimiter
ax1 = plt.subplot2grid((6, 1), (0, 0))
delimiter
line = line.rstrip()
delimiter
ax.legend(handles=handles, labels=labels)
delimiter
y.append(contour[0][1])
delimiter
fig, axes = plt.subplots(ncols=2, sharey=True)
delimiter
db.session.add(post)
delimiter
test_runner = unittest.TextTestRunner().run(test_suite)
delimiter
wd.implicitly_wait(10)
delimiter
[False, True]
delimiter
self.args[i]
delimiter
self.crawler.configure()
delimiter
[i[1] for i in l]
delimiter
a + b
delimiter
table.horizontalHeader().setResizeMode(0, QHeaderView.Stretch)
delimiter
fig, ax = plt.subplots()
delimiter
child.close()
delimiter
self.f.flush()
delimiter
pprint(list(all_doublet_tuples(n)))
delimiter
len(df.index) == 0
delimiter
c[0] += 1
delimiter
app = Flask(__name__)
delimiter
model = gensim.models.Word2Vec(sentences)
delimiter
loop.close()
delimiter
res = numpy.empty_like(a)
delimiter
p.start()
delimiter
d = {k: default_to_regular(v) for k, v in d.items()}
delimiter
rfc822.parsedate_tz(date)
delimiter
f.seek(i * line_len)
delimiter
xmin, xmax, ymin, ymax = x.min(), x.max(), y.min(), y.max()
delimiter
queryset = Question.objects.all()
delimiter
response = urllib.request.urlopen(req)
delimiter
p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
delimiter
log.setLevel(logging.DEBUG)
delimiter
time.sleep(seconds_till_future)
delimiter
post[0].tags.clear()
delimiter
print(calculateDistance(2, 4, 6, 8))
delimiter
parameter_setting.save()
delimiter
print(x)
delimiter
self.name = name
delimiter
srf.blit(f.render(unistr, True, (255, 255, 255)), (0, 0))
delimiter
labels = np.array([1, 2, 0, 0, 2])
delimiter
Tk().withdraw()
delimiter
print(f.read())
delimiter
answer.extend([k for _ in range(counts[k])])
delimiter
self.timer.Start(8000)
delimiter
plt.hist(results, bins=bins)
delimiter
HTML(style + df.to_html(formatters=frmt))
delimiter
np.vstack([A[i:i - len(A) + width] for i in range(len(A) - width)])
delimiter
inset.set_yticks([y_min, y_min + (y_max - y_min) / 2.0, y_max])
delimiter
False
delimiter
match.group(2)
delimiter
s.getId(), s.getName(), s.getCustomer().getId()
delimiter
wrapper
delimiter
G.add_edge((q, r), (q, r - 1))
delimiter
a = ndimage.interpolation.zoom(a, 0.5)
delimiter
pyplot.show()
delimiter
colorama.init()
delimiter
print(sys.argv)
delimiter
G.add_edge((q, r), (q - 1, r))
delimiter
print(b[0])
delimiter
np.set_printoptions(2, threshold=100, edgeitems=10, suppress=True)
delimiter
image_file = io.BytesIO(fd.read())
delimiter
driver = webdriver.Firefox(capabilities=caps)
delimiter
datastream.read(2)
delimiter
print(calendar.month(2011, 9))
delimiter
aList = [Entry(**vals) for vals in values]
delimiter
c, b = hashlittle2(data, initval, 0)
delimiter
vocab_tage = dict((value, key) for key, value in list(tag_vocab.items()))
delimiter
ax = plt.figure().gca()
delimiter
i += 1
delimiter
foo = Foo()
delimiter
int(time.mktime(value.timetuple()) * 1000)
delimiter
field_name = file_name
delimiter
p.wait()
delimiter
pool = Pool(2)
delimiter
PROJECT_PATH = os.path.dirname(os.path.abspath(__file__))
delimiter
results = multiprocessing.Queue()
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
lineResult = libLAPFF.parseLine(line)
delimiter
plt.gca().add_collection(lc)
delimiter
display(fig)
delimiter
worksheet.write(row, col, key)
delimiter
a, b = b, a + b
delimiter
outdict
delimiter
self.set = set()
delimiter
m.append([int(x) for x in input().split()])
delimiter
root.mainloop()
delimiter
contrived.foo()
delimiter
keys.sort()
delimiter
print ()
delimiter
numpy.power(x, a + 1.0) - b
delimiter
arr = [[0, 0, 0, 0] for i in range(5)]
delimiter
time.sleep(0.2)
delimiter
stdout = sys.stdout
delimiter
b = numpy.array([100, 100, 100])
delimiter
print(f)
delimiter
logging.Handler.__init__(self)
delimiter
new_dic[1] = {(2): 5}
delimiter
A = np.arange(100).reshape(25, 4)
delimiter
print(parser.parse_args())
delimiter
Data = NP.random.randint(-5, 5, 1000).reshape(500, 2)
delimiter
plt.tight_layout()
delimiter
(evens, odds)[i % 2].append(i)
delimiter
print(mmc.serial)
delimiter
fig.tight_layout()
delimiter
threading.Thread(target=show_progress_A, args=(win,)).start()
delimiter
a = list()
delimiter
d = dict((v, k) for k, v in r.items())
delimiter
df = pd.DataFrame(dict(time=tidx, value=np.random.rand(smp_n)))
delimiter
res = dict(sorted([(k, v) for k, v in list(L.items())], key=lambda x: x[1])[-2:])
delimiter
G.add_edge((q, r), (q + 1, r))
delimiter
math.atan2(-0.0, -0.0)
delimiter
array = (ctypes.c_double * 100)()
delimiter
print(tuple(f))
delimiter
ax1 = fig.add_subplot(111)
delimiter
df
delimiter
surface.fill((255, 255, 255))
delimiter
file.delete()
delimiter
X[:, (idx0)]
delimiter
raise KeyError(key)
delimiter
print(A[ind])
delimiter
csv_writer.writerow([x[y] for x in hello])
delimiter
imgplot = plt.imshow(img)
delimiter
sorted(a)
delimiter
abort(404)
delimiter
l.index(a) < l.index(b)
delimiter
layout.addWidget(self.DataPlot, 1)
delimiter
irenL.Start()
delimiter
index = [0, 2]
delimiter
S1 = set(L1)
delimiter
cj = cookielib.LWPCookieJar()
delimiter
get_greenlet_status(greenlets)
delimiter
db.create_all()
delimiter
result = func(*args, **kwargs)
delimiter
inner = result[outerKey].copy()
delimiter
self.pipeline.send(self)
delimiter
cnx.close()
delimiter
sound.play()
delimiter
self.documents.append(QTextDocument(self))
delimiter
m = len(list)
delimiter
self.c = cv2.VideoCapture(0)
delimiter
client = Client(wsdl=wsdl)
delimiter
result = collections.Counter(sixgrams)
delimiter
screen_name = models.CharField(max_length=50, blank=True, null=True)
delimiter
M.set_value(index, column, new_value)
delimiter
Two().f()
delimiter
ast.iter_child_nodes(node)
delimiter
f.write(inp)
delimiter
thread.join()
delimiter
self.drain()
delimiter
print(tag.nextSibling.__class__)
delimiter
manager.run()
delimiter
years_dict[line[0]].append(line[1])
delimiter
l.add(1)
delimiter
main.py
delimiter
len(s)
delimiter
rex.match(my_string)
delimiter
self.setCentralWidget(self.window)
delimiter
print(list(itertools.chain([peek], gen)))
delimiter
print(np.random.dirichlet(np.ones(10), size=1))
delimiter
url = opener.open(request)
delimiter
linspace_y = np.linspace(min(y_range), max(y_range), 100)
delimiter
fig = plt.figure()
delimiter
points.sort()
delimiter
ax.grid()
delimiter
y.append(b.pop(0))
delimiter
format_to_year_to_value_dict[format_str][year].append(value)
delimiter
min(c for c in s if c.isalpha())
delimiter
A.sort()
delimiter
y = []
delimiter
http = httplib2.Http()
delimiter
float(s)
delimiter
arr = np.array(img)
delimiter
setattr(obj, self.name, types.MethodType(f, obj, obj.__class__))
delimiter
pickle.load(f)
delimiter
help(a.assign)
delimiter
main()
delimiter
parser = argparse.ArgumentParser()
delimiter
A.combineAdd(-B)
delimiter
zf.close()
delimiter
d = locals()
delimiter
ct.iloc[:10, :10]
delimiter
((x + y, x - y) for x, y in data)
delimiter
canvas.setLineWidth(0.5)
delimiter
print(m.groups())
delimiter
Counter(h.split())[n]
delimiter
diff = filter(lambda x: x not in b, a)
delimiter
web.show()
delimiter
draw = ImageDraw.Draw(mask)
delimiter
ax[1] = data.boxplot()
delimiter
eline = process.stderr.readline()
delimiter
zip.extractall(path, get_members(zip))
delimiter
x = np.linspace(0, 16, 1000)[:, (np.newaxis)]
delimiter
status = process.wait()
delimiter
bar = relationship(Bar, uselist=False)
delimiter
b = np.random.randint(0, size_a, size_b)
delimiter
x = [0] * 100000000
delimiter
json.loads(json_str)
delimiter
random.shuffle(my_list)
delimiter
indices[val].append(i)
delimiter
df = pd.DataFrame(existing_data, columns=cols)
delimiter
count
delimiter
map(lambda t: t.start(), threads)
delimiter
c = nprect(a, np.deg2rad(b))
delimiter
res = cv2.bitwise_and(res, mask)
delimiter
m.group()
delimiter
dist1 = (x[0:-2] - x[1:-1]) ** 2 + (y[0:-2] - y[1:-1]) ** 2
delimiter
f.close()
delimiter
print(html)
delimiter
self.window.show()
delimiter
TP, FP, FN, TN
delimiter
html = urllib.request.urlopen(req).read()
delimiter
random.seed()
delimiter
x.sort()
delimiter
d = datetime.datetime.now()
delimiter
vc.release()
delimiter
np.set_printoptions(threshold=np.inf)
delimiter
test_func(*args, **kwargs)
delimiter
print(np.nanargmax(a))
delimiter
app = wx.PySimpleApp()
delimiter
str(jinja2.escape(a))
delimiter
df1 = func(df)
delimiter
seen.add(x)
delimiter
imgray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)
delimiter
_foobar.argtypes = [ctypes.c_int, ctypes.c_int, _doublepp, _doublepp]
delimiter
pd.concat(los, axis=1)
delimiter
self.queue.get(block=True)
delimiter
self.fig = plt.figure()
delimiter
fn(*args, **kwargs)
delimiter
self.mysignal.connect(self.mySignalHandler)
delimiter
os.__file__
delimiter
plt.pie(values, labels=labels, autopct=make_autopct(values))
delimiter
child.expect(pexpect.EOF)
delimiter
set_of_150kwords = set(list_of_150kwords)
delimiter
plt.imshow(sample_images[(i), ...])
delimiter
session.commit()
delimiter
plt.gcf().gca().add_artist(circle1)
delimiter
plt.clf()
delimiter
logging.basicConfig(level=0)
delimiter
module.py
delimiter
loop.run_forever()
delimiter
output[line[1].strip()] = line[2].strip()
delimiter
sess = tf.Session()
delimiter
self.browser.get(self.live_server_url)
delimiter
self.pack()
delimiter
a.a = a.a
delimiter
print(key, myNames[key])
delimiter
do_something()
delimiter
xl_file = pd.ExcelFile(file_name)
delimiter
data = {}
delimiter
ana(lambda x: (x, f(x)), lambda _: False)(x)
delimiter
print(line)
delimiter
Parallel(n_jobs=2)(delayed(foo)(i ** 2) for i in range(10))
delimiter
output.seek(0)
delimiter
str(tst)
delimiter
name = models.CharField(max_length=255)
delimiter
lines = f.readlines()
delimiter
self.canvas.draw_idle()
delimiter
self.assertEqual(request.responseCode, 200)
delimiter
df1
delimiter
d2 = {x: sorted(d1[x]) for x in list(d1.keys())}
delimiter
tk.Frame.__init__(self, *args, **kwargs)
delimiter
rep = dict((re.escape(k), v) for k, v in rep.items())
delimiter
df.mask(criteria).fillna(ser)
delimiter
print(pattern.search(input, start).span())
delimiter
curdir = os.path.dirname(__file__)
delimiter
main()
delimiter
raise GracefulExit()
delimiter
imdata = iter(imdata)
delimiter
soup = BeautifulSoup(html)
delimiter
C.u4_sort(begin, arr.size)
delimiter
job = Job.objects.filter(client_id=pk)
delimiter
ax.bar(list(range(5)), rand(5), color=my_cmap(my_norm(my_data)))
delimiter
result = json.loads(s)
delimiter
f.writelines(data)
delimiter
content = fd.getvalue()
delimiter
self._callback(self._value)
delimiter
(listScore == [2, 0]).all(1).sum()
delimiter
value += sum([int(i) for i in str(value)])
delimiter
ny.append(y[-1])
delimiter
_nonbmp.sub(_surrogatepair, text)
delimiter
print(temp_re.findall(data))
delimiter
rdd2 = sc.parallelize(range(5))
delimiter
self.txt.see(END)
delimiter
yaml_parse.py
delimiter
response = urllib.request.urlopen(request)
delimiter
field = models.CharField(max_length=255)
delimiter
entity.before_put()
delimiter
start_response(status, headers, exc_info)
delimiter
np.hstack([a[:k] for k in x])
delimiter
print(calendar.isleap(1900))
delimiter
sys.executable
delimiter
print(k, v)
delimiter
tuples = tuple(set(d.items()) for d in dicts)
delimiter
print(tuple(a))
delimiter
wb = Workbook()
delimiter
deletemylist[:17]
delimiter
linprog(c, A_ub, b_ub, A_eq, b_eq, options=dict(bland=True))
delimiter
ax.scatter(xData, yData)
delimiter
new_array = np.array(means).reshape(new_shape)
delimiter
assert_frame_equal(csvdata, csvdata_old)
delimiter
Parent.__init__(self, list(args))
delimiter
f = open(filename)
delimiter
print(m.group(2))
delimiter
d[key] = d.get(key, []) + [value]
delimiter
sock = urllib.request.urlopen(url)
delimiter
pool.close()
delimiter
self.sock.connect((host, port))
delimiter
blocks[-1].append(line)
delimiter
counts = collections.Counter(patterns)
delimiter
dt = datetime.datetime.fromtimestamp(nanos / 1000000000.0)
delimiter
sum_max(L[1:], accum, max(max_value, accum))
delimiter
ax = fig.add_subplot(111)
delimiter
print(__file__)
delimiter
session = create_session(bind=e, autocommit=False, autoflush=True)
delimiter
True
delimiter
len(_)
delimiter
str(self.mylist)
delimiter
OTHER_THING = True
delimiter
big_stokes = np.vstack(stokes_list)
delimiter
print(len(inspect.getargspec(sum)[0]))
delimiter
run_benchmark()
delimiter
p.sort()
delimiter
ax1.plot(x, y)
delimiter
s.listen(1)
delimiter
myapp.models
delimiter
f(*args, **kwargs)
delimiter
np.square(df)
delimiter
y_rev[x.argsort()] = np.arange(x.size)[::-1]
delimiter
x, y, z
delimiter
console.setLevel(logging.ERROR)
delimiter
sys.path.insert(0, dirname)
delimiter
{k.name: v for k, v in list(g.items())}
delimiter
urllib.request.urlopen(req)
delimiter
may_b = numpy.array([False, True, True, False])
delimiter
app = Flask(__name__)
delimiter
m.span()
delimiter
Z = append([[(1) for _ in range(0, len(Z))]], Z.T, 0).T
delimiter
print(tf.__version__)
delimiter
np.dot(a, b)[[0, 0, 1999, 1999], [0, 4999, 0, 4999]]
delimiter
matrix = []
delimiter
linecache.checkcache(filename)
delimiter
key = ndb.Key(urlsafe=string_key)
delimiter
cmyk = gcr(im, 0)
delimiter
xml.display()
delimiter
print(filename)
delimiter
message[i] = (digest[i] ^ message[i - 1]) * 129 % 256
delimiter
a.upper() == b.upper()
delimiter
self.latest(limit=1, public=True)
delimiter
os.dup2(si.fileno(), sys.stdin.fileno())
delimiter
foobar.foo()
delimiter
self.view_items.sort(key=key_func)
delimiter
Y.append(y)
delimiter
mydata = yaml.load(stream)
delimiter
x, y = np.meshgrid(np.arange(10), np.arange(10))
delimiter
scipy.argmin([scipy.inner(q - x, q - x) for x in X])
delimiter
[(2, 4), (4, 5)]
delimiter
m.scatter(data.Lon, data.Lat, c=data.Z, s=100, vmin=zi.min(), vmax=zi.max())
delimiter
self.foo.fset(5)
delimiter
yip()
delimiter
allocate(temp(dsize))
delimiter
admin.site.unregister(Site)
delimiter
a + b
delimiter
plt.imshow(img)
delimiter
process_directory(dirName=os.path.join(dirName, f))
delimiter
df_cov = corr.multiply(df_std.multiply(df_std.T.values))
delimiter
d.weekday() == 4 and 14 < d.day < 22
delimiter
scp = SCPClient(ssh.get_transport())
delimiter
list_a = [(1, 2), (1, 2), (1, 2)]
delimiter
plt.show()
delimiter
job.delete()
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
list(chain(*[sorted(g) for k, g in groupby(sorted(lis, key=len), key=len)]))
delimiter
reverseCom([4, 5, 6], 1)
delimiter
os.dup2(devnull, 1)
delimiter
df = df.reset_index(level=0, drop=True)
delimiter
self.assertTrue(result)
delimiter
idx = b.reshape(a.shape[0])
delimiter
id(b[0])
delimiter
gransons.append(grandson)
delimiter
ax.set_ylim(0, 1)
delimiter
architecture / techstack
delimiter
deployment / installation
delimiter
deployment / licensing
delimiter
check_for_duplicates(sys.argv[1:])
delimiter
data = {h: v for h, v in zip(str(range(number_of_columns)), zip(*values))}
delimiter
sidx = arr.argsort()
delimiter
test_debug_json()
delimiter
datetime.datetime.now(pytz.utc).isoformat()
delimiter
opcode, dest, src
delimiter
ax.boxplot(df[column], positions=[position])
delimiter
print_time_range(train_likes_df.time.dt.time)
delimiter
os.chdir(command[raw_input][0])
delimiter
Decimal(1)._isinteger()
delimiter
lint.py - -generate - rcfile > standard.rc
delimiter
conn.close()
delimiter
fig = plt.figure()
delimiter
print(f.bar.__name__)
delimiter
app = Flask(__name__)
delimiter
Thread.__init__(self)
delimiter
[list(g) for _, g in groupby(numbers, grouper)]
delimiter
delay = (run_at - now).total_seconds()
delimiter
0
delimiter
outf.seek(0)
delimiter
pool = Pool(4)
delimiter
driver = webdriver.Chrome()
delimiter
table_data = h5read(file_input, table_name)
delimiter
self.opn[op](op1, op2)
delimiter
logging.getLogger(name)
delimiter
clf.fit(train_features, train_labels)
delimiter
df
delimiter
dict(map(reversed, t))
delimiter
(self.arr == other.arr).all()
delimiter
self.f_(obj)
delimiter
input_img = Image.open(input_image)
delimiter
ax.yaxis.label.set_rotation(0)
delimiter
a = np.sort(arr, axis=1)
delimiter
output = (lambda x: x + x)(data[2])
delimiter
capture = cv.CaptureFromCAM(0)
delimiter
Cl.__init__.__defaults__
delimiter
list(d.items())
delimiter
movements = set()
delimiter
print(is_shifted_copy([1, 2, 1], [2, 1, 1]))
delimiter
keys_b = set(dict_b.keys())
delimiter
fum.bar
delimiter
chr(int(x[2:-1]))
delimiter
module_name = os.path.splitext(os.path.basename(__file__))[0]
delimiter
lgnd.legendHandles[0]._legmarker.set_markersize(6)
delimiter
fd.seek(0)
delimiter
geturl()
delimiter
db = SQLAlchemy(app)
delimiter
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
print(r.content)
delimiter
weatherData = json.loads(jsonFile)
delimiter
using_mapper_options(save_on_init=False)
delimiter
fig = plt.figure()
delimiter
busiest_start = max(rsum, key=lambda x: x[1])
delimiter
deletesomelist[i]
delimiter
show()
delimiter
pprint.pprint(root)
delimiter
print(a[(1), :].toarray())
delimiter
Example.foo(self)
delimiter
xmlrunner.XMLTestRunner().run(suite)
delimiter
parser.add_argument(*args, **kwargs)
delimiter
print(sys.version_info)
delimiter
x.astype(int)
delimiter
db_data = json.loads(db_col_data)
delimiter
layout.addWidget(self.tab)
delimiter
tree = ElementTree()
delimiter
bid = int(bid)
delimiter
plt.show()
delimiter
pdf = distr.pdf(abscissas, *param)
delimiter
sum([48 * 0.1, 1 * 0.2, 0 * 0.5, 0 * 1, 0 * 2, 0 * 5])
delimiter
plt.plot(x, y)
delimiter
patches[i].set_facecolor(jet(i))
delimiter
ax = fig.add_subplot(111)
delimiter
print(df.columns.str[0].unique())
delimiter
plt.show()
delimiter
print(my_array)
delimiter
names.remove(name)
delimiter
c = boto.connect_ec2(ec2_key, ec2_secret)
delimiter
doc = lxml.html.fromstring(s)
delimiter
image = image.resize((250, 250), Image.ANTIALIAS)
delimiter
x[:] = np.ones((2, 2))
delimiter
print((e, L[i - 1], L[(i + 1) % len(L)]))
delimiter
self.f.flush()
delimiter
data = [int(p) for p in image.read().split()]
delimiter
items = [parse_item(line.strip()) for line in infile]
delimiter
gems.sprites()
delimiter
zip(*lis)
delimiter
screen.fill(BGCOL)
delimiter
self.value = value
delimiter
mail.get_payload()
delimiter
print(x)
delimiter
self.__name__
delimiter
self.layout().removeWidget(self.child)
delimiter
main()
delimiter
int(log(n, 256)) + 1
delimiter
thing.put()
delimiter
XmaxY = coo_matrix((XmaxY, zip(*keys)))
delimiter
list(range(item.start, item.stop, item.step))
delimiter
__version__ = 1.0
delimiter
set(myList)
delimiter
list(find(l))
delimiter
processor.terminate()
delimiter
test.py
delimiter
app.MainLoop()
delimiter
text = file.read().lower()
delimiter
type(test.make_fptr())
delimiter
server.join()
delimiter
G.add_edge(x[0], x[1], weight=x[2])
delimiter
remainder.append(group[0])
delimiter
x_val = [x[0] for x in data]
delimiter
driver = webdriver.Firefox()
delimiter
plt.xlim([-4, 4])
delimiter
self.response.write(pic.read())
delimiter
d = collections.Counter(dict(your_list))
delimiter
s.feed(html)
delimiter
lines = f.readlines()
delimiter
fh.stream.name
delimiter
b = np.ones(5)
delimiter
p.start()
delimiter
plt.subplot(122)
delimiter
pd.read_csv(io.StringIO(df.to_csv()), index_col=0)
delimiter
ranked = sorted(timings, key=lambda t: t[1])
delimiter
writer = csv.writer(f)
delimiter
print(current_credentials.secret_key)
delimiter
df[~mask]
delimiter
epoch = int(time.mktime(time.strptime(date_time, pattern)))
delimiter
x = np.array([1, 2, 1, 0, 1, 2, 1, 0])
delimiter
datetime.date(*datetuple)
delimiter
plt.show()
delimiter
f.close()
delimiter
h = np.array(hamiltonian)
delimiter
t.render(c)
delimiter
docs.append(yaml.load(raw_doc))
delimiter
self.after(100, self.read_bytes)
delimiter
d = np.diagonal(np.tensordot(a, b, axes=()), axis1=0, axis2=2)
delimiter
ds.addSample(myList[ind - n:ind], myList[ind + 1])
delimiter
fig, ax = plt.subplots()
delimiter
s.close()
delimiter
locals()[choice]()
delimiter
parser = argparse.ArgumentParser()
delimiter
theta = 2 * np.pi * np.random.random_sample(n)
delimiter
allkitties = kitties.get_data()
delimiter
x.subs([(x, y), (y, z)])
delimiter
toast()
delimiter
opener.open(login_url)
delimiter
list(d.items())
delimiter
data1.shape, masks1.shape
delimiter
ax = fig.add_subplot(111)
delimiter
ax = fig.add_subplot(gs[1])
delimiter
sum(calc_matrix(l1, l2) for l1, l2 in zip(x1, x2))
delimiter
cv2.line(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
delimiter
pprint(data_copy)
delimiter
pl.show()
delimiter
self.__block.wait()
delimiter
print(self.__hidden)
delimiter
sys.exit(update(opts))
delimiter
pygame.mixer.music.load(file)
delimiter
result = np.apply_along_axis(mahalanobis_sqdist, 1, d1, mean1, Sig1)
delimiter
Rect(l, t, w, h)
delimiter
c = random.randint(10, 25)
delimiter
print(list(csv_reader))
delimiter
list(intersection.elements())
delimiter
plt.setp(ax2.get_yticklabels(), visible=False)
delimiter
client.connect(host, port, username)
delimiter
diff(n[i], n[j])
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
platform.platform()
delimiter
[1, 2, 10]
delimiter
[0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0],
delimiter
new_list
delimiter
child.tag, child.attrib
delimiter
dt = datetime.datetime.now()
delimiter
deletedata[key]
delimiter
out = np.split(df1.index[c], np.flatnonzero(r[1:] > r[:-1]) + 1)
delimiter
pygame.time.Clock().tick(10)
delimiter
session.add(a)
delimiter
pd.DataFrame(MM, dtype=int, columns=Col)
delimiter
intersec = [item for item in a if item in b]
delimiter
mydict = dict((k[1], v) for k, v in list(mydict.items()))
delimiter
fig = plt.figure()
delimiter
int(mktime(dt.timetuple()))
delimiter
fig, axes = plt.subplots(ncols=2, sharey=True, sharex=True)
delimiter
bar.baz()
delimiter
child.grid_configure(padx=5, pady=5)
delimiter
listen.stop()
delimiter
plt.subplot(212)
delimiter
frame.pack(padx=10, pady=10)
delimiter
w = wfloat.mean(2)
delimiter
f.__code__.co_names
delimiter
sys.exit(app.exec_())
delimiter
b = np.matrix([[2, 2], [2, 2]])
delimiter
genre = models.CharField(max_length=100)
delimiter
list(zip(keys, values))
delimiter
owner = models.ForeignKey(User)
delimiter
image_list.append(im)
delimiter
input_list = string_input.split()
delimiter
a[:-1, :-1]
delimiter
panel.configure(image=img2)
delimiter
line.rstrip()
delimiter
self.transaction.append((name, self.database.get(name)))
delimiter
df2 = df1.copy()
delimiter
np.dot(np.arange(len(x)), np.power(x, 10)) / np.sum(np.power(x, 10))
delimiter
paranoid[:]
delimiter
where = tf.not_equal(A, zero)
delimiter
title_label = gtk.Label()
delimiter
print(opts.some_option.decode(sys.stdin.encoding))
delimiter
vbar.config(command=canvas.yview)
delimiter
tk.Tk.__init__(self)
delimiter
data = f.read(4)
delimiter
data = conn.recv(1024)
delimiter
a.T
delimiter
df = df.reset_index()
delimiter
window.show()
delimiter
res.append(0)
delimiter
self.ui.dragDataEdit.close()
delimiter
logger.addHandler(hdlr)
delimiter
print(k, v)
delimiter
session.execute(u)
delimiter
rle(np.array([5, 4, 4, 4, 4, 0, 0]))
delimiter
psutil.net_connections()
delimiter
print(i)
delimiter
aList = [random.randint(1, 11) for i in range(100)]
delimiter
myclass = MyClass()
delimiter
__path__ = extend_path(__path__, __name__)
delimiter
C = A[:, ([1, 2])]
delimiter
form.save()
delimiter
pool = multiprocessing.Pool(2)
delimiter
l.__code__.co_argcount
delimiter
conn.select()
delimiter
my_randoms.append(random.randrange(1, 101, 1))
delimiter
array = np.zeros((8, 8))
delimiter
UserSerializer
delimiter
df.apply(using_mstats, axis=0)
delimiter
suite = unittest.TestSuite()
delimiter
TrueXor(1, 0, 0)
delimiter
app = Flask(__name__)
delimiter
buttons[-1].pack()
delimiter
print(f.getvalue())
delimiter
plt.show()
delimiter
Category.append(row[1])
delimiter
dill.detect.badobjects(f, depth=1)
delimiter
foo.method1()
delimiter
soup = BeautifulSoup(html)
delimiter
tree = lxml.html.fromstring(html)
delimiter
asample = random.sample(bigset, Samplesize)
delimiter
t.start()
delimiter
self.clients.append(client)
delimiter
parent = Parent()
delimiter
getattr(obj, name)
delimiter
----APP2
delimiter
----APPX
delimiter
foo()
delimiter
df2 = df.ix[:, 12:24]
delimiter
x.extend([4, 5])
delimiter
lst.sort(key=operator.itemgetter(1))
delimiter
getFromDict(dataDict, mapList[:-1])[mapList[-1]] = value
delimiter
plt.close(fig)
delimiter
x * x
delimiter
SecondBase.__init__(self, *args, **kargs)
delimiter
print(time.ctime())
delimiter
b = np.array([2, 4, 6])
delimiter
[list(i) for i in set(map(tuple, a))]
delimiter
mat2.append(temp)
delimiter
filtered_numbers = [n for n in numbers if predicate(n)]
delimiter
x = object()
delimiter
l[start:end:step]
delimiter
myList = [0.0, 0.0, 0.0, 2.0, 2.0]
delimiter
q = Queue.Queue()
delimiter
self.setInitialBreakpoints()
delimiter
X.__rmul__(2)
delimiter
list(_f(s, n))
delimiter
plt.plot(x[(i), :], y[(i), :])
delimiter
tuple.__new__(cls, (x, y))
delimiter
date = dateutil.parser.parse(date)
delimiter
choice([4, 5, 6])
delimiter
uncompressed_data = zippy.read()
delimiter
evaled_value = ast.literal_eval(value)
delimiter
self.created_at = datetime.now()
delimiter
expected.difference(found)
delimiter
df = pd.read_csv(StringIO(txt), index_col=0)
delimiter
msg = email.message_from_string(msg_string)
delimiter
print(list(dd.items()))
delimiter
rgb_values += [(r, g, b)]
delimiter
ax.scatter(x, y, marker=m, c=c, s=SIZE, vmin=VMIN, vmax=VMAX)
delimiter
dataframe.to_excel(writer, sheet_name=sheet, startrow=0, startcol=0)
delimiter
children[child] += np.ones(len(children[child]))
delimiter
hist(b.ravel(), bins=255)
delimiter
list(enumerate(s))
delimiter
output = [(a[i] + a[i + 1]) for i in range(len(a)) if i < len(a) - 1]
delimiter
clf.fit(X_train[:, :-num_feats_to_remove], y_train)
delimiter
f = imageFile.read()
delimiter
time.sleep(0.1)
delimiter
result = cv2.matchTemplate(image, template, cv2.TM_CCOEFF_NORMED)
delimiter
sprite.set_position(sprite.body.position.x, sprite.body.position.y)
delimiter
render_template_string(name_template, name=name)
delimiter
x, y = starmap(operator.isub, zip((x, y), (1, 2)))
delimiter
fig = plt.figure()
delimiter
print(status.author, status.user)
delimiter
df.index.isin(df.index[df.index.slice_indexer(start_remove, end_remove)])
delimiter
foo(iterable, isiterable=False)
delimiter
x = f(x)
delimiter
document = lxml.html.document_fromstring(html_string)
delimiter
print(r.content)
delimiter
content = render_to_string(template_name, dictionary, context_instance)
delimiter
transport.close()
delimiter
print([n.ID() for n in node.fullPath()])
delimiter
server_socket.close()
delimiter
-2 * x ** 2 + 4 * x
delimiter
llist = line.split()
delimiter
df[col] = pd.get_dummies(df[col])
delimiter
tuple(recursive_map(complex_list, lambda x: x.__class__.__name__))
delimiter
self.names.add(node.id)
delimiter
self.setFileMode(self.ExistingFiles)
delimiter
cursor.execute(sql)
delimiter
driver = selenium.webdriver.Firefox()
delimiter
ax.cla()
delimiter
cursor.close()
delimiter
ax2 = fig.add_subplot(2, 1, 2)
delimiter
job.join()
delimiter
self.items[-1:][0]
delimiter
hash = hashlib.sha1()
delimiter
db.myCollection.insert(records)
delimiter
self.__getitem__(slice(i, j))
delimiter
print(string)
delimiter
listbox = tk.Listbox(master, selectmode=tk.SINGLE)
delimiter
new_points.append((x, y, z))
delimiter
effectslist.append(mod)
delimiter
plt.grid()
delimiter
writer = csv.writer(self.response.out)
delimiter
HttpResponseServerError()
delimiter
d = datetime.date(1970, 1, 1)
delimiter
sys.getsizeof(0)
delimiter
DNS.DiscoverNameServers()
delimiter
ipl_t = np.linspace(0.0, len(points) - 1, 100)
delimiter
df
delimiter
not Counter([1, 2, 2]) - Counter([1, 2])
delimiter
f.write(line)
delimiter
A.dtype
delimiter
test.close()
delimiter
ax2.set_ylim((0, 2.7))
delimiter
(datetime.strptime(x[0], fmt) - d).total_seconds() > 0
delimiter
yertle.hideturtle()
delimiter
log_file.write(fmt_str % tup)
delimiter
next(blah)
delimiter
0
delimiter
plt.fill_between(x, y_old, y_new, color=color)
delimiter
theA.methB(params)
delimiter
print(md.myfx(arg2))
delimiter
self.Bind(wx.EVT_KEY_DOWN, self.KeyDown)
delimiter
p = psutil.Process(os.getpid())
delimiter
datetime(*timetup[:6]).isoformat()
delimiter
pylab.show()
delimiter
df.iloc[np.roll(np.arange(df.shape[0]), shift)]
delimiter
copyStruct(inputList, iter(flattenedResults))
delimiter
root = etree.fromstring(xml_str)
delimiter
pairs = zip(it, it, nons)
delimiter
{{another}}
delimiter
pform2.as_table()
delimiter
writer = csv.DictWriter(outfile, fieldnames=fieldnames)
delimiter
numpy.interp(quantiles, weighted_quantiles, values)
delimiter
min(timeit.repeat(lambda : {keys[i]: values[i] for i in range(len(keys))}))
delimiter
invoker(test)
delimiter
results.append((i, j, ret, vol))
delimiter
getpwuid(stat(filename).st_uid).pw_name
delimiter
G.add_edge(x[0], x[1], weight=x[2])
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
f.write(data)
delimiter
b = np.array([1, 0, 2, 1])
delimiter
print(line)
delimiter
p = multiprocessing.Pool()
delimiter
lol[i] = [sublist[j] for j in indices]
delimiter
sum(lists, [])
delimiter
time.sleep(1)
delimiter
cb = lambda : self.resp(items, iteration)
delimiter
print(name[i:] + name[:i])
delimiter
divtdi(td1, td2)
delimiter
t.test()
delimiter
plt.plot(x, [(offset + math.sin(float(i) / 10)) for i in range(len(x))])
delimiter
pool.close()
delimiter
maybemodel = model.fit(maybeinliers)
delimiter
mark_safe(json.dumps(list(object)))
delimiter
sys.stderr = self.sys_stderr
delimiter
response
delimiter
()
delimiter
data
delimiter
df1.join(df2)
delimiter
con.close()
delimiter
dct[id(lst)] = lst
delimiter
print(is_all_true(a, b, c))
delimiter
gona[:, (1)]
delimiter
module_dict = my_module.__dict__
delimiter
comp.remove(x)
delimiter
print(timeit.timeit(lambda : [s.strip() for s in rsplit(TEST)]))
delimiter
fig, axes = plt.subplots(nrows=2, ncols=2)
delimiter
main()
delimiter
time.sleep(0.1)
delimiter
file_info_instance = file_info_class(f)
delimiter
id = Column(Integer, primary_key=True)
delimiter
list_of_ids = list(itertools.chain.from_iterable(cursor))
delimiter
conn, addr = s.accept()
delimiter
self.conn.close()
delimiter
C = p1[0] * p2[1] - p2[0] * p1[1]
delimiter
X.tocsr().nonzero()
delimiter
payload = json.loads(message, object_hook=as_payload)
delimiter
raise ValidationError()
delimiter
nosetests
delimiter
key_name
delimiter
print(repr(c))
delimiter
dS = np.random.normal(size=N)
delimiter
coefs_with_fns = sorted(zip(clf.coef_[0], feature_names))
delimiter
value = float(value)
delimiter
gradient.setColorAt(1, QColor(255, 255, 255, 0))
delimiter
dt.astimezone(pytz.utc).time(), dt.utcoffset().total_seconds()
delimiter
name = db.StringProperty()
delimiter
next(gen)
delimiter
ax.loglog()
delimiter
a[k] = b[k]
delimiter
out.reshape(6 * N, 6 * N)
delimiter
yest
delimiter
dtime = datetime.datetime.now()
delimiter
result = []
delimiter
lst[i] = func(item)
delimiter
initializer(*args)
delimiter
walk(tree.getChild(0), ast)
delimiter
db.session.add_all(list(my_new_posts.values()))
delimiter
funcs.append(functools.partial(f, i))
delimiter
b = np.array(b)
delimiter
words = nltk.Text(coded)
delimiter
result = pool.apply_async(f)
delimiter
list1.append(int(digit))
delimiter
np.allclose(out_ein, out_dot)
delimiter
NUMBER_OF_EXCEPTIONS = 0
delimiter
myList.append(2)
delimiter
d = datetime.datetime.fromtimestamp(ts)
delimiter
app = Flask(__name__)
delimiter
l = [[0]] * 4
delimiter
outfile.write(line)
delimiter
result = pd.concat([a, b])
delimiter
self.button.setMinimumSize(QtCore.QSize(128, 128))
delimiter
self.parser.parseString(s)
delimiter
grid.addWidget(button, row, col)
delimiter
a2 = np.arange(10).reshape(2, 5)
delimiter
my_new_list = [(x + string) for x in my_list]
delimiter
np.s_[:, :2, :, :540]
delimiter
ftp.login()
delimiter
results.append((letter, 1))
delimiter
x = np.linalg.solve(a, b)
delimiter
OrderedDict.__init__(self, *args)
delimiter
self.data = data
delimiter
seconds = duration.total_seconds()
delimiter
print(f(1))
delimiter
x0 = random.choice(range(0, L))
delimiter
line.split()
delimiter
{arg: multi(*args[1:]) for arg in args[0]}
delimiter
mf.grid(column=0, row=0, sticky=(N, W, E, S))
delimiter
item.setTextAlignment(QtCore.Qt.AlignCenter)
delimiter
adapt(proxy._get_current_object())
delimiter
x = np.linspace(0, 1, 100)
delimiter
loop.run_until_complete(do_request())
delimiter
sequence1 = [1, 4, 8]
delimiter
p.interact()
delimiter
cur = connection.cursor(dictionary=True)
delimiter
print(df.apply(lambda x: sorted(x, key=lambda y: y == 0), axis=1))
delimiter
d[c] += 1
delimiter
ax = fig.add_subplot(111)
delimiter
raise StopIteration()
delimiter
n.increment()
delimiter
pathlib.Path(*p.parts[2:])
delimiter
seen.add(x)
delimiter
print(response.content, response.status_code)
delimiter
reader = csv.reader(f)
delimiter
layout.addWidget(button)
delimiter
f, ax = plt.subplots(2, 1, figsize=(12, 6))
delimiter
sess.run(init)
delimiter
plt.scatter(x[mask], y[mask], marker=um)
delimiter
today = datetime.date.today()
delimiter
signal.alarm(0)
delimiter
self.view_items.sort(key=attrgetter(*fields))
delimiter
dfnew.join(dfnew.apply(func, axis=1)).dropna()
delimiter
render_to_response(template_name, c)
delimiter
id(sys.modules[foo.__module__]) == id(sys.modules[foobar.foo.__module__])
delimiter
self._setter(obj, value)
delimiter
self.sa_grid.removeWidget(widget)
delimiter
array[idx]
delimiter
type.__new__(mcls, cls, bases, d)
delimiter
glfw.Init()
delimiter
p.start()
delimiter
print(IPython.sys_info())
delimiter
r = [a, b, c]
delimiter
print(moneyx)
delimiter
print((val, k))
delimiter
import_submodules(__name__)
delimiter
ax.yaxis.set_major_formatter(mtick.FuncFormatter(ticks))
delimiter
app.exec_()
delimiter
token = models.CharField(max_length=100, blank=True)
delimiter
im_width = im.size[0]
delimiter
path.reverse()
delimiter
[(key, OrderedDict.__getitem__(self, key)) for key in self]
delimiter
np.array(l, dtype=pd.Series)
delimiter
dx, dy = statemap[dx, dy]
delimiter
repr(soup)
delimiter
result = wx.BitmapFromImage(image)
delimiter
self.setCentralWidget(self.centralwidget)
delimiter
myset = set(mylist)
delimiter
angle = np.linspace(0, 6 * np.pi, 1000)
delimiter
req = urllib.request.Request(url, data)
delimiter
key = bucket.get_key(key_name)
delimiter
x.append(a.pop(0))
delimiter
greenlets = [gevent.spawn(crawl, each) for each in range(100)]
delimiter
print(o.hostname)
delimiter
data_frame.iloc[:100]
delimiter
jsonify(username=g.user.username, email=g.user.email, id=g.user.id)
delimiter
self.__class__(*args, **kwargs)
delimiter
a = np.array([[1, 5, np.nan, 6], [10, 6, 6, np.nan]]).transpose()
delimiter
dd_process.stdout.close()
delimiter
cursor = conn.cursor()
delimiter
connection.connection.ping()
delimiter
fig.canvas.draw()
delimiter
parser.feed(res.read())
delimiter
foo()
delimiter
lut.append(n / step)
delimiter
sanitised_path
delimiter
instance = Example()
delimiter
threading.Thread.__init__(self)
delimiter
add_element_to_database(record)
delimiter
ax.set_xticks(ax.get_xticks()[1:])
delimiter
scopes.add(s.strip())
delimiter
ax.scatter(x, y, z, c=scalarMap.to_rgba(cs))
delimiter
fig, ax = plt.subplots()
delimiter
x = 0
delimiter
G = matrix([[2.0, 1.0, -1.0, 0.0], [1.0, 2.0, 0.0, -1.0]])
delimiter
QtCore.QCoreApplication.exit()
delimiter
output = PdfFileWriter()
delimiter
object_class = models.CharField(max_length=20)
delimiter
y * (y.groupby((y != y.shift()).cumsum()).cumcount() + 1)
delimiter
print(hex(id(x)))
delimiter
time.sleep(2)
delimiter
conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
self.buttonPanel1 = wx.Panel(self)
delimiter
last_modified = db.DateTimeProperty(required=True, auto_now=True)
delimiter
deletetest[5]
delimiter
module_name
delimiter
canvas.grid(row=1, column=0, columnspan=100)
delimiter
index = np.unravel_index(arr.argmin(), arr.shape)
delimiter
timeout.start()
delimiter
plt.colorbar(img, cmap=cmap, norm=norm, boundaries=bounds, ticks=[0, 5, 10])
delimiter
process.wait()
delimiter
page = urllib.request.urlopen(url)
delimiter
[sum(values) for values in zip(a, b, c)]
delimiter
matcher(l1[1:], l2[1:])
delimiter
x.reshape(r * b1, c * b2)
delimiter
o5.magic
delimiter
log.startLogging(sys.stdout)
delimiter
axes[1, 0].hist2d(x, y, bins=nbins)
delimiter
my_stdout_file.write(line)
delimiter
initlibwrap()
delimiter
pylab.subplot(122)
delimiter
stderr_thread.start()
delimiter
list1[1::2] = [(x + 1) for x in list1[1::2]]
delimiter
x_new = x[bool_arr]
delimiter
plt.autoscale(False)
delimiter
np.random.seed(0)
delimiter
x, y = zip(*data)
delimiter
decompressed = gzip.GzipFile(StringIO(compressed)).read()
delimiter
next(nextword)
delimiter
self.dictset.update(iterable)
delimiter
print(line)
delimiter
my_list = [1, 2]
delimiter
first_line = next(csv_reader)
delimiter
unittest.TestCase.__init__(self, *args, **kwargs)
delimiter
os._exit(0)
delimiter
killasgroup = true
delimiter
root = tk.Tk()
delimiter
id = db.Column(db.Integer, primary_key=True)
delimiter
[apply(op, *items) for items in zip(*iters)]
delimiter
cudnn = 1.0
delimiter
[a, int(b), int(c)]
delimiter
dist_ = np.array([0, 1, 0, 1, 1, 0, 0, 1, 1, 0])
delimiter
FancyArrowPatch.__init__(self, (0, 0), (0, 0), *args, **kwargs)
delimiter
Chainable(list(self.method(args[0], self.data, **kwargs)))
delimiter
(a == b).sum()
delimiter
result = process.wait()
delimiter
pygame.mixer.init()
delimiter
opener = urllib.request.build_opener()
delimiter
plt.show()
delimiter
[True, True]
delimiter
c = b[1:]
delimiter
self.mainLayout.addWidget(self.scroll)
delimiter
plt.plot(sub_data)
delimiter
src_dt = dt.replace(tzinfo=src_tz)
delimiter
a[:, (0), (0)] = b[:, (0), (0)]
delimiter
job.join()
delimiter
a = np.append(a, x)
delimiter
now = datetime.datetime.now()
delimiter
screen = Xlib.display.Display().screen()
delimiter
c = conn.cursor()
delimiter
a = 1
delimiter
newList.append(temp)
delimiter
browser = webdriver.Firefox()
delimiter
session.starttls()
delimiter
e = Egg()
delimiter
self.x + other
delimiter
axHistx.hist(x_vals[i], bins=bins, histtype=histtype, color=colors[i])
delimiter
y = y.A.squeeze()
delimiter
df.loc[2] = a
delimiter
fp.close()
delimiter
f.close()
delimiter
query = query.filter(condition)
delimiter
im = Image.open(infile)
delimiter
contents = fp.read()
delimiter
singular
delimiter
ax2.set_xlim([x[1], x[2]])
delimiter
y0s = imsize * np.random.random(ng)
delimiter
lgnd.legendHandles[1]._legmarker.set_markersize(6)
delimiter
current_credentials = credentials.get_frozen_credentials()
delimiter
foo.write(os.path.join(root, f))
delimiter
df = pd.read_csv(fn)
delimiter
unittest.TestLoader.sortTestMethodsUsing = lambda _, x, y: cmp(y, x)
delimiter
self.num_terms = 1 + max([-1] + list(self.id2word.keys()))
delimiter
parts = line.split()
delimiter
ax.set_xlim(-100, 100)
delimiter
form = ContactForm()
delimiter
[j[i] for k, g in groups for i, j in enumerate(g)]
delimiter
dict_col = df.pop(1)
delimiter
plt.show()
delimiter
data = json.load(f)
delimiter
copy + copy_to_depth(item, depth - 1)
delimiter
pygame.mixer.init()
delimiter
node_id = Column(Integer, primary_key=True)
delimiter
print(t.timeit())
delimiter
dict(results)
delimiter
parser = argparse.ArgumentParser()
delimiter
np.array([0, 0]).any()
delimiter
task = task._get_current_object()
delimiter
df
delimiter
count[key] = len(values)
delimiter
ax = fig.add_subplot(gs[0])
delimiter
print(datetime.datetime.now(tz))
delimiter
p = multiprocessing.Process(target=parallel)
delimiter
-your_code.py
delimiter
isinstance(x, numbers.Integral)
delimiter
NULL
delimiter
db.session.commit()
delimiter
pprint(lod, width=40)
delimiter
titled.append(word) if word.istitle() else lower.append(word)
delimiter
wb.Save()
delimiter
print(to_s(dt.astimezone(pytz.utc)))
delimiter
x = np.random.randn(100)
delimiter
main()
delimiter
x = np.zeros((n, n))
delimiter
locals().update(obj.__dict__)
delimiter
new_text.append(text[i])
delimiter
a.clip(max=2)
delimiter
plot(draw, img, xpxl2, ypxl2, rfpart(yend) * xgap, col, steep, dash_interval)
delimiter
RES = SPMAT.dot(G)
delimiter
peers.append(dict())
delimiter
self.clients.add(client)
delimiter
print(inspect.currentframe().f_code.co_name)
delimiter
window.show_all()
delimiter
G = nx.Graph()
delimiter
x = etree.parse(f)
delimiter
l.append(1)
delimiter
given_q = db.session.query(Thank).filter_by(giver_id=user_id)
delimiter
b.pack()
delimiter
(d < 0).sum()
delimiter
extent = [xedges[0], xedges[-1], yedges[0], yedges[-1]]
delimiter
wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)
delimiter
connection.send_command(*args)
delimiter
result.update({j: result[j] + [i]})
delimiter
print(args)
delimiter
itertools.product(range(self.numrows), range(self.numcols))
delimiter
map(ingredients.delete, ingredients.get_children())
delimiter
tailq.put(line)
delimiter
fig, axes = plt.subplots(ncols=2, nrows=2, sharex=True, sharey=True)
delimiter
b = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
delimiter
p = random.randint(0, j)
delimiter
sum(max(die().roll_until(6) for i in range(5)) for i in range(n)) / float(n)
delimiter
df.addCallback(results, name=name)
delimiter
list(range(f, L + 1))
delimiter
tokenize.untokenize(res)
delimiter
json.dumps(value)
delimiter
list1 + list2
delimiter
zerolistmaker(4)
delimiter
time.sleep(2)
delimiter
counts, bins = np.histogram(X, bins=50, density=True)
delimiter
df.reindex(index, fill_value=0)
delimiter
self.transport.write(towrite)
delimiter
result = [{k: v} for v in vs]
delimiter
tornado.ioloop.IOLoop.instance().start()
delimiter
line = line.split()
delimiter
self.text.pack(expand=YES, fill=BOTH)
delimiter
df[ws] = pd.read_excel(excelFile, sheetname=ws, parse_cols=c)
delimiter
my_list.append(json.loads(line))
delimiter
os.mkdir(dirname)
delimiter
data = b.getvalue()
delimiter
db.run_in_transaction(_tx)
delimiter
main.py
delimiter
gaz_instance = foo.gaz()
delimiter
print(r.text)
delimiter
print(len(points))
delimiter
axes[-1, -1].set_xlim(xlimits)
delimiter
my_nullable_string = models.CharField(max_length=15, null=True, blank=True)
delimiter
iter(self.books.values())
delimiter
d = {}
delimiter
self.panel.Bind(wx.EVT_MOTION, self.OnMouseMove)
delimiter
getattr(self.ham, name)
delimiter
today = date.today()
delimiter
loop.run_until_complete(main())
delimiter
User.drop_collection()
delimiter
a = np.arange(10)
delimiter
msg = conn.recv()
delimiter
modes = list(takewhile(lambda x_f: x_f[1] == mostfreq[0][1], mostfreq))
delimiter
dict((k, dikt[k]) for k in keys.split())
delimiter
df
delimiter
gca().set_axis_off()
delimiter
{{field.label_tag}}
delimiter
df.head()
delimiter
any(map(s.__contains__, substring_list))
delimiter
painter.drawLine(x1, y1, x2, y2)
delimiter
results = []
delimiter
draw()
delimiter
P = np.zeros((N, N), dtype=int)
delimiter
user = Channel
delimiter
fp.close()
delimiter
html = html.format(**d)
delimiter
print(gmpy2.sqrt(2))
delimiter
print(sp.stdout.read())
delimiter
sys.exit(app.exec_())
delimiter
PROJECT_ROOT = abspath(os.path.dirname(__file__))
delimiter
df = pd.DataFrame(d)
delimiter
print(np.all(a0 == a1))
delimiter
a_button.pack()
delimiter
source.gruntfile.coffee
delimiter
source.gulpfile.coffee
delimiter
html = requests.get(url).text
delimiter
self._concordance_index.print_concordance(word, width, lines)
delimiter
mousemove(int(currentpos.x), int(currentpos.y))
delimiter
list_dictionaries = [random_dict() for x in range(100)]
delimiter
self.c.add_section(SERV_SECTION)
delimiter
dict_writer = csv.DictWriter(f, fieldnames=fieldnames)
delimiter
cv2.drawContours(cimg, contours, i, color=255, thickness=-1)
delimiter
options = parser.parse_args(arguments)
delimiter
inputs = list(it.product([0, 1, 2], [0, 1, 2]))
delimiter
_winapi.CreateJunction(source, target)
delimiter
doSomething(x, i, j)
delimiter
insert(cur[list[0]], list[1:], value)
delimiter
set_spyder_echo(False)
delimiter
print(func.__name__)
delimiter
l2.append(i)
delimiter
i += 1
delimiter
merged_list.sort()
delimiter
True
delimiter
labels = np.array([[1, 1, 1, 0, 0]]).transpose()
delimiter
x, y, rho, phi = numpy.loadtxt(itertools.chain(f1, f2))
delimiter
self.__pList.append(Person(name, number))
delimiter
do_something()
delimiter
pygame.font.init()
delimiter
time.sleep(2)
delimiter
Foo.square(2)
delimiter
dialog.show()
delimiter
s = socket(*args, **kw)
delimiter
do_something(a1, a2, b)
delimiter
sum(dct[k] for k in lst if k in dct)
delimiter
f(x)
delimiter
parent.kill()
delimiter
json.dumps(ids_list)
delimiter
copy
delimiter
a[subset_b] += 2
delimiter
channel.send(command)
delimiter
print(list(kwargs.keys()))
delimiter
out[:, :, na:] = b
delimiter
print(df[val_cols].max())
delimiter
f.close()
delimiter
cmd.Cmd.__init__(self)
delimiter
B.__init__(self, z)
delimiter
meta = MetaData(bind=engine)
delimiter
self.browser.open(url)
delimiter
channel.queue_declare(queue=queue_name)
delimiter
driver = webdriver.Firefox()
delimiter
plt.show()
delimiter
dis.dis(add_url_rule)
delimiter
df2 = df2.reset_index()
delimiter
df.dtypes
delimiter
list(range(len(list1)))
delimiter
fig, ax = plt.subplots()
delimiter
[idx for idx, item in enumerate(seq) if item in seen or seen_add(item)]
delimiter
do_something_else()
delimiter
x += np.random.normal(loc=0, scale=0.1, size=200)
delimiter
root = tree.getroot()
delimiter
self.server.running = False
delimiter
p.save()
delimiter
print(generate_list(100))
delimiter
foo = np.random.rand(20).cumsum()
delimiter
print(df)
delimiter
pd.to_numeric(s)
delimiter
root.mainloop()
delimiter
mvv_list[0]
delimiter
expanded = list(chain(*zip(*tee(l, n))))
delimiter
admin.site.register(Car, CarAdmin)
delimiter
sa, sb, sc = map(str, (a, b, c))
delimiter
handlers.append(HTTPSClientAuthHandler(somekey, somecert))
delimiter
sys.exit(ret)
delimiter
print(len(cycles))
delimiter
ax = f.add_subplot(1, 1, 1)
delimiter
take(4, iterate(lambda x: x + [len(x) + 1], [1]))
delimiter
a.multiply(nmask)
delimiter
stream.seek(0)
delimiter
root.clear()
delimiter
SettableParity = TRUE
delimiter
x = test()
delimiter
p.stdin.write(someInput)
delimiter
csvout.writerows([row[2:4] for _ in range(count)])
delimiter
prices[:-1].values / prices[1:] - 1
delimiter
do_something()
delimiter
imp.reload(scriptname)
delimiter
sess.run(m1)
delimiter
self.thread.join()
delimiter
random.shuffle(x)
delimiter
q.join()
delimiter
print(a.compressed())
delimiter
deletex, y
delimiter
pd.to_datetime(out_ar)
delimiter
btn.grid(row=row_index, column=col_index, sticky=N + S + E + W)
delimiter
b = [[], []]
delimiter
fp.close()
delimiter
vc = cv2.VideoCapture(0)
delimiter
values = [max(item) for item in array]
delimiter
any(el in sb for el in a)
delimiter
imclip = np.min(Zexact), np.max(Zexact)
delimiter
repr(self.__dict__)
delimiter
eav.register(Patient)
delimiter
A = np.arange(16).reshape(4, 4)
delimiter
s = QtCore.QString()
delimiter
painter = QtGui.QPainter(self)
delimiter
instance.uuid = uuid.uuid4()
delimiter
f.seek(-1, os.SEEK_CUR)
delimiter
plt.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1)
delimiter
root.mainloop()
delimiter
self.update({element.tag: dict(list(element.items()))})
delimiter
print(cls.x)
delimiter
indices[elem].append(i)
delimiter
dbobject = mymodel.objects.all()
delimiter
generator() is generator()
delimiter
logging.basicConfig(level=logging.INFO)
delimiter
print(counter[0])
delimiter
collections.deque(iterator, maxlen=0)
delimiter
pixels[i, j] = data[i][j]
delimiter
imgplot = plt.imshow(lum_img)
delimiter
adrlist = [(word if word.isdigit() else soundex(word)) for word in adr.split()]
delimiter
fig, ax = plt.subplots()
delimiter
model = QStandardItemModel()
delimiter
tree = et.parse(datafile)
delimiter
print(df[df.apply(lambda x: x.A in x.B, axis=1)])
delimiter
root = Tk()
delimiter
self.bar % 2 == 0
delimiter
Sig1 = np.cov(d1[0:25, 0:4].T)
delimiter
print(pp.pformat(my_dict))
delimiter
logging.Handler.__init__(self)
delimiter
vbl.addWidget(self.fc2)
delimiter
np.vstack((a, b, c))
delimiter
c.setCompletionMode(QtGui.QCompleter.UnfilteredPopupCompletion)
delimiter
set(zip(df.number, df.letter))
delimiter
request.args.getlist(key)
delimiter
isinstance(result, collections.Sequence)
delimiter
dst_im.paste(rot, (50, 50), rot)
delimiter
keys_a = set(dict_a.keys())
delimiter
print(list(compress(A, B)))
delimiter
sess.run(apply_placeholder_op, feed_dict=feed_dict)
delimiter
sys.argv[:] = sys.argv[1:]
delimiter
self.figure.set_edgecolor((1, 1, 1))
delimiter
ax.set_xticks(list(range(position + 1)))
delimiter
np.log(a) + b * np.log(x) + c * np.log(y)
delimiter
ax = plt.gca()
delimiter
plt.axvline(x=0.5)
delimiter
self.connect((server, server_port))
delimiter
path = list(backwalk(predecessor_map, destination, origin))
delimiter
sess = tf.Session()
delimiter
n = ctypes.c_int(x.shape[1])
delimiter
type(a.get_value())
delimiter
str(self.id)
delimiter
d = np.random.randn(1000, 1)
delimiter
open_tags.insert(0, tagname)
delimiter
dict[key] = value
delimiter
sys.exit(1)
delimiter
plt.title(v)
delimiter
is_binary = False
delimiter
self.member_names.append(key)
delimiter
ax.set_ylim(0, 15)
delimiter
d.toJSON()
delimiter
list(accumulate(lis))
delimiter
some_list[0] is some_list
delimiter
obj.save(force_insert=True)
delimiter
x[0]
delimiter
some_func(something)
delimiter
func()
delimiter
p._set_cloexec_flags(p.stdin)
delimiter
oauth_token = models.CharField(max_length=200)
delimiter
existing.merge_result([task_from_json(slug, **task) for task in taskdata])
delimiter
fig.subplots_adjust(hspace=1e-05)
delimiter
ax.set(xticks=np.linspace(0, 10, 6), yticks=np.linspace(0, 10, 6))
delimiter
y = tf_spiky(x)
delimiter
fd.close()
delimiter
x = x + 1
delimiter
root = Tk()
delimiter
x = np.random.rand(N)
delimiter
denormalized_rgb_color
delimiter
print(json.dumps(result, indent=4))
delimiter
df.groupby((df.Grp != df.Grp.shift()).cumsum()).Nums.groups
delimiter
url = models.URLField()
delimiter
a = conn.cursor()
delimiter
myStrList = [x for x in myList if isinstance(x, str)]
delimiter
mX = np.concatenate((intercept, mX), axis=1)
delimiter
list = [[]] * 2
delimiter
i, j = i + 1, j + 1
delimiter
g = nx.Graph()
delimiter
Record.objects.filter(**my_queryset_filters)
delimiter
ax.pcolor(T, R, Z)
delimiter
cmd()
delimiter
round_up_to_even(2.25)
delimiter
print(r.shape)
delimiter
t = datetime.datetime.today()
delimiter
self.axes.scatter(self._x_data, self._y_data, picker=5)
delimiter
p = p.add(1).cumprod()
delimiter
matplotlib.pyplot.scatter(n.predict(nfeatures), targets)
delimiter
path = os.path.abspath(os.path.expanduser(path))
delimiter
print((x, y, element))
delimiter
raise ValueError()
delimiter
triples.append((i, j, k))
delimiter
bool.mro()
delimiter
next(itercars)
delimiter
a.fly()
delimiter
os.makedirs(dst)
delimiter
sess = tf.InteractiveSession()
delimiter
foo.start()
delimiter
{0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0}
delimiter
p1 * np.cos(p2 * x) + p2 * np.sin(p1 * x)
delimiter
len(self.directory)
delimiter
loop.run_until_complete(asyncio.gather(*tasks))
delimiter
movie = models.ForeignKey(Movie, blank=True, null=True)
delimiter
Page.query.filter_by(name=name).first()
delimiter
n * s + 0 * s == (n + 0) * x == n * s
delimiter
job.join()
delimiter
length = len(string)
delimiter
dictonary[k].append(i)
delimiter
browser.set_handle_robots(False)
delimiter
integer_timestamp = (dt - epoch) // timedelta(seconds=1)
delimiter
pagehandle = urllib.request.urlopen(theurl)
delimiter
sys.exit(0)
delimiter
a = fig.add_subplot(2, 2, i)
delimiter
im = Image.open(file_path)
delimiter
print(repr(Dump(1245427)))
delimiter
client.load_system_host_keys()
delimiter
console.setLevel(logging.DEBUG)
delimiter
str(datetime.timedelta(hours=10.56))
delimiter
mpu.complete_upload()
delimiter
a[1, 1] = np.nan
delimiter
print(a, b, c)
delimiter
melt_first_half = pd.DataFrame(first_reps.values, columns=col_names)
delimiter
seen.add(item)
delimiter
patches.append(mpatches.Wedge(center, we.r, we.theta1, we.theta2))
delimiter
cur = conn.cursor()
delimiter
A()
delimiter
bool([])
delimiter
cp.close()
delimiter
response(environ, start_response)
delimiter
fcntl.fcntl(fd, fcntl.F_SETFL, flags | os.O_NONBLOCK)
delimiter
plt.step(Xs, n)
delimiter
root = Tk()
delimiter
soup = BeautifulSoup(html)
delimiter
main()
delimiter
os.rename(self.dest, self.src)
delimiter
a[i] = 5
delimiter
values.append(elem.text)
delimiter
arr_y = arr[(np.newaxis), (np.newaxis), :, :, :]
delimiter
print(f)
delimiter
metadata = Base.metadata
delimiter
self.close()
delimiter
sftp.get(file, os.path.join(localPath, file))
delimiter
print(list(divisorGenerator(100)))
delimiter
hist, bins = np.histogram(data, bins=50)
delimiter
i[b], i[a] = i[a], i[b]
delimiter
arr = np.random.random_integers(5, size=(N_rows, 12))
delimiter
print(list(group))
delimiter
inspect.getsource(_)
delimiter
di[key].append(value)
delimiter
print(lst[-1])
delimiter
model_name = self.base_field.model_name
delimiter
lst.append([1])
delimiter
getattr(self._decoratee, name)
delimiter
binary_f(lambda v: works(v) != val0, list)
delimiter
beaker.session.key = appname
delimiter
divider1 = make_axes_locatable(ax1)
delimiter
self.ui.setupUi(self)
delimiter
result = np.abs(diff)
delimiter
A = np.arange(5 * 7).reshape((5, 7))
delimiter
count += 1
delimiter
print(repr(cell))
delimiter
glFlush()
delimiter
cls.initialized = True
delimiter
NotImplemented
delimiter
s = cStringIO.StringIO()
delimiter
print(q.get())
delimiter
append(Button(i))
delimiter
thread.start()
delimiter
frame.show()
delimiter
str(d)
delimiter
assert isinstance(value, list) or isinstance(value, tuple)
delimiter
fig = plt.figure()
delimiter
main()
delimiter
index.append([keyword, [url]])
delimiter
text.split()
delimiter
t[v] = t[2 * v] + t[2 * v + 1]
delimiter
survival_table = pd.Series(index=multi_index)
delimiter
self.current += 1
delimiter
edge_list.update([(x, a), (a, b), (b, x)])
delimiter
grammar.load()
delimiter
contents = f.readlines()
delimiter
new_im = f(new_x, new_y)
delimiter
(b.x - a.x) * (c.y - a.y) == (c.x - a.x) * (b.y - a.y)
delimiter
r.render()
delimiter
np.sum(~a)
delimiter
x.subs(ordereddict.OrderedDict([(y, z), (x, y)]))
delimiter
addr = ctypes.addressof(a)
delimiter
exit()
delimiter
user.save()
delimiter
content_type = models.ForeignKey(ContentType, null=True)
delimiter
result = []
delimiter
fig1.show()
delimiter
a = random.randint(1, b - 1)
delimiter
self.members[i] = NULL
delimiter
[198.40560401][198.4049081][198.4056042]
delimiter
[7917.75662561][7917.75682048][7917.75662578]
delimiter
[6056.87496151][6056.87452659][6056.87496175]
delimiter
sum(my_sparse_matrices[1:], my_sparse_matrices[0]).todense()
delimiter
round(float(self) / other)
delimiter
int(value), True
delimiter
Variance(X).doit()
delimiter
postdata = request.body.read()
delimiter
socket.inet_aton(addr)
delimiter
os.rename(self.src, self.dest)
delimiter
time.sleep(num)
delimiter
b = random.randint(5, 20)
delimiter
np.random.seed(42)
delimiter
self.config(menu=menubar)
delimiter
my_cmap = ListedColormap(flatui)
delimiter
myclass = MyClass()
delimiter
plt.bar(his[1][1:], his[0], width=1)
delimiter
m.drawcounties()
delimiter
np.minimum(a, 255, a)
delimiter
values[quality < threshold] = value
delimiter
print(i)
delimiter
pylab.plot(y)
delimiter
ax.set_yticks(np.arange(0, 6, 1))
delimiter
c[tuple(x)] += 1
delimiter
out = np.empty((A.shape[1], b.shape[1]))
delimiter
fig = plt.figure()
delimiter
myprocess.wait()
delimiter
p1 = ctypes.c_int(1)
delimiter
float(m.group(0)), pos + m.end()
delimiter
files = os.listdir(path)
delimiter
print(response.read())
delimiter
d = np.empty(a.shape[0])
delimiter
arr.append([])
delimiter
a[0:5:-1]
delimiter
l.add(2)
delimiter
queue.put(ii)
delimiter
socket.inet_pton(socket.AF_INET, domain)
delimiter
t.start()
delimiter
c = MyClass()
delimiter
ser[len(ser)] = ser.iloc[-1]
delimiter
db.put(counter)
delimiter
im = Image.open(infile)
delimiter
self._s.setblocking(0)
delimiter
doc.Close()
delimiter
df = pd.DataFrame(np.random.random((5, 5)))
delimiter
plt.show()
delimiter
d = datetime.date(2015, 1, 5)
delimiter
sorted_list = sorted(list(myDic.items()), key=lambda x: x[0])
delimiter
print(data.getvalue())
delimiter
answerlist = []
delimiter
label.show()
delimiter
jpeg.read(2)
delimiter
FinalList.append(set(x))
delimiter
set(rhymes)
delimiter
ax.yaxis.set_label_coords(*axcoords)
delimiter
ax = fig.add_subplot(111)
delimiter
[item[0] for item in list(d1.items()) if item[1] == 55][0]
delimiter
dString = json.dumps(d)
delimiter
setup.py
delimiter
print(cutit(name, 2))
delimiter
self.assertEqual(v1, v2, msg)
delimiter
x = np.array([1, 1, 1, 2, 2, 2, 5, 25, 1, 1])
delimiter
parser = argparse.ArgumentParser()
delimiter
A.__class__ = np.ndarray
delimiter
formatted_json = json.dumps(obj, sort_keys=True, indent=4)
delimiter
__import__, (module.__name__,)
delimiter
User.__table__.create(migrate_engine)
delimiter
filtered = [strip_punctuation(word) for word in input]
delimiter
time.sleep(0.1)
delimiter
d = list(data)
delimiter
B = [4, 5, 6]
delimiter
hxs = HtmlXPathSelector(response)
delimiter
print(my_func0(1, 2))
delimiter
x = 4
delimiter
w.show()
delimiter
frame.pack()
delimiter
a = np.random.rand(l, n, m)
delimiter
x = (list(v) for k, v in groupby(data, lambda x: x < 0))
delimiter
reactor.stop()
delimiter
plt.ylim(-2.5, 6)
delimiter
now = datetime.now()
delimiter
lis.append(lambda : 2)
delimiter
element = WebDriverWait(driver, secs).until(find)
delimiter
(mydict[key] for key in mydict)
delimiter
objects = [object_map[id] for id in ids]
delimiter
print(dns.__repr__(), dns.qd[0].name)
delimiter
conn.send(data)
delimiter
print(sub_tree.childNodes)
delimiter
df = pd.concat(chunks)
delimiter
serversocket.bind((socket.gethostname(), 7557))
delimiter
list_of_tuples = [(1, 2), (4, 5)]
delimiter
[c for c in s2]
delimiter
video1 = cv.CaptureFromCAM(0)
delimiter
counter[word] += 1
delimiter
curses.endwin()
delimiter
ls[0] + listSum(ls[1:])
delimiter
img.load()
delimiter
out.reshape(cols, rows).T
delimiter
oftype[item.__class__].append(item)
delimiter
venus_thread.start()
delimiter
earth_thread.start()
delimiter
mars_thread.start()
delimiter
excel.Application.Quit()
delimiter
decor
delimiter
_quicksort(array, pivot + 1, end)
delimiter
initialize_db.py
delimiter
any((a + b == c, a + c == b, b + c == a))
delimiter
currT = glfw.GetTime()
delimiter
admin.site.unregister(User)
delimiter
a = datetime.datetime.now()
delimiter
df.dtypes
delimiter
ip = self.request.remote_addr
delimiter
vertices, np.hstack((bary, 1 - bary.sum(axis=1, keepdims=True)))
delimiter
mylist = list(range(10000))
delimiter
new_user.save()
delimiter
f.close()
delimiter
fig = plt.figure()
delimiter
comments.extract()
delimiter
image.save(output)
delimiter
signal.signal(signum, receive_signal)
delimiter
tf.Variable(initial)
delimiter
f.close()
delimiter
out.write(prg)
delimiter
_base.py
delimiter
app = Flask(__name__)
delimiter
myqserver = Qserver()
delimiter
x.append(5)
delimiter
X, Y
delimiter
printArray(data, m, n)
delimiter
a.append([])
delimiter
new_body_text = re.sub(pattern, make_footnote_counter(), text)
delimiter
self.setPlainText(text)
delimiter
C.run()
delimiter
api = tweepy.API(auth)
delimiter
cv2.waitKey()
delimiter
session.add(question)
delimiter
func(*args, **kwargs)
delimiter
plt.gcf().add_subplot(421)
delimiter
np.concatenate(([88], a, [77]))
delimiter
len([k for k, _ in groupby(a) if k == 1])
delimiter
suite = unittest.TestSuite()
delimiter
name, age = the_string.split()
delimiter
d = dict(globals())
delimiter
ax = fig.add_subplot(111)
delimiter
log.err()
delimiter
print(list(l))
delimiter
f.close()
delimiter
edge_list.update([(a, x), (x, b), (b, a)])
delimiter
[x for x in subsequences if len(x) >= min_length]
delimiter
do_something(wrapped_dictionary[key])
delimiter
delta = (mdate1 - rdate1).days
delimiter
response.body = json.dumps(error_dict)
delimiter
df
delimiter
self.initial.update(form.initial)
delimiter
testCount()
delimiter
repr(key)
delimiter
s.setblocking(0)
delimiter
ax[1].legend(handles=[b1, b2])
delimiter
decreasing_max_precision = np.maximum.accumulate(precision[::-1])[::-1]
delimiter
foo.main()
delimiter
now = datetime.now()
delimiter
SUBDIRS = src
delimiter
list_of_substrings
delimiter
10 * np.cos(x * 2 * np.pi * cycle)
delimiter
s.append([number])
delimiter
L.append(li)
delimiter
extension = os.path.splitext(os.path.splitext(filename)[0])[-1].lower()
delimiter
print(foo, foo.bar)
delimiter
print(data)
delimiter
poll_twitter()
delimiter
asps.append(file)
delimiter
self.add_widget(Cell(i))
delimiter
fo.write(line)
delimiter
inds[mask][max_index]
delimiter
now = datetime.now()
delimiter
class_instance = Class1()
delimiter
rtn = template.render(request=self.request)
delimiter
out = np.argsort(reference)[pos]
delimiter
time.sleep(pollinterval)
delimiter
self.autocomplete(1)
delimiter
dWOut = np.zeros((X.shape[1], flag.shape[1]))
delimiter
pdf_path = os.path.abspath(os.path.join(DOC_ROOT, filename))
delimiter
ctypes.memset(data, 0, size.value)
delimiter
os.kill(p.pid, 1)
delimiter
bins.insert(0, 0)
delimiter
data = json.dumps(data)
delimiter
type(Foo.spam)
delimiter
{{localtime(item.date)}}
delimiter
f.write(new_txt)
delimiter
lines = f.readlines()
delimiter
frozenset(frozenset(p) for p in l)
delimiter
legs = legs[0]
delimiter
emptydict = {}
delimiter
index.date
delimiter
[job2]
delimiter
LOOKNEXT = True
delimiter
fee = models.DecimalField()
delimiter
list1 = [dict1[k] for k in commons]
delimiter
print(str.isalpha.__doc__)
delimiter
writer.writerow([req.date, req.time, req.user])
delimiter
xcenters = xchunks.mean(axis=1)
delimiter
print(a, f, b)
delimiter
conn.close()
delimiter
r = random.randint(0, 100)
delimiter
self._whatever
delimiter
session.add(i0)
delimiter
sleep(2)
delimiter
WSGIHandler()
delimiter
raise ValueError(bcp_identifier)
delimiter
absfn = os.path.join(root, fn)
delimiter
book_id = Column(Integer, primary_key=True)
delimiter
handles, labels = ax.get_legend_handles_labels()
delimiter
scipy.stats.norm(0, 1).pdf(0)
delimiter
print(age.total_seconds())
delimiter
s.send(msg)
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
frame = inspect.currentframe()
delimiter
opt = tf.train.AdamOptimizer(self.learning_rate)
delimiter
lst[idx - p]
delimiter
dill.detect.badtypes(f, depth=1)
delimiter
df = pd.DataFrame(dict(amount=[0, 1] * 10))
delimiter
pipeline.set_state(gst.STATE_NULL)
delimiter
setattr(self, key, kwargs[key])
delimiter
out = input[binary_matrix.ravel()[idx[:, (0)] * lat_len + idx[:, (1)]] == 1]
delimiter
data.append(tag.next_sibling.string)
delimiter
print(nx.pagerank(G, max_iter=200))
delimiter
factors(n)
delimiter
print(df)
delimiter
isinstance(P, (list, tuple, np.ndarray))
delimiter
scheduler.enqueue_in(timedelta(hours=6), after_6_hours)
delimiter
x + y
delimiter
sum(x)
delimiter
self.setItemIndexMethod(QtWidgets.QGraphicsScene.NoIndex)
delimiter
h.close()
delimiter
np.triu(np.outer(x, x), k=1).sum()
delimiter
assert s.query(A.id).order_by(A.id).all() == [(1,), (4,)]
delimiter
coords = list((x, y) for x in range(100) for y in range(100))
delimiter
getattr(actuator, attr_name)
delimiter
fig = plt.figure()
delimiter
order_by(Article.created.desc()).limit(7)
delimiter
mylist[:] = map(func, mylist)
delimiter
X_train = X[train_indices]
delimiter
print([s.get_text() for s in axarr[0].get_xticklabels()])
delimiter
ybnds = np.array([-20.0, 20.0])
delimiter
map(operator.sub, a, b)
delimiter
self.md5.digest()
delimiter
[0.0, 1.0, 0.0, 1.0],
delimiter
mac.upper()
delimiter
pp.show()
delimiter
ax2.set_xticks(X2tick_location)
delimiter
session = smtplib.SMTP(server)
delimiter
im.set_extent((-5, 5, -5, 5))
delimiter
os.remove(filename)
delimiter
deleteself[i]
delimiter
map(lambda x, y: x + y, a, b)
delimiter
result = [s for s in data if len(s) == len(data[0])]
delimiter
val = hex(val)
delimiter
email = models.CharField(max_length=100)
delimiter
df.head()
delimiter
self.canvas.delete(self.zimg_id)
delimiter
channel.close()
delimiter
frame.update_idletasks()
delimiter
deleteresponses[-1]
delimiter
pairs = [(i, j) for i in range(n) for j in range(i + 1, n)]
delimiter
s.send(tsr.encode())
delimiter
d = defaultdict(lambda : -1, d)
delimiter
fn(*args, **kwargs)
delimiter
self.treeview.expand_all()
delimiter
input = raw_input
delimiter
main()
delimiter
str(bin(7))[2:]
delimiter
s[last_index + 1:]
delimiter
abs(1 - 2)
delimiter
screen.blit(my_image, position)
delimiter
QtGui.QWidget.__init__(self, parent)
delimiter
logging.FileHandler.emit(self, record)
delimiter
Thread(target=startProcess).start()
delimiter
time.sleep(wait_time)
delimiter
conn.close()
delimiter
cx1 = np.random.random_integers(0, size - 2)
delimiter
mod = imp.load_source(name, path)
delimiter
self.panel.Bind(wx.EVT_LEFT_UP, self.OnMouseUp)
delimiter
result = [sum(l) for l in a]
delimiter
c[tuple(x)] += 1
delimiter
sys.exit(app.exec_())
delimiter
per = float(tota) * (100.0 / 500.0)
delimiter
self.deletes.add(obj)
delimiter
t.start()
delimiter
a[np.where(a[:, (-1)])]
delimiter
page.mergePage(new_pdf.getPage(0))
delimiter
print(d[1])
delimiter
print(max(valids) if valids else False)
delimiter
fig = plt.figure()
delimiter
opener = urllib.request.build_opener(auth_handler, NoOpHandler())
delimiter
html_text = f.read()
delimiter
cosx * signx
delimiter
deduped = set(lst_as_sets)
delimiter
x = [np.random.random((10, 10)) for _ in range(5)]
delimiter
log_file.write(line)
delimiter
activity = models.CharField(max_length=250)
delimiter
atexit.register(module.deinit)
delimiter
m = X.mean(axis=1).reshape(-1, 1)
delimiter
timer.start()
delimiter
A[idx]
delimiter
all_matches = numpy.unique(numpy.array(dates).flatten())
delimiter
pylab.draw()
delimiter
cv2.circle(cimg, (i[0], i[1]), i[2], (0, 255, 0), 2)
delimiter
i.scheduled()
delimiter
worker.join()
delimiter
main()
delimiter
{{content | safe}}
delimiter
sentences = tokenizer.tokenize(paragraph)
delimiter
matplotlib.axes.Axes.__init__(self, *args, **kwargs)
delimiter
found.difference(expected)
delimiter
layout = QVBoxLayout(self)
delimiter
d = os.path.join(dir, d)
delimiter
sizer.Add(self.cb, 0, wx.ALL, 5)
delimiter
ddtstart = datetime.datetime.now()
delimiter
xlim([-6, 6])
delimiter
grequests.map(rs)
delimiter
a[b != 0]
delimiter
Base.metadata.create_all(e)
delimiter
points = np.array([[-2, -2], [2, 0], [-1, 2]])
delimiter
coords = zip(a.ravel(), b.ravel())
delimiter
result = cv2.matchTemplate(img, template, cv2.TM_CCORR_NORMED)
delimiter
sys.exit()
delimiter
M = np.matrix([[2, 2, 2, 2], [2, 2, -2, 2], [2, 2, 2, 2], [2, 2, 2, 1]])
delimiter
self.driver = webdriver.Firefox()
delimiter
session.commit()
delimiter
s.sendmail(me, [you], msg.as_string())
delimiter
im = Image.fromarray(rescaled)
delimiter
array([27, 26, 26, 26, 27, 26, 26, 26, 26, 27])
delimiter
print(workdaycount(date(2011, 8, 15), date(2011, 8, 22)))
delimiter
logging.basicConfig(level=logging.INFO)
delimiter
v = [(t[i + 1] - t[i]) for i in range(len(t) - 1)]
delimiter
form.save()
delimiter
sudo(command)
delimiter
ctx.fill_preserve()
delimiter
today.weekday()
delimiter
x = someModule.someClass(list(range(1, 5)))
delimiter
np.apply_along_axis(multi_slice_max, 1, cond, arr)
delimiter
s.shutdown(socket.SHUT_WR)
delimiter
g.LgRnk.apply(lambda x: x / len(x))
delimiter
p = multiprocessing.Process(target=csvreader, args=(string_array[i], q))
delimiter
atomized
delimiter
name = models.CharField(max_length=50)
delimiter
process.send_signal(signal.SIGINT)
delimiter
olist.append(otest)
delimiter
[iplocationc]
delimiter
c.__class__.__mro__
delimiter
cdf = np.cumsum([0, 0.02, 0.08, 0.16, 0.29, 0.45])
delimiter
ax = axes([0.1, 0.1, 0.8, 0.8])
delimiter
g = g.sortlevel()
delimiter
self.beta = tf.Variable(tf.constant(0.0, shape=[depth]))
delimiter
apps.get_models()
delimiter
virtualenv / home / my_envs / env_for_projectname
delimiter
[[1], [1, 2]]
delimiter
im.set_clim([0, 1])
delimiter
print(key, value)
delimiter
img = Image.open(picture)
delimiter
pdb.set_trace()
delimiter
idxNan = np.isnan(a[item]).nonzero()
delimiter
plt.figure(1)
delimiter
res = opener.open(req)
delimiter
gradst = tf.reshape(gradsp, shape=(shapey[0], shapey[1], shapex[0], shapex[1]))
delimiter
plt.legend(handles=[NA, EU, AP, SA], loc=2)
delimiter
h = ax.hist2d(x, y, bins=40, norm=LogNorm())
delimiter
paint()
delimiter
mp.active_children()
delimiter
my_companion.close()
delimiter
table_name = Column(String(50), unique=True)
delimiter
[0, 0, 0, 17, 0, 0, 0, 40, 0, 0, 0, 40, 0],
delimiter
pprint(list(ws.iter_rows()))
delimiter
self.driver = webdriver.Firefox(self.profile)
delimiter
cursor = connection.cursor()
delimiter
sys.exit(NO_PYTHON_LIBRARY_ERROR)
delimiter
jStr = json.loads(jsonString, strict=False)
delimiter
axx.xaxis.set_major_locator(ticker.FixedLocator([xx]))
delimiter
list(zip(a, itertools.cycle(b)))
delimiter
subprocess.Popen([python_bin, script_file])
delimiter
instance.some_method(data)
delimiter
other_object.add(obj)
delimiter
print(list(interleave(range(1, 5), range(5, 10), range(10, 15))))
delimiter
Mixin.__init__(self)
delimiter
thread.run()
delimiter
self.c.set(SERV_SECTION, SERV_NAME, SERV_NAME_DEFAULT)
delimiter
ax1.plot(xvals, data)
delimiter
data = models.HStoreField(db_index=True)
delimiter
handler = logging.StreamHandler(sys.stdout)
delimiter
re.sub(pattern, repl, text, flags=re.DOTALL)
delimiter
self.model.transform(X, self.threshold)
delimiter
run(command)
delimiter
track.duplicateTo_(newPlaylist)
delimiter
run_wsgi_app(application)
delimiter
p = pyaudio.PyAudio()
delimiter
ax1.yaxis.set_major_formatter(fmt)
delimiter
self.factory._send(data)
delimiter
c = np.empty((a.size + b.size,), dtype=a.dtype)
delimiter
matrix = ss.coo_matrix((ones, (rows, cols)))
delimiter
print([id(y) for y in new_strs])
delimiter
ax = fig.add_axes([0.15, 0.15, 0.7, 0.7])
delimiter
PyMouseEvent.__init__(self)
delimiter
pyrodaemon.shutdown()
delimiter
show()
delimiter
self.list_of_tweets = []
delimiter
i = i + 1
delimiter
output.append(list[prev:index])
delimiter
callthecommandhere(blablahbla, filename, foo)
delimiter
plt.xticks(np.arange(0, 25, 5), [0, 25, 50, 75, 100])
delimiter
checkDict(subword)
delimiter
white = np.array([255, 255, 255])
delimiter
pd.DataFrame(records, columns=list(columns.keys()))
delimiter
out.write(fixed)
delimiter
a = TestB()
delimiter
cls.__init__ = instrumented_init
delimiter
num_seen.setdefault(v, []).append(k)
delimiter
p1 = N * np.dot(B.T, A)
delimiter
log.start()
delimiter
random.sample(randset, 100)
delimiter
server.quit()
delimiter
x, y = x + dx, y + dy
delimiter
K = np.array([i for i in range(n) if i != r and i != s])
delimiter
nf.close()
delimiter
fig = plt.gcf()
delimiter
dict.__setitem__(self, key, val)
delimiter
application = QtGui.QApplication(sys.argv)
delimiter
timeit(set(a).intersection(b))
delimiter
deletelst[i]
delimiter
b = a[:, (idx)]
delimiter
_marker_key = db.Column(db.Integer, primary_key=True)
delimiter
print(sample.collect())
delimiter
list(string.Formatter().parse(s))
delimiter
all_pixels.append(0)
delimiter
format_to_year_to_value_dict = defaultdict(lambda : defaultdict(list))
delimiter
exit(0)
delimiter
set_of_all_items = set(list_of_all_items)
delimiter
df.div(df2.iloc[0])
delimiter
main()
delimiter
self.client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
conn.send(msg)
delimiter
t = zip(a, b, c)
delimiter
final_ensemble.n_estimators = len(final_ensemble.estimators_)
delimiter
print(repr(fin.readlines()))
delimiter
result = mygetter(tup)
delimiter
self.name
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
plt.contour(X, Y, F - G, [0])
delimiter
user.Getinfo()
delimiter
d = defaultdict(list)
delimiter
mercury.circle(58, 1)
delimiter
int(binary, 2)
delimiter
fcs.append((random.random(), random.random(), random.random(), 0.6))
delimiter
pdb.set_trace()
delimiter
axes[0, 1].set_ylim(0)
delimiter
random.seed()
delimiter
glEnable(GL_POLYGON_SMOOTH)
delimiter
self.grid_1 = wx.grid.Grid(self.window_1, -1, size=(1, 1))
delimiter
ax.set_title(str(temp))
delimiter
user = fields.ForeignKey(UserResource, user, full=True)
delimiter
globals().setdefault(name, [])
delimiter
print(pwd.getpwuid(os.getuid()))
delimiter
patcher.stop()
delimiter
t.run()
delimiter
something = fgn.Class1()
delimiter
self.canvas.draw()
delimiter
of.write(l)
delimiter
{word: list(neighbours(word)) for word in words}
delimiter
sys.exit(app.exec_())
delimiter
stdout_redirected(to=sys.stdout, stdout=sys.stderr)
delimiter
client = oauth.Client(consumer)
delimiter
print(i0.id)
delimiter
time.sleep(0.5)
delimiter
list.__setitem__(self, key, value)
delimiter
out = [d[k] for k in sorted(d.keys())]
delimiter
print(paths[2][6])
delimiter
app.MainLoop()
delimiter
print(item)
delimiter
date_registered = date.today() - timedelta(days=1)
delimiter
x, y = fsolve(equations, (1, 1))
delimiter
pd.MultiIndex.from_product([letters, letters]),
delimiter
s = pd.Series(np.arange(10))
delimiter
matplotlib.pyplot.scatter(Xs, Ys.flatten(), color=cs)
delimiter
s += random.randint(1, y)
delimiter
sock.settimeout(10)
delimiter
cosetCoding.cosetCoding(10, 11, asarray([0, 0, 0, 0, 0, 0, 0, 0]), 0)
delimiter
writer.UpdatePipeline()
delimiter
df
delimiter
(10 - s % 10) % 10
delimiter
self.data[key] = value
delimiter
np.savez(filename, row=row, col=col, data=data, shape=shape)
delimiter
s[offset:offset + amount]
delimiter
window.show_all()
delimiter
j = json.loads(your_json)
delimiter
mutex.acquire()
delimiter
query = urlparse.parse_qs(url.query)
delimiter
{{companyForm.company_name()}}
delimiter
dict(new_d)
delimiter
plt.show()
delimiter
sys.stdout = sys.__stdout__
delimiter
post_save.connect(Activity.cancellation_occurred, sender=Cancellation)
delimiter
kOUT = kOUT.tolist()
delimiter
session.add(f)
delimiter
print(s.groupby([s.index // k]).mean())
delimiter
outFile.close()
delimiter
foo = POINTER(temp_foo)
delimiter
fig, ax = plt.subplots()
delimiter
f2.write(Lines[i + 2])
delimiter
isinstance(s, str)
delimiter
help(str.find)
delimiter
split_point = int(im.shape[1] / 5)
delimiter
Thread(target=read_stderr, args=[process]).start()
delimiter
print(exceptions.html_error_template().render())
delimiter
myarray[myindexlist]
delimiter
fig, axes = plt.subplots(1, 4, figsize=(10, 5))
delimiter
zip(itertools.repeat(prefix), iterable)
delimiter
x = random.randrange(box[0][0], box[1][0])
delimiter
ax.yaxis.set_major_formatter(tick.FuncFormatter(adjust_y_axis))
delimiter
os.path.join(self.path, filename)
delimiter
f(*args, **kwargs)
delimiter
cv.Threshold(grey_image, grey_image, 70, 255, cv.CV_THRESH_BINARY)
delimiter
f
delimiter
ndimage.map_coordinates(data, [zi, yi, xi], cval=-999)
delimiter
E += potential(np.sqrt((x[i] - x[:i]) ** 2)).sum()
delimiter
any(sublst == lst[i:i + n] for i in range(len(lst) - n + 1))
delimiter
self.t1 = time.time()
delimiter
pyplot.hist(e_data[selected_values])
delimiter
func_py.restype = ctypes.c_double
delimiter
float(self.val)
delimiter
window.show_all()
delimiter
list_size_2.append(row)
delimiter
c = np.arange(24).reshape((4, 6))
delimiter
window.show()
delimiter
block.draw()
delimiter
greet_command()
delimiter
print(i, chr(i))
delimiter
c = np.hstack((a, b))
delimiter
br.set_handle_referer(True)
delimiter
req = urllib.request.Request(url)
delimiter
pri = glrhs[0]
delimiter
plt.yticks(np.arange(0, len(ax1) / r - 0.1, 1 / r), ax1_ticks)
delimiter
print(is_shifted_copy([1, 1, 2], [2, 1, 1]))
delimiter
ax = fig.add_axes([0.05, 0.1, 0.9, 0.85])
delimiter
data.splitlines()
delimiter
self.__class__.set_x_class(10)
delimiter
results = [r.get() for r in results]
delimiter
sys.exit(1)
delimiter
allFoos()
delimiter
ax1 = fig.add_subplot(111)
delimiter
df.append(h, ignore_index=True)
delimiter
self.old_func1 = module1.func1
delimiter
dict[key] = value
delimiter
msvcrt.getch()
delimiter
y = [p._replace(probability=round(p.probability, 2)) for p in y]
delimiter
decompressor.close()
delimiter
main()
delimiter
fig, axes = plt.subplots(nrows=2, ncols=2)
delimiter
plt.plot(x, y2)
delimiter
sys.stdout.flush()
delimiter
profile.save()
delimiter
plt.ylim((0, 100))
delimiter
x.sort(key=lambda item: (len(item), item))
delimiter
len(self.data)
delimiter
connection.setblocking(0)
delimiter
arr.tocsr()
delimiter
res = [lookuplist[k] for k in arr]
delimiter
print(l[:-1])
delimiter
main.py
delimiter
random.shuffle(combined)
delimiter
root = tk.Tk()
delimiter
obj.image.url
delimiter
s.listen(1)
delimiter
print(len(main()))
delimiter
p = subprocess.Popen(some_cmd, stdout=subprocess.PIPE, stdin=subprocess.PIPE)
delimiter
d = {}
delimiter
server.ehlo()
delimiter
lst.sort()
delimiter
cap.release()
delimiter
plt.show()
delimiter
plt.xlim(-2.5, 12)
delimiter
asset = forms.ModelChoiceField(queryset=Asset.objects.none())
delimiter
CM_tilde = np.mean(data, axis=1)
delimiter
raise SystemExit
delimiter
axes.set_ylim(0, math.ceil(max(logcdfy)))
delimiter
plt.setp(labels, rotation=0)
delimiter
n ^ 1 << k
delimiter
models.User.query.get(user_id)
delimiter
self.assertEqual(expected.lower(), actual.lower())
delimiter
[2] + [(2 * i + 1) for i in range(1, n // 2) if sieve[i]]
delimiter
plt.scatter(x1, y1, label=str(pointset1))
delimiter
tree = [Node() for _ in range(10)]
delimiter
self._fileobj.seek(oldposition, os.SEEK_SET)
delimiter
cj.set_cookie(c)
delimiter
fh.setLevel(logging.INFO)
delimiter
plt.imshow(im)
delimiter
f.write(s)
delimiter
list(bucket.list())
delimiter
m.digest()
delimiter
idx = np.abs(array - value).argmin()
delimiter
tree = lh.fromstring(content)
delimiter
fh.setLevel(logging.INFO)
delimiter
[e.text for e in sel(h)]
delimiter
print(df1.to_csv())
delimiter
fig.clear()
delimiter
fig = plt.figure()
delimiter
setattr(self, b, button)
delimiter
ax.add_artist(ell)
delimiter
print(ast.literal_eval(escaped_str))
delimiter
coordinates = list(product(range(width), range(height)))
delimiter
col.domain[0].name, pd.Series(col.to_numpy()[0].flatten())
delimiter
print(self.invalid_response)
delimiter
myapp.show()
delimiter
address = models.CharField(max_length=100)
delimiter
w1.append(words[0])
delimiter
survival_table = pd.Series(index=make_category_multiindex(categories, names))
delimiter
dfUnstacked2
delimiter
heapq.heappop(heap).x
delimiter
color_image = cv.QueryFrame(self.capture)
delimiter
cj = cookielib.CookieJar()
delimiter
CS = plt.contourf(xi, yi, zi, 15, cmap=plt.cm.jet)
delimiter
msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)
delimiter
word_list.sort(key=lambda i: i[1], reverse=True)
delimiter
self.func.__call__(*args, **kwargs)
delimiter
cnxn.commit()
delimiter
print(highlight(json_str, JsonLexer(), TerminalFormatter()))
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
your_json = dumps(serialized_labels)
delimiter
nbrs.fit(X, Y)
delimiter
{{my_model.slug_field_name}}
delimiter
l = sorted(l, reverse=True)
delimiter
testnum == num
delimiter
adate -= timedelta(days=1)
delimiter
ax.grid(True)
delimiter
d = defaultdict(list)
delimiter
screen = pygame.display.set_mode((800, 600))
delimiter
top = curses.newwin(1, 10, 0, 0)
delimiter
ax.set_ylim(0, 61)
delimiter
self.inverse.setdefault(value, []).append(key)
delimiter
list(filter(condition_check, l))
delimiter
list(map(sum, zip(a, b, c)))
delimiter
print(psutil.net_connections())
delimiter
soup.td.contents
delimiter
filter(good, combinations(list(range(1, n + 1)), r))
delimiter
(d in set1) == (newd in set2)
delimiter
whatever
delimiter
sys.exit(-1)
delimiter
ax0 = plt.subplot(211)
delimiter
coo_matrix((data, (c.row, c.col)), shape=(a.shape[0], b.shape[1]))
delimiter
A = np.zeros((M, N))
delimiter
self.buffer = [1] * size
delimiter
a[1:4] = [9, 7]
delimiter
a = next(i for i in userInput if i in wordsTask)
delimiter
print(id(x))
delimiter
B[mask] = A[1][B[mask]]
delimiter
im.set_clip_path(clip_path)
delimiter
A = NP.array(A)
delimiter
list(d)
delimiter
print(cross_validation_group(test_data, train_data))
delimiter
df = pd.DataFrame([0])
delimiter
exit()
delimiter
a.T
delimiter
listB = [0, 1, 2, 1, 2, 1, 0]
delimiter
ax.scatter(x[mask], y[mask])
delimiter
inqueue.put(i)
delimiter
name = models.CharField(max_length=100)
delimiter
root
delimiter
pygame.mixer.init()
delimiter
main()
delimiter
d = cv2.cvtColor(c, cv2.COLOR_RGB2BGR)
delimiter
n1, n2 = np.arange(5), np.arange(5)
delimiter
cv2.rectangle(img, pt, (pt[0] + tw, pt[1] + th), 0, 2)
delimiter
x ** 2
delimiter
cum = np.cumsum(a, axis=1)
delimiter
sample_size += len(rn)
delimiter
ax.plot(t, fun(t))
delimiter
layout = QtGui.QVBoxLayout(widget)
delimiter
l.append(i % 10)
delimiter
c = [a[index] for index in b]
delimiter
hold(True)
delimiter
f(n)
delimiter
player_list = []
delimiter
df = df.reindex(columns=unused_cols + list(chain(*fill_missing)))
delimiter
nil
delimiter
random.shuffle(each)
delimiter
sample = random.sample(item_names, 2)
delimiter
freqs = nltk.FreqDist(w.lower() for w in brown.words())
delimiter
[gu(i) for i in range(len(uo))]
delimiter
retval, img = cv2.threshold(img, 254.0, 255.0, cv2.THRESH_BINARY)
delimiter
type(c)
delimiter
fill_between(x, height - l[1], height, color=colors[1], alpha=alpha)
delimiter
data2[:, (0, -1)] = np.nan
delimiter
mycmd().cmdloop()
delimiter
type({})
delimiter
print(ObjectJSONEncoder().encode(tree))
delimiter
tfact(n - 1, acc * n)
delimiter
item.append(len(item))
delimiter
map(lambda k_v: k_v[0], L)
delimiter
sleep(0.5)
delimiter
deletecursor
delimiter
reactor.run()
delimiter
window.show()
delimiter
print(a)
delimiter
mapper(Something, select([sometable], sometable.c.deleted == False))
delimiter
time.tzset()
delimiter
do_something_2()
delimiter
df
delimiter
b = array([2, 4, 7])
delimiter
f = urllib.request.urlopen(link)
delimiter
results.append(string[split_points[-1][1] + 1:])
delimiter
number, factor = input().split()
delimiter
(list(range(5))[6:7] + [999])[0]
delimiter
values.append(value)
delimiter
App().run()
delimiter
d = {x: (x, y, z) for x, y, z in tuples}
delimiter
pylab.show()
delimiter
QApplication.setOverrideCursor(QCursor(Qt.WaitCursor))
delimiter
d = R * sqrt(x * x + y * y)
delimiter
app.SetTopWindow(frame)
delimiter
Job.objects.get(client=client)
delimiter
print(result.get(timeout=1))
delimiter
ax.set_ylim(-75, 75)
delimiter
list(hi_obj.__dict__.keys())
delimiter
p_lineinfo = frame.f_back.f_lineno
delimiter
now = datetime.now()
delimiter
abacus = [0, 0, 0, 0]
delimiter
foo = np.random.rand(2000000).cumsum()
delimiter
a = a.__iadd__(b)
delimiter
html = browser.open(url)
delimiter
XS = np.asarray(XS)
delimiter
np.roll(sa, -np.count_nonzero(np.isnan(a)))
delimiter
rightpanel = wx.Panel(self, -1, size=(200, 150))
delimiter
bottompanel = wx.Panel(self, -1, size=(200, 150))
delimiter
exit()
delimiter
getattr(mod, attr)
delimiter
app = Flask(__name__)
delimiter
fcntl.lockf(doing_fd, fcntl.LOCK_EX)
delimiter
img = cam.getImage()
delimiter
fig = plt.figure()
delimiter
pixels = list(im.getdata())
delimiter
False
delimiter
lxml.etree.tostring(r.item)
delimiter
sleep(5)
delimiter
self.finish()
delimiter
form = MyForm(request.POST)
delimiter
proc = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
delimiter
myfile.close()
delimiter
browser = webdriver.Firefox()
delimiter
frame = cap.read()[1]
delimiter
do_plot(ax)
delimiter
print(line)
delimiter
maxvalues = heapq.nlargest(20, lst)
delimiter
ax1.plot(xvals, xvals, linewidth=7)
delimiter
show()
delimiter
print(lt_obj.get_text())
delimiter
out.write(g.read())
delimiter
parse(new_str)
delimiter
result = np.c_[original[v[1:-1], v[:-2]], original[v[1:-1], v[2:]]]
delimiter
min(l[0] + best_choice(l[1:]), l[1] + best_choice(l[2:]))
delimiter
resp = opener.open(req)
delimiter
filtered_df = df.where(f(df.a))
delimiter
do_stuff(a, b)
delimiter
list(B.items())
delimiter
canvas.print_png(sio)
delimiter
writer.writerows((title, intro + tagline) for title, intro, tagline in grouped)
delimiter
pC = ctypes.cast(rawPointer, ctypes.POINTER(ctypes.c_uint16))
delimiter
ips = [match[0] for match in re.findall(pattern, text)]
delimiter
a = np.exp(np.random.randn(5, 10)).astype(theano.config.floatX)
delimiter
time.sleep(alarm1)
delimiter
sys.stdout.write(inline)
delimiter
df
delimiter
seen.add(key)
delimiter
plt.xticks(x, my_xticks)
delimiter
d = date(year, 1, 1)
delimiter
c = np.array([0, 1, 2])
delimiter
n = int(temp) * 2
delimiter
server.shutdown()
delimiter
conset.add(x)
delimiter
plt.yticks(list(range(len(labels))), labels)
delimiter
self.render_change_form(request, context, form_url=form_url, add=True)
delimiter
isinstance(x, collections.MutableSequence)
delimiter
y = x.T.tolist()[0]
delimiter
args = parser.parse_args()
delimiter
sys.meta_path.insert(0, importer)
delimiter
self.window.show()
delimiter
fig = plt.figure(figsize=(10, 9))
delimiter
print(row[column_number])
delimiter
a = A()
delimiter
res = im.crop((0, 0, MAXSIZEX, MAXSIZEY))
delimiter
xml_output
delimiter
len(r.content)
delimiter
copyfile(srcname, dstname)
delimiter
print(table)
delimiter
mpf(200) + mpf(2e-26) + mpc(1j)
delimiter
plt.show()
delimiter
f.close()
delimiter
splittedname(s1) > splittedname(s2)
delimiter
np.abs(df.time - image_time)
delimiter
user = User.objects.get(pk=user_id)
delimiter
d = {i: x for i, x in enumerate(a)}
delimiter
lst.extend((8, 9, 10))
delimiter
combo = QtGui.QComboBox(parent)
delimiter
df = pd.DataFrame(cols)
delimiter
fb.authenticate()
delimiter
attachment.set_payload(fp.read())
delimiter
main()
delimiter
classifier = classifier.fit(X_train, y_train)
delimiter
str(self.__dict__)
delimiter
self.Artwork.pack()
delimiter
pdf.add_page()
delimiter
df[1] == 4
delimiter
t = datetime.datetime.now()
delimiter
pix = im.load()
delimiter
result = np.array(result)
delimiter
data = conn.recv(1024)
delimiter
exit()
delimiter
os.system(x)
delimiter
print(new_str)
delimiter
crawler.start()
delimiter
results = sorted(list(results.items()), key=lambda x: x[1])
delimiter
int(x.split()[0])
delimiter
confused_array[~mask & (numpy_array == 0)] = 0
delimiter
result.append((t, c1 + c2))
delimiter
(a * d).todense()
delimiter
dataframe = pd.read_csv(f)
delimiter
ninety - nine
delimiter
vector / np.linalg.norm(vector)
delimiter
text[len(prefix):]
delimiter
WebDriverWait(driver, timeout).until(element_present)
delimiter
fig = plt.figure()
delimiter
result += count(haystack[pos + 1:], needle[1:])
delimiter
{{l.form.city}}
delimiter
[abs(j - i) for i, j in zip(minmax[:-1], minmax[1:])]
delimiter
deletedict[key]
delimiter
print(response.registers[2])
delimiter
print(arr[local_minima_locations])
delimiter
gukan(0)
delimiter
plt.bar(ind, OY, width=width)
delimiter
audiolab.play(x, fs)
delimiter
self.a.append(numpy.hstack((numpy.ones((input.shape[0], 1)), input)))
delimiter
True
delimiter
outfile.close()
delimiter
self.d[k]
delimiter
key.delete()
delimiter
monkey.patch_all()
delimiter
uuid.uuid1(random_48_bits)
delimiter
xmldoc = minidom.parseString(xml_str)
delimiter
m.sort(key=str.isdigit)
delimiter
print(rect.PyRectangle(0, 0, 1, 2).getLength())
delimiter
pst.close()
delimiter
divider2 = make_axes_locatable(ax2)
delimiter
columns[i].append(l)
delimiter
monkey_patch_B()
delimiter
img.close()
delimiter
self.loadFinished.connect(self._loadFinished)
delimiter
bytes([97, 98, 99])
delimiter
pyplot.gca().add_patch(circle)
delimiter
today = datetime.date.today()
delimiter
env = Environment()
delimiter
some_func()
delimiter
p.pretty(obj[key])
delimiter
time.sleep(0.5)
delimiter
p[pair[0]] += 1
delimiter
merged.update(add_obj)
delimiter
timeit(numpy.array(hugeequal1), numpy.array(hugeequal2), 10000)
delimiter
print(spectra_list[1].dispersion)
delimiter
fig.tight_layout()
delimiter
a.sort_index(1, inplace=True)
delimiter
func()
delimiter
fig.delaxes(ax)
delimiter
code = func.__code__
delimiter
actor = match.group(1).strip()
delimiter
latest = Foo.all().latest()
delimiter
np.array(scipy.stats.chi2.interval(0.95, 2 * data)) / 2 - 1
delimiter
X[[0, 1], [0, 1]]
delimiter
[dingdong]
delimiter
ax.xaxis.set_ticks(np.arange(min_x, max_x, int((max_x - min_x) / len(labels))))
delimiter
sum(v)
delimiter
buf.readline()
delimiter
l = map(lambda x: x + 2, l)
delimiter
metadata.read()
delimiter
soup = BeautifulSoup(html_doc)
delimiter
ax.clear()
delimiter
sys.stdout = Discarder()
delimiter
conn.setopt(pycurl.USERNAME, username)
delimiter
window.show()
delimiter
t[0].start()
delimiter
plt.vlines([0, 4, 6], -10, 10)
delimiter
a is a.astype(int, copy=False)
delimiter
ssh = paramiko.SSHClient()
delimiter
now = datetime.datetime.now()
delimiter
conn.send(some_data)
delimiter
file_name = f.name
delimiter
T2.method_three()
delimiter
self.loadFinished.connect(self.on_loadFinished)
delimiter
self.h2Box.addWidget(self.cmbox)
delimiter
args = parser.parse_args()
delimiter
today = datetime.date.today()
delimiter
df[cols].mean(axis=1)
delimiter
csvout.write(wstr)
delimiter
np.interp(width_S, S_values_2, F_values_2)
delimiter
b = np.linspace(-2, 2, 5)
delimiter
np.concatenate((new_face, M), dim)
delimiter
self.file_pointer.seek(0, os.SEEK_END)
delimiter
form.save_m2m()
delimiter
print(merge(lst))
delimiter
regex.split(s)
delimiter
f(*args, **kwargs)
delimiter
book = xlwt.Workbook()
delimiter
self.screen.fill((255, 255, 255))
delimiter
ax.add_collection(p)
delimiter
h.request(url, method=method, body=body, headers=headers, **kwargs)
delimiter
{v: k for k, v in enumerate(calendar.month_abbr)}
delimiter
parser = argparse.ArgumentParser()
delimiter
sess = tf.Session()
delimiter
db.session.commit()
delimiter
cam.start()
delimiter
sax.parse(locstm, Handler())
delimiter
t1 = time.time()
delimiter
gs.tight_layout(fig)
delimiter
response
delimiter
sleep(0.1)
delimiter
r = re.compile(result)
delimiter
print(sum(range(49999951, 50000000)))
delimiter
types = [col.type for col in q.columns]
delimiter
etree.tostring(otree)
delimiter
print(json.dumps(root, indent=4))
delimiter
print(result.key().id())
delimiter
sockobj.listen(5)
delimiter
result = [o for o in list1 if o not in set2]
delimiter
print(t.render(c))
delimiter
excel.Application.Quit()
delimiter
sleep(1)
delimiter
result.append([t[j + 1]])
delimiter
foo_from_bar(self.bar_impl(x))
delimiter
list(s)
delimiter
line.set_xdata(r[:, (0)])
delimiter
vf = numpy.vectorize(f)
delimiter
out.close()
delimiter
sys.argv[0]
delimiter
s = requests.session()
delimiter
print(np.intersect1d(a, b))
delimiter
idx_start = np.where(sorted_a[:, :-1] != sorted_a[:, 1:])
delimiter
df
delimiter
df.dtypes
delimiter
main()
delimiter
print(f.data)
delimiter
f.write(os.linesep)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
user.auth_ids.append(email)
delimiter
form = AnimalForm(request.POST)
delimiter
ast.literal_eval(value)
delimiter
last_entry_date = B.select(B.date).order_by(B.id.desc()).limit(1).scalar()
delimiter
pool.join()
delimiter
a, b = 0, 1
delimiter
df1
delimiter
y, x = np.ogrid[-m:m + 1, -n:n + 1]
delimiter
plt.show()
delimiter
conn = pymongo.MongoClient()
delimiter
btn.clicked.connect(self.buttonClicked)
delimiter
self.scat.set_offsets(data.transpose())
delimiter
m.group(1)
delimiter
f.write(line)
delimiter
df.dtypes
delimiter
hash(x)
delimiter
out_file.writelines(unique_everseen(f))
delimiter
response
delimiter
fig.add_subplot(111)
delimiter
p.start()
delimiter
plt.hist(myarray, weights=weights)
delimiter
os.makedirs(path)
delimiter
print(fresult)
delimiter
[sample[i * n:(i + 1) * n] for i in range(count)]
delimiter
f = urllib.request.urlopen(url)
delimiter
b = cast(s, POINTER(c_ubyte * 20))[0]
delimiter
print(df.groupby(df.index).apply(tmpFunc))
delimiter
ax.set_xticks(np.arange(0, 8) - 0.5, minor=True)
delimiter
pixels = img.load()
delimiter
pyplot.show()
delimiter
c = np.searchsorted(a, b)
delimiter
types = [col.type for col in res.context.compiled.statement.columns]
delimiter
libxxx.foo(data, len(data))
delimiter
order.append((dist, i))
delimiter
ymin, ymax = kde.get_ylim()
delimiter
MyMIDI = MIDIFile(1)
delimiter
list(self).count(obj)
delimiter
result = set(p[0])
delimiter
type(x)
delimiter
customers = defaultdict(list)
delimiter
regressor.fit(X, y)
delimiter
self.y -= 1
delimiter
self.Bind(wx.EVT_CHAR, self.KeyDown)
delimiter
json.loads(value)
delimiter
socket.setTimeout(SERVICE_TIMEOUT_IN_mS)
delimiter
False
delimiter
self.b = 0
delimiter
[(k1[0], k1[1], k2) for k1, k2 in zip(itertools.chain(*dge), nde)]
delimiter
socket.setdefaulttimeout(60)
delimiter
mydic[key].append(value)
delimiter
raise Exception()
delimiter
numpy.clip(A.astype(int) - B.astype(int), 0, numpy.iinfo(int).max)
delimiter
p.communicate()
delimiter
sort_idx = np.argsort(a)
delimiter
c, f = divmod(your_number, 256)
delimiter
results = {input_list[0]: [input_list[0]]}
delimiter
arr[idx]
delimiter
calendar_service = gdata.calendar.service.CalendarService()
delimiter
u = numpy.linspace(0, 2 * numpy.pi, 100)
delimiter
self.loop.call_soon_threadsafe(task.cancel)
delimiter
print(f.read())
delimiter
sorted(items, key=inner)
delimiter
main()
delimiter
out = a[idx, np.arange(a.shape[1])]
delimiter
color = np.array(color)
delimiter
future += datetime.timedelta(days=1)
delimiter
mymethod = add_timeout(mymethod, 15)
delimiter
df[df < 0] = 0
delimiter
idx = np.random.randint(10, size=2)
delimiter
section_sums = np.bincount(np.arange(mask.size) // 20, mask)
delimiter
ax1.set_yticks(numpy.arange(y1 - 1, y2 + 1, 0.5))
delimiter
stdout, stderr = process.communicate()
delimiter
Platform.__init__(self, x, y)
delimiter
self.callback()
delimiter
A[np.arange(2), B.T].T
delimiter
print(visit_element.tag, visit_element.text)
delimiter
B_Bidx = np.digitize(B, Bbins)
delimiter
self.pages.append(dict(self.__dict__))
delimiter
b = a[random.randint(0, len(a) - i)]
delimiter
driver = webdriver.Firefox()
delimiter
set(listas[0]).intersection(*listas[1:])
delimiter
print(xee.tostring(doc))
delimiter
print(x)
delimiter
str.__getattribute__(self, attr)
delimiter
bytes([bstr[0] + 1, 98, 99])
delimiter
color_norm = colors.Normalize(vmin=0, vmax=N - 1)
delimiter
df.info()
delimiter
pdf.image(image, x, y, w, h)
delimiter
restart()
delimiter
l.add(i)
delimiter
idx = np.argsort(df[df.columns[5:]].values)[0]
delimiter
handle_the_error()
delimiter
model1.py
delimiter
sys.path.insert(0, cmd_subfolder)
delimiter
map(bin, bytearray(st))
delimiter
(x + y).subs(reversed(reps))
delimiter
s[-6]
delimiter
response = urlopen(request).read()
delimiter
html.strip_tags(htmls)
delimiter
output = p2.communicate()[0]
delimiter
print(response.getRegister(2))
delimiter
chain.from_iterable(combinations(s, r) for r in range(len(s) + 1))
delimiter
subject = models.CharField(max_length=100)
delimiter
hl.set_xdata(numpy.append(hl.get_xdata(), new_data))
delimiter
f1.save()
delimiter
flask.render_template = _my_render_template
delimiter
print(response.read())
delimiter
(k for m in self.maps for k in m.keys())
delimiter
test2()
delimiter
count += 1
delimiter
GetSum(arrs[-1], arrs[:-1])
delimiter
plt.setp(labels, rotation=0)
delimiter
self.setSelectionMode(QtGui.QAbstractItemView.MultiSelection)
delimiter
results = serializers.SerializerMethodField()
delimiter
filtered_numbers = list(filter(predicate, numbers))
delimiter
datetime(1970, 1, 1) + timedelta(seconds=local.timestamp())
delimiter
X, Y = np.meshgrid(xvals, yvals)
delimiter
random.shuffle(object_list)
delimiter
self.write(data)
delimiter
kde = sns.kdeplot(random_points[:, (0)], random_points[:, (1)], ax=ax)
delimiter
np.where(arr >= threshold)
delimiter
driver = webdriver.Firefox(firefox_profile=fp)
delimiter
self.put(item)
delimiter
plt.plot(x, y1)
delimiter
(b[c] == a).all()
delimiter
pi = (a + b) * (a + b) / (4 * t)
delimiter
tcpcounter += 1
delimiter
udpcounter += 1
delimiter
loop = asyncio.get_event_loop()
delimiter
field = self._fields.get(name)
delimiter
self.log.write(s)
delimiter
self.failed_urls.append(response.url)
delimiter
os.symlink(linkto, dstname)
delimiter
r = fv(a[:, (numpy.newaxis)], b)
delimiter
unittest.main()
delimiter
blocks.shape
delimiter
writer = csv.writer(f)
delimiter
layout = QtGui.QVBoxLayout()
delimiter
print(json.dumps(json_data, indent=2))
delimiter
vbox = gtk.VBox(False, 10)
delimiter
len(FinalList)
delimiter
A = np.random.random((5, 5, 5))
delimiter
print(s)
delimiter
data.sum()
delimiter
add = lambda x, y: x + y
delimiter
final.append(str(seq[0]))
delimiter
main()
delimiter
app.MainLoop()
delimiter
browser = webdriver.Chrome()
delimiter
[0, 1, 2]
delimiter
index_list
delimiter
non_blank_lines = (line for line in stripped_lines if line)
delimiter
gnb_loaded = cPickle.load(fid)
delimiter
decorator
delimiter
indices[:-(n - 1), (5)] = np.arange(n - 1, m * n)
delimiter
ax = plt.gca()
delimiter
C[i, j] = np.dot(A[:, (i)], B[:, (j)])
delimiter
post_save.connect(ping_handler, sender=MyModel)
delimiter
wavwriter.setnchannels(1)
delimiter
canvas.saveState()
delimiter
print(list(best_range))
delimiter
a[np.ix_(n1, n2)]
delimiter
self.__dict__[key]
delimiter
a = pd.Series([pd.to_datetime(date) for date in date_stngs])
delimiter
fig1 = plt.figure()
delimiter
md5.digest()
delimiter
b1 = np.array([[5, 6], [7, 8]])
delimiter
Py_Finalize()
delimiter
a = [1, [2, 2, [2]], 4]
delimiter
a.set_yticklabels(a.get_yticks(), fontProperties)
delimiter
json.loads(raw_post_data, object_pairs_hook=dict_raise_on_duplicates)
delimiter
allatt
delimiter
fig = plt.figure()
delimiter
sorted(players, key=lambda player: player.rank)
delimiter
print(query2.all())
delimiter
f.close()
delimiter
setenv(foo)
delimiter
iter(relatives.items())
delimiter
df_smooth.plot(ax=axs, alpha=0.7)
delimiter
contents = Path(file_path).read_text()
delimiter
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
delimiter
strong.append(value)
delimiter
fout.close()
delimiter
ax2.add_line(copy.copy(line2))
delimiter
serversocket.bind((host, port))
delimiter
cms_pages = Page.objects.filter(in_navigation=True, published=True)
delimiter
frame = pd.read_csv(path, names=columns)
delimiter
X, Y = numpy.meshgrid(list(range(sz[0])), list(range(sz[1])))
delimiter
self.stream.write(msg)
delimiter
res_list[i].append(float(val))
delimiter
cos(x) + cos(y)
delimiter
s.listen(10)
delimiter
fixed = s[1:]
delimiter
session.flush()
delimiter
sk.push(x509)
delimiter
hash(s) % 256
delimiter
MyUser.objects.get(pk=self.pk)
delimiter
c = C()
delimiter
panel = Label(root, image=img)
delimiter
textview = gtk.TextView()
delimiter
logger.addHandler(hdlr)
delimiter
f.close()
delimiter
list(cor[cor > 0.9999].to_dict().keys())
delimiter
ys = [ys[i] for i in sorted_index]
delimiter
result += match.group(1).upper() + match.group(2).upper()
delimiter
Cbins = np.linspace(C.min(), C.max(), 12)
delimiter
print(cron5)
delimiter
print(k, sys.getsizeof(v))
delimiter
a.close()
delimiter
ax2 = fig.add_subplot(2, 1, 2)
delimiter
zip_list = zip(A, B)
delimiter
result_dict
delimiter
reader = csv.reader(infile)
delimiter
pool.shutdown()
delimiter
f.x
delimiter
server.shutdown()
delimiter
lines = f.readlines()
delimiter
r.url
delimiter
args.type()
delimiter
{l: set(words) for l, words in groups}
delimiter
print(procname)
delimiter
[0, 0, 0, 17, 0, 0, 0, 17, 0, 0, 0, 17, 0],
delimiter
sizer.Add(self.cbBG, 0, wx.ALL | wx.CENTER, 5)
delimiter
dataset.withColumn(out_col, udf(f, t)(in_col))
delimiter
background.fill((250, 250, 250))
delimiter
f()
delimiter
today = datetime.date.today()
delimiter
sns.heatmap(df)
delimiter
pprint.pprint(content_json)
delimiter
func = getattr(modulename, funcname)
delimiter
ax1 = fig.add_subplot(111)
delimiter
fig, (ax1, ax2) = plt.subplots(nrows=2, sharex=True)
delimiter
len(one_set & set_of_150kwords)
delimiter
button.pack()
delimiter
atexit.register(root.mainloop)
delimiter
decorator
delimiter
len(word)
delimiter
np.random.shuffle(p)
delimiter
subject = models.CharField(null=False, max_length=128)
delimiter
_getdents.restype = ctypes.c_int
delimiter
page = BeautifulSoup.BeautifulSoup(html.text)
delimiter
r = urllib.request.urlopen(url)
delimiter
s.send(CRLF.join(request))
delimiter
self.layout.addWidget(self.button)
delimiter
f.seek(256, os.SEEK_SET)
delimiter
self.__class__.__call__ = lambda x: x
delimiter
t[0] = t[0]
delimiter
f = scipy.interpolate.interp2d(x, y, data)
delimiter
mask = np.zeros_like(arr, dtype=np.bool)
delimiter
image_data = get_image_data_from_blob()
delimiter
btn.set_sensitive(True)
delimiter
start = time.time()
delimiter
time.sleep(2)
delimiter
title = Column(String(20), primary_key=True)
delimiter
eval(s, {}, {})
delimiter
a.append(i)
delimiter
x.change()
delimiter
list(f.keys())
delimiter
post = models.ForeignKey(Blog)
delimiter
future = asyncio.ensure_future(coro)
delimiter
x + 1
delimiter
Test.calc_x.__code__.co_names
delimiter
out.write(re.sub(pat, s_after, line))
delimiter
pygame.init()
delimiter
m = hashlib.md5()
delimiter
driver = webdriver.Firefox()
delimiter
self.session.commit()
delimiter
plt.show()
delimiter
driver = webdriver.Firefox()
delimiter
self.assertRaises(models.BadFooError, foo.full_clean)
delimiter
next(self._iter)
delimiter
curses.echo()
delimiter
[i]
delimiter
append_record(my_dict)
delimiter
factors2 = list(factors[:i] + factors[i + 1:])
delimiter
type(a)
delimiter
print((start, end))
delimiter
myfast()
delimiter
myFunc(1, 2)
delimiter
os.remove(filename)
delimiter
weekday = today.timetuple()[6]
delimiter
y.append(np.random.random_integers(0, 10, 20))
delimiter
self.files = {}
delimiter
maxval = max(iter(dict.items()), key=operator.itemgetter(1))[1]
delimiter
text_file.close()
delimiter
print([x for v in list(anagrams.values()) if len(v) > 1 for x in v])
delimiter
time.sleep(0.1)
delimiter
time_keypresses(pygame.event.get())
delimiter
driver = webdriver.PhantomJS(desired_capabilities=caps)
delimiter
row.delete()
delimiter
self.videoSink.set_xwindow_id(hWnd)
delimiter
print(list(islice(primes(), 0, 1000000)))
delimiter
proc = subprocess.Popen(cmd, stdin=subprocess.PIPE)
delimiter
wb.save(response)
delimiter
make_sine(freq, data_length, fname)
delimiter
c.seek(0)
delimiter
help(sys.getsizeof)
delimiter
b.py
delimiter
np.array(x.shape).tofile(f)
delimiter
l.addWidget(self._tv)
delimiter
list(User.__mapper__.columns)
delimiter
count = 0
delimiter
sys.stdout.flush()
delimiter
df2
delimiter
s.cookies.save(ignore_discard=True)
delimiter
ax.set_xlabel(label)
delimiter
clean_table_grouped.join(for_df)
delimiter
f.close()
delimiter
slices = list(takewhile(bool, (list(islice(it, 0, i)) for i in seclist)))
delimiter
(0, 0, 128), (255, 0, 255), (255, 255, 0), (0, 255, 255), (128, 0, 128)
delimiter
pd.read_csv(io.StringIO(df.to_csv(index=False)))
delimiter
leg.draggable()
delimiter
list(d.items())
delimiter
tt.Index(0).Set(ea)
delimiter
numpy.ones((2, 2), dtype=bool)
delimiter
fcond.wait()
delimiter
fa[0]()
delimiter
field = Model._meta.get_field(field_name)
delimiter
y, d + math.hypot(y[0] - x[0], y[1] - x[1])
delimiter
user.get_profile().whatever
delimiter
handler1 = logging.TimedRotatingFileHandler()
delimiter
Exception.__init__(self, message)
delimiter
globalist_randomnode = []
delimiter
self.list.SetItemData(index, key)
delimiter
os.system(cmd)
delimiter
mychain.apply_async()
delimiter
d = np.diag(a)
delimiter
w = gtk.Window()
delimiter
interpreter.process_page(page)
delimiter
graph.add_edge(node_number, random.choice(graph.nodes()))
delimiter
hs = root.winfo_screenheight()
delimiter
a()
delimiter
chessboard.get_king_moves()
delimiter
print(text.text)
delimiter
index.create()
delimiter
setattr(self, key, l)
delimiter
A.append(B)
delimiter
D[word] += 1
delimiter
l = [random.randrange(0, 5) for _ in range(50)]
delimiter
my_tuple = [], []
delimiter
list.__setitem__(self, *args)
delimiter
print(get_overlap(s1, s2))
delimiter
response = urllib.request.urlopen(url)
delimiter
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
delimiter
setattr(namespace, self.dest, dest)
delimiter
task.cancel()
delimiter
result = []
delimiter
print(max(s), max(s, key=str.lower))
delimiter
DEBUG = False
delimiter
i = np.random.choice(list(range(0, n * n)), size=m)
delimiter
[s for s in mylist if not myregex.search(s)]
delimiter
time = time.time()
delimiter
fig = plt.figure()
delimiter
timezone.make_aware(yourdate, timezone.get_current_timezone())
delimiter
print(elem.split()[-1])
delimiter
L.sort(key=getvals)
delimiter
self.SetShape(wx.Region())
delimiter
line[:i]
delimiter
do_something(line)
delimiter
imp.load_compiled(name, path)
delimiter
dfall.head(6)
delimiter
login(request, user)
delimiter
merger.write(output_file_path)
delimiter
text = urllib.request.urlopen(url).read()
delimiter
painter.drawControl(QtGui.QStyle.CE_PushButton, self.getSyleOptions())
delimiter
pyplot.show()
delimiter
[zxcv, zxcv]
delimiter
type(d.values())
delimiter
self.observer.stop()
delimiter
self.photo.save(os.path.basename(self.url), File(open(result[0])))
delimiter
df1 = pd.DataFrame(lst, columns=cols)
delimiter
im.set_data(mat)
delimiter
print(ruamel.yaml.dump(data, Dumper=ruamel.yaml.RoundTripDumper))
delimiter
data = data.drop(data.index[[0]])
delimiter
os.kill(pid, 0)
delimiter
np.allclose(Y1, Y2)
delimiter
n = minn if n < minn else maxn if n > maxn else n
delimiter
ax1.minorticks_on()
delimiter
response.close()
delimiter
f.writelines(res)
delimiter
thirdpartymodule_b.dosomething()
delimiter
output.addPage(page)
delimiter
col_sums[:, (j)] = row_sums[:, (j)]
delimiter
r = regex.search(string)
delimiter
logger2.addHandler(log_handler2)
delimiter
a.searchsorted(b)
delimiter
dictionary = {}
delimiter
self.__dict__[attr] = str(value)
delimiter
connect.close()
delimiter
wr.writerow(sh.row_values(rownum))
delimiter
c.setopt(pycurl.FOLLOWLOCATION, 1)
delimiter
dot(Phi, R)
delimiter
ax2.yaxis.set_major_locator(MultipleLocator(0.25))
delimiter
signal.signal(signal.SIGQUIT, term)
delimiter
manager = multiprocessing.Manager()
delimiter
c = np.arange(2, 9)
delimiter
print(df.d.tolist())
delimiter
print(match.groups())
delimiter
print(pattern.findall(txt))
delimiter
output = process.communicate()
delimiter
self.deque.append(x)
delimiter
x + (y if isinstance(y, tuple) else (y,))
delimiter
data = np.random.normal(size=1000)
delimiter
yaml.add_representer(MyClass, MyClass_representer)
delimiter
keyfunc = lambda x: x[0][0]
delimiter
x * np.sin(y)
delimiter
re.sub(findthe, lambda matchObj: replacement.pop(0), sentence)
delimiter
driver.set_window_size(1400, 1000)
delimiter
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
delimiter
c = [(a[i] + [bi]) for i, bi in enumerate(b)]
delimiter
t.set_axis_off()
delimiter
show_float(x)
delimiter
keys[0] if len(keys) == 1 else keys
delimiter
cj = cookielib.LWPCookieJar()
delimiter
hash(list(self.items()))
delimiter
r = lambda : random.randint(0, 255)
delimiter
file = cStringIO.StringIO(urllib.request.urlopen(imageUrl).read())
delimiter
print(pos)
delimiter
IOLoop().run_sync(func)
delimiter
graph = facebook.GraphAPI(token)
delimiter
splits = [(word[:i], word[i:]) for i in range(len(word) + 1)]
delimiter
a = b[0]
delimiter
canv.pack()
delimiter
handler = logging.FileHandler(file_name)
delimiter
df
delimiter
r = conn.cursor()
delimiter
http_server.listen(8888)
delimiter
consumer_lock_object.release()
delimiter
perm_tuple = [(x.id, x.name) for x in Permission.objects.filter(user=user)]
delimiter
zip(*alist)
delimiter
cast(col, Float)
delimiter
proc_stdout = process.communicate()[0].strip()
delimiter
np.column_stack(np.unravel_index(idx, lon.shape)).tolist()
delimiter
fig = plt.figure()
delimiter
print([c.b[i] for i in range(5)])
delimiter
[s.lower()[i:i + 2] for i in range(0, len(s) - 1, 2)]
delimiter
self.stop()
delimiter
test = Test()
delimiter
results_data = results.get()
delimiter
fig.add_subplot(211)
delimiter
a = MyClass()
delimiter
True
delimiter
_zip.write(in_file)
delimiter
bool([]) == False
delimiter
suite
delimiter
numpy.nonzero(a.max() == a)
delimiter
bool(obj) and all(isinstance(elem, str) for elem in obj)
delimiter
bd.sort(key=lambda d: (d.month, d.day))
delimiter
lis = [1, [2, 2, 2], 4]
delimiter
s.listen(1)
delimiter
print(s[:index])
delimiter
b = random.randint(0, 20)
delimiter
z < t.isoformat()
delimiter
print(dec_num == 511)
delimiter
plt.plot(np.random.random(20))
delimiter
cmyk_im = cmyk_im.split()
delimiter
self.send_response(200)
delimiter
df
delimiter
contexts
delimiter
self.left.pop()
delimiter
root = Tk()
delimiter
shape.append(len(l))
delimiter
bounded = numpy.hstack(([0], bits, [0]))
delimiter
a.set_ylim(-1.1, 1.1)
delimiter
plt.scatter(x, y, zorder=1)
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
new_list1.append(i[0])
delimiter
-g595x842
delimiter
sqlc = SQLContext(sc)
delimiter
inters = successives1.intersection(successives2)
delimiter
w.seek(8)
delimiter
my_model = MyModel()
delimiter
self.root.clipboard_clear()
delimiter
atexit.register(close_database)
delimiter
owner = serializers.IntegerField(required=False)
delimiter
print(magicInput[2:4])
delimiter
newlist.append(i)
delimiter
path.append(parent[path[-1]])
delimiter
df = pd.DataFrame(a.T)
delimiter
b[:, (0), (0)] = t2
delimiter
pnormal = p.convert(domain=(-1, 1))
delimiter
df2.letter.unique()
delimiter
plt.setp(cm.ax_heatmap.yaxis.get_majorticklabels(), fontsize=6)
delimiter
map(itemgetter(1), groupby(iterable, key))
delimiter
random_numbers()
delimiter
a.append(1)
delimiter
dd = datetime.date(2009, 12, 9)
delimiter
print(row[0], row[1], row[2])
delimiter
query = users.select().order_by(-users.c.id.desc())[:5]
delimiter
conn.setblocking(0)
delimiter
print(line)
delimiter
img1y = img1.shape[0]
delimiter
dom = ET.parse(io.BytesIO(content))
delimiter
assert np.all(new_data == data)
delimiter
plt.axis([x.min(), x.max(), y.min(), y.max()])
delimiter
value = getattr(value, v)
delimiter
ax = fig.add_subplot(111, aspect=1)
delimiter
solution = [int(x) for x in solution]
delimiter
layout.addWidget(self.plot)
delimiter
random.shuffle(results)
delimiter
example[4:0]
delimiter
len(j) - len(set(j))
delimiter
print(output)
delimiter
normed.mean(axis=1)
delimiter
_quicksort(array, start, right)
delimiter
tree = html.fromstring(text)
delimiter
rows = [row for row in reader]
delimiter
axes[1, 1].pcolormesh(xi, yi, zi.reshape(xi.shape))
delimiter
TRUE
delimiter
self._reader2 = reader2
delimiter
total += 1
delimiter
len(l)
delimiter
[[1][0][0]]
delimiter
self.send_blob(blob_key)
delimiter
self.maxSlider.SetValue(self.minSlider.GetValue() + 1)
delimiter
all(type(i) is int for i in my_list)
delimiter
p.map(Processor(credentials), list_of_data)
delimiter
besterr = thiserr
delimiter
pool.join()
delimiter
fig = PLT.figure()
delimiter
self.label = QtGui.QLabel(self)
delimiter
print(get_jsonparsed_data(url))
delimiter
histo = np.histogram(X, bins=5, range=(m, M))[0]
delimiter
val += 1
delimiter
ax.legend(scatterpoints=1)
delimiter
today = datetime.date.today()
delimiter
df.a.quantile(0.95)
delimiter
p2.start()
delimiter
globals()[attr] = getattr(foo, attr)
delimiter
plt.show()
delimiter
arr[0]
delimiter
post_save
delimiter
time.sleep(1)
delimiter
meta.reflect(bind=engine)
delimiter
title, ext = os.path.splitext(os.path.basename(pathAndFilename))
delimiter
e.delete(0, END)
delimiter
cmp(list1, list2)
delimiter
screen = pygame.display.set_mode((800, 600))
delimiter
nums.pop(i)
delimiter
manager.shutdown()
delimiter
pylab.show()
delimiter
print(h.name, h.hexdigest())
delimiter
np.bitwise_and.reduce(b) == b[0]
delimiter
str(counter - 1)
delimiter
f.close()
delimiter
True
delimiter
d = {v[0]: (v[1:] if len(v) > 2 else v[-1]) for v in list(d.values())}
delimiter
a.show()
delimiter
heapq.heapify(items)
delimiter
self.label.setPixmap(myScaledPixmap)
delimiter
[1, 2]
delimiter
Test - app
delimiter
old_settings = termios.tcgetattr(sys.stdin)
delimiter
yNew = -(x - x0) * sin(theta) - (h - y - y0) * cos(theta) + (h - y0)
delimiter
form.field(**attrs)
delimiter
print(config.CONF_VAR1, config.CONF_VAR2)
delimiter
np.ix_([0, 1], [0, 1])
delimiter
cursor = self.connection.cursor()
delimiter
self.updateGUI()
delimiter
now = np.datetime64(datetime.datetime.now())
delimiter
df = df[cols_of_interest]
delimiter
DictInsensitive(csv.DictReader.next(self))
delimiter
Unpickler(file).load()
delimiter
self.log.append(data)
delimiter
data[0, 0]
delimiter
beginy = 0
delimiter
[0, 1, 1, 2, 4]
delimiter
fp.write(part.get_payload(decode=True))
delimiter
foo(*pair)
delimiter
sys.getsizeof(a)
delimiter
F = np.matrix(list(itertools.product([0, 1], repeat=n))).transpose()
delimiter
__init__.py
delimiter
self.submitButton.grid()
delimiter
itertools.zip_longest(fillvalue=fillvalue, *args)
delimiter
print(df)
delimiter
mydict = {k: v for k, v in key_value}
delimiter
zeros1 = zeros[:, 1:-2]
delimiter
print(timer.timeit())
delimiter
reader = csv.DictReader(f)
delimiter
print(np.array_str(x, precision=2, suppress_small=True))
delimiter
bit_array = bitarray(6000000)
delimiter
gobject.threads_init()
delimiter
host.set_ylim(0, 2)
delimiter
succs = [[] for i in range(n)]
delimiter
print(tostring(e, encoding=str))
delimiter
print(soup.html.contents[0])
delimiter
p = Process(target=do_work, args=(work, results))
delimiter
line = self.buf.readline()
delimiter
func(*args)
delimiter
entry_list = (entry.title.text for entry in feed.entry)
delimiter
idx = np.where((A > 2) & (A < 8))
delimiter
ws.column_dimensions = {}
delimiter
conn.perform()
delimiter
p.setopt(pycurl.WRITEFUNCTION, devnull.write)
delimiter
process = BlackScholesMertonProcess(S, q, r, sigma)
delimiter
self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
self.send_response(200)
delimiter
dist = min(dists)
delimiter
data = file.readlines()
delimiter
cookiejar = cookielib.LWPCookieJar()
delimiter
print(sum(muls))
delimiter
s = socket(AF_PACKET, SOCK_RAW)
delimiter
[type(i)() for i in lst]
delimiter
L = sorted(list(d.items()), key=lambda k_v: k_v[1][1])
delimiter
dbapi_con.commit()
delimiter
x = tup[0]
delimiter
fig, ax = plt.subplots()
delimiter
writer = csv.writer(f)
delimiter
plt.colorbar()
delimiter
opener.open(a_url)
delimiter
self.timer = QTimer(self)
delimiter
list(bucket.list_versions())
delimiter
l2 = [1, 4, 5]
delimiter
f = open(f)
delimiter
fig, ax = plt.subplots()
delimiter
plt.plot(list(range(10)))
delimiter
HttpResponseRedirect(reverse(contact_details, args=(new_contact.pk,)))
delimiter
pickle.dump(network, p_output)
delimiter
urllib.request.urlretrieve(each, filename)
delimiter
m = Model1.objects.filter(desadder=1)
delimiter
foo.__doc__
delimiter
self.runner = QProcess(self)
delimiter
config_path = get_xdg_config_home()
delimiter
nosetests()
delimiter
script_dir = os.path.dirname(__file__)
delimiter
plt.show()
delimiter
do_someting()
delimiter
df[(df.one == 1) | (df.two == 7)]
delimiter
lowest_dirs.append(root)
delimiter
new_columns = df.columns[df.ix[df.last_valid_index()].argsort()]
delimiter
socket.send(me, zmq.SNDMORE)
delimiter
self.connect()
delimiter
NULL
delimiter
1, 0, 2
delimiter
obj.main()
delimiter
s.indices(len(t))
delimiter
self.outstream.write(self.theB)
delimiter
list(range(ifnone(item.start, 0), item.stop, ifnone(item.step, 1)))
delimiter
yourbutton.pack()
delimiter
math.pi.as_integer_ratio()
delimiter
m_2 = file_like_io.readlines()
delimiter
module_b.py
delimiter
phonenumbers.format_number(parsed_number, phonenumbers.PhoneNumber())
delimiter
diam = np.empty(200)
delimiter
dish.id = restaurant_dish.dish_id
delimiter
B[i] = elem
delimiter
np.median([0, 0, 2, 6, 5])
delimiter
print(urlobj.readlines())
delimiter
ip = IPython.get_ipython()
delimiter
matchlist = re.findall(pattern, str)
delimiter
print(probs.sum())
delimiter
0.47685844, 0.44894925, 0.50727844, 0.45076198, 0.44977095, 0.41455029
delimiter
dom = ET.parse(xml_filename)
delimiter
dict_list = zip(list1, list2)
delimiter
cumulative_histo_counts = histo[0].cumsum()
delimiter
x = arange(0, 2 * pi, 0.01)
delimiter
primes.append(i)
delimiter
m[1, 2]
delimiter
[[1.0][1.0][1.0][1.0][1.0][1.0][1.0][1.0][1.0][1.0]]
delimiter
b = np.array([1, 4, 5])
delimiter
z = x.add(y)
delimiter
pool = Pool(processes=4)
delimiter
App.get_running_app().stop()
delimiter
new_ring = LinearRing(new_pol.exterior.coords)
delimiter
outputStream.close()
delimiter
relative = os.path.relpath(path, directory)
delimiter
lambdas_list.append(build_lambda(obj))
delimiter
ax.plot(theta, r)
delimiter
lastX, lastY = x, y
delimiter
df
delimiter
tags = django.forms.MultipleChoiceField(choices=known_tags, required=True)
delimiter
f.close()
delimiter
p.start()
delimiter
ob = MyClass(a=1, b=2)
delimiter
myFile.close()
delimiter
setattr(self, key, FakeSudsNode(value))
delimiter
path = os.path.join(path, word)
delimiter
SupportsDTRDSR = TRUE
delimiter
SupportsRLSD = TRUE
delimiter
SupportsRTSCTS = TRUE
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
result[i].append(next(iterator))
delimiter
fig.multi_line(x_err_x, x_err_y, color=color, **error_kwargs)
delimiter
print(parser.parse_args())
delimiter
self.cookie.load(string_cookie)
delimiter
MyDiccoSorted = sorted(list(MyDicco.items()), key=myKey)
delimiter
print((foo, bar))
delimiter
stext.focus_set()
delimiter
deletedict_del[k]
delimiter
rows.append(data[field])
delimiter
thefile.seek(0, 0)
delimiter
toYearFraction(dt.today())
delimiter
ticks = np.arange(x.min(), x.max(), 6)
delimiter
str(BeautifulSoup(html[:length]))
delimiter
np.where(abs(arr_f - a) < t)[0]
delimiter
fig = plt.figure()
delimiter
print(a.__code__.co_firstlineno)
delimiter
sys.stdout.write(line[1:])
delimiter
cb.formatter.set_powerlimits((0, 0))
delimiter
genn(igap, igap - 1)
delimiter
ret = [row[0] for row in ret]
delimiter
dis_vectors = [(l - r) for l, r in itertools.combinations(points, 2)]
delimiter
sizer.Add(self.fileTextCtrl, 1, wx.EXPAND | wx.ALL, 5)
delimiter
self.losses = [1, 1]
delimiter
obj = db.get(obj_key)
delimiter
groups.apply(lambda x: count_consec_dates(x, start_date))
delimiter
any(isinstance(e, int) and e > 0 for e in [0, 0, 0])
delimiter
r = redis.StrictRedis()
delimiter
root.lift()
delimiter
print(2 * p)
delimiter
y.append(dict(list(i.items()) + list(j.items())))
delimiter
outlist.extend((i, other[0]) for i in ids - known)
delimiter
ax.xaxis.set_visible(False)
delimiter
f = urllib.request.urlopen(url)
delimiter
profile = webdriver.FirefoxProfile()
delimiter
print(i, j, k, v)
delimiter
ax.set_xlim(date_min, date_max)
delimiter
res = [np.array([f1(1, 5), f2(2, 6)])]
delimiter
label.setPixmap(p)
delimiter
signal.signal(signal.SIGALRM, signal.SIG_IGN)
delimiter
next(f)
delimiter
can.place(x=200, y=200, anchor=NW)
delimiter
reset_index()
delimiter
re.split(regexPattern, string, maxsplit)
delimiter
key, value = map(int, line.split())
delimiter
id = Column(Integer, primary_key=True)
delimiter
tree.add(8)
delimiter
sys.exit(app.exec_())
delimiter
np_spiky = np.vectorize(spiky)
delimiter
size = models.IntegerField(blank=True, null=True)
delimiter
seed(42)
delimiter
output = mp.Queue()
delimiter
label_data = np.random.randint(0, 2, (10, 5))
delimiter
data.append(random.random())
delimiter
arr[np.ix_(rows, cols)]
delimiter
A = matrix(A)
delimiter
minimal(s, len)
delimiter
self.settimeout(10)
delimiter
g.apply(lambda x: g.loc[~x.isin(df1[x.name]), x.name])
delimiter
sqmdist = np.dot(np.dot(xdiff, Sigma_inv), xdiff)
delimiter
print((x.itemsize, x.nbytes))
delimiter
predicted = classifier.predict(X_test)
delimiter
m.EM(data, 40, 0.1)
delimiter
p1.stdin.close()
delimiter
print(groups.mean())
delimiter
architecture / architecture
delimiter
a = 1 / (2 * std1 ** 2) - 1 / (2 * std2 ** 2)
delimiter
union_set = set.union(*l)
delimiter
X = pd.concat([X.iloc[-shift:], X.iloc[:-shift]])
delimiter
np.set_printoptions(precision=2)
delimiter
csv.writer(output).writerow(x)
delimiter
h = np.exp(-(x * x + y * y) / (2.0 * sigma * sigma))
delimiter
print(df)
delimiter
func = getattr(self, func_name, func_not_found)
delimiter
venues.sort(key=getRanking, reverse=True)
delimiter
False
delimiter
list(range(first_number, last_number + 1, step))
delimiter
signal.alarm(5)
delimiter
strcat(greeting, excla)
delimiter
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
delimiter
plt.ylim((0, 10))
delimiter
QWidget.__init__(self)
delimiter
os.open(os.devnull, os.O_RDWR)
delimiter
df.High.cummax()
delimiter
print(np.argmax(a))
delimiter
self.response
delimiter
a = [True, True, True, True]
delimiter
id = Column(Integer, primary_key=True)
delimiter
my_date = date.today() - timedelta(days=days_to_substract)
delimiter
index.indices(self.size)[:2]
delimiter
mask_borders = np.where(img == 0, True, False)
delimiter
tick_locator = ticker.MaxNLocator(nbins=5)
delimiter
print([[k, c_sum[k]] for k, v in c_len.items() if v > 1])
delimiter
classifier.fit(X_train, Y)
delimiter
sftp = ssh.open_sftp()
delimiter
buffer.close()
delimiter
_harden_stdout()
delimiter
[_f for _f in map(func, collection) if _f]
delimiter
cleaned_data.update(form.cleaned_data)
delimiter
fig.set_size_inches(18.5, 10.5)
delimiter
start_date = datetime.datetime(year=2010, month=1, day=4)
delimiter
tornado.web.Application.__init__(self, handlers)
delimiter
a.all_coeffs()
delimiter
C[1::2, :] = B
delimiter
l._legmarker.set_ydata(l._legmarker.get_ydata()[1:2])
delimiter
top5 = itertools.islice(array, 5)
delimiter
postalcode = models.CharField(max_length=10)
delimiter
df2
delimiter
names = pd.append(names, frame, ignore_index=True)
delimiter
words = list(text.split())
delimiter
counter = np.sum(id_arr.cumsum())
delimiter
r[ind1].append(v)
delimiter
K = [1, 10, 2, 4, 5, 5, 6, 2]
delimiter
fn = os.path.join(path, name)
delimiter
plt.xlim(0, complete_longest)
delimiter
output = fp.getvalue()
delimiter
root_logger.addHandler(root_log_handler)
delimiter
out = json.dumps(error_dict)
delimiter
b = a.reshape((5, 2))
delimiter
app.login_manager.unauthorized()
delimiter
foo = urllib.request.urlopen(url, data)
delimiter
os.remove(fname)
delimiter
_, keep_this, _ = f()
delimiter
{word: list(neighbours(word)) for word in words}
delimiter
fig = plt.figure()
delimiter
l.append(o)
delimiter
X = data[:, 1:]
delimiter
types.MethodType(func, obj, type)
delimiter
my_ints[i] = a[i]
delimiter
np.repeat(x, arrivals)
delimiter
[4, 5, 6]
delimiter
inspect.getargspec(foo)
delimiter
newZip.writestr(attr, os.readlink(filePath))
delimiter
sess.run(max_norm_ops)
delimiter
xslt = ET.parse(xsl_filename)
delimiter
a = [1, 1, 2, 4, 4]
delimiter
(db.table.field1 == x) & (db.table.field2 == y)
delimiter
plt.ion()
delimiter
process(line)
delimiter
ukol1.SummaryFormula()
delimiter
c.setopt(pycurl.WRITEFUNCTION, b.write)
delimiter
C.append(b_item)
delimiter
imputed_array
delimiter
time.sleep(10)
delimiter
deletedf[df.columns[0]]
delimiter
y, x = np.ogrid[-a:n - a, -b:n - b]
delimiter
pd.DatetimeIndex(df.date) + pd.DateOffset(1)
delimiter
response
delimiter
print(chessgame.get_moves())
delimiter
print(dict(zip(headers, values)))
delimiter
obj.username == request.user.username
delimiter
test = [([0.0] * 10) for _ in range(10)]
delimiter
myPlot.set_ylim(1, 5)
delimiter
print(mappings)
delimiter
any(map(partial(contains_nested, elmnt=elmnt), some_iterable))
delimiter
np.arange(N).reshape(shp).T.ravel()
delimiter
self.val = 1
delimiter
print(user.message)
delimiter
self.response.out.write(jsonpickle.decode(encoded).__class__)
delimiter
logging.getLogger().setLevel(logging.DEBUG)
delimiter
df = pd.DataFrame(X, columns=vect.get_feature_names())
delimiter
shared_settings.py
delimiter
Py_XDECREF(instance)
delimiter
X, Y = np.meshgrid(x, y)
delimiter
L = [1, 2, 1, 1, 1, 1, 1, 1]
delimiter
s[:match.start()]
delimiter
self.edit = QtGui.QTextEdit()
delimiter
m.update(f.__name__)
delimiter
time.sleep(1)
delimiter
print(np.dot(x, y).shape)
delimiter
self._chips = 10
delimiter
file.close()
delimiter
list(NestedDictValues(a))
delimiter
x, y = map(int, matchobj.groups())
delimiter
module_ok = False
delimiter
parser = argparse.ArgumentParser()
delimiter
fig = plt.figure()
delimiter
ptr[0] = color[0]
delimiter
partials[-1].append(element)
delimiter
self.__dict__[key]
delimiter
setattr(Test, name, mark)
delimiter
f_new.write(add_text)
delimiter
raw_data = json.load(f)
delimiter
self.d[num] = 1
delimiter
list(zip(x, d))
delimiter
gen = (x for x in xyz if x not in a)
delimiter
i += 1
delimiter
locals()
delimiter
print(base.__name__)
delimiter
fig.colorbar(surf, shrink=0.5, aspect=5)
delimiter
getattr(self._ref1, name)
delimiter
print(sys.getsizeof(mydict_as_string))
delimiter
os.chdir(curdir)
delimiter
sleep(0.01)
delimiter
DIRNAME = os.path.dirname(__file__)
delimiter
df.set_index(df.select_dtypes(include=[np.datetime64]).columns.tolist())
delimiter
self.i = i
delimiter
raise StopIteration
delimiter
r = requests.post(login_url, cookies=jar, data=acc_pwd)
delimiter
partial(evalsymbexp, symbexp=symbexp)
delimiter
attrs_present = [x for x in a_list if hasattr(a_obj, x)]
delimiter
stdout, stderr = p.communicate()
delimiter
signal.signal(SIGTERM, SIG_DFL)
delimiter
mapper(ActualTableObject, table_object)
delimiter
self.assertTrue(row[1][0] == counts[index_row][1])
delimiter
self.serv.close()
delimiter
inputsList = [str(i) for i in range(20)]
delimiter
foo, bar = zip(*sorted(zip(foo, bar)))
delimiter
print(repr(pBuf.value))
delimiter
A_comp = A.view(dtype=np.complex128)[..., (0)]
delimiter
wrap_process(i)
delimiter
form = br.form
delimiter
NULL
delimiter
root.text_content()
delimiter
Foo.instance_count += 1
delimiter
result = [o for o in list1 if o in diff]
delimiter
platform.uname()[4]
delimiter
browser = webdriver.Firefox()
delimiter
readline.set_startup_hook()
delimiter
lib.stringfree(p)
delimiter
self.cbar.draw_all()
delimiter
int(aString)
delimiter
o.close()
delimiter
child.expect(pexpect.EOF)
delimiter
f()
delimiter
file.close()
delimiter
pythoncom27.dll
delimiter
pool = mp.Pool(mp.cpu_count() + 2)
delimiter
self.Destroy()
delimiter
f.write(urlopen(tempurl).read())
delimiter
s = f.read()
delimiter
sqrt(x ** 2 + y ** 2)
delimiter
db.create_all()
delimiter
print(text)
delimiter
plt.figure()
delimiter
x, y = np.linspace(x0, x1, length), np.linspace(y0, y1, length)
delimiter
out = x.reshape(zt, -1)[idx.ravel(), np.arange(yt * xt)].reshape(-1, xt)
delimiter
width, height = image.size()
delimiter
print(is_true(y) or is_false(y))
delimiter
prop1 = db.string
delimiter
t2.test()
delimiter
tree = ElementTree.parse(StringIO(string))
delimiter
stat.S_ISREG(os.fstat(sys.stdout.fileno()).st_mode)
delimiter
os.getuid() == 0
delimiter
sp.communicate()
delimiter
p.wait()
delimiter
[6, 5, 4, 5, 6, 7, 6, 5],
delimiter
result.append(foo(x))
delimiter
user = models.ForeignKey(User)
delimiter
os.close(in_fd)
delimiter
msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)
delimiter
row = []
delimiter
svec = [a[rank] for rank in ivec]
delimiter
d = Image.objects.filter(**kwargs)
delimiter
fig = plt.figure()
delimiter
credentials = session.get_credentials()
delimiter
list1, list2
delimiter
mat_vals = np.vstack(listvals)
delimiter
br.set_cookiejar(cj)
delimiter
mylist.insert(0, last_el)
delimiter
mdat = np.ma.masked_array(dat, np.isnan(dat))
delimiter
root = tk.Tk()
delimiter
print(settings.INSTALLED_APPS)
delimiter
aClk.start(), numpy.power(c, 2), aClk.stop()
delimiter
list(d.items())[0]
delimiter
user = User.objects.create(**validated_data)
delimiter
clusterList = list(clusterList)
delimiter
m.search(line)
delimiter
y_copy = y[:]
delimiter
re.sub(to_be_replaced, lambda x: random.choice(items), string)
delimiter
myList.append(name)
delimiter
parseXMLFromLink()
delimiter
bool(set(a) & set(b))
delimiter
counts[n] += 1
delimiter
setattr(self, k, v)
delimiter
outputfile.writelines(data_parser(line, reps))
delimiter
sys.exit(app.exec_())
delimiter
p = Point(x, y)
delimiter
v = mahotas.convolve(r - w, pattern)
delimiter
diamond = 2
delimiter
self.value = value
delimiter
map(lambda x: x * 2, args)
delimiter
contents = f.read()
delimiter
db = SQLAlchemy()
delimiter
widget.show()
delimiter
current_value = next(a)
delimiter
Ainv[i] = np.linalg.solve(A[i], identity)
delimiter
plot([40, 50, 60])
delimiter
df = DataFrame(np.random.randn(10, 2))
delimiter
fig = plt.figure()
delimiter
tm += datetime.timedelta(minutes=5)
delimiter
data = np.random.random((height, width, numframes))
delimiter
a.insert(lo, x)
delimiter
DD = datetime.timedelta(days=90)
delimiter
gevent.sleep(0.5)
delimiter
[x for x in self]
delimiter
string = remove_last_line_from_string(string)
delimiter
xl.sheet_names
delimiter
soup.html.findAll(text=True, recursive=False)
delimiter
succs[u].append(v)
delimiter
unmatched.remove(element)
delimiter
doc = etree.ElementTree(root)
delimiter
parser2 = argparse.ArgumentParser()
delimiter
self.sslobj = ssl.wrap_socket(self.sock, self.keyfile, self.certfile)
delimiter
L.insert(index, object)
delimiter
ax.axis([min(x) - 1.0, max(x) + 1.0, min(y) - 1.0, max(y) + 1.0])
delimiter
jpgs.sort()
delimiter
ordered = [e for e in ordered if e in unord]
delimiter
time.strftime(locale.nl_langinfo(locale.D_T_FMT), time.localtime())
delimiter
html_source = browser.page_source
delimiter
args.append(parser.parse_expression())
delimiter
min(max(bottom, num), top)
delimiter
conn.close()
delimiter
heap = [(-value, key) for key, value in list(the_dict.items())]
delimiter
archive.close()
delimiter
self.assertGreater(value, 0)
delimiter
n == n[::-1]
delimiter
logger.addHandler(logging.StreamHandler(sys.stdout))
delimiter
ages = np.arange(100)
delimiter
f.seek(p)
delimiter
s.commit()
delimiter
fig = plt.figure()
delimiter
writer.writerow(rowinprot)
delimiter
size = screen.GetSize()
delimiter
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
delimiter
wx.Icon(sys.argv[0], wx.BITMAP_TYPE_ICO)
delimiter
temp_dict[values[1]] = 1
delimiter
base = os.path.splitext(thisFile)[0]
delimiter
root.mainloop()
delimiter
combined_decorator = compose(decorator1, decorator2)
delimiter
print(df2)
delimiter
df.ix[0] = df.ix[2]
delimiter
X = np.array(X)
delimiter
update_list(a)
delimiter
test_suite.addTest(userservice_test.suite())
delimiter
surf2.set_colorkey(TRANSPARENT)
delimiter
requests.post(url, data, headers=headers)
delimiter
seen = set()
delimiter
g = tf.get_default_graph()
delimiter
isinstance(N, int)
delimiter
self.crawler.crawl(self.spider)
delimiter
True
delimiter
newpath = os.path.join(dstdir, os.path.basename(path))
delimiter
print(yaml.load(f))
delimiter
l.__code__.co_argcount
delimiter
joystick.init()
delimiter
fig = plt.figure()
delimiter
date_of_appointment = models.DateField()
delimiter
start_time = time.time()
delimiter
fsb_frame.Show()
delimiter
driver.get(web_address_desired)
delimiter
str(s)
delimiter
sentence_dict[word].append(prev)
delimiter
reg = line.split()[2]
delimiter
dec = decimal.Decimal(num)
delimiter
isinstance(X, type)
delimiter
chrome = webdriver.Chrome(chrome_options=chrome_options)
delimiter
p.start()
delimiter
a = [0, 0, 15, 17, 16, 17, 16, 12, 18, 18]
delimiter
driver = webdriver.PhantomJS(service_args=service_args)
delimiter
a = zeros((6, 8))
delimiter
Session.add(target)
delimiter
raise Exception()
delimiter
L.append(a)
delimiter
len(list(iterable)), -L.index(item)
delimiter
Base.metadata.create_all(source_engine)
delimiter
s.close()
delimiter
data = json.loads(data)
delimiter
coords = np.vstack([item.ravel() for item in [xi, yi, zi]])
delimiter
groups[word[:-1]].append(word)
delimiter
(m + np.random.randn() * s for _ in iter(int, 1))
delimiter
ans = x / y
delimiter
m = sock.recvfrom(1024)
delimiter
queue.append(multiprocessing.Queue())
delimiter
self.obtainingparams(df, tau_1, tau_2, residuals)
delimiter
wb = xlwt.Workbook()
delimiter
ax.xaxis.set_major_locator(copy.copy(Locator))
delimiter
cur.executemany(insert_query, data)
delimiter
a = 1
delimiter
r[:6, :6]
delimiter
sorted_B = numpy.sort(B)
delimiter
a = np.arange(10)
delimiter
print(grades.most_common())
delimiter
reader1, reader2 = itertools.tee(csv.reader(f, delimiter=d))
delimiter
curl.perform()
delimiter
self.button.pack()
delimiter
ax = fig.add_subplot(111)
delimiter
process.crawl(EPGD_spider)
delimiter
plot_res(fig)
delimiter
f.__call__()
delimiter
curdict[last_item] += 1
delimiter
p.wait()
delimiter
y = np.arange(10)
delimiter
b = [2, 4, 2]
delimiter
driver.get(url)
delimiter
M = M[M.getnnz(1) > 0][:, (M.getnnz(0) > 0)]
delimiter
ax = fig.add_subplot(111)
delimiter
b.append(a[i])
delimiter
np.array(U).argsort().argsort()
delimiter
http_request = AbstractHTTPHandler.do_request_
delimiter
bad_emails.append(email)
delimiter
new_names = names[:i] + names[i + 1:]
delimiter
smtp_server.close()
delimiter
np.nanargmax(b, axis=0)
delimiter
asyncore.dispatcher.__init__(self, socket)
delimiter
newNums = (i for i, x in enumerate(nums) if x == 12)
delimiter
print(s[0])
delimiter
g.close()
delimiter
print(array(data).reshape(*length))
delimiter
data = f.read()
delimiter
my_value = int(my_value)
delimiter
list(os.environ.keys())
delimiter
df = pd.read_csv(filename, index_col=0)
delimiter
soup = BeautifulSoup(data)
delimiter
lis[0]
delimiter
self._max_workers += 1
delimiter
f_old.close()
delimiter
A[1][1] = 0
delimiter
sys.getdefaultencoding()
delimiter
reordered = tf.gather(a, tf.nn.top_k(a[:, (2)], k=4).indices)
delimiter
d = os.path.getmtime(x)
delimiter
pd.DataFrame(df.values[ge_start & le_end], df.index[mask], df.columns)
delimiter
df.mask(mask)
delimiter
cache.init_app(app)
delimiter
myFile.myFunction()
delimiter
suite.addTest(suitefn())
delimiter
id_arr = np.concatenate((a[:, (0)], b[:, (0)]))
delimiter
delta - datetime.timedelta(microseconds=delta.microseconds)
delimiter
df = pd.DataFrame(d)
delimiter
x = np.random.randn(100, 100, 100)
delimiter
df.drop(rows_to_drop_indices, inplace=True)
delimiter
output_df.sort_index(inplace=True)
delimiter
main()
delimiter
pandas2ri.ri2py(r[name])
delimiter
value = blob_reader.read()
delimiter
parentdir = os.path.dirname(currentdir)
delimiter
abortable_async_result.abort()
delimiter
pos = nx.spring_layout(G)
delimiter
print(x)
delimiter
self._dictionary[key]
delimiter
j2 = [x for x in j if x >= 5]
delimiter
x1[np.where(x1 == input_array.shape[0])] = x0.max()
delimiter
a = datetime(2011, 11, 24, 0, 0, 0)
delimiter
mynums = map(int, s.split())
delimiter
sess.run(outputs, feed_dict=feed)
delimiter
plt.show()
delimiter
print([x for x in g if x[2] >= 1.5])
delimiter
request_headers = {}
delimiter
print(myconstants.MY_CONSTANT * 2)
delimiter
sheet = book.sheet_by_index(0)
delimiter
np.round([6.50000001, 6.5], 0)
delimiter
driver = webdriver.Firefox(profile)
delimiter
l.append(5)
delimiter
b = [4, 5, 6, 7]
delimiter
fib(1000)
delimiter
documentation.rst
delimiter
i[1] * 256 + i[0]
delimiter
scriptDirectory = os.path.dirname(sys.argv[0])
delimiter
print(textwrap.fill(text, width=40))
delimiter
ocsp_url.strip()
delimiter
df.drop(df.columns[-1], axis=1)
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
s.send(dst_addr + src_addr + ethertype + payload + checksum)
delimiter
gc.collect()
delimiter
[(lambda x: np.square(np.dot(x, -1 * x)))(x) for x in items]
delimiter
print(df)
delimiter
Z.append((a, B[i % len(B)]))
delimiter
theobject = ast.literal_eval(thestring)
delimiter
self.queue = mp.Queue()
delimiter
inputs = tf.nn.embedding_lookup(embedding, input_data)
delimiter
root = Tk()
delimiter
mux41(0, 1, 1, 0)(a, b)
delimiter
java.awt.Toolkit.getDefaultToolkit().beep()
delimiter
arr = numpy.zeros((50, 100, 25))
delimiter
bk.show(p)
delimiter
fig, axes = plt.subplots(nrows=2, ncols=2)
delimiter
print(l)
delimiter
str(self.val)
delimiter
raise Error(key)
delimiter
a.pop(e)
delimiter
match.group(2) + match.group(4)
delimiter
some.dothis()
delimiter
col_nonzeros = np.bincount(m.indices)
delimiter
render_response()
delimiter
app = Flask(__name__)
delimiter
main()
delimiter
s = np.sqrt((dp ** 2).sum(axis=0))
delimiter
mongo.init_app(app)
delimiter
fig.subplots_adjust(top=1, bottom=0, right=1, left=0, hspace=0, wspace=0)
delimiter
print(im.size[0], im.size[1], white, black)
delimiter
print(unicode_obj)
delimiter
f = urllib.request.urlopen(url)
delimiter
n, b, v = j[4:7]
delimiter
self.f.write(data)
delimiter
day_list.index(inp)
delimiter
x, y = mask.nonzero()
delimiter
df.y[0].shape
delimiter
item.son = sons
delimiter
a = [[1, 2], [4, 5, 6], [], [7, 12, 14, 16]]
delimiter
time = np.linspace(0, 10, 2000)
delimiter
shutil.rmtree(tempdir)
delimiter
output = ps.communicate()[0]
delimiter
ax = plt.subplot(111)
delimiter
mime_msg = email.message_from_string(msg_str)
delimiter
self.hide()
delimiter
c = [i for i in range(len(A) - n + 1) if (b == A[i:i + n]).all()]
delimiter
fruit_query = fruit_query.where(filtername == filtervalue)
delimiter
bucket.delete_key(version.name, version_id=version.version_id)
delimiter
fig = plt.figure()
delimiter
print(files)
delimiter
numpy.fromstring(s)
delimiter
parser.feed(line)
delimiter
f.seek(0)
delimiter
repr(0.1)
delimiter
A = np.random.rand(5, 2)
delimiter
glist.sort()
delimiter
df.dot(df.columns)
delimiter
f.write(copied_file)
delimiter
plt.show()
delimiter
i.close()
delimiter
acc = numpy.zeros(data.shape[:2])
delimiter
1 - np.array([[pearsonr(a, b)[0] for a in M] for b in M])
delimiter
counts_it = itertools.chain(*(iter(c.values()) for c in data.values()))
delimiter
Fraction(0.25)
delimiter
df
delimiter
all_chars = (chr(i) for i in range(1114112))
delimiter
f = plt.figure()
delimiter
conn.close()
delimiter
len(s2)
delimiter
mainFrame = Tkinter.Frame(root)
delimiter
x.append(5)
delimiter
m.group(1)
delimiter
app = Flask(__name__)
delimiter
x.append(contour[0][0])
delimiter
len([x for x in myList if x in myDict]) > 0
delimiter
adjustment_writer.write()
delimiter
MyShell().cmdloop()
delimiter
args = opt.parse_args()
delimiter
self.hello()
delimiter
self.y_list[i] + self.slopes[i] * (x - self.x_list[i])
delimiter
f.pack_propagate(0)
delimiter
plt.subplots_adjust(right=0.8)
delimiter
xc(os.path.join(dirpath, f))
delimiter
fig, ax = plt.subplots()
delimiter
headers.append(header)
delimiter
ser.update(df)
delimiter
os.chdir(tmpdir)
delimiter
logger.addHandler(handler)
delimiter
TEXTO = sys.argv[1]
delimiter
[(a[-i // 2] if i % 2 else a[i // 2]) for i in range(len(a))]
delimiter
codeop.compile_command(line)
delimiter
count += 1
delimiter
dlg.Show()
delimiter
np.hstack((first, rest))
delimiter
b = dict(zip(*reversed(zip(*list(a.items())))))
delimiter
d[index]()
delimiter
configParser.read(configFilePath)
delimiter
any(x in sbigger for x in smaller)
delimiter
response
delimiter
max_idx = l.index(max_val)
delimiter
rand_key = d[take_nth(list(d.keys()), random.randint(0, len(d) - 1))]
delimiter
scons - -pymod
delimiter
output += 2 * np.sum(integrand(a + h * np.arange(2, num - 1, 2)), axis=1)
delimiter
print(key, value)
delimiter
sha5sum
delimiter
temp.remove(item)
delimiter
s.setsockopt(socket.SOL_TCP, socket.TCP_KEEPIDLE, 1)
delimiter
first.replace(month=first.month + 1, day=1) - datetime.timedelta(days=1)
delimiter
self.z.append(self.a[-1] * weight)
delimiter
nx, ny, nz = sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta)
delimiter
random.shuffle(l)
delimiter
response = HttpResponse(f.read())
delimiter
print(pivot[:5])
delimiter
sys.exit(app.exec_())
delimiter
sys.getrefcount(x)
delimiter
data.append(data_item)
delimiter
functools.partial(self, obj)
delimiter
sum(_counter(d))
delimiter
np.random.seed(101)
delimiter
els[0]
delimiter
gr2.switch()
delimiter
self.map(lambda x: x * x)
delimiter
writer = csv.writer(response)
delimiter
dd = copy.deepcopy(d)
delimiter
a.dump()
delimiter
output = stdout.read()
delimiter
tf.logging.set_verbosity(tf.logging.ERROR)
delimiter
df = pd.concat([df] * 10000).reset_index(drop=True)
delimiter
self.edges = {}
delimiter
x[np.mod(np.arange(x.size), M) < N]
delimiter
collections.defaultdict(tree)
delimiter
result = func(*args, **kwargs)
delimiter
form
delimiter
p.terminate()
delimiter
self.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Preferred)
delimiter
t.getroot().text
delimiter
[x for x in lst if x.isalpha()]
delimiter
blocks.append(f.read(block_end_byte))
delimiter
p = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)
delimiter
print(sys.version)
delimiter
self.after(1000, self.onUpdate)
delimiter
conn = db.get_connection()
delimiter
thread = threading.Thread(target=process)
delimiter
p1 = ctypes.c_int(1)
delimiter
arbiter.stop()
delimiter
instance_b_placeholder = models.ForeignKey(A, null=True, blank=True)
delimiter
strnumbers = file.read().split()
delimiter
a[:], b[:] = zip(*combined)
delimiter
ast.literal_eval(a)
delimiter
model.Bar()
delimiter
mainloop()
delimiter
my_thread.start()
delimiter
arr.resize((k, M))
delimiter
self._writecheck(zinfo)
delimiter
sys.exit(main(sys.argv))
delimiter
device_props = dbus.Interface(device_obj, dbus.PROPERTIES_IFACE)
delimiter
plt.show()
delimiter
input.close()
delimiter
fileMenu = tk.Menu(menubar, tearoff=False)
delimiter
print(next(x))
delimiter
result = np.empty((2 * N + 1, 2 * N + 1))
delimiter
pyglet.app.run()
delimiter
len(perms)
delimiter
print(paths[0][0])
delimiter
result[key] = value
delimiter
do_stuff_with(slog)
delimiter
df.stack().nlargest(1)
delimiter
title = Column(String(200), nullable=False)
delimiter
burroughs_wheeler.test(100)
delimiter
g.bar(1)
delimiter
print(tn.read_all())
delimiter
setattr(self, n, v())
delimiter
raise ValueError(modname)
delimiter
a = np.array(a)
delimiter
signal.alarm(0)
delimiter
ax2.set_ylabel(ylabel)
delimiter
self.splitter.addWidget(self.inspector)
delimiter
self.sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
delimiter
SITE_ROOT = os.path.dirname(__file__)
delimiter
match = [x for x in range(len(l) - 1) if l[x] == 165 and l[x + 1] == 90]
delimiter
plt.plot(list(range(10)))
delimiter
obj[key]
delimiter
b = [2, 4, 2]
delimiter
fig, ax = plt.subplots()
delimiter
mydict[search_age]
delimiter
print(save_data.value)
delimiter
len(spam)
delimiter
map(lambda x: f(fixed, x), thelist)
delimiter
help(obj.myfuction)
delimiter
m = myre.match(s)
delimiter
[c for c in col_names if all(f not in c for f in filter_array)]
delimiter
a = np.arange(10)
delimiter
self.assertEqual(42, self.widget.foo())
delimiter
result
delimiter
f.write(value)
delimiter
x = df[pd.isnull(df[col])].index.astype(float).values
delimiter
easydiff2[0] = 0
delimiter
arr.T.shape
delimiter
data.head()
delimiter
list(range(diamond - 1, -1, -1))
delimiter
self.setLayout(self.vbox)
delimiter
basetwo = partial(int, base=2)
delimiter
time.sleep(15)
delimiter
list(pair_iter)
delimiter
new_lists[list_index].append(i)
delimiter
painted_map.save(sys.argv[2])
delimiter
df = pd.read_csv(StringIO(txt), delim_whitespace=True)
delimiter
json.loads(text)
delimiter
f.close()
delimiter
t.start()
delimiter
a * b
delimiter
cur = con.cursor()
delimiter
hsizer = wx.BoxSizer(wx.HORIZONTAL)
delimiter
id = Column(Integer, primary_key=True)
delimiter
lib.find_vertex(vertices, len(vertices), lower, higher)
delimiter
plot(img50_order1[(50), :, (1)])
delimiter
HiPRIOpoller = zmq.Poller()
delimiter
response
delimiter
DBSession.begin()
delimiter
sample.sum()
delimiter
delta.total_seconds()
delimiter
print(df_concat.mean())
delimiter
settings.configure()
delimiter
left, right = ax.get_xlim()
delimiter
print(new_list)
delimiter
parser = argparse.ArgumentParser()
delimiter
as_to_b = a.searchsorted(b, sorter=a_to_as)
delimiter
str(output[0])
delimiter
c.close()
delimiter
assert a.average() == 1
delimiter
func(s)
delimiter
cap = cv2.VideoCapture(0)
delimiter
Base1.bar()
delimiter
sio.close()
delimiter
f = urllib.request.urlopen(req)
delimiter
demandimport.enable()
delimiter
self.frame = wx.Frame(parent, title=title, size=size)
delimiter
r = scipy.sqrt(x ** 2 + y ** 2 + z ** 2)
delimiter
func_results.append(child(*args))
delimiter
self.assertGreaterThan(len(foo.config.getboolean(str(), str())), 0)
delimiter
print(myutilities.gen_hex_colour_code())
delimiter
hello()
delimiter
sys.stderr = dummyStream()
delimiter
im = Image.open(sys.argv[1])
delimiter
root = Tk()
delimiter
a[:len(idx)] += idx
delimiter
plot(f(a, b))
delimiter
df = DataFrame(dict(x=[0, 0, 1, 0, 1], y=[1, 0, 1, 1, 0], z=[0, 0, 1, 0, 1]))
delimiter
cursor = conn.cursor()
delimiter
print(hello())
delimiter
pl.show()
delimiter
img.seek(n)
delimiter
cv2.line(img, (x1, y1), (x2, y2), (0, 0, 255), 1)
delimiter
print((x, y))
delimiter
stdin, stdout, stderr = channel.exec_command(command)
delimiter
print(list(next(it) for it in itertools.cycle(iters)))
delimiter
d[row_key][idx] = col
delimiter
np.vstack((rlin * first, np.power(rlin, second)))
delimiter
open(path).readlines() if opath.exists(path) else []
delimiter
self.__setitem__(key, value[key])
delimiter
column1.append(column.split(data_separator)[0])
delimiter
r += 1
delimiter
page.SetSashGravity(0.5)
delimiter
result.setdefault(value, []).append(value)
delimiter
a.get_x(True)
delimiter
result = []
delimiter
nosetests - -help
delimiter
c.showPage()
delimiter
test()
delimiter
print(longest_sum([1, 1, 1, 1, 1, 1, 4], [], 6))
delimiter
a[0][1] = 9
delimiter
f.seek(-4, 2)
delimiter
scipy.sparse.csgraph._validation
delimiter
bucket = conn.get_bucket(bucket_name)
delimiter
print(iorf.fup(2.5))
delimiter
AB = map(sum, zip(A, B))
delimiter
file.truncate()
delimiter
login(request, user)
delimiter
do_quit(args)
delimiter
main.py
delimiter
vobj.prettyPrint()
delimiter
my_dict
delimiter
end_pts = sorted([a_left, a_right, b_left, b_right])
delimiter
self.type.get_declaration().is_anonymous()
delimiter
np.all(np.all(arr == arr[(0), :], axis=1))
delimiter
merge(a[key], b[key], path + [str(key)])
delimiter
unique_char_count = len(unique)
delimiter
my_table = table()
delimiter
self.console.close()
delimiter
audio.save()
delimiter
serial_port = serial.Serial(port, baud, timeout=0)
delimiter
print(cookie.name, cookie.value, cookie.domain)
delimiter
Example.__subclasses__()
delimiter
ical_atch.set_payload(ical)
delimiter
f = requests.get(link)
delimiter
print(line)
delimiter
self.driver.get_screenshot_as_file(file_path)
delimiter
out.append(item)
delimiter
cPickle.dump(self.__dict__, f, 2)
delimiter
d.seconds + d.days * 86400
delimiter
cls._current_instance
delimiter
next(f)
delimiter
plt.show()
delimiter
self.name = name
delimiter
word = list(word)
delimiter
bisect.bisect == bisect.bisect_right
delimiter
self.hello()
delimiter
[(x + num) for num in y]
delimiter
bytearray(f.read())
delimiter
row_count = len(data)
delimiter
d = np.random.randint(n, size=k)
delimiter
df.dtypes
delimiter
len(s) != (s.add(x) or len(s))
delimiter
Xtranspose = X.transpose()
delimiter
print(sys.stdin.fileno())
delimiter
a1, b1, c1 = (a[i] for i in idxs)
delimiter
plt.plot(x_val, y_val)
delimiter
self.cool_dict[attr] = value
delimiter
print(model._meta.db_table)
delimiter
print(chr(c))
delimiter
parser = argparse.ArgumentParser()
delimiter
Thread.__init__(self)
delimiter
print(result)
delimiter
parser = argparse.ArgumentParser()
delimiter
dy = 0
delimiter
list(links).sort(key=lambda x: (x[1] - 1) / (x[2] + 2) ^ 1.5)
delimiter
self.transport.write(msg)
delimiter
results = p.map(do_work, payloads)
delimiter
root.withdraw()
delimiter
resp.read()
delimiter
scalify([(a + 1) for a in args])
delimiter
assert self.test_user.__unicode__() == self.username
delimiter
self._running = True
delimiter
multiprocessing.freeze_support()
delimiter
df.dtypes
delimiter
df = df.ix[:, (cols)]
delimiter
Base.metadata.sorted_tables
delimiter
print(fmt.format_map(data))
delimiter
plt.hist(bootstrapped_scores, bins=50)
delimiter
view_func(request, *args, **kwargs)
delimiter
pair = frozenset([element1, element2])
delimiter
x_dt = [datetime.datetime.combine(my_day, t) for t in x]
delimiter
uncompressed_path = os.path.join(FILE_DIR, fname)
delimiter
widget.show()
delimiter
profile = graph.get_object(user)
delimiter
validate(yaml.load(good_instance), yaml.load(schema))
delimiter
GENERATE_MAN = NO
delimiter
GENERATE_RTF = NO
delimiter
i = df.index.values
delimiter
x.boxplot()
delimiter
od[a].append(b)
delimiter
types.TypeDecorator.__init__(self, length=self.impl.length)
delimiter
hash((self.x, self.y))
delimiter
new_contact = form.save()
delimiter
velcro.left(90)
delimiter
r = [[i for i in d[x]] for x in list(d.keys())]
delimiter
print(L)
delimiter
fig, ax = plt.subplots()
delimiter
platform.machine()
delimiter
name = models.CharField(max_length=25)
delimiter
df
delimiter
k.fit(X[:, (i)])
delimiter
nbrs.kneighbors(X)
delimiter
print(i)
delimiter
channels = session.query(Channel).all()
delimiter
CM = np.zeros_like(data)
delimiter
draw = ImageDraw.Draw(image)
delimiter
len(cPickle.dumps(a > 10))
delimiter
np.column_stack(np.unravel_index(idx, lon.shape)).tolist()
delimiter
Maemo5Spec()
delimiter
df = pd.concat([df.iloc[:, :4], df.iloc[:, 4:]], keys=(1, 2), axis=1)
delimiter
self.text.grid(row=0, column=0, sticky=(N, S, E, W))
delimiter
self.data.append(node.name)
delimiter
plt.plot(x)
delimiter
fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(8, 8))
delimiter
a = np.array([2, 6, 12, 20, 24, 40, 42, 51])
delimiter
fd.close()
delimiter
line = p.stdout.readline()
delimiter
n.activate((2, 2))
delimiter
fig = plt.figure()
delimiter
stdout = sys.stdout
delimiter
fig, ax = plt.subplots(1)
delimiter
inverted_image = PIL.ImageOps.invert(image)
delimiter
parser.parse_args(cmdline, namespace=namespace)
delimiter
plt.scatter(x, y, zorder=2)
delimiter
axes[0, 1].hexbin(x, y, gridsize=nbins)
delimiter
target_vertex = graph.vs[target_vertex_id]
delimiter
bins = np.linspace(math.ceil(min(data)), math.floor(max(data)), 20)
delimiter
sum(list(takewhile(lambda x: x < 4000000, evenfibs)))
delimiter
log_file.close()
delimiter
pygame.camera.list_camera()
delimiter
self.label.installEventFilter(self)
delimiter
print(df2.CET.dtype)
delimiter
[x[:-1] for x in test]
delimiter
tex.see(tk.END)
delimiter
assert np.allclose(p1, p2)
delimiter
lists.append(line.rstrip().split())
delimiter
sys.exit(1)
delimiter
print(value)
delimiter
random.getrandbits(64)
delimiter
proc.wait()
delimiter
[v for group in list(result.values()) for v in group]
delimiter
de.clicked.connect(self.clicked)
delimiter
merged = merge(string1.lower().split(), string2.lower().split())
delimiter
process_event(e)
delimiter
self.__dict__ == other.__dict__
delimiter
axes = fig.add_subplot(1, 1, 1)
delimiter
ard.flush()
delimiter
d[i] += 1
delimiter
x16 = []
delimiter
str.__new__(cls, arg)
delimiter
y = []
delimiter
panel = wx.Panel(frame, -1)
delimiter
self.scrollbar.set(*args)
delimiter
print(pd.concat([df[mask], df[~mask]]))
delimiter
table.sort(reverse=True, key=Team.getGoalDifference)
delimiter
mysend(s, str(i))
delimiter
Thread.__init__(self)
delimiter
dt = utc_dt.astimezone(tz)
delimiter
a = np.array(a)
delimiter
pool.close()
delimiter
plt.show()
delimiter
setattr(self, key, True)
delimiter
print(data.shape)
delimiter
requests_api(uri, params=params, cookies=cookies, headers=headers)
delimiter
ax.plot(np.arange(0, i * 4, i))
delimiter
react(main)
delimiter
draw = ImageDraw.Draw(im)
delimiter
soup = BeautifulSoup(response)
delimiter
a[abs(a) <= 100]
delimiter
plt.xlim([-l / 2, l / 2])
delimiter
im_rgb.putpixel((x, y), (b, g, r))
delimiter
Thread.__init__(self)
delimiter
book = xlwt.Workbook()
delimiter
new_list = np.delete(myList, toRemove)
delimiter
self.form_invalid(form, **kwargs)
delimiter
line = proc.stdout.readline()
delimiter
conn, addr = server.accept()
delimiter
numpy.random.shuffle(all_idxs)
delimiter
f2()
delimiter
map(operator.itemgetter(0), L)
delimiter
df = pd.DataFrame(c)
delimiter
len(y)
delimiter
gunicorn_django - c / path / to / gunicorn_settings.py
delimiter
User.objects.all()
delimiter
a = np.array([[1, 2], [1, 2]])
delimiter
year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)
delimiter
mask = np.ones(A.shape[1], dtype=bool)
delimiter
width, height = im.size
delimiter
[programs[k] for k in result_keys]
delimiter
print(l.data)
delimiter
ax2.set_ylim(miny + dy, maxy + dy)
delimiter
np.add.reduceat(a, [0, 4, 7])
delimiter
do_something()
delimiter
y = np.sin(x) + np.random.random(100) * 0.2
delimiter
email.send(to, headers, body)
delimiter
_install.run(self)
delimiter
np.sin(x + y)
delimiter
isinstance(99 ** 10, int)
delimiter
rows.append((id, sc))
delimiter
main()
delimiter
df
delimiter
locations = numpy.argsort(A)
delimiter
b = p.map(func, a)
delimiter
Form = QtGui.QWidget()
delimiter
df
delimiter
cursor = conn.cursor()
delimiter
self.runner.start(command)
delimiter
i += 1
delimiter
soup = BeautifulSoup(xml_string)
delimiter
sorted(list(range(len(vector))), key=vector.__getitem__)
delimiter
str_list = [_f for _f in str_list if _f]
delimiter
cipher = AES.new(key=secret, mode=AES.MODE_CBC, IV=iv)
delimiter
[(x - 1) for x in constrained_sum_sample_pos(n, total + n)]
delimiter
time.sleep(5)
delimiter
sys.settrace(tracefunc)
delimiter
max(sqrt(stddev / mode), 1) <= x <= sqrt(stddev / mode) + 1
delimiter
mask[mask] &= x[mask] < -1000
delimiter
gui.mainloop()
delimiter
self.conditions = [helper(c, type, params) for c in self.conditions]
delimiter
MULT(z, z, z)
delimiter
df
delimiter
complist = p.map(buildcomp, np.column_stack((VV1, HH1)))
delimiter
da.focus_set()
delimiter
pickle.dump(dictname, f)
delimiter
s.lstrip()
delimiter
mymodule.py
delimiter
true
delimiter
next(iter(d.items()))
delimiter
d = d.get(k)
delimiter
func(*args, **kwargs)
delimiter
soup = BeautifulSoup.BeautifulSoup(htstring)
delimiter
words = frozenset(chain(wordList[:1], wordList[2:]))
delimiter
-W15 - -ignore < catalina.log
delimiter
ax1.legend(h1 + h2, l1 + l2, loc=2)
delimiter
parsed = urlparse.urlparse(url)
delimiter
a = np.arange(10)
delimiter
f(*args, **kwargs)
delimiter
start_response(status, response_headers)
delimiter
G.add_edge(1, 2)
delimiter
poi.reset_index().plot.scatter(0, 1, ax=axes)
delimiter
batch_request = gdata.spreadsheet.SpreadsheetsCellsFeed()
delimiter
p = Popen(args, stdin=PIPE, stdout=PIPE, stderr=PIPE)
delimiter
fp.close()
delimiter
dict.__getitem__(self, closest_key)
delimiter
browser.select_form(form_name)
delimiter
main()
delimiter
result[header.value].append(col.value)
delimiter
main.py
delimiter
log_auth_token(user.get_auth_token())
delimiter
print(i)
delimiter
layer
delimiter
self.grammar = self.multilineCommands
delimiter
f.seek(0)
delimiter
plt.draw()
delimiter
seen.add(obj.thing)
delimiter
iren.TerminateApp()
delimiter
fexdata = {}
delimiter
c[0] is c[1]
delimiter
l2.grid(row=1, column=0, padx=(10, 100))
delimiter
d[c] += 1
delimiter
print(enumerate(words))
delimiter
fig = plt.figure()
delimiter
C.shape
delimiter
mask = np.array([True, False, True])
delimiter
numpy.frombuffer(bytestream.read(4), dtype=dt)[0]
delimiter
print(a_set.add(1))
delimiter
names.add(func.__name__)
delimiter
print(response.body)
delimiter
a += b
delimiter
os.makedirs(dirmk)
delimiter
patch = ax.add_patch(patch)
delimiter
next(combs)
delimiter
confirmed = get_object_or_404(EmailConfirmed, user=request.user)
delimiter
text = f.read()
delimiter
m = numpy.random.random_integers(0, 1000000, (1000, 500))
delimiter
app = wx.App(False)
delimiter
result = [w for w in vocab if rx.match(w)]
delimiter
mydict[mykey]
delimiter
G.edges()
delimiter
print([r for r in process_row(row)])
delimiter
serversocket.bind((socket.gethostname(), port))
delimiter
df[cols] = df[cols].ffill()
delimiter
self.canvas.itemconfig(self.idImage, anchor=NW)
delimiter
plt.show()
delimiter
s.shutdown(1)
delimiter
response = self.opener.open(url)
delimiter
self.bar = bar
delimiter
plt.hold(True)
delimiter
type(s)
delimiter
print(s.recv(256))
delimiter
self.show_frame_in_display(image_path)
delimiter
ax2.plot(xvals, xvals, linewidth=7)
delimiter
Py_Initialize()
delimiter
timeit[Model.objects.filter(date_created__gte=today)]
delimiter
f.savez(array)
delimiter
placemark.save()
delimiter
df = pd.read_json(sys.stdin)
delimiter
win.show()
delimiter
handler.serve_forever()
delimiter
self.transport.write(msg)
delimiter
server.sendmail(FROM, TO, message)
delimiter
response.write(xlsx_data)
delimiter
iwantthis
delimiter
frozenset(chain.from_iterable(L))
delimiter
HttpResponse(str(deserialized))
delimiter
signal.signal(signal.SIGALRM, handler)
delimiter
reader = csv.DictReader(f)
delimiter
foo.whatever()
delimiter
x.hexdigest()
delimiter
self.value = 1
delimiter
tree = defaultdict(lambda : defaultdict(lambda : defaultdict(list)))
delimiter
self.new_attr = 2
delimiter
cdf_samples = np.random.uniform(0, 1, size=(100, 100))
delimiter
ax.set_xlim(min_x, max_x)
delimiter
count.most_common()[1]
delimiter
X_train = np.concatenate((X_train, catVar), axis=1)
delimiter
self.bell()
delimiter
word.append(char)
delimiter
data_loaded = pickle.loads(data)
delimiter
lambda : _addup(n)
delimiter
print(type(1, 2))
delimiter
os.rmdir(dirname)
delimiter
main()
delimiter
row[:] = [row[i] for i in new_order]
delimiter
file.seek(pos, os.SEEK_SET)
delimiter
user.save()
delimiter
ax = fig.add_subplot(111)
delimiter
mask = np.random.randint(0, 2, size=Y.shape).astype(np.bool)
delimiter
soup = BeautifulSoup(urllib.request.urlopen(url).read())
delimiter
print(newurl)
delimiter
ax.bar(x, y, width, color=c, label=lb)
delimiter
-settings.py
delimiter
result.append(attracted_point(p, attractor, f))
delimiter
result
delimiter
console_handler.setLevel(logging.DEBUG)
delimiter
memoryview(s[0:]) < memoryview(s[1:])
delimiter
bundle
delimiter
len(self._list)
delimiter
fh.setLevel(level)
delimiter
image_path = os.path.join(mypath, each_file)
delimiter
print([(a + b) for a, b in itertools.product(A, B)])
delimiter
datetime(tzinfo=utc_offset(x), *args)
delimiter
your_ip = f.read()
delimiter
values = [f.get() for f in fields]
delimiter
arr.append(x)
delimiter
self.members.append(person)
delimiter
loop.close()
delimiter
f.close()
delimiter
Year.append(row[0])
delimiter
t2.start()
delimiter
im = Image.open(StringIO(r.content))
delimiter
items = deque([1, 2])
delimiter
time.sleep(2)
delimiter
db.session.add(user)
delimiter
t1.start()
delimiter
compressor.close()
delimiter
a = np.zeros(shape=(5, 5), dtype=float)
delimiter
panel = tk.Label(root, image=img)
delimiter
ndarray = np.PyArray_SimpleNewFromData(1, shape, np.NPY_INT, self.data_ptr)
delimiter
pool = Pool(processes=4)
delimiter
L.append(i)
delimiter
n // 1
delimiter
result._fields
delimiter
cc = socket(AF_INET, SOCK_STREAM)
delimiter
fig = plt.figure()
delimiter
element_list.append(json.dumps({key: element[key]}))
delimiter
numpy.core.records.recarray
delimiter
np.dstack((a1, b1)).transpose(2, 0, 1)
delimiter
out_list.append([row.lat, row.long])
delimiter
outGroup.append(n)
delimiter
views.py
delimiter
i += 1
delimiter
y = np.random.randint(0, 10, size=(10, 2))
delimiter
ax.plot_date(ts.index.to_pydatetime(), ts.data)
delimiter
i += 1
delimiter
outcsv.writerows(cursor.fetchall())
delimiter
print(it[2:12:2])
delimiter
word_list = [s.translate(remove_punctuation_map) for s in value_list]
delimiter
cmp(x, y)
delimiter
pycallgraph.start_trace()
delimiter
print(row.to_frame().T)
delimiter
keys = list(d.keys())
delimiter
self.view.form_valid(self.form)
delimiter
cam = VideoCapture(0)
delimiter
str_list = list(filter(bool, str_list))
delimiter
WANTS_DEACTIVATION = _WANTS_DEACTIVATION
delimiter
DISABLE_DEACTIVATION = _DISABLE_DEACTIVATION
delimiter
wavwriter.setframerate(fs)
delimiter
upform = UserProfileForm(request.POST, instance=user.get_profile())
delimiter
file_name = sys.argv[0]
delimiter
a.f = types.MethodType(f, a)
delimiter
all(x == y for x, y in zip(pattern, sequence))
delimiter
raise exc_info[0](exc_info[1]).with_traceback(exc_info[2])
delimiter
result = [productcode, amountentered]
delimiter
used.extend(set(x) for x in combinations(c, 2))
delimiter
path = sys.argv[0]
delimiter
outfile.write(infile.read())
delimiter
print(id(S2))
delimiter
fig, ax1 = plt.subplots()
delimiter
sys.setrecursionlimit(10000)
delimiter
new_dict[key] = recursive_dict_eval(evaled_value)
delimiter
plt.show()
delimiter
list1 = list(map(int, list1))
delimiter
sorted(strings, cmp=strcoll)
delimiter
queryset = get_books()
delimiter
curs.execute(create_table_stm)
delimiter
alexander2().sum()
delimiter
c = Counter([i for j in trainY for i in j])
delimiter
pdb.set_trace()
delimiter
self.SetTopWindow(self.fr)
delimiter
type(MyClass)
delimiter
up.save()
delimiter
app = Flask(__name__)
delimiter
x = pd.DataFrame(np.random.randn(20, 5))
delimiter
self.canvas = Canvas(self, -1, self.figure)
delimiter
print(x.format(42))
delimiter
len(data) - len(list(filter(is_surrogate, data)))
delimiter
foo = pointer(temp_foo)
delimiter
[0, 1, 0, 0, 0],
delimiter
inverted_dictionary[new_key].append(key)
delimiter
print(list(reader))
delimiter
show()
delimiter
ax.plot(t, s)
delimiter
pid = os.fork()
delimiter
print(line)
delimiter
m = numpy.zeros((N, N))
delimiter
sublime.set_clipboard(data)
delimiter
ax.margins(0.1)
delimiter
self.setGeometry(0, 0, 1024, 768)
delimiter
print(x)
delimiter
x += 1
delimiter
xv, yv, zv = [i[j] for i, j in zip((x, y, z), indices)]
delimiter
schedule_once(tasks.some_task_b, interval=120)
delimiter
ax.set_xticks(xticks_minor, minor=True)
delimiter
self.cond.wait(self.mtx)
delimiter
X_rec = pca.inverse_transform(X_proj)
delimiter
boxintprinter(value)
delimiter
boxstringprinter(value)
delimiter
boxsequenceprinter(value)
delimiter
conf.py
delimiter
s.close()
delimiter
numpy.argsort(row)[-6:]
delimiter
nukedir(path)
delimiter
cPickle.dump(root.config(), f, -1)
delimiter
result = func(*args, **kwargs)
delimiter
plt.contourf(data, cmap=cmap, levels=[1, 4, 8])
delimiter
sorted(tuples, key=lambda x: x[2])
delimiter
[0.09558515, -1.96982215, -0.58196525],
delimiter
df
delimiter
html = str(soup)
delimiter
test.reshape(-1, 2)[::2]
delimiter
df.dtypes
delimiter
imshow(im)
delimiter
index.exposed = True
delimiter
self.fn(*args, **kwargs)
delimiter
a = np.arange(20)
delimiter
related_to_user = Room.objects.filter(content_type=ctype)
delimiter
to_product.append([(k, i) for i in process(v)])
delimiter
book = xlwt.Workbook()
delimiter
c.save()
delimiter
print(json.dumps(c, cls=AlchemyEncoder))
delimiter
self.window = stdscreen.subwin(0, 0)
delimiter
Depends(report, speed)
delimiter
x1, x2, y1, y2 = 0, 0, 0, 0
delimiter
termios.tcsetattr(file.fileno(), termios.TCSADRAIN, old_attrs)
delimiter
ssh_handler(server, command=mycmd)
delimiter
globals().update(pubattrs)
delimiter
print(x[2])
delimiter
s[end_of_leader:start_of_trailer]
delimiter
query = query.filter(~table_a.id.in_(subquery))
delimiter
labels = labels.reshape(c)
delimiter
item2node[node].add_child(ch)
delimiter
ws = wb.active
delimiter
data_with_zeros.apply(divide, args=(data_with_zeros,))
delimiter
json.dumps([dict1, dict2])
delimiter
[map(counter.__getitem__, all_features) for counter in counters]
delimiter
urllib.request.urlopen(*args, **kwargs)
delimiter
lambda x: x.lower() not in stopwords
delimiter
result.extend(flat(item))
delimiter
ax = pyplot.subplot(111)
delimiter
dumper.represent_dict(list(data.items()))
delimiter
main()
delimiter
id = Column(Integer, primary_key=True)
delimiter
out_2.read()
delimiter
os.kill(os.getpid(), signal.SIGTERM)
delimiter
plt.grid()
delimiter
results = table1.objects.exclude(field1__in=inner_qs)
delimiter
ax.plot(xi, yi)
delimiter
worksheet.write(row, col + 1, item)
delimiter
object.__setattr__(self, attr, value)
delimiter
urllib.request.install_opener(opener)
delimiter
cur = con.cursor()
delimiter
settings.setSupportZoom(True)
delimiter
acids = [aminoacid[base] for base in sublist]
delimiter
heap = [(v, k) for k, v in list(some_dict.items())]
delimiter
fig.add_subplot(ax)
delimiter
fp.close()
delimiter
NotImplemented
delimiter
findsubset()
delimiter
t1 + pd.datetools.relativedelta(months=k)
delimiter
stophttp.start()
delimiter
m = hashlib.md5()
delimiter
print(random.sample(d, num))
delimiter
pylab.subplot(121)
delimiter
x, y = np.mgrid[:nr, :nc]
delimiter
df = pd.concat([df for _ in range(100)], axis=1, ignore_index=True)
delimiter
instance = session.query(model).filter_by(**kwargs).first()
delimiter
root = tk.Tk()
delimiter
[apply(op, *items) for items in zip(*elements)]
delimiter
json.dumps(final)
delimiter
ax = plt.figure(figsize=(10, 6)).add_subplot(111)
delimiter
population = [a for n, a in allele_freqs for _ in range(n)]
delimiter
numpy.frombuffer(bytestream.read(4), dtype=dt)
delimiter
plt.semilogx(f, phase)
delimiter
[i for i in mysites if i in list(sites.keys())]
delimiter
response = urllib.request.urlopen(request)
delimiter
print(rd[5])
delimiter
sys.stdout.write(str(result))
delimiter
this_list.index(sub_list[0]), len(sub_list)
delimiter
q.bind()
delimiter
plt.imshow(X_digits[1778].reshape((8, 8)), cmap=plt.cm.gray_r)
delimiter
app = create_app()
delimiter
print(result)
delimiter
numpy.nan is numpy.nan
delimiter
oldbase = os.path.splitext(filename)
delimiter
img_hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
delimiter
myapp.run()
delimiter
pool = mp.Pool()
delimiter
x = np.array([True, True, False, False])
delimiter
norm = mpl.colors.Normalize(vmin=valmin, vmax=valmax)
delimiter
serialized_q = json.dumps(list(queryset), cls=DjangoJSONEncoder)
delimiter
ax.set_yticks(scipy.arange(-1.5, 1.5, 0.25))
delimiter
L[a:a + span2] = tmp
delimiter
print(Counter(yourtext.split()))
delimiter
c = [1, 2]
delimiter
db.session.add(user_from_factory)
delimiter
L = np.logspace(1, 2, N)
delimiter
repeat(partial(bar, 42))
delimiter
self.doc.build(pdf, canvasmaker=NumberedCanvas)
delimiter
()
delimiter
print(url + urllib.parse.urlencode(getVars))
delimiter
a.lower() == b.lower()
delimiter
a.append(visdel())
delimiter
fig = plt.figure()
delimiter
conn.close()
delimiter
json_data_rdd.flatMap(f)
delimiter
Logger.propagate
delimiter
os.chdir(sys._MEIPASS)
delimiter
exogx = np.array(list(range(1, 5)))
delimiter
othercube[i, j, k] = some2d
delimiter
stack.pop()
delimiter
t = threading.Thread(target=wrapped_f, args=(q,) + args, kwargs=kwargs)
delimiter
p = argparse.ArgumentParser()
delimiter
a = np.array([[8.0, 9, 7, 0], [0, 0, 5, 6]])
delimiter
parsed_response
delimiter
result
delimiter
f.read()
delimiter
plt.show()
delimiter
os.remove(link_name)
delimiter
oauth_secret = models.CharField(max_length=200)
delimiter
print(numpy.linalg.norm(x, axis=1))
delimiter
name = models.CharField(max_length=128)
delimiter
self.cookies.append(cookie)
delimiter
json.dump(record, f)
delimiter
L = pd.concat([data[x[0]].eq(x[1]) for x in list(tmp.items())], axis=1)
delimiter
map(globals().get, fxnOfInterest)
delimiter
hashlib.sha512(s + d).hexdigest()
delimiter
k = np.random.randint(4, 16)
delimiter
X.nonzero()
delimiter
f.flush()
delimiter
soup = BeautifulSoup(html)
delimiter
count_mers(s, k=2)
delimiter
M[(rownumber), :] *= scalar
delimiter
assert len(all_rosters) == len(set(tuple(roster) for roster in all_rosters))
delimiter
a1 = a
delimiter
toplevel = Toplevel()
delimiter
user = User.objects.get(email=username)
delimiter
matrix
delimiter
print(x)
delimiter
plt.draw()
delimiter
sys.modules[pkgname]
delimiter
a, b = f[:i + 1], f[i + 1:]
delimiter
sorted(set(li))[-n]
delimiter
userhome = userhome.encode(sys.getfilesystemencoding())
delimiter
s += timedelta(days=1)
delimiter
httplib.HTTPConnection.send(self, s)
delimiter
ax2.bar(x, y)
delimiter
signal.signal(signal.SIGALRM, self.raise_timeout)
delimiter
pprint(a)
delimiter
opener = urllib.request.build_opener(urllib.request.HTTPHandler)
delimiter
a()
delimiter
myFunction()
delimiter
pixmap = QtGui.QPixmap.fromImage(qimg)
delimiter
descendents_ancestors.add(ancestor)
delimiter
__import__(module)
delimiter
Maybe(maybe.calc(lambda x: x ** 2))
delimiter
np.row_stack((a, b))
delimiter
django.db.transaction.rollback()
delimiter
y = np.random.rand(10) * (X.shape[1] - 1)
delimiter
browser = webdriver.Firefox()
delimiter
dom0.create()
delimiter
out.write(line.replace(LASTKNOWN, CURRENT))
delimiter
b = np.transpose(a)
delimiter
keys.append(word)
delimiter
session = smtplib.SMTP(server)
delimiter
result = func(*args, **kwargs)
delimiter
im.size
delimiter
print(vectors.T / norms[:, (newaxis)])
delimiter
handler2.setLevel(logging.ERROR)
delimiter
list(a)
delimiter
self.__dict__[key]
delimiter
img.putdata(new_list_of_pixels)
delimiter
cdeltaY, crvalY = linwcs(np.amin(glat), np.amax(glat), len(glat))
delimiter
plot_point(xp, yp, sym)
delimiter
self.process.start()
delimiter
list(words_in_string(word_list, a_string))
delimiter
data = requests.get(u).json()
delimiter
start_time = time.time()
delimiter
feature_names = vectorizer.get_feature_names()
delimiter
plt.colorbar(sst_contour, cax=cbar_ax)
delimiter
mock_redis_get.side_effect = get
delimiter
tmap.setdefault(t, len(tmap))
delimiter
connection.execute(q)
delimiter
events.sort()
delimiter
name = Column(String(50), nullable=False)
delimiter
np.nonzero(x)
delimiter
(x for _, x in zip(list(range(n)), generator))
delimiter
parser = argparse.ArgumentParser()
delimiter
lines = f.read()
delimiter
[inner for outer in x for inner in outer]
delimiter
obj._meta.concrete_model
delimiter
out, err = cproc.communicate(input)
delimiter
input.isdigit()
delimiter
print(t.strftime(fmt))
delimiter
driver.execute_script(script, *buttons)
delimiter
college = models.CharField(max_length=40)
delimiter
pause.until(datetime(2015, 8, 12, 2))
delimiter
print(i)
delimiter
zip_file.extract(i, dirname)
delimiter
u /= math.sqrt((u ** 2).sum())
delimiter
print(sys.exc_traceback.tb_next.tb_frame.f_locals)
delimiter
exception_list.extend(traceback.format_tb(sys.exc_info()[2]))
delimiter
numbers.append(i)
delimiter
sess.run([train_op, loss, global_step])
delimiter
options, args = parser.parse_args()
delimiter
vbox = gtk.HBox()
delimiter
logging.error(e, exc_info=True)
delimiter
f.close()
delimiter
filename = sys.argv[1]
delimiter
str(eval(self.expression))
delimiter
print(G.number_of_edges())
delimiter
print(df.loc[np.sort(idx)])
delimiter
parser = argparse.ArgumentParser()
delimiter
print(locale.getlocale())
delimiter
hkweather = bs4.BeautifulSoup(r.text)
delimiter
np.sin(y * x)
delimiter
[list(range(x)) for a in selection]
delimiter
channels = f.getnchannels()
delimiter
pygame.image.save(game.screen, image_path)
delimiter
db.session.rollback()
delimiter
sheet = pygame.image.load(file).convert_alpha()
delimiter
df.A.plot()
delimiter
11111111111111111111111111110101
delimiter
funcs.append(partial(lambda x: x, x))
delimiter
list = [self.queryQ.put(query) for query in queries]
delimiter
found = next((i for i in mylist if predicate(i)))
delimiter
round(num / res) * res
delimiter
root = Tk.__init__(self, *args, **kwargs)
delimiter
bar()
delimiter
result = []
delimiter
print(channel[0])
delimiter
main()
delimiter
plot(x[i:i + 2], y[i:i + 2], linewidth=width[i])
delimiter
pname = PyUnicode_FromString(name)
delimiter
res = res.reset_index()
delimiter
ar.flatten()
delimiter
name = StringField()
delimiter
time.sleep(1)
delimiter
cell = [title1, title2]
delimiter
plot(data)
delimiter
df_both.swaplevel(0, 1).sort_index()
delimiter
z = bar(foo())
delimiter
ax.add_patch(Polygon(xy))
delimiter
print(list(common))
delimiter
asyncio.get_event_loop().run_until_complete(async_getter())
delimiter
img = MIMEImage(memf.getvalue())
delimiter
om.grid(sticky=W + E, padx=5, pady=5)
delimiter
query = query.decode(charset) % conn.escape(args)
delimiter
f.seek(0, os.SEEK_END)
delimiter
s[-1] *= -1
delimiter
self.selection
delimiter
response
delimiter
Session = sessionmaker(bind=engine)
delimiter
fig = plt.figure()
delimiter
print(pd.concat([dm] * df.shape[1], axis=1, keys=df.columns))
delimiter
new_m = coo_matrix((a[:, (2)], (a[:, (0)], a[:, (1)])), m.shape)
delimiter
sigma = np.std(array)
delimiter
circmask * anglemask
delimiter
name = models.CharField(max_length=100)
delimiter
Base.__init__(self)
delimiter
data = list(img.getdata())
delimiter
self.root.after(1000, self.poll)
delimiter
fig.canvas.draw()
delimiter
print({a, b})
delimiter
Question.objects.filter(test_id=fr).update(test_id=to)
delimiter
app = QtGui.QApplication([])
delimiter
set_spyder_echo(True)
delimiter
self.d[k] = v
delimiter
count = len(words)
delimiter
counts = Counter(value[1] for value in mydict.values())
delimiter
foo()
delimiter
df
delimiter
word.lower() in english_words
delimiter
list(range(5))[6:7]
delimiter
request.GET.urlencode()
delimiter
ax.autoscale(False)
delimiter
conn.status
delimiter
csvout.writerow((country, year))
delimiter
udf(_in_last_5_minutes, BooleanType())
delimiter
surf1 = pygame.Surface((200, 200))
delimiter
data = self.conn.recv(1024)
delimiter
self.ui.setupUi(self)
delimiter
len(entries), sum(entries)
delimiter
sum += int(num_str[i])
delimiter
writer = csv.writer(csv_file)
delimiter
print(help(b))
delimiter
self.data[key] = item
delimiter
pl.xticks([1, 2], labels)
delimiter
f.subs({x: 10, y: 20})
delimiter
self.queue = set()
delimiter
list = [1, [2, 2, 2], 4]
delimiter
my_copy = my_dict.copy()
delimiter
items = list(yourdict.items())
delimiter
ax = fig.add_subplot(1, 2, 2)
delimiter
somethingThread = threading.Thread(target=someClass.doSomething)
delimiter
django.get_version()
delimiter
f_old.close()
delimiter
h, w = tpl.shape[:2]
delimiter
confused_array
delimiter
ax = plt.gca()
delimiter
print(x)
delimiter
print([j for i in spamreader for j in i])
delimiter
log = logging.getLogger(__name__)
delimiter
obj.get_id
delimiter
assert np.allclose(beta, beta2)
delimiter
pl.subplots_adjust(wspace=0)
delimiter
element = driver.find_element_by_css_selector(locator)
delimiter
app.show()
delimiter
gen().__name__
delimiter
df_key = pd.concat(df_list)
delimiter
flask.g.breadcrumbs.append(BreadCrumb(path, title))
delimiter
smtp.quit()
delimiter
divs_sum = sum(get_divs(num))
delimiter
Fruit(5)
delimiter
worksheet.getCellByPosition(x, y).getString()
delimiter
calculate_something.call_args_list
delimiter
s[:]
delimiter
d2 = dict((v, k) for k, v in d.items())
delimiter
os.remove(filepath)
delimiter
dt.replace(year=dt.year + 1)
delimiter
k = arr.shape[0] / n
delimiter
primes = [i for i in range(R + 1) if sieve[i] == 0]
delimiter
B.add_nodes_from(inmates_list, bipartite=0)
delimiter
args = parser.parse_args()
delimiter
masked.sum(axis=1)
delimiter
os.system(self.get_command(file, **options))
delimiter
self.button.grid(row=2, columnspan=2)
delimiter
npreds[v] += 1
delimiter
n == 0 or GetSum(n, arr[1:]) or GetSum(n - arr[0], arr[1:])
delimiter
axes.scatter(cdfx, logcdfy, s=4, linewidths=0)
delimiter
nhb
delimiter
interleaved_array = np.hstack(arrays).reshape(shape)
delimiter
func(*args, **kwargs)
delimiter
fig = plt.figure()
delimiter
numbers = [float(x.strip()) for x in input_list]
delimiter
md5.update(data)
delimiter
c.writerow(row)
delimiter
deletet[4:]
delimiter
messages = self.args[1]
delimiter
instance.method(argument)
delimiter
grpA[mask] = sortedA[:, (-1)]
delimiter
decoded = base64.b64decode(encoded)
delimiter
X = np.array([[1, 1], [2, 1], [2.5, 1]])
delimiter
sum(min(ac[key], bc[key]) for key in ac)
delimiter
axm.set_xlim(0.0, 1.0)
delimiter
map(operator.itemgetter(1), L)
delimiter
fig = plt.figure()
delimiter
walk(tree.getChild(i), temp)
delimiter
close_button.set_relief(gtk.RELIEF_NONE)
delimiter
decoder.start_utt()
delimiter
data = np.arange(200).reshape((4, 5, 10))
delimiter
makeIDAT = True
delimiter
makeIEND = True
delimiter
myDict[newKey].append(value)
delimiter
f(*args)
delimiter
result = cv2.matchTemplate(img, template, cv.CV_TM_SQDIFF)
delimiter
print(df2)
delimiter
numbers = (int(character) for character in input_string if character.isdigit())
delimiter
a_test.__name__
delimiter
self.listWidgetB.currentItemChanged.connect(self.item_clicked)
delimiter
fib(n)
delimiter
df1.fillna(-999) == df1.fillna(-999)
delimiter
one.py
delimiter
print(row[0])
delimiter
numpy.random.seed(1)
delimiter
painter.drawImage(0, 0, self.mQImage)
delimiter
self.command()
delimiter
(a != b).sum() / float(a.size)
delimiter
numpy.atleast_2d(x[x[:, (1)] == 21])
delimiter
opt1 = tf.train.GradientDescentOptimizer(1e-05)
delimiter
foobar(1)
delimiter
base * power(base, exponent - 1)
delimiter
list(filter(list1.__contains__, list2))
delimiter
web.show()
delimiter
logger.addHandler(handler)
delimiter
ax = plt.axes()
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
city = models.CharField(max_length=50)
delimiter
True
delimiter
win.set_keep_above(True)
delimiter
-Wl, -rpath, your_path
delimiter
lines = file.readlines()
delimiter
options = webdriver.ChromeOptions()
delimiter
problems = True
delimiter
Matrix(M.T * M)
delimiter
sys.stdout.write(line)
delimiter
worker = subprocess.Popen(args)
delimiter
logger = logging.getLogger()
delimiter
q.all()
delimiter
self.setLayout(layout)
delimiter
dict(zip(*([iter(S)] * 2)))
delimiter
datetime.now().weekday()
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
Greeter().greet()
delimiter
s = re.search(regex, line)
delimiter
df.index = index
delimiter
print([list([_f for _f in x if _f]) for x in df.values.tolist()])
delimiter
app.MainLoop()
delimiter
value = datetime.timedelta(0, 64800)
delimiter
f.close()
delimiter
ax1 = fig.add_axes((0.1, 0.4, 0.8, 0.5))
delimiter
remaining = np.arange(len(M))
delimiter
s = eval(input())
delimiter
d.foo()
delimiter
print(cell.value)
delimiter
print(dict(mergedicts(dict1, dict2)))
delimiter
AC_PROG_CXX
delimiter
AC_FUNC_MALLOC
delimiter
reader = csv.DictReader(csvin)
delimiter
sys.getsizeof(s)
delimiter
dir(func)
delimiter
print(yaml.dump(data))
delimiter
now = datetime.datetime.now()
delimiter
backend.py
delimiter
result[-1].append(t[j + 1])
delimiter
self.axe.clear()
delimiter
p1.func == p2.func and p1.args == p2.args and p1.keywords == p2.keywords
delimiter
print(R.shape)
delimiter
gss_client = gspread.authorize(credentials)
delimiter
ax = fig.add_subplot(111)
delimiter
LETTER, LEGAL, ELEVENSEVENTEEN
delimiter
button.setMenu(menu)
delimiter
pickle.dump(lists, f)
delimiter
id(foo[0])
delimiter
env = Environment()
delimiter
print(first_day)
delimiter
Book.query.with_entities(Book.id)
delimiter
self.rect.left = p.rect.right
delimiter
tab.header(list(row.keys()))
delimiter
self.assertEqual(name, expected_name)
delimiter
setattr(toclass, attr, cls.__dict__[attr])
delimiter
print(draft.playernumber)
delimiter
df == df
delimiter
x = np.concatenate((x, x))
delimiter
template = cv2.imread(sys.argv[2])
delimiter
libraries = []
delimiter
MULT(z, a, z)
delimiter
assert len(list(sumdiff(x, y, nskip))) == n / nskip
delimiter
values = [random() for i in range(20)]
delimiter
df = pd.concat([df] * 10000).reset_index(drop=True)
delimiter
input = wx.TextCtrl(self, -1, style=wx.TE_MULTILINE)
delimiter
d = {}
delimiter
logdata = np.log(data)
delimiter
response = connection.read_response()
delimiter
i = len(A)
delimiter
inset.set_position([x_fig, y_fig, x2_fig - x_fig, y2_fig - y_fig])
delimiter
s = socket.socket()
delimiter
cur = conn.cursor()
delimiter
es = Elasticsearch()
delimiter
zip(*a)
delimiter
list(itertools.permutations(l, 2))
delimiter
C_Cidx = np.digitize(C, Cbins)
delimiter
instance.work.save()
delimiter
print([p for p in range(101) if aks_test(p)])
delimiter
fileDirectory()
delimiter
child.setExpanded(True)
delimiter
img = Image.open(image)
delimiter
line.interpolate(0.1, normalized=True)
delimiter
self._points.append(coordinates)
delimiter
from_user = db.ReferenceField(User, required=True)
delimiter
HttpResponse(output)
delimiter
img = Image.open(image.file)
delimiter
sleep(10)
delimiter
ax1.yaxis.set_major_formatter(yticks)
delimiter
l = [copy.copy(x) for x in [[0]] * 4]
delimiter
_my_whole_freaking_module()
delimiter
{{p.age}}
delimiter
ssh = paramiko.SSHClient()
delimiter
EMAIL_USE_TLS = False
delimiter
print(fooPy())
delimiter
tar.close()
delimiter
xml_str = urllib.request.urlopen(xml_str).read()
delimiter
print(x.max())
delimiter
admin.site.register(Poll)
delimiter
d = d[k]
delimiter
result = urllib.request.urlopen(request)
delimiter
painter.save()
delimiter
listy = [a, a, a]
delimiter
print(s.recvfrom(65565))
delimiter
num += 1
delimiter
tmp = arr.reshape(2, 2, 2, 2).swapaxes(1, 2)
delimiter
cj = cookielib.CookieJar()
delimiter
df1.reindex(columns=dummies_frame.columns, fill_value=0)
delimiter
area([[0, 0, 0], [1, 1, 1]])
delimiter
self._async_init().__await__()
delimiter
list(product(x, deepflatten(y, ignore=str)))
delimiter
np.arange(lllat, urlat, 2.0),
delimiter
dateobject = datetime.date.today()
delimiter
print(k, v)
delimiter
plt.xticks(list(range(len(labels))), labels)
delimiter
f.close()
delimiter
help(map)
delimiter
r = requests.get(url, stream=True)
delimiter
left = A[idx - 1]
delimiter
self.log_file = log_file
delimiter
powerset_abs_file.close()
delimiter
inner = types.FunctionType(myFunc.__code__.co_consts[1], globals())
delimiter
print(date_by_adding_business_days(datetime.date.today(), 10))
delimiter
myList.append(random.randint(0, 1))
delimiter
term.start()
delimiter
swapped_pairs = zip(seq[1::2], seq[::2])
delimiter
df2 = pd.DataFrame(df1, copy=True)
delimiter
sum(10 ** pos * val for pos, val in enumerate(reversed(test)))
delimiter
rv_continuous.fit(gamma, x, floc=0, fscale=4)
delimiter
l[2]
delimiter
time.sleep(0.1)
delimiter
now = datetime.now()
delimiter
np.flatnonzero(np.random.multinomial(1, p, 1))[0]
delimiter
print(bin(v.value))
delimiter
print(list([x for x in words if len(x) > avg]))
delimiter
choices = [(item.pk, item.some_other_method()) for item in some_queryset]
delimiter
[[2][0][1][0][1][0]]
delimiter
b = OuterTest()
delimiter
NORTH, S, W, E = (0, -1), (0, 1), (-1, 0), (1, 0)
delimiter
self.assertEqual(10, result, result)
delimiter
MyThread(parent=self)
delimiter
object.__new__(cls, value)
delimiter
self.func(*args, **kw)
delimiter
c.x.append(1)
delimiter
fig = plt.figure()
delimiter
os.kill(signal.CTRL_C_EVENT, 0)
delimiter
set(list1).intersection(compSet)
delimiter
queue.put((False, exc_info()))
delimiter
os.remove(tempFile)
delimiter
count += 1
delimiter
next(key for key, value in d1.items() if value == 55)
delimiter
assert align_two_lists(list1, list2) == [new_list1, new_list2]
delimiter
output = p2.communicate()[0]
delimiter
ax.autoscale()
delimiter
c.start()
delimiter
t = np.linspace(0, 1, 200)
delimiter
print(title.firstChild.data)
delimiter
question = models.CharField(max_length=200)
delimiter
ax2.set_ylim(0, 1)
delimiter
self._lock.acquire()
delimiter
self.assertEqual(len(self.seq), 1)
delimiter
models.py
delimiter
existing_category.put()
delimiter
new_type = numpy.dtype(descr)
delimiter
example().cmdloop()
delimiter
new_df = df.iloc[only_once.index // len(df.columns)]
delimiter
list_of_list.append(list(map(float, list_)))
delimiter
a, b
delimiter
[4, 5]
delimiter
B = scipy.sparse.diags([A[:, (0)], A[:, (1)]], [0, 1], [4, 5])
delimiter
BaseTest.__init__(self, *args, **kwargs)
delimiter
print(line)
delimiter
plt.show(block=False)
delimiter
et = ElementTree.fromstring(xmlStr)
delimiter
os.system(filename)
delimiter
self.b = a
delimiter
tmp = np.random.rand(np.random.randint(1, 100))
delimiter
print(q.get())
delimiter
ax2 = ax1.twinx()
delimiter
print(f.read())
delimiter
cr.set_source_rgb(0, 0, 0)
delimiter
self.btn.pack()
delimiter
parser = etree.XMLParser(ns_clean=True, recover=True)
delimiter
Transform.__init__(self)
delimiter
next.focus()
delimiter
p = Process(target=f, args=(child_conn,))
delimiter
arr[:, (np.newaxis)]
delimiter
lambda x: x(r)
delimiter
paws = [p.squeeze() for p in np.vsplit(paws_data, 4)]
delimiter
sock.close()
delimiter
id = Column(Integer, primary_key=True)
delimiter
plot_date(timeSeries, data)
delimiter
self.assertEqual(r.status_code, 200)
delimiter
result.append(x)
delimiter
[int(full.split()[-1] in B) for full in A]
delimiter
listbox.autowidth()
delimiter
[str(i) for i in range(1995, time.localtime().tm_year + 1)]
delimiter
G.remove_edge(edge[0], edge[1])
delimiter
liba.hello()
delimiter
lines = [screen.display[i].rstrip() for i in range(last + 1)]
delimiter
zip(a, b)
delimiter
smallfile.close()
delimiter
self.bar(arg)
delimiter
app.Yield(True)
delimiter
data = f.read().strip()
delimiter
cache.set(cache_key, result)
delimiter
print(data)
delimiter
print(sum(v == dt.hour and dt.weekday() == day for dt in dates))
delimiter
os.environ[k] = v
delimiter
file.truncate(10 ** 10)
delimiter
result = [s for s in all_words if pat.match(s)]
delimiter
description = models.CharField(max_length=255, blank=True, null=True)
delimiter
uploaded_file_info = items.children[target_filename].upload(file_to_upload)
delimiter
(df == a).all(1).any()
delimiter
print(arg_str)
delimiter
name = models.CharField(max_length=100)
delimiter
lst = [1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0]
delimiter
setattr(obj, parts[-1], value)
delimiter
points.intersects(poly.unary_union)
delimiter
self.resize(600, 400)
delimiter
a = [4, 5, 0, 0, 6, 7, 0, 1, 0, 5]
delimiter
l = []
delimiter
post[0].tags.remove(posttag)
delimiter
sorted(l, key=os.urandom)
delimiter
abstracts.append(abstract)
delimiter
out.close()
delimiter
Dup[Item] = ItemNumber = len(List) - 1
delimiter
d.cards.append(Card(1, 1))
delimiter
img = img.resize((size[0] * multiplier, size[1] * multiplier), Image.BICUBIC)
delimiter
_addup(n - 1) + n
delimiter
fig = plt.figure()
delimiter
compare_intersect(a, b)
delimiter
sizer = wx.BoxSizer(wx.VERTICAL)
delimiter
xml = Node.toxml()
delimiter
df_one.show()
delimiter
np.ma.all(np.ma.masked_invalid(a) == np.ma.masked_invalid(b))
delimiter
list(d.items())[0]
delimiter
[os.sep.join(p) for p in product(*matching) if _in_trie(path_trie, p)]
delimiter
deleteself.__dict__[key]
delimiter
user_model = sys.argv[1]
delimiter
zi = np.ma.masked_equal(zi, 0)
delimiter
writer = csv.writer(f)
delimiter
outf.seek(0)
delimiter
id = Column(Integer, primary_key=True)
delimiter
root.withdraw()
delimiter
reader = csv.reader(f, delimiter=d)
delimiter
t = threading.Thread(target=read_stdout, args=(p.stdout, q))
delimiter
decorator
delimiter
self._list.index(value)
delimiter
acc.extend(inner(x, []))
delimiter
test_foo.py
delimiter
abscissas = np.linspace(0, 1, 10)
delimiter
number_of_columns = sheet.ncols
delimiter
self.x = 5
delimiter
match = re.match(pattern, s, re.UNICODE)
delimiter
parentNode.removeChild(element)
delimiter
person_list.append(person)
delimiter
original_tag.append(new_tag)
delimiter
table = Table(domain, [map(str, row) for row in df.as_matrix()])
delimiter
pipe(list(range(4)), map(lambda i: repeat(i, i + 1)), concat, list)
delimiter
a.f()
delimiter
zipped_file.writelines(orig_file)
delimiter
cat_index = np.searchsorted(categories, A[0])
delimiter
s.sendmail(sender, recipients, my_as_string(msg))
delimiter
main(sys.argv)
delimiter
r, nil
delimiter
result.map(lambda x: row(DenseVector(x))).toDF(schema)
delimiter
arr[accmask] = np.nan
delimiter
y[4:6, 1:8] = 1
delimiter
out = list(df.T.to_dict().values())
delimiter
new_list = []
delimiter
list(sympy.primerange(0, 100))
delimiter
A1s[([0, 1, 2]), ([0, 1, 0]), :, ([0, 1, 1]), :]
delimiter
fig, ax = plt.subplots()
delimiter
self.diagram.SetSnapToGrid(True)
delimiter
b = a.copy()
delimiter
nbins = len(ax1.get_xticklabels())
delimiter
c.point(x, y, color=sp.pixel(x, y))
delimiter
main.py
delimiter
shutil.copyfileobj(req, f)
delimiter
timestamp = (dt - epoch) / timedelta(seconds=1)
delimiter
minval = min(a[i], a[i - 1])
delimiter
label_image.place(x=0, y=0, width=image1.size[0], height=image1.size[1])
delimiter
y_ = np.linspace(1.0, 2.0, 20)
delimiter
non_transparent.paste(image, (0, 0), image)
delimiter
a2.append(int(data[1]))
delimiter
dict.__delitem__(self, key)
delimiter
print(df)
delimiter
array([0.91262442, 0.67247516])
delimiter
fig, ax = plt.subplots()
delimiter
self._tv.openPersistentEditor(self._tm.index(row, 0))
delimiter
zip(t[::2], t[1::2])
delimiter
E.append(np.sqrt(((last - out) ** 2).sum()))
delimiter
os.read(r_fd, 1)
delimiter
plot(x[indice], y[indice])
delimiter
foo = np.array([0.0, 1.5, 1.0])
delimiter
parsed = ET.fromstring(xml_string)
delimiter
url_parts = list(urlparse.urlparse(url))
delimiter
y = y.reshape(-1, 1)
delimiter
file.close()
delimiter
df.loc[4]
delimiter
widget.setLayout(QVBoxLayout())
delimiter
(df.foo != df.foo.shift()).cumsum()
delimiter
self.setCentralWidget(self.cw)
delimiter
isize = im.size
delimiter
specifics()
delimiter
eq_y.subs([(x, c), (y(c), y_c), (y(x).diff(x).subs(x, c), dy_c)]),
delimiter
transaction.commit_unless_managed()
delimiter
f.close()
delimiter
df != 0
delimiter
sympy.__version__
delimiter
a = np.where(img != 0)
delimiter
p = widget.grab()
delimiter
raise NotImplemented
delimiter
sock.close()
delimiter
a[a < 0] = -1
delimiter
print(response.status, response.reason)
delimiter
signal.alarm(0)
delimiter
output = PdfFileWriter()
delimiter
Foo.bar()
delimiter
a[1]
delimiter
a = np.array([2, 56, 4, 8, 564])
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
fig = plt.figure(dpi=100)
delimiter
form.show()
delimiter
info = [data[i:i + 2] for i in range(0, len(data), 2)]
delimiter
cos_x = sin(lat_a) * sin(lat_b) + cos(lat_a) * cos(lat_b) * cos(delta_long)
delimiter
print((dirpath, len(todays_files)))
delimiter
Xnew = np.hstack((X, X0))
delimiter
session.add_all([tableRow(row) for row in listOfRows])
delimiter
self.generator_outputs.append(tf.clip_by_value(x_gen, -1, 1))
delimiter
x.append(item)
delimiter
tn = telnetlib.Telnet(HOST)
delimiter
fig, ax = plt.subplots()
delimiter
quicksort(array)
delimiter
map(lambda x, y: x * y, l1, l2)
delimiter
d.setdefault(key(item), []).append(item)
delimiter
do_stuff(match)
delimiter
os.chdir(directory)
delimiter
ax.set_yticklabels(ax.get_yticks())
delimiter
Z = X ** 2 + Y ** 2 + np.random.rand(*X.shape) * 0.01
delimiter
thread.start_new_thread(input_thread, (list,))
delimiter
root.grid_rowconfigure(2, weight=1)
delimiter
sys.exit(1)
delimiter
api = tweepy.API(auth)
delimiter
grokster.grok()
delimiter
ax.set_position([0.1, 0.1, 0.85, 0.85])
delimiter
f.read()
delimiter
original_rows = [[1, 0, 1], [0, 0, 0], [1, 0, 0]]
delimiter
sys.stdin.read()
delimiter
json_string = urllib.request.urlopen(url).read()
delimiter
Area = pi * (dr * n) ^ 2 - pi * (dr * (n - 1))
delimiter
parser1 = argparse.ArgumentParser()
delimiter
pool = multiprocessing.Pool(processes=4)
delimiter
finishat = time.time() + timeout
delimiter
[x for x in data if key in x and x[key] in allowed]
delimiter
cmap = matplotlib.cm.jet
delimiter
result.append((0, 0, values))
delimiter
self.timer.cancel()
delimiter
fig, axes = plt.subplots(nrows=1, ncols=numdatasets, figsize=(12, 6))
delimiter
func(*args, **kwargs)
delimiter
a[i].append(x)
delimiter
scipy.math.factorial, numpy.math.factorial, math.factorial
delimiter
channel = ssh_client.invoke_shell()
delimiter
G.add_edge(1, 2)
delimiter
data = file.read()
delimiter
words.most_common()
delimiter
br.select_form(nr=currentForm)
delimiter
print([(x ** 2) for x in lst if x % 2 == 0])
delimiter
exit(0)
delimiter
x = __import__(module_name)
delimiter
p = session.query(Parent).get(pid)
delimiter
bar(list(range(10)), list(range(10)))
delimiter
[pingpong]
delimiter
Column(_f(_to_seq(sc, [col], _to_java_column)))
delimiter
root.mainloop()
delimiter
t2 = time.time()
delimiter
f.close()
delimiter
proc.kill()
delimiter
y = x + y
delimiter
print()
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
foo_data = json.loads(json_string)
delimiter
self._c = c
delimiter
self.Bind(wx.EVT_SIZE, self.OnSize)
delimiter
sleep(2)
delimiter
thestrings = [str(s) for s in col.findAll(text=True)]
delimiter
np.bincount(i, weights=d)
delimiter
print(np.argmax(spect), np.max(spect))
delimiter
client = gdata.analytics.client.AnalyticsClient()
delimiter
pprint(ddiff)
delimiter
plt.show()
delimiter
lst = [[0, 1], [0, 4], [1, 0], [1, 4], [4, 0], [4, 1]]
delimiter
w.wcs.naxis
delimiter
main_parser = argparse.ArgumentParser()
delimiter
mc.Property1
delimiter
localized_time.astimezone(pytz.utc).strftime(fmt)
delimiter
numpy.float64(numpy.nan) is numpy.float64(numpy.nan)
delimiter
admin.autodiscover()
delimiter
sums = a[:-1, :-1] + a[1:, :-1] + a[:-1, 1:] + a[1:, 1:]
delimiter
B[:, :, (0)] = A
delimiter
datetime(1582, 10, 15) + timedelta(microseconds=uuid1().time // 10)
delimiter
print((i, lcm20 % i))
delimiter
p.terminate()
delimiter
hex(a)
delimiter
coords = np.stack(np.meshgrid(x, y, z), axis=-1)
delimiter
reader = csv.reader(infile)
delimiter
os.close(fd)
delimiter
ng.get_name()
delimiter
foo()
delimiter
df_2 = pd.DataFrame(np.random.randint(0, 2, (1000, 600)))
delimiter
print(df)
delimiter
plt.ion()
delimiter
[]
delimiter
p = multiprocessing.Process(target=start_child, args=(server_program,))
delimiter
prevprime(n, ith=1)
delimiter
credentials = storage.get()
delimiter
datetime.datetime(*structTime[:6])
delimiter
name = models.CharField(max_length=100)
delimiter
ax.add_collection(lc)
delimiter
seen = set()
delimiter
l.pop(i)
delimiter
plt.colorbar()
delimiter
collections.defaultdict(list)
delimiter
myObject.doStuf()
delimiter
httpd.serve_forever()
delimiter
result = []
delimiter
t = threading.Thread(target=batcher, args=(app.queue,))
delimiter
getattr(self.child, attr)(*args, **kw)
delimiter
print(remove_none(data))
delimiter
s.describe()
delimiter
field1 = models.CharField(max_length=10)
delimiter
print(df)
delimiter
img.show()
delimiter
np.random.seed(0)
delimiter
pairs.append((k, v))
delimiter
G.nodes()
delimiter
Intersection(self, other)
delimiter
float(m.group(1))
delimiter
cols = [x[0] for x in cursor.description]
delimiter
os.mkdir(blues_sounds_path)
delimiter
int(v)
delimiter
se2lib._current_browser()
delimiter
os.chdir(cwd)
delimiter
lst = [a, b, c, d, e, f, g]
delimiter
args = parser.parse_args()
delimiter
fig = plt.figure()
delimiter
q = multiprocessing.Queue()
delimiter
self._num_expectations += 1
delimiter
local_dt = utc_dt.replace(tzinfo=pytz.utc).astimezone(local_tz)
delimiter
min(t, key=lambda e: (e[1], -e[2]))
delimiter
int_arr = np.cumsum(np.cumsum(arr, axis=0), axis=1)
delimiter
luckynumbers.append(item)
delimiter
ax = fig.add_subplot(111)
delimiter
self.position = len(self.get())
delimiter
prev = np.zeros(src.shape[:2], np.uint8)
delimiter
heapq.heappop(pqueue)
delimiter
data = file_to_check.read()
delimiter
self.x = math.cos(a) * original_x - math.sin(a) * original_y
delimiter
count += 1
delimiter
method()
delimiter
res[k].append(j)
delimiter
queue = Queue.Queue()
delimiter
competitors.save()
delimiter
self.Bind(wx.EVT_SIZE, self._onSize)
delimiter
fig = plt.figure()
delimiter
push = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
delimiter
reader = csv.reader(f)
delimiter
m = [x for x in dictionary[i] if len(x) == l]
delimiter
ret.extend(flatten(v))
delimiter
ssh_client = paramiko.SSHClient()
delimiter
r = requests.get(url)
delimiter
name = models.CharField(max_length=50)
delimiter
server.shutdown()
delimiter
s = socket(AF_PACKET, SOCK_RAW)
delimiter
py > matrix[-1][2]
delimiter
app = Flask(__name__)
delimiter
lettered.append(subx)
delimiter
df1.letter.unique()
delimiter
axs[0].xaxis.set_major_formatter(x_fmt)
delimiter
mask = ~np.isnan(x)
delimiter
list(itertools.takewhile(lambda x: x != 412, even_numbers))
delimiter
df.Date = pd.to_datetime(df.Date)
delimiter
img.putdata(newData)
delimiter
dt = datetime.datetime(*parts[:6]) - datetime.timedelta(seconds=parts[-1])
delimiter
nx.draw(g1)
delimiter
print(df1)
delimiter
ispower(2, 1)
delimiter
n.close()
delimiter
m_to = ndb.KeyProperty(kind=UserModel)
delimiter
self.bmp = wx.BitmapFromImage(image)
delimiter
end = time.time()
delimiter
pickle.dump(d, filehandler)
delimiter
{name: input_zip.read(name) for name in input_zip.namelist()}
delimiter
register = template.Library()
delimiter
print(line.rstrip())
delimiter
assert type(arg) == datetime.date
delimiter
a, b, c, d
delimiter
msg = email.message_from_string(response_part[1])
delimiter
t.append(t[-1] + 1)
delimiter
print(now_time.strftime(fmt))
delimiter
p.map(lambda m: merger(*m), mergelist)
delimiter
distance_matrix_np = np.random.uniform(0, n ** 2, size=(n, n))
delimiter
obj.save()
delimiter
activation.prepare()
delimiter
f.restype = ctypes.POINTER(ctypes.c_int * 10)
delimiter
print(s)
delimiter
sleep(1)
delimiter
x[i], x[j] = x[j], x[i]
delimiter
alphaDict = dict.fromkeys(string.ascii_lowercase, 0)
delimiter
result_grey = cv2.cvtColor(source, cv2.COLOR_BGR2GRAY)
delimiter
binary_search([1, 5, 8, 10], 0)
delimiter
print((a, b))
delimiter
print(list(counter.keys()))
delimiter
AWS_IS_GZIPPED = True
delimiter
ax.plot(t, y1)
delimiter
exec(mycode)
delimiter
test = serial.Serial(baudrate=9600, timeout=0, writeTimeout=0)
delimiter
print(100 * (b - a) / a)
delimiter
atexit.register(savecounter)
delimiter
(17.5).hex()
delimiter
p.map_async(g, [slice(i, i + step) for i in range(stop_f, N, step)])
delimiter
hex(65)
delimiter
wb.Close()
delimiter
keep_mask = np.ones_like(data, dtype=bool)
delimiter
pyautogui.click(100, 100)
delimiter
a = random.randint(0, 20)
delimiter
list(fields_660.values())
delimiter
output = [x for x, y, label in L]
delimiter
self.__dict__.update(profile)
delimiter
log.addHandler(fh)
delimiter
writer.writerows(reader)
delimiter
print(iterator(lambda x: x / 4 + 12, 100, 5))
delimiter
m.hexdigest()
delimiter
CACHE_MIDDLEWARE_ANONYMOUS_ONLY = True
delimiter
dict_del
delimiter
data_p = data.ctypes.data_as(c_float_p)
delimiter
self.right = FibTree(n - 2)
delimiter
new_valss = [(x[0], x[1]) for x in new_vals]
delimiter
store.close()
delimiter
local_dt = datetime.fromtimestamp(timestamp)
delimiter
test.close()
delimiter
isinstance(v, property)
delimiter
out.extend(np.where(nonzero)[0][[0, -1]])
delimiter
main_loop.start()
delimiter
Session = scoped_session(sessionmaker(bind=engine))
delimiter
ax.figure.autofmt_xdate()
delimiter
df.loc[(df[0] == 0).idxmax(), 0] = 100
delimiter
plt.bar(bins, probs, 1.0 / num_bins)
delimiter
fig = plt.figure()
delimiter
test_df
delimiter
select.select([], [B], [])
delimiter
mylist2.sort(key=sort_order.index)
delimiter
plt.subplot(221)
delimiter
x[k]
delimiter
print(list(powerreps(X, Y)))
delimiter
self.holding = item
delimiter
self._writecheck(zinfo)
delimiter
signal.signal(signal.SIGALRM, original_handler)
delimiter
b = np.array([4, 5, 2])
delimiter
print(x)
delimiter
print(find_matches(d, item))
delimiter
c.setopt(pycurl.FOLLOWLOCATION, 1)
delimiter
_bar.__exit__()
delimiter
new_xs = [point[0] for point in sorted_points]
delimiter
ax.errorbar(theta, r, xerr=0.5, yerr=0.4)
delimiter
ds.addSample((-1, -1), (0,))
delimiter
p1.start()
delimiter
self.send_blob(blob_info)
delimiter
now = time.time()
delimiter
basis = [(lambda x, n=n: n * x) for n in [0, 1, 2]]
delimiter
stream.stop_stream()
delimiter
a[0:2] = b
delimiter
r.dot(y.reshape(1, -1))
delimiter
plt.plot(f, ps2)
delimiter
p.start()
delimiter
sigma = numpy.array([1.0, 1.0, 1.0, 1.0, 1.0, 1.0])
delimiter
ax2.contour(theta_centers, r_centers, H)
delimiter
opt = argparse.ArgumentParser()
delimiter
np.where(np.all(np.equal(w, b), 1) == True)[0]
delimiter
ob.stackoverflow(2)
delimiter
QNetworkAccessManager.createRequest(self, operation, request, data)
delimiter
print(repr(f.read()))
delimiter
window = gtk.Window(gtk.WINDOW_TOPLEVEL)
delimiter
mac = get_mac()
delimiter
d[l[0]] = d.get(l[0], {})
delimiter
y = math.sin(4 * 2 * math.pi * x / POINTS)
delimiter
seen = set()
delimiter
image = Image.open(cStringIO.StringIO(image_data))
delimiter
number_string = str(myinteger)
delimiter
res.set_value(index, previous_df_no)
delimiter
atexit.register(removeFile, path)
delimiter
node.set_next(node.get_data() + sum(int(i) for i in str(node)))
delimiter
conn.close()
delimiter
genotypes = models.TextField()
delimiter
F = np.random.rand(n, n)
delimiter
my_dict = json.loads(dict_str, object_pairs_hook=dict_clean)
delimiter
x + 1
delimiter
c = list(chain(*zip_longest(a, b[::-1])))
delimiter
libxxx.foo.argtypes = [ctypes.POINTER(ctypes.c_float), ctypes.c_size_t]
delimiter
date = parser.parse(x)
delimiter
my_buffer[:] = itertools.repeat(0, len(my_buffer))
delimiter
tmp()
delimiter
print(response.content)
delimiter
print(sess.run(loss, feed_dict={x: input_x, y_: input_y}))
delimiter
self.left
delimiter
pa_stream_peek(stream, ctypes.byref(null_ptr), ctypes.c_ulong(length))
delimiter
my_thread = QThread()
delimiter
self.clients.append(client)
delimiter
Blob.__init__(self, width, height, color, emphasis, highlight)
delimiter
t = linspace(0, 2 * np.pi, n, endpoint=False)
delimiter
print(svg.get_width(), svg.get_height())
delimiter
proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
delimiter
canvas.create_image(image.size[0] // 2, image.size[1] // 2, image=image_tk)
delimiter
count += 1
delimiter
list(ordered_dict.keys())[2]
delimiter
foo = np.random.rand(20000000).cumsum()
delimiter
print([v for v in map_words(sentence)])
delimiter
b = list(b)
delimiter
result = np.zeros(len(colors), dtype=np.int)
delimiter
text = soup.get_text()
delimiter
print(self.right.PreOrder())
delimiter
score = sum(i * w(i) for i in xx & yy) / sum(i * w(i) for i in x)
delimiter
os._exit(0)
delimiter
plt.plot(x, f(x))
delimiter
sum(pow(x1 - x2, 2) for x1, x2 in zip(x1s, x2s))
delimiter
result.update(request)
delimiter
current_chunk.append((token, tag))
delimiter
root.mainloop()
delimiter
event.Skip()
delimiter
a.a()
delimiter
gona[:, (0)]
delimiter
os.dup2(to_file.fileno(), stdout_fd)
delimiter
parser = argparse.ArgumentParser()
delimiter
ns[cls.__name__].mocked_method
delimiter
list(RNA_dictionary.values())
delimiter
df_7 = df.sample(n=7)
delimiter
print(strip_tags(html, invalid_tags))
delimiter
answer[c].append(b)
delimiter
self.__class__.x = x
delimiter
track2.play_forever()
delimiter
AV[j] = n
delimiter
listD.append(listB[num])
delimiter
a = [1, 1, 1, 1, 1]
delimiter
layout = QVBoxLayout(self)
delimiter
xticks(list(range(1, 40)), list(range(1, 40)))
delimiter
keyset.update(d[k])
delimiter
print(pivotdf.head())
delimiter
s = m.group(1)
delimiter
parser = argparse.ArgumentParser()
delimiter
splitter.findall(s)
delimiter
assert rr.is_preview == False
delimiter
l.append(id(arg))
delimiter
conn, addr = s.accept()
delimiter
print(foo[(np.newaxis), :])
delimiter
mean_matrix = pd.concat(dfs, axis=1).T
delimiter
df = pandas.DataFrame(x, columns=column_labels, index=row_labels)
delimiter
print(oct_num == 511)
delimiter
y.close()
delimiter
process.append(multiprocessing.Process(target=wrapper, args=argtuple))
delimiter
png_recovered = base64.decodestring(png_b64text)
delimiter
hanoi(n - 1, aux, start, target)
delimiter
excel.Worksheets(2).Activate()
delimiter
zip_file = zipfile.ZipFile(content)
delimiter
zip.save()
delimiter
list.__setitem__(self, key, value)
delimiter
iterator(lambda x: x / 4 + 12, 100, 5)
delimiter
book = open_workbook(file_path)
delimiter
print(Bar().get_counter())
delimiter
bins.setdefault(key(value, step), []).append(value)
delimiter
pid = os.fork()
delimiter
mybins = np.linspace(datamin, datamax, numbins)
delimiter
foo(C(), B())
delimiter
fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)
delimiter
result = [str[sp[0]:sp[1] + 1] for sp in split_points]
delimiter
time.sleep(2)
delimiter
plt.hold(True)
delimiter
sol_np = np.array(list(range(n - 1, -1, -1)))
delimiter
[0, 0, 7, 8, 0, 0, 0, 0],
delimiter
X = numpy.zeros([10, 4])
delimiter
lat, lng = gmaps.address_to_latlng(address)
delimiter
print(linecache.getline(file, line))
delimiter
h = hog.compute(im)
delimiter
print(self.AsyncResult(self.request.id).state)
delimiter
groups.append(list(map(itemgetter(1), g)))
delimiter
values = [0, 1, 2]
delimiter
pyplot.gcf().autofmt_xdate()
delimiter
q = session.query(col).order_by(col)
delimiter
zipfile.ZipFile.__init__(self, *args, **kwargs)
delimiter
bin_data = f.read()
delimiter
list(desired_cols)
delimiter
data = np.array(data)
delimiter
fig = plt.figure()
delimiter
sheet = book.sheet_by_index(0)
delimiter
event.Skip()
delimiter
cursor.execute(query)
delimiter
dirname, filename = os.path.split(os.path.abspath(__file__))
delimiter
session.add(u2)
delimiter
ip.release()
delimiter
hourlydf = pd.DataFrame(hourlydata)
delimiter
word = word.strip()
delimiter
[[i[o] for ix, i in enumerate(a) if l[ix] > o] for o in range(max(l))]
delimiter
task.delay(arg1, arg2).get()
delimiter
seen.add(n)
delimiter
conf95 = np.where(cxy > gamma95)
delimiter
(seq[pos:pos + size] for pos in range(0, len(seq), size))
delimiter
self._rooms = {}
delimiter
module = sys.modules[module_name]
delimiter
thread.start()
delimiter
print((key, list(group)))
delimiter
login_button.click()
delimiter
b = np.indices(a.shape)
delimiter
print(video_url)
delimiter
os.chdir(our_home_dir)
delimiter
obj.method()
delimiter
plt.show()
delimiter
sys.__excepthook__(exc_type, exc_value, exc_tb)
delimiter
np.argmin(A1[1])
delimiter
l.append(b)
delimiter
list(group_660.keys())
delimiter
1, 1, 0.526015021, 0.581905971
delimiter
CA
delimiter
self.initUI()
delimiter
sys.stdout = old_stdout
delimiter
myCopy = deepcopy(myDict)
delimiter
flist.append(funcC(i))
delimiter
stats.print_stats()
delimiter
main()
delimiter
particles[i].fitness = fitness
delimiter
rs = (grequests.get(u, headers=header) for u in urls)
delimiter
context = RequestContext(request)
delimiter
method = cv2.TM_SQDIFF
delimiter
st = os.stat(filename)
delimiter
self._server.handle_request()
delimiter
makesomenoise()
delimiter
client.start(container)
delimiter
print(a)
delimiter
elem.send_keys(Keys.PAGE_DOWN)
delimiter
resource.setrlimit(rsrc, (1024, hard))
delimiter
a_s = os.path.abspath(sys.argv[0])
delimiter
False
delimiter
data = dict()
delimiter
cmdp = Popen(cmdline, shell=True, stdout=PIPE, stderr=PIPE)
delimiter
A = np.asarray(A[indices])
delimiter
print(is_int_value(x_))
delimiter
original_handler = signal.signal(signal.SIGALRM, timeout_handler)
delimiter
final_queue = Queue()
delimiter
speedresults = [x for x in sorted(results, key=lambda x: x[1])]
delimiter
numbers_str = line.split()
delimiter
myShelve.close()
delimiter
pd.concat(frames, keys=user_ids)
delimiter
total = model.fee_total(model)
delimiter
x.dot(x) + sin(np.linalg.norm(x) * np.pi)
delimiter
result.extend(flatten(el))
delimiter
wx.FileDropTarget.__init__(self)
delimiter
right.put(n[0::2])
delimiter
oddSquares = [(number ** 2) for number in myListOfNumbers if number % 2 == 1]
delimiter
print(reg_m(y, x).summary())
delimiter
position[-1] += 1
delimiter
socket.inet_aton(address)
delimiter
d[DateK] = val
delimiter
ehandle.close()
delimiter
a.salutation(*arg, **kw)
delimiter
pktdump.write(pkt)
delimiter
raise ValueError
delimiter
result[np.arange(len(x)), inv] = 1
delimiter
df_num = df.select_dtypes(exclude=[np.number])
delimiter
subplot1.plot(x, y)
delimiter
exit(0)
delimiter
a0 * alpha ** np.arange(n).reshape(-1, 1)
delimiter
df_1 = pd.DataFrame(np.random.randint(0, 2, (1000, 600)))
delimiter
df
delimiter
xi = np.linspace(-1, 1, ngrid)
delimiter
str(self.name) == str(other.name)
delimiter
node_depth_first_iter(self)
delimiter
HttpResponseBadRequest()
delimiter
head[:, (0)] = 16
delimiter
f_out.close()
delimiter
ftp.dir(parse)
delimiter
DF + DF.shift()
delimiter
sdat = tuple(map(repr, dat))
delimiter
df = pd.read_csv(input_file, header=0)
delimiter
stdout.close()
delimiter
self.update(request, *args, **kwargs)
delimiter
pool = multiprocessing.Pool()
delimiter
result = client.service.addPerson(person)
delimiter
self.store.close()
delimiter
data = db.BlobProperty()
delimiter
arr2.extend(np.split(z, indr, axis=0))
delimiter
logger = logging.getLogger()
delimiter
count = ((listScore[:, (0)] == 2) & (listScore[:, (1)] == 0)).sum()
delimiter
pnts.append((i[1], i[2]))
delimiter
SYS_PATH = os.path.dirname(BASE_DIR)
delimiter
data = request.body.readline()
delimiter
print(((n0, n1), (d0, d1)))
delimiter
df.loc[0] = np.nan
delimiter
True
delimiter
K = [1, 2, 2, 4, 5, 5, 6, 10]
delimiter
queue = Queue.Queue()
delimiter
main_loop = tornado.ioloop.IOLoop.instance()
delimiter
type(instance)
delimiter
csv1.close()
delimiter
globallock.release()
delimiter
x = linspace(0, 1, 1000)
delimiter
print(response.authority)
delimiter
t.start()
delimiter
dc.DrawLine(x, y, x + self.gridsize, y)
delimiter
self.previewImage.setPixmap(pixmap)
delimiter
print(x_str)
delimiter
count += 1
delimiter
G.add_nodes_from(L1)
delimiter
a.__dict__
delimiter
ax = fig.add_subplot(111, rasterized=True)
delimiter
loop.close()
delimiter
start = DT.datetime(1970, 1, 1),
delimiter
sum(len(l) for l in self.src)
delimiter
timeit(stmt2, setup2, number=100)
delimiter
print(dict_merge(d1, d2))
delimiter
counts = [(i, year_month_pairs.count(i)) for i in unique]
delimiter
df = df.astype(int).astype(str)
delimiter
start()
delimiter
f.write(fmt.format(*row))
delimiter
logdet = add.reduce(absd, axis=-1)
delimiter
root.mainloop()
delimiter
self.server.serve_forever()
delimiter
data = file_object.read(chunk_size)
delimiter
d.show()
delimiter
plot.show()
delimiter
urllib.parse.urlencode(params)
delimiter
wn.lch_similarity(dog, car)
delimiter
a[i].append(i + j)
delimiter
b = x.read(1)
delimiter
pool = mp.Pool()
delimiter
utc_dt = datetime.utcfromtimestamp(posix_timestamp).replace(tzinfo=pytz.utc)
delimiter
layer2.append(j)
delimiter
self.assertEqual(mock_boo_obj.d.call_count, 1)
delimiter
show()
delimiter
print(new_filename)
delimiter
plt.ion()
delimiter
cur.execute(qry)
delimiter
ax1 = ax1 = fig.add_subplot(1, 2, 1)
delimiter
df = pd.DataFrame(values, index=index)
delimiter
[ii, jj] = np.meshgrid(np.arange(5), np.arange(4))
delimiter
print(row)
delimiter
sample = np.random.lognormal(mu, sigma, size=1000000)
delimiter
sock.send(self.postdata)
delimiter
e.args[0]
delimiter
count = 0
delimiter
rows = np.arange(N)
delimiter
alphashape = [s for s in complex if s.data[0] <= 0.5]
delimiter
t2 = threading.Thread(target=task2)
delimiter
emailer = mailer.Mailer(smtphost.example.com)
delimiter
G = nx.Graph()
delimiter
data = np.asarray(df)
delimiter
print(k, v)
delimiter
axr.yaxis.tick_right()
delimiter
fig, ax = plt.subplots()
delimiter
array = np.random.randint(500, size=(4, 2000))
delimiter
serializer_class = MyModelSerializer
delimiter
filter_set = set(filter)
delimiter
f = lambda x: np.cos(x) - x
delimiter
session.close()
delimiter
df1.reindex(date_range2)
delimiter
current_dir.append(args[0])
delimiter
r[~np.all(r == 0, axis=1)]
delimiter
self.addr = addr
delimiter
curses.start_color()
delimiter
port = int(sys.argv[1])
delimiter
deque(pool.imap_unordered(f, itertools.product(pairs, repeat=16)), 0)
delimiter
self.x.configure(state=NORMAL)
delimiter
book = models.ForeignKey(Book)
delimiter
self.setLayout(layout)
delimiter
app = Flask(__name__)
delimiter
Py_DECREF(pname)
delimiter
zip(range(len(l) - 1, -1, -1), l)
delimiter
self.index += 1
delimiter
twos = 2 ** np.arange(10)
delimiter
model = pm.modelcontext(model)
delimiter
request.finish()
delimiter
sum(topo[x] * topo[x + 1] for x in range(len(topo) - 1))
delimiter
text = f.read()
delimiter
a_test.method_one()
delimiter
response
delimiter
p.kill()
delimiter
process.stdin.close()
delimiter
fruits = ast.literal_eval(fruits)
delimiter
datetime.datetime = patched_datetime
delimiter
print(line)
delimiter
time.sleep(60)
delimiter
__import__(mname)
delimiter
sleep()
delimiter
plt.hist2d(x, y, bins=(50, 50))
delimiter
plot_window.control.resize(400, 400)
delimiter
cursor = connection.cursor()
delimiter
new_user = User.objects.create_user(args, args, args, etc)
delimiter
B = np.zeros_like(A)
delimiter
data = [[] for col in cols]
delimiter
escapesequence = matchobj.group(0)
delimiter
figure()
delimiter
l.append(x)
delimiter
temp = numpy.zeros(len(x))
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
pb = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, False, 8, sz[0], sz[1])
delimiter
f()
delimiter
y = np.hsplit(x, temp_array)
delimiter
a[a == 0] = np.nan
delimiter
ax1.set_ylim([0, 1])
delimiter
x = [p[0] for p in points]
delimiter
f.close()
delimiter
plt.figure()
delimiter
[next(it) for it in islice(cycle((iter(a), reversed(a))), len(a))]
delimiter
next((c, s.count(c)) for c in s if s.count(c) > 1)
delimiter
next(self.it)
delimiter
print(x1, x2)
delimiter
print(repr(x)[1:-1])
delimiter
unsearched.put(newdir)
delimiter
sum([True, False, False, True, False])
delimiter
RAVEN_CONFIG = {}
delimiter
a = [[0, 1], [0, 4], [1, 0], [1, 4], [4, 0], [4, 1]]
delimiter
x = [[] for _ in range(n)]
delimiter
smtpserver.send_message(msg)
delimiter
d = dict.fromkeys(keys)
delimiter
handler(request, *args, **kwargs)
delimiter
print(sess.run(result))
delimiter
fig = pyplot.figure()
delimiter
values = [0, 1, 2]
delimiter
plt.plot(y)
delimiter
w.write(f, wordpx)
delimiter
self.add(elem)
delimiter
turtle = turtle.Turtle()
delimiter
fmt.Println(zip(a, b))
delimiter
unique_word_count = len(unique_words)
delimiter
result = str(soup)
delimiter
application_path = os.path.dirname(__file__)
delimiter
font = fontforge.font()
delimiter
print(mm[:])
delimiter
self.__message = message
delimiter
handles, labels = axes.get_legend_handles_labels()
delimiter
A()
delimiter
sys.stdin, sys.stderr, sys.stdout = self.saved
delimiter
list(dct.keys())
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
f = cStringIO.StringIO()
delimiter
widget.show()
delimiter
self.validate_unique()
delimiter
raw_img = urllib.request.urlopen(img).read()
delimiter
fig.text(0.1, 0.1, txt)
delimiter
file.close()
delimiter
sys.exit(1)
delimiter
zip(lst1, lst2)
delimiter
p = multiprocessing.Pool(processes=10)
delimiter
df = ds.to_dataframe()
delimiter
coupled_idx = enumerate(zip(list1, list2))
delimiter
start = time.time()
delimiter
soup = BeautifulSoup(html)
delimiter
fn(args[0])
delimiter
plt.setp(plt.gca(), xticklabels=[])
delimiter
body = part.get_payload(decode=True)
delimiter
pylab.show()
delimiter
platform.platform()
delimiter
self.window.set_type_hint(gtk.gdk.WINDOW_TYPE_HINT_DOCK)
delimiter
nsmallest(4, s, key=len)
delimiter
Book.query
delimiter
[dict(l) for l in product(*to_product)]
delimiter
self.collector
delimiter
yaml.Loader.__init__(self, *args, **kwargs)
delimiter
print(df.groupby(df.A // 2).A.nlargest(2))
delimiter
g.set_xticklabels(rotation=45)
delimiter
print(repr(ba))
delimiter
print(L)
delimiter
np.dstack([vec_data_mag, vec_data_angl, vec_data_avg])
delimiter
fp.close()
delimiter
executor = concurrent.futures.ThreadPoolExecutor(max_workers=5)
delimiter
func(d, d1, d2)
delimiter
browser = webdriver.WebDriver(firefox_profile=profile)
delimiter
lambda x: a * x + b
delimiter
s.query(Demo).get(1).value
delimiter
repr(x)
delimiter
w.female.replace(to_replace=dict(female=1, male=0), inplace=True)
delimiter
root = ET.fromstring(s)
delimiter
print(aList)
delimiter
input_str = input_str.strip().lower()
delimiter
self.daemon = True
delimiter
content = models.TextField(blank=True)
delimiter
print(min(dates[ind], dates[ind - 1], key=lambda x: abs(x - date)))
delimiter
UnsortableList(OrderedDict.items(self, *args, **kwargs))
delimiter
[lst[i:j] for i, j in zip(sec, sec[1:])]
delimiter
x.argmin(axis=0)
delimiter
fig.colorbar(lines)
delimiter
raise ValueError(msg)
delimiter
categories = Category.objects.all()
delimiter
res.set_value(index, 0)
delimiter
data = self._file.read()
delimiter
z = density([x, y])
delimiter
exec(file.read())
delimiter
print([arr2[i][-1] for i in range(len(arr2))])
delimiter
menu = Menu(root)
delimiter
canvas.create_window(0, 0, anchor=NW, window=frame)
delimiter
date += datetime.timedelta(1)
delimiter
p = multiprocessing.Pool()
delimiter
csv_writer.writerow([str(random.random()) for i in range(cols)])
delimiter
keys.insert(a)
delimiter
print(repr(cell_value))
delimiter
print(x)
delimiter
print(a)
delimiter
print(df)
delimiter
fig.tight_layout(rect=[0, 0, 0.9, 1])
delimiter
size = np.bincount(label.ravel())
delimiter
self.fields.pop(field_name)
delimiter
pformat(obj)
delimiter
shutil.copyfileobj(r.raw, f)
delimiter
print(print_path(root_node))
delimiter
app.logger.setLevel(logging.INFO)
delimiter
child_process.terminate()
delimiter
data = np.array(data)
delimiter
div(numericoperand(1), operand)
delimiter
[list(i[1]) for i in it.groupby(l, key=key)]
delimiter
sum(y > el for el in x)
delimiter
np.array(l) ** np.arange(1, len(l) + 1)
delimiter
shout.stop()
delimiter
args = parser.parse_args()
delimiter
ds.addSample((1, -1), (1,))
delimiter
print(pat.findall(mystr))
delimiter
all(nested_equal(x, y) for x, y in zip(a, b))
delimiter
rect.set_height(h)
delimiter
help(f_with_good_sig)
delimiter
a = tuple(a)
delimiter
counts = collections.Counter(words)
delimiter
inf.close()
delimiter
dist2 = (x[0:-2] - x[2:]) ** 2 + (y[0:-2] - y[2:]) ** 2
delimiter
(close.where(starts).ffill() * signals).fillna(0)
delimiter
cmap = plt.cm.jet
delimiter
y = np.array([True, False, True, False])
delimiter
ax.imshow(X, cmap=cm.gray)
delimiter
c = b.reverse()
delimiter
datetime.date.fromtimestamp(stamp)
delimiter
fig = plt.figure()
delimiter
arg
delimiter
c = dict([(col, j) for j, col in enumerate(df.columns)])
delimiter
lst.append(datum)
delimiter
sortedusers = [userd.get(o) for o in order]
delimiter
x = np.linspace(0, 10, 100)
delimiter
fname.close()
delimiter
self.mygraph.set_xydata(t, self.ydata)
delimiter
l.sort()
delimiter
dict(data=rv)
delimiter
df.head()
delimiter
np.random.seed(2)
delimiter
(np.array(old_set) + np.array(new_set)) / 2
delimiter
func()
delimiter
False
delimiter
[field_value(field.field, item) for item in value]
delimiter
logger.setLevel(logging.INFO)
delimiter
plot_window.control.show()
delimiter
prior = np.exp(-np.dot(theta, betas))
delimiter
assert np.allclose(xRecovered, x)
delimiter
tree.add(str(result[0]))
delimiter
rect.set_height(h)
delimiter
tens, ones = divmod(number, 10)
delimiter
self.assertEqual(self.nu.test_marshal(), self.nu.FORMAT % self.nums)
delimiter
print(html_to_text(n))
delimiter
opener = urllib.request.build_opener(handler)
delimiter
print(string)
delimiter
str(b)
delimiter
i = random.choice(list(range(len(l))))
delimiter
msg = MIMEMultipart()
delimiter
fig, ax = plt.subplots(1, 1)
delimiter
False
delimiter
float(x)
delimiter
plt.show()
delimiter
page = opener.open(url)
delimiter
clips.PrintFacts()
delimiter
os.remove(logfilepipe)
delimiter
items.append((last_seen_date, headline, link))
delimiter
date_to_datetime(d)
delimiter
screen.refresh()
delimiter
self.func.__repr__()
delimiter
l.sort()
delimiter
plt.subplot(121)
delimiter
time.sleep(4)
delimiter
indices = defaultdict(lambda : defaultdict(set))
delimiter
xml_string = urllib.request.urlopen(url_link).read()
delimiter
self.children = []
delimiter
np.sin(x)
delimiter
resultlist.append(item)
delimiter
occurences = np.where(a == a.max())
delimiter
print(so.lower())
delimiter
collections.defaultdict.__init__(self, list)
delimiter
d = dict(p1=1, p2=2)
delimiter
ax.yaxis.set_major_formatter(y_format)
delimiter
sub_dict = {}
delimiter
activity.approved = True
delimiter
random.shuffle(randomRange)
delimiter
g.__dict__
delimiter
ax.set_xticks(data2[ndays[1], 0])
delimiter
print(word[:j] + word[j + 1:])
delimiter
cursor = connection.cursor()
delimiter
CV_Assert(img.depth() != sizeof(uchar))
delimiter
print(s)
delimiter
counts.most_common(len(counts))
delimiter
opener = urllib.request.build_opener(NoRedirectHandler())
delimiter
hash.update(str(time.time()))
delimiter
t.to_datetime()
delimiter
doc.Close()
delimiter
tuple(sum(base_lists, []))
delimiter
map(poison, L)
delimiter
_empty(*args, **kwargs)
delimiter
event.categories.count()
delimiter
test(a)
delimiter
value.split(char)[index]
delimiter
func()
delimiter
p + geom_histogram(binwidth=1)
delimiter
mvnorm.pdf(x)
delimiter
prices = numpy.arange(10000.0, 50000.0, 10000.0)
delimiter
s[np.searchsorted(b, a, sorter=s)]
delimiter
n = int(input())
delimiter
df
delimiter
(self.name, self.location) == (other.name, other.location)
delimiter
self.stdout.write(output)
delimiter
queryset = Foo.objects.all()
delimiter
do_something()
delimiter
obj.delete()
delimiter
my_data = np.array([json_string, json_string, json_string])
delimiter
mos_x, mos_y = pygame.mouse.get_pos()
delimiter
run_bash(submit_cmd)
delimiter
df[cols].apply(lambda values: sum([(v ** 2) for v in values]), axis=1)
delimiter
self.view.resizeColumnsToContents()
delimiter
print(df.dtypes)
delimiter
soup = BeautifulSoup(page)
delimiter
net.addConnection(FullConnection(bias, hidden1))
delimiter
doctest.testmod()
delimiter
Y = np.dstack([X] * 4096)
delimiter
df[k] = pd.eval(v)
delimiter
b[not_index.reshape(-1, 1), not_index] = a
delimiter
output = p2.communicate()[0]
delimiter
p.terminate()
delimiter
db.commit()
delimiter
self.next_chunk = self.next_chunk + next(self.it)
delimiter
random.shuffle(control)
delimiter
len(parser.parse_known_args(option.split())[1]) != 2
delimiter
c[firstname] += 1
delimiter
array[idx]
delimiter
image = Image.open(sys.argv[1])
delimiter
new_data = next(tail)
delimiter
o.many2many.add(ModelA.objects.get(id=1))
delimiter
syslog.setFormatter(formatter)
delimiter
(4,) + (7,) * 12
delimiter
dict((k, to_dict(v)) for k, v in list(d.items()))
delimiter
signal.signal(signal.SIGALRM, _handle_timeout)
delimiter
text = f.read()
delimiter
words = (line.strip() for line in f_in)
delimiter
print(m.result.group(1))
delimiter
f(*arg_tuple)
delimiter
days.setdefault(dt.toordinal(), []).append(dt)
delimiter
result.append((x[0], x[1], step))
delimiter
grouped.first()
delimiter
my_schema = json.loads(my_text_file)
delimiter
print(network)
delimiter
[0, 0, 5, 6, 0, 0, 0, 0],
delimiter
search_response = urllib.request.urlopen(url)
delimiter
r = csv.reader(v)
delimiter
my_func.foo = new_foo
delimiter
handle.set_visible(True)
delimiter
print(len(headers))
delimiter
datetime.datetime.fromtimestamp(2047570047)
delimiter
[1.0, 0.0, 0.0, 0.0, 0.0, 1.0],
delimiter
g = file(path_to_bigfile)
delimiter
full_real_path = os.path.realpath(sys.argv[0])
delimiter
d = {e: (0) for e in s}
delimiter
mpp.start()
delimiter
app = QtGui.QApplication([])
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
original(list(a), list(b))
delimiter
reader = csv.reader(f)
delimiter
sha = hashlib.sha256(pub_key_der).hexdigest()
delimiter
print([mean(cluster) for cluster in cl.getlevel(1.0)])
delimiter
z1[np.where(z1 == input_array.shape[2])] = z0.max()
delimiter
data = pd.DataFrame(raw_data)
delimiter
z = self.im.get_array()[int(y), int(x)]
delimiter
set(second_list).difference(dic)
delimiter
print(os.readlink(__file__))
delimiter
bigList2.append(bigList2.pop(0))
delimiter
heatmap, xedges, yedges = np.histogram2d(x, y, bins=50)
delimiter
platform.version()
delimiter
self.pp.transport.write(data)
delimiter
self.top.destroy()
delimiter
gbl[moduleToImport] = importlib.import_module(moduleToImport)
delimiter
axis.set_minor_locator(mpl.ticker.AutoMinorLocator())
delimiter
date -= timedelta(days=7)
delimiter
g(x=1, y=2)
delimiter
self.cells.append(Cell(self, i))
delimiter
firstvals = y[0] - np.abs(y[1:half_window + 1][::-1] - y[0])
delimiter
print(len(tweets))
delimiter
[1.0, 0.0]
delimiter
clock = pygame.time.Clock()
delimiter
print(np.allclose(res1, res2))
delimiter
x[0] += 1
delimiter
df = pd.DataFrame()
delimiter
parser = argparse.ArgumentParser()
delimiter
remote_file.write(in_string)
delimiter
rank_a = dict((k, v) for v, k in enumerate(a))
delimiter
email_body = data[0][1]
delimiter
field2 = models.CharField(max_length=10)
delimiter
a[indices]
delimiter
new_dict = old_dict.copy()
delimiter
soup = BeautifulSoup(response.get_data())
delimiter
arr = np.linspace(0, 50, 100).reshape((10, 10))
delimiter
seq_type().join(filter(seq_type.isdigit, seq))
delimiter
print(nums.count(1))
delimiter
loudness_of_chunks.append(chunk.rms)
delimiter
results = cursor.fetchone()
delimiter
line_offset.append(offset)
delimiter
match.group(1), match.start(1), match.end(1)
delimiter
self.transport.loseConnection()
delimiter
plt.show()
delimiter
Y += np.random.normal(scale=0.1, size=Y.shape)
delimiter
names.append(codegen.to_source(node))
delimiter
lines = ax.get_lines() + ax.right_ax.get_lines()
delimiter
pl.xticks(X, list(d.keys()))
delimiter
win.setCoords(0.0, 0.0, 10.0, 10.0)
delimiter
type.__new__(cls, name, bases, dct)
delimiter
plt.show()
delimiter
x = np.linspace(0, 2 * np.pi, N)
delimiter
instance = forms.ModelForm.save(self, False)
delimiter
addch(ch)
delimiter
print(min(map(min, Q)))
delimiter
path.reverse()
delimiter
root.mainloop()
delimiter
process(line)
delimiter
print(student.name)
delimiter
a / n * (x / n) ** (a - 1) * np.exp(-(x / n) ** a)
delimiter
phases = numpy.random.uniform(0, 1, 10)
delimiter
timestamp = int(nanoseconds / 100) + 122192928000000000
delimiter
array_pointer = ctypes.cast(Data, ctypes.POINTER(ArrayType))
delimiter
df
delimiter
db_field.formfield(**kwargs)
delimiter
event = Event.objects.get_for_object(self)[0]
delimiter
print(str(correctDate))
delimiter
fig, ax = plt.subplots(1, 1)
delimiter
model.sims(replace=True)
delimiter
s.quit()
delimiter
fd.write(hash_string)
delimiter
[job1]
delimiter
old = f.read()
delimiter
math.acos(0)
delimiter
df.apply(lambda x: x.set1.union(x.set2), axis=1)
delimiter
print(str(most_common))
delimiter
set.union(*list(obj.values()))
delimiter
numpy.vstack((a, b)).T
delimiter
z1.close()
delimiter
appstats_DATASTORE_DETAILS = False
delimiter
lg = numpy.log(pdf)
delimiter
(x + pad_by * (max_len - length) for x, length in zip(lst, lengths))
delimiter
user = query(User).filter_by(id=1).one()
delimiter
response = urllib.request.urlopen(URL, parameter)
delimiter
my_field.my_filter = True
delimiter
X.add_nodes_from(list(pos.keys()))
delimiter
key_list.append(td.text)
delimiter
[2, 2, 2]
delimiter
req.get_remote_host(apache.REMOTE_NOLOOKUP)
delimiter
result.delete()
delimiter
data = stream.read()
delimiter
figure(1)
delimiter
l = sc.recv(1024)
delimiter
Arr1 = Arr1.reshape((100, 10, 1))
delimiter
list1.append(dict1.get(key))
delimiter
os.path.splitext(fname)[0][8:]
delimiter
json.loads(a)
delimiter
d = {}
delimiter
p.join()
delimiter
do_something()
delimiter
df
delimiter
id = db.Column(db.Integer, primary_key=True)
delimiter
self.Bind(wx.EVT_BUTTON, self.onButton, btn)
delimiter
self.value[0](*args, **kwargs)
delimiter
roi_gray = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)
delimiter
words = t.split()
delimiter
print(df[years_month])
delimiter
Base.metadata.drop_all(engine)
delimiter
a = x[0]
delimiter
self.setAttribute(Qt.WA_TranslucentBackground)
delimiter
User = get_user_model()
delimiter
Image.fromarray(np.asarray(image)).show()
delimiter
len(syllables)
delimiter
a = C()
delimiter
logout_user()
delimiter
arbiter.start()
delimiter
frame.grid_rowconfigure(2, weight=1)
delimiter
self.items.append(item)
delimiter
cursor = connect.cursor()
delimiter
cron2.every_reboot()
delimiter
EmailAddress = db.Column(db.String(255))
delimiter
y = np.sin(50.0 * 2.0 * np.pi * x) + 0.5 * np.sin(80.0 * 2.0 * np.pi * x)
delimiter
screen = curses.initscr()
delimiter
li = [-1, -1, 2, 2, -1, 1, 1, 1, 1, 1, -1, -1]
delimiter
func.current_date(type_=types.Date, bind=engine1)
delimiter
i += 1
delimiter
deletenew_image, image
delimiter
(self - _EPOCH).total_seconds()
delimiter
im = Image.open(filename)
delimiter
title = models.CharField(max_length=50)
delimiter
sel = Selector(response)
delimiter
sys.exit(0)
delimiter
cur.executemany(query, values)
delimiter
sequence, best[-1]
delimiter
application = django.core.handlers.wsgi.WSGIHandler()
delimiter
myTuple = tuple([int(source), int(target)])
delimiter
flt = float(random.randint(0, 100))
delimiter
largest = [(key, -value) for value, key in largest]
delimiter
ij = np.vstack((i, j))
delimiter
sftp.close()
delimiter
trel
delimiter
keys.insert(b)
delimiter
lineNum += 1
delimiter
x = tf.constant([0.2, 0.7, 1.2, 1.7])
delimiter
self.table.itemClicked.connect(self.handleItemClicked)
delimiter
[False, False, False, False, False],
delimiter
Yf[0]
delimiter
ax.set_aspect(1)
delimiter
os._exit(255)
delimiter
fig, ax
delimiter
srv.serve_forever()
delimiter
scf_1104442824510(987)
delimiter
txn.commit()
delimiter
tool.stderr.close()
delimiter
str(1)
delimiter
ndtri(0.95)
delimiter
driver = webdriver.Firefox(firefox_profile=firefox_profile)
delimiter
hello()
delimiter
e = cv2.cvtColor(c, cv2.COLOR_BGR2RGB)
delimiter
listOfA, listOfB = [], []
delimiter
bee = ZigBee(ser)
delimiter
np.intersect1d(av, bv).view(a.dtype).reshape(-1, a.shape[1])
delimiter
pagehandle = urllib.request.urlopen(theurl)
delimiter
print(repr(track))
delimiter
mailserver.starttls()
delimiter
print(get_selected_text_from_front_window())
delimiter
chars.extend([digit, symbol])
delimiter
thirdList.append(listName.index(y))
delimiter
print(args.cmd)
delimiter
entity2_id = Column(Integer, primary_key=True)
delimiter
time.tzset()
delimiter
1.0 / (1.0 + np.exp(-z))
delimiter
a[0].shape
delimiter
array([46]), array([62]), array([61])
delimiter
cgi.test()
delimiter
host_data = list()
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
uuid.uuid1().hex
delimiter
my_list1 = [i[1] for i in my_list]
delimiter
x[i], x[j] = x[j], x[i]
delimiter
results = [output.get() for p in processes]
delimiter
Tee = tee([], 1)[0].__class__
delimiter
resp = conn.getresponse()
delimiter
Chainable(list(self.method(self.data, *args, **kwargs)))
delimiter
response.read()
delimiter
time.sleep(1)
delimiter
root = Tk()
delimiter
Alias / media / opt / django / site1 / media / statics
delimiter
a = pd.Series([1, 4, 5, 7, 8], index=index)
delimiter
print(fib(n))
delimiter
s.upper()
delimiter
-cr.fetchall()
delimiter
plt.show()
delimiter
editor.setCurrentIndex(int(index.model().data(index)))
delimiter
y = y1 + (y2 - y1) * t
delimiter
_.group(1)
delimiter
print(r.text)
delimiter
df.ix[0] - df.ix[1]
delimiter
wx.Frame.__init__(self, *args, **kwargs)
delimiter
paired = [list(t) for t in chain(zip(chain_a, chain_b), zip(C_iter, D_iter))]
delimiter
session._new = {}
delimiter
plt.show()
delimiter
ax.lines.remove(wr())
delimiter
f.close()
delimiter
start = datetime.datetime.now()
delimiter
print(path)
delimiter
old = sys.stdout
delimiter
request = urllib.request.Request(url)
delimiter
rr, tt = zip(*[(i * 10, i * 12) for i in range(4)])
delimiter
max_y = np.log10(max(y))
delimiter
process = [do_with_line(line) for line in f]
delimiter
print(a, b)
delimiter
funcList.append(lambda m=m: callback(m))
delimiter
ax.xaxis.set_major_formatter(plt.FixedFormatter(names))
delimiter
self.csock.setblocking(False)
delimiter
df
delimiter
plt.contourf(data, cmap=cmap, levels=[1, 4, 8, 10])
delimiter
{{file}}
delimiter
dict(re.findall(pattern, val))
delimiter
gca().add_patch(rect)
delimiter
__all__.append(name)
delimiter
self.constant
delimiter
mydict[i] += 1
delimiter
path = os.path.join(settings.MEDIA_ROOT, dir_name)
delimiter
print(tuple(choice(choices) for _ in range(4)))
delimiter
Results.objects.all()
delimiter
json_object = json.loads(json_string)
delimiter
codeOut.close()
delimiter
execlist[i][2] = myx
delimiter
frame.Show()
delimiter
ax.plot(x[i * 6:(i + 1) * 6], y[i * 6:(i + 1) * 6])
delimiter
new_queryset
delimiter
reset = lambda df: df.reset_index(drop=True)
delimiter
f = cv2.cvtColor(c, cv2.COLOR_RGB2BGR)
delimiter
self.right.append(v)
delimiter
result.append([])
delimiter
b[-1][1] = max(b[-1][1], end)
delimiter
foo[0][0] is moo
delimiter
indices = np.argpartition(arr.flatten(), -2)[-2:]
delimiter
ndimage.map_coordinates(data, [zi, yi, xi])
delimiter
k = [str(x) for x in list]
delimiter
cache = [next(it) for i in range(n)]
delimiter
contact_form = ContactForm(request.POST, instance=my_contact)
delimiter
u.save()
delimiter
sys.path = sys.path[:]
delimiter
node0.start()
delimiter
c = db.cursor()
delimiter
tuple((m, m) for m in MONTHS)
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
view.sel().clear()
delimiter
df.loc[:, :] = stacked.unstack()
delimiter
print(line)
delimiter
nx.draw_networkx_labels(G, pos, labels=node_labels)
delimiter
pylab.draw()
delimiter
assert list(itersplit(sample1)) == sample1.split()
delimiter
func()
delimiter
grid.flat[ind] = 100
delimiter
curs.close()
delimiter
c.update({k.upper(): v})
delimiter
displayname = firstname + lastname or username
delimiter
print((x + y)(1))
delimiter
print((id(n), id(n1), id(n2)))
delimiter
now = datetime.now()
delimiter
form = cgi.FieldStorage()
delimiter
locale.setlocale(lang)
delimiter
chunk = len(data)
delimiter
Counter(strs)
delimiter
do_something_else(lines_of_interest)
delimiter
len(self.crawler.engine.slot.inprogress)
delimiter
plt.colorbar()
delimiter
plt.show()
delimiter
Parent.__new__(cls, value)
delimiter
x = np.arange(2 * np.pi, step=0.01)
delimiter
line
delimiter
do_stuff()
delimiter
widget = QtGui.QWidget(self)
delimiter
pyassoc
delimiter
self.webview.clearHistory()
delimiter
f(*args, **kwargs) + 1
delimiter
inner2()
delimiter
compose(f, f)
delimiter
freq, bins = numpy.histogram(values, bins)
delimiter
DEBUG = True
delimiter
type(s)
delimiter
x = [[1, 2], 1, 1, [2, 1, [1, 2]]]
delimiter
midlen = len(oldstr) / 2
delimiter
x = np.asarray(x)
delimiter
canvas.grid(row=0, column=0, sticky=N + S + E + W)
delimiter
ccw(A, C, D) != ccw(B, C, D) and ccw(A, B, C) != ccw(A, B, D)
delimiter
np.setdiff1d(a, a[mask])
delimiter
reads = [p.stdout.fileno(), p.stderr.fileno()]
delimiter
l.sort(key=getvals)
delimiter
person = models.ForeignKey(User)
delimiter
print(settings.fileName())
delimiter
a = np.arange(16).reshape((8, 2))
delimiter
df2 = pd.concat(yearly_month_stats, axis=1, keys=years)
delimiter
writer.writerow(row)
delimiter
filtered = img.copy()
delimiter
cap.set(cv2.cv.CV_CAP_PROP_POS_FRAMES, pos_frame - 1)
delimiter
docker.wait(contid)
delimiter
model.docvecs[0]
delimiter
methodReference.__self__
delimiter
gtk.main()
delimiter
response
delimiter
signal.alarm(10)
delimiter
min_kmeans.fit(vectors)
delimiter
fig, ax = pl.subplots(figsize=(12, 4))
delimiter
b.select_form(nr=0)
delimiter
x[0] -= D[n - 1] * np.sqrt((x * x).sum())
delimiter
conn.setopt(pycurl.WRITEFUNCTION, body)
delimiter
aMethod.__code__.co_argcount
delimiter
full_path = os.path.join(folder, file)
delimiter
print((line1, line2))
delimiter
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
delimiter
AtoCIm.append(Image.open(image))
delimiter
log.start()
delimiter
imshow(threshold, cmap=cm.Greys_r)
delimiter
getcontext()
delimiter
print(Rational(1, 2) in i6)
delimiter
p.communicate(value)
delimiter
nowtimestamp = time.mktime(nowtuple)
delimiter
a[:0] = [4]
delimiter
u[i] = len(item)
delimiter
now = pytz.utc.localize(datetime.utcnow())
delimiter
newObject = className()
delimiter
ax.xaxis.set_major_formatter(mtick.FuncFormatter(ticks))
delimiter
image.show()
delimiter
sum(b, a)
delimiter
workList = yourList[::]
delimiter
cert = X509.load_cert(sys.argv[1])
delimiter
ax2.set_xticks([])
delimiter
self.put()
delimiter
name = models.CharField(max_length=50)
delimiter
plt.draw()
delimiter
tab = pd.crosstab(df.A > 0, df.B > 0)
delimiter
result.extend(list(range(int(x), int(y) + 1)))
delimiter
sum([(1) for ch in s if ch.isalpha()])
delimiter
df = df.transpose()
delimiter
c1.commit()
delimiter
b = np.tile(a, 1000)
delimiter
reader = csv.DictReader(fp)
delimiter
circles = cv2.HoughCircles(gray, cv.CV_HOUGH_GRADIENT, 1, 10)
delimiter
tornado.ioloop.IOLoop.instance().add_callback(client.watch_queue)
delimiter
app = QApplication(sys.argv)
delimiter
os.isatty(fd)
delimiter
pdb.Pdb.__init__(self, completekey, stdin, stdout, skip)
delimiter
sys.exit()
delimiter
x, y = 0, 6
delimiter
y = random.randrange(box[0][1], box[1][1])
delimiter
xml_files.sort(key=os.path.getmtime)
delimiter
emp = Employee.objects.get(pk=id)
delimiter
self.request.sendall(self.data.upper())
delimiter
window = gtk.Window(gtk.WINDOW_TOPLEVEL)
delimiter
main.py
delimiter
my_str = my_str.strip()
delimiter
out.release()
delimiter
globals()[key] = my_shelf[key]
delimiter
f(*args, **kwargs)
delimiter
fig.clf()
delimiter
args = parser.parse_args()
delimiter
thing.__init__.__func__.__closure__[0].cell_contents
delimiter
cbar_ax = fig.add_axes([0, 0, 0.1, 0.1])
delimiter
X, Y = np.meshgrid(x, y)
delimiter
http = httplib2.Http(cache=memcache)
delimiter
results.append((numbers[0], numbers[1:]))
delimiter
nelangs.append(nelang)
delimiter
matcher(l1, l2[1:]) or matcher(l1[1:], l2)
delimiter
print((ca.key[0], ca.values[0], ca.values[1], ca.title[0], ca.index))
delimiter
[0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
delimiter
et.write(sys.stdout, pretty_print=True)
delimiter
start_ipython()
delimiter
new_list = map(f, it.takewhile(condition, l))
delimiter
numpy.core._dotblas.__file__
delimiter
X.reshape(X.shape[0], -1)[:, (0)].sum()
delimiter
working_dir = os.path.dirname(__file__)
delimiter
result.append(prods)
delimiter
iter(item)
delimiter
np.in1d(aView, bView)
delimiter
self.layoutVertical.addWidget(self.label)
delimiter
f.write(data)
delimiter
result = {name: result}
delimiter
max(l)
delimiter
root.clear()
delimiter
txt = urllib.request.urlopen(target_url).read()
delimiter
line = line.strip()
delimiter
match.groupdict()
delimiter
SocketServer.TCPServer.allow_reuse_address = True
delimiter
p = Popen(cmd, shell=True, cwd=newpath)
delimiter
element = wd.find_element_by_link_text(self.locator)
delimiter
plt.grid(True)
delimiter
rect(ctx, (0, 0), (width, height), stroke=False)
delimiter
cursor.execute(sql, params)
delimiter
img1x = img1.shape[1]
delimiter
os.dup2(desired_output_file.fileno(), sys.stderr)
delimiter
df.loc[df.index.is_quarter_end]
delimiter
LOOKNEXT = False
delimiter
plt.bar(his[1][1:], his[0])
delimiter
print(item)
delimiter
admin.site.register(Report, ReportAdmin)
delimiter
app = flask.Flask(__name__)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
pic.setGeometry(10, 10, 400, 100)
delimiter
left.put(n[1::2])
delimiter
messages = q.get_messages()
delimiter
tk.Canvas.create_oval(self, *args, **kwargs)
delimiter
results = api.retweets(firstTweet.id)
delimiter
print(data.read())
delimiter
result = list(Blog.objects.values())
delimiter
self.config(width=width + w)
delimiter
video2 = cv.CaptureFromCAM(1)
delimiter
plt.plot(bins, mlab.normpdf(bins, mu, sigma))
delimiter
image /= image.max() / 255.0
delimiter
new.append(new_word.lower())
delimiter
self.factory.echoers.append(self)
delimiter
arr = np.empty(find_shape(my_list))
delimiter
QLabel.__init__(self, parent)
delimiter
queue.put((-priority, item))
delimiter
np.dot(np.sum(bidule, axis=1).T, betas)
delimiter
print(random_with_N_digits(2))
delimiter
np.degrees(angle)
delimiter
sec_perf.reindex_axis(secs, 1)
delimiter
ax = fig.add_subplot(111)
delimiter
scipy.stats.norm(100, 12)
delimiter
msg.attach(part)
delimiter
pruned
delimiter
apply(operator.itemgetter, tuple(b))(a)
delimiter
sshcon.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
print(data)
delimiter
1, 0, 0.572864624, 0.725615079
delimiter
1, 0, 0.578792198, 0.100698871
delimiter
plt.xticks(rotation=0)
delimiter
p12.get_ca_certificates()
delimiter
l = QtGui.QVBoxLayout(self)
delimiter
func(*cargs)
delimiter
edit_user = relationship(User, foreign_keys=[last_edit_user_id])
delimiter
x[~I]
delimiter
writer = csv.DictWriter(fout, fieldnames=fields)
delimiter
print(pandas.__version__)
delimiter
p.join()
delimiter
sys.stdout.write(str(squared(x)))
delimiter
b.__dict__
delimiter
type.__new__(cls, name, bases, dict(classdict))
delimiter
get_lerp_factor(2, list(range(8)), 6)
delimiter
x * arr[:-1] + y * arr[1:]
delimiter
fun = lambda x: (x[0] - 1) ** 2 + (x[1] - 2.5) ** 2
delimiter
print(pd.DataFrame(ser).T)
delimiter
int(offset.total_seconds() / 60 / 60)
delimiter
values = map(lambda key: d[key], list(d.keys()))
delimiter
sess.run(init)
delimiter
q.register(stdout, select.POLLIN)
delimiter
csv_from_excel(sys.argv[1])
delimiter
MyFrame().mainloop()
delimiter
pool.close()
delimiter
print(headers.getvalue())
delimiter
self.count += 1
delimiter
print(df.groupby(df.A // 2).A.nsmallest(2))
delimiter
sorted(x)[len(x) // 2]
delimiter
tgtdates = [datetime.date(2011, 8, 29), datetime.date(2011, 8, 1)]
delimiter
wx.Panel.__init__(self, parent)
delimiter
serializer(obj)
delimiter
nat_check(nat)
delimiter
x = np.arange(20).reshape(2, 10)
delimiter
wrapper
delimiter
smtp.quit()
delimiter
v.set(garbage)
delimiter
merge(a, b, lambda in_a, in_b: in_a and in_b)
delimiter
user.save()
delimiter
d = dict(key_value() for i in range(1000000))
delimiter
bins = np.linspace(df.a.min(), df.a.max(), 10)
delimiter
opener = urllib.request.build_opener()
delimiter
_f_array[:, (b)]
delimiter
fig, ax = plt.subplots(1, 1)
delimiter
raise AttributeError
delimiter
pipe.stdin.write(result_1)
delimiter
f2.save()
delimiter
lv.sort()
delimiter
b = np.append(a, [4])
delimiter
browser = webdriver.Firefox(firefox_profile=profile, capabilities=capabilities)
delimiter
print(sequence2)
delimiter
time.sleep(1)
delimiter
l.append(id(v))
delimiter
sys.exit(main(sys.argv))
delimiter
d.replace(hour=0, minute=0, second=0, microsecond=0)
delimiter
cursor.close()
delimiter
map(lambda x: x - 1, args)
delimiter
x = np.linspace(-1, 1, 500)
delimiter
client.send(response)
delimiter
print(G.edges(data=True))
delimiter
messageJSON = json.dumps(message, ensure_ascii=False)
delimiter
items[0]
delimiter
globals.default()
delimiter
c[key] = list(set(a[key]) - set(b.get(key, [])))
delimiter
class_id = db.Column(db.Integer, primary_key=True)
delimiter
A = np.vstack([A, newrow])
delimiter
M[:, (1)] *= 2
delimiter
main()
delimiter
print(list(igroups([])))
delimiter
words = text.split()
delimiter
[iter(List)] * 2
delimiter
data = data.reshape(data.shape[:-1])
delimiter
reader = csv.reader(f)
delimiter
self.loop.call_soon_threadsafe(task.cancel)
delimiter
metadata = MetaData()
delimiter
offsets = [94.0, 95.0, 96.0, 97.0]
delimiter
fit.apply(lambda x: d[x.name].inverse_transform(x))
delimiter
classifier.fit(data[:n_samples / 2], digits.target[:n_samples / 2])
delimiter
cv.SetCaptureProperty(video1, cv.CV_CAP_PROP_FRAME_HEIGHT, 600)
delimiter
in_memory_blocks = numpy.random.randint(0, _BLOCK_MAX + 1, blocks_per_flush)
delimiter
groups = IT.groupby(zip(*idx), key=operator.itemgetter(0))
delimiter
dis.dis(lambda : Foo().bar.add(1, 2))
delimiter
b[the_slice]
delimiter
a[:-1, 1:]
delimiter
A.__init__(self, 4)
delimiter
[[value for i, value in enumerate(l1) if j == l2[i]] for j in set(l2)]
delimiter
attr(random.randint(1, 100), *args, **kw)
delimiter
dis.dis(take2)
delimiter
List = list(range(1, 20))
delimiter
df = pd.read_csv(StringIO(text), index_col=0)
delimiter
self.x + other
delimiter
print(len([item for item in values[:, (0)] if item == 0]))
delimiter
main()
delimiter
method(*args, **kwargs)
delimiter
len(b)
delimiter
c = stdin.read(1)
delimiter
num_rows = np.sum(np.max(partitions, axis=1))
delimiter
y = np.array([5, 20, 4, 18, 19, 18, 7, 4])
delimiter
a = np.random.rand(20)
delimiter
mask = np.zeros(img.shape[:2], np.uint8)
delimiter
self.axes = self.figure.add_subplot(111)
delimiter
a = np.arange(9)
delimiter
wp.A.plot()
delimiter
Response({}, template_name=template.template.name)
delimiter
print(japanese)
delimiter
ctx.set_font_size(font_size)
delimiter
wilma.delete()
delimiter
reader = csv.reader(f)
delimiter
psutil.get_pid_list()
delimiter
featureSelector.fit(X_train_data, Y_train_data)
delimiter
styles = getSampleStyleSheet()
delimiter
pool.close()
delimiter
zook.myfunc()
delimiter
im = Image.open(image)
delimiter
defaultdict.__init__(self, *args, **kwargs)
delimiter
conn.sendall(output)
delimiter
c = np.max(b, axis=0)
delimiter
word = line.rstrip()
delimiter
pak[TCP].remove_payload()
delimiter
os.setresgid(0, 0, -1)
delimiter
clf.fit(X[train_idx], y[train_idx])
delimiter
f.flush()
delimiter
b = np.random.randint(0, 50, 1000.0)
delimiter
print(td.get_text())
delimiter
utc_offset = fromtimestamp(ts) - utcfromtimestamp(ts)
delimiter
self._values.append(value)
delimiter
value
delimiter
input = sc.textFile(inputFile)
delimiter
self.quit(file)
delimiter
y = data[:, (1)]
delimiter
csr.eliminate_zeros()
delimiter
google - cloud
delimiter
os.path.dirname(f)
delimiter
p = sns.kdeplot(data, shade=True)
delimiter
node.set_data(node.get_next())
delimiter
print(cython.typeof(a))
delimiter
print(resargs)
delimiter
encoded = base64.b64encode(sys.stdin.read())
delimiter
soup = BeautifulSoup(data)
delimiter
entry2.grid(row=1, column=0)
delimiter
slice(start, stop, step)
delimiter
max(get_segstarttime(), get_jobstarttime())
delimiter
all_messages = []
delimiter
plt.figure(1)
delimiter
fig = plt.figure()
delimiter
cmap = mpl.cm.jet
delimiter
k += 1
delimiter
et = etree.ElementTree(root)
delimiter
value = 1
delimiter
vscrollbar.config(command=canvas.yview)
delimiter
np.random.shuffle(ar)
delimiter
p.start()
delimiter
cheesiness = models.IntegerField()
delimiter
all_module_names.extend(additional_module_names)
delimiter
a[2] += [5]
delimiter
gram_matrix = np.zeros((X.shape[0], Y.shape[0]))
delimiter
setup(**setup_args)
delimiter
plotx, plotz = np.mgrid[-4:4:100j, -4:4:100j]
delimiter
x = np.arange(100)
delimiter
cheesiness = models.IntegerField()
delimiter
sum(log(stats.weibull_min.pdf(x, p[1], 0.0, p[0])))
delimiter
nonlinsolve([x ** 5 + x ** 2 + 1], [x])
delimiter
print(foo.myfunc.__doc__)
delimiter
os.unlink(file_path)
delimiter
id = Column(Integer, primary_key=True, autoincrement=True)
delimiter
words_to_count = (word for word in word_list if word[:1].isupper())
delimiter
qapp.exec_()
delimiter
_curried_func(*(args + moreargs), **dict(kwargs, **morekwargs))
delimiter
a + b
delimiter
xticklabels = ax1.get_xticklabels() + ax2.get_xticklabels()
delimiter
combo = gtk.combo_box_new_text()
delimiter
a = A.objects.get(pk=A_pk)
delimiter
0.6411, sym2, 5, 5, 10, 10
delimiter
inf.close()
delimiter
a = np.ones((10, 5))
delimiter
0.250478029251
delimiter
os.kill(os.getpid(), signal.SIGUSR1)
delimiter
now = datetime.datetime.now()
delimiter
plt.yticks([])
delimiter
cinqdf = pd.DataFrame(cinqdata)
delimiter
f
delimiter
tk.Frame.__init__(self, parent)
delimiter
now_aware = pytz.utc.localize(unaware)
delimiter
screen = pygame.Surface((width, height), flags, depth)
delimiter
streak += 1
delimiter
app.MainLoop()
delimiter
str(timedelta(seconds=elapsed))
delimiter
related_tables = [prop.target for prop in relation_properties]
delimiter
[1, 42] in a.tolist()
delimiter
result.append(s)
delimiter
stream.close()
delimiter
my_array = np.empty((2, 2), dtype=float)
delimiter
ax = plt.figure().add_subplot(111)
delimiter
tk = tkinter.Tk()
delimiter
print(merged_dict)
delimiter
output = np.zeros((N, N))
delimiter
pyplot.legend()
delimiter
sys.exit(main(sys.argv))
delimiter
lists([12, 4, 15, 11])
delimiter
plt.axis([0, 7.02, 7 / r, -0.5])
delimiter
parser = etree.HTMLParser()
delimiter
str = base64.b64encode(imageFile.read())
delimiter
print(test.somevalue, id(test))
delimiter
b = copy.deepcopy(a)
delimiter
print(df)
delimiter
parent.get_toplevel().child_focus(gtk.DIR_TAB_FORWARD)
delimiter
math.pow(-i, 4)
delimiter
print(df.shape)
delimiter
szr.Add(self.button_1, 0, wx.TOP | wx.BOTTOM | wx.ALIGN_CENTER_HORIZONTAL, 5)
delimiter
string[:i + 1]
delimiter
self.assertFieldsEqual(self.nums, self.initFields)
delimiter
False
delimiter
p = Process(target=f, args=(lst,))
delimiter
sock = socks.socksocket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
self.driver.close()
delimiter
x.b
delimiter
raise socket.gaierror
delimiter
plt.scatter(x, y, alpha=0.1)
delimiter
mfun
delimiter
a = np.arange(start, stop + step, step)
delimiter
Mids1 = [1125, 1187, 1125, 1156, 1156, 1156, 1140, 1140]
delimiter
Tops2 = [1125, 1125, 1125, 1125, 1125, 1250, 1062, 1250]
delimiter
self.setPos(pos)
delimiter
menu.addAction(exit)
delimiter
session.add(c2)
delimiter
np.random.shuffle(indices)
delimiter
doc = Study(**data)
delimiter
s[4]
delimiter
import_delorean()
delimiter
as_strided(b, shape=b.shape, strides=strides)[a.shape[0]:]
delimiter
fig.subplots_adjust(bottom=0.2)
delimiter
seen.add((x, y))
delimiter
coords = np.vstack((xi, yi))
delimiter
output.append(json.dumps(item))
delimiter
sig2 = sin(t1 / 2) + np.random.normal(scale=0.1, size=len(t1))
delimiter
items.append(lambda i=i: dump(i))
delimiter
d = defaultdict(int)
delimiter
w.write(f, s)
delimiter
self.worker.join()
delimiter
dictionary = {}
delimiter
ax = fig.add_subplot(iplot)
delimiter
l1 = [x for x in l1 if x not in l2]
delimiter
lena = scipy.misc.lena()
delimiter
map(a.__getitem__, b)
delimiter
canvas.pack()
delimiter
ids.append(map(lambda tup: tup[0], c[0:K]))
delimiter
[991]
delimiter
[997]
delimiter
pool = multiprocessing.Pool(4)
delimiter
list(chain.from_iterable(new_lis))
delimiter
print(df)
delimiter
source_vertex = graph.vs[source_vertex_id]
delimiter
a[0][0] = 1
delimiter
app = App()
delimiter
do_something()
delimiter
c[1::2] = b
delimiter
files = glob(sys.argv[1])
delimiter
unsearched.put(path)
delimiter
fig = plt.figure()
delimiter
{{x.y}}
delimiter
nested_list = map(partial(map, str.upper), nested_list)
delimiter
data = f.read()
delimiter
result = [w for w in vocab if len(w) >= 8]
delimiter
part.get_payload()
delimiter
False
delimiter
besseli_vec(0, A)
delimiter
firstnames = [item[0] for item in all_data]
delimiter
yd = line.get_ydata()
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
print(os.getuid())
delimiter
print(page_source)
delimiter
k = plot((0, 1), (1, 1))
delimiter
self.stopButton.clicked.connect(self.simulRunner.stop)
delimiter
image = gtk.image_new_from_stock(gtk.STOCK_ABOUT, gtk.ICON_SIZE_DIALOG)
delimiter
my_list[7:10], my_list[2:4] = my_list[2:4], my_list[7:10]
delimiter
index = numpy.argmin(nplats)
delimiter
list_dir()
delimiter
drives
delimiter
y_true = [0, 1, 2, 0, 1, 2, 0, 1, 2]
delimiter
False
delimiter
zip_longest(fillvalue=fillvalue, *args)
delimiter
Wizard.Finish.Click()
delimiter
myplt.setmydefaults()
delimiter
x = np.random.randn(5000, 200)
delimiter
sys.stdout.flush()
delimiter
df = df.groupby(by=df.columns, axis=1).mean()
delimiter
func2()
delimiter
utc_datetime = datetime.datetime.utcnow()
delimiter
sys.stdout = sys.stderr
delimiter
cv2.rectangle(im, (x, y), (x + w, y + h), (0, 255, 0), 2)
delimiter
DIRNAME = os.path.abspath(os.path.dirname(__file__))
delimiter
df = pd.DataFrame(np.fromstring(arr, dtype=np.uint8).reshape(-1, 8) - 48)
delimiter
q = session.query(Foo)
delimiter
main()
delimiter
b.index[b.argmax()]
delimiter
G = np.vstack([np.ones_like(x), x, y, z]).T
delimiter
print(lilfoo.bar)
delimiter
mask = np.zeros((nrows, ncols), dtype=bool)
delimiter
bar()
delimiter
print(local_tz.localize(datetime(2012, 1, 15)))
delimiter
ax2 = ax1.twinx()
delimiter
main()
delimiter
sys.excepthook = excepthook
delimiter
A = np.random.random((10, 2)) * 100
delimiter
x.loc[(x.date.idxmax()), :]
delimiter
process(data.get())
delimiter
grid(True)
delimiter
arr[ind]
delimiter
w.write(list(map(lambda j: i + j, list(lambda j: i in j, listStrings))))
delimiter
l[0] += 1
delimiter
gpsgvqsbixtwyakp
delimiter
self.ssh = paramiko.SSHClient()
delimiter
sorted_lines = sorted(f, key=operator.itemgetter(slice(0, 24)))
delimiter
d = {k: recur_dictify(g.ix[:, 1:]) for k, g in grouped}
delimiter
dict_writer = csv.DictWriter(output_file, keys)
delimiter
help(datetime.datetime.replace)
delimiter
unique_values = set(chain.from_iterable(list(d.values()) for d in dictionaries_list))
delimiter
vmatch = np.vectorize(lambda x: bool(r.match(x)))
delimiter
ard = serial.Serial(port, 9600, timeout=5)
delimiter
self.someValue = value
delimiter
Response(api_result)
delimiter
x = np.arange(n)
delimiter
outer.append([e for i, e in g if e != N])
delimiter
pxi = points[i, 0]
delimiter
_KDGETLED = 19249
delimiter
self.Destroy()
delimiter
Counter(str1)
delimiter
br.set_handle_refresh(False)
delimiter
a = numpy.arange(-10, 10)
delimiter
mask = np.eye(out.shape[0], dtype=bool)
delimiter
layout = QtGui.QVBoxLayout(self)
delimiter
toss = np.random.randint(0, 2, 100)
delimiter
number = int(line)
delimiter
s = str(i)
delimiter
wtr = csv.writer(result)
delimiter
sys.getsizeof(a)
delimiter
A.setdiag(list(range(1, 11)))
delimiter
do_stuff()
delimiter
np.random.seed(1)
delimiter
parsed = urlparse.urlparse(url)
delimiter
self.matrix.__getitem__(index)
delimiter
ff = webdriver.Firefox()
delimiter
output.close()
delimiter
cal_window.add(cal_vbox)
delimiter
parser = etree.XMLParser(remove_blank_text=True)
delimiter
offsetx, offsety = np.meshgrid(list(range(960)), list(range(540)))
delimiter
binary_erosion(D, kernel2, border_value=1).astype(int)
delimiter
soup = BeautifulSoup(open(sys.argv[1]))
delimiter
self.assertEqual(message, send_message)
delimiter
swapped = binascii.hexlify(y)
delimiter
learn(Xtest, Xtrain, Ytest, Ytrain, 5)
delimiter
list(map(cube, list(range(1, 11))))
delimiter
im2 = Image.new(im.mode, im.size)
delimiter
L = [x for i in range(n)]
delimiter
x[:] = [(not y) for y in x]
delimiter
print(result.group(0))
delimiter
encodings.idna.ToASCII(label)
delimiter
n = len(nums)
delimiter
pattern[i::4] = -1
delimiter
self.instance.project_set.add(project)
delimiter
str(lst[0]), []
delimiter
hidden_field = forms.CharField(widget=forms.HiddenInput())
delimiter
print(url_string)
delimiter
ax.add_patch(circle)
delimiter
name = models.CharField(max_lenght=255)
delimiter
print(table_row.format(**row))
delimiter
my_list = sys.argv[1].split()
delimiter
dotproduct = (c.x - a.x) * (b.x - a.x) + (c.y - a.y) * (b.y - a.y)
delimiter
x = np.arange(10)
delimiter
a, b, c, d, e, g, h, i, j = (True,) * 9
delimiter
output.write(aes_engine.encrypt(input.read()))
delimiter
print(vectorizer.get_feature_names())
delimiter
print(args.columns)
delimiter
plt.hist(nd, normed=True, bins=n_bins0, alpha=0.5)
delimiter
req = urllib.request.Request(uri)
delimiter
print(line_num)
delimiter
fn(decoratee, *args)
delimiter
{key: [subdict[key] for subdict in ds] for key in ds[0]}
delimiter
sort - Vu
delimiter
urlpatterns += staticfiles_urlpatterns()
delimiter
db.session.merge(provider)
delimiter
iter = [random.randint(0, 1000) for i in range(100)]
delimiter
path = urllib.parse.unquote(path)
delimiter
w.writerow([id] + list(rest.values()))
delimiter
[(list1[i], list1[j - 1]) for i, j in zip(list2, list2[1:])]
delimiter
cursor = conn.cursor()
delimiter
all_zeros = not np.any(a)
delimiter
print(row[1])
delimiter
ax.set_frame_on(False)
delimiter
(df == pd.Series(conditions)).all(axis=1)
delimiter
path = os.path.join(dest_dir, file_name)
delimiter
self.frame.Destroy()
delimiter
df.filter(df.dt_mvmt.isNotNull()).count()
delimiter
dict(form=crud())
delimiter
time.sleep(1)
delimiter
s.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)
delimiter
sys.exit()
delimiter
list(dict(list(grouped)).values())
delimiter
x.sayHello()
delimiter
cv2.bitwise_and(d1, d2)
delimiter
print(mymodule.__repr__())
delimiter
(np.diff(np.sign(my_list)) != 0).sum()
delimiter
gc.collect()
delimiter
opener = urllib.request.build_opener(no_proxy)
delimiter
fig = plt.figure()
delimiter
[i for i, j in zip_longest(my_list, my_list[1:]) if i != j]
delimiter
b = [[1, 5], [8, 12], [15, 18], [20, 24]]
delimiter
app
delimiter
i = np.array([0, 0, 1, 2, 2])
delimiter
conn.executemany(query, test.to_records(index=False))
delimiter
output[item] += 1
delimiter
plt.gray()
delimiter
names.append(name)
delimiter
print(now2.strftime(fmt))
delimiter
results = pool.map_async(foo, list(range(40))).get()
delimiter
items.append((new_key, v))
delimiter
print(get_python_lib())
delimiter
self.put_async().get_result()
delimiter
(220921999, 2427),
delimiter
x = numpy.linalg.solve(a, b)
delimiter
user = models.ForeignKey(User)
delimiter
self.assertItemsEqual(v1, v2, msg)
delimiter
graph = nx.Graph()
delimiter
self.border.Add(self.sizer, 1, wx.ALL | wx.EXPAND, 5)
delimiter
self.out_queue.put(path)
delimiter
RNA_integers.append(RNA_dictionary[i])
delimiter
f()
delimiter
win.setCentralWidget(vispyCanvas.native)
delimiter
print(json.dumps(pairs))
delimiter
heatmap = ax.pcolor(data, cmap=plt.cm.Blues)
delimiter
reactor.stop()
delimiter
o = json.loads(n)
delimiter
pool = multiprocessing.Pool()
delimiter
lst = [a, d, b, a, c, e, e, f, g]
delimiter
print(stdout.readline())
delimiter
repo = Gittle.init(path)
delimiter
self.crawler.start()
delimiter
print(a[mask])
delimiter
opener = build_opener(HTTPCookieProcessor(cj), HTTPHandler())
delimiter
confused_array[~mask & (numpy_array != 0)] = 2
delimiter
scipy.stats.poisson.ppf([0.025, 0.975], 10)
delimiter
{b.pop(0): b.pop(0) == 0}
delimiter
threading.Thread.__init__(self)
delimiter
yi = np.linspace(-1, 1, ngrid)
delimiter
self.Bind(wx.EVT_KEY_UP, self.KeyDown)
delimiter
self.server.serve_forever()
delimiter
print(df)
delimiter
color_producer = matplotlib.cm.ScalarMappable(norm=norm, cmap=cmap)
delimiter
index = letters.index(letter)
delimiter
p.show()
delimiter
type(len(x))
delimiter
group = map(itemgetter(1), group)
delimiter
noise = np.random.normal(0, 1, 100)
delimiter
math.sqrt(x + y)
delimiter
id = db.Column(db.Integer, primary_key=True)
delimiter
numpy.nextafter(-0.1, 1)
delimiter
np.count_nonzero(a[mask])
delimiter
f.read()
delimiter
p.apply_async(f, args=(i,), callback=adder)
delimiter
r = np.linalg.lstsq(np.c_[x, np.ones_like(x)], y)[0]
delimiter
imshow(grey, cmap=cm.Greys_r)
delimiter
print(f())
delimiter
queue.append(new_path)
delimiter
self.updater.timeout.connect(self.update)
delimiter
assert not qlock.locked()
delimiter
Fun.dynprop
delimiter
s.shutdown(socket.SHUT_WR)
delimiter
main()
delimiter
cache[key]
delimiter
layout.addWidget(self.button)
delimiter
[0, 0, 0, 0]
delimiter
conn.quit()
delimiter
self.table = QtGui.QTableWidget(rows, columns, self)
delimiter
print(add_time(datetime(year=2015, month=6, day=19), relativedelta(months=+1)))
delimiter
df.index[0]
delimiter
result = dict(cursor.fetchall())
delimiter
stdin, stdout, stderr = self.client.exec_command(command)
delimiter
cv2.rectangle(im, (x, y), (x + w, y + h), (0, 0, 255), 2)
delimiter
vscrollbar.pack(fill=Y, side=RIGHT, expand=FALSE)
delimiter
list2titles = list(st1dict[k] for k in list2)
delimiter
print(sum((Counter(dict(x)) for x in input), Counter()))
delimiter
A = np.cos(a) * np.cos(b) - np.sin(a) * np.sin(b) * np.sin(c - d)
delimiter
map(operator.add, first, second)
delimiter
ylim = ax.get_ylim()
delimiter
base_datetime = datetime.datetime(1970, 1, 1)
delimiter
word, s[end + 1:]
delimiter
__builtin__.raw_input()
delimiter
66666666, 44444
delimiter
True
delimiter
slice_consc(df2, 5)
delimiter
A.instances.append(self)
delimiter
data = file.read()
delimiter
print(root.text_content())
delimiter
np.lexsort((b, a))
delimiter
1, 1, 8, 8
delimiter
file.close()
delimiter
locations = Location.objects.all()
delimiter
inp_im = Image.open(imgfn)
delimiter
np.log2([-1, 2, 4])
delimiter
np.column_stack((which_in_a, where_in_b))
delimiter
out.value_counts().head()
delimiter
new_image.image.save(slug_filename, File(handle_upload_url_file(url)))
delimiter
m[50:56, 50:56] += scipy.ones((6, 6))
delimiter
output.write(key)
delimiter
yaml.dump(test2, stream=sys.stdout)
delimiter
value
delimiter
self.STDIN_FILENO = sys.stdin.fileno()
delimiter
print(tag.getArtist())
delimiter
ax.plot(x_values, data.iloc[i])
delimiter
self.wfile.write(content)
delimiter
groups.rds | intersect(groups.development) | first
delimiter
C = A[len(A) / 2:]
delimiter
c.play()
delimiter
self._thread = threading.Thread(target=self.run)
delimiter
print(etree.tostring(document, xml_declaration=True))
delimiter
seconds = float(seconds)
delimiter
[(x, y) for x, y, label in data]
delimiter
f.close()
delimiter
h1.setLevel(logging.DEBUG)
delimiter
qlock = threading.Lock()
delimiter
k = keyfunc(item)
delimiter
l
delimiter
axis.set_visible(False)
delimiter
main()
delimiter
title = models.CharField(max_length=100)
delimiter
print(turnthis)
delimiter
result.append(el)
delimiter
ax = plt.gca()
delimiter
lms = LMS(np.zeros(filterlen), damp=damp)
delimiter
Thread(target=foo())
delimiter
self.table.setItem(row, column, item)
delimiter
diffkeys = [k for k in dict1 if dict1[k] != dict2[k]]
delimiter
mask = df.eq(df.iloc[0]).all()
delimiter
fp = urllib.request.urlopen(request)
delimiter
dict = {}
delimiter
result = []
delimiter
d = defaultdict(list)
delimiter
result = new_array[0] & new_array[1]
delimiter
multiprocessing.freeze_support()
delimiter
help(django.utils.dateformat)
delimiter
hm.HookKeyboard()
delimiter
env_cmd = subprocess.list2cmdline(env_cmd)
delimiter
text = text.strip()
delimiter
output.addPage(page)
delimiter
sum_a = [0, 0, 0]
delimiter
True
delimiter
utc_dt = dt.replace(tzinfo=pytz.utc)
delimiter
plt.matshow(A, alpha=0.5)
delimiter
response.read()
delimiter
poly = GeoSeries(Polygon([(0, 0), (0, 2), (2, 2), (2, 0)]))
delimiter
timer.cancel()
delimiter
sleep(0.5)
delimiter
Traversal.description()
delimiter
d = {k: list(f.ix[k].index) for k in f.index.levels[0]}
delimiter
json.JSONEncoder.default(self, obj)
delimiter
print(tidx + pd.offsets.Day(15))
delimiter
print(convert_excel_time(0.4006944444444))
delimiter
cost1 = db.FloatProperty(default=0.0)
delimiter
Py_Initialize()
delimiter
y_pred = [0, 0, 0, 0, 1, 1, 0, 2, 2]
delimiter
ButtonTestApp().run()
delimiter
dt = datetime.date(2010, 6, 16)
delimiter
list(closed_range(10, 1, -2))
delimiter
l_qa.append((k, m.groupdict()[k]))
delimiter
self.label.setFrameStyle(QtGui.QFrame.Box | QtGui.QFrame.Plain)
delimiter
np.std(image)
delimiter
s.set_debuglevel(0)
delimiter
parentNode.insertBefore(doc.createComment(element.toxml()), element)
delimiter
root.wm_iconbitmap(tempFile)
delimiter
time.sleep(0.5)
delimiter
df.mean(axis=0)
delimiter
f()
delimiter
main()
delimiter
c.add(datetime.datetime.now())
delimiter
edges.sort(key=lambda tup: tup[0] + tup[1] / 10.0)
delimiter
np.allclose(a.indptr, b.indptr)
delimiter
result = list(clean(flatten(lst)))
delimiter
row[set_col] = val
delimiter
name = models.CharField()
delimiter
data = data[:-data[-1]]
delimiter
print([i.type.func.id for i in raises])
delimiter
MyUser.tags.all()
delimiter
data = [json.loads(row) for row in data]
delimiter
sys.stdout.write(line)
delimiter
self.Destroy()
delimiter
y = dict(a=2, b=2)
delimiter
string = string[:-len(to_strip)]
delimiter
ax = f.add_axes([0.17, 0.02, 0.72, 0.79])
delimiter
json_data_rdd.flatMap(processDataLine(arg1, arg2))
delimiter
df
delimiter
cursor = db.cursor()
delimiter
arguments = parser.parse_args()
delimiter
rx.match(w)
delimiter
curOuter = db.cursor()
delimiter
np.random.shuffle(b[ndx])
delimiter
cPickle.dump(mat, f, -1)
delimiter
result
delimiter
self.proc.kill()
delimiter
l_qa.append(m.groupdict()[k])
delimiter
plt.xlim((0, AUC.shape[1]))
delimiter
{{body}}
delimiter
fig.savefig(img)
delimiter
random.choice(seq)
delimiter
redemption_date.year
delimiter
my_plot_2(ax2)
delimiter
test = Test(1)
delimiter
np.eye(M.shape[1]) * M[:, (np.newaxis), :]
delimiter
browser = webdriver.Firefox()
delimiter
fileExt = os.path.splitext(file)[-1]
delimiter
self.q.put((False, -1, msg))
delimiter
self.handleError(record)
delimiter
pool = Pool(4)
delimiter
np.bincount(h, weights=x)
delimiter
x, y = randint(0, len(grid) - 1), randint(0, len(grid[0]) - 1)
delimiter
preincrement(it)
delimiter
ax.set_color_cycle(colors)
delimiter
list(s)
delimiter
g = globals()
delimiter
print(l)
delimiter
browser.set_cookiejar(cookiejar)
delimiter
newParsed = json.loads(parsed[0])
delimiter
numpy.allclose(c[:-1], d)
delimiter
allbestcolumns = map(best6, points)
delimiter
deletelist_1[int(i)]
delimiter
a = ctypes.cdll.LoadLibrary(source)
delimiter
main()
delimiter
logging.basicConfig(level=logging.INFO)
delimiter
x = np.atleast_1d(np.array(x))
delimiter
word_pairs = zip(alligned1.split(), alligned2.split())
delimiter
self.x
delimiter
urllib.parse.urljoin(url1, url2)
delimiter
globals()[module] = importlib.import_module(module)
delimiter
self.rabbit_connect()
delimiter
test1list = test1filehandle.readlines()
delimiter
df = pd.concat([prd_df, prc_df], axis=1)
delimiter
fig = plt.figure()
delimiter
l2 = [[1], [2]]
delimiter
codes = {v: k for k, v in list(codes.items())}
delimiter
t.start()
delimiter
a[b]
delimiter
list.insert(2 * i + 1, list[2 * i])
delimiter
foo()
delimiter
idx = np.concatenate([[0], 1 + np.diff(g).nonzero()[0]])
delimiter
seq == list(range(seq[0], seq[0] + len(seq), 1))
delimiter
self.sock = socket
delimiter
p.parse_args()
delimiter
setattr(someobject, foostring, value)
delimiter
blockLengthY = np.argmin(a[:, (0)] == a[0, 0])
delimiter
obj.__dict__
delimiter
[i for i in l if s in i]
delimiter
platform.python_implementation()
delimiter
out = subprocess.check_output(args, startupinfo=startupinfo)
delimiter
dlfile(url)
delimiter
lth = len(spitches)
delimiter
cursor = conn.cursor()
delimiter
fig, ax = plt.subplots(nrows=nrow, ncols=ncol)
delimiter
plt.imshow(img)
delimiter
df.apply(pd.Series.nunique)
delimiter
logger.addHandler(log_handler1)
delimiter
res = [0] * (len(_s) + len(_v) - 1)
delimiter
object_list.sort(key=lambda x: key_precedence.get(x.key, default))
delimiter
b.save()
delimiter
df.drop(df.std()[df.std() < threshold].index.values, axis=1)
delimiter
self
delimiter
print(sum(1 for _ in next(groupby(l), [[], []])[1]))
delimiter
hehe = MyCallable()
delimiter
data_frame.to_csv(file_path, index=False)
delimiter
start_date = self.start_date + add_days
delimiter
dateString = parser.parse(string, fuzzy=True)
delimiter
z = hstack2((x, y))
delimiter
opener = urllib.request.build_opener(proxy_handler)
delimiter
root = Tk()
delimiter
a = np.random.random((100, 100, 100))
delimiter
monday1 = d1 - timedelta(days=d1.weekday())
delimiter
m.select()
delimiter
attachment = MIMEText(f.read())
delimiter
values = set(map(lambda x: x[1], list))
delimiter
ax.add_patch(r2)
delimiter
print(cleansed)
delimiter
json.dumps(*args, **kwargs)
delimiter
response = urllib.request.urlopen(crawling)
delimiter
parser = xml.sax.make_parser()
delimiter
new_list.append(list[i])
delimiter
pygame.quit()
delimiter
self.queue.task_done()
delimiter
intervals.sort(key=lambda x: (x.end, x.end - x.start))
delimiter
populations = {}
delimiter
this_array[indices[0]:next_i].fill((before + after) / 2)
delimiter
same(cont1, cont2, value_same)
delimiter
layer.draw()
delimiter
f.read()
delimiter
pygame.init()
delimiter
L = []
delimiter
a = list(range(1, 6))
delimiter
namespaceURL = resolved.namespace()[1]
delimiter
{{field.field}}
delimiter
zombie = Vector2(zombie.rect.x, zombie.rect.y)
delimiter
bin_ip = socket.inet_aton(ip)
delimiter
print(NSScreen.mainScreen().frame())
delimiter
task.delay(arg1, arg2)
delimiter
neat_data = z.read(z.namelist()[0])
delimiter
ser = pd.Series(np.random.normal(size=1000))
delimiter
(k for k, _ in self._list)
delimiter
sys.exit(app.exec_())
delimiter
xi = np.array([0.0, 0.5, 1.0])
delimiter
dir()
delimiter
session.add(w)
delimiter
array(1)
delimiter
img = img.quantize(palette=palette_img)
delimiter
sys.argv.pop()
delimiter
output_dict[int(key)] = [int(item) for item in value]
delimiter
(lambda : x).__closure__[0], set_cell
delimiter
module = loader.find_module(name).load_module(name)
delimiter
arr = [int(num) for num in str_arr]
delimiter
print(Foo())
delimiter
math.exp(result)
delimiter
bins.append(x1)
delimiter
cv2_im = cv2.cvtColor(cv2_im, cv2.COLOR_BGR2RGB)
delimiter
x = v[-1:]
delimiter
self.handler.flush()
delimiter
logger.addHandler(mh)
delimiter
ps = [(x + dx, y + dy) for (x, y), (dx, dy) in it.product(points, offsets)]
delimiter
norm = np.linalg.norm(v)
delimiter
print(list(myDict.keys())[i])
delimiter
ps_process.stdout.close()
delimiter
deleted[k]
delimiter
session2 = Session()
delimiter
self.button.pack()
delimiter
a = np.hstack([88, a, 77])
delimiter
print(words.count(word), word)
delimiter
np.nan == np.nan
delimiter
k = arr.shape[0] / 2
delimiter
all(values == 0)
delimiter
divider = make_axes_locatable(ax)
delimiter
-a * (np.exp(-t / c) - np.exp(-t / b)) / (b - c)
delimiter
a = np.random.random(100)
delimiter
self.send_error(500)
delimiter
myNames.append(line.strip())
delimiter
self.i += 1
delimiter
x = np.linspace(0, 1, 100)
delimiter
test2list = test2filehandle.readlines()
delimiter
tweets.append(json.loads(line))
delimiter
i = np.arange(0, len(pts))
delimiter
timeout_timer.cancel()
delimiter
np.where(x > y, x + y, x - y)
delimiter
ax.add_patch(r1)
delimiter
y[::REPLACE_EVERY_Nth] = REPLACE_WITH
delimiter
fig.canvas.draw()
delimiter
modules.clear()
delimiter
results = results.exclude(published=False)
delimiter
o.x = o.x.__iadd__(5)
delimiter
fig, axs = plt.subplots(1, 2, figsize=(8, 5))
delimiter
ax.quiver(x, y, z, u, v, w, length=0.1)
delimiter
dftmtx = lambda N: np.fft.fft(np.eye(N))
delimiter
tcflush(sys.stdin, TCIOFLUSH)
delimiter
it = iter(iterable)
delimiter
diff = np.diff(a, axis=0)
delimiter
l1.append(l2)
delimiter
excel.Application.Quit()
delimiter
out = process.stdout.read(1)
delimiter
ax1 = fig.add_subplot(5, 4, 1)
delimiter
plt.hold(False)
delimiter
res = ((t, nt(*t)) for t in pairs)
delimiter
xs = dict.fromkeys(list(range(2)), a)
delimiter
app = QApplication([])
delimiter
pairs.append([i, list1.index(elem)])
delimiter
filtertype = 0
delimiter
interlaced = 0
delimiter
root_log_handler = logging.handlers.RotatingFileHandler(file_1, *args)
delimiter
soup = BeautifulSoup(data)
delimiter
contains_vectorized = np.vectorize(contains)
delimiter
wordbank[word] += 1
delimiter
somelist[:] = filterfalse(determine, somelist)
delimiter
arq.close()
delimiter
rpy2.robjects.numpy2ri.activate()
delimiter
self.PrepareDC(dc)
delimiter
A = np.zeros((6, 6))
delimiter
width = measure.winfo_width()
delimiter
mainwin.add(notebook)
delimiter
True
delimiter
st.seed.widget.clamp_to_bounds = False
delimiter
self.audio = pyaudio.PyAudio()
delimiter
print(r.name)
delimiter
print(parser.parse_args())
delimiter
numpy.extract(choice, a)
delimiter
group.append(item)
delimiter
a.n
delimiter
root = Tk()
delimiter
width, height = image.size
delimiter
writer.writerow(fieldnames)
delimiter
plt.plot(df[c])
delimiter
self._driver = WebDriver()
delimiter
[2, 1, 8, 7, 6, 5, 4]
delimiter
json_data = json.loads(data)
delimiter
P.show()
delimiter
print(response.geturl())
delimiter
assertSequenceEqual(seq1, seq2)
delimiter
x = np.random.rand(5, 2)
delimiter
parser = argparse.ArgumentParser()
delimiter
out = p.stdout.readline()
delimiter
quitjupyter
delimiter
now - then > timedelta(hours=1)
delimiter
writer = csv.DictWriter(f, fieldnames=headers)
delimiter
loop.run_until_complete(main())
delimiter
newList.append(oldList[i])
delimiter
result = numpy.empty((len(r), r.max()), data.dtype)
delimiter
d = datetime.date(2011, 7, 2)
delimiter
window.set_size_request(200, 100)
delimiter
color_list.sort(key=get_hsv)
delimiter
ax = plt.gca()
delimiter
decompressed = zlib.decompress(data)
delimiter
structured_scrubbed = json.loads(scrubbed)
delimiter
self
delimiter
f.seek(offset)
delimiter
type(name, bases, attrs)
delimiter
ax1 = fig1.add_subplot(111)
delimiter
list1[:position] + list2 + list1[position:]
delimiter
matching.append([subpattern])
delimiter
self.delete(*a, **kw)
delimiter
ch = logging.StreamHandler()
delimiter
self.resize(minimumSizeHint())
delimiter
print(repr(line))
delimiter
print(cron4)
delimiter
assert False
delimiter
plt.subplot2grid((4, 4), [0, 1], 2, 2)
delimiter
m.group(0)
delimiter
{parts[0]: pack(parts[1:])}
delimiter
P.drawOn(canvas, 10, 10)
delimiter
a = np.arange(1, 4)
delimiter
prod = session.query(Product).filter(Product.id == 1).one()
delimiter
maxvi = np.argsort(a, axis=1)
delimiter
h.start()
delimiter
-hound
delimiter
opener = urllib.request.build_opener(*handlers)
delimiter
xp = np.sum(Z, axis=0)
delimiter
False
delimiter
indices = [idx for idx, value in enumerate(a2) if value in wanted]
delimiter
a, b
delimiter
d = {k: d2[v] for k, v in list(d1.items())}
delimiter
colnames = colnames[-1:] + colnames[:-1]
delimiter
fig, ax = plt.subplots()
delimiter
b = np.random.randint(n, size=k)
delimiter
device.close()
delimiter
response
delimiter
data[i] = row
delimiter
data = f.read()
delimiter
self.inner_sizer.Add(self.tin, 1, wx.LEFT | wx.RIGHT | wx.EXPAND, 50)
delimiter
layout.addWidget(buttons)
delimiter
df = pd.DataFrame(np.random.random((5, 5)))
delimiter
lambda x: x + n
delimiter
print(repr(e))
delimiter
mylist = sorted(mylist, key=keyfunc)
delimiter
print(n)
delimiter
lowers.append(word) if word.islower() else other.append(word)
delimiter
cbar_ax.set_axes_locator(get_ax_loc)
delimiter
x[0].upper() + x[1:]
delimiter
name = models.CharField(max_length=200)
delimiter
np.random.seed(0)
delimiter
int(s, 16)
delimiter
print(dict(urlparse.parse_qsl(qs)))
delimiter
print(token.access_token)
delimiter
min, max = [f(x, y) for f in (min, max)]
delimiter
s(*args, **kwargs)
delimiter
self._a = A()
delimiter
float(x)
delimiter
plt.show()
delimiter
url_queue.join()
delimiter
clf = svm.SVC()
delimiter
list(self.values())
delimiter
bg.paste(im, im)
delimiter
x = [1, 1, 1, 2, 2, 2, 1, 1, 1]
delimiter
resplot = res.plot()
delimiter
app = Flask(__name__)
delimiter
(df > 2) & (df < 10)
delimiter
tornado.web.Application.__init__(self, handlers)
delimiter
fig.set_size_inches(8, 11)
delimiter
setup(ext_modules=ext_modules())
delimiter
canvas.config(width=interior.winfo_reqwidth())
delimiter
f()
delimiter
destinition.put_data(data)
delimiter
max(k for k in d if k < key)
delimiter
list((Counter(a) - Counter(set(a))).keys())
delimiter
plt.axis([-2, 2, -1, max(len(set1), len(set2)) + 1])
delimiter
a = y(aVariable, bVariable)
delimiter
print(numpy.bincount(B.ravel(), weights=A.ravel()))
delimiter
print_x()
delimiter
window_before = driver.window_handles[0]
delimiter
q.queue.clear()
delimiter
stringer.esc_statuses[name]
delimiter
self.timeout = loop_time
delimiter
tree = {}
delimiter
counter = Counter(list(d.values()))
delimiter
__builtins__.list
delimiter
data.dtype
delimiter
a[b] = a, b
delimiter
mv[0], mv[1], mv[2]
delimiter
G.add_node(child)
delimiter
data.commit()
delimiter
parser.feed(data)
delimiter
a * b
delimiter
df.T.fillna(s).T
delimiter
[model]
delimiter
root = Tk()
delimiter
test = re.compile(pat(self.__MEMBER_TYPES), re.IGNORECASE)
delimiter
list((expected - found).elements())
delimiter
numbers = [random.randint(a, b) for i in range(10)]
delimiter
input_queue = Queue.Queue()
delimiter
HTML(play_beep)
delimiter
self.name = name
delimiter
first_name, last_name = get_name()
delimiter
print(fig.canvas.get_supported_filetypes())
delimiter
approximate_fraction((1 + math.sqrt(5)) / 2, 1e-05)
delimiter
deleteordered_dict[i]
delimiter
result = (count * phyQP + 1) / float(pubKeyExpo)
delimiter
clf.fit(X_train.values, y_train.values)
delimiter
hello()
delimiter
form = SomeForm(request.POST, request.FILES)
delimiter
plt.plot(np.cumsum(np.random.randn(1000, 1)))
delimiter
f = plt.figure()
delimiter
lookup_list.append([lookup[l].index(v) for l, v in zip(labels, msg)])
delimiter
c = np.equal(a, b)
delimiter
print(args.options)
delimiter
time.sleep(2)
delimiter
len(lst) - 1 - r_idx
delimiter
ax.scatter(x, y, color=rgb)
delimiter
self.app(environ, start_response)
delimiter
s.format(x=1)
delimiter
self.ax = self.fig.add_subplot(1, 1, 1)
delimiter
print(item.text)
delimiter
water_held
delimiter
sorted(value)
delimiter
[]
delimiter
matrix[0][2]
delimiter
s.count(s[0]) == len(s)
delimiter
print(event.widget.find_closest(event.x, event.y))
delimiter
df.dtypes
delimiter
p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
delimiter
rslt.append((x + dx, y + dy))
delimiter
hdf5_file.close()
delimiter
myseries_one.iloc[0]
delimiter
ga.login()
delimiter
PLT.show()
delimiter
[([0] * n) for _ in range(m)]
delimiter
swin.pack()
delimiter
list_size_1.append(row)
delimiter
print(random_date(d1, d2))
delimiter
sdl2.SDL_SetRenderDrawColor(renderer, 255, 255, 255, alpha)
delimiter
deactivate
delimiter
user = oauth.get_current_user(SCOPE)
delimiter
f.read(128)
delimiter
reactor.listenUDP(8000, EchoUDP())
delimiter
node_count = sum(1 for _ in db.getAllNodes().iterator())
delimiter
main()
delimiter
self.queue = Queue(1)
delimiter
print(target_list[~numpy.in1d(list(range(len(target_list))), to_exclude)])
delimiter
func(self.val)
delimiter
loggify(Working)
delimiter
result += sorted(sublist, key=g)
delimiter
smallfile.write(line)
delimiter
plt.show()
delimiter
df
delimiter
__f
delimiter
self.listener.close()
delimiter
df.replace(to_replace=to_replace, value=vals, regex=True)
delimiter
pageContent.readline()
delimiter
data_rescaled = data_rescaled.astype(np.uint8)
delimiter
ax0c = fig.add_axes([0.1, 0.68, 0.8, 0.25], sharex=ax0a)
delimiter
wb.Close()
delimiter
paw = paw.flatten()
delimiter
minval = min(a)
delimiter
a + b * 2 > 5
delimiter
self.root.lift()
delimiter
newkeywords.update(fkeywords)
delimiter
deletet[5:]
delimiter
obj = someClass()
delimiter
self.__dict__.update(tmp_dict)
delimiter
dict.__getitem__(self, key)
delimiter
logger.addHandler(fhan)
delimiter
ax.scatter(data[:, (0)], data[:, (1)], c=point_values)
delimiter
path = urlparse.urlparse(url).path
delimiter
Sets[userID].add(rowID)
delimiter
newdict[0].append(100)
delimiter
self.audio_frames.append(data)
delimiter
print(a == b)
delimiter
pyplot.gca().add_line(line)
delimiter
f.seek(0, 2)
delimiter
print(x, y)
delimiter
sample = np.random.rand(n, 1)
delimiter
sm = plt.cm.ScalarMappable(cmap=my_cmap, norm=plt.Normalize(vmin=0, vmax=1))
delimiter
answer = [item[0] for item in counter_list if item[1] == max_occurrences]
delimiter
con.rollback()
delimiter
data[(-1), :]
delimiter
f = os.open(filename, os.O_RDWR)
delimiter
win.window.input_shape_combine_mask(bitmap, 0, 0)
delimiter
os._exit(0)
delimiter
futures = [c.submit(f, future, param) for param in params]
delimiter
coordinates = [(c for c in l.split()) for l in f]
delimiter
self.clicked.connect(self._handle_click)
delimiter
GST_REGISTRY
delimiter
some_object
delimiter
b[:, :, (1)]
delimiter
img = adobe_to_srgb(img)
delimiter
server.rcpt(toaddrs[0])
delimiter
print(evil_vals[0] in dict_with_evil_keys)
delimiter
parser = argparse.ArgumentParser()
delimiter
execute()
delimiter
f.write(page.read())
delimiter
self.__dict__.update(state)
delimiter
printTable(curPG.fetchall(), [c.name for c in curPG.description])
delimiter
reverse[value].append(key)
delimiter
form = ModelForm(request.POST, request.FILES, instance=obj)
delimiter
plt.imshow(img, zorder=0, extent=[0.5, 8.0, 1.0, 7.0])
delimiter
b().mymethod()
delimiter
unittest.main()
delimiter
[x for x in lst if x.isalpha()]
delimiter
decorator
delimiter
create_dict()
delimiter
type(BT)
delimiter
new = np.repeat(old[jump_indices], repeats)
delimiter
list(set(a).intersection(set(b)))
delimiter
port = server_sock.getsockname()[1]
delimiter
_draw_points(i, 0)
delimiter
self.members = 0
delimiter
(-4) ** 2
delimiter
cache[object_to_cache_as_string] = object_to_cache
delimiter
songsJSON = json.dumps(songs)
delimiter
ax.set_ylim(bottom=0)
delimiter
(np.arange(n) - dfill(b))[i]
delimiter
a = A()
delimiter
somedict = dict.fromkeys(somelist, 1)
delimiter
classes[name] = type(name, bases, {})
delimiter
print(output)
delimiter
tokens = list(tokenize(stream))
delimiter
f[0](f[1:])
delimiter
datetime.fromtimestamp(local.timestamp())
delimiter
args = parser.parse_args()
delimiter
fft_axes.set_ylim([0, 1000])
delimiter
surf2.fill(TRANSPARENT)
delimiter
_marker_type_key = db.Column(db.Integer, primary_key=True)
delimiter
Row(1.0, Vectors.sparse(4, Seq((0, -1.0), (2, 0.5))))
delimiter
your_template.render(timesince)
delimiter
print(args)
delimiter
print(type(img_str))
delimiter
a.shape
delimiter
time.sleep(N)
delimiter
print([n for n in map(test.giveMyNum, q) if n > 1])
delimiter
months = cdiff.DATE.map(lambda x: x.month)
delimiter
soup = BeautifulSoup(html)
delimiter
self.data.append(s)
delimiter
parser.print_help()
delimiter
screen = pygame.display.get_surface()
delimiter
matrix = np.zeros((5, 5))
delimiter
all(c in it for c in x)
delimiter
kmeans_m.fit(X_hat, max_iter=100, number_of_runs=10)
delimiter
my_func.foo
delimiter
a = Test()
delimiter
ndata[0] = 2
delimiter
form = MicroForm(request.POST)
delimiter
newfunc(*args, **kw)
delimiter
b = dict([next(iter(x.items())) for x in bar])
delimiter
df = DataFrame(books).T.fillna(0)
delimiter
environment = jinja2.Environment()
delimiter
p2 = Polygon(ring2.coords)
delimiter
wr = csv.writer(csvfile, quoting=csv.QUOTE_ALL)
delimiter
fig = plt.figure()
delimiter
print([i for i, (a, b) in enumerate(zip(it1, it2), 1) if a != b])
delimiter
run(reloader=True)
delimiter
next_message.save()
delimiter
self.finished.emit()
delimiter
get(remote_path, fd)
delimiter
s, img = cam.read()
delimiter
A = np.array([[2, -1, 0], [-1, 2, -1], [0, -1, 2]])
delimiter
register_blueprints(app)
delimiter
mark_safe(template % substitutions)
delimiter
lines = file.readlines()
delimiter
print(str(soup))
delimiter
count = lambda x: collections.Counter(c for c in x.lower() if c.isalpha())
delimiter
c2.setopt(pycurl.PROXYPORT, 8081)
delimiter
plt.tight_layout()
delimiter
ax = plt.gca()
delimiter
line.set_ydata(sin(x + i / 10.0))
delimiter
divmod(10.5, 1)
delimiter
shutil.move(file, destination)
delimiter
my_list[1]()
delimiter
pygame.quit()
delimiter
Map(fold=lambda f, g: g(x), bimap=lambda f, g: Right(g(x)))
delimiter
x = Obj.objects.create(name=foo)
delimiter
Thread(target=runCommand, args=(command,)).start()
delimiter
stdout, stderr = process.communicate()
delimiter
angle = np.linspace(0, 2 * np.pi, arclen * 2, endpoint=False)
delimiter
grouped.get_group(False)
delimiter
os.getpid()
delimiter
req = QNetworkRequest(QUrl(url))
delimiter
fmap
delimiter
Fx = np.random.choice(np.array([-1, 0, 0, 1], dtype=np.int8), size=(iters, n))
delimiter
self.hbox.addWidget(self.label)
delimiter
debug(str(s))
delimiter
mod = sys.modules[name]
delimiter
p = bokeh.plotting.figure(x_range=(0, 4), y_range=(0, 4), plot_height=200)
delimiter
args = parser.parse_args()
delimiter
s == c_string
delimiter
im = sess.run(img_tf)
delimiter
print(generate_list(1000))
delimiter
print(list(M.values()))
delimiter
show(p)
delimiter
Dinvs = np.sum(Dinv)
delimiter
df = pd.DataFrame(new_data)
delimiter
gtk.main_quit()
delimiter
fh.close()
delimiter
d[parts[0]] = d.get(parts[0], []) + [parts[1]]
delimiter
code = models.CharField(max_length=255)
delimiter
np.polynomial.polynomial.polyfit(x, y, 4)
delimiter
fig = plt.figure()
delimiter
print(neighbors(A, 0, 0))
delimiter
decorator
delimiter
print(parsed.getroot())
delimiter
cgen = (cm(1.0 * i / NUM_COLORS) for i in range(NUM_COLORS))
delimiter
sys.stdout.write(msg.ljust(minwidth))
delimiter
pickle.dump(member, f, pickle.HIGHEST_PROTOCOL)
delimiter
x.append([x] * 5)
delimiter
plt.show()
delimiter
tcpCliSock.send(outputdata[i])
delimiter
df[df[cols] < 0] = np.nan
delimiter
issubclass(QuizForm, forms.Form)
delimiter
a_thread.start()
delimiter
thiserr = numpy.mean(better_errs)
delimiter
x = np.arange(2)
delimiter
my_dict = defaultdict(dict)
delimiter
f()
delimiter
print(row0)
delimiter
self.a = a
delimiter
f.close()
delimiter
DOT11_CIPHER_ALGO_RSN_USE_GROUP = 256
delimiter
writer.writerows(data)
delimiter
rght += 1
delimiter
root = Tk()
delimiter
train_loader = data_utils.DataLoader(train, batch_size=50, shuffle=True)
delimiter
self.xlBook.Close()
delimiter
myList
delimiter
x = x[:, (np.newaxis)]
delimiter
np.less_equal(abs(x - y), atol + rtol * abs(y))
delimiter
s2 = zlib.decompress(s1)
delimiter
p2.stdin.close()
delimiter
worksheet.write_string(1, 0, name_entry)
delimiter
wb.save(response)
delimiter
array_foo(a)
delimiter
fig, ax = plt.subplots()
delimiter
self.append(PoiData(lat, lon))
delimiter
obj = MyClass()
delimiter
data = cur.fetchall()
delimiter
fullname = os.path.join(path, filename)
delimiter
decay_rate = 2e-06
delimiter
connection.engine.execute(myClass.__table__.insert(), l)
delimiter
x = np.arange(10)
delimiter
parent_parser = argparse.ArgumentParser(add_help=False)
delimiter
MyThread(self.on_thread_finished).start()
delimiter
output_header.append(input_header[column_index])
delimiter
f.write(text2save)
delimiter
self.central.deleteLater()
delimiter
os.close(out_fd)
delimiter
torinfo = handle.get_torrent_info()
delimiter
prev_weekday(date(2012, 8, 20))
delimiter
popt, pcov = optimize.curve_fit(func, x, y, sigma=sigma, maxfev=10000)
delimiter
[v for _, v in sorted(zipped, key=key)]
delimiter
crsr.execute(sql)
delimiter
key[index].reshape(a.shape)
delimiter
self.stream.write(msg)
delimiter
ax.get_yaxis().set_visible(False)
delimiter
print(lucky(50))
delimiter
f = urllib.request.urlopen(req)
delimiter
walkDict(myDict, filterFor)
delimiter
B.date.apply(lambda x: in_range(x, A.start, A.finish))
delimiter
root = tree[0]
delimiter
loop.run_until_complete(main())
delimiter
object_id = models.PositiveIntegerField()
delimiter
instance.work.save()
delimiter
plot_implicit(goursat_tangle)
delimiter
b.append(4)
delimiter
client = Client(host, port)
delimiter
e + hyperbola(xcos - hsin, *pars) * np.cos(th) + xcos - hsin
delimiter
seen.add(x)
delimiter
self.already_computed.extend(itertools.islice(self.it, n))
delimiter
fig = plt.figure()
delimiter
temp_list.append(np.nan)
delimiter
result = np.empty_like(X)
delimiter
answer.append((key, length(iter)))
delimiter
f1.seek(0)
delimiter
os.remove(csvfile)
delimiter
string.decode(i)
delimiter
foo(z) + 1
delimiter
python - V
delimiter
output = sorted([1] * k + [0] * (n - k), key=lambda k: random.random())
delimiter
nearness[min(nearness.keys())]
delimiter
m = np.array([[1, 0, 1], [0, 1, 0], [1, 0, 1]])
delimiter
lens = np.array([len(item) for item in listvalues])
delimiter
plt.plot(np.arange(10) + i)
delimiter
file_path = os.path.join(folder, the_file)
delimiter
session.flush()
delimiter
zf.close()
delimiter
exit(0)
delimiter
0, 1, 8, 27
delimiter
a2[:x], a1[:x] = a1[:x], tmp
delimiter
result
delimiter
next(it)
delimiter
print(b.__dict__)
delimiter
context = {}
delimiter
func
delimiter
ax1 = fig.add_subplot(111)
delimiter
arr2 = np.arange(10).reshape(2, 5)
delimiter
fig, ax = plt.subplots(1, figsize=(16, 16))
delimiter
soup = BeautifulSoup(xml)
delimiter
Z.data *= Y[Z.indices]
delimiter
result.append(idx)
delimiter
cert_pem = OpenSSL.crypto.dump_certificate(OpenSSL.crypto.FILETYPE_PEM, cert)
delimiter
exit(0)
delimiter
setence_list.append(word)
delimiter
os.close(fout)
delimiter
de.show()
delimiter
main()
delimiter
sorted(tuples, key=lambda x: x[2])[:10]
delimiter
sys.getsizeof(w)
delimiter
mask[1:] |= mask[:-1].copy()
delimiter
col_sums = numpy.zeros_like(img)
delimiter
s = a[:, (np.array(second).reshape(-1, 1)), (third)]
delimiter
pathname = os.path.dirname(sys.argv[0])
delimiter
importlib.reload
delimiter
table = cur.fetchall()
delimiter
setattr(Something, name, decorator(fn))
delimiter
self.saver.restore(self.session, fn)
delimiter
self.send_response(401)
delimiter
asyncore.dispatcher.__init__(self)
delimiter
pprint(mindict)
delimiter
[0, 1, 2],
delimiter
[1, 5, 5, 5, 5]
delimiter
id = db.Column(db.Integer, primary_key=True)
delimiter
f()
delimiter
sys.stdout = logger
delimiter
spam.update()
delimiter
my_time_list
delimiter
plt.subplot2grid((4, 4), [2, 2], 2, 2)
delimiter
set(myDict) & set(myList)
delimiter
pl.show()
delimiter
sys.path.append(os.getcwd())
delimiter
print(retrieve_name(y))
delimiter
os.path.normpath(mypath) + os.sep
delimiter
redistributed_points.extend(attracted_point_list(g, a, f))
delimiter
output[item] = line[i + 1] = i
delimiter
c = [value for pair in zip(a, b[::-1]) for value in pair]
delimiter
print(r[numpy.isreal(r)])
delimiter
df
delimiter
sdata = np.sort(data, axis=1)
delimiter
filename = sys.argv[1]
delimiter
fin.seek(0)
delimiter
np.nan
delimiter
output_queue.put(process_me)
delimiter
Maybe(maybe.calc(lambda x: x * 2))
delimiter
Xflip = flipall(X)
delimiter
556, 27.0
delimiter
s.close()
delimiter
d = OrderedDict([a, b, c])
delimiter
print(type(fresult.col1.iat[1]))
delimiter
fit_df = df.dropna()
delimiter
session = requests.session()
delimiter
print(urlparse.urlunparse(newurl))
delimiter
run_wsgi_app(application)
delimiter
post_data = request.input_buffer.read(-1)
delimiter
b().mymethod()
delimiter
zip(list, list)
delimiter
x = [0, 0, 1, 1, 2, 2]
delimiter
s = etree.tostring(root, pretty_print=True)
delimiter
arr[unconverged] -= f_g[new_unconverged] / fp(arr[unconverged])
delimiter
((a > 0) & (a < 1)).sum()
delimiter
print(urlparse.urljoin(testurl, urlparse.urlparse(cleaned).path))
delimiter
plt.show()
delimiter
plt.colorbar()
delimiter
as_dict = dict(is_even)
delimiter
l2 = [4, 5, 6]
delimiter
blob_key = str(urllib.parse.unquote(blob_key))
delimiter
result = [separator.join(map(str, r)) for r in result]
delimiter
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
parser = argparse.ArgumentParser()
delimiter
today = datetime.now(tz).date()
delimiter
foo.__code__.co_argcount
delimiter
subtxt = txt[i:j]
delimiter
datetime.fromtimestamp(value)
delimiter
fout.close()
delimiter
datetimes = [(now - dt.timedelta(hours=6) * i) for i in range(10)]
delimiter
self.fh.close()
delimiter
self.hbox.addWidget(self.txted)
delimiter
f.truncate()
delimiter
True
delimiter
printArray([str(Array[i][j]) for j in j_indices])
delimiter
a, b = min(a, b), max(a, b)
delimiter
trip = models.ForeignKey(Trip)
delimiter
print(make_hash(foo.__dict__))
delimiter
widget = QWidget()
delimiter
l[1]
delimiter
self.stdout = sys.stdout
delimiter
print((letter, count))
delimiter
df.columns = df.columns.swaplevel(0, 1)
delimiter
tuple(sorted(a.items()))
delimiter
np.tril(df.unstack().values, -1).sum()
delimiter
d[type(x)].append(x)
delimiter
im1 = im.resize((tilesize, tilesize), Image.BILINEAR)
delimiter
assert np.allclose(C1[:-1, :-1, :-1], C4)
delimiter
heapq.heapify(a)
delimiter
x[1] - x[0]
delimiter
parents[b].append(a)
delimiter
primary_language = Column(String(50))
delimiter
a /= a.sum()
delimiter
print(info.get_content_subtype())
delimiter
db.session.expunge(product_obj)
delimiter
generalizedEuclidianAlgorithm(b, a)
delimiter
print(q.get())
delimiter
print(ttaken)
delimiter
print(dectest.test(a))
delimiter
sum(abs(a - b) for a, b in zip(A, B))
delimiter
201412
delimiter
counts = collections.Counter(map(tuple, c))
delimiter
deleteself.right[0:x]
delimiter
out = np.split(list1.ravel()[sidx], cut_idx[1:-1])
delimiter
dates.hist()
delimiter
members.append(target.id)
delimiter
print(repr(dest))
delimiter
b = numpy.array([0, 0, 0, 0, 1, 1])
delimiter
type(s)
delimiter
result += str(r)
delimiter
print(key.hash())
delimiter
actions = webdriver.ActionChains(browser)
delimiter
power(lambda x: x * 2, 0)(9)
delimiter
pp.pformat(my_dict)
delimiter
test(**dicC)
delimiter
self.finished.emit()
delimiter
painter.draw_box(*args, **kwargs)
delimiter
vbox.addWidget(self.previewImage)
delimiter
foo(a + b + c)
delimiter
path.append(k.id_or_name())
delimiter
sum(s[idx] == j for idx, j in enumerate(s, 1) if idx != len(s))
delimiter
b = np.array([False, True, True, False])
delimiter
ll = list(chain.from_iterable(repeat(e, 2) for e in l))
delimiter
device = TextConverter(rsrcmgr, retstr, codec=codec, laparams=laparams)
delimiter
i += 1
delimiter
print((i, j))
delimiter
item
delimiter
print(access_token)
delimiter
conn, addr = s.accept()
delimiter
count.most_common()
delimiter
user_input = []
delimiter
print(__file__)
delimiter
app = Flask(__name__)
delimiter
rpath
delimiter
[False, True, False, True]
delimiter
window.show()
delimiter
Post.objects.filter(userBy__id__in=friends_and_user)
delimiter
f = lambda x: Series(np.histogram(x, bins=bins)[0], index=bins[:-1])
delimiter
nextList.append(newString)
delimiter
today = datetime.now()
delimiter
res = requests.get(URL)
delimiter
os._exit(1)
delimiter
html = template.render(Context(data))
delimiter
view.resize(600, 400)
delimiter
trigram_measures = nltk.collocations.TrigramAssocMeasures()
delimiter
x = [], []
delimiter
self.Bind(wx.EVT_BUTTON, self.OnOkayCanButton, canButton)
delimiter
fs.delete()
delimiter
print(sorted(flatten(structure)))
delimiter
firefox_profile = webdriver.FirefoxProfile()
delimiter
hand = random.sample(DECK, 5)
delimiter
shape = np.array(arr.shape * 2)
delimiter
print(len(y))
delimiter
Graph().setThis(self._this.read(pathbytes))
delimiter
HTML(style + df_html)
delimiter
dis.dis(make_adder.__code__.co_consts[1])
delimiter
cur = conn.cursor()
delimiter
kd_vals = np.exp(kd.score_samples(x))
delimiter
val = map1[key]
delimiter
print(len(list))
delimiter
a = bar.a
delimiter
indices = [1, 4, 5, 6, 7]
delimiter
-0.11112
delimiter
plt.gca().xaxis.set_major_locator(plt.NullLocator())
delimiter
mutex.release()
delimiter
[(1, 5), (8, 11), (200, 202)]
delimiter
pool.join()
delimiter
array = np.zeros(10)
delimiter
x + y
delimiter
content = fd.read()
delimiter
[int(0.5 + 10 ** (i * 2 / 19.0)) for i in range(20)]
delimiter
x.strftime()
delimiter
memset(location, 0, size)
delimiter
window.show()
delimiter
image_file.write(chunk)
delimiter
sys.stdout = codecs.getwriter(output_encoding)(sys.stdout, errors=errors)
delimiter
print(list(find_ref_names(b)))
delimiter
a.write(f, os.path.relpath(f, root))
delimiter
n = random.uniform(0, weight_total)
delimiter
GO
delimiter
self.lineedit.setFocus()
delimiter
mask1 = logical_and(arange(10) > 5, arange(10) <= 8)
delimiter
math.acos(inner_product / (len1 * len2))
delimiter
s[s == 12]
delimiter
urllib.request.urlopen(req)
delimiter
mlab.outline(extent=(0, 1, 0, 1, 0, 1))
delimiter
data[line[0]].extend(line[1:])
delimiter
isinstance(f, numpy.float64)
delimiter
ax.xaxis.set_major_formatter(ticker.FixedFormatter(ticklabels))
delimiter
self.page.loadFinished.connect(self.save)
delimiter
y = x[mask]
delimiter
e = list(zip(*d))
delimiter
diff_seconds = (mytime - datetime.fromtimestamp(0)).total_seconds()
delimiter
ax = fig.add_subplot(111)
delimiter
tcpSerSock.listen(5)
delimiter
env.Depends(target[i], out)
delimiter
plt.show()
delimiter
sys.getsizeof(frozenset((1, 2)))
delimiter
overlap = df.index.to_series().diff().shift(-1)
delimiter
main()
delimiter
fig, ax = plt.subplots()
delimiter
ret = np.array([])
delimiter
print(df.iloc[(-1), :])
delimiter
m = np.arange(len(df))
delimiter
f(x) + 1
delimiter
f.close()
delimiter
print(result.shape)
delimiter
out[-1].append(element)
delimiter
app = Flask(__name__)
delimiter
a2 = np.split(a, [2, 4])
delimiter
plt.show()
delimiter
assert foo.bar == 5
delimiter
[joiner(words) for words in sixgrams]
delimiter
OrderedDict.__init__(self, *args, **kwargs)
delimiter
axes.set_frame_on(frame)
delimiter
mycsv = csv.reader(f)
delimiter
[(a, b) for i, a in enumerate(lst) for b in lst[i + 2:]]
delimiter
self.rect = Rectangle((0, 0), 1, 1)
delimiter
transsurface.set_alpha(50)
delimiter
print(str)
delimiter
merged[k].add(d1[k])
delimiter
result = {}
delimiter
app = Flask(__name__)
delimiter
result[line_number].append(line.strip())
delimiter
graphA = tf.Graph()
delimiter
plt.plot(list(range(10, 20)))
delimiter
print(df1.reindex(columns=comb, fill_value=0))
delimiter
output.append(pformat(environ))
delimiter
c = np.hstack((a, b))
delimiter
print(json.dumps(sample))
delimiter
fake_writer.writerows(data)
delimiter
somearray = np.random.random(100)
delimiter
data = []
delimiter
ids.extend(list(range(1, int(x[1:]) + 1)))
delimiter
self.assertEqual(1, c.count)
delimiter
(df - df2).combine_first(df).reindex_like(df).astype(int)
delimiter
print(str(node))
delimiter
ax = fig.add_subplot(111)
delimiter
resampled_values.diff()
delimiter
popen.wait()
delimiter
trimmed.pop(0)
delimiter
data = numpy.array([0, 0, 0, 2, 2, 0, 2, 2, 2, 0])
delimiter
h = hexbin(x, y, gridsize=10, mincnt=0)
delimiter
self.button = QtGui.QPushButton(self)
delimiter
form.save_m2m()
delimiter
stream.write(data_to_write)
delimiter
len(flows[maks]), maks
delimiter
dill.detect.badtypes(f)
delimiter
termios.tcsetattr(file.fileno(), termios.TCSADRAIN, new_attrs)
delimiter
new_failures = [t for t in tests1 if t not in tests2]
delimiter
ar(a) | ar(b) | ar(c)
delimiter
f(50, 50)
delimiter
R_in_six_sec_interval = [R[2] for R in filtered_data]
delimiter
self.causes
delimiter
_basedir = os.path.abspath(os.path.dirname(__file__))
delimiter
a * np.sqrt((b * c) ** 2 + (x - d) ** 2) / b + e
delimiter
self.clients.remove(client)
delimiter
classifier.show_most_informative_features()
delimiter
document.prettify()
delimiter
func(*args, **kwargs)
delimiter
print(row)
delimiter
s.partition(delim)[2]
delimiter
print(heapq.nsmallest(2, list1))
delimiter
tuple = tuple(l)
delimiter
self._list.insert(index, item)
delimiter
fig.colorbar(im, cax=cax)
delimiter
idcord.append(y1)
delimiter
print(hi.bye)
delimiter
raise SystemExit
delimiter
kernel = np.array([[-1, -1, 1], [-1, 1, 1], [-1, -1, 1]])
delimiter
signal.Signals(2).name
delimiter
raise AttributeError(msg.format(type(self).__name__, name))
delimiter
Maybe(100)
delimiter
im = numpy.array(img)
delimiter
im = Image.fromarray(A)
delimiter
d = np.searchsorted(a, np.setdiff1d(a, b))
delimiter
s.ioctl(socket.SIO_RCVALL, socket.RCVALL_ON)
delimiter
gen = (i for i in range(10))
delimiter
self.user.username
delimiter
eval(str, os.__dict__)
delimiter
method(*args, **kwargs)
delimiter
dict(zip(columnNames, args))
delimiter
key.set_contents_from_filename(object_name)
delimiter
screen_width = root.winfo_screenwidth()
delimiter
suite.addTest(suitefn())
delimiter
y + np.abs(y.min())
delimiter
self.name
delimiter
today.year - born.year
delimiter
pprint.pprint(d)
delimiter
print(list(merge(tup)))
delimiter
mix_arrays(A, B)
delimiter
Concate[A[i]] += B[i]
delimiter
pts = [(1, 1), (1, 10), (10, 10), (10, 1)]
delimiter
l = list(range(1, 100, 4)) + list(range(2, 100, 4))
delimiter
value.append((node_key, node_value))
delimiter
body = models.TextField()
delimiter
func
delimiter
signchange = (np.roll(asign, 1) - asign != 0).astype(int)
delimiter
cache.get(self.COUNTER_CACHE_KEY)
delimiter
type(name, bases, dict)
delimiter
self._pixels.append((x, y))
delimiter
B = np.array([2, 4, 6, 8])
delimiter
myBoxLayout.addWidget(self.listWidgetB)
delimiter
img[:, :, (0)] = numpy.ones([5, 5]) * 64 / 255.0
delimiter
(array[:-1] * array[1:] < 0).sum()
delimiter
l = s.split()
delimiter
print(self.left.PreOrder())
delimiter
cache[key]
delimiter
conn, addr = socket.accept()
delimiter
plt.scatter(xAsInts, y, color=color)
delimiter
xt = DataFrameImputer().fit_transform(X)
delimiter
a = np.sqrt(d)
delimiter
earth = 6e+24
delimiter
main(sys.argv)
delimiter
word.Quit()
delimiter
file.write(pickle.dumps(df))
delimiter
print(i)
delimiter
soup = bs4.BeautifulSoup(f)
delimiter
self.assertEqual(self.flushLoggedErrors(ValueError), 1)
delimiter
cur1 = conn.cursor()
delimiter
out.start()
delimiter
mock_last_transaction.assert_called_once_with()
delimiter
cpick.set_array([])
delimiter
g1.intersects(poly.ix[0])
delimiter
frame = inspect.currentframe()
delimiter
print((i, h, j))
delimiter
HTMLParser.HTMLParser.__init__(self)
delimiter
result[d[0]][d[1]] += 1
delimiter
self.x2 += self.speed * math.cos(self.bearing)
delimiter
sleep(1.5)
delimiter
print(response.read())
delimiter
p = subprocess.Popen(command, stderr=subprocess.PIPE)
delimiter
main()
delimiter
(1 == 1) & (2 == 2)
delimiter
main()
delimiter
d = dict(list(l.items()))
delimiter
self.root = Tk()
delimiter
self.setLayout(layout)
delimiter
print(sentence_dict)
delimiter
driver.get(self.login_page)
delimiter
scrollby.grid(row=7, column=5, rowspan=2, columnspan=1, sticky=N + S + E)
delimiter
phrase.upper()
delimiter
tagger = nltk.tag.UnigramTagger(model=model, backoff=default_tagger)
delimiter
ax.set_xticklabels(xlabels, rotation=20)
delimiter
f(*args, **kwargs)
delimiter
c1.my_numpies.append(mn2)
delimiter
df = df.reset_index()
delimiter
numpy.array(strings)
delimiter
p.stdout.close()
delimiter
writer = csv.writer(outcsv)
delimiter
s = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, False, 8, w, h)
delimiter
message = cipher.decrypt(ciphertext)
delimiter
my_file.write(b)
delimiter
db.session.commit()
delimiter
id = Column(Integer, primary_key=True)
delimiter
list([t for t in list(d1.items()) if t[1] == max(d1.values())])[0][0]
delimiter
image.set_at((x, y), (255, 255, 255, 0))
delimiter
d = np.ones((100,))
delimiter
y = np.random.normal(0, 1, num).cumsum()
delimiter
PyQt4.QtCore.QPoint(90, 6)
delimiter
num = num / 2
delimiter
pd.DatetimeIndex(df.date).normalize()
delimiter
raise cherrypy.HTTPRedirect(redirect_url)
delimiter
gtk.CellRendererPixbuf.__init__(self)
delimiter
a.remove(5)
delimiter
queryset = MyModel.objects.all()
delimiter
outbuff.append(line)
delimiter
exns.append(name)
delimiter
ax = plt.subplot(111)
delimiter
tocm = time.clock()
delimiter
df = df.copy()
delimiter
print(something)
delimiter
sys.stdin = sys.__stdin__
delimiter
mahotas.features.haralick(img).mean(0)
delimiter
a[:] = a[:].__iadd__(da)
delimiter
ax.set_xlim([np.min(X), np.max(X)])
delimiter
pd.isnull(df)
delimiter
print(df)
delimiter
json.dumps(json_d)
delimiter
x, y = im.size
delimiter
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
print((key, value))
delimiter
alen = len(data)
delimiter
ser.open()
delimiter
a.sum()
delimiter
new_list = []
delimiter
all_sessions = Session.objects.filter(expire_date__gte=datetime.datetime.now())
delimiter
xfmt = ticker.FuncFormatter(lambda x, pos: label_map[int(x)])
delimiter
print(eval(t))
delimiter
count += len(chunk)
delimiter
Py_Initialize()
delimiter
[capitalize_nested(s) for s in t]
delimiter
Response(response_data)
delimiter
labels = ax.get_xticklabels()
delimiter
body.append(rv)
delimiter
newlist2.append(s)
delimiter
[_heappop_max(h) for i in range(len(h))]
delimiter
result = result.astype(np.float64)
delimiter
y1[np.where(y1 == input_array.shape[1])] = y0.max()
delimiter
lclosure
delimiter
fb[:] = 0
delimiter
44718
delimiter
auth_handler = urllib.request.HTTPBasicAuthHandler()
delimiter
fig.show()
delimiter
someDictionary[zipped[0]] = zipped[1]
delimiter
clone_img = copy.copy(original_img)
delimiter
plt.show()
delimiter
self.delta += 1
delimiter
imshow(img_result)
delimiter
indata = f.read()
delimiter
max(mul(*heapq.nsmallest(2, l)), mul(*heapq.nlargest(2, l)))
delimiter
write_line(of, n, [0.1, 0.1, 0.1, 0.1])
delimiter
m = df.Col1.str.len().max()
delimiter
col = get_column_letter(col)
delimiter
union(jName, kName)
delimiter
path = os.path.normpath(path)
delimiter
clipboard = gtk.clipboard_get()
delimiter
NULL
delimiter
winlist = []
delimiter
aw1.show()
delimiter
rdd.take(5)
delimiter
1 == True
delimiter
np.exp(rebased_q - np.logaddexp(-max_q, np.logaddexp.reduce(rebased_q)))
delimiter
reader = java.io.BufferedReader(java.io.InputStreamReader(stream))
delimiter
cur = db().cursor()
delimiter
yourDate = parser.parse(yourString)
delimiter
data[k].append(i[1])
delimiter
[n[0] for n in sorted(zip(sorted(B), order), key=itemgetter(1))]
delimiter
M[numpy.where(M == 0)] = 1000
delimiter
getcontext()
delimiter
iter1, iter2 = zip(*compounded_iter)
delimiter
test()
delimiter
sorted_list = list(myDic.keys())
delimiter
rcsplit(np.array(i))
delimiter
figure()
delimiter
l.set_option(ldap.OPT_X_TLS, ldap.OPT_X_TLS_DEMAND)
delimiter
df
delimiter
self.setLayout(layout)
delimiter
d[x].append(i)
delimiter
bucket.delete_keys(delete_key_list)
delimiter
lines = f.readlines()
delimiter
user = int(user)
delimiter
main()
delimiter
json.dumps(namedtuple_asdict(a1))
delimiter
pprint(foo(10, depth=2))
delimiter
sys._getframe(back + 1).f_code.co_name
delimiter
max_sub = max(l, key=lambda x: x[1])
delimiter
func
delimiter
y = vfunc(x)
delimiter
indices = [i for i, x in enumerate(ar) if re.match(pattern, x)]
delimiter
ax = fig.add_subplot(111)
delimiter
True
delimiter
result.extend(itertools.combinations(x, len))
delimiter
percent = {key: (value / total) for key, value in list(c.items())}
delimiter
self.panel.SetFocus()
delimiter
out.append(np.median(y[mask]))
delimiter
np.unique(salesdata.Outlet_Size.dropna().values)
delimiter
mdata
delimiter
response = urllib.request.urlopen(request)
delimiter
{7, 8, 9, 10},
delimiter
combinations.append(x)
delimiter
httpd.serve_forever()
delimiter
reader = csv.DictReader(f)
delimiter
plt.subplot(222)
delimiter
t[v] = min(t[2 * v], t[2 * v + 1])
delimiter
data[i].some_key
delimiter
print(df)
delimiter
y = np.linspace(0, 2 * np.pi, ny)
delimiter
logger.setLevel(logging.INFO)
delimiter
e = int(e_str, 16)
delimiter
xdiff = [(x[n] - x[n - 1]) for n in range(1, len(x))]
delimiter
plt.plot(list(range(10)))
delimiter
value = models.CharField(max_length=100)
delimiter
console_handler = logging.StreamHandler()
delimiter
serializer_class = UserSerializer
delimiter
self.x + other.x
delimiter
heapq.heappush(heap, (-p1, x - 1, y))
delimiter
this_year = str(this_year)
delimiter
soup = bs(root)
delimiter
deletesys.modules[k]
delimiter
self.f.write(x)
delimiter
convert = lambda text: int(text) if text.isdigit() else text
delimiter
args.func(args)
delimiter
self.label.setMinimumSize(QtCore.QSize(450, 40))
delimiter
print(df.iloc[:, (rng)])
delimiter
args = parser.parse_args()
delimiter
print(perfect_numbers(n=5))
delimiter
do_something_with(line)
delimiter
fnan < pinf
delimiter
current_node.valid_subword
delimiter
copylist.append(singleobj)
delimiter
print(i)
delimiter
us1 / us2
delimiter
linspace_y = np.linspace(y_range[i], y_range[i], 100)
delimiter
screen = curses.initscr()
delimiter
alllists.append(addlist)
delimiter
w = w / 2
delimiter
new_tagged_words
delimiter
setattr(Cls, key, value)
delimiter
packet1.show()
delimiter
__future__.with_statement
delimiter
y_coords = new_array[:, (1)]
delimiter
os.chdir(destination)
delimiter
filtered_array = np.copy(array)
delimiter
object_id = models.PositiveIntegerField()
delimiter
timeit(easydiff1, easydiff2, 10000)
delimiter
resizes = img.resize(resolution, Image.ANTIALIAS)
delimiter
m, b = np.polyfit(x, y, 1)
delimiter
p = Presence()
delimiter
obj1[0], max(obj1[1], obj2[1]), min(obj1[2], obj2[2])
delimiter
strtime = str(datetime.now())
delimiter
print(item.key, item.doc_count)
delimiter
+globals().update(yak)
delimiter
df = pd.read_csv(tempfile)
delimiter
assert int(0) < 1.0 < [] < int(0)
delimiter
file, pathname, description = imp.find_module(name)
delimiter
p.haslayer(IP)
delimiter
__init__.py
delimiter
stdscr.getkey()
delimiter
print(x[i], y[i + 1], x[i + 1], y[i])
delimiter
self.counter = 0
delimiter
results.append(task.get())
delimiter
list(self._odict.keys())
delimiter
file_bytes = numpy.asarray(bytearray(img_stream.read()), dtype=numpy.uint8)
delimiter
x = numpy.ones(5)
delimiter
self.growChunk()
delimiter
p = ctypes.cast(void_p, ctypes.POINTER(ctypes.c_char))
delimiter
print(value)
delimiter
self.n = n
delimiter
s.cookies
delimiter
model_results = pickle.load(f)
delimiter
print(pool.map(f, list(range(10))))
delimiter
[0.0, 0.2, 0.4, 0.4, 0.0]
delimiter
p = im.getpixel((x, y))
delimiter
glfw.SetTime(0.0)
delimiter
DataDocumenter.add_directive_header = add_directive_header
delimiter
result = re.sub(p, subst, test_str)
delimiter
interpreter.process_page(page)
delimiter
angle = NumericProperty()
delimiter
values.append(value)
delimiter
message = messages.GetLast()
delimiter
x.stdin.close()
delimiter
np.arange(1, stop, step)
delimiter
self.write(json_encode(obj))
delimiter
csvwriter = csv.writer(csvfile)
delimiter
result
delimiter
merged.append((k, sum(e[1] for e in g)))
delimiter
m_recomposed = x + x.transpose() - np.diag(np.diag(x))
delimiter
results = mp.Queue()
delimiter
browser.save_screenshot(img)
delimiter
canvas.setPageSize((lWidth, lHeight))
delimiter
plt.semilogx(f, mag)
delimiter
self[key]
delimiter
Z.data *= Y.repeat(np.diff(Z.indptr))
delimiter
set(list1) | set(compSet)
delimiter
lock.release()
delimiter
host_data.append(host.serialize())
delimiter
p_classification = my_svc.predict(x_test)
delimiter
new_list.append({expression})
delimiter
app.exec_()
delimiter
frec(word[1:], values + [word[0]])
delimiter
os.waitpid(pid, 0)
delimiter
x - x.mean(axis)[ind]
delimiter
Time.place(x=0, y=0)
delimiter
y = np.array([0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1])
delimiter
self.label.lift(self.frame)
delimiter
len(wordorder)
delimiter
dd[item].append(idx)
delimiter
User.__unicode__ = User.get_full_name
delimiter
self.canvas = Canvas(self.tk, width=500, height=500)
delimiter
point_list.sort(key=lambda point: point[axis])
delimiter
b = 2 * N - 1
delimiter
funcs.append(lambda x, i=i: f(i, x))
delimiter
list(UndefinedSilently().items())
delimiter
ebks, ks = [], []
delimiter
menu.show_all()
delimiter
delta.total_seconds()
delimiter
int(round(math.log(v, 2), 0))
delimiter
print(freq_distribution.most_common(10))
delimiter
iterator.__iter__()
delimiter
result = proc.stdout.read()
delimiter
df[0].count()
delimiter
a.sum(axis=0)
delimiter
register = template.Library()
delimiter
result[nJ] = fun2(zeta[nJ])
delimiter
[list(x) for x in zip(*lis)]
delimiter
s = plt.subplot(1, 1, 1)
delimiter
canvas.pack()
delimiter
PyBUF_FULL_RO
delimiter
id = Column(Integer, primary_key=True)
delimiter
print(cmap(0.5))
delimiter
print(dftot.fillna(filldf))
delimiter
fig = plt.figure()
delimiter
pd_df = pandas2ri.ri2py_dataframe(rdf)
delimiter
fb = np.zeros((480, 640), dtype=np.uint8)
delimiter
res = list(message.DESCRIPTOR.fields.keys())
delimiter
df[2].replace(4, 17, inplace=True)
delimiter
plt.subplot(122, polar=True)
delimiter
p = mp.Pool(processes=2)
delimiter
x = np.random.rand(50)
delimiter
do_somethin(cell)
delimiter
df
delimiter
sum(v for v in args if args.count(v) == 1)
delimiter
slug = models.SlugField(max_length=255, unique=True)
delimiter
print(result)
delimiter
nx.append(x[-1])
delimiter
mask.dtype
delimiter
conn.end_request()
delimiter
device.close()
delimiter
c.execute(query)
delimiter
termios.tcsetattr(fd, termios.TCSANOW, new)
delimiter
is_staff = True
delimiter
x.set_visible(False)
delimiter
dstr = date.tolist()
delimiter
f.close()
delimiter
reallocate()
delimiter
np.tensordot(a, a, (1, 1))
delimiter
print(self.__dict__)
delimiter
list(islice(preresult, 100))[-10:]
delimiter
result = pool.apply_async(worker, args=())
delimiter
divmod(elapsedTime.total_seconds(), 60)
delimiter
code.interact(local=locals())
delimiter
print(uniqify(2))
delimiter
mylist.append(x)
delimiter
x = dict()
delimiter
out.writelines(lines)
delimiter
self.session.query(entity_type)
delimiter
main()
delimiter
B[X] = A
delimiter
a[1]
delimiter
axes.set_ylim([0, 70])
delimiter
a = 1 if b else a
delimiter
result = self._client.gremlin(script, params).one()
delimiter
main.show()
delimiter
Rect(p1.x, p1.y, p2.x, p2.y)
delimiter
offset += font.getsize(line)[1]
delimiter
message = headers + body
delimiter
f.seek(0)
delimiter
ws.set_panes_frozen(True)
delimiter
json.dumps(json.load(str_w_quotes))
delimiter
bar()
delimiter
datetime.datetime.fromtimestamp(float(time_in_secs))
delimiter
print(diff.total_seconds())
delimiter
skipsdist = True
delimiter
urllib.request.install_opener(opener)
delimiter
print(line)
delimiter
deleteself._this
delimiter
x.do_foo()
delimiter
os.makedirs(path)
delimiter
Matrix[0][0] = 1
delimiter
M.ix[0, 0]
delimiter
identity = np.identity(A.shape[2], dtype=A.dtype)
delimiter
deletetrees[i]
delimiter
assert A.shape[:-1] == B.shape[:-1]
delimiter
endforeach()
delimiter
module_dir = os.path.dirname(__file__)
delimiter
img = MIMEImage(fp.read())
delimiter
list(product(*[permutations(grp.index) for name, grp in age]))
delimiter
b = np.array([list(w.center(wid)) for w in a])
delimiter
lhash = hash(litem)
delimiter
logging.basicConfig(filename=LOG_FILENAME, level=logging.DEBUG)
delimiter
lowerList = [item.lower() for item in mylist]
delimiter
result = []
delimiter
x_df = df.iloc[map(int, ii)]
delimiter
print(np.allclose(Z1, Z2))
delimiter
plt.minorticks_off()
delimiter
str[:index] + str[endIndex:]
delimiter
aCash.sum() == (aCash & bNull).sum()
delimiter
os.waitpid(p.pid, 0)
delimiter
lock.acquire()
delimiter
yaml.load(stream, OrderedLoader)
delimiter
self._queue.cancel_join_thread()
delimiter
plt.cla()
delimiter
json.dump(d, o)
delimiter
[term_appearance.update(x) for x in texts_list]
delimiter
dict.__getitem__(self, item)
delimiter
newarray = [0] * n
delimiter
curtree = curtree.setdefault(c, {})
delimiter
hash(tuple(sorted(self.__dict__.items())))
delimiter
socket.send(empty, zmq.SNDMORE)
delimiter
violin_plot(ax, data, pos, bp=1)
delimiter
culled_list = [item for item in unculledlist if item % 10 in (0, 2, 4)]
delimiter
Tr
delimiter
plt.subplot(121)
delimiter
map(lambda x: x.start(), threads)
delimiter
m[i] = False
delimiter
W = tf.Variable(tf.zeros([784, 10]))
delimiter
x = np.zeros((depth, size, size))
delimiter
print([p.spelling for p in file_nodes])
delimiter
myDict[newKey] = [value]
delimiter
str(delim.join(result))
delimiter
self.Bind(wx.EVT_PAINT, self.OnPaint)
delimiter
print(x)
delimiter
print(df)
delimiter
print(b[:, :, (1)])
delimiter
html.fromstring(broken_html)
delimiter
first_window = sorted(next(reader) for _ in range(window_size))
delimiter
print(item)
delimiter
array += [myNumber]
delimiter
myDict[temp] = myFunctionThatReturnsData()
delimiter
self.Meta.model(**validated_data)
delimiter
i += 1
delimiter
p1.wait()
delimiter
print(item)
delimiter
sys.path.append(dir_of_interest)
delimiter
draft_list = Player.objects.all()
delimiter
spl[-1].extend(y)
delimiter
fig, ax = plt.subplots()
delimiter
df2 = df1.reset_index(drop=True)
delimiter
abs(x - y) < epsilon
delimiter
self.session_store.get_session()
delimiter
np.allclose(Z1, Z2)
delimiter
arr1 = np.arange(8).reshape(2, 4)
delimiter
threading.Thread.__init__(self)
delimiter
8881 % 2
delimiter
form.show()
delimiter
values = list(d.values())
delimiter
sys.stdout.write(buffer)
delimiter
signal.signal(signal.SIGHUP, lambda signum, frame: manager.stop())
delimiter
t.cancel()
delimiter
elementwiseProd(a, b)
delimiter
print(s)
delimiter
stack.append([element])
delimiter
line = f.readline()
delimiter
b.start()
delimiter
bitarray.bitarray(l)
delimiter
zip(map(tuple, idr), map(tuple, idc), out)
delimiter
tasks[key]()
delimiter
df.index
delimiter
n1 = np.random.random(N)
delimiter
tester = app.test_client()
delimiter
jsonpickle.encode(myObject, unpicklable=False)
delimiter
min(x, y)
delimiter
z = delrc(i)
delimiter
dict(union(list_dictionaries))
delimiter
fig = plt.figure()
delimiter
[ind_sorted[x[i]:x[i + 1]] for i in range(N - 1)]
delimiter
t2.append(t[0] + t[-1])
delimiter
show_times()
delimiter
instance_name = models.TextField(max_length=20)
delimiter
assert len(values) == len(keys) + 1
delimiter
df = pd.read_csv(f)
delimiter
list(fields_from_list(keys, values))
delimiter
c = np.hstack((a_t, b_t))[:, (np.argsort(np.hstack((a, b))))]
delimiter
new_modules
delimiter
datetime.strptime(date, date_format)
delimiter
result * result
delimiter
x = array([[1], [1]])
delimiter
im = axs[0].imshow(Z, cmap=plt.cm.Greys_r)
delimiter
fdata = ctypes.cast(vdata, POINTER(float))
delimiter
React.createClass.toString()
delimiter
os.mkdir(dir)
delimiter
A.subtract(B, fill_value=0)
delimiter
np.array(NumNonZeroElementsByColumn)[0]
delimiter
req = urllib.request.Request(url)
delimiter
self._list.__setitem__(key, item)
delimiter
t.seek(0)
delimiter
self.setSelectionMode(QtGui.QAbstractItemView.ExtendedSelection)
delimiter
tk.Canvas.itemconfigure(self, *args, **kwargs)
delimiter
np.seterr(**eset)
delimiter
template_rendered.connect(add_template_name_to_context)
delimiter
result = func(*args, **kw)
delimiter
data = data[2:]
delimiter
mydict = args.my_dict
delimiter
plt.imshow(data)
delimiter
x == 2
delimiter
x[0] = 0
delimiter
res = NP.hstack((my_data, new_col))
delimiter
sli = [next(diff) for _ in range(n)]
delimiter
input_thread = threading.Thread(target=add_input, args=(input_queue,))
delimiter
result = []
delimiter
concurrent.futures.wait(fs)
delimiter
x = o
delimiter
ctx.select_font_face(font, *args, **kwargs)
delimiter
self.dictionary[key][1]
delimiter
arr[j][i] = round(arr[j][i], 10)
delimiter
img = cv2.imdecode(array, 1)
delimiter
print(tmr.timeit(number=1))
delimiter
ax.add_artist(anchored_text)
delimiter
k * math.exp(s * (x - mu) * (x - mu))
delimiter
name = models.CharField(max_length=100)
delimiter
parser.feed(text)
delimiter
G = nx.Graph()
delimiter
zlib.decompress(part)
delimiter
pipeA.send(10)
delimiter
HOST = socket.gethostbyname(socket.gethostname())
delimiter
renderer.props.wrap_mode = gtk.WRAP_WORD
delimiter
self.src[i].append(self.src[i + 1].pop(0))
delimiter
Z[test[:, 0:2].T.tolist()]
delimiter
q = Queue()
delimiter
lines = f.readlines()
delimiter
a[:] = [x for x in a if x <= 4]
delimiter
combined = dict(union(dict_list))
delimiter
print(key, value)
delimiter
Foo.objects.all().delete()
delimiter
(arr * cond).argmax(1)
delimiter
angles.append(angle)
delimiter
sys.stdout = buffer
delimiter
ax.plot_wireframe(xx, yy, z)
delimiter
fig = plt.figure()
delimiter
F()
delimiter
writer.writerow(row)
delimiter
next(i for i, (el1, el2) in enumerate(zip(l1, l2)) if el1 != el2)
delimiter
time.sleep(60 * alarm1)
delimiter
c.append(a[0])
delimiter
r = requests.head(url)
delimiter
int(round(b / 5.0) * 5.0)
delimiter
[0.0, 0.0, 1.0, 0.0, 1.0, 0.0],
delimiter
frame.rowconfigure(1, weight=1)
delimiter
self.patcher1 = patch(path)
delimiter
self.population[bisect.bisect(self.cumweights, i)]
delimiter
soup = BeautifulSoup(page)
delimiter
first, rest = unpack_nfirst(seq, 1)
delimiter
perform_other_actions()
delimiter
AHIJ
delimiter
DGIJ
delimiter
AZ
delimiter
BC
delimiter
plt.vlines(x_median, 0, y_median)
delimiter
driver = webdriver.Firefox(capabilities=capabilities)
delimiter
olleh
delimiter
stack[-2].append(stack[-1])
delimiter
p = bokeh.plotting.figure(x_range=[0, 10], y_range=[0, 10])
delimiter
atexit.register(endlog)
delimiter
[replacer(s) for s in strings if len(s) > 2]
delimiter
json.dumps(value, cls=DjangoJSONEncoder)
delimiter
l[a], l[b]
delimiter
test()
delimiter
self.circle1.grid()
delimiter
pool = Pool(5)
delimiter
df
delimiter
pixels.append(img[x + opx][y + opy])
delimiter
array([[0, 1, 2], [0, 1, 2], [0, 1, 2], [0, 1, 2]])
delimiter
deletedf[col]
delimiter
Node.writexml(f)
delimiter
print(directory_list)
delimiter
leg = ax.get_legend()
delimiter
self.verticalLayout = QtGui.QVBoxLayout(self)
delimiter
od1 = OrderedDict(sorted(list(d1.items()), key=lambda t: t[1]))
delimiter
resized_file = orig_image.resize(cur_size, Image.ANTIALIAS)
delimiter
item_dict[sample[1]]
delimiter
print(line)
delimiter
xml.write(escape(data))
delimiter
names[nickname][weighted_choice_sub([x[1] for x in names[nickname]])][0]
delimiter
x += 1
delimiter
self._applecount = 0
delimiter
plt.show()
delimiter
self.br.addheaders = self.old_headers
delimiter
getattr(instance, self.name)
delimiter
gdi.GetPixel(h, 1024, 767)
delimiter
numpy.mean(arr, axis=0)
delimiter
wb = Workbook()
delimiter
(top_matrix.T * top_matrix).det().factor()
delimiter
qproc.join()
delimiter
subset = table[np.array([(i in id_list) for i in table.IDs])]
delimiter
ax1 = plt.subplot(gs[(0), :])
delimiter
print(Crypt.find_crypts(706))
delimiter
fig.tight_layout()
delimiter
df = pd.concat([df1, df2])
delimiter
combinations.append(accum)
delimiter
ax = plt.gca()
delimiter
new_list = list(itertools.chain(range(1, 6), range(15, 20)))
delimiter
arr = np.fromiter(chain.from_iterable(combinations(x, 2)), dtype=x.dtype)
delimiter
self.box.pack_start(self.canvas.draw_area, True, True, 0)
delimiter
file.seek(here, os.SEEK_SET)
delimiter
image = image.convert_alpha()
delimiter
job[1].kill()
delimiter
drawCirc(ax, 1, 1, 1, 0, 250)
delimiter
self.monad = monad
delimiter
widget.deleteLater()
delimiter
toggle()
delimiter
np.logical_and(x > -2, x < 2)
delimiter
line = m.readline()
delimiter
print(int(floor(f2)))
delimiter
setattr(Foo, name, make_binding(name))
delimiter
x = cos(radians(i))
delimiter
r.raise_for_status()
delimiter
t = threading.Thread(target=drain_pipe)
delimiter
[shuffle_word(word) for word in L]
delimiter
app.run(port=5000)
delimiter
wmname = window.get_wm_name()
delimiter
codecs.register(cp65001)
delimiter
s = spline1dbuildakima(x, y)
delimiter
True
delimiter
seen.add(k)
delimiter
a = [dict(zip(header, map(int, row))) for row in reader]
delimiter
func(*fargs, **fkwargs)
delimiter
foundwords
delimiter
df = pd.concat([df, new], axis=1)
delimiter
print(type(p))
delimiter
SomeClass.some_class_method()
delimiter
ii = np.array([1, 1, 0])
delimiter
results = json.load(response)
delimiter
conn.commit()
delimiter
sys.exit()
delimiter
print(tostring(fromstring(data, parser=parser)))
delimiter
self.d[key] = value
delimiter
[0, 0, 1, 0, 0],
delimiter
stack[-1].append(element)
delimiter
json_util.dumps(MyDoc._collection_obj.find(MyDoc.objects()._query))
delimiter
result.append(i)
delimiter
words = s.split()
delimiter
self._matches(found.string, self.text)
delimiter
ax.set_ylim(ymin=0)
delimiter
l = func(X, Y, Z)
delimiter
schema_doc = etree.parse(schema_file)
delimiter
stdin.flush()
delimiter
parser = xml.sax.make_parser()
delimiter
a.shape
delimiter
msg = socket.recv()
delimiter
[val(x) for x in a]
delimiter
request = urllib.request.Request(url)
delimiter
xmin, xmax = x[mask].min(), x[mask].max()
delimiter
X_train = np.array(descs_train)
delimiter
print(bar)
delimiter
diff = [(a[i] - a[i + 1]) for i in range(len(a) - 1)]
delimiter
dic.pop(k)
delimiter
audio_thread.start()
delimiter
labels = [item.get_text() for item in ax.get_xticklabels()]
delimiter
fig = plt.figure()
delimiter
b[5, 6, 7, 8]
delimiter
newY[x] += 1
delimiter
data = [random_data() for x in range(0, 10)]
delimiter
print(list)
delimiter
parse_qs(urlparse(url).query)
delimiter
final_df
delimiter
y_true = [0, 0, 1, 1, 2, 0, 1]
delimiter
base, str = int(sstr[0]), sstr[1]
delimiter
setattr(cls, methodname, newmethod)
delimiter
a_order = numpy.argsort(a)
delimiter
x0 = x_indices.astype(np.integer)
delimiter
a = np.in1d(np.arange(m), np.random.randint(0, m, m))
delimiter
print(i)
delimiter
p.wait()
delimiter
self.statusitem.setMenu_(self.menu)
delimiter
print(first_column, third_column)
delimiter
app = App()
delimiter
print(q.all())
delimiter
name = models.CharField(max_length=16)
delimiter
A = [[1, 1, 0, 0], [0, 1, 0, 1], [1, 0, 1, 0], [0, 0, 1, -1]]
delimiter
foo = Bar()
delimiter
print(df2)
delimiter
hb = plt.hexbin(x, y)
delimiter
log.start()
delimiter
df2[col] = c
delimiter
map = mmap.mmap(f.fileno(), 0)
delimiter
self.x
delimiter
print((freqs.min(), freqs.max()))
delimiter
session = requests.session()
delimiter
app = wx.PySimpleApp()
delimiter
n = np.arange(10, 1000, 10)
delimiter
foo(*args)
delimiter
xi, yi = np.meshgrid(xi, yi)
delimiter
G = nx.DiGraph()
delimiter
t.objects.all()
delimiter
ret.sort(axis=0)
delimiter
word1_synonyms = wordnet.synsets(word1)
delimiter
oldmodule.__dict__.update(newmodule.__dict__)
delimiter
self.cntrlPanel.SetSizer(sizer)
delimiter
assert s.query(B.id).order_by(B.id).all() == [(1,), (4,)]
delimiter
bools = [success_condition(r) for r in results]
delimiter
self.appname = appname
delimiter
d[i[0]] = i[1]
delimiter
random.seed(seed)
delimiter
fnew
delimiter
raw_input = new_raw_input
delimiter
items[item].append(i)
delimiter
xyB[:, (1)] *= widthB / (xyB[:, (1)].max() - xyB[:, (1)].min())
delimiter
self.toolbar.Bind(wx.EVT_MENU, self.OnTool, id=tool_id)
delimiter
t = time.time()
delimiter
ax.yaxis.grid()
delimiter
df.head(5)[df.columns[0:4]]
delimiter
sc.close()
delimiter
td.dt.days
delimiter
axes[0].plot(x, i * (x - 10) ** 2)
delimiter
print(image.shape)
delimiter
[dict(zip([col[0] for col in desc], row)) for row in cursor.fetchall()]
delimiter
self[key].extend(value)
delimiter
fig = plt.figure()
delimiter
p = subprocess.Popen(args, startupinfo=startupinfo)
delimiter
x = some_text % tuple(s)
delimiter
buf.seek(0)
delimiter
aapl_50ma.plot(legend=True)
delimiter
self.nested_whatever_id = nested_object.id
delimiter
fig = plt.figure()
delimiter
response.render()
delimiter
real_decorator
delimiter
dataframe.plot(ax=f.gca())
delimiter
df.head(1)
delimiter
d = collections.defaultdict(list)
delimiter
StandardPyGTKSpec()
delimiter
rows = cursor.fetchall()
delimiter
dict[firstName] = 1
delimiter
unique[maxpos], counts[maxpos]
delimiter
inverted_dict = collections.defaultdict(set)
delimiter
print(string.Template.pattern.pattern)
delimiter
list(compress(fruits, (f in s for f in fruits)))
delimiter
root.deiconify()
delimiter
sum(islice(count(1, step=4), 100))
delimiter
curdir = os.getcwd()
delimiter
f.write(line)
delimiter
q = q.prefetch(Supplier)
delimiter
dot_product = tf.reduce_sum(tf.multiply(x, y))
delimiter
ar = cur.fetchall()
delimiter
print(self.data)
delimiter
layout.addWidget(self.runButton)
delimiter
asyncore.loop(timeout=5.0)
delimiter
TEMPLATE_DEBUG = DEBUG
delimiter
Availability = 2
delimiter
Console.ReadKey()
delimiter
c[:a.shape[0], :a.shape[1]] -= a
delimiter
fig, axn = plt.subplots(2, 2, sharex=True, sharey=True)
delimiter
df.combine_first(df.T)
delimiter
self.addItems(self.list_one)
delimiter
self.l.pack()
delimiter
q.get()
delimiter
np_image = np.asarray(image).flatten()
delimiter
ctx.set_source_rgb(0, 0, 0)
delimiter
mask = [any(tup) for tup in zip(a, b, c)]
delimiter
num_int = int(num_int / 2)
delimiter
dfa = df.ix[:, ([1, 0])].copy()
delimiter
b.T
delimiter
plt.plot(x1, y1)
delimiter
pic.seek(0)
delimiter
time.time() - os.stat(pathname)[stat.ST_MTIME]
delimiter
hn.setLevel(logging.DEBUG)
delimiter
mark_safe(simplejson.dumps(object))
delimiter
df = df.reindex(columns=cols)
delimiter
walnut = Image.open(pattern)
delimiter
pixbuf = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, False, 8, 1, 1)
delimiter
s.diff()
delimiter
dictionary[len(i)] = 1
delimiter
xi, yi = np.meshgrid(xi, yi)
delimiter
pygame.init()
delimiter
self.cur2.executemany(query, self.rows)
delimiter
np.random.seed(0)
delimiter
print(newlists)
delimiter
b = a[new_names]
delimiter
max_col = old_sheet.get_highest_column()
delimiter
plt.plot(time[:-1], scipy.integrate.cumtrapz(signal, x=time))
delimiter
ind = r * cols + c
delimiter
QWidget.__init__(self, parent)
delimiter
data = np.random.random((100, 100))
delimiter
abs(a - b)
delimiter
fh.writelines(output)
delimiter
print(os.__file__)
delimiter
array[0] = 1
delimiter
alert(msg.data)
delimiter
m.contourf(xi, yi, zi)
delimiter
outputfile.close()
delimiter
tree = doc.getroottree()
delimiter
connection.test.foo.find_one()
delimiter
G = nx.MultiGraph()
delimiter
argparse.ArgumentParser.__init__(self, *args, **kwargs)
delimiter
g[key] = getattr(file_one, key)
delimiter
r.status_code
delimiter
args = parser.parse_args()
delimiter
sorted(chain(*allrows))[-20:]
delimiter
self.web_view.page().setViewportSize(frame.contentsSize())
delimiter
session.quit()
delimiter
idx = np.array([0, 1, 2])
delimiter
extent = [xbnds[0], xbnds[1], ybnds[0], ybnds[1]]
delimiter
text_soup = BeautifulSoup(urlopen(url).read())
delimiter
HttpResponseNotModified()
delimiter
time.sleep(0.2)
delimiter
[1, 4, 9]
delimiter
ax.set_xlim([-4, 4])
delimiter
extractDefines(TEST2)
delimiter
os.chdir(working_dir)
delimiter
fig, ax = plt.subplots()
delimiter
data = json.load(jsonFile)
delimiter
cj.set_cookie(ck)
delimiter
cursor.execute(query.format(station_id=id))
delimiter
M[:, (i)] *= -1
delimiter
do_stuff()
delimiter
[5, 199]
delimiter
writer.writerow(values)
delimiter
plt.plot(x, y, zorder=1)
delimiter
session_crumbs.pop(0)
delimiter
log.addHandler(handler)
delimiter
sys.exit(app.exec_())
delimiter
G = [list(g) for _, g in groupby(A, key=scientific_notation)]
delimiter
EMAIL_USE_TLS = True
delimiter
libpath = matplotlib.__path__[0]
delimiter
profile = webdriver.FirefoxProfile()
delimiter
cat / proc / 12992 / status
delimiter
SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET(self)
delimiter
self.data.extend(subpickle.data)
delimiter
x[np.ix_([0], [0, 1, 2], [0, 2])]
delimiter
ET.tostring(node)
delimiter
t.start()
delimiter
ax.xaxis_date()
delimiter
fig = plt.figure()
delimiter
d = {}
delimiter
print(instance.Field2)
delimiter
print(year + 1)
delimiter
top = Tk()
delimiter
plt.show()
delimiter
X.append(x)
delimiter
os.remove(self.local_file)
delimiter
foo.append(df.columns[df.ix[i] == 1])
delimiter
dict.__setitem__(self, key, val)
delimiter
result = g.delay()
delimiter
print(type(ax.get_xminorticklabels()[0]))
delimiter
Vector([(s + o) for s, o in zip(self.data, other.data)])
delimiter
y.append(words[2])
delimiter
parser.parse(s)
delimiter
print(mystr[mystr.find(char1) + 1:mystr.find(char2)])
delimiter
s.seek(0)
delimiter
numdf = numdf[num_df[data_columns].notnull().all(axis=1)]
delimiter
print(list(itertools.product(input1, input2)))
delimiter
pylab.xticks([(i / 10.0) for i in range(0, 12)])
delimiter
print(binascii.hexlify(os.urandom(16)))
delimiter
ents.entitydefs[m.group()[1:-1]]
delimiter
axstop = plt.axes([0.51, 0.05, 0.1, 0.075])
delimiter
results.append(lambda i=i, j=j: nodes[i].value() == nodes[j].value())
delimiter
assert all(particles[i].i == i for i in range(len(particles)))
delimiter
s = set(filelist)
delimiter
a.show()
delimiter
c = pycurl.Curl()
delimiter
vS = ser.readline()
delimiter
root = Tk()
delimiter
b.append(a)
delimiter
[2, 4, 5],
delimiter
self.f.close()
delimiter
a[0] + a[1] * 0.1
delimiter
root = Tkinter.Tk()
delimiter
b = a - int(a)
delimiter
cashflow = 2 * np.ones(6)
delimiter
cls.__name__
delimiter
print(t.myStuffs.all())
delimiter
content = f.read()
delimiter
print(x * x)
delimiter
request = urllib.request.Request(url)
delimiter
c = Variable(n, 2)
delimiter
self.x, self.y
delimiter
text = [ast.literal_eval(line) for line in f]
delimiter
df_concat = pd.concat((df1, df2))
delimiter
arr = np.ones((10, 10)) * 10
delimiter
npi.indices(unique, A)
delimiter
A = numpy.random.randint(1, 6, size=(1000, 12))
delimiter
self.assertItemsEqual(a, list(range(0, 4)))
delimiter
dist = math.sqrt(dx * dx + dy * dy)
delimiter
pivot.fillna(0, inplace=True)
delimiter
cj.set_cookie(ck)
delimiter
mask = np.kron(np.eye(len(L)), np.ones(shp)) == 1
delimiter
n = len(a)
delimiter
d = dict(zip(keys, vals))
delimiter
files.append(i)
delimiter
assert list == __builtins__.list
delimiter
ax1.plot(dates, list(range(10)))
delimiter
curs.execute(sql)
delimiter
app = QApplication(sys.argv)
delimiter
self.extend(self._stringio.getvalue().splitlines())
delimiter
True
delimiter
df
delimiter
output_rs = tf.transpose(output, [1, 0, 2])
delimiter
platform.system()
delimiter
run(command, pty=False)
delimiter
sorted_city_pop = OrderedDict(sorted(cityPopulation.items()))
delimiter
wsize = walnut.size
delimiter
MCAST_PORT = 5007
delimiter
dataframe[cols]
delimiter
print(match.group())
delimiter
same.append((i, j, string_b[j]))
delimiter
C = C.view(A.dtype).reshape(-1, ncols)
delimiter
df
delimiter
processes.append(p)
delimiter
print(make_hash([func.__code__, func.__dict__, func.__name__]))
delimiter
write.writerow(i)
delimiter
result = [[t[0]]]
delimiter
prod, x, y = heapq.heappop(heap)
delimiter
root = Tk()
delimiter
print_node(root)
delimiter
df.eq(0).dot(days_in_month)
delimiter
nprint(polyroots(taylor(lambda x: legendre(n, x), 0, n)[::-1]))
delimiter
print(k, val)
delimiter
line
delimiter
sys.exit()
delimiter
app.mainloop()
delimiter
help(assign)
delimiter
body_data = json.loads(body_unicode)
delimiter
line = line.strip()
delimiter
a = np.hstack((a[:, ::2], a[:, 1::2]))
delimiter
a, b = tee(iterable)
delimiter
yscroll.grid(row=0, column=1, sticky=N + S)
delimiter
spec = createSpec()
delimiter
new_cols = df.columns.values
delimiter
triple(x) + square(x)
delimiter
df
delimiter
bpa = np.asarray(bpa)
delimiter
hash(str(self.name))
delimiter
reactor.listenTCP(8080, factory)
delimiter
0
delimiter
self.i = min(self.im.shape[2] - 1, self.i + 1)
delimiter
c = list(b)
delimiter
f.seek(0)
delimiter
btwo.on_clicked(two)
delimiter
itertools.product(a, b)
delimiter
s.starttls()
delimiter
self.make_a_fake_request_to_myself()
delimiter
False
delimiter
line = line.rstrip()
delimiter
data.append(row)
delimiter
print(elementwise_product(list1, list2))
delimiter
input_wave_file.close()
delimiter
True
delimiter
self.sizer = wx.BoxSizer(wx.VERTICAL)
delimiter
result_set = cursor.fetchall()
delimiter
os.rmdir(dir)
delimiter
xticks[i].set_visible(False)
delimiter
self.tree.pack()
delimiter
draw = ImageDraw.Draw(img)
delimiter
article = form.save(commit=False)
delimiter
ids.append(map(lambda tup: tup[0], sorted(c, key=lambda tup: tup[1])[0:K]))
delimiter
requests.__version__
delimiter
theother(item)
delimiter
frame_data = wave_file.readframes(nb_frames)
delimiter
all_zeros = not a.any()
delimiter
True
delimiter
genn(igap, igap - 2)
delimiter
process.stdout.close()
delimiter
handler1.setLevel(logging.INFO)
delimiter
Base.metadata.create_all(e)
delimiter
response.render()
delimiter
self.value = Value()
delimiter
watermark = Image.open(watermark_path)
delimiter
request.write(c.name)
delimiter
p = psutil.Process(pid)
delimiter
ws = wb.worksheets[0]
delimiter
spec.drawComboBox()
delimiter
regex.pattern
delimiter
name = models.CharField(max_length=50)
delimiter
self.buffer.append(next(self.iter))
delimiter
nu = df[col].nunique()
delimiter
rslt.drop(n, axis=1, inplace=True)
delimiter
fig = plt.figure()
delimiter
random_line = f.readline()
delimiter
ret = int(s)
delimiter
process = Popen(command, stdout=PIPE, stderr=PIPE)
delimiter
new_func
delimiter
obj.save()
delimiter
urls = [url5, url5, url10, url10, url10, url5, url5]
delimiter
L[::-1]
delimiter
result_pic.seek(0)
delimiter
keys = set(l1).intersection(set(d1.keys()))
delimiter
draw = ImageDraw.Draw(im)
delimiter
print(df.apply(lambda x: x.A in x.B, axis=1))
delimiter
a = np.array([1, 0, 0, 1, 0, 0])
delimiter
print(i)
delimiter
print(offset_map[key])
delimiter
mail = email.message_from_string(email_body)
delimiter
a.dtype
delimiter
contour, hier = cv2.findContours(res, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
delimiter
print(itemgetter(*b)(a))
delimiter
nx.draw(gr, node_size=500, labels=mylabels, with_labels=True)
delimiter
xx, yy = np.meshgrid(x, y)
delimiter
archive.close()
delimiter
sizer.Add(stc2)
delimiter
M = scipy.sparse.diags([degs], [0]) - A
delimiter
self.__c
delimiter
print(m.group(0))
delimiter
rpath = path.abspath(path.join(path.dirname(fpath), rpath))
delimiter
G.nodes()
delimiter
foo()
delimiter
np.allclose(C, out)
delimiter
dataArray.reshape(enc[2])
delimiter
ax.margins(0, 0)
delimiter
key.make_public()
delimiter
_location.gsm_location()
delimiter
print(s.translate(translator))
delimiter
self.panel = wx.Panel(self, wx.ID_ANY)
delimiter
os.close(qq.fileno())
delimiter
d = collections.OrderedDict()
delimiter
mf.columnconfigure(0, weight=1)
delimiter
ssq0 = ((yfit0 - ydata) ** 2).sum()
delimiter
main()
delimiter
textwrap.wrap(string, 15)
delimiter
notifier = pyinotify.Notifier(wm, eh)
delimiter
__delitem__
delimiter
print(solve(5 * x ** 2 + 5 * x + 5))
delimiter
a = [1, 2, 4]
delimiter
lst = [a, d, b, c, e, f, g]
delimiter
line = f.readlines()[7]
delimiter
array([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]])
delimiter
min(player(l[:-1]), player(l[:-2])) + l[-1] if l else 0
delimiter
C1 = Cookie.SimpleCookie()
delimiter

delimiter
f(*args, **kwargs)
delimiter
f = float(s)
delimiter
arr[0][1]
delimiter
soln2 = integrate.odeint(f, y2, t2, mxstep=5000)
delimiter
1
delimiter
[(i >> p & 1) for p in range(length - 1, -1, -1)]
delimiter
w = watcher.Watcher(dir, callback)
delimiter
nonlinsolve([x * y - 1, 4 * x ** 2 + y ** 2 - 5], [x, y])
delimiter
btn.set_sensitive(False)
delimiter
driver = webdriver.Firefox(capabilities=firefox_capabilities)
delimiter
app = wx.App(False)
delimiter
self.setIconSize(QtCore.QSize(124, 124))
delimiter
bettermodel = model.fit(betterdata)
delimiter
console.log(i.toString(2))
delimiter
urllib.request.urlopen(uri).read()
delimiter
b / foo.py
delimiter
fileToSend.close()
delimiter
n = a.shape[0]
delimiter
bool(strtobool(str(arg)))
delimiter
ans[k1].append({k2: v2})
delimiter
True
delimiter
time.sleep(10)
delimiter
x = pd.DataFrame(np.random.randn(10, 5))
delimiter
urllib.request.HTTPHandler.__init__(self, debuglevel)
delimiter
output.append(list[indexes[-1]:])
delimiter
bus = dbus.SystemBus()
delimiter
do_my_work()
delimiter
saved_blob_string = gdata.gauth.token_to_blob(token)
delimiter
print(thedict)
delimiter
self.ax.grid(True)
delimiter
delta = dt.timedelta(hours=12)
delimiter
zdd2 = rdd2.zipWithIndex().map(lambda v_k: (v_k[1], v_k[0]))
delimiter
Py_INCREF(p_eigen_python_error)
delimiter
X, Y = np.meshgrid(x, y)
delimiter
reader = csv.DictReader(infile)
delimiter
str.__new__(cls)
delimiter
chr(int(x.group(1), 16))
delimiter
self.__class__(**d)
delimiter
record.put()
delimiter
plt.close(fig)
delimiter
daemon_cartman.start()
delimiter
A = NP.random.randint(10, 100, 100).reshape(10, 10)
delimiter
setup.py
delimiter
array = file.readlines()
delimiter
example.insert(4, 122)
delimiter
root.mainloop()
delimiter
fig.subplots_adjust(wspace=0.1, hspace=0, bottom=0.05)
delimiter
app.MainLoop()
delimiter
lib.foo.restype = c_char_p
delimiter
main()
delimiter
draw_ellipse(image, ellipse_box, width=20, antialias=1)
delimiter
parent.add_widget(GearTick(range=(0, 100)))
delimiter
req = urllib.request.Request(post_url, json.dumps(postdata), headers)
delimiter
max(d1, key=lambda k: d1[k])
delimiter
print(final)
delimiter
stat(my_filename).st_uid
delimiter
Button.__init__(self, parent)
delimiter
cursor = collection.find({})
delimiter
self.origstreamfd = self.origstream.fileno()
delimiter
foo = Foo()
delimiter
-num_decode(s[1:])
delimiter
key0 += 1
delimiter
serializer = CommentSerializer(data=data)
delimiter
sudokupossibilities
delimiter
[0, 0, 0, 0, 0, 0, 15, 16],
delimiter
d.setdefault(a, []).append(b)
delimiter
f = plt.figure()
delimiter
my_dict = {key: set(value) for key, value in list(my_dict.items())}
delimiter
example()
delimiter
s[:1, (1)]
delimiter
res[k] += l[0:len(l) - n + 1]
delimiter
angle = np.deg2rad(angle)
delimiter
status = p.wait()
delimiter
X_cluster_0 = X_train_tfidf[cluster_0]
delimiter
etree = ET.fromstring(xml_data)
delimiter
chunk = proc.stdout.read()
delimiter
com.convert_robj(a)
delimiter
f.set_pasv(0)
delimiter
ax.set_yticklabels(labels)
delimiter
fig, axes = plt.subplots(1, 2, sharey=True)
delimiter
Ainv = tf.matrix_inverse(A)
delimiter
name = models.CharField(max_length=45)
delimiter
plot(x_av, y)
delimiter
primeCount = [0, 0, 1]
delimiter
top = Tkinter.Tk()
delimiter
plt.draw()
delimiter
axis[:set_ylim](-1, 1)
delimiter
H, xedges, yedges = np.histogram2d(x2, y2)
delimiter
sys.stdout = StringIO.StringIO()
delimiter
os.umask(0)
delimiter
x = {(1): 2}
delimiter
x = np.outer(np.sin(theta), np.cos(phi))
delimiter
sock.bind(address[0][-1])
delimiter
lines = (line.strip() for line in text.splitlines())
delimiter
df = pd.DataFrame(list(ds2.difference(ds1)), columns=df2.columns)
delimiter
print(np.matrix(A))
delimiter
data = yaml.load(stream)
delimiter
values = [col.text for col in row]
delimiter
transaction.leave_transaction_management()
delimiter
notebook.set_tab_reorderable(page1, True)
delimiter
norm = plt.normalize(min_v, max_v)
delimiter
print(pd.DataFrame(d))
delimiter
0.6044, sym2, 2, 5, 10, 10
delimiter
print(item)
delimiter
self.data.pop()
delimiter
mask[col] = True
delimiter
out = np.zeros((N, N))
delimiter
telephone = models.CharField(max_length=100)
delimiter
True
delimiter
data = urllib.request.urlopen(url)
delimiter
print([x for x in list(globals().values()) if isinstance(x, FunctionType)])
delimiter
sum_of_grades = sum(my_list)
delimiter
code.interact(local=locals())
delimiter
f = np.poly1d([1, 0, 0, -1])
delimiter
func1()
delimiter
next(mat)
delimiter
data_files.append((directory, files))
delimiter
carIndex = [0] if len(tmp) == 0 else tmp
delimiter
[atup[n:n + 4] for n, i in enumerate(atup) if n % 4 == 0]
delimiter
self.arguments = {}
delimiter
print((r[0], r[1]))
delimiter
XGBClassifier(**grid)
delimiter
val = func(self.val)
delimiter
p.communicate(msg.as_string())
delimiter
panel = tk.Label(window, image=img)
delimiter
os.remove(f.name)
delimiter
grid[i, j] = z
delimiter
endclass
delimiter
w.show()
delimiter
fig.patch.set_visible(False)
delimiter
msg = MIMEMultipart()
delimiter
df.clip(lower=0)
delimiter
norm2 = normalize(x[:, (np.newaxis)], axis=0).ravel()
delimiter
value, key = key[:size], key[size:]
delimiter
zip(*[(lft[i] + board[i] + rgt[i]) for i in range(n_rows)]),
delimiter
args = parser.parse_args(preprocess(sys.argv))
delimiter
ode15s = scipy.integrate.ode(f)
delimiter
multi_line_word << (word | split_word + multi_line_word)
delimiter
marshal.dump(f.__code__, funcfile)
delimiter
allTrue = all(somePredicate(elem) for elem in someIterable)
delimiter
shutil.copyfile(source_path + filename, dest_path + filename)
delimiter
entry1.grid(row=1, column=1)
delimiter
sess = tf.Session()
delimiter
TestCase.setUp(self, *args, **kwargs)
delimiter
self.label.pack(padx=10, pady=10)
delimiter
A[(idx), :]
delimiter
self.SetTransparent(50)
delimiter
ip = self.request.remote_addr
delimiter
admin.site.unregister(Group)
delimiter
x.__name__
delimiter
threads.append(t)
delimiter
somescript.py
delimiter
df
delimiter
self._final_queue.put(self._get_final_result())
delimiter
os._exit(0)
delimiter
listen()
delimiter
PyRun_SimpleString(pycmd)
delimiter
reduce(np.logical_and, map(pred, list(range(a.shape[1])))).any(axis=1)
delimiter
result.append(job.get())
delimiter
id = Column(Integer, primary_key=True)
delimiter
w = np.asarray([0, 4, 7, 10])
delimiter
vor = Voronoi(points)
delimiter
ax.scatter(x2, y2, s=100, lw=0, color=[alpha, alpha, 1.0])
delimiter
gen_move(list(range(10)))
delimiter
a = []
delimiter
key = m[0][0] + m[0][1]
delimiter
stmt.to_unicode()
delimiter
glLoadIdentity()
delimiter
concatenate_per_row(A, B)
delimiter
FO.write(line)
delimiter
msmdsrvini.write(msmdsrvText)
delimiter
self.windowSizer.Add(self.panel, 1, wx.ALL | wx.EXPAND)
delimiter
self.session_store.save_sessions(self.response)
delimiter
print(TR8(c))
delimiter
columns[i].append(h)
delimiter
nbr_edgeobjects
delimiter
list(~numpy.array(mylist))
delimiter
zip_b = zip(*b)
delimiter
self.assertTrue(flag)
delimiter
[x for x in range(*s.indices(10))]
delimiter
ds.addSample((-1, 1), (1,))
delimiter
Frame.__init__(self, master)
delimiter
self.callback()
delimiter
sys.stdout.write(s)
delimiter
f.sum()
delimiter
str(self(*args, **kwargs))
delimiter
hash = random.getrandbits(128)
delimiter
sel_cur = db.cursor()
delimiter
out = f.getvalue()
delimiter
self.doMP()
delimiter
self.fp = open(self.file_or_path, mode)
delimiter
A = x.todok()
delimiter
x = np.linalg.lstsq(a, b)[0]
delimiter
window1.show_all()
delimiter
fig, ax = plt.subplots()
delimiter
a.indices(100)
delimiter
pd.Series(L)
delimiter
ret.append(line[:-1])
delimiter
result = jobs.apply_async()
delimiter
summarized_info
delimiter
a = a.reshape(nx, ny, nz)
delimiter
f.close()
delimiter
b.build_base
delimiter
f(**kw)
delimiter
programmer1.info()
delimiter
1
delimiter
isinstance([], list)
delimiter
line, = ax.plot([], [], lw=2)
delimiter
g[c] = i
delimiter
np.vstack([bins[:-1], bins[1:]]).mean(axis=0)
delimiter
fig, axes = plt.subplots(nrows=2, sharex=True)
delimiter
solns8 = solve(smin, smax, coef1, coef2)
delimiter
counts = pd.value_counts(values)
delimiter
l = []
delimiter
func(arg1)
delimiter
grid[-1].append(value)
delimiter
objs.append(obj)
delimiter
self.sizer.Layout()
delimiter
A().B(1, 2)
delimiter
lines = f.read().splitlines()
delimiter
query = query.filter(filt)
delimiter
dill.dump(t, f)
delimiter
Blob.__init__(self, width, height, color, emphasis, highlight)
delimiter
self.selected
delimiter
threading.Thread.__init__(self)
delimiter
device.open()
delimiter
glVertex2i(110, 110)
delimiter
channel.stop_consuming()
delimiter
[(x, y) for x in a for y in b]
delimiter
float(s)
delimiter
reader = csv.reader(f, delimiter=d)
delimiter
today = datetime.datetime.now()
delimiter
x = sum(int(digit) for digit in str(n))
delimiter
entity.before_delete()
delimiter
pagenos = set()
delimiter
self.setLineWidth(0.5)
delimiter
infile = io.open(filename, mode, encoding=encoding)
delimiter
ax.add_patch(Circle(point, 0.1))
delimiter
self.log.write(message)
delimiter
print(your_array[index_array[:10]])
delimiter
arr.reshape(dim, (n_bins,) * dim)
delimiter
os.remove(output)
delimiter
a = numpy.arange(25).reshape((5, 5))
delimiter
print(G.number_of_nodes())
delimiter
t.start()
delimiter
im.putalpha(alpha)
delimiter
print(b)
delimiter
inspect.getargspec(members[2][1])
delimiter
self._callbacks = []
delimiter
winsound.Beep(17000, 100)
delimiter
stripped = (line.strip() for line in in_file)
delimiter
B[~B.client_id.isin(A.client_id)]
delimiter
np.sqrt(1 - X ** 2 - Y ** 2)
delimiter
c = y * np.exp(-1j * 2 * n * np.pi * time / period)
delimiter
xdelta, ydelta = xlim[1] - xlim[0], ylim[1] - ylim[0]
delimiter
f(*args[0])
delimiter
output.index = output.index.to_datetime()
delimiter
session.commit()
delimiter
operator.itemgetter(*b)(a)
delimiter
self.setAutoFillBackground(True)
delimiter
Vector(self.x + n.x, self.y + n.y)
delimiter
temp_file.seek(0)
delimiter
cache.set(self.COUNTER_CACHE_KEY, 1, self.PERIOD_LENGTH_IN_SECONDS)
delimiter
Signature2 = -1
delimiter
(mask * prior_reci + ~mask * (0.1 * prior_reci)).sum(1)
delimiter
sys.stdout = tmpout
delimiter
fn(*args, **args)
delimiter
print(df.columns.tolist())
delimiter
{a: 1, b: 2}
delimiter
server.serve_forever()
delimiter
some_number = Column(Integer, primary_key=True)
delimiter
pool.close()
delimiter
y = np.random.randn(10000, 10000)
delimiter
plt.plot(xnew, power_smooth)
delimiter
app = MyApp(sys.argv)
delimiter
loop.run_forever()
delimiter
dacl = sd.GetSecurityDescriptorDacl()
delimiter
f1.close()
delimiter
c.drawImage(Image, cm, cm, inch, inch)
delimiter
sys.excepthook = myexcepthook
delimiter
c.wait()
delimiter
(fwd[:-2] + back[2:]) / 2.0
delimiter
a = np.eye(N)
delimiter
pygame.init()
delimiter
valued.append(int(suby))
delimiter
a = np.hstack(np.array(a))
delimiter
s = pickle.load(f)
delimiter
sort_index
delimiter
app = wx.App(False)
delimiter
rv = np.ones((N, mask.shape[0], mask.shape[1], 4), dtype=np.float)
delimiter
print(final_regex)
delimiter
filelist = glob.glob(fileroot)
delimiter
root.withdraw()
delimiter
doc = lxml.etree.XML(data)
delimiter
other and self.a == other.a and self.b == other.b
delimiter
count(x)
delimiter
PyErr_Print()
delimiter
t = Tkinter.Text(w)
delimiter
plt.show()
delimiter
res.reverse()
delimiter
naive = datetime(2015, 2, 1)
delimiter
print(point.distance(line))
delimiter
my_dict = {}
delimiter
numpy.vstack([test, test[::-1]]).T[:(len(test) + 1) // 2]
delimiter
clock_gettime.argtypes = [ctypes.c_int, ctypes.POINTER(timespec)]
delimiter
plt.cm.gist_ncar(np.random.random())
delimiter
G = nx.Graph()
delimiter
auth_login(request, form.get_user())
delimiter
b = np.random.rand(5, 4)
delimiter
any(char in digits for char in value)
delimiter
print(Counter(alist))
delimiter
i = iter([(1, 11), (2, 22)])
delimiter
mylist += [(tup[0], tup[1], list_of_signs[idx1][idx2])]
delimiter
func()
delimiter
date_joined = models.DateField()
delimiter
(lambda x: x).__get__
delimiter
print(arreqclose_in_list(myarr1, mylistarr))
delimiter
print(str(selection))
delimiter
sys.exit(0)
delimiter
fig, ax = plt.subplots()
delimiter
print(df)
delimiter
self.window.show_all()
delimiter
self.get_db_prep_value(value)
delimiter
data = {}
delimiter
self._thread_id
delimiter
pool = multiprocessing.Pool()
delimiter
adate - timedelta(days=_offsets[adate.weekday()])
delimiter
log.addHandler(noop)
delimiter
V.ravel()
delimiter
_nextafter(x, y)
delimiter
numpy.dtype(t)
delimiter
worksheet = workbook.add_worksheet()
delimiter
f2.pack(side=LEFT, fill=Y)
delimiter
pprint.pprint(dict(os.environ), width=1)
delimiter
self.figure.delaxes(self.figure.axes[1])
delimiter
df + 1
delimiter
dt = numpy.linspace(-t[-1], t[-1], 2 * nsamples - 1)
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
new_list.append((elem, input_dict[elem]))
delimiter
svc.fit(X_train, y_train)
delimiter
k, self.mapping[k]
delimiter
df[1] = df[1].apply(lambda x: 1 if x else 0).cumsum()
delimiter
writer.writerow(writenames)
delimiter
win.window.move_resize(x, y, w, h)
delimiter
all_pixels.append(255)
delimiter
print(df)
delimiter
self.setCentralWidget(self.tree)
delimiter
t.__sizeof__()
delimiter
x[0]
delimiter
json.load(f)
delimiter
synchIntervall = datetime.day(2)
delimiter
today = datetime.date.today()
delimiter
PaginationFormSet
delimiter
c = cv.WaitKey(7) % 256
delimiter
mech.submit()
delimiter
print(x[:, :, (5)])
delimiter
x[0][0][0] = 11
delimiter
result.intersection_update(s)
delimiter
X[-1]
delimiter
print(is_int_value(x))
delimiter
print(Example(1))
delimiter
print(np.std(X, 0) * m.coef_)
delimiter
x_c = 0.5 * (x_a + x_b)
delimiter
[scipy.argmin([scipy.inner(q - x, q - x) for x in X]) for q in Q]
delimiter
form = formset.form
delimiter
df.where(~is_duplicate, 0)
delimiter
x.split()
delimiter
thread.start()
delimiter
self.window_is_fullscreen = False
delimiter
seen.add(k)
delimiter
ax.set_xticks(pos + width / 2)
delimiter
[(resMag * (math.cos(a) + math.sin(a) * 1j)) for a in resArg]
delimiter
r = {}
delimiter
self.textLayout.setMargin(10)
delimiter
f = np.poly1d([1, 0, 0, -1])
delimiter
print(l[i])
delimiter
s = f.read()
delimiter
btn.pack()
delimiter
x = np.arange(0, len(data))
delimiter
fig, ax = plt.subplots(ncols=2, figsize=(5, 2.5))
delimiter
print(a)
delimiter
out.reshape((n, n))
delimiter
in_order_values = list(tree.in_order())
delimiter
fig, ax = plt.subplots()
delimiter
a = b[n]
delimiter
dill.detect.errors(f)
delimiter
tree = etree.parse(metadata, parser)
delimiter
word in is_word.words and len(word) > 1
delimiter
frame.grid_columnconfigure(0, weight=1)
delimiter
cov / np.dot(s_x[:, (np.newaxis)], s_y[(np.newaxis), :])
delimiter
fig = plt.figure(figsize=(4, 5))
delimiter
A[index]
delimiter
json.dumps(d)
delimiter
[bar.set_height(hist[i]) for i, bar in enumerate(b)]
delimiter
upload_file(path)
delimiter
mysignal.connect_via(app)(listener)
delimiter
wmclass = window.get_wm_class()
delimiter
indices = numpy.arange(a.shape[0])[numpy.in1d(a, b)]
delimiter
dict.__setitem__(self, k, v)
delimiter
df
delimiter
pd.__version__
delimiter
self.src.append([self.src[-1].pop(-1)])
delimiter
print((r.status, r.reason))
delimiter
plt.xlim([startTime, endTime])
delimiter
signal.append(c + corr * signal[-1] + np.random.normal(0, sigma_e))
delimiter
magneturi
delimiter
result = solve(m1, m2, std1, std2)
delimiter
plt.plot(t, s)
delimiter
lock = mp.Lock()
delimiter
f.pack(side=LEFT, expand=1)
delimiter
input.close()
delimiter
pipe.close()
delimiter
data.append(float(item.split()[take_col]))
delimiter
parser = argparse.ArgumentParser()
delimiter
wb = openpyxl.Workbook()
delimiter
slither / slither / tests.py
delimiter
f[2].lower()
delimiter
np.random.seed(0)
delimiter
L[a:a + span2] = L[b:c]
delimiter
r = list(range(start_day, end_day + 1))
delimiter
df
delimiter
dt = numpy.arange(1 - nsamples, nsamples)
delimiter
C()
delimiter
ranges.append([val, index])
delimiter
proc.start()
delimiter
img = np.vstack((c, np.hstack((a, b))))
delimiter
dt = datetime.datetime.now()
delimiter
EndDate = Date + timedelta(days=10)
delimiter
mylist.remove(value)
delimiter
print(list(d.items()))
delimiter
f(*args)
delimiter
q.put(name)
delimiter
print(x)
delimiter
fields.insert(bisect(fields, value), value)
delimiter
ax.add_patch(patch)
delimiter
vals = [sinval(i) for i in range(quarter)]
delimiter
dict_writer.writeheader()
delimiter
context.set_source_surface(self.image, 0.0, 0.0)
delimiter
input()
delimiter
tar.close()
delimiter
np.hstack(lst)
delimiter
parser = argparse.ArgumentParser()
delimiter
font = cv2.FONT_HERSHEY_PLAIN
delimiter
Concate.update({A[i]: B[i]})
delimiter
self.output.write(result)
delimiter
print(mylist)
delimiter
ax.hist(nd, normed=True, bins=n_bins0, alpha=0.5)
delimiter
response
delimiter
s.connect((hostname, port))
delimiter
plt.hist(random_from_cdf, 50)
delimiter
CATC - ATCAGCATCGACATGCGGCATACG
delimiter
position = NX.spring_layout(Gh)
delimiter
p.join()
delimiter
graphB = tf.Graph()
delimiter
self._fn(*arg, **kw)
delimiter
f(1, 1, 1)
delimiter
hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
delimiter
d[key] = True
delimiter
FunctionFlow.start.run(**some_kwargs)
delimiter
print(repr(array))
delimiter
cax.pcolormesh(t, r, c.T)
delimiter
plt.plot([0, 1])
delimiter
print(l[:N])
delimiter
print(str(matches))
delimiter
initialize_necklace()
delimiter
profile_image_path = models.CharField(max_length=250, blank=True, null=True)
delimiter
print(data)
delimiter
r = redis.Redis()
delimiter
self._name
delimiter
self.assertIn(key, set(response.data.keys()))
delimiter
file.flush()
delimiter
obj = [line[0].strip(), line[1].strip()]
delimiter
sm = sys.modules.copy()
delimiter
decorated_func
delimiter
app
delimiter
a[:, :, (i), :] *= v[i]
delimiter
found.add(relation)
delimiter
word1word2
delimiter
word2word1
delimiter
ax.set_xlim(-10, 10)
delimiter
skew *= ((m - 1) * m) ** 0.5 / (m - 2)
delimiter
t.append(yourstring[i * 8:(i + 1) * 8])
delimiter
obj = getattr(obj, attr_list.pop(0))
delimiter
logging.getLevelName(10)
delimiter
self._conn
delimiter
app = Flask(__name__)
delimiter
some_b.delete()
delimiter
argtypes = [ctypes.c_int, ctypes.c_double]
delimiter
print(self.__name__)
delimiter
cap.release()
delimiter
app.install(log_to_logger)
delimiter
decorator
delimiter
digits = map(str, digits)
delimiter
date = dt.datetime.today() - dt.timedelta(days=1)
delimiter
cPickle.dump(gnb, fid)
delimiter
self.ui.PoseBtn_GridLayout.addItem(spacerItem1, 1, 0, 1, 1)
delimiter
self.main()
delimiter
CS = plt.contour(X, Y, Z)
delimiter
mat = np.random.random((100, 100))
delimiter
io.StringIO
delimiter
box.pack_start(combo, False, False)
delimiter
logger.propagate = False
delimiter
testdataframe[col].plot(style=style, lw=lw, ax=ax)
delimiter
ax.figure.canvas.draw()
delimiter
item.append(10)
delimiter
d = dict()
delimiter
sleep(1)
delimiter
x[:, 1:2, :]
delimiter
locations = FieldList(FormField(LocationForm), min_entries=2)
delimiter
person.make_statement(20)
delimiter
ax.set_yticklabels(nba_sort.index, minor=False)
delimiter
np.where(states)
delimiter
moo._min_or_max_axis
delimiter
b = a[::2].copy()
delimiter
df.index = pd.DatetimeIndex(df.index)
delimiter
np.where(a > 5)
delimiter
ax.set_xlim([xmin, xmax])
delimiter
{{form.non_field_errors}}
delimiter
freq.update(line.split())
delimiter
ax.plot(x, y)
delimiter
self.fit(X, y).transform(X)
delimiter
ax.set_ylim(-100, 100)
delimiter
module1.func1 = self.my_new_func1
delimiter
t.start()
delimiter
deleteself.list[-1]
delimiter
cstring.value
delimiter
kernelapp.start()
delimiter
url = urlparse.urlparse(address)
delimiter
arr = np.roll(arr, num)
delimiter
f = scipy.signal.lti([1], [1, 1])
delimiter
filtered_words = (word for word in file_words if word in words)
delimiter
print(a.qsize())
delimiter
array2 = [e for e in array2 if e not in set1]
delimiter
print(n)
delimiter
X_train = vectorizer.fit_transform(X_train)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
b = TestB()
delimiter
str_args = [str(x) for x in args]
delimiter
f = hstack2((a, b))
delimiter
b = sorted(a, reverse=True)
delimiter
reverse_dic[v].append(k)
delimiter
str2.count(str1)
delimiter
session.add(g)
delimiter
signal.signal(signal.SIGUSR1, handle_pdb)
delimiter
df = df.append(sum_df)
delimiter
f(*args, **kwargs)
delimiter
array[0]
delimiter
G.add_edge(1, 2, weight=7)
delimiter
colorbar.set_ticks([-0.667, 0, 0.667])
delimiter
max(l_one + l_two)
delimiter
result = {}
delimiter
image = Image.all().fetch(1, offset)[0]
delimiter
message.save()
delimiter
sidx = X1D.argsort()
delimiter
M.dot(M)
delimiter
pprint(res)
delimiter
root.mainloop()
delimiter
a = np.array([1, 0, 0])
delimiter
list_.append(line[2])
delimiter
frame1.axes.get_xaxis().set_ticks([])
delimiter
Something.objects.filter(data__a=1)
delimiter
m, n = x.shape
delimiter
self.setLayout(grid)
delimiter
abs(value)
delimiter
title_year = [fields(i) for i in movie_dicts]
delimiter
axs[1].xaxis.set_major_formatter(x_fmt)
delimiter
pythoncom.PumpMessages()
delimiter
sp.add_source_from_line(ppa_name)
delimiter
someFunction(**theDictionary)
delimiter
mask = np.zeros(img.shape, np.uint8)
delimiter
lst[num] *= 2
delimiter
xml.sax._exceptions
delimiter
a[0][0] = 2
delimiter
myMap[n] += 1
delimiter
print(nx.simple_cycles(G).pop()[:-1])
delimiter
myfile = f.read()
delimiter
pri = gllhs[0]
delimiter
fig, axes = plt.subplots(nrows=1, ncols=2)
delimiter
root_logger = logging.getLogger()
delimiter
values = list(select.stripped_strings)
delimiter
User.client_1_query.filter(User.id == 1).all()
delimiter
0
delimiter
dis.dis(b)
delimiter
nbr_edgeobjects = 0
delimiter
textwrap.wrap(s, 4)
delimiter
id = Column(Integer, primary_key=True)
delimiter
fig = plt.figure()
delimiter
print(linalg.solve(A, x))
delimiter
x in range(cls.k)
delimiter
out = data[np.in1d(tags, goodIDs)]
delimiter
im = img.load()
delimiter
res = [key for key in list(freq_count.keys()) if freq_count[key] == high]
delimiter
plt.plot(list(range(10)))
delimiter
description = models.CharField(max_length=250)
delimiter
new_cols = df.loc[:, (cols)] / df.loc[ii, cols].values
delimiter
cv.Threshold(a, a, 0.5, 1, cv.CV_THRESH_BINARY)
delimiter
adate - timedelta(days=delta)
delimiter
p.join()
delimiter
writer.writerow(combined_row)
delimiter
fig = plt.gcf()
delimiter
last_name = models.CharField(max_length=100)
delimiter
next(second)
delimiter
self.dot.set_offsets((x, y))
delimiter
df
delimiter
print(sublist([5, 90, 2], [90, 20, 5, 2, 17]))
delimiter
result.pop()
delimiter
plt.colorbar(im, cax=cax)
delimiter
ax.scatter(x, y, z, alpha=0.1)
delimiter
__init__.py
delimiter
result_dict[len(word)].add(word)
delimiter
layout.addWidget(self.edit)
delimiter
result[nI] = func2(zeta[nI])
delimiter
setattr(foo, k, v)
delimiter
now = datetime.now()
delimiter
console_client.cmdloop()
delimiter
value = Column(String(100))
delimiter
raise OSError(errno_, os.strerror(errno_))
delimiter
self.driver = webdriver.Firefox()
delimiter
v.extend(list(i.items()))
delimiter
parsed.pprint()
delimiter
item_q = Queue.Queue()
delimiter
workssheet2.write(row, col, cell_value)
delimiter
min2(x)[1]
delimiter
arguments = locals()
delimiter
content = f.read()
delimiter
args.func(args.newstate)
delimiter
i += 1
delimiter
QtCore.Qt.Unchecked
delimiter
plt.ylim((-limit, limit))
delimiter
conv = np.round(alt / 500.0).astype(int)
delimiter
print(df)
delimiter
sum(n * 10 ** i for i, n in zip(count(0, -1), a))
delimiter
ns.extra_file = ns.extra_file if ns.extra_file else ns.filename
delimiter
(t - B) / A
delimiter
QTimer.singleShot(200, self.load_content)
delimiter
ax = fig.add_subplot(111)
delimiter
extension = entrypoint.load()
delimiter
dome_something(obj)
delimiter
handles, labels = pyplot.gca().get_legend_handles_labels()
delimiter
print(np.array_str(x, precision=2))
delimiter
main()
delimiter
get_color(0.5)
delimiter
original_open(filename, mode)
delimiter
kmer2count[kmer2] += initcount[kmer1]
delimiter
inp = input()
delimiter
_change_this_and_I_will_kill_you_with_my_axe = []
delimiter
np.insert(a, 1, 5, axis=1)
delimiter
mean += (x - mean) / n
delimiter
fig = plt.figure()
delimiter
(1.0).is_integer()
delimiter
crawler.crawl(spider)
delimiter
myCards.append(cardList)
delimiter
wrapped_f
delimiter
array([0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9])
delimiter
map(session.refresh, iter(session))
delimiter
L[0] + listSum(L[1:])
delimiter
le.setStyleSheet(ss)
delimiter
out.close()
delimiter
print(p2.communicate())
delimiter
a.ravel()[flat_index]
delimiter
response
delimiter
np.add.at(out_count, b_idx, b[:, (1)])
delimiter
A[c1, r1], A[c2, r2] = A[c2, r2], A[c1, r1]
delimiter
X0 = np.ones((n, 1))
delimiter
ba = bytearray(m)
delimiter
f.__defaults__
delimiter
new_strs.append(str_record[x])
delimiter
ebks.append(p1 / p2)
delimiter
cum = np.hstack((np.zeros((a.shape[0], 1), dtype=a.dtype), cum))
delimiter
16.6644029617
delimiter
print(drw)
delimiter
pmf /= pmf.sum()
delimiter
pr.enable()
delimiter
clipped_background = no_background.clip(min=0)
delimiter
main()
delimiter
p.print_stats()
delimiter
param_value = request.query.param_name
delimiter
out, err = pipe.communicate()
delimiter
pattern = np.random.rand(PATLEN)
delimiter
x, y
delimiter
f.write(tempfile.read())
delimiter
merged_df
delimiter
lastdigit = int(repr(n)[-1])
delimiter
b = [4, 5, 6]
delimiter
a = np.equal.outer(vect, vect)
delimiter
curses.flushinp()
delimiter
print((resp.status, resp.reason))
delimiter
r = q.T.reshape(-1, 2, 2)
delimiter
patient_list.sort(key=by_unit_room_bed)
delimiter
p.put()
delimiter
_test()
delimiter
fp.seek(-BOMLEN, os.SEEK_CUR)
delimiter
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
arr = np.zeros((nrows, ncols))
delimiter
s = requests.Session()
delimiter
columns = df.columns.values.tolist()
delimiter
buf = stream.read(1024)
delimiter
lst[i:] + lst[:i]
delimiter
reordered = l[-1:] + l[:-1]
delimiter
client_connection.close()
delimiter
b = np.random.rand(6, 5, 4)
delimiter
httpretty.disable()
delimiter
mydict.setdefault(key, list())
delimiter
assert isinstance(x, Iterable) and not isinstance(x, StringType)
delimiter
b = zip(*a)
delimiter
pubkey.verify_init()
delimiter
line1 = LineString([(0, 0), (1, 0), (1, 1)])
delimiter
print(_string)
delimiter
f2 = f2 * np.max(f1) + (1.0 - f2) * np.min(f1)
delimiter
loop = asyncio.get_event_loop()
delimiter
[s[i:i + 4] for i in range(0, len(s), 4)]
delimiter
ax = fig.add_subplot(2, 2, a + 1)
delimiter
m = graphlab.recommender.create(data)
delimiter
bucket.configure_versioning(True)
delimiter
tree_dict = {}
delimiter
do_something_5()
delimiter
print((key, value))
delimiter
ax1 = fig.add_subplot(111)
delimiter
pd.Series(b[1], df.columns, name=df.index[-1])
delimiter
a[a.argsort()[-10:]]
delimiter
distutils.util.strtobool(some_string)
delimiter
index = d * (d - 1) / 2 - (d - i) * (d - i - 1) / 2
delimiter
msg.attach(msgAlternative)
delimiter
v = np.random.normal(size=d)
delimiter
process = Process(target=greet, args=(string,))
delimiter
sys.exit(main())
delimiter
obj.put()
delimiter
datetime.datetime.fromtimestamp(obj[0][1])
delimiter
processes.remove(p)
delimiter
arr = numpy.array(numpy.round(arr), dtype=numpy.uint8)
delimiter
q = np.empty_like(p)
delimiter
w.show_all()
delimiter
bokeh.io.output_notebook()
delimiter
stdscr.clrtoeol()
delimiter
os.sys.path.insert(0, parentdir)
delimiter
plt.hist(data, 50, normed=True)
delimiter
a = np.arange(10)
delimiter
result = service.resource().method([parameters]).execute()
delimiter
x /= x[2]
delimiter
minutes, seconds = divmod(seconds, 60)
delimiter
s.append(im[x - 1:x + 2, y - 1:y + 2])
delimiter
result.reset_index(inplace=True)
delimiter
DataMatrix(data, index=dates)
delimiter
np.maximum.accumulate(mask, axis=1, out=mask)
delimiter
{{names | safe}}
delimiter
p2.rotate(angle)
delimiter
xx1 = np.linspace(x.min(), x.max(), 50)
delimiter
print(sys.argv)
delimiter
fo.close()
delimiter
a = list(range(1, 50))
delimiter
self._handle_request_noblock()
delimiter
print(root)
delimiter
regex.sub(lambda mo: dict[mo.string[mo.start():mo.end()]], text)
delimiter
plt.imshow = my_imshow
delimiter
stdout_fileno = sys.stdout.fileno()
delimiter
print(chambersinreactor)
delimiter
pattern = np.ones((24, 16), float)
delimiter
main()
delimiter
a + b
delimiter
masterlist.update((x, False) for x in exceptions if x in masterlist)
delimiter
self.columnconfigure(1, weight=1)
delimiter
a, b, c, d = result
delimiter
self.lc = task.LoopingCall(self.announce)
delimiter
print(hex(id(a)))
delimiter
copy(args[0])
delimiter
cherrypy.config.update(confdict)
delimiter
pathqueue.join()
delimiter
gibberish(5)
delimiter
Astars.append(s)
delimiter
fig, ax = plt.subplots()
delimiter
np.vstack((a[(0), :], a[1:, :] + a[(0), :] * 1j))
delimiter
records = Record.objects.filter(project_id=1)
delimiter
list()
delimiter
os.kill(int(ps_output), signal.SIGTERM)
delimiter
x[0]
delimiter
docfile.close()
delimiter
print(m.group(6))
delimiter
a = os.stat(os.path.join(directory, i))
delimiter
self.clearLayout(layout)
delimiter
new_class
delimiter
print(line)
delimiter
data = s.recv(1024)
delimiter
abs(2 - 1)
delimiter
reader = csv.reader(f1)
delimiter
ax1 = plt.gca()
delimiter
length = len(text)
delimiter
self.init_app(app, db)
delimiter
ax.legend()
delimiter
main()
delimiter
print(myline)
delimiter
ax0a.set_xticklabels([])
delimiter
ts = np.arange(0, 1, 0.01)
delimiter
b = np.random.randint(0, 9, (2, 1)).ravel()
delimiter
n *= 2
delimiter
r = min(r, n - r)
delimiter
Base = declarative_base()
delimiter
urlhash = models.CharField(max_length=6, null=True, blank=True, unique=True)
delimiter
print(msg)
delimiter
main()
delimiter
1, 8, 8, 8
delimiter
arr = np.roll(arr, num)
delimiter
self.write(somedata)
delimiter
s.mean(axis=0)
delimiter
vbox.add(image)
delimiter
grouped = df.groupby([times.hour, times.minute])
delimiter
start_urls.append(url)
delimiter
plt.scatter(x, y, c=t, cmap=cm.cmap_name_r)
delimiter
a = a + 1
delimiter
ax1.view_init(*init_view)
delimiter
zip(new_lists, overflows)
delimiter
num_rejects += 1
delimiter
transport.close()
delimiter
window.show()
delimiter
np.sum(~(a ^ b))
delimiter
pprint(dict(di))
delimiter
result = next(x for x in (a, b, c, d, e, default) if x)
delimiter
app.exec_()
delimiter
sum(Fraction(1, d) for d in range(1, n + 1))
delimiter
homebrew / science / opencv
delimiter
main.run()
delimiter
md5.update(chunk)
delimiter
self._b = [A() for x in range(5)]
delimiter
print(result.get(timeout=1))
delimiter
result[result.size / 2:]
delimiter
plt.plot(x, y, zorder=2)
delimiter
{}
delimiter
sct_subscript
delimiter
choices = list(chain(self.choices, choices))
delimiter
result[key] = row[1:]
delimiter
x = range(10)
delimiter
do_something_4()
delimiter
size = ctypes.c_int()
delimiter
fruitDB.close()
delimiter
p_form = [sum(sintervals[:i]) for i in range(len(intervals))]
delimiter
y[i] += A[i, j] * x[j]
delimiter
overlap(0, 100, 0, 20)
delimiter
dates = [re.match(pattern, x).groups()[0] for x in my_strings]
delimiter
B = get_A()
delimiter
deletethe_map[i]
delimiter
[1, 1],
delimiter
cv.CvtColor(difference, grey_image, cv.CV_RGB2GRAY)
delimiter
self.obj[self.key] = val
delimiter
self.root = Tk()
delimiter
(1 if text[0] == char else 0) + count(char, text[1:])
delimiter
y = tf.Variable(tf.zeros([]))
delimiter
i += 1
delimiter
ssc.start()
delimiter
p = [(len(str(x)) + 1) for x in l]
delimiter
list1_new = [x for i, x in enumerate(list1) if list2[i] in list2[:i]]
delimiter
connection.close()
delimiter
cur_set.append(A[index])
delimiter
print(doc.xml.web.offset.string)
delimiter
today = datetime.date.today()
delimiter
self.reverser = dict()
delimiter
view.show()
delimiter
list(takewhile(lambda date: date.year < 2014, tuesdays_of_february))
delimiter
canvas.config(xscrollcommand=hbar.set, yscrollcommand=vbar.set)
delimiter
now_date = datetime.datetime.now()
delimiter
A = pd.Series(list(range(1, 5)))
delimiter
Session = sessionmaker(bind=engine)
delimiter
self.closedmax = closedmax
delimiter
self.slidermax = slidermax
delimiter
self.slidermin = slidermin
delimiter
self.closedmin = closedmin
delimiter
remain += int(i)
delimiter
json.dumps(d, sort_keys=True)
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
date_ceased_to_act = models.DateField(blank=True, null=True)
delimiter
main.mainloop()
delimiter
getMappingsNode(n, nodeName)
delimiter
df = pd.DataFrame(np.ceil(np.random.rand(1, 10) * 1000))
delimiter
seconds_since_midnight = time.time() - time.mktime(today.timetuple())
delimiter
cj = cookielib.CookieJar()
delimiter
print(tree.getpath(element))
delimiter
random.shuffle(a)
delimiter
handler = logging.handlers.RotatingFileHandler(file_name, maxBytes=10 ** 9)
delimiter
reader = csv.reader(f2)
delimiter
label.set_rotation(45)
delimiter
self._copy_attrs(df)
delimiter
array.remove(array[0])
delimiter
dlist.append(d.copy())
delimiter
Base.metadata.create_all(engine)
delimiter
parent.insert(parent.index(element) + 1, new_element)
delimiter
print(str(count).ljust(10), conv)
delimiter
content = response.read()
delimiter
print(data)
delimiter
e.__traceback__
delimiter
[0.0, 0.95510649, 0.0],
delimiter
dt = datetime.datetime.fromtimestamp(ts).replace(tzinfo=tz.tzutc())
delimiter
Base.metadata.create_all(e)
delimiter
SPECIAL_RULES[name]()
delimiter
a * b
delimiter
frame = cv.QueryFrame(capture)
delimiter
plt.hold(False)
delimiter
help(module)
delimiter
scroll_win = gtk.ScrolledWindow()
delimiter
mask = numpy.in1d(numpy_array, repeat_set).reshape(numpy_array.shape)
delimiter
VERSION,
delimiter
conn.execute(tb_create)
delimiter
os.fstat(f.fileno())
delimiter
L[:] = [(i[:1] + i[2:]) for i in L]
delimiter
sess.run(train_step, feed_dict={learning_rate: 0.1})
delimiter
zip_longest(fillvalue=fillvalue, *args)
delimiter
s.format(**d)
delimiter
False
delimiter
parser.feed(pstring)
delimiter
PySys_SetArgv(argc, argv)
delimiter
self.Artwork.destroy()
delimiter
server.serve_forever()
delimiter
matplotlib.matplotlib_fname()
delimiter
UserName = db.Column(db.String(40))
delimiter
p = multiprocessing.Pool()
delimiter
self.quit()
delimiter
app.register_blueprint(account_api)
delimiter
print(df.loc[idx])
delimiter
lambda x: x % i == 0
delimiter
buttonList.append(new_button)
delimiter
ax.figure.canvas.draw()
delimiter
lines = f.readlines()[:-5]
delimiter
args = [4, 5, 6]
delimiter
threads.append(threading.Thread(target=process, args=(items, start, end)))
delimiter
model = LinearRegression()
delimiter
keys = (list(x.keys()) for x in d.values())
delimiter
plt.bar(counts.index, counts)
delimiter
z_surface[where(ma.getmask(Zm) == True)] = numpy.nan
delimiter
server.start()
delimiter
yaml.add_representer(folded_unicode, folded_unicode_representer)
delimiter
Decimal(1).exp()
delimiter
d2[k] = f(v)
delimiter
ctypes.memmove(ctypes.addressof(self), bytes, fit)
delimiter
inner
delimiter
cmap = plt.cm.gray
delimiter
data = [(x, k) for k, x in enumerate(data)]
delimiter
d.close()
delimiter
a[b][0] is a
delimiter
driver = webdriver.Firefox(firefox_profile=profile)
delimiter
[1, 1, 1, 1, 1, 1, 1]
delimiter
myShelve.close()
delimiter
qs = self.model.autocomplete_queryset()
delimiter
line1 = f.readline()
delimiter
outfile.flush()
delimiter
random.shuffle(choose_from)
delimiter
np.all(xdiff[0] == xdiff)
delimiter
self.x2 - self.x1 + self.y2 - self.y1
delimiter
self = dict.__getitem__(self, key)
delimiter
pp.savefig()
delimiter
output.append(curr_date)
delimiter
argmax(enumerate(values))
delimiter
background = pygame.Surface(screen.get_size())
delimiter
lst.sort()
delimiter
max([len(format_field(row[index])) for row in table])
delimiter
i += 1
delimiter
g.write(got)
delimiter
sys.modules.update((mod_name, Mock()) for mod_name in MOCK_MODULES)
delimiter
lines = list(f)
delimiter
a2 = a[:]
delimiter
a ^ b
delimiter
list(pair(oldList))
delimiter
x.min(0)
delimiter
w, h = im.size
delimiter
d[tup[0]] = {}
delimiter
cj = cookielib.CookieJar()
delimiter
sys.getsizeof(sys.getsizeof)
delimiter
np.argsort(mapper_a), np.argsort(mapper_b)
delimiter
print(s.query(a_alias, b_alias).all())
delimiter
do_something()
delimiter
counts = collections.Counter(test)
delimiter
np.random.seed(479)
delimiter
print(win.get_name())
delimiter
l.append(make_foo(r))
delimiter
min, max = min(x, y), max(x, y)
delimiter
root.focus_force()
delimiter
appstats_CALC_RPC_COSTS = False
delimiter
stdscr.keypad(1)
delimiter
test(0, 10, 11, 12, 14, 16)
delimiter
orig_save(self, *args, **kwargs)
delimiter
y = collections.Counter(x)
delimiter
f.close()
delimiter
print(Counter(a) == Counter(b))
delimiter
img = np.zeros((height, width, channels), dtype=np.uint8)
delimiter
self.end_headers()
delimiter
hsv(float(i) / (len(data) - 1))
delimiter
print(type(node).__name__)
delimiter
print(ax.get_xlim())
delimiter
a = []
delimiter
[50, 51, 52]
delimiter
all(line in lines or line[::-1] in lines for line in lines_needed)
delimiter
self.rows = numpy.delete(self.rows, i, 0)
delimiter
labels.append(line)
delimiter
partslist = good_histograms(nballs, nboxes, minballs, maxballs)
delimiter
f = Foo()
delimiter
mark_safe(json.dumps(object))
delimiter
asyncio.get_event_loop().run_until_complete(meth(*args, **kwargs))
delimiter
next(b)
delimiter
do_something_5()
delimiter
print(s1.zfill(5), s2.zfill(5))
delimiter
B = rand(10000)
delimiter
print(traceback.format_exc(), file=sys.stderr)
delimiter
port = int(sys.argv[1])
delimiter
cameraR.SetPosition(0, 0, 200)
delimiter
conn.close()
delimiter
pdfContent = db.BlobProperty()
delimiter
word = line.strip()
delimiter
line = f.readline()
delimiter
subplot(212)
delimiter
G.add_edge(2, 4)
delimiter
all(c in hex_digits for c in s)
delimiter
f.seek(0)
delimiter
ax1 = plt.subplot(1, 2, 1)
delimiter
random.shuffle(iters)
delimiter
only_na = df[~df.index.isin(na_free.index)]
delimiter
ex.args = (msg,) + ex.args[1:]
delimiter
meds = df2.median()
delimiter
first_name = models.CharField(max_length=50)
delimiter
fo.close()
delimiter
font.configure(size=size)
delimiter
np.transpose(np.array(X.T * (y - X * b)))[0]
delimiter
app = wx.App(False)
delimiter
context = self.get_context_data()
delimiter
q = q.filter(User.id == uid())
delimiter
print(leaders(xs))
delimiter
theta = 2 * np.pi * np.random.rand(n)
delimiter
one.click()
delimiter
radii * exp(1j * angles)
delimiter
tunnel._rport
delimiter
pdb.set_trace()
delimiter
pipe.execute()
delimiter
build()
delimiter
_auxset = set(a)
delimiter
self.lock.release()
delimiter
self.do_egg_install()
delimiter
data.most_common()
delimiter
y = np.array([(0, -5), (1, 0), (2, 5), (5, 20), (6, 25)], dtype=dtype)
delimiter
pool.close()
delimiter
rec_split(s)
delimiter
exit()
delimiter
ts.to_pydatetime()
delimiter
list(in_order(x))
delimiter
queryset.query.__str__()
delimiter
server_A_thread.start()
delimiter
os.wait()[0]
delimiter
sysconfig.get_platform()
delimiter
cur.close()
delimiter
http_client = tornado.httpclient.HTTPClient()
delimiter
row = next(csv.reader([line]))
delimiter
one_array.append(5)
delimiter
this_row_std = numpy.std(np_row)
delimiter
r.status_code
delimiter
deepest_list, max_depth
delimiter
baz.__doc__
delimiter
app = Flask(__name__)
delimiter
print(datetime.datetime.now())
delimiter
ax.margins(0.05)
delimiter
browser = webdriver.Firefox()
delimiter
print(key, item[key])
delimiter
x_scattered, y_scattered = np.random.rand(2, N_scattered ** 2) * 2 - 1
delimiter
list(filter(invent_some_convoluted_name, list(range(10))))
delimiter
Base.metatada.bind = op.get_bind()
delimiter
stations[w] = i
delimiter
-24.1529840248
delimiter
-7.87165586175
delimiter
-24.9012815104
delimiter
-7.44222705099
delimiter
-6.25705487929
delimiter
-7.141616656
delimiter
-15.0906961724
delimiter
sd.sleep(duration * 1000)
delimiter
sys.__stderr__ = dummyStream()
delimiter
self.SaveSettings()
delimiter
print(i.get())
delimiter
new[k].extend(v)
delimiter
plt.imshow(im)
delimiter
msg.set_payload(zf.read())
delimiter
curs.execute(sql, dates + [id])
delimiter
data = json.loads(json_string)
delimiter
img.view(np.uint8)
delimiter
fig = plt.figure()
delimiter
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
delimiter
self.other_field = other_field
delimiter
merged = pd.concat(dfs, axis=1)
delimiter
bits = int(max(8, math.log(num, 2) + 1))
delimiter
x = [(i, i * i) for i in range(5)]
delimiter
new_list = []
delimiter
tk.Frame.__init__(self, *args, **kwargs)
delimiter
add.apply_async(args, kwargs, task_id=i)
delimiter
int_list
delimiter
a[2] = 55
delimiter
systems = []
delimiter
culled_list
delimiter
iter([item])
delimiter
cb.stateChanged.connect(self.changeTitle)
delimiter
m.drawcoastlines()
delimiter
self.nout = 0
delimiter
print(list(kwargs.keys()))
delimiter
writer.writerow(new_row)
delimiter
student_tuples.sort(key=itemgetter(2), reverse=True)
delimiter
Clothing | Menswear | Pants | Pajamas
delimiter
rs = (grequests.post(u, data=params) for u in urls)
delimiter
print(p.x, p.y)
delimiter
df
delimiter
funcfile.close()
delimiter
do_something_4()
delimiter
print(df)
delimiter
bucket = conn.get_bucket(your_bucket)
delimiter
a = np.array([5, 4])[np.newaxis]
delimiter
text.translate(tbl)
delimiter
display(Image(filename=imageName))
delimiter
allkey = {key for dictio in alldict for key in dictio}
delimiter
print(nx.topological_sort(g))
delimiter
B = lfilter([a], [1.0, -b], A)
delimiter
foo.py
delimiter
p.join()
delimiter
cursor.execute(cql_statement, rename_dict)
delimiter
wipe = Wipe()
delimiter
newTimeStamp = time.mktime(newTimeStamp.timetuple())
delimiter
self.triangle_down_color = 1, 0, 1, 1
delimiter
matched.append(dict(group))
delimiter
outfilename = os.path.join(path, name)
delimiter
__file__
delimiter
n, d = divmod(n, 256)
delimiter
dst.SetProjection(match_proj)
delimiter
self._queue.join_thread()
delimiter
x = np.linspace(0, 6, 200)
delimiter
shp = b.shape[:-1]
delimiter
b = np.zeros((N, N + 1))
delimiter
print(repr(isanything))
delimiter
tkw = dict(size=4, width=1.5)
delimiter
c = Counter({k: v for k, v in list(c.items()) if k not in bad_words})
delimiter
print(soup)
delimiter
path = os.path.join(basepath, fname)
delimiter
ctx.set_source_rgb(1, 1, 1)
delimiter
self.web_view.loadFinished.connect(self._load_finished)
delimiter
print(a)
delimiter
df.ix[(df.num - x).abs().argsort()[:5]]
delimiter
self._array[self._index]
delimiter
f = Foo()
delimiter
print(books[i].price)
delimiter
blocks[1][0]
delimiter
pickle.dump(biverses, arquive)
delimiter
self.data.__setitem__(key, value)
delimiter
[k.key for k in set(IPKey(k) for k in workers)]
delimiter
print(page.mediaBox.getUpperRight_x(), page.mediaBox.getUpperRight_y())
delimiter
noholes = mh.morph.close_holes(skel)
delimiter
file_path = filename.split(os.sep)
delimiter
help(zip)
delimiter
print(line)
delimiter
tree[x][y][z].append(value)
delimiter
conn = engine.connect()
delimiter
print((date, enumerate(events)))
delimiter
mat = lil_matrix((len(arr), len(arr)))
delimiter
ZS.append(row)
delimiter
self.taskLogger.__exit__(status, retval, task_id, args, kwargs, einfo)
delimiter
soup = BeautifulSoup(string)
delimiter
seq.set_seqs(a.lower(), b.lower())
delimiter
sys.exit(application.exec_())
delimiter
rows = cur.fetchall()
delimiter
print(leadingzerocounts)
delimiter
print(datetime.now() - startTime)
delimiter
new_genpost.save()
delimiter
G.add_edges_from([x, temp.pop()] for x in L2)
delimiter
print(list(result_strings))
delimiter
self.Show(False)
delimiter
self.update(dict(list(parent_element.items())))
delimiter
mylib.Add.argtypes = [c_int, c_int]
delimiter
float(op)
delimiter
reader = PdfFileReader(f)
delimiter
np.unique(a)
delimiter
self.response.out.write(self.dump_csv())
delimiter
pool = multiprocessing.Pool()
delimiter
tmp = tmp.reshape(2, 2, 4)
delimiter
hide_spines()
delimiter
num_in_box = models.IntegerField()
delimiter
fig.show()
delimiter
header = {k: v[0] for k, v in header.items()}
delimiter
YOOOO
delimiter
print(d[keyList[i + 1]])
delimiter
fig = plt.figure()
delimiter
S = myfile.read()
delimiter
raise MyCustomException()
delimiter
gtk.main()
delimiter
plt.show()
delimiter
sum(x1 * y2 - y1 * x2 for (x1, y1), (x2, y2) in pairs) / 2
delimiter
struct.unpack(fmt, astr)
delimiter
pdf_reader = PdfFileReader(f)
delimiter
ax1.set_ylim(0, 1)
delimiter
m = np.tril(a) + np.tril(a, -1).T
delimiter
combined[1::2] = pos
delimiter
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
fig = pyplot.figure()
delimiter
df = ts.reset_index()
delimiter
plt.plot(b, a2)
delimiter
arr = numpy.array(arr)
delimiter
print(os.path.abspath(fullname))
delimiter
print(a.T)
delimiter
app.exec_()
delimiter
X = X.T
delimiter
print(data)
delimiter
d = json.loads(text)
delimiter
p = argparse.ArgumentParser()
delimiter
self.vLayout = QtGui.QVBoxLayout()
delimiter
foo()
delimiter
data = resp.read()
delimiter
newfunc
delimiter
pool = Pool(num_items)
delimiter
p.acquire()
delimiter
button = QtGui.QPushButton(name, self)
delimiter
title = models.CharField(max_length=40)
delimiter
x, y, z = int(x) + 1, int(y) + 1, int(z) + 1
delimiter
sys.stderr = UTF8StreamWriter(sys.stderr)
delimiter
res = client.get_job_status(jr)
delimiter
p.stdin.write(the_input)
delimiter
f, x, y, z = generate_data(nobservations, a, b, c)
delimiter
ax.set_xticklabels(row_labels, minor=False)
delimiter
True
delimiter
tornado.ioloop.IOLoop.instance().start()
delimiter
A[:, (0)] = np.log(x)
delimiter
setattr(cls, attr, prop)
delimiter
soup = BeautifulSoup(tidy_document(browser.response().read())[0])
delimiter
[lst[round(division * i):round(division * (i + 1))] for i in range(n)]
delimiter
temp_csv.seek(0)
delimiter
signal.alarm(0)
delimiter
0
delimiter
print(len(x.tostring()), len(dumps(x)))
delimiter
type(float(s))
delimiter
auth_user = form.get_user()
delimiter
plt.title(title)
delimiter
A.__init__(self, *args)
delimiter
sorted_table = [[row[j] for j in js] for row in table]
delimiter
Doc.images.all()
delimiter
problems = False
delimiter
ax.plot_surface(xx, yy, z, alpha=0.2, color=[0, 1, 0])
delimiter
newImage.paste(im, (x1, y1, x1 + old_width, y1 + old_height))
delimiter
xyB[:, (0)] *= lengthB / (xyB[:, (0)].max() - xyB[:, (0)].min())
delimiter
r2 = np.hstack((w, b, w, b, w, b, w))
delimiter
screen_height = root.winfo_screenheight()
delimiter
x = np.random.random(1000000)
delimiter
unicode_text = f.read()
delimiter
print(msg.SenderName)
delimiter
sel = Selector(response)
delimiter
MySerializer
delimiter
assert np.all(list(filter(df, 1)) == df)
delimiter
_(calendar.day_name[0])
delimiter
GL.glLoadIdentity()
delimiter
request.add_data(data)
delimiter
deleteself.thisptr
delimiter
x2D = x.reshape(-1, n / q, q).transpose(1, 0, 2).reshape(-1, q)
delimiter
some = [random.randrange(10000) for _ in range(1000)]
delimiter
grouped_cc[ki].add(kj)
delimiter
grouped_cc[kj].add(ki)
delimiter
True
delimiter
pd[0].append(1)
delimiter
s.any()
delimiter
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
delimiter
isinstance(val, int) or isinstance(val, float) and val.is_integer()
delimiter
main()
delimiter
nw[0]
delimiter
sum(a, [])
delimiter
b[:, :, (2)]
delimiter
val = d[key]
delimiter
types.FunctionType(new_code_obj, f.__globals__)
delimiter
x = np.random.randn(1000)
delimiter
data[row[0]] = row[1:]
delimiter
x.shape += 1,
delimiter
root.withdraw()
delimiter
ArgumentParser.add_subparsers()
delimiter
output
delimiter
clf()
delimiter
fig.show()
delimiter
x = numpy.array([Foo(), Foo()])
delimiter
print(x)
delimiter
platform.version()
delimiter
columns = zip(*cursor.description)[0]
delimiter
result = cache.get(cache_key)
delimiter
print(M.shape, Msmall.shape)
delimiter
clientsocket.send(msg)
delimiter
self.table = QtGui.QTableWidget()
delimiter
s.add(a)
delimiter
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
delimiter
vals = np.array([color1, color2], dtype=np.uint8)
delimiter
instance.put()
delimiter
print(msgpack.loads(x))
delimiter
self._bar
delimiter
e.extract()
delimiter
result = recursive_dict()
delimiter
self.oldText.tokens.clear()
delimiter
app = Flask(__name__)
delimiter
control.SetPosition((10, 10))
delimiter
print(data)
delimiter
individuals.append(individuals.loc[1])
delimiter
self.x += 1
delimiter
sizer_1.Add(self.panel, 1, wx.EXPAND | wx.ALL, 0)
delimiter
self.workers.release()
delimiter
self.queue[index]
delimiter
r_ab = np.array([r_a, r_b])
delimiter
session.query(Beard, Moustache).select_entity_from(stmt)
delimiter
self.assertEqual(99, s)
delimiter
a = np.array(a)
delimiter
f.seek(n)
delimiter
_threadmap = {}
delimiter
index[:-1] = groups[1:] != groups[:-1]
delimiter
x = np.arange(-5, 5)
delimiter
count1 = len(shortstrings)
delimiter
plt.ylim((1e-20, 1e-10))
delimiter
x, y = [], []
delimiter
some_code()
delimiter
id = Column(Integer, primary_key=True)
delimiter
y, x = np.histogram(df, bins=bins, normed=True)
delimiter
logger.propagate = False
delimiter
pool.join()
delimiter
x()
delimiter
html - page - context(app, pagename, templatename, context, doctree)
delimiter
rcode = response.rcode()
delimiter
app.exec_()
delimiter
print(content)
delimiter
pypitest
delimiter
user = request.user
delimiter
print(tmp.index(K[-N]))
delimiter
elem.send_keys(Keys.RETURN)
delimiter
server_socket.listen(1)
delimiter
df
delimiter
self.figure, self.ax = plt.subplots()
delimiter
node = self.head
delimiter
gdb.start_event_loop
delimiter
cur = [[14, k, j] for j, k in zip(rows[14], list(range(15)))]
delimiter
output, error = sp.communicate()
delimiter
html = response.read()
delimiter
y = list(max_elements.values())
delimiter
s = socket.socket()
delimiter
self.image = gtk.Image()
delimiter
scipy.nan
delimiter
i += 1
delimiter
example()
delimiter
self.a[-1] = self.z[-1]
delimiter
fig, axs = plt.subplots(2, 1)
delimiter
self.mplvl = QtGui.QWidget(Form)
delimiter
root = tk.Tk()
delimiter
df.min(axis=1)
delimiter
stack.append((prev_indent, prev_tree))
delimiter
ipython - -no - banner
delimiter
dis.show_code(a_long_tuple)
delimiter
blo += 1
delimiter
dic.get(key)
delimiter
os.chdir(savedir)
delimiter
------models.py
delimiter
b = a.copy()
delimiter
df[1]
delimiter
print(i)
delimiter
i = 0
delimiter
curlstdout, curlstderr = psub.communicate()
delimiter
column_1 = [float(line.strip()) for line in f]
delimiter
map.close()
delimiter
test.reshape(-1, 2)
delimiter
PrintLn(i)
delimiter
out, err = proc.communicate()
delimiter
_curried
delimiter
my_template = template.Template(template_string)
delimiter
sys.argv[1]
delimiter
random.choice(list(open(WORDS_FILENAME)))
delimiter
counts[char] += 1
delimiter
db.init_app(app)
delimiter
os.symlink(target, symlink)
delimiter
file.flush()
delimiter
temp_rdd.toDF(schema).printSchema()
delimiter
unq_count = np.diff(np.nonzero(unq_first)[0])
delimiter
len(sall)
delimiter
df = pd.DataFrame(rows, columns=cols)
delimiter
rsp.raw._connection.sock.getpeername()
delimiter
set([y, x, 0])
delimiter
zip(a, b)
delimiter
configs / __init__.py
delimiter
self.after(4000, self.draw)
delimiter
sigmoid(0.458)
delimiter
fig = plt.figure()
delimiter
smtp.ehlo()
delimiter
savetext(filename, a.reshape(1, a.shape[0]))
delimiter
setattr(namespace, self.dest, values)
delimiter
comb = itertools.product(uk_rock_stars, uk_pop_stars, us_stars)
delimiter
h = np.zeros((2, 2, 1))
delimiter
assert foo.bar == 50
delimiter
ax.plot(matrix[(i), :])
delimiter
foo = timeit(foo)
delimiter
logger = logging.getLogger()
delimiter
output_files[i].close()
delimiter
setup_environ(settings)
delimiter
10 * -1
delimiter
paw_code[diff.argmin()]
delimiter
self.dependency.__enter__()
delimiter
pygame.event.pump()
delimiter
session.visit(my_url)
delimiter
model = Sequential()
delimiter
False
delimiter
default_font.configure(size=48)
delimiter
crawler.start()
delimiter
output.append(x)
delimiter
comparison_df = pd.DataFrame(index=matrix.index)
delimiter
outfile.write(line)
delimiter
data = heapq.nlargest(2, enumerate(my_list), key=lambda x: x[1])
delimiter
L.extend([some_mutable_object for x in range(10)])
delimiter
c.setopt(pycurl.MAXREDIRS, 5)
delimiter
text
delimiter
ax.set_position(ax._orig_position)
delimiter
N = data.shape[1]
delimiter
output = np.zeros_like(foo)
delimiter
header = [next(f) for _ in range(header_len)]
delimiter
ax = plt.subplot(122)
delimiter
self.image.url
delimiter
delete_bar
delimiter
yaml.dump(d, yaml_file, default_flow_style=False)
delimiter
myimages.append([imgplot])
delimiter
next(iterator)
delimiter
but.pack()
delimiter
y_true = np.array([0, 1, 0, 0, 1, 1, 0, 1, 0])
delimiter
func(*args, **kwds)
delimiter
result = [(item, count(item)) for item in set(the_list)]
delimiter
model = model.fit(X, y)
delimiter
result = []
delimiter
sys.stdin.read()
delimiter
m = numpy.rot90(m, k)
delimiter
nlist = [x for sub_l in (split_or_not(l) for l in blist) for x in sub_l]
delimiter
db.commit()
delimiter
[0] * -1
delimiter
self.flush()
delimiter
create_browserid_user(kwargs)
delimiter
a = [7, 14, 0, 9, 19, 9]
delimiter
terrf = ax.contourf(xi, yi, height, 15, cmap=plt.cm.Blues, alpha=0.5)
delimiter
theta = np.linspace(0.0, 2 * np.pi, N, endpoint=False)
delimiter
im_array = np.array(Image.open(im))
delimiter
[number] * int(factor)
delimiter
plt.annotate(annotation_string, xy=(0.5, 0.5))
delimiter
str2num = (np.fromstring(A, dtype=np.uint8) - 48).reshape(-1, 4)
delimiter
l.count(True) == 1
delimiter
hashlib.sha1(url).hexdigest()[:10]
delimiter
PyErr_Clear()
delimiter
unfiltered = ((myFunction(C), C) for C in originalList)
delimiter
my_array.append(e)
delimiter
ax.add_line(line)
delimiter
xy_pixels = ax.transData.transform(np.vstack([x, y]).T)
delimiter
(x < 0).sum()
delimiter
out = np.zeros((N, shp[0], N, shp[1]), dtype=int)
delimiter
image = Image.open(image_string)
delimiter
c.close()
delimiter
print(args)
delimiter
leng.count = 0
delimiter
plt.subplot2grid((4, 4), [2, 0], 2, 2)
delimiter
urlparse.urlunsplit((scheme, netloc, path, qs, anchor))
delimiter
len(self._choices)
delimiter
ax = fig.gca()
delimiter
axes[2].hexbin(x, y)
delimiter
counts = defaultdict(int)
delimiter
main()
delimiter
self.toolbar.addAction(action)
delimiter
o.close()
delimiter
interp_i = np.linspace(0, i.max(), 5 * i.max())
delimiter
x, y = x.difference(y), y.difference(x)
delimiter
f.write(png_recovered)
delimiter
h = np.zeros((2, 2, 2))
delimiter
img = np.array(img)
delimiter
fcntl.fcntl(fd, fcntl.F_SETFL, flags_save)
delimiter
repeats = np.diff(np.r_[jump_indices, [N]])
delimiter
ax.set_xticks(xlabels)
delimiter
fig = plt.figure()
delimiter
tf.add_n([tf.nn.l2_loss(t) for t in list_o_tensors])
delimiter
soup = BeautifulSoup(r.text)
delimiter
a_tr = zip(*a_padded)
delimiter
print(row)
delimiter
i += 1
delimiter
print(next(csv.reader([c])))
delimiter
self.store.append(data)
delimiter
self.setLayout(layout)
delimiter
apps2
delimiter
len(L1) == len(L2) and sorted(L1) == sorted(L2)
delimiter
df.ix[row_pos]
delimiter
list.focus(items[0])
delimiter
subprocess.check_call(cmd.split())
delimiter
self._bar = value
delimiter
[[next(it) for c in g] for k, g in grouped]
delimiter
unquote(unquote(s))
delimiter
newlist = []
delimiter
ip.release()
delimiter
logging.basicConfig(stream=sys.stderr)
delimiter
image_y[:, :] = image_yuv[:, :, (0)]
delimiter
ip.close()
delimiter
any(it) and not any(it)
delimiter
x = numpy.linspace(0, len(y) + 2, 100)
delimiter
openlist.put((heuristicf(neighbor), node(neighbor, current.g + 1, current)))
delimiter
a = np.array([True, True, True, False, False])
delimiter
q.append(next(i))
delimiter
main()
delimiter
print(a)
delimiter
assert isinstance(value, (int, float))
delimiter
rpy2.robjects.vectors.DataFrame(od)
delimiter
ex[0]
delimiter
urllib.request.urlopen(quoted_url)
delimiter
sys.path.insert(0, parentdir)
delimiter
option = EuropeanOption(payoff, exercise)
delimiter
self.searchobj
delimiter
baset = datetime.now()
delimiter
os.remove(path)
delimiter
self.deal()
delimiter
string.Formatter().parse(s)
delimiter
l.append(self.gears[x][index])
delimiter
user_input = default
delimiter
plt.rgrids(list(range(5, 20, 5)), angle=290)
delimiter
b = b.add(1).cumprod()
delimiter
df_subset = df[(df.B == 1) & (df.D > 5)]
delimiter
sum(utf8_char_len(c) for c in s)
delimiter
math.hypot(p1[0] - p2[0], p1[1] - p2[1])
delimiter
n += 1
delimiter
os.setresuid(0, 0, -1)
delimiter
exit()
delimiter
print(dot(M0, v))
delimiter
cr.set_source_rgba(0, 0, 0, 1)
delimiter
result = joiner.join(result)
delimiter
results = model.fit()
delimiter
ax.set_ylim(-10, 10)
delimiter
print(cur.fetchall())
delimiter
df2 = df1.div(df1.sum(1), axis=0)
delimiter
sys.__stdout__ = dummyStream()
delimiter
thefile.seek(-len(line), 1)
delimiter
dict.__setitem__(self, key, self.default_factory(key))
delimiter
result = func(*args)
delimiter
print(json.dumps(d))
delimiter
client = paramiko.SSHClient()
delimiter
response = HttpResponse()
delimiter
self.add(data)
delimiter
self.save_m2m()
delimiter
output = StringIO.StringIO()
delimiter
process = multiprocessing.Process(target=foo, args=(to_self,))
delimiter
df
delimiter
print(len(cj))
delimiter
fig = plt.figure()
delimiter
print(row[1:12])
delimiter
a = np.random.uniform(0, 10, size=10)
delimiter
doSwim(where, why, **kwargs)
delimiter
result.append(word)
delimiter
sys.exit(1)
delimiter
y = numpy.array(x)
delimiter
f = StringIO.StringIO()
delimiter
shmdt(shmid)
delimiter
{buildout: software - parts}
delimiter
c = b.copy()
delimiter
self.button1.clicked.connect(self.handleButton)
delimiter
abs((d2 - d1).days)
delimiter
ax = plt.gca()
delimiter
self.lock.release()
delimiter
print(line)
delimiter
self.tstore.clear()
delimiter
Mailbox.user(user)
delimiter
Image()
delimiter
cache[object_to_cache] = object_to_cache
delimiter
df.t.dt.normalize()
delimiter
deletegraph[i]
delimiter
print(isinstance(MyClass(), MyClass))
delimiter
print(type(fresult.col1.iat[2]))
delimiter
ncol = len(traindf.rdd.map(lambda r: r.image).first())
delimiter
count2 += 1
delimiter
u = np.sin(np.pi * x) * np.cos(np.pi * y) * np.cos(np.pi * z)
delimiter
parser = ElementTree.XMLParser(recover=True)
delimiter
handle.write(block)
delimiter
pylab.show()
delimiter
app = Flask(__name__)
delimiter
z = [0, 0, 0]
delimiter
first_user = User.objects.all()[0]
delimiter
ax.margins(0.01)
delimiter
tdomain = df2domain(df)
delimiter
words = sum(c.isalpha() for c in s)
delimiter
client_sock, client_addr = server_sock.accept()
delimiter
cv.SetImageROI(newCanvas, (image.width, 0, img0.width, img0.height))
delimiter
a.call_me()
delimiter
L = list(range(0, 101, 10))
delimiter
print(np.max(a, axis=axis))
delimiter
result = np.empty((27, 27))
delimiter
plt.show()
delimiter
ax.set_yticks(T)
delimiter
print(sess.run(parsed, feed_dict={raw: my_data}))
delimiter
r = np.sqrt(x ** 2 + y ** 2)
delimiter
soup = bs(html)
delimiter
a[2] is b[-2]
delimiter
now = time.mktime(time.gmtime())
delimiter
self.cursor.close()
delimiter
reverse_d[value] = key
delimiter
cursor = connection.cursor()
delimiter
output.extend(seq[1:])
delimiter
btn.Bind(wx.EVT_BUTTON, self._onShowCntrls)
delimiter
pprint.pprint(dict(groups))
delimiter
electronDensity = eval(vName)
delimiter
b, c = indices = np.sort(np.random.randint(size + 1, size=(2, size)), axis=0)
delimiter
datetime.now()
delimiter
s += A[k] * B[k]
delimiter
the_dict
delimiter
self.failureResultOf(self.o.failure()).trap(ConnectionRefusedError)
delimiter
assert ostr.good()
delimiter
output = [(0) for x in range(6)]
delimiter
_.flatten()
delimiter
fruits[1]
delimiter
code_object.co_stacksize, code_object.co_flags, code_object.co_code
delimiter
print(mail.getwelcome())
delimiter
df.groupby(0).mean()
delimiter
pythons_psutil.append(p)
delimiter
r = [ran.random() for i in range(1, 100)]
delimiter
then = datetime(2016, 1, 1, 0, 0, 0)
delimiter
gt = ds.GetGeoTransform()
delimiter
t, y = scipy.signal.dstep(sysd_ss)
delimiter
self.locator.sub(self._doreplace, s)
delimiter
socketIO.wait(seconds=1)
delimiter
time.sleep(10)
delimiter
start = time.clock()
delimiter
self.fields.pop(field_name)
delimiter
main()
delimiter
fig, ax = plt.subplots()
delimiter
auth = urllib.request.HTTPBasicAuthHandler()
delimiter
foo(*args, **some_args)
delimiter
reader = csv.DictReader(csvfile)
delimiter
fig, ax = plt.subplots()
delimiter
process.stderr.close()
delimiter
username = models.CharField(max_length=100)
delimiter
b = a[:]
delimiter
timezone.make_aware(date, timezone.utc)
delimiter
text.see(END)
delimiter
env = Environment()
delimiter
self.__copy__()
delimiter
solution2 = (-b + cmath.sqrt(d)) / (2 * a)
delimiter
p = Pool()
delimiter
data = data.reshape(len(data) / num_channels, num_channels)
delimiter
today = date.today()
delimiter
column_entry.show()
delimiter
self.local_storage._save(filename, content)
delimiter
line = sys.stdin.readline()
delimiter
wrapper
delimiter
plt.gray()
delimiter
bSizer.Add(button5, 0, wx.ALL, 5)
delimiter
print(data[np.r_[np.diff(id), True].astype(np.bool)])
delimiter
a = datetime.datetime(2015, 10, 1)
delimiter
my_list.append(float(item[0]))
delimiter
tabrows.append(row)
delimiter
self.thread.setDaemon(True)
delimiter
temp = scaler.transform(temp)
delimiter
time.sleep(5)
delimiter
pprint.pprint(res)
delimiter
df = DataFrame(d)
delimiter
PyErr_SetString(p_eigen_python_error, msg.c_str())
delimiter
writer.writerow(row + [message])
delimiter
X, Y = np.meshgrid(x, x)
delimiter
utc_dt = datetime.utcfromtimestamp(ts)
delimiter
app.internalerror = myinternalerror
delimiter
d[i] += 1
delimiter
print(len(s))
delimiter
Py_DECREF(py_string)
delimiter
heapq.heappop(self._data)[1]
delimiter
br.set_cookiejar(cj)
delimiter
os.remove(os.path.join(root, name))
delimiter
print(scapy.__file__)
delimiter
z = np.tensordot(p2, x, axes=([0, 2], [0, 1]))
delimiter
rect_one = pygame.Rect(x_pos, y_pos, 10, 10)
delimiter
h.setdefault(x, []).append(y)
delimiter
x = np.arange(W)
delimiter
Subscript
delimiter
samples[random.randint(0, n_samples - 1)] = line
delimiter
notifier.loop()
delimiter
test = df.drop(train.index)
delimiter
sorted([1, N, 0, 9999, sys.maxsize])
delimiter
tuple(a)
delimiter
qlock.acquire()
delimiter
fh = os.open(outfile, os.O_CREAT | os.O_WRONLY, perm)
delimiter
customer = models.ForeignKey(Pizza)
delimiter
proc.terminate()
delimiter
X = np.random.normal(size=N)
delimiter
g = f()
delimiter
print(x)
delimiter
diffs = (df.sign.diff() != 0).cumsum()
delimiter
pylab.show()
delimiter
zip(a, b)
delimiter
size_width, size_height = image.readline().split()
delimiter
NSERC_CB04_A0401
delimiter
session.commit()
delimiter
mytuple = tuple(mylist)
delimiter
[line.strip() for line in foo if not line.isspace()]
delimiter
julia > ma.is_masked(x)
delimiter
49800000000
delimiter
4000000000000000000000000000000
delimiter
frame = inspect.currentframe()
delimiter
print(list(multi_d.items()))
delimiter
geocalc(-6.508, 55.071, -8.886, 51.622)
delimiter
self.username = username
delimiter
a = np.arange(10)
delimiter
data = etree.parse(fname)
delimiter
filename = traceback.tb_frame.f_code.co_filename
delimiter
plt.draw()
delimiter
interpreter.process_page(page)
delimiter
p = Process(target=multiply, args=(5, 4, queue1))
delimiter
d.year
delimiter
print(np.array(data))
delimiter
self._name
delimiter
array([math.atan2(y, x) for y, x in zip(diff(y1), diff(x1))])
delimiter
cap.set(cv.CV_CAP_PROP_FRAME_HEIGHT, int(y))
delimiter
print(a % tuple(b))
delimiter
handler500 = Custom500View.as_view()
delimiter
r = np.linalg.norm(R)
delimiter
file.close()
delimiter
time.sleep(6)
delimiter
demo_kalman_xy()
delimiter
a += b_ext[start_idx[j]:start_idx[j] + n]
delimiter
count(0, 0)
delimiter
sets.append(x)
delimiter
a.py
delimiter
self.handlers[event].add(callback)
delimiter
sys.exc_clear()
delimiter
self.__initialized = True
delimiter
ax = plt.gca()
delimiter
A[:, (1)] = 1
delimiter
b = np.array([0, 1, 0, 1, 0, 1])
delimiter
print((a, b, c))
delimiter
sc = proprocessing.StandardScaler().fit(X)
delimiter
main()
delimiter
ax = plt.gca()
delimiter
self.md5.update(o)
delimiter
print(df.max(axis=1))
delimiter
signal.signal(signum, _gogentle)
delimiter
item.setPos(position.x(), position.y())
delimiter
print(byall())
delimiter
fig = pyplot.figure()
delimiter
self.dictList[item][self.key]
delimiter
d[k] = d[k][0]
delimiter
string[i:i + len(keyword) + 5]
delimiter
df.show()
delimiter
callback(req)
delimiter
util.run_wsgi_app(application)
delimiter
module_filetype = os.path.splitext(module_filename)[1]
delimiter
int(text) if text.isdigit() else text
delimiter
plt.grid(True)
delimiter
cur = con.cursor()
delimiter
TextConverter.__init__(self, *args, **kwargs)
delimiter
ax.add_patch(patch)
delimiter
cs.send(c + 1)
delimiter
self.thisptr.getA()
delimiter
self.addItems(self.list_two)
delimiter
rowsums = pd.concat([df.sum(axis=1)] * 2, ignore_index=True, axis=1)
delimiter
self.splitter.addWidget(self.view)
delimiter
stringFrom(v)
delimiter
print(list(splitter(str, split_points)))
delimiter
p.save()
delimiter
my_thread.join()
delimiter
first_day = dt.replace(day=1)
delimiter
df1 = df1[~dupe_rows]
delimiter
items.sort(key=keys.__getitem__)
delimiter
print([(r / s) for r in raw])
delimiter
generate_random_data(latitude, longitude, 5)
delimiter
app = Flask(__name__)
delimiter
alias = db.StringProperty()
delimiter
C = M.T.reshape(1, ncols, 1, nrows) * M.T.conj().reshape(ncols, 1, nrows, 1)
delimiter
x = np.ma.array(x, mask=mask)
delimiter
m = l + [(i + 1) for i in l]
delimiter
self.value
delimiter
fig = plt.figure()
delimiter
x, y = np.meshgrid(np.arange(10), np.arange(10))
delimiter
func(*args, **kwargs)
delimiter
print(m.groups())
delimiter
r = requests.get(login_url, cookies=jar)
delimiter
setup(**configuration)
delimiter
freqs = np.fft.fftfreq(len(x))
delimiter
cursor = cnxn.cursor()
delimiter
soup = BeautifulSoup(resp.get_data())
delimiter
time_end = time.time()
delimiter
np.diff(np.where(np.diff(np.hstack([False, a, False])))[0])[::2]
delimiter
qs = cgi.parse_qs(urlparse.urlparse(url)[4])
delimiter
parseLog(sys.argv[1])
delimiter
location, (latitude, longitude)
delimiter
print(match.groups())
delimiter
x * x
delimiter
tz.normalize(dt.astimezone(tz)).time()
delimiter
B60 = A60 + B59
delimiter
self.axes.plot(t, s)
delimiter
np.abs(A[:, (np.newaxis)] - B)
delimiter
print(list(Squares(5, 50)))
delimiter
reader = unicode_csv_reader(open(filename))
delimiter
cal_window.stick()
delimiter
result = []
delimiter
unpickledlist = pickle.load(f)
delimiter
image.save(output, format)
delimiter
keys.add(entity.getKey())
delimiter
list(test)
delimiter
-ntrees
delimiter
[]
delimiter
out_file.write(in_data)
delimiter
os.close(fin)
delimiter
int(x)
delimiter
abs(new - old).max()
delimiter
print(func())
delimiter
logger.setLevel(level)
delimiter
i, j = np.ogrid[0:5, 0:5]
delimiter
sess.run(train_step, feed_dict={learning_rate: 0.01})
delimiter
self.child.start()
delimiter
pubkey.assign_rsa(rsa)
delimiter
a180 = np.rot90(a.T, 2).T
delimiter
sorted(files, key=numericalSort)
delimiter
fig = plt.figure(figsize=(5, 5))
delimiter
pool.apply_async(f, args=(i,))
delimiter
client.settimeout(60)
delimiter
B().a1()
delimiter
{k: (x.get(k, []) + y.get(k, [])) for k in set(x).union(y)}
delimiter
response
delimiter
src_dt = src_tz.localize(dt)
delimiter
pylab.colorbar()
delimiter
pdb.set_trace()
delimiter
y = lab[:, :, 1:]
delimiter
print(t.timeit(1000))
delimiter
E(X, X > Y, evaluate=False)
delimiter
[tuple_array[i] for i in range(0, array.len)]
delimiter
index, word = line.split()
delimiter
tk.Frame.__init__(self, parent)
delimiter
df
delimiter
list.append(self, a)
delimiter
do_something_with_connection(b)
delimiter
print(bv)
delimiter
driver = webdriver.WhatEverBrowser()
delimiter
print(char, char.isalpha())
delimiter
writer.write(tup)
delimiter
result = seq.index(first_val)
delimiter
NULL
delimiter
self.layout.addWidget(self.listWidget)
delimiter
json_data = json.dumps(response)
delimiter
cand[i] += 1
delimiter
cipher = AES.new(self.key, AES.MODE_CBC, iv)
delimiter
len(s)
delimiter
c = db.cursor()
delimiter
self.pushes
delimiter
basket = dict(basket_one, **basket_two)
delimiter
draw.ellipse((0, 0, rad * 2, rad * 2), fill=255)
delimiter
ax1 = fig.add_subplot(111)
delimiter
model = model.fit(X, y)
delimiter
opener = urllib.request.build_opener(authhandler)
delimiter
copy_my_list = copy.deepcopy(my_list)
delimiter
df2 = pd.DataFrame(values, index=index, columns=columns)
delimiter
genes_dict[row[0]] = row[1:]
delimiter
form = UploadFileForm(request.POST, request.FILES)
delimiter
a = datetime.datetime(2011, 8, 1)
delimiter
wi = x.Whateveri(5)
delimiter
df.head()
delimiter
workbook.add_worksheet(sheet_name)
delimiter
True
delimiter
ax.text(p.get_x() + 0.05, height + 1, df.columns.levels[1][i])
delimiter
fig.tight_layout()
delimiter
g = df.columns.to_series().groupby(df.dtypes).groups
delimiter
_find_root(os.path.dirname(start), stop)
delimiter
diff = difflib.ndiff(open(file1).readlines(), open(file2).readlines())
delimiter
NULL
delimiter
headers = df.dtypes.index
delimiter
PythonEngine.Shutdown()
delimiter
decorator
delimiter
time.sleep(wait_time)
delimiter
s.set_xticks(ind + 0.5)
delimiter
cols = tuple(df.columns)
delimiter
a = dict([next(iter(x.items())) for x in foo])
delimiter
ceiling_key(d, 2)
delimiter
f.read()
delimiter
offset += len(line)
delimiter
unaware = datetime.datetime(2011, 8, 15, 8, 15, 12, 0)
delimiter
f.close()
delimiter
(np.arange(n) >= arr[:, (np.newaxis)]).astype(int)
delimiter
fd = sys.stdin.fileno()
delimiter
main()
delimiter
s = pd.Series(hourly_data.flatten(), index=new_ind)
delimiter
set_lang(LANG, pylons_config=conf)
delimiter
1, 2, 1
delimiter
remote_api.get_cached_name(user.id)
delimiter
colors = plt.cm.jet(np.linspace(0, 1, 10))
delimiter
irenL.SetRenderWindow(renWinL)
delimiter
c = a / (b * 1.0)
delimiter
numpy.save(f_handle, arr)
delimiter
plt.contourf(data, cmap=cmap, levels=levs)
delimiter
exist = cursor.fetchone()
delimiter
lst.append(d)
delimiter
logger = logging.getLogger(__name__)
delimiter
[conv(val) for conv, val in zip(castings, line)]
delimiter
dis.dis(make_adder)
delimiter
[0.67008007, 0.65984005]
delimiter
self.loop.run_forever()
delimiter
p = Process(target=do_work, args=(work, results))
delimiter
[i for i, j in enumerate(x[:-1], 1) if j != next(i_x)]
delimiter
a = np.arange(size_a)[::-1]
delimiter
modulename, ext = os.path.splitext(filename)
delimiter
time.sleep(5)
delimiter
newargs = newargs[2:]
delimiter
app = QApplication(sys.argv)
delimiter
timeout = 5
delimiter
my_field = models.CharField()
delimiter
Xcum = pd.rolling_sum(X, 10)[9:]
delimiter
nx, ny = np.array(ndata).T
delimiter
out = np.split(C, np.flatnonzero(R[1:] > R[:-1]) + 1)
delimiter
m = np.max(lens)
delimiter
signal.signal(signal.SIGINT, self._handle_SIGINT)
delimiter
[(c.name, c.get_items()) for c in forms[4].controls]
delimiter
e == N or i > 0 and L[i - 1] == N or i < len(L) and L[i + 1] == N
delimiter
self.obj = obj
delimiter
row.Add(m_close, 0, wx.ALL, 10)
delimiter
test(*args, **kwargs)
delimiter
strings.sort()
delimiter
d = {}
delimiter
inputElement.send_keys(Keys.ENTER)
delimiter
print(a, b, c)
delimiter
f.close()
delimiter
print(max_seq_len)
delimiter
lookup.sub(lambda x: trans[x.group()], string)
delimiter
self._table.append(self._dealer.nextCard())
delimiter
changes.extend(valchange(d1[k], d2[k], k))
delimiter
x.max(0)
delimiter
rPM.restype = wintypes.BOOL
delimiter
it = heapq.nlargest(20, enumerate(allrows), key=lambda x: x[1][2])
delimiter
i += 1
delimiter
print(list(reversed(astr.translate(deleter).split())))
delimiter
handles, labels = ax.get_legend_handles_labels()
delimiter
sum(1 for i in range(1000000) if str(i) == str(i)[::-1])
delimiter
cal.events.add(event)
delimiter
rsa = RSA.load_pub_key_bio(bio)
delimiter
plt.plot(x, p)
delimiter
d = dict(zip(a, b))
delimiter
(1 + erf(x / sqrt(2))) / 2
delimiter
oodict[line[0:7]] = line[12:]
delimiter
process(chunk)
delimiter
self.NEWATTRS = []
delimiter
self.HTMLDATA = []
delimiter
a = 2
delimiter
np.concatenate(ar)
delimiter
is_admin = models.NullBooleanField(default=False, blank=True, null=True)
delimiter
parsed_args = parser.parse_args()
delimiter
soup = BeautifulSoup(html)
delimiter
av_max_dist = float(sum(max_distanace_list) / len(max_distanace_list))
delimiter
sqrt = inverse(lambda x: x ** 2, lambda x: 2 * x)
delimiter
y = [1, 2, 0, 1, 1, 2]
delimiter
people = list(people_dict.values())
delimiter
x[slice1][slice2]
delimiter
c.sum() / c.size
delimiter
decorator
delimiter
min(i.number for i in iList)
delimiter
MIGRATION_MODULES = DisableMigrations()
delimiter
seen.add(line)
delimiter
plt.axis([-50, 50, 0, 10000])
delimiter
GetLogicalDrives.call()
delimiter
print(f())
delimiter
a.get_position().bounds
delimiter
out_view[i] = in_view[i]
delimiter
self.panel.SetSizer(sizer)
delimiter
print(random_numbers(5, 100))
delimiter
a.str
delimiter
shutil.move(source, destination)
delimiter
self.lock.release()
delimiter
globals()[k] = my_decorator(v)
delimiter
NULL
delimiter
reader = csv.DictReader(StringIO(testdata))
delimiter
output = json.load(sys.stdin)
delimiter
random.seed(42)
delimiter
help(png)
delimiter
fields = list(fields)
delimiter
files = [open(file, mode) for file in files]
delimiter
self.load(buffer, size)
delimiter
device.close()
delimiter
iter([])
delimiter
self.layout.add_widget(self.canvas_widget)
delimiter
response = urllib.request.urlopen(req)
delimiter
result = p.wait()
delimiter
lines, labels = ax1.get_legend_handles_labels()
delimiter
print((fully_qualified(f), f.location))
delimiter
print(ted1(df))
delimiter
y = scipy.signal.lfilter(h, 1.0, x)
delimiter
print(i, elem)
delimiter
multiprocessing.active_children()
delimiter
web.input(**kwargs)
delimiter
lines = []
delimiter
a = numpy.zeros(lnum.bit_length() // 8 + 1, dtype=numpy.uint8)
delimiter
True
delimiter
mat1.append(temp)
delimiter
func(*arg, **kwarg)
delimiter
np.sum(v[r <= 10])
delimiter
print(line)
delimiter
use_setuptools()
delimiter
print(np.real(roots[i]))
delimiter
foo.b
delimiter
a = Fraction(1, 2)
delimiter
foo = Foo()
delimiter
encoded = base64.b64encode(image_binary_data)
delimiter
im = Image.fromarray(np.uint8(cm.gist_earth(myarray) * 255))
delimiter
write_f.close()
delimiter
next(iterator)
delimiter
self.threads[i].start()
delimiter
data = np.fromfile(file=fd, dtype=np.double).reshape(shape)
delimiter
array[i, j] = 0
delimiter
word1 in rhyme(word2, 1)
delimiter
point(self.x + oth.x, self.y + oth.y)
delimiter
app.exec_()
delimiter
canv.pack()
delimiter
ax.plot(list1)
delimiter
l_result = [y for x, y in l_counts]
delimiter
p[2] = q[2]
delimiter
sums = data_in_group.sum(axis=1)
delimiter
plt.show()
delimiter
diam_out = np.maximum.reduceat(dists, shift_idx)
delimiter
sorted(strings)
delimiter
todatetime(endtime) - todatetime(starttime)
delimiter
ax2.set_yticks(numpy.arange(y1 - 1, y2 + 1, 0.5))
delimiter
[(0, 4), (22, 6)]
delimiter
c = a.cumsum()
delimiter
stdscr.keypad(0)
delimiter
a = list(range(10))
delimiter
result[length] = dict((k, v) for k, v in groups)
delimiter
numpy.sin(value)
delimiter
objects = CustomManager()
delimiter
self.buffer.write(data)
delimiter
df_asint = df.astype(int)
delimiter
diff = zfit[:, :-1] - zfit[:, 1:]
delimiter
sym_diff = [item for item in itertools.chain(a, b) if item not in intersec]
delimiter
out = 100 * np.nansum((a[:, (R)] - a[:, (C)]) / a[:, (C)], 0)
delimiter
myhost = os.uname()[1]
delimiter
print(datetime.utcfromtimestamp(ts))
delimiter
df
delimiter
cursor.execute(query_string, query_args)
delimiter
list(itertools.zip_longest(*uneven))
delimiter
self.__getitem__(key)
delimiter
seq2 = [1, 2, 4, 5, 6, 8, 9, 10]
delimiter
[1, 2]
delimiter
print(x)
delimiter
imgBothH = np.hstack((a, b))
delimiter
f1.flush()
delimiter
axe.set_xticks((np.arange(0, 2 * n_ind, 2) + 1 / float(n_df + 1)) / 2.0)
delimiter
q.put(ret)
delimiter
main()
delimiter
t.start()
delimiter
dis.dis(foo.__code__.co_consts[1].co_consts[2])
delimiter
tour
delimiter
id = db.Column(db.Integer, primary_key=True)
delimiter
map(lambda range: a[range[0]:range[1]], zip(start, end))
delimiter
ch1.send(ch2)
delimiter
t = np.arange(10)
delimiter
set(first).intersection(*others)
delimiter
first_dict = dict((ks[0], v) for v, ks in by_val)
delimiter
pool.join()
delimiter
file.seek(here, os.SEEK_SET)
delimiter
sleep(0.1)
delimiter
tokens = a.split()
delimiter
dict(map(ascii_encode, pair) for pair in list(data.items()))
delimiter
table.setColumnWidth(1, 80)
delimiter
s.connect((HOST, PORT))
delimiter
mask.shape
delimiter
conn.begin()
delimiter
query.split()
delimiter
nk = set(a).intersection(b)
delimiter
content = f.read()
delimiter
pygame.quit()
delimiter
resp.geturl()
delimiter
p.map(processChunk, li)
delimiter
time.sleep(1)
delimiter
outfile = os.path.join(dir, name)
delimiter
print(s)
delimiter
wkspFldr = os.path.dirname(existGDBPath)
delimiter
i = np.array(list(range(4))[::-1] * 6).reshape(a.shape)
delimiter
df2 = df.loc[np.repeat(df.index.values, df.n)]
delimiter
result = pd.DataFrame(names_and_values)
delimiter
layout.save()
delimiter
self._tunnel()
delimiter
find_nearest_above(np.array([0.0, 1.0, 1.4, -2.0]), -1.5)
delimiter
print((i, count_nicematrices(i, i)))
delimiter
aux = matriz
delimiter
x + 1
delimiter
self.test = record_log(self.logs)(self.test)
delimiter
self.inspector.hide()
delimiter
child = os.fork()
delimiter
foo = Foo(mock_helpers)
delimiter
sys.exit(-1)
delimiter
[1, 0, 0, 0, 0],
delimiter
n_eq = A.shape[1]
delimiter
f()
delimiter
rsa = RSA.load_key_bio(bio)
delimiter
clientSocket.send(msg.encode())
delimiter
v[:] = v - 1
delimiter
t = Team.objects.get(pk=168)
delimiter
fig = plt.figure()
delimiter
print(domain.group())
delimiter
painter = QtGui.QStylePainter(self)
delimiter
this.all()
delimiter
aw2.but.clicked.connect(update_plot)
delimiter
cb.move(20, 20)
delimiter
Red = RGBint >> 16 & 255
delimiter
print(tag.text)
delimiter
qs = MyClass.objects.all()
delimiter
map(lambda index: get_column(pyQueryRow, index), range(0, 12))
delimiter
r.findall(x)
delimiter
nindex, height, width, intensity = array.shape
delimiter
doc = etree.fromstring(xml)
delimiter
print(x[i])
delimiter
p.tags.all()
delimiter
concat_list = [j for i in ar for j in i]
delimiter
p = [sum(p[:i]) for i in range(len(p))]
delimiter
d = deepcopy(d)
delimiter
any(x in MyDict for x in MyList)
delimiter
cython < cython_file > --embed
delimiter
print(line)
delimiter
k, self.__dict__.pop(k, d)
delimiter
sys.exit(app.exec_())
delimiter
df.info()
delimiter
data[0]
delimiter
self.reporter.on_close(self.stats, {})
delimiter
c = np.array([element for i, element in enumerate(a) if mask[i]])
delimiter
xlock.release()
delimiter
writer = csv.writer(ftmp)
delimiter
cost_ij = train_model(data, target)
delimiter
skel = np.uint8(skel)
delimiter
ADDRESS1 = 15298676
delimiter
tai_epoch_as_tai = datetime(1970, 1, 1, 0, 0, 10)
delimiter
self.window.show()
delimiter
vertical = [img[i, int(w / 2)] for i in range(h)]
delimiter
first_digits[number]
delimiter
a.get_x()
delimiter
print(htmldiff(doc1, doc2))
delimiter
FALSE = 0
delimiter
result.update(mult_comb(tuple(factors2)))
delimiter
parser = argparse.ArgumentParser()
delimiter
QtCore.QRectF(0, 0, w, h)
delimiter
df = pd.DataFrame(np.random.random((4, 4)))
delimiter
plt.figure()
delimiter
cls()
delimiter
tostr(toval(s) + 1, minlen)
delimiter
it.ifilter(lambda x: unique([b.c for b in x]), combos)
delimiter
viewer.kill()
delimiter
loop.run_forever()
delimiter
b = mechanize.Browser(history=NoHistory())
delimiter
_HEXDEC[triplet[0:2]], _HEXDEC[triplet[2:4]], _HEXDEC[triplet[4:6]]
delimiter
fp.close()
delimiter
rdd.filter(lambda line: line != header)
delimiter
setup_envion(settings)
delimiter
hessian(x)
delimiter
base_subparser = argparse.ArgumentParser(add_help=False)
delimiter
window = Tk()
delimiter
cls.change_mro = True
delimiter
output = po.communicate()[0]
delimiter
r.url
delimiter
bool(aware_dt.dst())
delimiter
id = Column(Integer, primary_key=True)
delimiter
pypi
delimiter
print(dt.item())
delimiter
s
delimiter
form = QuestionForm(request.POST, instance=question)
delimiter
stack.append([i])
delimiter
day_list.index(inp)
delimiter
client.close()
delimiter
AC_PREREQ([2.69])
delimiter
signal.signal(signal.SIGALRM, signal.SIG_IGN)
delimiter
webbrowser.open(fetchUrl)
delimiter
myOjbect.doStuf().doMoreStuf().goRed().goBlue().die()
delimiter
all_messages.extend(rs)
delimiter
application = config.make_wsgi_app()
delimiter
print(0)
delimiter
source.close()
delimiter
pool.close()
delimiter
data.sort()
delimiter
img1 = cv2.imread(img1_path, cv2.CV_LOAD_IMAGE_GRAYSCALE)
delimiter
ind = np.argpartition(a, -4)[-4:]
delimiter
str(timedelta(seconds=c.seconds))
delimiter
hdu = fits.open(img)
delimiter
output, err = p.communicate()
delimiter
jsonify(results=d)
delimiter
print(best1)
delimiter
self.__output, self.__error = cmdp.communicate()
delimiter
y = np.linspace(0, 2 * np.pi, 100).reshape(-1, 1)
delimiter
print(repr(line))
delimiter
texts = (x[1] for x in posts)
delimiter
r.request.send(anyway=True)
delimiter
a._log
delimiter
exec(f.read(), globals(), locals())
delimiter
duration(video_file_path)
delimiter
cvtColor(src, gray, CV_BGR2GRAY)
delimiter
df2 = pd.DataFrame(df)
delimiter
df
delimiter
HttpResponse(t.render(Context()))
delimiter
main()
delimiter
timeout.run()
delimiter
profile = user.get_profile()
delimiter
self.wfile.flush()
delimiter
out_id = np.union1d(a[:, (0)], b[:, (0)])
delimiter
np.PyArray_ITER_NEXT(ito)
delimiter
t.start()
delimiter
g(f(*a, **k))
delimiter
print(s)
delimiter
triplets[iT].append(listB[-1])
delimiter
t * p / c
delimiter
my_list.append(func)
delimiter
print(df)
delimiter
new_inlist.sort(key=lambda x: x.split(separator)[1])
delimiter
root = logging.getLogger()
delimiter
server.shutdown()
delimiter
my_dict = {}
delimiter
--Important
delimiter
df
delimiter
yourThread.cancel()
delimiter
Testing(2 / 2)
delimiter
B = [0, 0, 1, 1, 1, 1]
delimiter
print(output_dict)
delimiter
problem.main()
delimiter
h1 = urllib.request.urlopen(req, timeout=10)
delimiter
fig = plt.figure()
delimiter
pd.Series(s.values[z], s.index.values[z], name=s.name)
delimiter
my_pdf = gaussian_kde(osservazioni, 0.1)
delimiter
C = np.array([[np.linalg.eigvals(m) for m in v] for v in B_blocks])
delimiter
print(browser.page_source)
delimiter
print(seq[1::2])
delimiter
results = DataFrame(results, index=df.columns, columns=df.columns)
delimiter
CELERYD_HIJACK_ROOT_LOGGER = False
delimiter
stdout, stderr = p.communicate()
delimiter
filename = sys.argv[2]
delimiter
queue.put((tag, line), block=True, timeout=60)
delimiter
csX.m = X.shape[0]
delimiter
sorter = np.argsort(perm[::-1])
delimiter
f.seek(start + 1)
delimiter
self.de.setText(str(self.current))
delimiter
f.close()
delimiter
list(combinations(A, 2))
delimiter
file_path = os.path.dirname(__file__)
delimiter
type.__new__(cls, name, bases, dct)
delimiter
wb = Workbook()
delimiter
fig = plt.figure()
delimiter
raise NotImplementedError
delimiter
getcontext().prec = 100
delimiter
next(g)
delimiter
imp.load_source(name, path)
delimiter
driver = webdriver.Firefox(firefox_profile=fp)
delimiter
y = data[:, (1)]
delimiter
server.sendmail(FROM, TO, message)
delimiter
Py_DECREF(module_name)
delimiter
cursor = cnx.cursor(named_tuple=True)
delimiter
rank += permutation_rank(seq[1:]) if seq[1:] else 0
delimiter
os.rmdir(dir)
delimiter
print(a_list)
delimiter
print(np.array(sums).shape)
delimiter
mylist = ListField()
delimiter
d[y].append(x)
delimiter
data.append((batting[1], player, batting[0], batting[2]))
delimiter
figure(figsize=(8, 8))
delimiter
parser = argparse.ArgumentParser()
delimiter
urlparse.parse_qs(urlparse.urlsplit(url).query)
delimiter
str(self.name) == str(other.name)
delimiter
treeview_column.set_widget(label)
delimiter
my_list = flat(d)
delimiter
numpy.array([x[xs], x[ys]]).T
delimiter
topsize = pqueue[0][1]
delimiter
logger.setLevel(logging.NOTSET)
delimiter
plt.plot(np.arange(100))
delimiter
ax1 = fig.add_subplot(1, 2, 2)
delimiter
p = mp.Process(target=Simulation, args=(inqueue, output))
delimiter
sub_strings = sorted(sub_strings, key=len, reverse=True)
delimiter
canvas.restoreState()
delimiter
plt.show()
delimiter
ax.grid()
delimiter
gpsgvqsbixtwyakpgefrhntldsjqlmfvyzwjoykhsapcmvjmar
delimiter
p.terminate()
delimiter
stdin.close()
delimiter
opener = urllib.request.build_opener()
delimiter
self.ClickedLB.move(200, 100)
delimiter
win.idlok(True)
delimiter
win.leaveok(True)
delimiter
object._meta.verbose_name
delimiter
ex = sys.exc_info()[1]
delimiter
next(v for k, v in self.items() if x in k)
delimiter
df.head()
delimiter
L = [1, 2, 1, 1, 1]
delimiter
self.process = QtCore.QProcess(self)
delimiter
df
delimiter
cardsdiscarded += 1
delimiter
workbook = xlwt.Workbook()
delimiter
df
delimiter
t512.timeit()
delimiter
p = subprocess.Popen(some_cmd, stdout=subprocess.PIPE)
delimiter
print(buffer.getvalue())
delimiter
scatter(X, Y, c=cycol())
delimiter
page_source = browser.page_source
delimiter
a = np.arange(100).reshape(10, 10)
delimiter
ssc.awaitTermination()
delimiter
f_out.writelines(f_in)
delimiter
f.write(raw_img)
delimiter
screen.refresh()
delimiter
logfile.flush()
delimiter
loop = asyncio.get_event_loop()
delimiter
self.received_buffer.seek(0)
delimiter
a = np.arange(2000).reshape(20, 100)
delimiter
DEBUG = True
delimiter
json_output
delimiter
x = dict(a=1, b=2)
delimiter
plt.contour(y, x, T[:, :, (round(len(z) / 2))], 64)
delimiter
self
delimiter
reader = csv.reader(data)
delimiter
ui.show()
delimiter
type(a)
delimiter
sys.stdout.flush()
delimiter
csr_matrix = coo_matrix.tocsr()
delimiter
b_data = binascii.unhexlify(data)
delimiter
m.show()
delimiter
widget.show()
delimiter
signal.alarm(0)
delimiter
self.get_sub_instance().get_individual()
delimiter
gevent.monkey.patch_socket()
delimiter
single_tokens = [k for k, v in Counter(tokens).items() if v == 1]
delimiter
self.wfile.write(pymjpeg.boundary)
delimiter
new_bar.update(extra)
delimiter
set(Ol[:l])
delimiter
myseries_two.iloc[0]
delimiter
[ss[i:i + 6] for i in range(0, len(s) - 1, 6)]
delimiter
HttpResponse()
delimiter
map(str, a)
delimiter
xs = [xs[i] for i in sorted_index]
delimiter
math.floor(f * 10 ** n) / 10 ** n
delimiter
os.close(fd)
delimiter
print(keywordlist)
delimiter
self.setFormatter(formatter)
delimiter
GetWindowTextW(hwnd, win_name, win_len + 1)
delimiter
y = [(k, v) for v, k in list(d.items())]
delimiter
views.py
delimiter
heapq.heappush(heap, (-p2, x, y - 1))
delimiter
print(isPower(10, 1))
delimiter
root = Tk()
delimiter
b = np.empty(a.shape)
delimiter
self.root.remove(child)
delimiter
query_params = parse_qs(query_string)
delimiter
Af = A.flatten()
delimiter
print(local_tz.localize(datetime(2000, 1, 15)))
delimiter
self.data[key] = NotifyList(item, self, str(key))
delimiter
app = Flask(__name__)
delimiter
app.ActiveDocument.Close(SaveChanges=True)
delimiter
pubkey.verify_update(message)
delimiter
np.random.shuffle(x)
delimiter
time.gmtime(year_ago * 1000)
delimiter
pprint(service)
delimiter
file.truncate(0)
delimiter
gs - q - dQUIET - dPARANOIDSAFER - dBATCH - dNOPAUSE - dNOPROMPT
delimiter
math.acos(inner_product / (len1 * len2))
delimiter
factors[i] += 1
delimiter
Lt - -titlecase
delimiter
Lm - -modifier
delimiter
crawler.start()
delimiter
bins = np.linspace(0, 1, nbins + 1)
delimiter
print(mse(model_1.predict(xg_test), y_test))
delimiter
Gtk.ScrolledWindow
delimiter
work.start()
delimiter
pl.xticks(np.linspace(0.0, 100.0, 11, endpoint=True))
delimiter
test_1_12_example_name.py
delimiter
np.sum(n * np.diff(bins))
delimiter
self.file_saving.child.join()
delimiter
decorator
delimiter
x = time.time()
delimiter
xlApp.Quit()
delimiter
cursor.execute(query_str)
delimiter
time.sort()
delimiter
MY_CONSTANT = 50
delimiter
np.put(x, y, 1)
delimiter
handler404 = NotFoundView.get_rendered_view()
delimiter
self.ui.PoseBtn_GridLayout.addItem(spacerItem, 1, 1, 1, 1)
delimiter
len(self.__dict__)
delimiter
x1 = np.hstack([[False], x, [False]])
delimiter
ax.set_yticklabels(ax.get_yticks(), fontproperties=font)
delimiter
app = Flask(__name__)
delimiter
d[i] += 1
delimiter
print(list(c.items()))
delimiter
self._x
delimiter
lambda *args, **kw: self.method(cls, *args, **kw)
delimiter
signal.signal(signal.SIGTERM, cleanup)
delimiter
self.failureResultOf(self.o.failure(), ConnectionRefusedError)
delimiter
df.query(query_expr)
delimiter
f(n) / f(r) / f(n - r)
delimiter
df.rolling(n).sum()[-1::-k][::-1]
delimiter
grouped.get_group(True)
delimiter
ax.plot(x, y)
delimiter
test_data = [str(x) for x in range(20)]
delimiter
city = models.CharField(max_length=50)
delimiter
frame = DataFrame(list_of_dicts)
delimiter
pd.options.display.max_colwidth = 100
delimiter
print(get_drive_size(0))
delimiter
self.threads.append(self.makeThread(particles[i]))
delimiter
self[key] = value
delimiter
[]
delimiter
plot_confusion_matrix(df_confusion)
delimiter
{tree_list[0]: build_tree(tree_list[1:])}
delimiter
boxplot(list(mydict.values()), labels=list(mydict.keys()))
delimiter
df
delimiter
ids = [row[0] for row in cursor.fetchall()]
delimiter
index.tpl
delimiter
ans = np.mgrid[0:1:100j, 0:1:100j, 0:1:100j]
delimiter
raise TypeError
delimiter
my_model.MyClassName
delimiter
np.random.shuffle(rows)
delimiter
getcontext().prec = 60
delimiter
a = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
delimiter
plt.legend(flip(handles, 2), flip(labels, 2), loc=9, ncol=2)
delimiter
print(a[0, 2])
delimiter
a[2](), b[2](), c[2]()
delimiter
Complete = np.where(np.isnan(partial), replace, partial)
delimiter
edges[i, j - 2].append((i, j + 2))
delimiter
print(response.text)
delimiter
a[1:, :-1]
delimiter
b = random.sample(a, len(a))
delimiter
fig, ax = plt.subplots()
delimiter
a = numpy.arange(1, 21).reshape(4, 5)
delimiter
gryim = np.mean(im[:, :, 0:2], 2)
delimiter
(a[2], b[2]),
delimiter
math.log(x)
delimiter
sorted_a = np.diagonal(a[:, (idx[:])]).T
delimiter
c = socket(AF_INET, SOCK_STREAM)
delimiter
gradient.setColorAt(0, QColor(255, 255, 255, 127))
delimiter
print(line)
delimiter
fig = plt.figure()
delimiter
(time.astype(np.int64) / 1000000.0).astype(np.int64)
delimiter
contents = output.getvalue()
delimiter
keys = set(dol1).union(dol2)
delimiter
result = result()
delimiter
min(list_date, key=func)
delimiter
resultList[-1].append(item)
delimiter
iterables = [iter(it) for it in lists]
delimiter
soup = BeautifulSoup(data)
delimiter
time.sleep(1)
delimiter
a.__dict__
delimiter
q.task_done()
delimiter
rec(tf2, rest_paths[1:])
delimiter
palette.append((i, 0, 0))
delimiter
model = Sequential()
delimiter
print(r.text)
delimiter
bins = np.arange(min_bin, max_bin + 1)
delimiter
sock.send(chunk)
delimiter
self.assertEqual(0, len(message))
delimiter
type.__new__(metacls, name, bases, dct)
delimiter
fig = plt.figure()
delimiter
print(data)
delimiter
exit()
delimiter
cause = []
delimiter
a = np.random.randint(0, 200, 100)
delimiter
getattr(self.m, n)
delimiter
self.update(*args, **kwargs)
delimiter
mask = (1 << bitlen) - 1
delimiter
vector2 = [element for i, element in enumerate(vector) if i not in to_exclude]
delimiter
print(a)
delimiter
width, height = img.size
delimiter
print(intlist(10))
delimiter
df = df[::-1].fillna(0).cumsum()[::-1]
delimiter
beta = np.linalg.inv(X.T.dot(X)).dot(X.T.dot(y))
delimiter
x, y = sat(81.299, 0, radians=False, errcheck=True)
delimiter
pylab.show()
delimiter
reader = csv.DictReader(fin, fieldnames=fields)
delimiter
[Arthur]
delimiter
df
delimiter
f.close()
delimiter
shape = a.shape[:-1] + (a.shape[-1] - window + 1, window)
delimiter
self.reverser[mo.group()]
delimiter
streamHandler = logging.StreamHandler()
delimiter
child.grab_focus()
delimiter
api = tweepy.API(auth)
delimiter
X00X
delimiter
print(type(x).__new__(x.__class__))
delimiter
fig, ax = pl.subplots(nrows=2)
delimiter
data = ECD.read()
delimiter
duck.walk()
delimiter
pylab.xlim(0, 5000)
delimiter
[(j, is_even(j)) for j in range(10)]
delimiter
ser.readline()
delimiter
-deadsnakes
delimiter
np.column_stack((a, a, a))
delimiter
print((i, max(dict[i])))
delimiter
isect.append([val, 0])
delimiter
soup = BeautifulSoup(html)
delimiter
data = sorted(data, key=keyfunc)
delimiter
f(20)
delimiter
type(ids)
delimiter
self.loop.call_soon_threadsafe(task.cancel)
delimiter
self.ftp_h.cwd(path)
delimiter
numpy.corrcoef(data)
delimiter
Departure_Date.objects.extra(where=[where])
delimiter
frame1.axes.get_xaxis().set_visible(False)
delimiter
evil_vals = [Evil(n) for n in range(10)]
delimiter
the_url = response.geturl()
delimiter
new_list = []
delimiter
m.shape
delimiter
self.transport.setTcpKeepAlive(1)
delimiter
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
delimiter
arr = np.array([])
delimiter
outdata = (ctypes.POINTER(ctypes.c_double) * 5)()
delimiter
nx.draw(X, pos)
delimiter
c.execute(query, keys)
delimiter
view.setRenderHint(QPainter.Antialiasing)
delimiter
r.append(blocktag[0])
delimiter
img_data_cvmat = cv.fromarray(img_data_ndarray)
delimiter
df1 = pd.concat([df1, pd.DataFrame(columns=list(range(8)))])
delimiter
pygame.display.update()
delimiter
xs = np.random.randn(n).cumsum()
delimiter
self.dx = dx
delimiter
out.append(line)
delimiter
label.pack()
delimiter
----models.py
delimiter
json.dumps(a)
delimiter
aa = json.loads(j, object_hook=AttrDict)
delimiter
print(nth(lucky(), 100))
delimiter
nx.draw_networkx_edges(G_pc, pos, alpha=0.01)
delimiter
req = urllib.request.Request(url)
delimiter
res2 = cv2.cvtColor(res, cv2.COLOR_GRAY2BGR)
delimiter
b[unified_mask[(np.newaxis), ...]] = 0.0
delimiter
popt, pcov = curve_fit(gaus, x, y, p0=[1, mean, sigma])
delimiter
self._notify()
delimiter
cv2.normalize(hist_item, hist_item, 0, 255, cv2.NORM_MINMAX)
delimiter
points = [(2, 2), (4, 4), (7, 7), (8, 8)]
delimiter
board.append([])
delimiter
allocate(y(j))
delimiter
out = np.zeros(np.asarray(shp) * len(L), dtype=int)
delimiter
Gtk.main()
delimiter
print(a)
delimiter
print(a)
delimiter
self.createWidgets()
delimiter
s.ioctl(socket.SIO_RCVALL, socket.RCVALL_OFF)
delimiter
dd = {k: v for k, v in list(dd.items()) if len(v) > 1}
delimiter
f()
delimiter
subprocess.Popen(args, shell=True)
delimiter
df = MyDF(*args, **kw)
delimiter
self.name = name
delimiter
os._exit(code)
delimiter
n, ext = os.path.splitext(f)
delimiter
timings.append((result, fname))
delimiter
seen.insert(i, x)
delimiter
list(f.values())
delimiter
self.s = str(*args, **kwargs)
delimiter
t.start()
delimiter
access = imdb.IMDb()
delimiter
df = df.sort()
delimiter
allspiders.append(makespider(domain, urls))
delimiter
print(len(s))
delimiter
doSomething(b)
delimiter
gray = cv2.threshold(gray, 4, 255, cv2.THRESH_BINARY)[1]
delimiter
f.bar()
delimiter
x * 2
delimiter
minor = numpy.zeros(shape=(len(A) - 1, len(A) - 1))
delimiter
_y = -x * math.sin(t) + y * math.cos(t)
delimiter
plotter2.binding_plotter_with_ui()
delimiter
id = db.Column(db.Integer, primary_key=True)
delimiter
print(guess_seq_len(list(range(500))))
delimiter
spelling_dict.get(word, word)
delimiter
data[index] = new_list
delimiter
p = Process(target=f)
delimiter
threading.Thread.join(self)
delimiter
print(rechunk(ner_output))
delimiter
plt.figure()
delimiter
rect = np.array([[bx1, by1], [bx1, by2], [bx2, by2], [bx2, by1], [bx1, by1]])
delimiter
self._queue.get(False)
delimiter
print(fexprefix)
delimiter
names = [row[0] for row in cursor.fetchall()]
delimiter
lst = [pd.DataFrame(), pd.DataFrame(), pd.DataFrame()]
delimiter
ax = plt.gca()
delimiter
b = [a, a]
delimiter
setattr(namespace, self.dest, values)
delimiter
stdout, stderr = proc.communicate()
delimiter
cam = cv2.VideoCapture(0)
delimiter
ar[:-sum(1 for i in takewhile(lambda x: x, reversed(ar)))]
delimiter
average = scipy.signal.convolve2d(matriz, kernel)
delimiter
r = csv.reader(open(filename))
delimiter
b = a[1:]
delimiter
fcond.notify_all()
delimiter
parent2 = argparse.ArgumentParser(add_help=False)
delimiter
_int(istart + _int(self.random() * width))
delimiter
self.flag = False
delimiter
pool.append(p)
delimiter
self.name = name
delimiter
atexit.register(cleanup)
delimiter
wn.lch_similarity(dog, cat)
delimiter
conn = pycurl.Curl()
delimiter
Variance(X).doit(evaluate=False)
delimiter
-W900
delimiter
self._cards.append(card)
delimiter
line = gca().get_lines()[n]
delimiter
distance_between_points = math.sqrt(dx ** 2 + dy ** 2)
delimiter
deleteself.Ans[-1]
delimiter
self.a = 0
delimiter
etree.ElementTree._write(self, file, node, encoding, namespaces)
delimiter
len(msg.get_payload())
delimiter
args = parser.parse_args()
delimiter
sys.stdin = sys.stdout = sys.stderr = self.desc
delimiter
values.append([v, [k]])
delimiter
outf.close()
delimiter
zip_longest(fillvalue=fillvalue, *args)
delimiter
array[values] = list(r.values())
delimiter
plt.plot(Vecpoints, np.exp(logkde))
delimiter
w, x, y, z
delimiter
u = np.sin(np.pi * x) * np.cos(np.pi * y) * np.cos(np.pi * z)
delimiter
print(filename)
delimiter
linsolve(system, x, y, z)
delimiter
print(msg.subject, msg.id)
delimiter
decoded_data = json.loads(encoded_str)
delimiter
dummy_df = pd.get_dummies(df[column])
delimiter
tokens = [_f for _f in map(myfilter, tokens) if _f]
delimiter
the_output = p.stdout.read()
delimiter
a.isalpha(), b.isalpha()
delimiter
client = paramiko.SSHClient()
delimiter
self.my_attr == other.my_attr
delimiter
author = models.ForeignKey(Author)
delimiter
tempList.append(rowDict)
delimiter
pl.figure()
delimiter
fig, ax = plt.subplots()
delimiter
data = json.load(data_file)
delimiter
[action_to_apply(row) for row in X]
delimiter
Exception.__init__(self, *args, **kwargs)
delimiter
input_file = open(args[0])
delimiter
name = db.StringProperty()
delimiter
do_something(weapons)
delimiter
turtle.right(angle)
delimiter
out[product_name].append((bike_number, list_of_parts))
delimiter
print(cmd())
delimiter
f(1)
delimiter
dt + datetime.timedelta(microseconds=us)
delimiter
root = Tk()
delimiter
subprocess.call(cmd, stdin=sin, stdout=sout, startupinfo=startupinfo)
delimiter
format(theList)
delimiter
axs[i].scatter(pts[i][:, (0)], pts[i][:, (1)], c=colors[lbls])
delimiter
[sum(1 for _ in group) for key, group in itertools.groupby(condition) if key]
delimiter
np.putmask(arr, arr >= T, 255.0)
delimiter
log.addHandler(console_handler)
delimiter
triples += ((i, j, k) for k in K[K > i])
delimiter
of.close()
delimiter
Tk().withdraw()
delimiter
callback(*args, **kwds)
delimiter
a = 1 if i < 100 else 2 if i > 100 else 0
delimiter
dllname = os.path.split(self._welu.__file__)
delimiter
cv2.imshow(img)
delimiter
instance = form.save(commit=False)
delimiter
self.__dict__[key]
delimiter
setones_between_triggers(A, 2, -2)
delimiter
f = lambda r: sp.j1(r) ** 2 / r
delimiter
sys.stdout = sys.__stdout__
delimiter
[1]
delimiter
cap.open()
delimiter
np.random.seed(seed)
delimiter
{r[key] for key in r if 42 in key}
delimiter
reg_losses = tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)
delimiter
self.after(100, self.poll_serial_port)
delimiter
self.co.send(*args)
delimiter
x = collections.Counter(l)
delimiter
Xfit = np.hstack(((-1, -1, 0, 1, 1), np.arange(1, 10), (-7, 9, 10, 10)))
delimiter
send_from_directory(UPLOAD_FOLDER, filename)
delimiter
rescaled = np.mean(rescaled, axis=ind + 1)
delimiter
do_something(my_object)
delimiter
[0, 0, 0, 100]
delimiter
grandchild_pid = int(os.fdopen(r).readline().strip())
delimiter
xyi = np.vstack((x, y)).T
delimiter
result.save(sys.argv[2])
delimiter
l = [4, 5, 6]
delimiter
sortedwords = sorted(iter(wordbank.items()), key=operator.itemgetter(1))
delimiter
self.count += 1
delimiter
doc = le.parse(f)
delimiter
self.value = 1
delimiter
sys.modules[__name__] = _MyClass.instance
delimiter
handle_error()
delimiter
fig = plt.figure(figsize=[7, 5])
delimiter
print(v)
delimiter
cursor = cnx.cursor()
delimiter
g.ax_marg_y.set_axis_off()
delimiter
self.feed += 1
delimiter
print(data)
delimiter
last_name = models.CharField(max_length=50)
delimiter
sleep(1)
delimiter
message, settings.SERVER_EMAIL, [a[1] for a in settings.MANAGERS]
delimiter
retval
delimiter
frame.Show()
delimiter
center = int(x), int(y)
delimiter
{NULL, NULL, 0, NULL}
delimiter
self.adjective_count[a] += 1
delimiter
bindices_zero = array == 0
delimiter
print(post.text)
delimiter
res[v].append(k)
delimiter
results = [result_queue.get() for mc in montecarlos]
delimiter
my_date = date.today() - timedelta(days=days_to_subtract)
delimiter
even_numbers = [y for x, y in enumerate(items) if x % 2 == 0]
delimiter
self._connection.close()
delimiter
perfect_fit = 60 * numpy.random.normal(size=(n_inputs, n_outputs))
delimiter
img = mahotas.imread(imname)
delimiter
print((data, data.GetType()))
delimiter
fig, ax = plt.subplots()
delimiter
print(max_dir, max_file)
delimiter
arr = np.arange(16).reshape(4, 4)
delimiter
fig = plt.figure()
delimiter
u[np.argsort(ind)]
delimiter
z = request.GET.copy()
delimiter
a[..., (0)] + a[..., (1)]
delimiter
a_1d = a.flatten()
delimiter
sortedA = A[np.lexsort(A[:, :-1].T)]
delimiter
subprocess.call(cmd, shell=False)
delimiter
jj = np.where(ii)[0]
delimiter
redirect(success_url)
delimiter
assert data_tensor.size(0) == target_tensor.size(0)
delimiter
numpy.finfo(numpy.float64).min
delimiter
s = s.append(b, ignore_index=True)
delimiter
p = Pool(number_of_processes)
delimiter
keypoints = s.detect(gray, mask)
delimiter
name = models.CharField(max_length=100)
delimiter
rand2.seed(0)
delimiter
DerivedClass().do_it()
delimiter
some_list = []
delimiter
line = file.readline()
delimiter
[1.0, 0.0, 0.0, 1.0, 0.0, 0.0],
delimiter
n &= n - 1
delimiter
[G.edges(subgraph) for subgraph in subgraphs]
delimiter
os.close(fi)
delimiter
session_crumbs.append((flask.request.path, view_title))
delimiter
palette.setColor(palette.Dark, QtGui.QColor(0, 255, 0))
delimiter
self.response.out.write(images.image)
delimiter
V = numpy.sum(xdist, axis=1)
delimiter
new_col = NP.zeros_like(my_data[:, (-1)]).reshape(-1, 1)
delimiter
result.extend(s)
delimiter
np.count_nonzero(x != y)
delimiter
a._A__foo()
delimiter
cython.int
delimiter
self._x = value
delimiter
foo.MyClass()
delimiter
daemon_cartman.join()
delimiter
print(df1.equals(df))
delimiter
J = sparse.coo_matrix((np.ones_like(ixs, int), (np.arange(ixs.shape[0]), ixs)))
delimiter
z.nonzero()
delimiter
d = json.load(json_data)
delimiter
self.listbox.insert(0, option)
delimiter
stdout.write(str(i))
delimiter
a = b[:]
delimiter
db.session.add(sg)
delimiter
rounding_swig / testrounding.cpp
delimiter
pool = multiprocessing.Pool(5)
delimiter
django.db.connection.user = user
delimiter
lambda x: bool(int(x))
delimiter
func(self)
delimiter
cols.append(col)
delimiter
connection.close()
delimiter
commons = set(dict1).intersection(set(dict2))
delimiter
doTaskB()
delimiter
ax2 = ax.twinx()
delimiter
print(twodarray.shape)
delimiter
type((100,))
delimiter
self.dbobject = all()
delimiter
hash(b)
delimiter
second_largest([2, 2, 2, 2, 2, 1])
delimiter
list(my_mapping.keys())
delimiter
pygame.display.update()
delimiter
print(f.__code__.co_consts)
delimiter
mock_http_client.get.assert_called_with(url)
delimiter
os.path.isfile(os.path.join(*path_segments))
delimiter
bottom.paste(top, (0, 0), mask)
delimiter
print(a, b, c, d)
delimiter
np.concatenate([a[offset:offset + length] for offset, length in offset_length])
delimiter
canvas.saveState()
delimiter
unseenData_predictions = recreatedModel.predict(X_test_std)
delimiter
map_nested_dicts_modify(x, lambda v: v + 7)
delimiter
threads[i].start()
delimiter
f.seek(0)
delimiter
the_page = response.read()
delimiter
df = df.transpose()
delimiter
print(np.dot(rotation_matrix(axis, theta), v))
delimiter
mydict[str(key)] = mydict[key]
delimiter
print(concatd(a, b, c))
delimiter
tree = lxml.etree.XML(DOC)
delimiter
v[(-1), :-1] / -v[-1, -1]
delimiter
self.fields.update(form.fields)
delimiter
self.dict[self.last]
delimiter
positive2 = positive[:, 2:-1]
delimiter
num_ratings = db.IntegerProperty()
delimiter
client.disconnect()
delimiter
B = np.random.random((10, 4))
delimiter
f
delimiter
ax.yaxis.set_major_formatter(mtick.PercentFormatter())
delimiter
stdin_list = list(sys.stdin)
delimiter
hash2 = hashlib.md5()
delimiter
elements.append(itertools.repeat(iter))
delimiter
c = df.columns.values
delimiter
f = os.path.join(dirName, f)
delimiter
themin, themax
delimiter
i += 1
delimiter
gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)
delimiter
self.assertEqual(4, myObj.getDataLength())
delimiter
a[inds[:, (0)], inds[:, (1)]]
delimiter
[d1[key] for key in set(d1) - set(d2)]
delimiter
debug = 1
delimiter
print(r.cookies)
delimiter
x = mydict[k]
delimiter
print(i)
delimiter
my_saved_data
delimiter
neighbours = list(itertools.product(list(range(i - 1, i + 2)), list(range(j - 1, j + 2))))
delimiter
maze_dict = {}
delimiter
df.dt = pd.to_datetime(df.dt)
delimiter
ax = fig.add_axes([0.1, 0.2, 0.85, 0.7])
delimiter
logutils.set_up()
delimiter
img = np.zeros(Arr.shape, dtype=bool)
delimiter
print(sum(sub == s[i:i + ln] for i in range(len(s) - (ln - 1))))
delimiter
{k: (v - 1) for k, v in list(c.items())}
delimiter
new_im = f(new_x).T
delimiter
a.many_b.add(*list_of_b)
delimiter
file.flush()
delimiter
df
delimiter
bbox = self.legend.get_window_extent()
delimiter
s.bind((MY_ADDRESS, port))
delimiter
argparse.ArgumentParser.add_argument(self, *args, **kwargs)
delimiter
inputproc0 = Popen(shlex.split(inputcmd0), stdout=PIPE)
delimiter
df1.join(df2).columns
delimiter
pairs.append(new_pair)
delimiter
req = urllib.request.Request(url, urllib.parse.urlencode(params))
delimiter
regex = re.compile(re.escape(old), re.I)
delimiter
mod1.py
delimiter
fileWriter.writerow(row)
delimiter
self.html = self.mainFrame().toHtml()
delimiter
im = ImageOps.invert(im)
delimiter
collections.OrderedDict.fromkeys(x for x in a if x not in b)
delimiter
df1 = df.groupby([a, b]).count()
delimiter
my_string = my_string.lower().split()
delimiter
F(1, 2)
delimiter
imarr = numpy.array(Image.open(im), dtype=numpy.float)
delimiter
driver = webdriver.Firefox()
delimiter
wb.save(out)
delimiter
xmax, ymax = a.max(axis=0)
delimiter
chunk.append(line)
delimiter
deployFiles()
delimiter
tree = BeautifulSoup(bad_html)
delimiter
logger = logging.getLogger()
delimiter
b = np.random.random_integers(2, size=(4, 4))
delimiter
serie = pd.to_datetime(df.dt)
delimiter
np.irr(np.r_[-n, cashflow])
delimiter
conn = http.client.HTTPSConnection(myDestination)
delimiter
response = urllib.request.urlopen(request)
delimiter
self.allowed_domains.append(hostname)
delimiter
psutil.cpu_count()
delimiter
Function(lambda x: self(x) / other)
delimiter
alldata = np.array(zip(t, zip(x, y)), dtype=dt)
delimiter
sum(sum(i) == 100 for i in itertools.product(range(100), repeat=100))
delimiter
timeit((df == df2) | (df != df) & (df2 != df2)).values.all()
delimiter
assert isinstance(x, list)
delimiter
smtp = smtplib.SMTP(smtp_host, smtp_port)
delimiter
worksheet.set_column(i, i, header_len)
delimiter
pprint.pprint(sys.path)
delimiter
fig, ax = plt.subplots()
delimiter
sizer.Add(lbl, 0, wx.ALL, 5)
delimiter
seen.add(char)
delimiter
sys.exit(a.exec_())
delimiter
usage()
delimiter
gen_random_decimal(99999999999, 999999999999)
delimiter
chBuf = create_string_buffer(BUFSIZE)
delimiter
a.append(dict(b))
delimiter
B = defaultdict(lambda : defaultdict(int))
delimiter
gameMap[0:2, 0:2] += piece
delimiter
fig = plt.figure()
delimiter
random.sample(xs, sample_size)
delimiter
time.sleep(-time.time() % 1)
delimiter
print(type(lengthy_thingy).__len__(lengthy_thingy))
delimiter
file.close()
delimiter
self.photo.load()
delimiter
es_logger.setLevel(logging.INFO)
delimiter
dis.dis(foo)
delimiter
result.append(string)
delimiter
result = df.loc[df_mask]
delimiter
dbConn.close()
delimiter
powLF(n)[1]
delimiter
df_with_x4.show()
delimiter
country = models.ForeignKey(Country)
delimiter
clf.fit(train[cols], train.targets)
delimiter
os.path.relpath(google.__file__, here),
delimiter
print(myString[0])
delimiter
worksheet2 = workbook.add_worksheet()
delimiter
D = dict((k, v) for v, k in enumerate(albums_yesterday))
delimiter
notebook.set_tab_reorderable(child, False)
delimiter
z.extractall()
delimiter
client_socket.close()
delimiter
d = {}
delimiter
session.commit()
delimiter
decorated_func
delimiter
d2_filtered = dict((k, v) for k, v in d2.items() if k not in ignore_keys)
delimiter
request = urllib.request.Request(url)
delimiter
L = list(reversed(list(range(100))))
delimiter
self.cost += tf.reduce_mean((x_train - y_train) ** 2)
delimiter
parser.exit()
delimiter
invalid = np.isnan(data)
delimiter
X = scale(X, axis=0, with_mean=True, with_std=True, copy=True)
delimiter
numpy.dot(A_col0_sorted, perfect_fit)[:, (0)],
delimiter
angle = atan((neuron2.x - neuron1.x) / float(neuron2.y - neuron1.y))
delimiter
plt.plot(np.arange(10) * (i + 1))
delimiter
self.columnconfigure(0, weight=1)
delimiter
result.append(word)
delimiter
A = pd.Series(list(range(10)))
delimiter
signal_axes.plot(xs, rawsignal)
delimiter
1, 2
delimiter
csv_writer = csv.writer(csv_file)
delimiter
cursor.execute(statement)
delimiter
c = a
delimiter
decoded_pw = base64.b64decode(encoded_pw)
delimiter
results.append(obj)
delimiter
my_i, my_card = select_choice()
delimiter
y = mlab.normpdf(bins, mu, sigma)
delimiter
Py_DECREF(initresult)
delimiter
self._alpha(context) * self._backoff.prob(word, context[1:])
delimiter
rep_shape(a, (4, 2))
delimiter
new_data = data[np.in1d(arr1, arr2)]
delimiter
x.extend(y)
delimiter
name = models.CharField(max_length=25)
delimiter
A = np.array([5, np.nan, np.nan, np.nan, np.nan, 10])
delimiter
nw[0] = nw[0] + 1
delimiter
currentdate = dt.date.today()
delimiter
f.close()
delimiter
df = df.sortlevel(0)
delimiter
a[a < 0] = 0
delimiter
p = np.empty((n, 2))
delimiter
match.start()
delimiter
setattr(TestSequense, test_name, test)
delimiter
image[coordinates] = 1
delimiter
canvas.delete(ALL)
delimiter
str(Fraction(0.25))
delimiter
cv2.circle(out, (int(x1), int(y1)), 4, (255, 0, 0), 1)
delimiter
message = Column(String(2000), nullable=False)
delimiter
data = urlencode(values)
delimiter
plt.imshow(im.T, cmap=cmap, extent=xr + yr)
delimiter
p = pyaudio.PyAudio()
delimiter
df.Date = pd.to_datetime(df.Date)
delimiter
cols = np.arange(len(df.columns))
delimiter
m()
delimiter
{{language.name_local}}
delimiter
decoder.end_utt()
delimiter
print(df)
delimiter
count(1)
delimiter
f = figure(figsize=(6, 6))
delimiter
fig = plt.figure()
delimiter
index[count][1].append(url)
delimiter
m = hashlib.md5()
delimiter
fig, (ax1, ax2) = plt.subplots(1, 2)
delimiter
map(tdgi, list(filter(tdin, theList)))
delimiter
data_json = json.dumps(data)
delimiter
loop.run_until_complete(do_work(q))
delimiter
50 + sum(x * next(cyc) for x in lis[0])
delimiter
events = events.exclude(eventitem__isnull=True)
delimiter
asyncio.set_event_loop(self.loop)
delimiter
colors.insert(index, mean_color([colors[index - 1], colors[index]]))
delimiter
ax = plt.gca()
delimiter
ax = plt.gca()
delimiter
print(tree.find(10))
delimiter
event_date = models.DateField()
delimiter
print(x)
delimiter
string.lowercase[:14:2]
delimiter
func(*args, **kwargs)
delimiter
{k: dd[k] for k in list(dd.keys())[:10]}
delimiter
array2[:] = array1
delimiter
np.random.seed(1977)
delimiter
self.causes[node.name] += self.extract_cause(b)
delimiter
aux = copy.deepcopy(matriz)
delimiter
[c.send(val) for val in generator1()]
delimiter
sys.exit(1)
delimiter
out.reshape(R, -1)[:, (valid_mask)]
delimiter
root = Tk()
delimiter
f.write(templateString.format(**d))
delimiter
sum(1 if i == j else 0 for i, j in zip(w1, w2)) / float(len(w1))
delimiter
q = Queue()
delimiter
f.__code__ is creator.__code__.co_consts[1]
delimiter
root = etree.fromstring(s)
delimiter
np.random.seed(seed)
delimiter
heavy_computation(X, param_1, param_2, arg)
delimiter
ax.set_xlim([0, 5])
delimiter
output.append(line)
delimiter
dcos = np.arccos(np.clip((dp[:, 1:] * dp[:, :-1]).sum(axis=0), -1, 1))
delimiter
upper_match = match.group(0).upper()
delimiter
page = urllib.request.urlopen(url)
delimiter
df
delimiter
self._log(text)
delimiter
model = models.MyModel
delimiter
rng.random()
delimiter
pixel_value += polygon_shape.intersection(pixel_shape).area * value
delimiter
deleteTrue
delimiter
models.py
delimiter
c = cdll.LoadLibrary(LIBRARY_NAME)
delimiter
h[x] = h.pop(x, []).append(y)
delimiter
msg = msg[:-2]
delimiter
unittest.main()
delimiter
mapper(tableClass, table)
delimiter
proc = subprocess.Popen(cmd, shell=True)
delimiter
i == len(B) or B[i] != a
delimiter
df[df > df.quantile(0.8)].dropna()
delimiter
response = self.opener.open(url, data)
delimiter
b = Test()
delimiter
self._s.bind((host_address, port))
delimiter
a.write(f, relpath(f, root))
delimiter
id = db.Column(db.Integer, primary_key=True)
delimiter
plt.show()
delimiter
tuple(p.stdout.fileno() for p in processes)
delimiter
self.__doc__ = callable.__doc__
delimiter
input()
delimiter
object.__ne__(self, other)
delimiter
int()
delimiter
print(groups.mean().b)
delimiter
path = os.path.join(folder, filename)
delimiter
s = pd.Series(list(range(10)))
delimiter
getattr(self.get_query_set(), name)
delimiter
output.write(outputStream)
delimiter
cs = plt.contour(x, y, vel, levels)
delimiter
deletemydict[key1]
delimiter
client_socket.connect((server_address, port))
delimiter
self.worker.measure_msg.connect(self.showRslt)
delimiter
f = expr(f)
delimiter
j = ((x - x0) / dx).astype(int)
delimiter
a[0:4]
delimiter
conn.autocommit(True)
delimiter
created_at = models.DateTimeField(auto_now_add=True)
delimiter
block.move()
delimiter
a = numpy.array([[0, 0], [0, 1], [1, 0], [1, 1]])
delimiter
foo = input()
delimiter
text.insert(END, output)
delimiter
parts[0].strip(), int(parts[1])
delimiter
crypto.dump_privatekey(PKey)
delimiter
frob(self.b)
delimiter
float(s)
delimiter
df2[ser1.name] = ser1
delimiter
proc.stdin.write(c)
delimiter
0.550000000001
delimiter
result.append(nopreds)
delimiter
a.a().method()
delimiter
wx.PostEvent(self, event)
delimiter
sum(x is False for x in arr)
delimiter
ax = plt.axes()
delimiter
df1
delimiter
cPickle.dump(d, out)
delimiter
property_bsel = [property_b[i] for i in good_indices]
delimiter
sum(sorted(dice)[1:])
delimiter
mydtype = np.dtype((np.void, a.dtype.itemsize * a.shape[1] * a.shape[2]))
delimiter
dt = datetime.datetime.now()
delimiter
nopreds = [-1] * n
delimiter
os.dup2(se.fileno(), sys.stderr.fileno())
delimiter
ser.write(byte_signal)
delimiter
np.array(y.shape).tofile(f)
delimiter
row = wx.BoxSizer(wx.HORIZONTAL)
delimiter
Request(url, dont_filter=True)
delimiter
protocol = QNetworkProxy.Socks5Proxy
delimiter
print(lda.print_topic(i))
delimiter
random.random() * 5 + 10
delimiter
self.tvcolumn1.set_cell_data_func(self.toggle, self.set_status)
delimiter
print(np.in1d(values, data))
delimiter
os.execv(sys.executable, sys.argv)
delimiter
user = models.OneToOneField(User, parent_link=True, blank=True, null=True)
delimiter
b = a[names]
delimiter
print(x, y)
delimiter
print(eval(code))
delimiter
rep_shape(a, (5, 8))
delimiter
help(ttk.Notebook)
delimiter
cr.set_source_rgb(1, 1, 0)
delimiter
__init__.py(empty)
delimiter
pl.colorbar()
delimiter
form = UserCreationForm(request.POST)
delimiter
a[i] = f(v)
delimiter
Py_Initialize()
delimiter
wynik[i] += 1
delimiter
synset2domains = defaultdict(list)
delimiter
_x = x * math.cos(t) + y * math.sin(t)
delimiter
self.panel.show()
delimiter
print(id(argv[0]))
delimiter
df
delimiter
mydates = pd.date_range(date1, date2).tolist()
delimiter
textbox = Text(mainwin, width=40, height=10)
delimiter
x = mystuff()
delimiter
print(rem == [0, 1, 2, 1, 0])
delimiter
self.assertEqual(1 + 1, 2)
delimiter
d2.update(d1)
delimiter
logger = logging.getLogger(__name__)
delimiter
plt.axes().yaxis.set_minor_locator(ml)
delimiter
d = collections.defaultdict(set)
delimiter
ctypes.c_int,
delimiter
r.findall(s2)
delimiter
keys = set(chain(*[list(d.keys()) for d in dicts]))
delimiter
plt.show()
delimiter
NECESSARY = 2
delimiter
rel.save()
delimiter
print(x[ind], y[ind], z[ind])
delimiter
out = np.zeros(dims, dtype=int)
delimiter
matrix.append(list(vals[x * size:x * size + size]))
delimiter
b = np.array([[5, 6], [7, 8]])
delimiter
cur = con.cursor()
delimiter
callback(args[0])
delimiter
c.diff().fillna(math.max(0, values[0] - ALLOWANCE))
delimiter
lst1[0:1] + interleave(lst2, lst1[1:])
delimiter
FILE = open(filename)
delimiter
[1, 1, 0]
delimiter
b = np.concatenate([[0], np.where(a[:-1] != a[1:])[0] + 1, [n]])
delimiter
Bar.bar()
delimiter
a[-2:] = [0, 4]
delimiter
stateA()
delimiter
screen = pygame.display.set_mode((SCREEN_X, SCREEN_Y))
delimiter
self.data = dict(*args, **kwargs)
delimiter
a.f()
delimiter
soup = bs4.BeautifulSoup(html)
delimiter
hSplitter.SetSashGravity(0.5)
delimiter
a.sort(key=Vector.__key__)
delimiter
1, [True, True, False, False]
delimiter
egg2(a, b)
delimiter
sorted([x for x in p if x < limit])
delimiter
main_loop.start()
delimiter
r = requests.post(url, files=files)
delimiter
df.head()
delimiter
print(len(puppies.getdata()))
delimiter
server.login(USERNAME, PASSWORD)
delimiter
a.add_child(a)
delimiter
next(c)
delimiter
flat = [[(k, v) for v in vs] for k, vs in list(kwargs.items())]
delimiter
print(df1)
delimiter
groupby(a, [0])
delimiter
t = name,
delimiter
user_func()
delimiter
workbook = load_workbook(filename, use_iterators=True)
delimiter
lst = [1, 5, 4]
delimiter
nopreds = set()
delimiter
logging.exception(e)
delimiter
stext.mainloop()
delimiter
ax.set_ylim([-4, 4])
delimiter
self.login(response)
delimiter
etree.fromstring(f.read(), xmlparser)
delimiter
dall.update(d2)
delimiter
formatter = logfileformatter
delimiter
worksheet.column_dimensions[column_cells[0].column].width = length
delimiter
x
delimiter
G_LOG = logging.getLogger(__name__)
delimiter
dictionary.setdefault(x, []).append(y)
delimiter
print(driver.title)
delimiter
f.get_prep_value(d.numbers)
delimiter
qproc.start()
delimiter
Foo.newmethod = newmethod
delimiter
list(chain.from_iterable(zip(l[:-1], repeat(0)))) + l[-1:]
delimiter
closest_point_coords = list(p.coords)[0]
delimiter
time.sleep(secs)
delimiter
Job.objects.get(client__id=1)
delimiter
otherfunc()
delimiter
help(dict)
delimiter
print(line)
delimiter
foo, boo, moo = boo[0], moo[0], foo[0] = moo[0], foo[0], boo[0] = [0], [0], [0]
delimiter
a.__str__()
delimiter
caption = models.CharField(max_length=64, blank=True)
delimiter
button1.configure(command=lambda widget=button1: DoSomething(widget))
delimiter
handler2 = logging.TimedRotatingFileHandler()
delimiter
s.capitalize()
delimiter
start = tk.Tk()
delimiter
myThread.daemon = True
delimiter
self.buf.seek(0)
delimiter
my_list = list(range(10, 17))
delimiter
frame.Show()
delimiter
pl.show()
delimiter
pool.close()
delimiter
main = tk.Tk()
delimiter
yaml.dump(self.object, file)
delimiter
dectheclass
delimiter
self._protected()
delimiter
ax.scatter(x, y, label=l, s=50, linewidth=0.1, c=c)
delimiter
main()
delimiter
print(k, curve, [angle(p1, p2) for p1, p2 in zip(curve, curve[1:])])
delimiter
len([is_true for is_true, _ in groupby(a, lambda x: x != 0) if is_true])
delimiter
print(p.pid)
delimiter
db.get_conn().ping(True)
delimiter
cmp(self.s[x + l], self.s[y + l])
delimiter
750069.25, 750069.25
delimiter
application = app
delimiter
self.module = locals
delimiter
ordered_ips_data_dict = OrderedDict(ordered_items)
delimiter
print(m.groups())
delimiter
type(counts_df)
delimiter
f.close()
delimiter
heapify(A)
delimiter
print(data)
delimiter
tf.close()
delimiter
logger.addHandler(fileHandler)
delimiter
math.log(math.exp(logA) + math.exp(logB))
delimiter
result = func(*args)
delimiter
doc = fromstring(html)
delimiter
p[1]
delimiter
attribute(*args, **kwargs)
delimiter
ns = parser.parse_args()
delimiter
print(i, get_hotp_token(secret, intervals_no=i))
delimiter
repr(self.i)
delimiter
sys.exit()
delimiter
names = pd.DataFrame()
delimiter
print(client.fetchAll())
delimiter
foo().y
delimiter
usd_curr = [x for x in temp if x > 0]
delimiter
k = a[0:2]
delimiter
br.submit()
delimiter
j.do()
delimiter
print(df.values)
delimiter
X = R * np.cos(THETA) + 5
delimiter
-cmp(self.x, other.x)
delimiter
allocate(fullData(nR, nC))
delimiter
main.py
delimiter
math.isnan(item)
delimiter
n1.add(n12)
delimiter
Person.__init__(self, name, phone)
delimiter
arr.reshape(h // nrows, -1, nrows, ncols).swapaxes(1, 2).reshape(h, w)
delimiter
app = wx.PySimpleApp()
delimiter
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
delimiter
list(a)
delimiter
s = sorted(s)
delimiter
max_idx, max_val
delimiter
figure()
delimiter
dividers = sorted(random.sample(range(1, total), n - 1))
delimiter
restype = ctypes.c_int
delimiter
self.write(repr(self.request))
delimiter
names = names.append(frame, ignore_index=True)
delimiter
words.append(word)
delimiter
final_l
delimiter
result += letters[index - shift]
delimiter
result = df.copy()
delimiter
tk.Frame.__init__(self, root, *args, **kwargs)
delimiter
print(line)
delimiter
self.text = tk.Text(self, height=10, width=40)
delimiter
os.dup2(t.fileno(), self.fd)
delimiter
order = np.argsort(x)
delimiter
d1 = datetime.date.today()
delimiter
b = np.random.rand(5, 6)
delimiter
bokeh.plotting.curplot().plot_width = 800
delimiter
logging.basicConfig(level=logging.INFO)
delimiter
print(x.reshape((x.shape[0], 1)).type)
delimiter
print(self.obj.f1(2))
delimiter
D = ((a - v[i]) ** 2).sum(axis=-1)
delimiter
plt.xlim([0.0, 9.0])
delimiter
self.level = logging.DEBUG
delimiter
cursor.execute(query)
delimiter
len(a)
delimiter
ax = fig.add_subplot(111)
delimiter
table.insert_data(simple_dataframe)
delimiter
delete_keys_from_dict(v, the_keys)
delimiter
time.sleep(1)
delimiter
pool = mp.Pool(NPROCESSES)
delimiter
count += 1
delimiter
f = a[0:1]
delimiter
D = spatial.distance.pdist(A, lambda u, v: getDistanceByHaversine(u, v))
delimiter
zf._writecheck(zinfo)
delimiter
DTYPE = np.int
delimiter
bagel
delimiter
stdout, stderr = proc.communicate()
delimiter
images[idx].shape
delimiter
row, column = map(int, line)
delimiter
display.display(plt.gcf())
delimiter
print(list((b - a).elements()))
delimiter
np.linalg.norm(a * c - b)
delimiter
test_set[i] = flatten_image(matrix_image(test_images[i]))
delimiter
x[words[0]].append(words[1])
delimiter
print(cpy_list)
delimiter
path.split(os.sep)
delimiter
new_path = list(path)
delimiter
self.inner_test = inner_test()
delimiter
print(regressor.predict(X))
delimiter
ax = fig.add_subplot(111)
delimiter
print(sys.path)
delimiter
print(a_list.sort())
delimiter
output.close()
delimiter
a = np.arange(10)
delimiter
next(reader)
delimiter
print(dir(module))
delimiter
print(x)
delimiter
string.whitespace
delimiter
request.user == obj
delimiter
arr[i] = 0
delimiter
app.MainLoop()
delimiter
self.geodata_image.blit(0, 0, 0)
delimiter
snake.foo()
delimiter
filenames = ftp.nlst()
delimiter
Frame = Frame.append(pandas.DataFrame(data=SomeNewLineOfData))
delimiter
self.f = Foo()
delimiter
outfp.close()
delimiter
a[b]
delimiter
ca_one = str(sys.argv[1])
delimiter
two_array.append(6)
delimiter
i_xy = np.intersect1d(u_x, u_y, assume_unique=True)
delimiter
print(applyParallel(df.groupby(df.index), tmpFunc))
delimiter
self.label = QtGui.QLabel(self)
delimiter
words = set(f)
delimiter
edges.add((left, right))
delimiter
len2 = max(len(el) for el in list(chain(*my_list)))
delimiter
syncdict = {}
delimiter
self.get_user_from_cookie()
delimiter
self.q_in.delete_message(self._current_message)
delimiter
stop_event = threading.Event()
delimiter
api = tweepy.API(auth)
delimiter
next_n_lines = list(islice(f, n))
delimiter
outputlist.append(current)
delimiter
self.release()
delimiter
result = func(*args, **kwargs)
delimiter
yourdict = pickle.loads(read_dict)
delimiter
min(chain(l_one, l_two))
delimiter
doc.build(text)
delimiter
self.stopFunc()
delimiter
d.extend(g)
delimiter
matches.append(x)
delimiter
low_primes = {x for x in range(1, 100) if is_prime(x)}
delimiter
intp, fracp = divmod(val, 10 ** prec)
delimiter
files.append(d)
delimiter
my_dict = defaultdict(list)
delimiter
list(Foo.__dict__.keys())
delimiter
B = np.array([2, 4, 6])
delimiter
mexico_time = datetime.datetime(2010, 1, 1, 12, 0, 0, 0, tz_mexico)
delimiter
server.shutdown()
delimiter
self._data = data
delimiter
opener = urllib.request.build_opener(ValidHTTPSHandler)
delimiter
session.expunge(i0)
delimiter
action.perform()
delimiter
cur.close()
delimiter
resultList.append([item])
delimiter
df
delimiter
self.model.query.filter(self.model.owner == g.user)
delimiter
cx2 = np.random.random_integers(cx1, size - 1)
delimiter
im = Image.open(file)
delimiter
fast_xor(b, 256)
delimiter
person = re.findall(regex, line)
delimiter
y = x[indices]
delimiter
line = f.readline()
delimiter
ciso8601
delimiter
ujson
delimiter
workalendar
delimiter
mask.sum()
delimiter
tmp = pd.Series(np.array(list(col)).flatten())
delimiter
sys.path.insert(0, flaskfirst)
delimiter
instance.test_method(instance.sample_method)
delimiter
addsf1 = addsf1 + int(num)
delimiter
print(extract_names(s))
delimiter
incsv = csv.reader(inf)
delimiter
rows = np.arange(a.shape[0])
delimiter
ax.annotate(c, xy=pos)
delimiter
app.url_map
delimiter
temp = int(temp)
delimiter
ReligiousSerializer(instance=instance).data
delimiter
LaySerializer(instance=instance).data
delimiter
grp.reindex(mux, fill_value=0).reset_index()
delimiter
G.add_edge(4, 5)
delimiter
np.ix_(mask1, mask2)
delimiter
print(test_Dict[obj].name)
delimiter
pd.DataFrame([dict((x, r.count(x)) for x in r) for r in d]).fillna(0)
delimiter
power(2, 5)
delimiter
win = gtk.Window(gtk.WINDOW_TOPLEVEL)
delimiter
hxs = HtmlXPathSelector(response)
delimiter
module_name = os.path.basename(module_filepath)
delimiter
True
delimiter
deleted[i]
delimiter
name = models.CharField(max_length=20, unique=True)
delimiter
list(d.items())
delimiter
print(newcorpus.paras())
delimiter
x = remove_values_from_list(x, 2)
delimiter
errdata = prog.communicate()[1]
delimiter
plt.show()
delimiter
v = CountVectorizer(ngram_range=(1, 2))
delimiter
out.getvalue()
delimiter
Clock.schedule_interval(self.change_color, 1)
delimiter
myFunction(*args)
delimiter
ax.xaxis.get_ticklines()
delimiter
sys.stdout.write(line)
delimiter
BLUE_MIN = np.array([0, 0, 200], np.uint8)
delimiter
a = np.array([0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=np.bool)
delimiter
res = []
delimiter
raise TransportError(e.msg, e.code, e.fp)
delimiter
augmented = tf.map_fn(_augment, self.training_images)
delimiter
plt.axes().yaxis.set_minor_locator(ml)
delimiter
h.close()
delimiter
[(u.value, u.meta) for u in set([a, c, e]).intersection(set([b, d]))]
delimiter
stdscr.refresh()
delimiter
df.index.dtype
delimiter
out.append(s[i - k:i])
delimiter
plt.legend()
delimiter
plt.xticks(x, xticks)
delimiter
p.close()
delimiter
[[sum(1 for _ in g), v] for v, g in itertools.groupby(l)]
delimiter
-gfortran
delimiter
l.append(read_from(toks))
delimiter
start = time.time()
delimiter
wrapper2
delimiter
cmake
delimiter
i = 0
delimiter
maxm = np.array([], dtype=int)
delimiter
after_setup_logger.connect(initialize_logstash)
delimiter
print(dir(B))
delimiter
r[i] = (a * 67108864.0 + b) / 9007199254740992.0
delimiter
random.shuffle(d)
delimiter
print(df)
delimiter
globals()[k] = test.__dict__[k]
delimiter
next(values())
delimiter
ax.xaxis_date()
delimiter
endif
delimiter
df = pd.read_table(io.BytesIO(data), delim_whitespace=True)
delimiter
data = next(reader)
delimiter
from_date.replace(month=2, day=28, year=from_date.year - years)
delimiter
sys.stderr = sys.stdout
delimiter
float(a)
delimiter
dict(map(ascii_encode, pair) for pair in list(data.items()))
delimiter
f.integral()
delimiter
self.save_file.append(json.loads(tweet))
delimiter
print(x, y)
delimiter
ax2 = plt.subplot(gs[(0), 2:])
delimiter
self.setup_test_data()
delimiter
self.append(next(self._gen))
delimiter
[]
delimiter
fill_array(subarr, subseq)
delimiter
{{message}}
delimiter
strng = socket.recv(1024)
delimiter
result
delimiter
df.isin([1, 2]).any(1)
delimiter
fabric.state.connections[host].get_transport().close()
delimiter
filename = sys.argv[1]
delimiter
self.adjacencyList = adjacencyList
delimiter
self.drawWidth, self.drawHeight
delimiter
results = collections.Counter(the_string)
delimiter
do_sth_with(i, somearray[i])
delimiter
elements.append(Paragraph(content, style))
delimiter
abs(-1)
delimiter
result = custom_sort(allsites)
delimiter
smtplib.SMTP_SSL.__init__(self, host, port, **kwargs)
delimiter
wx.TheClipboard.Close()
delimiter
main()
delimiter
list_of_dict = []
delimiter
self.canvas.draw()
delimiter
wr.writerows(csv.reader(f))
delimiter
QtGui.QColor(rgb).getRgb()[:-1]
delimiter
s = socket.socket()
delimiter
json.dump(d, fileout)
delimiter
print(utmless_url)
delimiter
frame.set_border_width(2)
delimiter
process(elt.mylargecontent)
delimiter
newFile.writerow(row)
delimiter
array([[1.0, 4.0], [2.0, -1.0]])
delimiter
list(self._consumers.keys())
delimiter
next(f)
delimiter
unittest.main()
delimiter
application_path = os.path.dirname(sys.executable)
delimiter
self.set(value)
delimiter
int(self.x)
delimiter
test = lambda m: min(timeit.repeat(m, setup))
delimiter
count[0] += 1
delimiter
query = users.select().order_by(users.c.id.desc()).limit(5)
delimiter
conn = MySQLdb.connect(**params)
delimiter
self.func = func
delimiter
mm = np.mean(mdat, axis=1)
delimiter
print(list(diff.elements()))
delimiter
help(f)
delimiter
socketIO.wait_for_callbacks(seconds=1)
delimiter
result = a.format(name=b)
delimiter
self.DISTRICT
delimiter
self.lb2 = tk.Listbox(self.root, yscrollcommand=self.vsb.set)
delimiter
reactor.stop()
delimiter
self.managed
delimiter
txt = f.read()
delimiter
self.zfile = zipfile.ZipFile(self.z)
delimiter
r = requests.get(url)
delimiter
pil_image = PIL.Image.open(file)
delimiter
plt.xlim(0, 5)
delimiter
[x for x in k if tuple(x) in stuff_in_kDash]
delimiter
plt.subplots_adjust(hspace=0.4)
delimiter
print(GLOB_VAR)
delimiter
print(eval(code))
delimiter
c = Counter(chain.from_iterable(list(d.values())))
delimiter
h1 = logging.StreamHandler(sys.stdout)
delimiter
grad = np.array([-1, -1, -0.2, -0.4, 0.4, 0.2])
delimiter
ax2.add_line(line)
delimiter
hxs = HtmlXPathSelector(response)
delimiter
print(x.dot(y).shape)
delimiter
type(x)
delimiter
B.sum()
delimiter
plt.ioff()
delimiter
s[::-1]
delimiter
plt.subplot(212)
delimiter
logging.root.addHandler(console_handler)
delimiter
n = X.shape[0]
delimiter
A.shape
delimiter
create_app()
delimiter
{tuple(e) for e in a}
delimiter
p = multiprocessing.Process(target=f)
delimiter
d2 = dict(a=1, b=2)
delimiter
inds = np.ravel_multi_index((rows, cols), arr.shape)
delimiter
r.json
delimiter
ascends.append([i + 1, i + 1])
delimiter
print(roster)
delimiter
atan_in_degress(2)
delimiter
object.__ge__(self, other)
delimiter
[1.0, 4.0, 9.0]
delimiter
any(test(x) for x in L)
delimiter
print(xmp_str)
delimiter
leg.get_frame().set_linewidth(0.0)
delimiter
app.MainLoop()
delimiter
leftpath = []
delimiter
stdin.flush()
delimiter
resp = views.my_view(req)
delimiter
val
delimiter
dialog = QDialog()
delimiter
pairs_by_number_and_list[pair[0]].append(pair)
delimiter
trees.extend(parent.children)
delimiter
self.queue.append(item)
delimiter
list.append(val)
delimiter
cv2.circle(vis, (x1, y1), 2, col, -1)
delimiter
plt.tight_layout()
delimiter
gb(pt[0], pt[1], 0, 0)
delimiter
something_else()
delimiter
HexDump()
delimiter
a[i][:] = np.concatenate((z, a[i][:][np.nonzero(a[i][:])]))
delimiter
pprint(_)
delimiter
results = list(ex.map(len, fl))
delimiter
fig = plt.figure()
delimiter
NP.c_[(0.2), 1:10, (60.8)]
delimiter
k.set_contents_from_string(r.content)
delimiter
ptr[1] = color[1]
delimiter
im.paste(255, mask)
delimiter
print(item)
delimiter
defaultdict(factory)
delimiter
print(rowselected[c].value())
delimiter
plt.plot(x, y, label=label, color=cmap(color), lw=5)
delimiter
self.x == other.x and self.y == other.y
delimiter
txt = f.read()
delimiter
s.quit()
delimiter
a1 = np.arange(2)
delimiter
file_size = 0
delimiter
this_port = my_socket.getsockname()[1]
delimiter
print(results[entry])
delimiter
filter.children.pop()
delimiter
c = connection.cursor()
delimiter
notifier.loop()
delimiter
self.key = key
delimiter
greater = qsort([x for x in inlist[1:] if x >= pivot])
delimiter
http_server.serve_forever()
delimiter
elem.pop(elem.index(match))
delimiter
print(rpy2.__version__)
delimiter
user = User.objects.get(username=username)
delimiter
print(hex(id(y)))
delimiter
i = random.randint(0, len(self.data))
delimiter
d = random.randint(5, 15)
delimiter
startupinfo = subprocess.STARTUPINFO()
delimiter
df_with_cat.show()
delimiter
dataframe.to_excel(writer, sheet_name=sheets, startrow=row, startcol=0)
delimiter
client.close()
delimiter
models.Field.formfield(self, ObjectListField, **kwargs)
delimiter
line = models.CharField(max_length=12)
delimiter
U, s, Vt = np.linalg.svd(A, full_matrices=False)
delimiter
hashes.append(hash_dir(os.path.join(path, dir)))
delimiter
logger = logging.getLogger(__name__)
delimiter
plt.hist(x, bins=n, range=(minval, maxval), weights=weights)
delimiter
sys.stdout.flush()
delimiter
fitfunc = lambda params, x: params[0] * x + params[1]
delimiter
print(tb_last.tb_frame.f_locals)
delimiter
file_name_string = base64.urlsafe_b64encode(your_string)
delimiter
a = np.arange(1, 11)
delimiter
print(r.content)
delimiter
self.diagram.SetCanvas(self)
delimiter
parser = argparse.ArgumentParser()
delimiter
dt.now()
delimiter
urlpatterns += staticfiles_urlpatterns()
delimiter
count += 1
delimiter
df
delimiter
print(values)
delimiter
tree = objectify.parse(xmlPath, parser=parser)
delimiter
a + b
delimiter
X.sum(axis=0)
delimiter
pdb.set_trace()
delimiter
signal.signal(signal.SIGINT, cleanup)
delimiter
sys.stdout, sys.stderr = oldout, olderr
delimiter
next(reader)
delimiter
fig, ax = plt.subplots()
delimiter
curdoc().add_root(page_logo)
delimiter
b[:, :, (4)]
delimiter
plt.show()
delimiter
xml.parsers.expat
delimiter
a = np.array([0, 0, 15, 17, 16, 17, 16, 12, 18, 18])
delimiter
links = Post.objects.filter(link__tag__instancemodel=instance)
delimiter
sess = tf.Session()
delimiter
deletelst[0]
delimiter
lines = [line.strip() for line in f]
delimiter
idx_2D = np.outer(idx, idx)
delimiter
s = set(fus_d.keys())
delimiter
exit
delimiter
unpad(cipher.decrypt(enc[16:]))
delimiter
sum(summands)
delimiter
np.column_stack((a, b))
delimiter
pl.imshow(im_array, cmap=cm.Greys_r)
delimiter
ts = time.timetuple()
delimiter
num2 = int(argv[2])
delimiter
print((hex(num), num))
delimiter
stdout, notused = process.communicate()
delimiter
type(c)
delimiter
stuff()
delimiter
print(i)
delimiter
self.file.close()
delimiter
description = Column(String)
delimiter
{NULL}
delimiter
One().f()
delimiter
joinstr.join(t.queryString() for t in self.tokens[0::2])
delimiter
QtGui.QDialog.__init__(self, parent)
delimiter
assert Implementation(thing).foo == thing
delimiter
random.choice(largest)
delimiter
books = forms.ModelMultipleChoiceField(queryset=Book.objects.all())
delimiter
groups = dict(list(gb))
delimiter
print(my_test.name)
delimiter
self.t2 = time.time()
delimiter
out = np.bincount(id_arr.cumsum(), np.take(data, np.concatenate(contribs)))
delimiter
shortcut.Save()
delimiter
pygame.init()
delimiter
self.worker.daemon = True
delimiter
d[key] = d2[key]
delimiter
driver = webdriver.PhantomJS(*args, **kwargs)
delimiter
new_l.append(d)
delimiter
length = len(lists[0])
delimiter
meas.append((x, y))
delimiter
{0, 7, 8, 9, 10, 0, 0},
delimiter
wmp.Open.Open.Click()
delimiter
yagmail.SMTP().send(contents=contents)
delimiter
list(ln).index(1)
delimiter
diags.append(A[x][x] * B[x][x])
delimiter
A.nbytes
delimiter
csv_reader = csv.reader(f)
delimiter
[1.5, 0.8660254]
delimiter
x.append(row[0])
delimiter
sys.stdout = dummyStream()
delimiter
slope, intercept, r, p, stderr = linregress(x, y)
delimiter
a.__setitem__(x, a[x][1])
delimiter
mydict = dict((s[0], s[1:]) for s in myseq)
delimiter
iconfile.write(icondata)
delimiter
assert response.data == imgStringIO.read()
delimiter
self.statusBar.show()
delimiter
deactivate
delimiter
aDict[name].append((int(startTime), int(endTime)))
delimiter
csv_out.write(output_line)
delimiter
dictionary[parts[0]] = 1
delimiter
x[0, 0, 0] = value1
delimiter
now = datetime.now()
delimiter
[0, 0, 0, 1, 0],
delimiter
[(a, b) for a in A for b in B if a in b]
delimiter
dat = pd.DataFrame(np.random.randn(100, 100))
delimiter
bf.flush()
delimiter
df2 = df.copy()
delimiter
df[2]
delimiter
self.values = set()
delimiter
subprocess.check_call(params)
delimiter
b = dict(enumerate(a))
delimiter
object.__str__(self)
delimiter
element.findall(search)
delimiter
next(m)
delimiter
True
delimiter
found = False
delimiter
df.columns = my_columns
delimiter
d[k] = v
delimiter
b.pop(0)
delimiter
df = df[df.C == c_maxes]
delimiter
c = muX - b * np.dot(muY, T)
delimiter
array([2, 4])
delimiter
response.raise_for_status()
delimiter
main()
delimiter
b()
delimiter
a.shape
delimiter
self.button.show()
delimiter
temp = np.cumsum(X, axis=0)
delimiter
l = [k for k in h]
delimiter
print(dict[key])
delimiter
cameraR.SetFocalPoint(0, 0, 0)
delimiter
np.sqrt(val / 2.0 / a.shape[0])
delimiter
canvas.restoreState()
delimiter
property_asel = [a for a, truth in zip(property_a, good_objects) if truth]
delimiter
b().mymethod()
delimiter
plt.title(title)
delimiter
x, y = sp.coo_matrix(df.isnull()).nonzero()
delimiter
Vector(self.x + n, self.y + n)
delimiter
out = arr.copy()
delimiter
parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
delimiter
print(darr.min())
delimiter
df.columns = pd.MultiIndex.from_tuples(df.columns, names=cols)
delimiter
v = Vector((x, y, z))
delimiter
out = np.empty((ma, mb, na + nb), dtype=a.dtype)
delimiter
v1, v2 = Tup()
delimiter
counts = [(chr(i), v) for i, v in enumerate(counts) if v]
delimiter
self.panel = wx.Panel(self)
delimiter
hxs = HtmlXPathSelector(response)
delimiter
chord(207.652)
delimiter
chord(195.998)
delimiter
seed = np.random.randint(0, 100, (200, 206))
delimiter
P1Sum = P1Channels.sum(axis=1).sum()
delimiter
numrows = len(input)
delimiter
unittest.main()
delimiter
type(x)(y)
delimiter
bin(y)
delimiter
list(gen)
delimiter
Html.fromHtml(html).toString()
delimiter
[1, 5, 9]
delimiter
handle.set_missing_host_key_policy(ssh.AutoAddPolicy())
delimiter
driver.get(URL)
delimiter
soup = bs.BeautifulSoup(content)
delimiter
print(p)
delimiter
M_inverse = M.inv()
delimiter
word[:-1]
delimiter
self.queue = multiprocessing.Queue(-1)
delimiter
[record[0] for record in cursor]
delimiter
ax.view_init(elev=elevation_angle, azim=azimuthal_angle)
delimiter
print(ElementTree.tostring(thing))
delimiter
line.set_color(label)
delimiter
x = d[x]
delimiter
result.append(map(decimal.Decimal, line.split()))
delimiter
img = scipy.misc.imread(fname)
delimiter
traceback.print_exc()
delimiter
plot_matrix = np.zeros((height, width))
delimiter
np.log(a) / (k + 1) * x ** (k + 1)
delimiter
gevent.joinall(jobs, timeout=2)
delimiter
r = csv.reader(f)
delimiter
type(seen.add(10))
delimiter
k, v
delimiter
out_str = subprocess.check_output(cmd, shell=True)
delimiter
sets = np.array_split(arr, 4)
delimiter
next(g)
delimiter
df
delimiter
after_setup_task_logger.connect(foo_tasks_setup_logging)
delimiter
plt.close(fig)
delimiter
plt.xlim(1.0, 2.2)
delimiter
pd.DataFrame(dict(birdType=someTuple[0], birdCount=someTuple[1]))
delimiter
competitors = Competitors.objects.all()
delimiter
assert len(lists) == len(values)
delimiter
out = process.stdout.read(1)
delimiter
fig, ax = plt.subplots()
delimiter
set(n for val in list(periodic_gs.values()) for n in val.nodes())
delimiter
generator.workbook.close()
delimiter
q[0, 0] = 5
delimiter
result = [[k, da[k] + db[k]] for k in da.keys() & db]
delimiter
main()
delimiter
result = min_value if result < min_value else result
delimiter
list(samples2)
delimiter
download = requests.get(url)
delimiter
body = resp.read()
delimiter
parse(string)
delimiter
line = m.readline()
delimiter
render2Dstuff()
delimiter
self.assertEqual(mock_boo_obj.e.call_count, 1)
delimiter
subprocess.call(kill_command, shell=True)
delimiter
cur.close()
delimiter
writer = csv.writer(fo)
delimiter
target.write(str(source.read(), sourceEncoding).encode(targetEncoding))
delimiter
c.stop()
delimiter
predict_on_batch(self, x)
delimiter
data_array = np.array(data)
delimiter
m.drawcoastlines(linewidth=0.5)
delimiter
X = np.random.uniform(0, 1, size=(nx, dim))
delimiter
characteristics = Characteristics()
delimiter
find_planar_subgraph(G)
delimiter
response = request.urlopen().read()
delimiter
draw.ellipse((x_pos, y_pos, x_pos + box_edge, y_pos + box_edge), fill=255)
delimiter
grow(m, r, c)
delimiter
ax = fig.add_subplot(111, polar=True)
delimiter
len(df) == 0
delimiter
library(rjson)
delimiter
x = np.array([True, True, False])
delimiter
b = bytearray()
delimiter
sys.exit(0)
delimiter
output = process.communicate()[0]
delimiter
len(set(x))
delimiter
line_num += 1
delimiter
offset += len(i) + len(delimiter)
delimiter
plt.plot(x2, y2)
delimiter
width, height = np.shape(img)[0:2]
delimiter
df2
delimiter
deleteself.d[k]
delimiter
isinstance(12, retype)
delimiter
request.session.save()
delimiter
os.remove(fullpath)
delimiter
wb = Workbook()
delimiter
print(G.edges())
delimiter
print(line)
delimiter
ptree.productions()
delimiter
example[[1]]
delimiter
d.hexdigest()
delimiter
r = pd.DataFrame(X.toarray(), columns=vect.get_feature_names())
delimiter
csv_writer.writerows(rows)
delimiter
dflist.append(df)
delimiter
event.process()
delimiter
print(zzz())
delimiter
ctr = Counter(frozenset(x) for x in a)
delimiter
parser.parse(s)
delimiter
a = Yd()
delimiter
self._x
delimiter
a.A
delimiter
newDf = sqlContext.createDataFrame(df.rdd.flatMap(rowExpander))
delimiter
is_my = soup.new_string(is_my)
delimiter
f(2)
delimiter
axis.set_visible(True)
delimiter
os.execv(sys.executable, args)
delimiter
t = datetime.datetime.today()
delimiter
full_path = os.path.join(directory, name)
delimiter
print(line)
delimiter
result.append(tree)
delimiter
n = len(array)
delimiter
isinstance(thing, str)
delimiter
mf.seek(0)
delimiter
os.path.basename(urlparse.urlsplit(url)[2])
delimiter
a, b, c = pd.DataFrame(), pd.DataFrame(), pd.DataFrame()
delimiter
index = find(target, key, start_index)
delimiter
translate(coding_dna, to_stop=True)
delimiter
k.extend(a)
delimiter
main()
delimiter
output.close()
delimiter
vdisplay.stop()
delimiter
love_ctx.add((alice, loves, bob))
delimiter
df.to_csv(combined_file, index=False)
delimiter
t.remove(elem)
delimiter
time.sleep(x)
delimiter
thread.start()
delimiter
cls(_hours, _minutes, _seconds)
delimiter
alist2 = []
delimiter
nl.append(uniq(base, i))
delimiter
id = Column(Integer, primary_key=True)
delimiter
B = np.random.rand(100, 2)
delimiter
a, b = temp_tuple
delimiter
result = pd.DataFrame()
delimiter
ax1.set_aspect(1.0)
delimiter
ordc = ord(c)
delimiter
my_main_func()
delimiter
soup = BeautifulSoup(html)
delimiter
b = [x for x in a if x not in itemsToRemove]
delimiter
new_lock = threading.Lock()
delimiter
uniq = list(uniq.values())
delimiter
data = request.get_json()
delimiter
fkwargs.update(gkwargs)
delimiter
d2 = date(2012, 1, 1)
delimiter
list(repeat(100, randint, 1, 100))
delimiter
y = np.arange(W)
delimiter
lmask = len(mask)
delimiter
df = df[cols]
delimiter
pd.DataFrame(np.fromstring(arr, dtype=np.uint8).reshape(-1, 8) - 48)
delimiter
pool.join()
delimiter
height = int(cv.GetCaptureProperty(cap, cv.CV_CAP_PROP_FRAME_HEIGHT))
delimiter
print(np.all(b == d))
delimiter
print(line.strip())
delimiter
member.value
delimiter
df.ix[df.Col1.isin(search_list) & (df.Col4 > 40)]
delimiter
G_pc.add_edges_from(edges_2212)
delimiter
length = len(s)
delimiter
layout.addWidget(self.pb)
delimiter
print(np.allclose(A1, A2))
delimiter
logger.handlers[0].stream.close()
delimiter
xml2.getroottree().write_c14n(xml_string_io2)
delimiter
raw_file = os.path.join(permanent_store, file.name)
delimiter
os.rename(path, newpath)
delimiter
plt.ylim([-l / 2, l / 2])
delimiter
proxy._get_current_object()
delimiter
print(args)
delimiter
Rev5 = 1
delimiter
self.config(image=self.frames[self.idx])
delimiter
line = line.rstrip()
delimiter
print(leapyr(1900))
delimiter
self.brushes.append(brush)
delimiter
forwarder = serial.Serial(com_port2, baudrate)
delimiter
words = (w for line in f for w in line.split() if is_difficult(w))
delimiter
x[()]
delimiter
main(sys.argv)
delimiter
mod = __import__(module_name, fromlist=[class_name])
delimiter
f.close()
delimiter
print(count)
delimiter
__init__.py
delimiter
print(filename)
delimiter
rolled = np.roll(y, -1, axis=1)
delimiter
aList.pop()
delimiter
sorted(set(a))[-1]
delimiter
print(df)
delimiter
lines = file.readlines()
delimiter
unittest.main()
delimiter
ignored
delimiter
cls.change_mro = False
delimiter
object.__new__(A)
delimiter
max(PlayerList, key=lambda p: max(p[1:]))
delimiter
result = conn.execute(sql)
delimiter
random.shuffle(z)
delimiter
self.__dict__.update(kwargs)
delimiter
curs = conn.cursor()
delimiter
self.thread.start()
delimiter
print(d[4])
delimiter
print(results)
delimiter
e, ecov = curve_fit(line_exp, x, y, e0)
delimiter
B[:, (n)] = np.random.randn(N)
delimiter
data_copy = deepcopy(json_data)
delimiter
dlg.EndModal(0)
delimiter
H = H / np.std(H)
delimiter
arr = np.zeros((200, 20, 10, 20))
delimiter
legline.set_linewidth(lw)
delimiter
logOutput.setLineWrapMode(QTextEdit.NoWrap)
delimiter
app = QApplication(sys.argv)
delimiter
stripped_lines = (line.strip() for line in fd)
delimiter
[n for n, d in list(G.in_degree().items()) if d == 0]
delimiter
self.setZValue(-1)
delimiter
print(arr[:])
delimiter
line1.set_ydata(np.sin(x + phase))
delimiter
False
delimiter
data = json.loads(json_text)
delimiter
args = argparse.ArgumentParser.parse_args(self, *args, **kw)
delimiter
type.__init__(cls, name, bases, classdict)
delimiter
df2 = merge(df1, csv2, **kw2)
delimiter
pattern_obj = re.compile(pattern, re.MULTILINE)
delimiter
df
delimiter
fig = plt.figure()
delimiter
tasks.append(c.delay(a))
delimiter
country = CharField(max_length=200)
delimiter
j.environment.filters.update({})
delimiter
cur = con.cursor()
delimiter
dis.dis(f)
delimiter
fig = plt.figure()
delimiter
print(foo[0:2])
delimiter
opener = urllib.request.build_opener(handler)
delimiter
label1.grid(row=i, column=0)
delimiter
words = text.split()
delimiter
soup = BeautifulSoup(html)
delimiter
self.include_dirs.append(numpy.get_include())
delimiter
len(vals)
delimiter
n += 1
delimiter
path += iter(lambda : predecessor_map[path[-1]], origin)
delimiter
x.__setitem__(0, 100)
delimiter
[id(i) for i in a]
delimiter
isinstance(y, (np.ndarray, np.generic))
delimiter
f.seek(offset)
delimiter
etree.tostring(doc, xml_declaration=True)
delimiter
biggest = mylist[-2:]
delimiter
calculation()
delimiter
np.lib.stride_tricks.as_strided(a, shape=shape, strides=strides)
delimiter
f()
delimiter
cls()
delimiter
plt.plot(p, x, c=(0, 0, 0, 0.1))
delimiter
print([x for i, x in enumerate(f) if 1 <= i <= 15])
delimiter
self.tstore.append([osp.basename(f)])
delimiter
b = np.unpackbits(bitmap[np.packbits(a, axis=1)], axis=1)
delimiter
process.kill()
delimiter
input = raw_input
delimiter
s.headers.update(headers)
delimiter
yEstArray.append(yEst)
delimiter
NULL
delimiter
merged_list.append((x, index1, index2))
delimiter
18.28165417900891
delimiter
print(dirichlet([1] * n))
delimiter
image_file = Image.open(img_path)
delimiter
self.chambersinreactor += 1
delimiter
m.drawcoastlines()
delimiter
y = numpy.array([numpy.array(xi) for xi in x])
delimiter
int(mktime(obj.timetuple()))
delimiter
mydict = {k: v for k, v in list(mydict.items()) if k != val}
delimiter
_quicksort(array, begin, pivot - 1)
delimiter
fn = os.path.join(dir, name)
delimiter
dtypes = left.dtypes.combine_first(right.dtypes)
delimiter
[line.draw(color=(255, 0, 0)) for line in lines]
delimiter
any(map(lambda c: c.isdigit(), value))
delimiter
_, s = min((len(values[s]), s) for s in squares if len(values[s]) > 1)
delimiter
x = np.arange(-1, 1, 0.1)
delimiter
fig = plt.figure()
delimiter
dict.__setitem__(self, key, val)
delimiter
g.db.close()
delimiter
a.pop(0)
delimiter
self.tck = fitpack.bisplrep(x, y, z, kx=kx, ky=ky, s=0.0)
delimiter
self.file_name = file_name
delimiter
cj = cookielib.LWPCookieJar()
delimiter
x = np.arange(16).reshape(4, 4)
delimiter
ax.xaxis_date()
delimiter
plt.figure(2)
delimiter
dist = sum(dict[i] for i in range(1, input_key))
delimiter
str(carray)
delimiter
df = pd.DataFrame()
delimiter
animal.save()
delimiter
p.start()
delimiter
server = tornado.httpserver.HTTPServer(application)
delimiter
lambda *a: func(*(a + args))
delimiter
d = defaultdict(int)
delimiter
millis = int(round(time.time() * 1000))
delimiter
[buildout]
delimiter
a = Apples()
delimiter
__init__.py
delimiter
set(ast.literal_eval(line))
delimiter
a * c
delimiter
Base.metadata.create_all(engine)
delimiter
recv2 = recv2.decode()
delimiter
recv4 = recv4.decode()
delimiter
net.addModule(hidden0)
delimiter
TerminateProcess.restype = ctypes.wintypes.BOOL
delimiter
list = yaml.load(file)
delimiter
my_c_func(values.ctypes.data_as(c_void_p), c_long(values.size))
delimiter
[_f for _f in lis if _f]
delimiter
theoryX = np.arange(0, 1, 0.1)
delimiter
result.update(list(range(int(x[0]), int(x[-1]) + 1)))
delimiter
installation_path = p.__file__
delimiter
axes.set_xticks(ticks[::n])
delimiter
plt.imshow(img)
delimiter
now = datetime.now()
delimiter
result
delimiter
total = numpy.sum(x + y)
delimiter
readFrom(stream_proxy.stream())
delimiter
dev1 = os.stat(file1).st_dev
delimiter
form = PersonForm(request.POST)
delimiter
sniff(prn=makecap)
delimiter
face_list.add((a, x, b))
delimiter
j += 1
delimiter
df.columns = df.columns + 1
delimiter
user.save()
delimiter
[0.0, 0.0, 1.0],
delimiter
first_name = models.CharField(max_length=100)
delimiter
lst.append((start, length))
delimiter
arr = np.fromiter(itertools.chain(*it), int).reshape(-1, 2)
delimiter
xy[:, (1)]
delimiter
ax = fig.add_subplot(211)
delimiter
red.setTo(Scalar(255), mask_red)
delimiter
cursor = db.cursor()
delimiter
print(a([1, 2, 9999, 4, 9999, 9999, 12], 0, 0))
delimiter
q.put(getattr(a, target)(*args, **kwargs))
delimiter
delete_when = db.DateTimeProperty()
delimiter
print((np.linalg.det(A) - a.det()) / a.det())
delimiter
stdscr.keypad(1)
delimiter
pp(expr, use_unicode=True)
delimiter
show(p)
delimiter
object_id = models.PositiveIntegerField(null=True)
delimiter
y.start()
delimiter
lock = multiprocessing.Lock()
delimiter
sum(a * b)
delimiter
intermediate_list.append(td.findNext(text=True))
delimiter
bets = 2 ** toss2.cumsum()
delimiter
update_screen()
delimiter
c = np.setdiff1d(a, b)
delimiter
Qt.QWidget.__init__(self)
delimiter
outfp.getvalue()
delimiter
self.assertFalse(flag)
delimiter
cv2.waitKey(5)
delimiter
A = X, Y
delimiter
datetime.datetime(*map(int, mat.groups()[-1::-1]))
delimiter
timeit(set(a) & set(b))
delimiter
pd.DataFrame(dict(columns=box(a).tolist()))
delimiter
json_data = json.load(json_file)
delimiter
print(match[0])
delimiter
self.things_lock = threading.Lock()
delimiter
d1[k] -= v
delimiter
t = datetime.time(0, 0, 0)
delimiter
print(df)
delimiter
res = np.array_equal(A, B)
delimiter
h, status = cv2.findHomography(pts_src, pts_dst)
delimiter
background.paste(img, offset)
delimiter
path = sys.argv[1]
delimiter
Y = np.random.uniform(0, 1, size=(ny, dim))
delimiter
Matrix.map(lambda a, b, **kw: a + b, self, other)
delimiter
self.response.write(self.jinja2.render_template(template, **context))
delimiter
f(*args, **kwargs)
delimiter
image.thumbnail(size, Image.ANTIALIAS)
delimiter
+1 + 1 + 1 + 1 + 1 + 1 - 1 - 2 + 1 - 1 - 1 - 2
delimiter
assert os.path.isdir(corpusdir)
delimiter
response.close()
delimiter
q_in.delete_message(qmessage)
delimiter
print(dict(zip(p, i)))
delimiter
s = json.dumps(foo)
delimiter
parser.parse_args()
delimiter
plt.show(block=False)
delimiter
print(Example.Variable)
delimiter
dictionary[new_key] = dictionary[old_key]
delimiter
sys.stdout = sys.__stdout__
delimiter
img2 = cv2.imread(img2_path, cv2.CV_LOAD_IMAGE_GRAYSCALE)
delimiter
print(m.group())
delimiter
vals[bisect.bisect_right(keys, 0.5)]
delimiter
sysconfig.get_python_inc()
delimiter
a = [5, 8, 9]
delimiter
self.channel = self.connection.channel()
delimiter
count_list = [(i + 1) for i in range(N)]
delimiter
custm.cdf(2.5)
delimiter
ax.set_axisbelow(True)
delimiter
[doc for doc in db.units.find()]
delimiter
len(rg.findall(regexp))
delimiter
0
delimiter
ax = plt.gca()
delimiter
Canvas.__init__(self, parent, **kwargs)
delimiter
self.__class__(res)
delimiter
monkey.patch_all()
delimiter
run_daemon()
delimiter
pool = Pool(4)
delimiter
desired_ages = np.array([4, 16, 29, 80])
delimiter
nodes.extend(n.comparators)
delimiter
print(np.tensordot(v, A, axes=(0, 2)))
delimiter
wget - q - O - icanhazip.com
delimiter
crawler.start()
delimiter
year_hour_means = df1.groupby(lambda x: (x.year, x.hour)).mean()
delimiter
signal.alarm(1)
delimiter
str.__new__(cls, *args, **kw)
delimiter
plt.contourf(d)
delimiter
count += flatten_count(item, element)
delimiter
os.close(fh)
delimiter
ax2.yaxis.label.set_color(plot_ax2.get_color())
delimiter
e1 = tk.Entry(self)
delimiter
new_dict = dict(zip(keys, initial_list))
delimiter
img.paste(wmark, (0, 0), wmark)
delimiter
fig = pylab.figure()
delimiter
A.__init__(self, 1, 2)
delimiter
print(r.status_code)
delimiter
classifier = nbc.train(feature_set)
delimiter
screen.force_update()
delimiter
plt.show()
delimiter
number = random.randrange(10)
delimiter
item.patch.set_visible(False)
delimiter
print(unique_rows(data))
delimiter
sess.run(init)
delimiter
messages.append(message)
delimiter
self.d = {}
delimiter
print(bare_argspec)
delimiter
now = datetime.datetime.utcnow()
delimiter
relaxng.validate(doc)
delimiter
np.random.seed(1977)
delimiter
cdr = list[1:]
delimiter
[1, 2, 1]
delimiter
[0.09558515, 0.0, 0.0],
delimiter
self.Destroy()
delimiter
fhan.setLevel(logging.DEBUG)
delimiter
plt.show()
delimiter
admin.site.register(User, UserAdmin)
delimiter
[w for w in wordlist if regex.match(w)]
delimiter
t = numpy.array([0.24])
delimiter
sock.listen(5)
delimiter
s[0][0] += 1
delimiter
self.scrollbar.config(command=self.yview)
delimiter
new_dict[pair[1]].append(pair[0])
delimiter
self.connection.shutdown()
delimiter
print(s.query(A, B).select_from(subq).all())
delimiter
r[0].tag
delimiter
setattr(obj, self.private_name, value)
delimiter
t = TestModel.objects.all()
delimiter
opener = urllib.request.build_opener(*handlers)
delimiter
new_foo = []
delimiter
print(df)
delimiter
stream.write(self.terminator)
delimiter
ax.scatter(x, y, s=200, facecolors=rgb)
delimiter
loc = image.get_rect().center
delimiter
plt.clf()
delimiter
df
delimiter
bigList = [int(1000 * random()) for i in range(10 ** 6)]
delimiter
sess = tf.Session()
delimiter
p4 = ctypes.cast(id(tb), ctypes.POINTER(ctypes.c_uint))
delimiter
fig = matplotlib.pyplot.figure()
delimiter
name = models.CharField(max_length=60)
delimiter
counts = np.bincount(a)
delimiter
plt.xticks(xticks)
delimiter
idx = np.floor(input).astype(np.int)
delimiter
spotify.playpause()
delimiter
UTF - 8
delimiter
width, height = fig.canvas.get_width_height()
delimiter
sorted(output.items())
delimiter
loop.run_until_complete(do_work())
delimiter
JM2 = JM2.transpose([1, 2, 0])
delimiter
g.add_legend()
delimiter
print(map(etree.tostring, x))
delimiter
df4 = pd.DataFrame(np.random.rand(6, 2))
delimiter
self.inner_sizer.Add(self.test_panel, 1, wx.LEFT | wx.RIGHT | wx.EXPAND, 50)
delimiter
self.errorcall = errorcall
delimiter
self.buttonPanel2.Show(False)
delimiter
all(type(n) == str for n in f)
delimiter
url, len(page)
delimiter
new_driver.set_window_size(800, 450)
delimiter
response = br.submit()
delimiter
help(list.__contains__)
delimiter
Queue.interruptable_get = interruptable_get
delimiter
next(inf)
delimiter
self.A = np.arange(1000)
delimiter
content = models.TextField()
delimiter
df.idxmin(axis=1).values
delimiter
scopes = list(scopes)
delimiter
root = tk.Tk()
delimiter
print(list(round_robin(teams, sets=len(teams) * 2 - 2)))
delimiter
width, height = orig_image.size
delimiter
self.layout = QVBoxLayout(self)
delimiter
rect(x, 0, dx, y, color)
delimiter
x = np.arange(0, 10, 0.01)
delimiter
self.start()
delimiter
dict.fromkeys(s)
delimiter
string = string[1:-1]
delimiter
result.append(i)
delimiter
results.append(i[1])
delimiter
tostring(root)
delimiter
sh = book.add_sheet(sheet)
delimiter
keypoints = detector.detect(imthresh4)
delimiter
{{secrets | to_nice_yaml(width=50, explicit_start=True, explicit_end=True)}}
delimiter
c1.setopt(pycurl.PROXYPORT, 8080)
delimiter
e.bark()
delimiter
chars = (ch for word in fileinput.input() for ch in word.rstrip())
delimiter
print(imsi)
delimiter
s = binascii.unhexlify(a)
delimiter
session2 = SessionDST()
delimiter
self.serialc.start()
delimiter
indices = np.arange(9)
delimiter
plt.plot(X_plot, X_plot * results.params[0] + results.params[1])
delimiter
tornado.options.parse_command_line()
delimiter
print(line)
delimiter
browser = webdriver.Firefox()
delimiter
db.close_connection()
delimiter
z.close()
delimiter
f(b=2, **example)
delimiter
print(b[:, :, (0)])
delimiter
f, ax = plt.subplots(1, 1)
delimiter
data.values[bool_indices]
delimiter
print(t.overlap((-10, 10)))
delimiter
str(b)
delimiter
self.update(dict(*args, **kwargs))
delimiter
shutil.copyfileobj(r.raw, f)
delimiter
plt.ylim([-8, 8])
delimiter
paramtoget = {pval: wt_val}
delimiter
l.append(a)
delimiter
self.ready.emit()
delimiter
self.treeview.set_search_entry(self.search_entry)
delimiter
plt.close()
delimiter
x = random.choice([a, b])
delimiter
(x + h & m) - h
delimiter
values = [item[1] for item in items]
delimiter
a[:nonzero(a != b)[0][0]]
delimiter
app = wx.App()
delimiter
print(cumsum(array))
delimiter
b = a
delimiter
[key for key, group in groupby(li) if sum(1 for i in group) == 1]
delimiter
response = requests.get(newUrl).text
delimiter
x - np.roll(x, 1)
delimiter
{key: tuple(d[key] for d in dicts) for key in common_keys}
delimiter
_odbcinst_SystemINI(szFileName, FALSE)
delimiter
form.populate_obj(person)
delimiter
len(self._inner)
delimiter
cPickle.dumps(object())
delimiter
match_str = match.group(0)
delimiter
self.b.clear_cookies()
delimiter
y6 = x.astype(np.float_)
delimiter
logger.setLevel(logging.DEBUG)
delimiter
Hhigh = ifftshift(Hhigh)
delimiter
venus.circle(108, 1)
delimiter
print(cmp(list_2, list_1))
delimiter
max_value = max(sentiment_dict.values())
delimiter
chain(list_, _foo_suffix())
delimiter
stopped.set
delimiter
True
delimiter
libp = os.path.abspath(lib)
delimiter
value = process_value(raw_value)
delimiter
print(doc.prettify())
delimiter
bar()
delimiter
G = nx.Graph()
delimiter
d = defaultdict(list)
delimiter
sA = pd.Series(A)
delimiter
sub = s[pair[0]:pair[1]]
delimiter
set([6])
delimiter
plusone = []
delimiter
syscall = libc.syscall
delimiter
color = QtGui.QColor(0, 0, 0)
delimiter
unittest_main()
delimiter
ax.figure.canvas.draw_idle()
delimiter
sys.exit()
delimiter
x = np.array(x)
delimiter
df_r = pipeline.fit(df).transform(df)
delimiter
print(contents)
delimiter
_f_values[a][b]
delimiter
print(count)
delimiter
self.canvas.widgetlock(self.lasso)
delimiter
signal.alarm(1)
delimiter
user1 = forms.ChoiceField(choices=choices)
delimiter
Encoders.encode_base64(ical_atch)
delimiter
ax.add_collection(lines)
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
delimiter
b = np.array([4, 5, 6])
delimiter
x0, y0, r = optimize.fmin(cost, (x0, y0, r))
delimiter
ax.set_zlim(-1.01, 1.01)
delimiter
data = {}
delimiter
_jobs[jobname].apply_async(args=args, kwargs=kwargs)
delimiter
hexdigits = [int(x, 16) for x in hex_string]
delimiter
Y = np.matrix([[1, 0, 1, 1]]).T
delimiter
nn = ga.learn(0)[0]
delimiter
test_set = np.array(test_set)
delimiter
crawler.crawl(spider)
delimiter
numpy.random.shuffle(index_array)
delimiter
cerr << endl
delimiter
text.pack()
delimiter
self.setLayout(v_box)
delimiter
response = urllib.request.urlopen(request)
delimiter
time.sleep(1.0)
delimiter
data = s.recv(1024)
delimiter
print(df[col].value_counts(dropna=False))
delimiter
fibm(x - 1) + fibm(x - 2)
delimiter
self.data.pop()
delimiter
cursor = con.cursor()
delimiter
False
delimiter
pairs[mask]
delimiter
tempCS1 = plt.imshow(frame, cmap=plt.cm.gray)
delimiter
result.extend(sublist)
delimiter
w.wcs.cdelt = numpy.array([cdeltX, cdeltY])
delimiter
print(groups.median())
delimiter
funcs.append(c)
delimiter
app.exec_()
delimiter
next(self.iter)
delimiter
self.window.get_toplevel().show()
delimiter
htmlparser = etree.HTMLParser()
delimiter
os.makedir(sdsd)
delimiter
defaultdict(int)
delimiter
increments[n - 1] += 1
delimiter
os.chdir(tmp_location)
delimiter
file_handle.write_to(text)
delimiter
print(re.escape(s))
delimiter
[4, 1, 1]
delimiter
yolk - l
delimiter
string.format(*diff, **some_date)
delimiter
layout = QtGui.QVBoxLayout(self)
delimiter
img_color = np.dstack((img, img, img))
delimiter
A[:, (j)] = x ** j
delimiter
someList.append(copy.copy(foo))
delimiter
res = NP.append(my_data, new_col, axis=1)
delimiter
S2 += len(set(ids))
delimiter
print(line)
delimiter
obj = json.loads(encoded)
delimiter
a = np.arange(10)
delimiter
df.year = df.year.astype(int)
delimiter
callback(self._global_wealth)
delimiter
res.extend(res_females.get())
delimiter
max_index = np.argmax(a[inds[:, (0)], inds[:, (1)]])
delimiter
sound.stop()
delimiter
response.write(bytes)
delimiter
root = Tk()
delimiter
print(f[1])
delimiter
print(elt.eltid)
delimiter
some_other_func(something_else)
delimiter
traceback.print_exc(file=sys.stderr)
delimiter
locationgroup = models.ForeignKey(LocationGroup)
delimiter
print(add_time(datetime(year=2015, month=12, day=25), relativedelta(months=+1)))
delimiter
count += 1
delimiter
id = db.Column(db.Integer, primary_key=True)
delimiter
idx = np.where(a)[0]
delimiter
print(model.__name__, [x.name for x in model._meta.fields])
delimiter
asteroids = Game(600, 600)
delimiter
self.hbox.pack_start(self.button, False, False, 0)
delimiter
new_items = {str(item) for item in items}
delimiter
browser.add_handler(auth_NTLM)
delimiter
truncnorm_samples = norm.ppf(cdf_samples)
delimiter
mask = X ** 2 + Y ** 2 + Z ** 2 < radius ** 2
delimiter
idx = random.choice(list(range(num_outcomes)))
delimiter
groups.append(newGroup)
delimiter
withinx = random.randrange(x1, x2 + 1)
delimiter
cr.rectangle(0.0, 0.0, *widget.get_size())
delimiter
waw - 0.464188
delimiter
x.item()
delimiter
fp = os.path.join(dirpath, f)
delimiter
data = response.json()
delimiter
d = collections.defaultdict(list)
delimiter
data = grouped_count.apply(as_perc, total=df.my_label.count())
delimiter
os.unlink(filename)
delimiter
example[4:0] = [122]
delimiter
[atlas]
delimiter
counts = collections.Counter(l.strip() for l in infile)
delimiter
root2 = Tkinter.Toplevel(root)
delimiter
mvnorm.pdf(x, mean=0, cov=1)
delimiter
G.add_edge(u, v, weight=w)
delimiter
peasant.knock_over()
delimiter
self.f_ = f
delimiter
obj.__class__ = type(base_cls_name, (base_cls, cls), {})
delimiter
pythoncom.PumpWaitingMessages()
delimiter
b.delete_key(k)
delimiter
instance = reservation.instances[0]
delimiter
d = {}
delimiter
ceiling_key(d, 0)
delimiter
shift_vals = np.hstack((array1[0], np.diff(array1) - lens[:-1] + 1))
delimiter
positive = set((x, y) for x in range(1, 5) for y in range(1, 5))
delimiter
print(difft2(time(20, 40, 0), time(22, 41, 0)))
delimiter
debian
delimiter
key = bytes([19, 0, 0, 0, 8, 0])
delimiter
attachment.get_content_type()
delimiter
print(C)
delimiter
print(type(unicode_text))
delimiter
out.writerow(data)
delimiter
json.dump(r.json, sys.stdout, indent=4, ensure_ascii=False)
delimiter
ind1[cx1:cx2], ind2[cx1:cx2] = ind2[cx1:cx2].copy(), ind1[cx1:cx2].copy()
delimiter
sum_gx = np.trapz(gx, x, dx)
delimiter
referred_classes = [r.mapper.class_ for r in i.relationships]
delimiter
oftype = collections.defaultdict(list)
delimiter
plt.plot(x, kd_vals)
delimiter
y = np.random.randn(N)
delimiter
install.run(self)
delimiter
cell.value = 1
delimiter
axs[i].get_yaxis().set_ticks([])
delimiter
self.num = foo.num + 1
delimiter
a = []
delimiter
plot(x, y)
delimiter
set(main_array) - set(second_array)
delimiter
sportDict[ransport].append(name)
delimiter
numpy.nextafter(1, 0) > 1 - sys.float_info.epsilon
delimiter
s.dt.components
delimiter
self.send_blob(blob_info, content_type=type1, save_as=save_as1)
delimiter
print(np.intersect1d(B, ind))
delimiter
f0(s(t))
delimiter
writer.writeheader()
delimiter
name = models.CharField(max_length=200)
delimiter
print(list(text.get()))
delimiter
self._start = start
delimiter
d = OrderedDict()
delimiter
relative = os.path.relpath(path, directory)
delimiter
a.resize(len(b), refcheck=0)
delimiter
main()
delimiter
i[0]
delimiter
img_w, img_h = img.size
delimiter
locations.append(locationx)
delimiter
float(1.0).is_integer()
delimiter
root = Tkinter.Tk()
delimiter
post_save.connect(my_post_save_handler)
delimiter
assert IntInfinity() > 1e+100
delimiter
lambda : user_is_admin(cherrypy.request.login)
delimiter
M[index]
delimiter
player.clearCards()
delimiter
mask1 = np.in1d(out_id, a[:, (0)])
delimiter
signal.alarm(0)
delimiter
print(sc.parallelize(list(range(i * 10000))).count())
delimiter
x = np.random.randn(10000, 10000)
delimiter
arr = i * np.ones((2, 4))
delimiter
{NULL, NULL}
delimiter
dumper.represent_int(hex(data))
delimiter
new_pressures = []
delimiter
browser.submit()
delimiter
fmin = (N - 1) // f2 + 1
delimiter
lengths = Counter(len(v) for v in list(testdata.values()))
delimiter
legend_fig.canvas.draw()
delimiter
mod1.pxd
delimiter
spreadsheets_client = gdata.spreadsheet.service.SpreadsheetsService()
delimiter
print(line, line2)
delimiter
x.pop(0)
delimiter
stdscr.clear()
delimiter
new_settings = termios.tcgetattr(sys.stdin)
delimiter
d = dict(zip(keys, groups))
delimiter
X = np.hstack((X, AllAlexaAndGoogleInfo))
delimiter
0.7105, sym2, 6, 5, 10, 10
delimiter
self.Bind(wx.media.EVT_MEDIA_LOADED, self.song_is_loaded)
delimiter
s = df.sum(axis=1, level=[0, 1]).T
delimiter
self.f1 = MethodType(f, self, self.__class__)
delimiter
q.put_nowait((url, host))
delimiter
[_ for _ in iterable if not _.isdigit()]
delimiter
x = [1, 2]
delimiter
df = pd.concat([df, dummies], axis=1)
delimiter
column_widget = gtk.VBox()
delimiter
c = a + b
delimiter
data_rows.append(row)
delimiter
ri = lambda : random.randint(0, 10)
delimiter
user = models.ForeignKey(User)
delimiter
np.import_array()
delimiter
Py_Initialize()
delimiter
nL = [0, 0, 0, 0, 0, 0, 0, 0, 0]
delimiter
t.show()
delimiter
f.z
delimiter
deletenum_list[0]
delimiter
worker.finished.connect(self.thread.quit)
delimiter
alchemy / bin / bpython
delimiter
xlim(0, 10)
delimiter
self.sock.settimeout(self.timeout)
delimiter
pattern = url[0][1]
delimiter
archives[-1]
delimiter
print([int(bn[i:i + 8], 2) for i in range(0, len(bn), 8)])
delimiter
root.mainloop()
delimiter
print(merge_to_couples(new_list))
delimiter
df = pd.DataFrame(data2)
delimiter
print((y, z, bigmat[:, (y), (z)]))
delimiter
expr.subs({x: 10, y: 5})
delimiter
self.label
delimiter
list_of_numbers.append(float(val))
delimiter
dt = parser.parse(s)
delimiter
A[(0), :, :]
delimiter
print(line)
delimiter
main_window = QtGui.QMainWindow(size=QtCore.QSize(500, 500))
delimiter
difflib.get_close_matches(dud[0], pc_dud)
delimiter
print(df1)
delimiter
df1 = df1.reset_index()
delimiter
CharField.__init__(self, *args, **kwargs)
delimiter
sck = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
to_modify[indexes[index]] = replacements[index]
delimiter
pickle_test()
delimiter
import_module(moduleName)
delimiter
m = numpy.random(100, 100) > 0.5
delimiter
f.write(str_object2)
delimiter
B = np.reshape(A, (A.shape[0], A.shape[1], np.prod(A.shape[2:])))
delimiter
f1.seek(start)
delimiter
V = numpy.dot(X.transpose(), X)
delimiter
ints = [int(n) for n in s.split()]
delimiter
mask = tf.placeholder(tf.bool, shape=(n, n))
delimiter
a = wrp_testchar(byref(steps), byref(in_data), in_char)
delimiter
print(elem.text)
delimiter
result = [[(e - 1) for e in i] for i in n]
delimiter
print(mag(data))
delimiter
mars.speed(1)
delimiter
ndb.put_multi(model_dbs)
delimiter
test.columns = pd.MultiIndex.from_tuples(index_tuples)
delimiter
data = array([[1.766, -1.765, 2.576, -1.469, 1.69]])
delimiter
{{form.name()}}
delimiter
handle_last_line(previous)
delimiter
array([[1.0, 4.0], [2.0, -1.0]])
delimiter
[bins[k] for k in np.searchsorted(bins, my_series)]
delimiter
stack.pop()
delimiter
shape = [x.size for x in output]
delimiter
dct = obj if isinstance(obj, dict) else obj.__dict__
delimiter
self.mainLayout.addWidget(self.scroll)
delimiter
tree = dict()
delimiter
a[:, (b)].T
delimiter
_diff -= timedelta(days=1)
delimiter
self.tin2.SetLabel(self.tin.GetValue())
delimiter
integral = scipy.integrate.nquad(f, ([-d / 2, d / 2], [-d / 2, d / 2]))[0]
delimiter
h2 = hyst(y, -0.5, 0.5, True)
delimiter
y = np.array([2, 1, 5, 10, 100, 6])
delimiter
p = mp.Pool(processes=4)
delimiter
[5, 6, 7]
delimiter
bp.show()
delimiter
soup = BeautifulSoup(s)
delimiter
callable(obj)
delimiter
yaml.dump(d, default_flow_style=False)
delimiter
np.allclose(a, collapse_dims(a))
delimiter
print(jsons_data)
delimiter
byteString = bytes.astype(np.ubyte).tostring()
delimiter
plt.figure(i + 1)
delimiter
reactor.run()
delimiter
thread.join()
delimiter
w = Tkinter.Tk()
delimiter
t = numpy.linspace(t_start, t_end, t_len)
delimiter
canvas.itemconfig(item, fill=self.on_color)
delimiter
ax2.set_xlim(-5, 5)
delimiter
shutil.copyfileobj(sys.stdin, sys.stdout)
delimiter
pprint.pprint(result)
delimiter
elements.extend(namedElements)
delimiter
A = A.view(dtype=np.float64)
delimiter
print(square(double(Maybe(5))).unwrap())
delimiter
Data[..., (0)] + 1j * Data[..., (1)]
delimiter
X.append(x)
delimiter
APPLICATION_ROOT = path.abspath(path.dirname(__file__))
delimiter
locale.setlocale(locale.LC_TIME, l)
delimiter
m.show()
delimiter
d.foo()
delimiter
x.T
delimiter
im.size
delimiter
print(user.addresses)
delimiter
transport = ssh.get_transport()
delimiter
signal.signal(signal.SIGINT, handle_signal)
delimiter
leftdigits = self._exp + len(self._int)
delimiter
li2.extend(sublist)
delimiter
fd.write(t)
delimiter
print(df)
delimiter
some_code()
delimiter
myView.setItemDelegateForColumn(columnNumber, myItemDelegate)
delimiter
main()
delimiter
self.register_errors(result)
delimiter
f2.write(line)
delimiter
shutil.copy(str(self), str(target))
delimiter
result
delimiter
map(complex, c)
delimiter
self.hof[0].reshape(self.N, self.N), log
delimiter
self.d[num] = d[num] + 1
delimiter
mydict[repr(key)] = mydict[key]
delimiter
array_by_hand.tostring() == array_from_layers.tostring()
delimiter
list.__setitem__(self, i, 10)
delimiter
self.data = np.append(self.data, row)
delimiter
tmp_dlls.append(os.path.join(cdir, dll))
delimiter
cur = self.connection.cursor()
delimiter
SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET(self)
delimiter
True
delimiter
df2.reindex(df1.index, level=0)
delimiter
acc[0]
delimiter
kNN_classifier(train_data, k, distf)
delimiter
new_list = []
delimiter
NotImplemented
delimiter
seen = set()
delimiter
capture = cv2.VideoCapture(0)
delimiter
wx.Panel.__init__(self, *args, **kwargs)
delimiter
cv2.polylines(vis, [corners], True, (255, 255, 255))
delimiter
print(cache1.value.groups())
delimiter
layout = QHBoxLayout(self)
delimiter
foo.__defaults__
delimiter
self.write(prompt)
delimiter
counter = counter + 1
delimiter
a, b, c, d = unpack_list(*sub_list)
delimiter
print(convert(0))
delimiter
5, [False, True, False, False]
delimiter
self.checkWeight()
delimiter
lim = ax2.set_xlim(0, repeat_length)
delimiter
isclose(1, 1.00001)
delimiter
ax = fig.add_subplot(111)
delimiter
exit(0)
delimiter
plt.ion()
delimiter
Interleave(A, B)
delimiter
encoded_str = json.dumps(data)
delimiter
uniquekeys.append(k)
delimiter
ImageQuerySet(self.model, using=self._db)
delimiter
data = get_data()
delimiter
method(*args, **kwargs)
delimiter
self.button.clicked.connect(self.start_thread)
delimiter
logger = logging.getLogger()
delimiter
db = create_session()
delimiter
float(n) / (1 << p)
delimiter
print(x)
delimiter
QtGui.QFrame.__init__(self, parent)
delimiter
i += 1
delimiter
indices = np.arange(y.shape[0])
delimiter
self.children = []
delimiter
self.server.sendMessage(message[::-1])
delimiter
diff[y, x] = img2[y, x] - img1[y, x]
delimiter
filehandle.seek(-1, os.SEEK_END)
delimiter
b = np.roll(b, shift[j], axis=0)
delimiter
integers = [int(x) for x in fileStr if x.isdigit()]
delimiter
data = f.read()
delimiter
mcastsock.bind((mcast_addr, port))
delimiter
myDate = forms.DateField()
delimiter
file.close()
delimiter
self.update(*args, **kwargs)
delimiter
req = urllib.request.Request(url=url, data=request_data, headers=headers)
delimiter
self.canvas = FigureCanvasQTAgg(self.figure)
delimiter
proc.join()
delimiter
O(n)
delimiter
foo.__code__.co_consts[1].co_consts[2]
delimiter
examined_modules.append(calling_module_name)
delimiter
df = pd.concat([s, rolling_dd], axis=1)
delimiter
y2 = np.random.rand(10) * 20
delimiter
unique_list = list()
delimiter
f.seek(1, 1)
delimiter
~np.isnan(A)
delimiter
afile.close()
delimiter
add5(4)
delimiter
log_handler.setFormatter(formatter)
delimiter
db.session.add(self)
delimiter
days, hours, minutes, seconds = seconds_to_dhms(seconds)
delimiter
GL.glViewport(0, 0, 200, 200)
delimiter
_cell.style.font.bold = True
delimiter
main()
delimiter
True
delimiter
print(df.loc[list_of_values])
delimiter
base.all()
delimiter
dis.dis(lis[2])
delimiter
x = [((2, 1), (0, 1)), ((0, 1), (2, 1)), ((2, 1), (0, 1))]
delimiter
filehandler.close()
delimiter
[objid_to_idx[id(obj)] for obj in lst]
delimiter
cur.execute(sql, (pyodbc.Binary(data),))
delimiter
self.sizer.Add(self.lblname, (1, 0))
delimiter
list(splitclusters(a))
delimiter
form.tags.process(request.form)
delimiter
map(operator.add, A, B)
delimiter
print(p.map(minimize, args))
delimiter
filecount += 1
delimiter
self.result.append(word)
delimiter
result = [lines[0][x] for x in unique0] + [lines[1][x] for x in unique1]
delimiter
HttpResponseRedirect(e.response)
delimiter
print(len(s))
delimiter
print(expandtabs(input, 10))
delimiter
im.thumbnail(size, Image.ANTIALIAS)
delimiter
path = request.get_full_path()
delimiter
b.pack()
delimiter
array([1, 2])
delimiter
s.shutdown(0)
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
memcache.set(request.my_name, value)
delimiter
bar.set_alpha(0.8)
delimiter
xlim(0, 10)
delimiter
list()
delimiter
listener.join()
delimiter
result[index] += 1
delimiter
print(args)
delimiter
self.s_out.close()
delimiter
b = [4, 5, 6]
delimiter
plt.figure(1)
delimiter
df = df[df[group] != group_name]
delimiter
ax.add_patch(patch)
delimiter
response = urllib.request.urlopen(req)
delimiter
imnew = scipy.misc.toimage(datanew)
delimiter
id = db.Column(db.Integer, primary_key=True)
delimiter
z = np.outer(np.cos(theta), np.ones_like(phi))
delimiter
app = Flask(__name__)
delimiter
lay = QtGui.QHBoxLayout()
delimiter
N = len(list_of_lists)
delimiter
x + x
delimiter
token.get_access_token(code)
delimiter
output.close()
delimiter
eggs = iplocation
delimiter
logging_test()
delimiter
foo = [(a + 42) for a in foo]
delimiter
response = conn.getresponse()
delimiter
os.unlink(f.name)
delimiter
new_df = my_instance.load_dataframe()
delimiter
ifconfig
delimiter
{{other_content}}
delimiter
NULL
delimiter
fig = plt.figure()
delimiter
print(newDict)
delimiter
timer1.start()
delimiter
np.put(a, np.where(a == 0.0)[0], np.nan)
delimiter
user = request.user
delimiter
reader = csv.reader(f)
delimiter
x = np.random.randint(0, 10, size=(10, 2))
delimiter
font = ImageFont.load_default()
delimiter
response = mechanize.urlopen(request)
delimiter
update(message)
delimiter
s = stru()
delimiter
C = np.linalg.eigvals(B)
delimiter
c = pd.read_csv(StringIO(s))
delimiter
np.mean((np.dot(X, W) - y) ** 2) + alpha * np.sum(np.abs(W - W0))
delimiter
features_it = itertools.chain(*(iter(c.keys()) for c in data.values()))
delimiter
csr_matrix(M1).dot(M2)
delimiter
stdin = sys.stdin
delimiter
print(m.as_string())
delimiter
np.unique(np.concatenate((a, b)))
delimiter
totaldict = defaultdict(list)
delimiter
{4}.issubset(chain.from_iterable(x))
delimiter
grid.fig.set_figwidth(6)
delimiter
word.Repaginate()
delimiter
a = [0] * 8
delimiter
iszero = df.amount.values == 0
delimiter
df
delimiter
saved_result = GroupResult.restore(result.id)
delimiter
min(triplets, key=distance)
delimiter
numpy.random.shuffle(data)
delimiter
a.todense()
delimiter
1 + 1
delimiter
dests.add(node)
delimiter
mtext = m.group(1)
delimiter
cities.append((city.name, int(distance)))
delimiter
pygame.display.flip()
delimiter
wn.synsets(word)
delimiter
outdict = collections.defaultdict(list)
delimiter
print(i)
delimiter
func(value)
delimiter
outputStream.close()
delimiter
self.autocomplete(-1)
delimiter
self.de = QtGui.QPushButton(str(self.current))
delimiter
xy[:, (1)] > 0
delimiter
test()
delimiter
nltk.download()
delimiter
a = np.random.random_integers(2, size=(4, 4))
delimiter
z / (1 + z)
delimiter
plt.contour(Y, X, T[:, :, (round(len(z) / 2))], 64)
delimiter
assert my_round(9.76) == 9.75
delimiter
self.show()
delimiter
colors = np.linspace(0, 1, len(patches))
delimiter
plt.pause(1)
delimiter
module = loader.find_module(module_name).load_module(module_name)
delimiter
lowestsumsdict = {}
delimiter
np.array([d[x] for x in u])[inv].reshape(a.shape)
delimiter
[10, 10, 9, 7, 4]
delimiter
c += a + b
delimiter
pairs_by_number_and_list[pair[1]].append(pair)
delimiter
t = Timer(10, lambda p=p: p.terminate())
delimiter
offset = cet.utcoffset(dt)
delimiter
f.write(text)
delimiter
dat = pd.DataFrame(np.random.randn(5, 5))
delimiter
d = defaultdict(dict)
delimiter
pylab.show()
delimiter
root = Tk()
delimiter
book.save()
delimiter
f()
delimiter
print((sectorsPerCluster.value, bytesPerSector.value))
delimiter
result[i] = cpmethod(i)
delimiter
dir(int)
delimiter
x = np.reshape(x, (4, 4))
delimiter
print(type(img))
delimiter
matches.append(m.group(0))
delimiter
ax.yaxis.set_minor_formatter(matplotlib.ticker.FormatStrFormatter(format))
delimiter
k = np.array([[0, 1, 0], [1, 1, 1], [0, 1, 0]])
delimiter
self._data = data
delimiter
DEBUG = True
delimiter
self.send_my_headers()
delimiter
mailServer.starttls()
delimiter
img = PhotoImage(width=WIDTH, height=HEIGHT)
delimiter
s.listen(backlog)
delimiter
max_len = len(seq) / 2
delimiter
module = __import__(k)
delimiter
atexit.register(shutil.rmtree, test_area)
delimiter
hops.insert(0, url)
delimiter
aware = datetime.datetime(2011, 8, 15, 8, 15, 12, 0, pytz.UTC)
delimiter
user = models.ForeignKey(User)
delimiter
root = gtk.gdk.get_default_root_window()
delimiter
ps.line(lineFrom, lineTo)
delimiter
self.assertEqual(expected, list(map(str, sorted(versions))))
delimiter
tuple(mydata.transpose())
delimiter
self.out_queue.put(result)
delimiter
holtwinters(y, 0.2, 0.1, 0.05, 4)
delimiter
l = logging.getLogger(__name__)
delimiter
response
delimiter
a = np.random.randint(2, size=(10000, 100))
delimiter
basedir = str(os.path.abspath(os.path.dirname(__file__)))
delimiter
urllib.request.HTTPSHandler.__init__(self)
delimiter
time.sleep(1)
delimiter
ws.set_vert_split_pos(1)
delimiter
layout.addWidget(self.button)
delimiter
parser = argparse.ArgumentParser()
delimiter
app.register_blueprint(routes)
delimiter
df1
delimiter
output
delimiter
fig = plt.figure()
delimiter
mypalette = im.getpalette()
delimiter
p1.wait()
delimiter
data = numpy.array([[0, 0, 1, 0, 1], [0, 1, 1, 1, 0], [1, 0, 0, 0, 0]])
delimiter
remove(file_path)
delimiter
pr.disable()
delimiter
t = datetime.now()
delimiter
df[col] = df[col].shift(periods)
delimiter
assert my_now() == datetime.datetime(2000, 1, 1, 12, 0, 1)
delimiter
keys = {k for d in all_dicts for k in d}
delimiter
today = datetime.date.today()
delimiter
self.addLine(0, yc, width, yc)
delimiter
UDBG.enable_pdb()
delimiter
signif_lastdigit = int(signif_digits[-1])
delimiter
int((time.time() + 0.5) * 1000)
delimiter
data = fin.read().splitlines(True)
delimiter
a[::-1]
delimiter
chr(ord(match.group(0)[0]) + 1) + match.group(0)[1:]
delimiter
twitter = Twython(APP_KEY, APP_SECRET, OAUTH_TOKEN, OAUTH_TOKEN_SECRET)
delimiter
b = np.matrix(np.ones((2, 4)))
delimiter
salt = str(random.getrandbits(256))
delimiter
seq_in[:] = (x for x, k in seq)
delimiter
n_to_N = n * np.eye(n - 1) - np.diag(np.arange(n - 2, 0, -1), 1)
delimiter
widget1.grid(row=0)
delimiter
G = nx.Graph()
delimiter
im.size
delimiter
ax.grid(False)
delimiter
browser._wait_load()
delimiter
plot(x, y2)
delimiter
a / (sqrt(2) * inverseErf(P))
delimiter
mask = np.random.uniform(size=(4, 4))
delimiter
fn(**kwargs)
delimiter
time.sleep(self.sleep_time)
delimiter
points.append((xs[i], ys[j], v))
delimiter
self.root.after(10, self.Inputs)
delimiter
{(0): 0, (1): 1, (2): 2}
delimiter
metadata = MetaData()
delimiter
text = file.read()
delimiter
p = Pool(4)
delimiter
B -= B.mean()
delimiter
[(i[1:] * int(i[0]) if i[0].isdigit() else i) for i in l]
delimiter
False
delimiter
print(bisect(list_, item))
delimiter
fig, ax = subplots()
delimiter
net.sortModules()
delimiter
line = proc.stdout.readline()
delimiter
fullname = os.path.join(dirpath, fname)
delimiter
np.array_split(x4D, x.size / (p * q), axis=0)
delimiter
np.array_split(x2D, x.size / (p * q), axis=0)
delimiter
next(self._it)
delimiter
Series(result, index=labels)
delimiter
stdout.flush()
delimiter
p.terminate()
delimiter
mylist.extend(get_more_data())
delimiter
demo = [[0] for _ in range(2)]
delimiter
app = Flask()
delimiter
output += os.read(fd, 4096)
delimiter
lowercase_letters = [c for c in s if c.islower()]
delimiter
ax = plt.gca()
delimiter
l = [0, 0, 1, 1]
delimiter
obj.foo.__func__ is Cls.foo
delimiter
clf.set_params(**grid)
delimiter
nn.activate([0, 1])
delimiter
query = query.decode(charset) % escaped_args
delimiter
self.__dict__.update(x)
delimiter
c, a = s.accept()
delimiter
D = np.delete(np.arange(np.alen(A)), C)
delimiter
print(a.get())
delimiter
asymmetric_enc(session_key, pubkey), symmetric_enc(message, session_key)
delimiter
B_process.wait()
delimiter
ax = plt.gca()
delimiter
response = urllib.request.urlopen(req)
delimiter
runner.run(mySuit)
delimiter
print([x for x in list_dirs if os.path.basename(x) not in unwanted_files])
delimiter
dt.year
delimiter
raise StopIteration
delimiter
mask = ~np.in1d(unqID, np.where(count > 1)[0])
delimiter
nonzero(r_[1, diff(st)[:-1]])
delimiter
s.str[:2]
delimiter
ax = plt.gca()
delimiter
count[word] = 1
delimiter
show()
delimiter
df
delimiter
print(escaped_string)
delimiter
newser.plot(ax=axes[0])
delimiter
input = PdfFileReader(packet)
delimiter
[DRIVER_ISSUE]
delimiter
reader.Update()
delimiter
dict((key, round_floats(value)) for key, value in o.items())
delimiter
[2, 2, 1, 1]
delimiter
sys.stdout = unbuffered
delimiter
inspect.getgeneratorstate(a)
delimiter
ax2 = ax.twinx()
delimiter
self.application.save()
delimiter
list(islice(iterable, n))
delimiter
print(inputoutput[ii])
delimiter
res = df.astype(bool).astype(int)
delimiter
obj = MyClass()
delimiter
ndx = orig_indices[numpy.searchsorted(xs[orig_indices], ys)]
delimiter
h2, l2 = ax2.get_legend_handles_labels()
delimiter
images = scrapy.Field()
delimiter
all(c in string.printable for c in hello)
delimiter
print(item)
delimiter
myX, myY = text_center[0] - width / 2, text_center[1] + height / 2
delimiter
print(repr(b))
delimiter
time.sleep(10)
delimiter
urllib.request.install_opener(opener)
delimiter
self.window.show()
delimiter
s.values
delimiter
all(A[p] < A[i] for i in get_neighbors(p, len(A)))
delimiter
app = Flask(__name__)
delimiter
self.file.flush()
delimiter
d = datetime.date(2011, 9, 1)
delimiter
t.setdefault(keyList[-1], value)
delimiter
do_something_with_o(r())
delimiter
toAdd = xyzCoord[i][:]
delimiter
(lambda d: lambda : self.root.change_directory(d))(d)
delimiter
print(segment.min(), segment.max())
delimiter
df1 = df.copy()
delimiter
print(is_png(data))
delimiter
l = [1, 5, 7]
delimiter
do_something()
delimiter
server.socket.close()
delimiter
hash2 = hash2.hexdigest()
delimiter
self.button.draw()
delimiter
True
delimiter
file = os.path.join(temp_path, baseFile)
delimiter
self._x == other._x and self._y == other._y
delimiter
y = sparse.csr_matrix([[0, 1], [1, 0]])
delimiter
results = []
delimiter
print(key_val, key_val.etag)
delimiter
doc = lxml.html.parse(res.content)
delimiter
glClearColor(0.0, 0.0, 0.0, 0.0)
delimiter
file_a.write(new_a_buf.getvalue())
delimiter
plt.close()
delimiter
image = image_response.read()
delimiter
a_list = [f(i) for i in a_list]
delimiter
ranges[:, (1)] - ranges[:, (0)]
delimiter
row = cursor.fetchone()
delimiter
a.append([])
delimiter
print(save_virtual_workbook(wb))
delimiter
deq = collections.deque(list(range(100)))
delimiter
alist = [0, 0, 0, 0, 0, 0, 1]
delimiter
sum_sum_digit(1969)
delimiter
fig1 = plt.figure()
delimiter
parse_qs(urlparse(url).query, keep_blank_values=True)
delimiter
self.myq.put(THEEND)
delimiter
Dy = cv2.Sobel(image, cv2.CV_8UC1, 0, 1)
delimiter
df.Seatblocks
delimiter
print(l)
delimiter
start + timedelta(seconds=random_second)
delimiter
st[:i + 1]
delimiter
foo.bar - foo.baz
delimiter
doc = html5parser.fromstring(body)
delimiter
gb = df.groupby(col)
delimiter
f(v)
delimiter
root = Tk()
delimiter
renderer = gtk.CellRendererText()
delimiter
self.removeItem(line)
delimiter
raise FileNotFoundError(filename)
delimiter
self._from2scomplement(self.__next__)
delimiter
do_something_with_stdout(line)
delimiter
plt.xticks(np.array([]))
delimiter
graphs_sizer.Add(chart_canvas, 20, flag=wx.EXPAND, border=5)
delimiter
urlopen(req)
delimiter
i2 = getIfromRGB(colr1)
delimiter
self.sizer.Layout()
delimiter
plt.hist(random(1000), 100)
delimiter
df = df.ix[:, :1]
delimiter
thing.close()
delimiter
setattr(module, symbol, obj)
delimiter
x[-1] = binascii.hexlify(x[-1])
delimiter
[1, 10], [1, 10]
delimiter
System.out.println(sum)
delimiter
cam = pmb.expanding(min_periods=1).apply(lambda x: x.argmax())
delimiter
print(x, y)
delimiter
stdscr = curses.initscr()
delimiter
self.stack[-1] += 1
delimiter
name = models.CharField(max_length=200)
delimiter
K = np.arange(n - 1)
delimiter
lens = np.array([len(i) for i in ll])
delimiter
data = json.loads(line)
delimiter
torfile.add_node(node)
delimiter
stack[0]
delimiter
control_frame = my_bytes[0] & 128
delimiter
data
delimiter
data = chunks[-1]
delimiter
DT.time(hour, minute, second, microsecond)
delimiter
zipped.sort()
delimiter
foo(20, 4)
delimiter
raise KeyError(key)
delimiter
x = dict([(k, list(l)) for k in range(1000)])
delimiter
cur.close()
delimiter
b.f()
delimiter
dfs.append(df)
delimiter
conn.close()
delimiter
print(_.strip())
delimiter
s = cv2.SURF()
delimiter
Food._meta.get_all_related_many_to_many_objects()
delimiter
width = int(cv.GetCaptureProperty(cap, cv.CV_CAP_PROP_FRAME_WIDTH))
delimiter
mylist = [(a, b), (c, d), (e, f)]
delimiter
self.item = item
delimiter
n1 = dt.datetime.now()
delimiter
self.load_data()
delimiter
diffs = dict((k, k2.index(k) - k1.index(k)) for k in dict1)
delimiter
fig = pylab.figure()
delimiter
self.create_dummy_request()
delimiter
p.start()
delimiter
d = {v: [i for i, x in enumerate(materials) if x == v] for v in set(materials)}
delimiter
next(a)
delimiter
d[text_idx, np.arange(len(text_idx))] = 1
delimiter
l.insert(i, Y)
delimiter
print(result)
delimiter
array[idx - 1]
delimiter
fcntl.fcntl(s, fcntl.F_SETFL, os.O_NONBLOCK)
delimiter
nx.path.bidirectional_dijkstra(G, 1, 5)
delimiter
print(C(1, 2).__dict__)
delimiter
func(**kwargs)
delimiter
worksheet1 = workbook.add_worksheet()
delimiter
[hex(x) for x in e]
delimiter
process(line)
delimiter
driver = webdriver.Firefox()
delimiter
fig = PLT.figure()
delimiter
admin_objects = UserAdminManager()
delimiter
fun(args)
delimiter
a[::2]
delimiter
type(x) == my.object.kind
delimiter
r[i, j, x[i, j], y[i, j]] = c[i, j]
delimiter
print(fun1(1, 2))
delimiter
counts = Counter(word for line in f for word in line.split())
delimiter
provided.add(item)
delimiter
d.addCallback(lambda _: reactor.stop())
delimiter
self._array[self._index[index]]
delimiter
now = datetime.now()
delimiter
main()
delimiter
im.load()
delimiter
ZZ[t]
delimiter
c = a.copy()
delimiter
[0, 1, 1, 1]
delimiter
os.fchmod(fd.fileno(), mode & 4095)
delimiter
Base.metadata.create_all(bind=engine)
delimiter
getattr(p, s)
delimiter
x = [elt[0] for elt in y]
delimiter
ax.set_xticks([1.5, 4.5, 7.5])
delimiter
dict_x[key] = [value]
delimiter
self.x1, self.y1 = _rot(self.x1, self.y1)
delimiter
sio.truncate(0)
delimiter
font.setPointSize(10)
delimiter
cmap_lin1 = cm.jet
delimiter
ISLAND_SLEEPING = _ISLAND_SLEEPING
delimiter
Window.pack()
delimiter
plt.ylim([log10(0.1), log10(10)])
delimiter
b = np.zeros((n_b, n_b), dtype=a.dtype)
delimiter
time.sleep(0.01)
delimiter
len(file_content) > 0
delimiter
y = points[:, (1)]
delimiter
fourier_trans = numpy.fft.rfft(y) / 1000
delimiter
df
delimiter
model = create_model()
delimiter
print(sum_shells(b))
delimiter
matching_lines = list(filter(filter_func, string_list))
delimiter
dt = mytz.normalize(mytz.localize(dt, is_dst=True))
delimiter
False
delimiter
dt_my_tz = dt_aware.astimezone(tz)
delimiter
phone = models.CharField(max_length=100)
delimiter
print(data.values[np.in1d(data.ages, desired_ages)])
delimiter
plt.subplot(6, 6, i + 1)
delimiter
decoded = cipher.decrypt(base64.b64decode(encoded))
delimiter
reactor.listenTCP(8080, site)
delimiter
Y = np.random.normal(size=(10, 5))
delimiter
renL.SetActiveCamera(cameraL)
delimiter
pclose(helper)
delimiter
[list(a), list(b)]
delimiter
win.addstr(0, 0, root)
delimiter
cert = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_ASN1, key)
delimiter
sys.exit(1)
delimiter
p = mp.Process(target=some_long_task_from_library, args=(1000,))
delimiter
ax.plot_surface(x_surf, y_surf, z_surf, cmap=cm.hot)
delimiter
foo = timeit(foo)
delimiter
dict(string)
delimiter
python_exe = sys.executable
delimiter
img = erode(img, kern_size)
delimiter
output = np.empty(indices[0].shape)
delimiter
pivots = zeros((n,), fortran_int)
delimiter
i = np.arange(len(pts))
delimiter
result[i] = cpmethod(cpargs)
delimiter
new_strs.append(x)
delimiter
a = numpy.arange(1000000)
delimiter
plt.xlim([log10(0.1), log10(10)])
delimiter
frame.pack(fill=BOTH, expand=1)
delimiter
sum(dct.get(k, 0) for k in lst)
delimiter
config = configparser.ConfigParser()
delimiter
ebks, ks
delimiter
tree = ET.parse(file_path)
delimiter
print(x.reshape((1, x.shape[0])).type)
delimiter
ax.set_xticks(np.arange(AUC.shape[1]) + 0.5, minor=False)
delimiter
args = sys.argv[1:]
delimiter
d1 += timedelta(days=mdays)
delimiter
b = np.random.rand(6, 5)
delimiter
print(ddiff)
delimiter
d = xml.sax.parse(PseudoStream(), SAXHandler())
delimiter
self.assertEqual(6, s)
delimiter
window.show()
delimiter
foo.method2(foo.method1)
delimiter
self.set_default_size(100, 100)
delimiter
help(combinations)
delimiter
destination = os.path.splitext(imagePath)[0]
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
plt.plot([1, 2], [1, 2])
delimiter
x = np.arange(1000)
delimiter
queue = Queue()
delimiter
self.assertTrue(any(set(lst) <= e for e in self.merged))
delimiter
104.405 - -hochl
delimiter
5.018 - -katrielalex
delimiter
tcpSerSock = socket(AF_INET, SOCK_STREAM)
delimiter
dis.dis(f)
delimiter
settings.configure()
delimiter
bus = dbus.SessionBus()
delimiter
x = np.random.normal(0, 1, 1000).cumsum()
delimiter
NP.insert(T, 0, c, axis=1)
delimiter
ax.draw_artist(line)
delimiter
data_cols = list(df1.columns)
delimiter
df = pd.DataFrame(data)
delimiter
myseries_three.iloc[0]
delimiter
[syndication]
delimiter
file_open.close()
delimiter
g = Github(token)
delimiter
plt.yticks(np.arange(0.5, 10.5), list(range(0, 10)))
delimiter
print((step, sess.run(W), sess.run(b)))
delimiter
app = QApplication(sys.argv)
delimiter
time.sleep(60)
delimiter
print(url1, url2)
delimiter
i.interact(message)
delimiter
y_list = numpy.random.random(200)
delimiter
event.ignore()
delimiter
a = np.zeros((100, 100, 10))
delimiter
name = forms.CharField()
delimiter
lfun
delimiter
checkbox = driver.find_element_by_id(id)
delimiter
self.mySub()
delimiter
repo.commits
delimiter
traceback.print_stack()
delimiter
instance = MyClass()
delimiter
choices = Choice.objects.filter(poll__in=polls)
delimiter
original = Image.open(test_image)
delimiter
[1, 2, 2]
delimiter
0
delimiter
CALLBACK(func)
delimiter
self.model.query
delimiter
print(A.indptr)
delimiter
browser.select_form(nr=1)
delimiter
logger = logging.getLogger()
delimiter
answer = [i for i in range(1, 1001) if isSumOfSquares(i ** 2)]
delimiter
streamdata = child.communicate()[0]
delimiter
hexagon(50)
delimiter
A * exp(-(x - mu) ** 2 / 2 / sigma ** 2)
delimiter
r.content
delimiter
print(arr[(cond), :])
delimiter
B = np.concatenate((A, A), axis=1)
delimiter
celery = Celery()
delimiter
sent = sock.send(msg[totalsent:])
delimiter
signed = private_key.hashAndSign(data)
delimiter
func
delimiter
im = np.asarray(Image.open(filename))
delimiter
restart_line()
delimiter
a = float(x)
delimiter
1 / 1024.0 / 1024.0
delimiter
possibles = [x for x in remaining if x[:1] == start[-1:]]
delimiter
dir(object)
delimiter
int(s)
delimiter
app
delimiter
s = serial.Serial(5)
delimiter
setattr(instance, attr, value)
delimiter
df.a.quantile(0.95)
delimiter
self._value + n
delimiter
sorted_stuff = sorted([(ord(x[0]), x, y) for x, y in list(d.items())])
delimiter
PorterStemmer().stem_word(word)
delimiter
[0, 1, 1]
delimiter
rows.append(row)
delimiter
test = this_friday + timedelta(weeks=-1)
delimiter
select.select([sys.stdin], [], [], 0) == ([sys.stdin], [], [])
delimiter
self.pubsub.close()
delimiter
print(result)
delimiter
s.translate(str.maketrans(dict.fromkeys(rem)))
delimiter
propdict[attrname] = getattr(a, attrname)
delimiter
stopButton.pack()
delimiter
sys.stdout.write(output)
delimiter
items.append(item)
delimiter
root = Tk()
delimiter
print(v.__dict__)
delimiter
print(f.as_integer_ratio())
delimiter
a = date(2011, 11, 24)
delimiter
fo.close()
delimiter
ax.set_rgrids(list(range(1, 6)), angle=angle, labels=label)
delimiter
num = float(num)
delimiter
foo = MyClass()
delimiter
self.scrollbar = Scrollbar(self.data, orient=VERTICAL)
delimiter
Clock.schedule_once(self.set_attributes)
delimiter
print(offs)
delimiter
x = np.linspace(-2, 2, num=20)
delimiter
print(np.asarray(curve.intersection(hline)))
delimiter
self.request = request
delimiter
conn.setopt(pycurl.VERBOSE, True)
delimiter
xdiff = line1[0][0] - line1[1][0], line2[0][0] - line2[1][0]
delimiter
df
delimiter
self.children.append(myChild(name, self))
delimiter
self._result_queue = result_queue
delimiter
a = bytearray(5)
delimiter
child_midpoints.append(child_end + width // 2)
delimiter
setOverlays(cfloats)
delimiter
show(layout)
delimiter
x, y = [[] for x in range(2)]
delimiter
plt.grid(True)
delimiter
pyi = points[i, 1]
delimiter
print(item)
delimiter
end = datetime.datetime.combine(today, end)
delimiter
x = np.random.random(10)
delimiter
id = np.append([0], np.any(np.diff(sorted_Ar, axis=0), 1).cumsum())
delimiter
pre_save
delimiter
BaseObject._initialize()
delimiter
x, y = ogrid[0:img.shape[0], 0:img.shape[1]]
delimiter
pkcs11.load(libacospkcs)
delimiter
existing.merge_result(task_from_json(slug, **task) for task in taskdata)
delimiter
words = sentence.split()
delimiter
print(a.parent)
delimiter
x * (a + d + g) + y * (b + e + h) + z * (c + f + i)
delimiter
colorama.init()
delimiter
event_box.window.set_cursor(gtk.gdk.Cursor(gtk.gdk.HAND1))
delimiter
L.sort()
delimiter
pp.plot(ar)
delimiter
stream_matrix_np = np.random.uniform(0, n ** 2, size=(n, n))
delimiter
parser = argparse.ArgumentParser()
delimiter
f = func()
delimiter
wn.ADV
delimiter
wn.VERB
delimiter
self.conn.commit()
delimiter
y = np.random.randint(0, 10000, size=5000000)
delimiter
largest, second_largest, third_largest
delimiter
print(list(sub_findre(s, substring, 2)))
delimiter
to_product.append([(k, v)])
delimiter
tmp = ax.transData.transform([(0, 0), (1, 1)])
delimiter
slice = myarray[..., (i)]
delimiter
tasks_q, results_q = multiprocessing.Queue(1), multiprocessing.Queue()
delimiter
isitIn(char, aStr[:len(aStr) // 2])
delimiter
db_thread.start()
delimiter
psyco.full()
delimiter
email = Column(String, unique=True)
delimiter
ax.set_xlim([0.1, 0.8])
delimiter
dis.dis(foo.__code__.co_consts[2].co_consts[2])
delimiter
dest.write(line)
delimiter
pd.to_datetime(date_time)
delimiter
app = Flask(__name__)
delimiter
dominated = []
delimiter
C = [B.popleft() for _i in range(4096)]
delimiter
z = itertools.chain(x, y)
delimiter
qSQLresults = cursor.fetchall()
delimiter
do_some_ather_thing()
delimiter
p = PatchCollection(patches, cmap=matplotlib.cm.jet, alpha=0.4)
delimiter
image = cv2.cvtColor(hsv_image, cv2.COLOR_HSV2RGB)
delimiter
v[:, (0)]
delimiter
args = parser.parse_args()
delimiter
print(df1)
delimiter
sleep(2)
delimiter
user_ = User.objects.get(pk=1)
delimiter
edges[i, j + 2].append((i, j - 2))
delimiter
top = tk.Tk()
delimiter
sys.exit(1)
delimiter
os.remove(os.path.join(root, name))
delimiter
xy = line2d[0].get_xydata()
delimiter
b = a[:5, :5]
delimiter
data = np.random.random((10, 10))
delimiter
data = f_input.read()
delimiter
Parent.__init__(self)
delimiter
main()
delimiter
num_fatals += 1
delimiter
a = 0
delimiter
plt.imshow(lab)
delimiter
awesome_dict
delimiter
clf()
delimiter
df_a.join(df_b)
delimiter
globals()[name] = value
delimiter
b = np.zeros_like(a)
delimiter
desired_list = [x for x, _ in tuple_list]
delimiter
driver = webdriver.Firefox()
delimiter
EXTRA_DIST = myext.h
delimiter
ax.set_xticks([])
delimiter
print(self.name)
delimiter
logging.basicConfig(level=logging.INFO)
delimiter
b[:, :, (0)]
delimiter
array([1]),
delimiter
list_b = [5, 6, 7, 8]
delimiter
line = input()
delimiter
cls
delimiter
run_initialization_stuff()
delimiter
logger.addHandler(hdlr)
delimiter
fd = sys.stdout.fileno()
delimiter
date(2011, 1, 15) - date.today()
delimiter
print(hex(agency))
delimiter
c = threading.Thread(target=consumer, args=[q])
delimiter
sys.getrefcount(astrd)
delimiter
axis([0, 25, 0, 10])
delimiter
Results.objects.saved_once().all()
delimiter
address = models.CharField(max_length=200)
delimiter
lines = fp.readlines()
delimiter
start_date_monday = start_date - datetime.timedelta(days=start_date.weekday())
delimiter
p.join()
delimiter
nickname = request.user.profile.nickname
delimiter
d = defaultdict(lambda d=d: d)
delimiter
print((i, j))
delimiter
len(counts)
delimiter
content = models.TextField
delimiter
p = kde(x)
delimiter
r = csv.reader(file_b)
delimiter
d = datetime.datetime.utcnow()
delimiter
set(chain.from_iterable([word.lemma_names() for word in synonyms]))
delimiter
pl.show()
delimiter
print(np.mean(l))
delimiter
print(xyzzy)
delimiter
v_box.addWidget(self.box_one)
delimiter
func(self, *args, **kwargs)
delimiter
self.f.write(data)
delimiter
assert b.x == 2
delimiter
ii = np.nonzero(y)[0]
delimiter
peers[i].send(chunk)
delimiter
list(chain.from_iterable(summ_neg(x)))
delimiter
SOCIAL_AUTH_GOOGLE_PLUS_USE_DEPRECATED_API = True
delimiter
d = defaultdict(list)
delimiter
b = np.where(a == 9)
delimiter
gx, gy, gz
delimiter
self.fp = self.file_or_path = file
delimiter
debug = False
delimiter
combo.addItems(li)
delimiter
plt.show()
delimiter
app.logger.addHandler(logging.StreamHandler())
delimiter
process.terminate()
delimiter
time.sleep(1)
delimiter
c.set_visible(vis)
delimiter
print(df)
delimiter
x_ = np.linspace(0.0, 1.0, 10)
delimiter
listy[1] = [1, 2]
delimiter
sleep(1)
delimiter
locals()[name] = a.__dict__[name]
delimiter
id(1 == 1)
delimiter
R, C = np.where(mask.T)
delimiter
funcs.append(lambda x=x: x)
delimiter
pd.DataFrame(listOfNewRows)
delimiter
cherrypy.config.update(conffile)
delimiter
result1 = pd.concat([d1, df1], axis=1)
delimiter
old_locale = locale.getlocale(locale.LC_COLLATE)
delimiter
con = pyodbc.connect(odbcstring)
delimiter
n2 = dt.datetime.now()
delimiter
handle_line(line)
delimiter
p.wait()
delimiter
a = asarray(a)
delimiter
ax = fig.add_subplot(111)
delimiter
nrange = np.arange(n)
delimiter
a, b, c = final(a, b, c)
delimiter
s.push(10)
delimiter
self.load_picture()
delimiter
exp(-(x - mu) ** 2 / (2 * s ** 2))
delimiter
ylim = ax.get_ylim()
delimiter
indices = [numpy.where(a <= x)[0][0] for x in b]
delimiter
match.groupdict()
delimiter
df
delimiter
loaded = pickle.loads(dumped)
delimiter
cursor = connection.cursor()
delimiter
self.button.setMaximumSize(QtCore.QSize(128, 128))
delimiter
queryset = Person.objects.all()
delimiter
obj.get_related_deltas(epk)
delimiter
[(sum(x) / float(n)) for x in partitions]
delimiter
fh.write(header)
delimiter
print(f.method())
delimiter
code = func.__code__
delimiter
app.exec_()
delimiter
any(phrase in text for phrase in word_list)
delimiter
pd.Series((df.values * (df.columns.values + sep)).sum(1)).str.split()
delimiter
w2.append(words[1])
delimiter
not sum([(not i in A) for i in B])
delimiter
horse_frog
delimiter
out, err = proc.communicate()
delimiter
str in [type(entry) for entry in example]
delimiter
lcl = locals()
delimiter
B().update()
delimiter
form = ModelForm(request.POST)
delimiter
startupinfo = subprocess.STARTUPINFO()
delimiter
positive1 = positive[:, 1:-2]
delimiter
user = UserProfile.objects.get(pk=1)
delimiter
result = pool.map(worker, groups)
delimiter
self.assertTrue(1 + 1 == 2)
delimiter
d = defaultdict(lambda : defaultdict(list))
delimiter
a[0] + a[1] / float(10 ** (int(log(a[1], 10)) + 1))
delimiter
print(y.shape)
delimiter
loop.run_forever()
delimiter
response
delimiter
print(cmp(list_1, list_2))
delimiter
order = list(perm)[::-1] + [n]
delimiter
heapq.heappop(heap)
delimiter
print(np.random.dirichlet(np.ones(10) / 1000.0, size=1))
delimiter
p = pyaudio.PyAudio()
delimiter
hxs = HtmlXPathSelector(response)
delimiter
ax = fig.add_subplot(111)
delimiter
HSV_tuples = [(x * 1.0 / N, 0.5, 0.5) for x in range(N)]
delimiter
lock = multiprocessing.Lock()
delimiter
entity = query[0]
delimiter
ret = func(*args, **kwargs)
delimiter
sum(zip(res, args), ())
delimiter
a_sps = scipy.sparse.csc_matrix(a)
delimiter
np.arange(k - i) == ix[:-i]
delimiter
b = [9, 8, 7, 6, 5]
delimiter
help(str.replace)
delimiter
len(read_file(filename))
delimiter
res = service.cse().list(q=search_term, cx=cse_id, **kwargs).execute()
delimiter
A.__init__(self)
delimiter
count = 0
delimiter
word_len_dict[len(word)].append(word)
delimiter
parse_with_lxml()
delimiter
ax.invert_yaxis()
delimiter
map = random.randrange(1, 10)
delimiter
datetime.datetime(2000, 1, 1).replace(**fields)
delimiter
[v for v in list2 if v in list1]
delimiter
print(mse(model_2_v2.predict(xg_test), y_test))
delimiter
print(n)
delimiter
[result.extend(sublist) for sublist in lst]
delimiter
root = lxml.etree.fromstring(x)
delimiter
exponent = d.as_tuple()[2]
delimiter
product = models.ForeignKey(Product)
delimiter
print(df1)
delimiter
path = os.path.abspath(sys.executable)
delimiter
print(num)
delimiter
oldest = max(people, key=lambda p: p.age)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
f1(f2(*args, **kwargs))
delimiter
Py_DECREF(str)
delimiter
raise KeyError(key)
delimiter
notebook.set_tab_reorderable(child, True)
delimiter
score = IntegerField(validators=[required])
delimiter
Fader.update()
delimiter
print(mention.user.screen_name)
delimiter
d1_keys = set(d1.keys())
delimiter
import_array()
delimiter
mod
delimiter
Dl = self.angulardist(zcluster)
delimiter
r.content
delimiter
line = lines.pop(0)
delimiter
fig, ax = plt.subplots(1, 1)
delimiter
self.assertEqual()
delimiter
csock.close()
delimiter
xl = pd.ExcelFile(fn)
delimiter
ax.set_xticks(ind + width / 2)
delimiter
print(s[sl])
delimiter
dates = [dt for dt in rrule(MONTHLY, dtstart=strt_dt, until=end_dt)]
delimiter
server.serve_forever()
delimiter
d_theano = f_minkowski(x, x, p)[np.triu_indices(nX, 1)]
delimiter
streng
delimiter
fn(*args, **kwargs)
delimiter
instance = form.save(commit=False)
delimiter
B = np.empty_like(A)
delimiter
print(combine_dicts(a, b, operator.mul))
delimiter
window.open(url)
delimiter
fesetround(FE_TOWARDZERO)
delimiter
fesetround(FE_UPWARD)
delimiter
fesetround(FE_DOWNWARD)
delimiter
ax.add_collection(coll)
delimiter
mp.complete_upload()
delimiter
b = a
delimiter
stmts.append(s)
delimiter
[y for x in lst for y in untuppleList2(x)]
delimiter
cmath.sqrt(-0j) == -0j
delimiter
self.panel = wx.ScrolledWindow(self, wx.ID_ANY)
delimiter
length = len(input_string)
delimiter
b = tf.Variable(tf.zeros([10]))
delimiter
ax.plot(list(range(5)))
delimiter
ax.mouse_init()
delimiter
self.line = self.ax.scatter(self.x, self.y)
delimiter
do_totally_different_thing()
delimiter
unmatched = list(b)
delimiter
self.buttonPanel2 = wx.Panel(self)
delimiter
Test.test_call
delimiter
self.stream.write(data)
delimiter
new_list1 = [list1[i] for i in indicies]
delimiter
indices, vals = zip(*data)
delimiter
mod.doSomething()
delimiter
max_index = len(row) - 1
delimiter
tk = Tk()
delimiter
rolled = np.roll(y, -1, axis=0)
delimiter
[4, 5, 6],
delimiter
setattr(self, item, args_dict[item])
delimiter
image = cv2.imread(path_to_image, cv2.IMREAD_UNCHANGED)
delimiter
print([vertex.label for vertex in x])
delimiter
station = serializers.CharField(read_only=True)
delimiter
name = Column(String(20))
delimiter
newdata = newdata.divide(df.sum().sum())
delimiter
data.append(float(line))
delimiter
schema_doc = etree.parse(f_schema)
delimiter
config.readfp(source)
delimiter
id = db.Column(db.Integer, primary_key=True)
delimiter
d = d.replace(c, sep)
delimiter
sqs.meta.client._endpoint.http_session.close()
delimiter
[(x - 1 - i, n) for i, n in enumerate(range(x))]
delimiter
a = 2
delimiter
manager = multiprocessing.Manager()
delimiter
curl = pycurl.Curl()
delimiter
print(locals())
delimiter
fout.write(line)
delimiter
fixed = s[0:pos] + s[pos + 1:]
delimiter
MyClass.__dict__ = {}
delimiter
self._port = port
delimiter
x = tf.Variable(tf.ones([]))
delimiter
self.thread = threading.Thread(target=self._wait)
delimiter
remotezip = urllib.request.urlopen(url)
delimiter
keyfunc = lambda x: len(x)
delimiter
print(listD)
delimiter
K.mean(K.square(y_pred - y_true), axis=-1)
delimiter
x, y
delimiter
x, y
delimiter
print(getSubStrings(a, 2))
delimiter
assign(subarg, subvalue)
delimiter
l = np.sqrt(6 * (a + c + np.sqrt(b ** 2 + (a - c) ** 2)))
delimiter
sys.stdout = sys.__stdout__
delimiter
df
delimiter
process_a.start()
delimiter
b.append(sublist)
delimiter
b.extend(a)
delimiter
heappush(self.queue, item)
delimiter
k.set_contents_from_filename(testfile, cb=percent_cb, num_cb=10)
delimiter
kOUT[0]
delimiter
hash.hexdigest()
delimiter
print(tostring(elem))
delimiter
t = threading.Thread(target=work, args=(name,))
delimiter
tf.start_queue_runners()
delimiter
app = Flask(__name__)
delimiter
[]
delimiter
model = linear_model.LogisticRegression()
delimiter
[5, 8]
delimiter
slice(start, stop, step)
delimiter
series1 = np.arange(10)
delimiter
i += 1
delimiter
l_o_l = [[int(y) for y in x] for x in list_of_lists]
delimiter
help(re.sub)
delimiter
nodeRemovalList = list(filter(in_sphere, nodeList))
delimiter
pool.map(fn, list(range(10)))
delimiter
draw.ellipse((25, 25, 75, 75), fill=(255, 0, 0))
delimiter
deletei
delimiter
postcount = len(survivors)
delimiter
x[::-1]
delimiter
results = []
delimiter
ax[0].legend()
delimiter
self.func(*args)
delimiter
tuples = zip(string.printable, itertools.repeat(0))
delimiter
a.argmax()
delimiter
result.append([])
delimiter
B = numpy.array()
delimiter
ax.ticklabel_format(useOffset=False)
delimiter
[1, 0]
delimiter
df.idxmax(1)
delimiter
[(u.value, u.meta) for u in set([b, d, f]).intersection(set([a, c, e]))]
delimiter
model = Sequential()
delimiter
mainloop.run()
delimiter
a = np.zeros((nx, nz))
delimiter
face_list.add((x, a, b))
delimiter
s.commit()
delimiter
widget.bindtags((tag,) + widget.bindtags())
delimiter
self.vtkPolyData.GetPointData().SetScalars(self.vtkDepth)
delimiter
newlist.append(x)
delimiter
api = tweepy.API(auth)
delimiter
pa = pyaudio.PyAudio()
delimiter
tv.set_search_column(1)
delimiter
self.x = np.linspace(0, 5 * np.pi, 400)
delimiter
ceiling_key(d, 4)
delimiter
2 - (B, C, F, E)
delimiter
set(l1)
delimiter
np.dot(output, slicevol) / 2
delimiter
bool(1)
delimiter
csv_file = browser.page_source
delimiter
endpos = text.rfind(bravo)
delimiter
app = QApplication(sys.argv)
delimiter
next(other)
delimiter
writer.writerow([4, 5, 6])
delimiter
url = db.Column(db.String(2048))
delimiter
raise ValueError(HELPING_EXPLANATION)
delimiter
diagonal = np.rollaxis(diagonal, -1)
delimiter
dis.dis()
delimiter
ceiling_key(d, 1)
delimiter
agent_list = [list(ast.literal_eval(line)) for line in f]
delimiter
first10000 = islice(f, 10000)
delimiter
my_array = numpy.empty([1, 2], dtype=object)
delimiter
requests_log.setLevel(logging.DEBUG)
delimiter
rescaled.shape = newshape
delimiter
numbers = [1, 2]
delimiter
queryset = User.objects.all()
delimiter
contour_info = sorted(contour_info, key=lambda c: c[2], reverse=True)
delimiter
result.extend(node._values)
delimiter
print((root, name))
delimiter
p.join()
delimiter
(s[i:j] for i in indexes(s) for j in indexes(s[i:], i + 1))
delimiter
label.set_visible(not win.is_fullscreen)
delimiter
axes[0].pcolormesh(x, y, z)
delimiter
[item.upper() for item in arg]
delimiter
p.poll()
delimiter
main()
delimiter
lookup = {n: max((a for a in s if n in a), key=len) for n in s}
delimiter
QtCore.QThread.run(self)
delimiter
cv2.imwrite(os.path.join(dirname, name), frame)
delimiter
np.random.seed(24)
delimiter
t1 = time.time()
delimiter
a[:, (non_index)] = b
delimiter
animals = [Lion(), Tiger(), Bear()]
delimiter
sys.stdout = sys.stderr
delimiter
br = mechanize.Browser()
delimiter
print([list(items) for g, items in groups])
delimiter
run()
delimiter
e = a[0:1]
delimiter
print(count.most_common())
delimiter
b = a[::2]
delimiter
result.append(msvcrt.getche())
delimiter
printcake()
delimiter
listener.handle_event(event)
delimiter
print(df)
delimiter
True
delimiter
v.append(len(item))
delimiter
cv2.imwrite(sys.argv[2], skin_ycrcb)
delimiter
r = np.sqrt(xdist ** 2 + d ** 2)
delimiter
time.sleep(1)
delimiter
row[1] = row[1]
delimiter
app = Flask(__name__)
delimiter
--nogroup
delimiter
do_stuff()
delimiter
print(cob.x)
delimiter
fig.subplots_adjust(top=0.9)
delimiter
data = np.fromfile(file, dtype=dt)
delimiter
result
delimiter
sorted(enumerate(sample), key=lambda n_v: abs(n_v[1] - pivot))[:k]
delimiter
self.assertEqual(d1, d2)
delimiter
ADO.csv
delimiter
AFG.csv
delimiter
figure()
delimiter
data = json.load(o)
delimiter
logger.log(f.__name__, args, result)
delimiter
shutil.copyfileobj(f, response)
delimiter
d = np.diff(np.asarray(a, dtype=int))
delimiter
map(itemgetter(0), groupby(L))
delimiter
self.rotate()
delimiter
dfL = pd.concat([df] * 100)
delimiter
app.register_blueprint(bp)
delimiter
y = np.zeros((yt, xt))
delimiter
scat.set_array(data[i])
delimiter
self.SetMinSize((100, 100))
delimiter
twitter = Twython(APP_KEY, APP_SECRET, OAUTH_TOKEN, OAUTH_TOKEN_SECRET)
delimiter
self.sprockets = set()
delimiter
b = np.hstack(np.array(b))
delimiter
f.save()
delimiter
BaseHTTPRequestHandler.__init__(self, *args)
delimiter
df.reindex(df.b.abs().order().index)
delimiter
print(replace_item(lst, to_replace, replace_with))
delimiter
Table.append(temp)
delimiter
_func()
delimiter
d = dict((n, i) for i, n in enumerate(e[0] for e in l))
delimiter
print(line)
delimiter
result = urllib.request.urlopen(request)
delimiter
ipaddress.ip_address(ipv4invalid)
delimiter
plt.plot(b, a1)
delimiter
dfB = pd.DataFrame(B)
delimiter
lr.set_params(params)
delimiter
xlinear = np.linspace(a, b, num)
delimiter
x = np.arange(2)
delimiter
Console.Write(result)
delimiter
deleteli[i]
delimiter
print(a[:, (np.newaxis), :].shape)
delimiter
M = X * A + (W * B).T + Z * G
delimiter
my_generator.is_just_started
delimiter
start_time = time.time()
delimiter
signal.signal(signal.SIGALRM, inputTimeOutHandler)
delimiter
compact_ranges(comp)
delimiter
a.sort(numeric_compare)
delimiter
requests.get(uri)
delimiter
serial.Serial(dev, *args, **kwargs)
delimiter
fig.axes.get_xaxis().set_visible(False)
delimiter
d = {t.tag: {k: (v[0] if len(v) == 1 else v) for k, v in list(dd.items())}}
delimiter
DOT11_CIPHER_ALGO_WEP40 = 1
delimiter
print(df)
delimiter
cv2.circle(vis, (x2, y2), 2, col, -1)
delimiter
df.printSchema()
delimiter
Py_DECREF(mymodule)
delimiter
print(root.nodes.node[1].PCDATA)
delimiter
convert_to_dict(my_dict)
delimiter
sorted(strings)
delimiter
my_dict[k] = v
delimiter
self.root.after(527, self.readSensor)
delimiter
proc = Popen(cmd, shell=True, bufsize=1, stdout=PIPE)
delimiter
test_dict = {make_str(10000000): i for i in range(5)}
delimiter
A[:, :1] = x
delimiter
fig = plt.gcf()
delimiter
self.start_urls = get_start_urls()
delimiter
dmin = dist
delimiter
free(cfloats)
delimiter
then = datetime.now() - timedelta(hours=2)
delimiter
G.add_edge(1, 2)
delimiter
update_c = tf.assign(c, a.read_value() + b.read_value())
delimiter
z.close()
delimiter
plt.xlim((-limit, limit))
delimiter
fig = plt.figure()
delimiter
max(curr, subs, key=len)
delimiter
gevent.spawn(read_stream, p.stdout, stdout)
delimiter
self.func()
delimiter
random_frame = pd.DataFrame(x)
delimiter
frame.Show()
delimiter
get_object_or_404(queryset, pk=1)
delimiter
df
delimiter
yvalues = 0.1 + np.arange(len(ylabels))
delimiter
self.cls = cls
delimiter
content = resp.read()
delimiter
idx = np.where(indices < arr.shape, indices, clipping_value)
delimiter
fileobj.write(response.read())
delimiter
log.setLevel(logging.DEBUG)
delimiter
blobstore.delete([item.blob_key])
delimiter
imshow(Iopen)
delimiter
d = datetime.date(int(y), int(m), int(d))
delimiter
do_something_6()
delimiter
self.canvas.mpl_disconnect(self.cid)
delimiter
_SHGetFolderPath(0, csidl, 0, 0, path_buf)
delimiter
_Lappend(_normal(0, 1))
delimiter
random.shuffle(shuffled)
delimiter
self.buttonPanel2.Show(True)
delimiter
blank_image.paste(fluid128, (400, 0))
delimiter
datetime.datetime.now
delimiter
ax2.bar(dates, list(range(10, 20)))
delimiter
self._start_worker(pair)
delimiter
completeset2 = megalist[4:]
delimiter
print(node.render(Context()))
delimiter
difflib.get_close_matches
delimiter
f()
delimiter
print(value)
delimiter
sys.modules.update(old_modules)
delimiter
print(pizza.toppings.all())
delimiter
cam = Camera()
delimiter
datam = np.zeros_like(data)
delimiter
X, Y = np.meshgrid(x, y, copy=False)
delimiter
pprint.pprint(response)
delimiter
friendList = friendList.append(self)
delimiter
ax2.set_ylim(-5, 5)
delimiter
print(delta.days)
delimiter
reshaped_X = tf.reshape(X, [-1, 1])
delimiter
i = int(s, 8)
delimiter
thread1.join()
delimiter
l = [0, 2, 4, 5, 9]
delimiter
True, True, True, True, False, False, False, False, False
delimiter
mask = np.isfinite(lg)
delimiter
[True, True, True, True, True],
delimiter
print(df)
delimiter
c(a, b)
delimiter
suite = unittest.TestSuite()
delimiter
i += 2
delimiter
a = [list(i[1]) for i in itertools.groupby(data, key=lambda i: i == 0)]
delimiter
a[a == 0]
delimiter
label = Label(f, *args, **kwargs)
delimiter
data = csvfile.read()
delimiter
button2.configure(command=lambda widget=button2: DoSomething(widget))
delimiter
file_handles.append(open(file))
delimiter
json.dumps(object)
delimiter
con.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
delimiter
list2 = list(map(itemgetter(0), grouped))
delimiter
reverse(view_name, kwargs=kwargs, request=request, format=format)
delimiter
conn.send(finalLine)
delimiter
bias = tf.Variable(tf.constant(0.1, shape=[target_size]))
delimiter
root = tk.Tk()
delimiter
t.start()
delimiter
a[(i), :] = line.split()
delimiter
im = ax.imshow(dat, vmin=0, vmax=2)
delimiter
keys = [x for x, y in list(dic.items()) if y == maxx]
delimiter
w.mainloop()
delimiter
rotated = string[n:] + string[:n]
delimiter
foo()
delimiter
result, cursor, more = query.fetch_page(10)
delimiter
Ihmf = np.expm1(Iout)
delimiter
print(fmt.format(*row))
delimiter
print(line)
delimiter
self._running = False
delimiter
archive = py7zlib.Archive7z(fp)
delimiter
d_max = {k: max(d[k]) for k in d}
delimiter
app.run(processes=8)
delimiter
r = requests.get(send_url)
delimiter
houses_in_town = House.objects.filter(street__town__id=town_id)
delimiter
f(map(rec, iterable))
delimiter
can_delete = False
delimiter
value
delimiter
zs2 = scipy.interpolate.griddata(np.hstack((xs, ys)), zs, points)
delimiter
time.sleep(2)
delimiter
df = df.T
delimiter
plt.rcParams.update(params)
delimiter
self.__storage.append(p)
delimiter
data = f.read()
delimiter
hash(test(10)) == hash(test(10))
delimiter
stream.write(msg)
delimiter
application.listen(config.tornadoport)
delimiter
self.login()
delimiter
out = a[mask]
delimiter
fs = [(lambda y: lambda x: x + y)(i) for i in range(10)]
delimiter
stdin.flush()
delimiter
print(regx.split(string))
delimiter
b = a.groupby(level=0).cumsum().groupby(level=0).shift(1)
delimiter
ax2 = ax1.twinx()
delimiter
fout.write(line)
delimiter
process(m)
delimiter
r.status_code
delimiter
Base.metadata.create_all(e)
delimiter
f(1, 0, 1)
delimiter
print(i, rec_fib(i))
delimiter
index_list.sort(reverse=True, key=int)
delimiter
dupl.append(j)
delimiter
[i.number for i in li]
delimiter
nrng = np.arange(n)
delimiter
imgplot.set_clim(0.0, 0.7)
delimiter
substring in string_
delimiter
df
delimiter
metadata = MetaData(bind=engine)
delimiter
TemplateResponse(request, template_name, context)
delimiter
xlab.set_size(10)
delimiter
ylab.set_size(10)
delimiter
n = sum(1 for line in csv.reader(filename))
delimiter
G = nx.Graph()
delimiter
b = [2, 6, 4, 5, 6]
delimiter
myFunc()
delimiter
ax.set_xlabel(wrap(ax.get_xlabel()), rotation=90)
delimiter
y_err = np.array([random.random() for i in x])
delimiter
numpy_array_of_results = func(numpy_array_of_arguments)
delimiter
response
delimiter
now = datetime.datetime.now()
delimiter
li = [-1, -1, 2, 2, -1, 1, 1, 1, 1, 1, -1, -1]
delimiter
x, y = xs[i], ys[i]
delimiter
nx.draw_networkx_edge_labels(G, pos, labels=edge_labels)
delimiter
foo + bar
delimiter
SHAhash.update(hashlib.md5(buf).hexdigest())
delimiter
A = np.arange(0, 20.0)
delimiter
s[0]
delimiter
a = list(a)
delimiter
b.extend(c)
delimiter
np.clip(c, a, b)
delimiter
parser = ET.XMLParser()
delimiter
events.sort()
delimiter
name = models.CharField(max_length=255)
delimiter
a[0:5:1]
delimiter
msg.attach(part)
delimiter
print(a[0, 0])
delimiter
ax = pyplot.subplot(1, 1, 1)
delimiter
chambersinreactor, cardsdiscarded
delimiter
print([next(i2 if x else i1) for x in [0, 1, 0, 0, 1]])
delimiter
dev = pcap.lookupdev()
delimiter
MyConcreteClass()
delimiter
_singleton.foo_func()
delimiter
MyAbstractClass()
delimiter
task2 = threading.Thread(target=do_request)
delimiter
Hvalue = someoperation(Hnodes)
delimiter
smoothed = np.convolve(data, np.ones(10) / 10)
delimiter
rotated = list(reversed(zip(*original)))
delimiter
a.insert(0, a.pop(-1))
delimiter
not bool(search(strg))
delimiter
mylist = [True, True, False]
delimiter
df[col_zscore] = (df[col] - df[col].mean()) / df[col].std(ddof=0)
delimiter
type(a[1])
delimiter
request.query_string
delimiter
s = signal.signal(signal.SIGINT, signal.SIG_IGN)
delimiter
pickle.dump(object, f)
delimiter
fig1 = plt.figure()
delimiter
queryset = ModelName.objects.all()
delimiter
print(str(table))
delimiter
ordered_dict = OrderedDict((k, unordered_dict.get(k)) for k in df.Unique_id)
delimiter
result = _PySequence_IterSearch(seq, ob, PY_ITERSEARCH_CONTAINS)
delimiter
NULL
delimiter
this_mod = sys.modules[__name__]
delimiter
int(s)
delimiter
django.core.management.setup_environ(settings)
delimiter
check_matr(b, 0)
delimiter
self.increment()
delimiter
fig = plt.figure()
delimiter
{{group.users}}
delimiter
f(A)
delimiter
parse_dates = [[4, 5]],
delimiter
hxs = HtmlXPathSelector(response)
delimiter
self.assertEqual(1, 1)
delimiter
ans.append(letter)
delimiter
os.mkfifo(pipe_name)
delimiter
_PyUnicode_NONCOMPACT_DATA(op)
delimiter
result = getattr(self.contained, item)
delimiter
paths.append(split[2:-1])
delimiter
deletea[k]
delimiter
ax.set_zlim(0, 10)
delimiter
session = session()
delimiter
b = pandas.DataFrame(np.arange(1000, 1025, dtype=np.float16).reshape(5, 5))
delimiter
myFunc(2, 5)
delimiter
numpy.genfromtxt(*args, **kwargs)
delimiter
print(i)
delimiter
gobject.timeout_add(5000, set_mask, win)
delimiter
cbar.ax.tick_params(labelsize=5)
delimiter
[1]
delimiter
2 * a
delimiter
B[y:y + N, x:x + N]
delimiter
A = [0, 0, 0, 1, 0, 1]
delimiter
my_shelf[key] = globals()[key]
delimiter
permstr
delimiter
train_test_split(a, b)
delimiter
byte_array[i] = (val << 16 >> 8 & 16711680) >> 16
delimiter
self.textinput.bind(text=self.on_text)
delimiter
set_a - set_b == set_b - set_a
delimiter
InetAddress.getByName(IP)
delimiter
df.fillna(s)
delimiter
fig = plt.figure(figsize=(8, 6))
delimiter
my_dict = {k: some_func(k) for k in input_list}
delimiter
print(st[-m.start(1) - len(m.group(1)):-m.start(1)])
delimiter
proc.wait()
delimiter
results.extend(tmp_results)
delimiter
T = np.dot(V, U.T)
delimiter
QVariant()
delimiter
w, h = [int(x) for x in next(f).split()]
delimiter
i += 1
delimiter
db.BeginTrans()
delimiter
x = dict((row.SITE_NAME, row.LOOKUP_TABLE) for row in cursor)
delimiter
full_file_name = os.path.join(src, file_name)
delimiter
json.dump(dict(value=True), sys.stdout)
delimiter
output = proc.stdout.read()
delimiter
pca.fit(df)
delimiter
result = grouped.agg(combine_it)
delimiter
s = wx.BoxSizer(wx.HORIZONTAL)
delimiter
print(row[0 + i:chunckLen + i])
delimiter
asyncio.run_coroutine_threadsafe(coro, self.loop)
delimiter
d.utcoffset()
delimiter
generateFoos()
delimiter
output = scipy.signal.convolve(signal_in, h)
delimiter
numpy.all(x == x.T)
delimiter
f2 = [(2 * x) for x in range(100)]
delimiter
ori2cent = np.eye(4)
delimiter
zed = lambda : giveupthefunc()
delimiter
is_pipe = not isatty(stdin.fileno())
delimiter
driver = webdriver.Firefox()
delimiter
self.Count += 1
delimiter
GEOIP.country_name_by_addr(ip)
delimiter
np.int(x)
delimiter
cls.create_table()
delimiter
InitializeComponent()
delimiter
request = urllib.request.Request(url)
delimiter
print(my_data[x], my_data[x + y])
delimiter
new_x
delimiter
opener = urllib.request.OpenerDirector()
delimiter
temp = []
delimiter
items = [item for item in soup.contents if isinstance(item, bs4.Doctype)]
delimiter
result = df2.reindex(np.union1d(df1.index, df2.index))
delimiter
app = QApplication([])
delimiter
t.create()
delimiter
layout = QGridLayout(self)
delimiter
self.__dict__[name] = value
delimiter
previous_trace = inspect.trace()[1]
delimiter
set(A) - set(subset_of_A)
delimiter
fig = plt.figure()
delimiter
output.close()
delimiter
xdebug.remote_port = 9000
delimiter
me = os.getpid()
delimiter
pylab.imshow(arr)
delimiter
print(v)
delimiter
float(strg)
delimiter
plt.plot(np.arange(10, 1, -1) + i)
delimiter
data = np.arange(10, dtype=np.int)
delimiter
session.expunge_all()
delimiter
time.clock() - start
delimiter
opener = urllib.request.build_opener()
delimiter
shortcut.save()
delimiter
print(first16)
delimiter
ax.set_xticklabels(empty_string_labels)
delimiter
np.average(meanNumbers)
delimiter
sqlContext = SQLContext(sc)
delimiter
finish()
delimiter
self.sa = [l[2] for l in L]
delimiter
os.rmdir(dir)
delimiter
b.start()
delimiter
name = Column(String, primary_key=True)
delimiter
signal = np.cos(5 * np.pi * time) + np.cos(7 * np.pi * time)
delimiter
tagged.sort(lambda x, y: cmp(x[1], y[1]))
delimiter
dG.add_edge(word, next_word, weight=maxint - 1)
delimiter
print(list(fun(iterable)))
delimiter
list_common.append(a)
delimiter
loop.run_forever()
delimiter
conn.Open(dsn)
delimiter
Z.__init__(self)
delimiter
self._storage[key].add(word[len(key):])
delimiter
print(node.render(Context()))
delimiter
re.sub(pat, replace, txt)
delimiter
element = np.ones((5, 5)).astype(np.uint8)
delimiter
name = db.Column(db.String(255), primary_key=True)
delimiter
zf.write(modfile, os.path.relpath(modfile))
delimiter
Vx = np.array(X)
delimiter
w = list(s)
delimiter
self.im_data_lock.release()
delimiter
dict(dd)
delimiter
{}
delimiter
worksheet = workbook.add_worksheet()
delimiter
its = {k: iter(v) for k, v in list(mapping.items())}
delimiter
first, second = tee(f())
delimiter
dir(l1)
delimiter
Signature1 = 0
delimiter
np.random.seed(1001)
delimiter
z_dense_smooth_bisplrep = interp.bisplev(xvec, yvec, bisp_smooth).T
delimiter
img.putpalette(palette)
delimiter
twitter_token = settings.TWITTER_KEY,
delimiter
x = list(range(1, 10))
delimiter
reactor.stop()
delimiter
w2.set_keep_above(True)
delimiter
cb = plt.colorbar(s)
delimiter
print(data[index] == values)
delimiter
G.add_nodes_from(L2)
delimiter
old_name = settings.DATABASE_NAME
delimiter
data2 = data1.reset_index()
delimiter
piv = np.arange(m)
delimiter
req.send_response(200)
delimiter
dis.dis(foo)
delimiter
print(line)
delimiter
fig, ax = plt.subplots()
delimiter
dq.append(next(reader))
delimiter
self.setter(instance, self.name, value)
delimiter
loop_one = lambda seq: [(lambda el=el: el) for el in seq]
delimiter
im1.save(tilefilename, self.tiledriver)
delimiter
sorted(pairs)
delimiter
r = follow_redirections(r, s)
delimiter
fn()
delimiter
(0, 10, 11, 12, 14, 16) == 0, 10 - 12, 14, 16
delimiter
b = np.delete(a, np.s_[-1:], 1)
delimiter
strprime += str(x % 10)
delimiter
deletePoint.__init__
delimiter
min(a for sub in Q for a in sub)
delimiter
out = [float(f_interp(XX, YY)) for XX, YY in zip(X, Y)]
delimiter
oauth_response = urlfetch.fetch(url)
delimiter
print(months(11, 2010, 2, 2011))
delimiter
systemtest_1.py
delimiter
{k: list(v) for k, v in list(ret.items())}
delimiter
canvas.Canvas.save(self)
delimiter
len(lst) - i - 1
delimiter
Base.metadata.create_all(engine)
delimiter
total_length = sum(len(str(f.get())) for f in fields)
delimiter
hm.UnhookMouse()
delimiter
fheader = f.read()
delimiter
temp.append(0)
delimiter
day_generator = itertools.cycle(days)
delimiter
f.baz()
delimiter
False
delimiter
specgram(signal)
delimiter
arrayName.byteswap(True)
delimiter
s.feed(html)
delimiter
G.add_edge(2, 6)
delimiter
df.reindex(ind & ind2).join(df2.reindex(ind & ind2))
delimiter
fh.readline()
delimiter
self._age = value
delimiter
l2 = [4, 5, 6]
delimiter
my_table.add(tr([th(i, style=header_style) for i in data.columns]))
delimiter
sys.modules[themodname] = themod
delimiter
marshal.dump(g.__code__, funcfile)
delimiter
csv_w = csv.writer(out_file)
delimiter
primes = [x for x in primes if x == i or x % i]
delimiter
axes = plt.subplot(111)
delimiter
plt.xlim(0, 600)
delimiter
button.grid()
delimiter
x = np.linspace(0, 100, num)
delimiter
result[0], result[1]
delimiter
entity_manager.commit()
delimiter
sorted(set(x), key=x.index)
delimiter
my_data
delimiter
tb = traceback.format_exc()
delimiter
self._observers.append(callback)
delimiter
plus(n)
delimiter
ipList.append(str(IPAddress(ip)))
delimiter
True
delimiter
ax = plt.gca()
delimiter
cur = con.cursor()
delimiter
other = [x[:] for x in stuff]
delimiter
assert len(lst1) == len(lst2)
delimiter
ret.append(t)
delimiter
np.unique(np.concatenate(x))
delimiter
soup = BeautifulSoup(html)
delimiter
fig, ax = plt.subplots()
delimiter
np.fill_diagonal(mask, 0)
delimiter
fig.set_size_inches(w, h)
delimiter
Grid.rowconfigure(grid, y, weight=1)
delimiter
a, b
delimiter
view.setModel(model)
delimiter
self._check_size_limit()
delimiter
print(map(timestamp, fridays))
delimiter
other_field = form._fields.get(self.other_field_name)
delimiter
np.equal(np.mod(x, 1), 0)
delimiter
con.row_factory = my_row_factory
delimiter
[(k, sum(1 for _ in i)) for k, i in it.groupby(L)]
delimiter
mask = np.ma.masked_array(a)
delimiter
id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
delimiter
twitter = Twython(APP_KEY, APP_SECRET)
delimiter
ax = plt.gcf().axes[0]
delimiter
True
delimiter
one_week = 7 * 24 * 60 * 60
delimiter
a = [1, 2]
delimiter
what_bson_type([1, 2])
delimiter
start_time = time.time() + 20
delimiter
ticm = time.clock()
delimiter
count += 1
delimiter
s = pd.Series([True, True, False, True])
delimiter
print(formatdate(timestamp))
delimiter
zf.filelist.append(zinfo)
delimiter
hash((self.name, self.location))
delimiter
cursor = connection.cursor()
delimiter
item = myset.pop()
delimiter
Ml
delimiter
print(df)
delimiter
doSomethingWith(instance)
delimiter
self.mygraph.set_xydata(self.xaxis, self.data[-1])
delimiter
ns = parser.parse_args()
delimiter
new_dic = defaultdict(dict)
delimiter
flipcase | othercommand > ouput.txt
delimiter
es = ES.Elasticsearch()
delimiter
good, bad = [], []
delimiter
f = plt.figure()
delimiter
self._popup.destroy()
delimiter
result = []
delimiter
df
delimiter
driver = webdriver.Firefox()
delimiter
print(string)
delimiter
plt.show()
delimiter
new_list2.append(i[1])
delimiter
htmlFile = file.read()
delimiter
print(hex(id(v)))
delimiter
master_list = master.readlines()[1:]
delimiter
prof = webdriver.FirefoxProfile()
delimiter
popt2, pcov = curve_fit(model, cupper[:, (1)], f2)
delimiter
x.append(x_center)
delimiter
y = array([1, 1, 1, NaN, NaN, 2, 2, NaN, 0])
delimiter
s.add(y)
delimiter
maxlens = map(len, (max(el, key=len) for el in zip(*x)))
delimiter
group = map(itemgetter(1), g)
delimiter
a = numpy.random.randint(100, size=100).reshape((10, 10))
delimiter
n, mod = divmod(n - len(first), len(digits))
delimiter
self.assertTrue(ip2.ip in result_ips)
delimiter
Dummy().a
delimiter
(i - j) % 9 == 0
delimiter
[c for c in foo if c not in temp and (temp.add(c) or True)]
delimiter
trainingData = rawData.map(parseCsvLine)
delimiter
u, v = np.mgrid[0:2 * np.pi:20j, 0:np.pi:10j]
delimiter
self.layout = QtGui.QVBoxLayout(self)
delimiter
rpy2.robjects.conversion.py2ri = conversion_pydataframe
delimiter
g._group_actions.sort(key=lambda x: x.dest)
delimiter
print(sorted(L, key=Key))
delimiter
print(floor(d * 100) / 100)
delimiter
queue.append([start])
delimiter
out.write(result)
delimiter
primes[:bisect(primes, n)]
delimiter
test.main()
delimiter
pool.join()
delimiter
c = func(*args, **kwargs)
delimiter
answer += s[:-1]
delimiter
sql.add(customer2)
delimiter
self.__age
delimiter
out = list(df.b[final_mask])
delimiter
synsets = wn.synsets(word)
delimiter
u = set.intersection(*setlist)
delimiter
u = random.uniform(0, 1)
delimiter
deleteseq[index]
delimiter
x = np.array([-2, -1, 0, 1, 2])
delimiter
print(diff.total_seconds())
delimiter
state.commands.update(callables)
delimiter
words = words[:]
delimiter
txt.set_color(line.get_color())
delimiter
df_fmt = pd.DataFrame([fmt], columns=df.columns)
delimiter
max_logins = db.session.query(db.func.max(User.numLogins)).scalar()
delimiter
pdb.set_trace()
delimiter
f.config(width=5)
delimiter
8
delimiter
bar = Bar.objects.get(pk=target_pk)
delimiter
f.write(chunk)
delimiter
today = datetime.now()
delimiter
x = np.random.normal(size=(number,))
delimiter
uniq[index.argsort()]
delimiter
[factorial(n) for n in nums]
delimiter
zip(*iterators)
delimiter
arr[left:right]
delimiter
metadata = MetaData()
delimiter
ss.genextreme.fit(data, floc=0)
delimiter
drives = db.ReferenceProperty(reference_class=Car)
delimiter
cls.num += 1
delimiter
deactivate
delimiter
dict(zip(list(row.keys()), row))
delimiter
ax = plt.subplot(111)
delimiter
wrapper
delimiter
application = get_wsgi_application()
delimiter
values = numpy.random.randint(6, size=(6, 10))
delimiter
cv.ReleaseCapture(cap)
delimiter
df.dtypes
delimiter
c = dbconn.cursor()
delimiter
y = keypoints[i].pt[1]
delimiter
source.clojure
delimiter
source.cmake
delimiter
source.coffee
delimiter
source.disasm
delimiter
source.dockerfile
delimiter
source.dosbatch
delimiter
source.erlang
delimiter
source.gdbregs
delimiter
source.gradle
delimiter
source.groovy
delimiter
source.haskell
delimiter
a[ix_(Xinds, Y2inds)]
delimiter
func(that, session, *args, **kwargs)
delimiter
old_settings = termios.tcgetattr(fd)
delimiter
rstring = arr.astype(numpy.uint16).tostring()
delimiter
event_box.set_border_width(10)
delimiter
ws.insert_bitmap(file_out, 0, 0)
delimiter
image[..., (0)] = np.minimum(image[..., (0)], threshold)
delimiter
cmyk_im
delimiter
dictionary = json.loads(data.getvalue())
delimiter
mults.append(int(np.ceil(inShape[i] / finalShape[i])))
delimiter
plt.bar([1, 2], [4, 5])
delimiter
root = Tk()
delimiter
CV_Assert(img.channels() == 1)
delimiter
entryFrame = Tkinter.Frame(mainFrame, width=454, height=20)
delimiter
print(compare(expand(a)))
delimiter
xml.writexml(out)
delimiter
step = (end - start) / (N - 1)
delimiter
_.shape
delimiter
f.close()
delimiter
x = float(sys.argv[1])
delimiter
inspect.getsource(f)
delimiter
fig.show()
delimiter
fig, ax = plt.subplots(1, 1)
delimiter
frame.grid_columnconfigure(1, weight=1)
delimiter
s = requests.session()
delimiter
df.dtypes
delimiter
myfuncs[0]()
delimiter
interned = AwfulHackToGetTheInternedDict()
delimiter
xyz = np.zeros(x.shape, dtype=dt)
delimiter
tuple(h - t for h, t in zip(head, tail))
delimiter
next_emitted.append(name)
delimiter
self.stepsize = stepsize
delimiter
inspect.getmembers(Foo, inspect.ismethod)
delimiter
x1 = x[:, 1:-2]
delimiter
k.set_contents_from_file(resized_photo)
delimiter
contents = urllib.request.urlopen(request).read()
delimiter
self.scrollToItem(self.item(visible.row(), column))
delimiter
print(enumerate.__doc__)
delimiter
u = array([array(x) for x in set(tuple(x) for x in input)])
delimiter
turtle.begin_fill()
delimiter
list(g)
delimiter
is_global = remote_conn.recv(1024)
delimiter
mat_csr[(idxs), :] = 2.0
delimiter
self.server.server_close()
delimiter
df1.shape
delimiter
do_something()
delimiter
processed_columns = [x for i, x in enumerate(columns) if not_all_zero[i]]
delimiter
gcc
delimiter
cmake
delimiter
setting2 = somesetting
delimiter
print(sum(x ** 2 for x in lst if x % 2 == 0))
delimiter
getFoos()
delimiter
time.sleep(5)
delimiter
min_value = min(new_array)
delimiter
df = df[df[c].isin(df[c].value_counts()[df[c].value_counts() > m].index)]
delimiter
row.append(token)
delimiter
window = gtk.Window()
delimiter
lower = tuple(x - 1 for x in lower)
delimiter
df2.loc[1:] = [list(s1), list(s2)]
delimiter
long_df = wide_df.stack().stack().stack()
delimiter
keys.append(k)
delimiter
y = numpy.array([2.56, 4.79, 6.21])
delimiter
df.index = df.index[::-1]
delimiter
br = mechanize.Browser()
delimiter
updatebins(bins, binsize, x)
delimiter
f = lambda i=i: i
delimiter
gtk.main()
delimiter
a = a - 1
delimiter
deleteglobals()[name]
delimiter
[n, m]
delimiter
full_path = os.path.join(dirpath, filename)
delimiter
x509 = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_ASN1, der)
delimiter
f = pd.read_csv(file, index_col=0)
delimiter
ob.stackoverflow(2)
delimiter
q = queue.Queue()
delimiter
result
delimiter
x * x
delimiter
f
delimiter
c = np.vstack(b)
delimiter
start = time.time()
delimiter
format(value, spec)
delimiter
result = f(*args, **kwds)
delimiter
self.client.close()
delimiter
tableWidget.setColumnCount(len(entries[0]))
delimiter
root = etree.parse(f, parser=parser)
delimiter
d = mat.shape[1]
delimiter
z = np.zeros((2, 1), dtype=int64)
delimiter
records = csv.DictReader(f)
delimiter
ax.scatter(x1, y1, s=100, lw=0, color=[1.0, alpha, alpha])
delimiter
[0.0, 1.0, 0.0],
delimiter
x.sort(key=custom_key)
delimiter
zipfile_ob = zipfile.ZipFile(file_like_object)
delimiter
thread2.start()
delimiter
letters.remove(chr(letter))
delimiter
task.interrupt()
delimiter
print([(key, median(val)) for key, val in list(data_dict.items())])
delimiter
ax.set_xlim(-2, 2)
delimiter
termios.tcsetattr(self.fd, termios.TCSAFLUSH, self.old_term)
delimiter
a.dot(b)
delimiter
renWinL.AddRenderer(renL)
delimiter
self.ax = self.fig.add_subplot(111)
delimiter
pool = multiprocessing.Pool(4)
delimiter
self.f.do_it()
delimiter
a[2:4, 2:4] = 1
delimiter
log_file.write(line)
delimiter
sum((i.time_spent for i in self.intervals), timedelta(0))
delimiter
cv.SetData(image, tiff.tostring())
delimiter
do_something(line)
delimiter
c = tensordot(a, b, axes=(0, 0))
delimiter
self.thread.join()
delimiter
print(url)
delimiter
li = st2.split()
delimiter
_run_finalizers(0)
delimiter
n = len(G.nodes())
delimiter
sorted(list(range(len(a))), key=a.__getitem__)
delimiter
logging.getLogger().addHandler(logChannel)
delimiter
df
delimiter
form = ForgotPassword(data=request.POST)
delimiter
d(10) ** d(10) ** d(10)
delimiter
dict(zip(a.names, list(a)))
delimiter
urllib.request.build_opener(proxy_handler, proxy_auth_handler)
delimiter
ax.semilogy(x)
delimiter
n
delimiter
curs = orcl.cursor()
delimiter
mylist = list(d.values())
delimiter
assert some_mock_popen.result == result
delimiter
HTML_with_style(df.head(), style)
delimiter
regex = re.compile(pattern, flags=re.MULTILINE | re.DOTALL)
delimiter
print(list(makerange(s)))
delimiter
dict(keyValList)
delimiter
self._data.columns.size
delimiter
[0, 4, 5, 1],
delimiter
Dx = cv2.Sobel(image, cv2.CV_8UC1, 1, 0)
delimiter
gtk.main_quit()
delimiter
fp.seek(i)
delimiter
print(line)
delimiter
node = node.getNext()
delimiter
l2 = l[:c_index]
delimiter
y_stds = np.array([np.std(y[x == u]) for u in x_unique])
delimiter
self.data.append(r)
delimiter
turtle.fillcolor(color)
delimiter
m.Blit(0, 0, w, h, s, 0, 0)
delimiter
a, b = next(g)
delimiter
image = np.fromstring(im_str, np.uint8).reshape(h, w, nb_planes)
delimiter
cursorObj.connection.commit()
delimiter
dict(zip(a.names, map(list, list(a))))
delimiter
help(np.core._dotblas)
delimiter
print(twrv.join())
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
groups = groupby(sorted_input, key=itemgetter(1))
delimiter
xx, yy = np.meshgrid(np.linspace(2000, 2200, 10), np.linspace(540, 740, 10))
delimiter
B = [1, 2]
delimiter
print(df.iloc[(0), :])
delimiter
count += 1
delimiter
PyObject * PyEval_GetGlobals()
delimiter
csv_writer = csv.writer(my_new_list)
delimiter
inlines = [BookInline]
delimiter
print([sum(aa[i:i + w]) for i in range(len(a))])
delimiter
request.end()
delimiter
list(range(args[0], args[1], 1))
delimiter
sheet.write(cell, value, cell_format)
delimiter
_draw_point(i, j - 1, fade_amount_i)
delimiter
self.helpers = helpers
delimiter
k.set_contents_from_string(out_im2.getvalue())
delimiter
string_numbers = contents.split()
delimiter
print(enclosing)
delimiter
root = tree.getroot()
delimiter
connection = httplib.HTTPConnection(req.get_host())
delimiter
slicevol = np.diff(xlinear)
delimiter
delattr(instance, self.name)
delimiter
[0, 1, 2, -5, 4, 5, 6, 7, 8, 9]
delimiter
specgram(signal)
delimiter
mycoll.insert(stop_dict)
delimiter
outputStream.close()
delimiter
iter(input)
delimiter
np.all(z == x)
delimiter
gaps = set(str(i).zfill(7) for i in range(1, n + 1)) - set(seq)
delimiter
profile = UserProfile.objects.get(user=request.user)
delimiter
sheet.set_clip(pygame.Rect(sprt_rect_x, sprt_rect_y, len_sprt_x, len_sprt_y))
delimiter
print(line)
delimiter
print(roundPartial(9.75, 0.1))
delimiter
print(roundPartial(9.76, 0.1))
delimiter
plt.xlabel(ax1_label)
delimiter
lxml.html.document_fromstring(e)
delimiter
simulate(image, text)
delimiter
affected_count = cursor.execute(sql_insert, (id, filename))
delimiter
d[k] = v.lower()
delimiter
print(e)
delimiter
self.setCellWidget(row, col, image)
delimiter
csr_matrix(coo)
delimiter
pl.yticks(np.linspace(0.0, 1.0, 11, endpoint=True))
delimiter
plt.plot(yvalue)
delimiter
sleep(5)
delimiter
file.seek(-count, 1)
delimiter
plt.show(block=False)
delimiter
np.cos(theta, out=x[:, (0)])
delimiter
threads = [threading.Thread(target=worker) for _i in range(20)]
delimiter
script2.run(filename)
delimiter
pool.join()
delimiter
a = np.arange(10).reshape(2, 5)
delimiter
round_to(n, 0.05)
delimiter
dic[k].append(v)
delimiter
print(x1.dtype, x1.nbytes)
delimiter
d[k].append(v)
delimiter
self.num_vertices = self.num_lines * 2
delimiter
deleteself.dictionary[key]
delimiter
w.writerow(list(somedict.keys()))
delimiter
results = Model.objects.filter(pk__in=pks)
delimiter
writer.writerow(fields)
delimiter
twitter = Twython(APP_KEY, APP_SECRET)
delimiter
d = {}
delimiter
m_1.append(line)
delimiter
contents = sourceFile.read(BLOCKSIZE)
delimiter
self.fp2.close()
delimiter
ang2 = angle(sx2[iseg2], sy2[iseg2])
delimiter
lines = list(reader)
delimiter
np.array([[1, 0], [0, 1]]).__array_priority__
delimiter
x = np.array([1, 2, 0, -2])
delimiter
monthrange(2012, 2)
delimiter
freeMem.argtypes = [ctypes.c_void_p]
delimiter
sheet = workbook.sheet_by_index(0)
delimiter
self.button = []
delimiter
f.write(att.content)
delimiter
now.microsecond
delimiter
print(sp.pixel(0, 0))
delimiter
rows = cur.fetchall()
delimiter
self.lda[bow]
delimiter
DOT11_CIPHER_ALGO_TKIP = 2
delimiter
inputs.append(conn)
delimiter
name = Column(String(64), nullable=False)
delimiter
posts = Post.query.all()
delimiter
f(*args, **kwargs)
delimiter
entryDate = ensure_datetime(result[5])
delimiter
np.array(-0.0) == np.array(+0.0)
delimiter
big_table[nchunks].update({hash: file.filename})
delimiter
self.process.kill()
delimiter
imframe = im.copy()
delimiter
nextelem = li[idx]
delimiter
wr = csv.writer(your_csv_file, quoting=csv.QUOTE_ALL)
delimiter
zip(A, cycle(B))
delimiter
y_range = list(range(-5, 6))
delimiter
began = time.time()
delimiter
app = create_app()
delimiter
non_blank_lines = (line.strip() for line in fd if line.strip())
delimiter
np.apply_along_axis(wrapper, axis, F)
delimiter
queue.close()
delimiter
shpinfo.append(shapedict)
delimiter
points.set_data(x_c, y_c)
delimiter
y.__reduce__()[1]
delimiter
line = sys.stdin.readline()
delimiter
c[2]
delimiter
path, folder = os.path.split(path)
delimiter
todays_files.append(original_file)
delimiter
hbox = QHBoxLayout()
delimiter
x = 2
delimiter
A = A.apply(np.sort, axis=1)
delimiter
self.CalculatePopularity()
delimiter
print(item.name, item.birthday)
delimiter
assert len(kw) == 1
delimiter
sum_sum_digit(sum_)
delimiter
root.destroy()
delimiter
self.mainFrame().load(QUrl(url))
delimiter
print(sc2().get_subclass_name())
delimiter
df.dtypes
delimiter
list(dic.items())
delimiter
p = figure(plot_width=400, plot_height=400)
delimiter
show()
delimiter
ACTIONS = {ONE: value1, TWO: value2}
delimiter
writer.save()
delimiter
{{page.title}}
delimiter
result = collections.defaultdict(int)
delimiter
[rand_vector() for _ in range(length)]
delimiter
self.response.out.write(f.read())
delimiter
self.allowed_domains.remove(hostname)
delimiter
sector_el = [x[1] for x in remaining]
delimiter
a = A()
delimiter
all(x[0] == y for y in x)
delimiter
self.stdin_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
plt.figure()
delimiter
updated = request.GET.copy()
delimiter
yl = list(y)
delimiter
simplejson.load(f)
delimiter
grid_sizer_1.Add(self.tree_ctrl_1, 1, wx.EXPAND, 0)
delimiter
main_loop.start()
delimiter
objects = InheritanceManager()
delimiter
func()
delimiter
new_name()
delimiter
print(hit.contents[6].strip())
delimiter
plt.figure()
delimiter
np.isfinite(diff_images).all()
delimiter
mock_mail_obj = mock.Mock()
delimiter
b = np.array([0, 1, 0])
delimiter
yi = np.array([0.0, 0.5, 1.0])
delimiter
value[2:4]
delimiter
alltests = unittest.TestSuite()
delimiter
np.diagonal(a.dot(b))
delimiter
stop = np.where(A == T2)[0]
delimiter
ax = np.histogram2d(x_data, y_data, bins=bins)
delimiter
v = enumerate(printmylist(mylist))
delimiter
out = np.split(sorted_a, shift_idx)
delimiter
print(b[0])
delimiter
[4, 5, 6, 7],
delimiter
application = app.wsgifunc()
delimiter
mylist = []
delimiter
p = figure(x_range=(0, 1), y_range=(0, 1))
delimiter
reader = PdfReader(input_file)
delimiter
self.do_open(httplib.HTTPConnection, req)
delimiter
os.umask(oldmask)
delimiter
(x >= 0).sum()
delimiter
np.argmax(aa > 5)
delimiter
s = str(a).zfill(prec + 1)
delimiter
self.coconut = coconut
delimiter
base64.b64decode(data[1])
delimiter
row_sums = numpy.zeros_like(img)
delimiter
extmodule.override()
delimiter
self.c.config(width=w, height=h)
delimiter
input_file = args[0]
delimiter
p = multiprocessing.Pool()
delimiter
tpl = simplejson.loads(jsn, object_hook=_from_json)
delimiter
cmdutils
delimiter
assert max_product([]) == 1
delimiter
json.dumps(f(*args, **kwargs))
delimiter
plt.xticks(np.arange(0.5, len(df.columns), 1), df.columns)
delimiter
writer.writerow(row)
delimiter
self.i += 1
delimiter
cr.set_line_width(10)
delimiter
layout.addWidget(self._listview)
delimiter
unknown = set(self.initial_data.keys()) - set(self.fields.keys())
delimiter
p.start()
delimiter
obj.__class__.set_x_class(15)
delimiter
gc.set_debug(gc.DEBUG_UNCOLLECTABLE | gc.DEBUG_COLLECTABLE | gc.DEBUG_STATS)
delimiter
session2.merge(obj1)
delimiter
title[::-1]
delimiter
pd.Series([timedelta(int(i)) for i in d])
delimiter
new_x = np.linspace(x.min(), x.max(), new_length)
delimiter
Y = Y[list(range(n / 2))] / max(Y[list(range(n / 2))])
delimiter
print(str(newdom))
delimiter
[(mappend(str(x)) if y else unmappend(str(x))) for x, y in d.items()]
delimiter
request = urllib.request.Request(url)
delimiter
tmpdir = str(tmpdir)
delimiter
print(r.findall(line))
delimiter
x.append(i * 2)
delimiter
print(pool.map(f, list(range(10))))
delimiter
queue.get()
delimiter
min_idxs = [idx for idx, val in enumerate(a) if val == min_val]
delimiter
xi, yi = np.meshgrid(xi, yi)
delimiter
mask = np.isnan(arr)
delimiter
nx.draw_networkx(gr)
delimiter
db.init_app(app)
delimiter
fig, ax = plt.subplots()
delimiter
x = np.arange(10, 1, -1)
delimiter
print(link.tail)
delimiter
func = CALLBACK(lambda x: myPythonCallback(x))
delimiter
stack.append(msg)
delimiter
dataAC = ifft(dataFT * numpy.conjugate(dataFT), axis=1).real
delimiter
resp_dict = json.loads(resp_str)
delimiter
c = Counter(item for dct in my_list for item in list(dct.items()))
delimiter
[item for items in zip(first, second) for item in items]
delimiter
print(parser.format_help())
delimiter
data = {k: [v] for k, v in list(dr.next().items())}
delimiter
c._Z15writePixelsRectP8JoxColoriiii(data_array, 0, 0, WIDTH, HEIGHT)
delimiter
os.stat(fullname).st_ctime
delimiter
queue.join()
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
self.progress_bar_lock.release()
delimiter
a, b = zip(*c)
delimiter
cd = 1097 * math.pow(ei, 4) / 512
delimiter
hi_file.write(hi_web.read())
delimiter
self.rematch = re.match(regexp, self.matchstring)
delimiter
d = {}
delimiter
self.ClickedLB2.move(200, 150)
delimiter
cs = axs[0].contourf(X, Y, zdata, levels=levels)
delimiter
QWebView.__init__(self)
delimiter
floatlist = [random.random() for _ in range(10 ** 5)]
delimiter
print(link.string)
delimiter
t.cancel()
delimiter
self.parser = create_parser()
delimiter
b = a + b
delimiter
L = [1, 2, 1, 1]
delimiter
[a.pop(2), a][1]
delimiter
mock_locations = Location.objects.none()
delimiter
plt.clf()
delimiter
keys = {k[0]: (0) for k in list(d.keys())}
delimiter
self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
delimiter
fig, ax = plt.subplots()
delimiter
sorted(list(kwargs.items()), key=itemgetter(0))
delimiter
line = line.rstrip()
delimiter
buffer = buffer_from_memory(y, 8 * array_length)
delimiter
filehandler.close()
delimiter
request = self.initialize_request(request, *args, **kwargs)
delimiter
[7500, 7500]
delimiter
url = models.CharField(max_length=255, unique=True)
delimiter
self.l = iter(l)
delimiter
dense2 = gensim.matutils.sparse2full(lda_vec2, lda.num_topics)
delimiter
numpy_fillna(data)
delimiter
pool = Pool()
delimiter
imshow(im)
delimiter
findAll(tagname, recursive=False)
delimiter
print(fmtpairs(list(string.ascii_uppercase)))
delimiter
a[perm]
delimiter
parsed_output.close()
delimiter
start, end = datetime(2015, 11, 2), datetime(2015, 12, 14)
delimiter
parser = PullSuggestions()
delimiter
self.assert_equal(mocked_handler.call_count, 1)
delimiter
notebook = wx.Notebook(self)
delimiter
content = gzip.GzipFile(fileobj=StringIO(content_raw)).read()
delimiter
hash((self.value, self.meta))
delimiter
temp = np.argpartition(-test, 4)
delimiter
out = np.array([f(i) for i in range(1, n - 1)])
delimiter
x.a
delimiter
result = ast.literal_eval(response[1])
delimiter
inverted_image = PIL.ImageOps.invert(rgb_image)
delimiter
data = json.load(json_data)
delimiter
[0, 0, 0, 0, 0],
delimiter
self.foo()
delimiter
out[i] = np.count_nonzero(dists < Rsq)
delimiter
ax.axis([-4, 4, -4, 4])
delimiter
[1, 1, 1]
delimiter
ii = np.random.randint(0, 10, (a.shape[0],))
delimiter
self.flush()
delimiter
window.show_all()
delimiter
self.session.flush()
delimiter
person = models.ForeignKey(Person)
delimiter
fig = plt.figure()
delimiter
self.__dict__.update(dict(zip(properties, pslList)))
delimiter
QtWidgets.QMainWindow.__init__(self)
delimiter
result_array = f(A)
delimiter
G = nx.DiGraph()
delimiter
heappush(heap, item)
delimiter
np.random.seed(42)
delimiter
handler = logging.StreamHandler(sys.stderr)
delimiter
self.successors.remove(other)
delimiter
self.viewport.add(self.img)
delimiter
len(get_file_contents(filename).splitlines())
delimiter
upform = UserProfileForm(instance=user.get_profile())
delimiter
x[np.logical_and(*b)]
delimiter
self.func(*args, **kwargs)
delimiter
dict(id=self.identity, data=self.data)
delimiter
my_svc.fit(x_training, y_trainc)
delimiter
s[6]
delimiter
assert self.test_user.is_active
delimiter
loginid = line[1].strip()
delimiter
y, x = np.mgrid[-5:5:100j, -5:5:100j]
delimiter
df = pd.DataFrame(data)
delimiter
my_list[0] = my_list[2] = my_list[0] + my_list[2]
delimiter
triplets[iT].append(listB[0])
delimiter
ratingsum = sum(ratings)
delimiter
results = [data[i:i + n] for i in range(0, len(data), n)]
delimiter
session.add(c1)
delimiter
user = models.ForeignKey(User)
delimiter
worksheet.set_column(idx, idx, max_len)
delimiter
sess.run(init)
delimiter
id = Column(Integer, primary_key=True)
delimiter
f()
delimiter
sys.exit(1)
delimiter
ax = fig.add_subplot(111)
delimiter
wrapper(**mydict)
delimiter
triang = tri.Triangulation(x, y)
delimiter
itertools.zip_longest(fillvalue=fillvalue, *((iter(itr),) * n))
delimiter
t.hour * 60 * 60 + t.minute * 60 + t.second
delimiter
A[j] = (A[j] - factor * A[i]) % q
delimiter
k = list(d.keys())
delimiter
a[0][0]
delimiter
path = os.path.abspath(path)
delimiter
concatenation.append(selection.pop())
delimiter
y = ax.get_yaxis().get_clip_box().y1
delimiter
b_o = tf.Variable(tf.random_normal([input_size], stddev=0.01))
delimiter
dir(x)
delimiter
print(np.all(x2[find_map(x1, x2)] == x1))
delimiter
pl.show()
delimiter
endfor
delimiter
time.sleep(1.0)
delimiter
log.Date = pd.to_datetime(log.Date)
delimiter
random.uniform(0.1, 2.7)
delimiter
queue.put(line)
delimiter
sum(coeff / (i + 1) for i, coeff in enumerate(reversed(coeffs)))
delimiter
HttpResponseRedirect(post_url)
delimiter
logging.basicConfig(filename=LOG_FILENAME, level=logging.DEBUG)
delimiter
display.display(pl.gcf())
delimiter
result.append(i)
delimiter
form = UserprofileForm()
delimiter
rowPosition = self.table.rowCount()
delimiter
self.root = logging.getLogger()
delimiter
print(pkl)
delimiter
surf = pg.transform.rotate(surf, -1)
delimiter
slice_coords_by_x(arr, xmin=2, xmax=4)
delimiter
width, height = img.size
delimiter
char = ord(char)
delimiter
client = app.test_client()
delimiter
form = MyForm()
delimiter
frame.Show(False)
delimiter
bool(self.match)
delimiter
output_file.write(l)
delimiter
seen = set()
delimiter
next(self)
delimiter
w = np.sqrt(6 * (a + c - np.sqrt(b ** 2 + (a - c) ** 2)))
delimiter
a.sort()
delimiter
df
delimiter
print(self.recv(8192))
delimiter
(d.day - 1) // 7 + 1
delimiter
el2.extend([numpy.nan] * (len2 - len(el2)))
delimiter
m.groups()
delimiter
self.command_table[command]()
delimiter
np.exp(exp_A, out=exp_A)
delimiter
str(x)
delimiter
xx, yy = numpy.mgrid[:200, :200]
delimiter
index = dict(zip(lis, list(range(len(lis)))))
delimiter
html = template.render(context)
delimiter
SetValue(reg, pythonkey, REG_SZ, pythonpath)
delimiter
min(alist, key=lambda x: abs(x - target))
delimiter
output = popen.stdout.read()
delimiter
sys.path.insert(0, pth)
delimiter
down.append(up.pop())
delimiter
add_to_the_class < AnotherClass > ()
delimiter
HttpResponse(t.render(c))
delimiter
arr = np.arange(10)
delimiter
NotImplementedError
delimiter
lst = map(int, str(num))
delimiter
[a], [b]
delimiter
self.children.append(node)
delimiter
y = np.rollaxis(y, -1)
delimiter
a + a
delimiter
print(f(2))
delimiter
num_files = float(len(filenames))
delimiter
unittest.TestCase.__init__(self, methodName)
delimiter
xs = np.linspace(0, 2 * np.pi, 25)
delimiter
second_array = array(FFnetlayer[1::2])
delimiter
self._init_extra(*args, **kwargs)
delimiter
thelist = list(genreDictionary.items())
delimiter
cpp.MyClass * _obj
delimiter
list(group_660.values())
delimiter
gb.count()
delimiter
list1[i] = v
delimiter
map.plot()
delimiter
[to_nltk_tree(sent.root).pretty_print() for sent in doc.sents]
delimiter
self.ax.set_ylim(ymin, ymax)
delimiter
listmix.TextEditMixin.__init__(self)
delimiter
output = proc.communicate()[0]
delimiter
lines = f.readlines()
delimiter
rolled = np.roll(y, 1, axis=1)
delimiter
gc.disable()
delimiter
min_distance = distance(min_pair)
delimiter
itertools.product(iterable, repeat=2)
delimiter
x.columns = x.columns.droplevel(0)
delimiter
str(bin(7))
delimiter
Counter(k for k, g in groupby(strs))
delimiter
conn = urllib.request.urlopen(url)
delimiter
ActionChains(context.browser).send_keys(Keys.ENTER).perform()
delimiter
df = pd.DataFrame()
delimiter
unittest.TextTestRunner(failfast=True).run(suite)
delimiter
thread.join()
delimiter
linesamples = set()
delimiter
title_tag.string
delimiter
a.append(i)
delimiter
result = [C for C in with_distances if C[0] < limit]
delimiter
my_obj_back = pickle.loads(base64.b64decode(serialized_str))
delimiter
main()
delimiter
Queue.get(self, False)
delimiter
player_thread.start()
delimiter
arr_list = arr.tolist()
delimiter
print(s)
delimiter
plt.show()
delimiter
group.append(line)
delimiter
response
delimiter
client.send(data)
delimiter
find_green_times(sg_status)
delimiter
a = numpy.recarray(num_stars, dtype=dtype)
delimiter
str(path)
delimiter
print(x)
delimiter
DEBUG = True
delimiter
yag.send(contents=message)
delimiter
already_inserted = all(bitfield)
delimiter
ftpobj.cwd(dirname.name)
delimiter
p.i, p
delimiter
timedelta(**dict((key, int(value)) for key, value in list(d.items())))
delimiter
last_array = csc_matrix((values, (row_ind, col_ind)), shape=(211148, 211148))
delimiter
WeakList(list(self) * n)
delimiter
binary_search([1, 5, 8, 10], 5)
delimiter
suite = unittest.TestSuite()
delimiter
stream.close()
delimiter
mask = (df[0] == 0).cumsum().cumsum()
delimiter
f
delimiter
allocate(array(gridsize, gridsize, gridsize))
delimiter
bynweekday + byweekday
delimiter
len(cls.__instance)
delimiter
p = Person()
delimiter
nose.run()
delimiter
df
delimiter
df2
delimiter
session.add(x)
delimiter
mean_data = np.append(mean_data, [ur, ua, np.mean(data[samepoints, -1])])
delimiter
dc.SetBrush(wx.Brush(wx.Color(0, 0, 0), wx.TRANSPARENT))
delimiter
output.write(output_compressor.flush())
delimiter
bokeh.io.output_notebook()
delimiter
print(u, repr(u))
delimiter
[0.0, 0.0, 0.0, 0.0],
delimiter
self._value
delimiter
decompressor = bz2.BZ2Decompressor()
delimiter
commatoze(s, p + 1)
delimiter
list[0]
delimiter
p.close()
delimiter
logger = logging.getLogger(record.name)
delimiter
G = nx.DiGraph()
delimiter
theArray.tofile(f)
delimiter
img2y = img2.shape[0]
delimiter
exit(1)
delimiter
self._close_all_temp_files()
delimiter
str(self.__dict__)
delimiter
y_c = np.atleast_2d(func(x_c))
delimiter
stdscr.addstr(str(i), curses.color_pair(i))
delimiter
s[start:end]
delimiter
f2.Show()
delimiter
s = pd.Series(vals, index=dates)
delimiter
canvas.saveState()
delimiter
root = tk.Tk()
delimiter
self.myfunc(self)
delimiter
count = multiprocessing.cpu_count()
delimiter
data.put()
delimiter
value = models.CharField(max_length=200)
delimiter
print(a * b)
delimiter
print(key.name)
delimiter
pivot = inlist[0]
delimiter
nav_json = json.dumps(nav_data)
delimiter
a = A()
delimiter
MyObj1 = MyModel.objects.all()[index1]
delimiter
[age for age, person_id in mylist if person_id == 10]
delimiter
self._coconut = coconut
delimiter
src = gdal.Open(src_filename, gdalconst.GA_ReadOnly)
delimiter
asyncio.set_event_loop(loop)
delimiter
data_md5 = hashlib.md5(json.dumps(data, sort_keys=True)).hexdigest()
delimiter
os.close(fd)
delimiter
frame.groupby(idx).sum()
delimiter
self.name = name
delimiter
text_link.string = text
delimiter
self.step()
delimiter
df2
delimiter
n = len(seq)
delimiter
q_out = multiprocessing.Queue()
delimiter
new_tasks.append(result.args[0])
delimiter
print((cookies, content))
delimiter
print(my_data)
delimiter
bar()
delimiter
clean = [_f for _f in lis if _f]
delimiter
arr[len_:] = np.nan
delimiter
turtle.end_fill()
delimiter
conn = psycopg2.connect(db_conn_str)
delimiter
cherrypy.quickstart(Band())
delimiter
p = Process(target=myfunc, args=(child_conn, command))
delimiter
df1 = df[mask]
delimiter
F2 = np.array(list(range(N))) / float(N)
delimiter
print(parser.config.read(parser.files))
delimiter
main_dir = os.path.dirname(sys.executable)
delimiter
subplots_adjust(top=0.8)
delimiter
root = tk.Tk()
delimiter
print(__name__)
delimiter
d = collections.defaultdict(list)
delimiter
y.boom()
delimiter
sizer.Add(log, 1, wx.ALL | wx.EXPAND, 5)
delimiter
print(filetime_to_dt(ft_dec))
delimiter
n = len(s)
delimiter
plt.xticks(ind + width / 2, OX)
delimiter
print(A[0])
delimiter
fd = os.open(filename, os.O_RDONLY | os.O_NONBLOCK)
delimiter
player = Vector2(player.rect.x, player.rect.y)
delimiter
my_socket.bind((bind_address, lowest_port))
delimiter
print(corn + 1)
delimiter
wrapper
delimiter
print(n)
delimiter
key, score = line.split()
delimiter
print(list(pairs(xs, ys)))
delimiter
omega = np.exp(-2 * pi * 1j / N)
delimiter
example = Example()
delimiter
desired_value = next(value_iterator)
delimiter
self.builder = Gtk.Builder()
delimiter
already_inserted = all(bitfield[i] for i in indexes)
delimiter
len(my_str) != len(set(my_str))
delimiter
curl.setopt(pycurl.HEADERFUNCTION, hdr.write)
delimiter
data[:, (0)] = np.random.randint(0, 200, 400000.0)
delimiter
hoist(e, subexpr(e), c)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
print(driver)
delimiter
row = row.copy()
delimiter
crud = Crud(db)
delimiter
test_ordered_dict = OrderedDict()
delimiter
y.append(y_center)
delimiter
f(n)
delimiter
id = Column(Integer, primary_key=True)
delimiter
print(A.shape)
delimiter
print(alist[k], statement.split(k)[1:])
delimiter
lol = df.values.tolist()
delimiter
html = lxml.html.parse(url)
delimiter
masked = np.where(flag > 0, X.T[..., (np.newaxis)], 0)
delimiter
print(submission)
delimiter
bpy.utils.register_class(customToolshelfPanel)
delimiter
fig = plt.gcf()
delimiter
ax[1].legend()
delimiter
chosen_templates.append(template_name)
delimiter
f_output.write(data.translate(reverse_table))
delimiter
plt.show()
delimiter
startButton.pack()
delimiter
restaurant_dish.restaurant_id = restaurant.id
delimiter
sys.exit(0)
delimiter
file_contents = re.sub(regex, subst, file_contents)
delimiter
sys.exit(app.exec_())
delimiter
print(weights.get_shape().as_list())
delimiter
sheet.cell(row=r + 2, column=c + 2).value = data_table[r][c]
delimiter
gmpy.is_square(x ** 7 + 1)
delimiter
adic[i] = adic.get(i, 0) + 1
delimiter
GLX.glXSwapBuffers(d, w)
delimiter
other()
delimiter
f = interpolate.interp1d(theoryX, theoryY)
delimiter
part_number = models.CharField(max_length=10)
delimiter
session = requests.session()
delimiter
pari.pari_init(4000000, 2)
delimiter
sel.start()
delimiter
unsearched.join()
delimiter
print(repo.name)
delimiter
smtp.ehlo()
delimiter
name = models.CharField(name, unique=True)
delimiter
data_entry.file.save(filename, fid)
delimiter
a + b + c
delimiter
a, b
delimiter
print(sess.run(c))
delimiter
c = boto.connect_dynamodb()
delimiter
plt.plot(x, f(x))
delimiter
item = QtGui.QStandardItem(str(index))
delimiter
bools = [True, True, False, True, True, False, True]
delimiter
axis = axis / math.sqrt(np.dot(axis, axis))
delimiter
filename = askopenfilename()
delimiter
[(x + y) for x, y in zip(result, self._nmin)]
delimiter
df_test = pd.concat([df] * 100)
delimiter
len(self.datatable.columns)
delimiter
df.groupby(idx2).sum()
delimiter
reader = csv.reader(file)
delimiter
version = models.CharField(max_length=10)
delimiter
self.nametowidget(widget.string)
delimiter
print(arr.dtype)
delimiter
Base.metadata.create_all(e)
delimiter
idict.setdefault(sub_type, {})[sub_name] = sub_dict
delimiter
self.instance.project_set.clear()
delimiter
q_out.put((i, f(x)))
delimiter
cw = csv.writer(si)
delimiter
func1()
delimiter
self.data[start:stop].mean()
delimiter
luns = r.group(1).split()
delimiter
pool.apply_async(Simulation, (i,), callback=handle_output)
delimiter
b
delimiter
df.shape
delimiter
gtk.Window.__init__(self)
delimiter
nx.draw_networkx_nodes(Gcc, pos, node_size=20)
delimiter
True
delimiter
list1.extend(value)
delimiter
DEBUG = False
delimiter
print(type(df))
delimiter
close_window(iren)
delimiter
logger = logging.getLogger()
delimiter
print(depth, traceback.print_stack())
delimiter
forward(size_length)
delimiter
{{loop.index}}
delimiter
type(data)
delimiter
G.add_edge(i, j)
delimiter
p.close()
delimiter
proxy_handler = urllib.request.ProxyHandler({})
delimiter
{{uform.as_p}}
delimiter
stime = time.mktime(time.strptime(start, format))
delimiter
d = datetime.date.today()
delimiter
tasks = [gevent.spawn(download_file, url) for url in urls]
delimiter
f.tell()
delimiter
self.yearLength.get(planetName)
delimiter
reducedQs
delimiter
http_packet = str(packet)
delimiter
halt_thread.start()
delimiter
send_from_directory(directory=uploads, filename=filename)
delimiter
self.callback(data)
delimiter
z[0, 0] = 0
delimiter
time_updated = Column(DateTime(timezone=True), onupdate=func.now())
delimiter
update_x([(1,)], (2,))
delimiter
[(id(x) == id(y)) for x, y in zip(lis, new_lis)]
delimiter
ax.hist(np.log(np.arange(1, 10, 0.1)), facecolor=color)
delimiter
nn.activate([1, 0])
delimiter
rev_bytes = bytes[::-1]
delimiter
print(df)
delimiter
nnz = np.prod(partitions.shape)
delimiter
monkey.patch_all()
delimiter
cmap = cm.jet
delimiter
t.start()
delimiter
time.sleep(0.1)
delimiter
self.__class__ = GEOS_CLASSES[self.geom_typeid]
delimiter
show(p)
delimiter
value = getdict(value)
delimiter
datetime.datetime.now().strftime(fmt).format(fname=fname)
delimiter
b = [[] for _ in range(N - 1)]
delimiter
self.assertEqual(self2.x, SOME_CONSTANT)
delimiter
print(k)
delimiter
EVV1 = np.dot(GinvVV, tmp.T)
delimiter
self.untoggle_mpl_tools()
delimiter
x = np.outer(np.cos(lons), np.cos(lats)).T
delimiter
a.hello()
delimiter
print(minidom.parseString(ElementTree.tostring(tree1)).toprettyxml())
delimiter
amounts.append(int(multiplier) * float(amount))
delimiter
Path(__file__).parent
delimiter
func = classmethod(func)
delimiter
is_valid = False
delimiter
keyPub = RSA.construct((seq[0], seq[1]))
delimiter
r = np.kron(np.arange(ni * nj).reshape((ni, nj)), np.ones((xi, xj)))
delimiter
time.sleep(rest_time)
delimiter
True
delimiter
a = np.zeros(5)
delimiter
v = np.array([0, 0, 1, 1, 1, 0, 0, 0])
delimiter
bottle.run(app)
delimiter
self.projectiles.add(p)
delimiter
myList = [random.randint(0, 1), random.randint(0, 1), random.randint(0, 1)]
delimiter
np.asarray(ans)
delimiter
wx.EVT_TIMER(self, self.timer.GetId(), self.OnExorcize)
delimiter
cls(newName, s)
delimiter
imgdata.seek(0)
delimiter
np.array(result)[::-1]
delimiter
self.response.out.write(jinja.render(template_path, new_context))
delimiter
r = parse_timestamp(v)
delimiter
stack.pop(0)
delimiter
{l[0]: l[1]}
delimiter
print(num)
delimiter
doctest.testmod()
delimiter
new_dic[1] = {}
delimiter
dict(ChainMap(*reversed(ds)))
delimiter
self.NameToInfo[zinfo.filename] = zinfo
delimiter
[0, 1, 0, 0]
delimiter
proc = mp.Process(target=handle_output, args=(output,))
delimiter
mylist = [(0 if x != x else x) for x in mylist]
delimiter
dc.SetFont(f)
delimiter
all(np.diff(x) == 1)
delimiter
app.SetTopWindow(frame)
delimiter
np.random.seed(0)
delimiter
frame = rotateImage(frame, 180)
delimiter
plt.imshow(z)
delimiter
out.seek(0)
delimiter
map(func, range(0, L))
delimiter
result = p.communicate()[0]
delimiter
int.__add__(self, other)
delimiter
get_factorizations_of_all_numbers(1, n, 2)
delimiter
intl = np.ravel(np.column_stack((a, b)))
delimiter
list(range(0, args[0], 1))
delimiter
x, y = X
delimiter
attrvalue.name = attrname
delimiter
list(it.islice(it.dropwhile(lambda x: x != 4, it.cycle(l)), 10))
delimiter
literal_eval(obj[1:-1])
delimiter
a = np.array(mymatrix)
delimiter
print(response.headers)
delimiter
int(s[8:16])
delimiter
random_id = random.choice(list(self.processes.keys()))
delimiter
np.random.seed(987467)
delimiter
ax.contourf(DATA[:, :, (i)])
delimiter
df.loc[max_loc:max_loc + N - 1]
delimiter
result.append(g[0][-1]) if result else result.append(g[0])
delimiter
print(string1 == string2)
delimiter
leftpanel = wx.Panel(self, -1, size=(200, 150))
delimiter
conn, addr = s.accept()
delimiter
test(100, 50, 5)
delimiter
value = value + 1
delimiter
{k: makedict(v)}
delimiter
fig.add_subplot(212)
delimiter
sparse.coo_matrix((sparse_mult(A.T, B, coords), zip(*coords))).tocsc()
delimiter
print(descend_list)
delimiter
config.readfp(StringIO.StringIO(test_ini))
delimiter
cumprobs.append(cumprob)
delimiter
results = model.fit(train_X, train_Y)
delimiter
cross_test = np.sign(z[:-1] * z[1:])
delimiter
file_handler.setFormatter(formatter)
delimiter
df
delimiter
stdout.flush()
delimiter
df[i] = df[i - 100].apply(lambda x: x * i)
delimiter
numpyMatrix = df.as_matrix()
delimiter
names = array_type()
delimiter
f.root.data.append(x)
delimiter
find_closest(A, target)
delimiter
ax = fig.add_subplot(111)
delimiter
a[a == 0] += epsilon
delimiter
server1.handle_request()
delimiter
example.test_generic_uint8(numpy.int8(42))
delimiter
plt.xlim(xmin, xmax)
delimiter
self.queue.enqueue(line.strip())
delimiter
root = tk.Tk()
delimiter
object = MyStatefulModel.objects.get(id=object_id)
delimiter
subfields = subrec._fields
delimiter
execlist[index][1] = myctype
delimiter
[]
delimiter
PyQt4.QtCore.QPoint(1468, 50)
delimiter
sunburst(sequences)
delimiter
getattr(self.func, attr_name)
delimiter
arrow.now().isoformat()
delimiter
has_index_in_slice(indices, a, b)
delimiter
b = a[:-1] + (a[-1] * 2,)
delimiter
n = len(a)
delimiter
print(str(proc.communicate()))
delimiter
print(format_to_re(layout))
delimiter
logger.addHandler(fh)
delimiter
self.last_headers = result.headers
delimiter
9.465419146697968
delimiter
11.504781467840075
delimiter
11.625461496878415
delimiter
9.265848568174988
delimiter
deletelist[i]
delimiter
print(x)
delimiter
pool = ThreadPool(5)
delimiter
print(help(xyz))
delimiter
type(a).__module__ == np.__name__
delimiter
print(foo())
delimiter
test(100, 5, 11)
delimiter
np.random.seed(1)
delimiter
hash(round(6.84, 1))
delimiter
button = Button(frame, text=b.title(), command=self.callback)
delimiter
items[1]
delimiter
print(result)
delimiter
urllib.request.install_opener(opener)
delimiter
time.sleep(0.01)
delimiter
df
delimiter
c = [list(set(sublist).intersection(set(b))) for sublist in a]
delimiter
p.wait()
delimiter
tree[parent].append(msg)
delimiter
DISPATCH()
delimiter
thedict = dict((k.strip(), converter(v)) for k, v in kvs_restored)
delimiter
self.result.append(chr(codepoint))
delimiter
response
delimiter
print(c.shape)
delimiter
u = np.linspace(0, 2 * np.pi, 100)
delimiter
b = numpy.array([x for x in a], dtype=numpy.character)
delimiter
print(x[max(with_idx)[1]])
delimiter
J0 = ephem.julian_date(0)
delimiter
linspace_x = np.linspace(min(x_range), max(x_range), 100)
delimiter
print(new)
delimiter
setattr(cls, n, wrapit(cls, method))
delimiter
sys.tracebacklimit = 0
delimiter
func2d(arr1d.reshape((n, m)))
delimiter
my_list
delimiter
assert isinstance(string, str), repr(string)
delimiter
self.finish_progress()
delimiter
simplejson.dumps(list(people))
delimiter
print(line)
delimiter
datachunk = data.file.read(1024)
delimiter
show()
delimiter
list(X())
delimiter
clens = np.cumsum([len(item) for item in contribs])
delimiter
data = f.read(4096)
delimiter
dest = os.path.join(dest, filename)
delimiter
data = r.content
delimiter
q.get()
delimiter
Py_XDECREF(g_stdout)
delimiter
df -= df.min()
delimiter
{i: (randint(0, 4) + input) for i in range(10)}
delimiter
client = OSC.OSCClient()
delimiter
p.wait()
delimiter
d.append(block)
delimiter
print(html)
delimiter
a = np.arange(25).reshape(5, 5)
delimiter
hex(buffer.rd(0))
delimiter
ax1.set_xlim(-5, 5)
delimiter
plt.show()
delimiter
plt.subplot(152)
delimiter
sys.stdout.buffer.write(line)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
z[i] = paste0(x[i], y[i])
delimiter
x /= copy(x[2])
delimiter
A_r = A.ravel()
delimiter
start = time.time()
delimiter
sentences = sentence_splitter.tokenize(text)
delimiter
ax.yaxis.tick_right()
delimiter
type(my_decoded_str)
delimiter
self._pcapw.writepkt(self._ethernet)
delimiter
width, height
delimiter
basecost += tax.calculate(basecost, othertaxes[:i])
delimiter
pymc.close()
delimiter
fout.close()
delimiter
thedir = os.path.dirname(thedir)
delimiter
a[1] = 2
delimiter
print(f.read())
delimiter
request_headers[header] = request.META[header]
delimiter
random.shuffle(a, lambda : r)
delimiter
font = ImageFont.truetype(fontname, textsize)
delimiter
arr = np.arange(100 * 100 * 100).reshape(100, 100, 100)
delimiter
start_time = datetime.datetime.utcnow()
delimiter
ax.yaxis.set_visible(False)
delimiter
ff_array = numpy.array(ff_list)
delimiter
value
delimiter
arrow2.remove()
delimiter
f(args[0])
delimiter
p.kill()
delimiter
print(df.reset_index(drop=True))
delimiter
result[-1].append(word)
delimiter
e.selection_get()
delimiter
wrpcap(pname, pkts)
delimiter
numpy.bincount(x[keep], weights=w[keep])
delimiter
df
delimiter
data.rename(columns=str.lower)
delimiter
canvas.showPage()
delimiter
self.tab.addTab(widget, widget.windowTitle())
delimiter
y5 = x.astype(np.float64)
delimiter
result = [([0] * size) for _ in range(size)]
delimiter
dt + datetime.timedelta(0, rounding - seconds, -dt.microsecond)
delimiter
base = ndpointer(*args, **kwargs)
delimiter
sys.modules[().__class__.__bases__[0].__module__].open
delimiter
set(l1) | set(l2)
delimiter
True
delimiter
total += sum(map(int, row))
delimiter
im = Image.open(filepath)
delimiter
map.add_child(feature_group)
delimiter
c = conn.cursor()
delimiter
thisTable.open(mode=dbf.READ_ONLY)
delimiter
i += 1
delimiter
plt.clf()
delimiter
self.lines.set_ydata(ydata)
delimiter
remaining = np.cumsum(colors[::-1])[::-1]
delimiter
notify_another_process()
delimiter
{{comment | safe}}
delimiter
tk.Tk.__init__(self)
delimiter
tf_softmax = tf.nn.softmax(tf.matmul(tf_in, tf_weight) + tf_bias)
delimiter
self.initialize()
delimiter
files = list(filter(os.path.isfile, os.listdir(search_dir)))
delimiter
new_power = [sum(x[1] for x in v) for k, v in groupby(zip1, key=itemgetter(0))]
delimiter
tlist[max(0, i - 1)], tlist[i]
delimiter
run(quiet=True)
delimiter
plt.subplot(224)
delimiter
http = credentials.authorize(http)
delimiter
output.close()
delimiter
n = s.num_constructors()
delimiter
sorted(sample, key=lambda i: abs(i - pivot))[:k]
delimiter
-1
delimiter
last = paw
delimiter
a = []
delimiter
items = list(d.items())
delimiter
inlines = [LinkedItemAdmin]
delimiter
subprocess.Popen([program] + params)
delimiter
make_array_proxy(T & array)
delimiter
self.setHandshakeOp(handshaker)
delimiter
client = paramiko.SSHClient()
delimiter
q = Queue()
delimiter
frame = inspect.currentframe()
delimiter
another_obj.save()
delimiter
f.seek(0, os.SEEK_END)
delimiter
sys.exit(1)
delimiter
h.update(block)
delimiter
print(lines[0].shape)
delimiter
b = np.ones((2, 4))
delimiter
self._stream.flush()
delimiter
f.write(user_code)
delimiter
find_nearest_above(np.array([0.0, 1.0, 1.4, 2.0]), 1.5)
delimiter
decoded_json = json.loads(json_string)
delimiter
sys.stdout = sys.__stdout__
delimiter
response = HttpResponse()
delimiter
foo = Foo()
delimiter
self.response.write(template.render(template_values))
delimiter
values[~valid_mask] = np.min(values) - 1.0
delimiter
print(foo.X)
delimiter
Grid.columnconfigure(root, 0, weight=1)
delimiter
fig, ax = PLT.subplots()
delimiter
Post(*args, **kw)
delimiter
myfunc()
delimiter
file.truncate()
delimiter
f()
delimiter
self.tstart = time.time()
delimiter
x_fit = np.linspace(samples.min(), samples.max(), 100)
delimiter
soup = BeautifulSoup(r.content)
delimiter
l = np.random.randint(0, 10, size=n)
delimiter
data = sys.stdin.read(1)
delimiter
word_list2 = sorted(word_list, key=lambda l: l[0].lower())
delimiter
_stack = []
delimiter
FileApp(filepath)
delimiter
print(shared_stuff.a)
delimiter
np.transpose(np.nonzero(x))
delimiter
instance = MyClass()
delimiter
pipeA.send(20)
delimiter
top10 = np.argsort(clf.coef_[i])[-10:]
delimiter
parent1 = argparse.ArgumentParser(add_help=False)
delimiter
print(json.dumps(output, indent=4))
delimiter
sys.exit(0)
delimiter
print(np.max(np.abs(slow_result - fast_result)))
delimiter
labels = labels[::2]
delimiter
hanoi(pegs, 0, 1, 4)
delimiter
command = lambda : mod.add_to_queue(self.ea1_ent.get)
delimiter
output_file.write(d[syllable])
delimiter
ax0a = fig.add_axes([0.1, 0.1, 0.8, 0.25])
delimiter
setattr(p, s, new_value)
delimiter
app = wx.PySimpleApp()
delimiter
self.external_method(arg1, arg2)
delimiter
response
delimiter
msg.attach(part2)
delimiter
new_a.test()
delimiter
server.serve_forever()
delimiter
file_path = os.path.dirname(__file__)
delimiter
self._stop.isSet()
delimiter
popt, pcov = curve_fit(fit, x, y)
delimiter
signal.signal(SIGCHLD, SIG_DFL)
delimiter
sys.stdout.write(line)
delimiter
fig = plt.figure()
delimiter
data = data.transpose()
delimiter
print(child.tag, child.text)
delimiter
byte = f.read(1)
delimiter
df2.head().T
delimiter
mask[:, (~np.in1d(np.arange(mask.shape[1]), A))] = 0
delimiter
frames = []
delimiter
a = np.random.rand(6, 5, 4)
delimiter
serializer = UserSerializer
delimiter
print(img.shape, img.dtype)
delimiter
Arr2 = Arr2.reshape((100, 1, 5))
delimiter
(dx * dx + dy * dy) ** 0.5
delimiter
main()
delimiter
mydate = datetime.datetime.now()
delimiter
hi()
delimiter
ctx = cairo.Context(img)
delimiter
result = -temp[:4]
delimiter
results = defaultdict(set)
delimiter
extent = im[0].get_extent()
delimiter
char = sys.stdin.read(1)
delimiter
list1, list2 = map(list, zip(*origlist))
delimiter
background.paste(foreground, (0, 0), foreground)
delimiter
os.setuid(0)
delimiter
N = 1000000
delimiter
it.starmap(func, it.repeat(args, times))
delimiter
stream.feed(data)
delimiter
4 / 100.0
delimiter
10007, 10008, 10007, 10008, 10008, 10008, np.nan, 10010, 10010, 10010
delimiter
print(random.choice(a))
delimiter
print(lucky(500))
delimiter
total += nested_sum(i)
delimiter
frame = cv.RetrieveFrame(capture)
delimiter
np.round(ccn.todense(), 2)
delimiter
l = [group[:] for group in list_of_groups]
delimiter
key = Column(Integer, primary_key=True)
delimiter
print(poly.intersects(p))
delimiter
l = [1, 5, 8]
delimiter
f()
delimiter
f.write(jpgtxt)
delimiter
pylab.plot(f, Xdb)
delimiter
True
delimiter
a = np.random.randn(S, S, N)
delimiter
sys.stdout = StringIO.StringIO()
delimiter
df.truncate(before=d1, after=d2)
delimiter
self.dictList.__len__()
delimiter
mod = sys.modules.get(name)
delimiter
temp_list = []
delimiter
zurich_datetime = zurich_tz.normalize(local_datetime.astimezone(zurich_tz))
delimiter
b = [4, 5, 6]
delimiter
dft_of_x = W.dot(x).dot(W)
delimiter
b = a.copy()
delimiter
p = a[100:].ctypes.data_as(ctypes.POINTER(ctypes.c_double))
delimiter
NULL
delimiter
db = SQLAlchemy()
delimiter
[x for i in range(1)]
delimiter
fileData = f.read()
delimiter
block = np.array(block)
delimiter
numpy.linalg.det(numpy.dstack([a, b, c]))
delimiter
print(datetime(2008, 12, 2))
delimiter
all_found.append(founds)
delimiter
a = a.astype(float)
delimiter
list(filter(set(b).__contains__, a))
delimiter
result[0]
delimiter
result = tree.xpath(path)
delimiter
ydiff = line1[0][1] - line1[1][1], line2[0][1] - line2[1][1]
delimiter
mat[list(range(n)), list(range(n))] = 0
delimiter
lkp = pd.Series(memberships).apply(set)
delimiter
indata = numpy.ones((5, 6))
delimiter
y = np.exp(-x * x)
delimiter
list(self.__iterPerson(**kwargs))
delimiter
w = QtGui.QWidget()
delimiter
p.join()
delimiter
app = QApplication(sys.argv)
delimiter
np.mean(arr, axis=0)
delimiter
r = tf.mod(x, 1)
delimiter
browser.select_form(nr=2)
delimiter
module.workflow_set.filter(trigger_roles=self.role, allowed=True)
delimiter
count += 1
delimiter
scope = locals()
delimiter
rot = Quaternion((1, 0, 0), pi)
delimiter
self.index += 1
delimiter
consumer_lock_object.lock()
delimiter
heapq.heappush(r, (-x * y, x, y))
delimiter
e = Tkinter.Entry(w)
delimiter
print(repr(f))
delimiter
masterSet = set().union(*iterable)
delimiter
ax2.yaxis.tick_right()
delimiter
self._lines = []
delimiter
data.domorestuff()
delimiter
print(sample2.count(True))
delimiter
fig = plt.figure()
delimiter
s.close()
delimiter
pprint.pprint(z)
delimiter
zfile = zipfile.ZipFile(zipsrc)
delimiter
self.canvas.SetBackgroundColour(wx.Colour(0, 0, 0))
delimiter
screen = pygame.display.set_mode((250, 250))
delimiter
A = numpy.array()
delimiter
b[0][0] = 1
delimiter
tree = et.ElementTree(root)
delimiter
app.MainLoop()
delimiter
window.set_border_width(5)
delimiter
np.concatenate([(element_offset + x) for x in range(a.itemsize)])
delimiter
response = urllib.request.urlopen(url)
delimiter
t.start()
delimiter
store_last_lineprocessed(last_line)
delimiter
pThread = Thread(target=p.run(), args=())
delimiter
decdeg2dms(dd)
delimiter
x = __import__(module)
delimiter
new_file.write(data)
delimiter
n = len(my_list[0])
delimiter
np.sum(seq, axis=0)
delimiter
z = np.empty((100, 1, 4), dtype=float)
delimiter
mount(prefix, app, **options)[source]
delimiter
dt = datetime.datetime.now()
delimiter
print(result)
delimiter
load_json_file(filename)
delimiter
proc.wait()
delimiter
lg = np.log(pdf)
delimiter
cbar = plt.colorbar()
delimiter
p = math.exp(-delta / T)
delimiter
m.end()
delimiter
NotImplemented
delimiter
next(iterator)
delimiter
print(repr(__bar))
delimiter
orig_py_compile(file, cfile=cfile, dfile=dfile, doraise=True)
delimiter
count[0]
delimiter
r.mainloop()
delimiter
sess.run(train)
delimiter
print(r.groups())
delimiter
A = NP.random.rand(8, 5)
delimiter
ax1 = fig.add_subplot(121)
delimiter
False
delimiter
lock = multiprocessing.Lock()
delimiter
cols = [c.copy() for c in table.columns]
delimiter
res = np.zeros_like(a[0])
delimiter
df.sortlevel(0).index.lexsort_depth
delimiter
print((s, found, tail))
delimiter
id = Column(Integer, primary_key=True)
delimiter
widget.queue_draw()
delimiter
rows = cur.fetchall()
delimiter
bucket = conn.get_bucket(BUCKET)
delimiter
contents = f.read()
delimiter
r = requests.get(settings.STATICMAP_URL.format(**data), stream=True)
delimiter
files = [name for name in tar.getnames()]
delimiter
bp.show(fig)
delimiter
d = datetime.datetime.utcnow()
delimiter
time.sleep(0.1)
delimiter
ax.barh(ind, data, color=color, left=left)
delimiter
pl.show()
delimiter
uuid.uuid4().int & (1 << 64) - 1
delimiter
my_dict = dict((k, []) for k in keys)
delimiter
array([4, 9, 7, 9, 2])
delimiter
modfile = os.path.abspath(mod.__file__)
delimiter
donecounter += 1
delimiter
mypolygon = [(randint(0, 100), randint(0, 100)) for _ in range(10)]
delimiter
c = conn.cursor()
delimiter
parser = argparse.ArgumentParser()
delimiter
json.dump(hugeData, f)
delimiter
set(x + 1 for x in aset)
delimiter
s[ind1 + 1:ind2]
delimiter
ax.yaxis.tick_right()
delimiter
key = rev[value]
delimiter
root = tk.Tk()
delimiter
EMAIL_USE_TLS = False
delimiter
numpy.nextafter(0, 1)
delimiter
remove.add(index)
delimiter
daemon_cartman.setDaemon(True)
delimiter
e.foo()
delimiter
self.widget.see(tk.END)
delimiter
self.setUpClass()
delimiter
pd.Timestamp.max
delimiter
k in self.__dict__
delimiter
result = set()
delimiter
list_of_lists[0][0] = 7
delimiter
n = len(lst)
delimiter
result = sum(x, [])
delimiter
kern = np.ones((kern_size, kern_size), np.uint8)
delimiter
solve(equations, [a, t, vi, vf, d])
delimiter
y_pos = np.where(y > 0)[0]
delimiter
d.update({k: v})
delimiter
G.add_edges_from(node_edges)
delimiter
ends = np.where(d == -1)[0]
delimiter
rows = cursor.fetchall()
delimiter
pidx = np.indices((df_1.shape[1], df_2.shape[1])).reshape(2, -1)
delimiter
frame.pack()
delimiter
browser.set_handle_refresh(False)
delimiter
print(repr(m))
delimiter
client = oauth2.Client(consumer, token)
delimiter
print(a)
delimiter
df1 = s1.reset_index()
delimiter
a * x ** n + b * x - c
delimiter
the_type = type(ast.literal_eval(stringy_value))
delimiter
xp = np.linspace(-1, 6, 100)
delimiter
self.treeWidget.addAction(self.treeAction)
delimiter
isdefarg(5, 7)
delimiter
print(item)
delimiter
LIVEHOST = True
delimiter
c = a[:] + b[:, (np.newaxis)]
delimiter
rating = models.IntegerField(default=0)
delimiter
app.MainLoop()
delimiter
dt + datetime.timedelta(0, rounding - seconds, -dt.microsecond)
delimiter
a()
delimiter
cur = [[14, k, j] for j, k in (rows[14], list(range(15)))]
delimiter
print(tds[0].string, tds[1].string)
delimiter
f.close()
delimiter
print(getitems(bleah))
delimiter
stream._add_io_state(state)
delimiter
[p.start() for p in proc]
delimiter
square = sys.argv[1]
delimiter
HAVE_CURSES = True
delimiter
log.removeHandler(ch)
delimiter
rename_code_object(wrapper, f.__name__)
delimiter
print((k, v))
delimiter
self.searchobj = searchobj
delimiter
filenames = [n for n in filenames if not fnmatch(n, ignore)]
delimiter
dst.SetGeoTransform(match_geotrans)
delimiter
requests.head(url, allow_redirects=True).url
delimiter
x, y = y, x
delimiter
print(a[i])
delimiter
reactor.iterate()
delimiter
raise StopIteration()
delimiter
recs = m.recommend()
delimiter
Testing(1 / 1)
delimiter
print(meds)
delimiter
asyncore.dispatcher.__init__(self)
delimiter
drive, path = os.path.splitdrive(test)
delimiter
f.seek(0)
delimiter
A = np.arange(n * m * k, 0, -1).reshape((n, m, k))
delimiter
L[a], L[b] = L[b], L[a]
delimiter
str(document)
delimiter
output.getvalue()
delimiter
f.write(data)
delimiter
post_syncdb.connect(add_view_permissions)
delimiter
plt.colorbar(m)
delimiter
fig = plt.figure()
delimiter
matrix = [([0] * ncols) for i in range(nrows)]
delimiter
grid.fig.set_figheight(4)
delimiter
d = {}
delimiter
model_to_dict(instance)
delimiter
c.flags.owndata
delimiter
self.__class__.PARAM
delimiter
count2[i] += 1
delimiter
t = df2.unstack(level=0)
delimiter
[0, 1, 1, 0]
delimiter
root = tree.getroot()
delimiter
right = A[idx]
delimiter
MyImplementation.do_stuff(self.lookup_string(request.something))
delimiter
os.umask(0)
delimiter
{{render_class(subclass)}}
delimiter
lookup(dic.get(key, {}), *keys)
delimiter
self.origstream.write(self.escape_char)
delimiter
vec = xa1[1:-1]
delimiter
img.write(data)
delimiter
max(left, right, left_half + right_half)
delimiter
logging.getLogger().addHandler(ch)
delimiter
l[t] = something
delimiter
column2.append(column.split(data_separator)[1])
delimiter
self.i = value_of_self_i_before_itervalues(X) + len(X) % N
delimiter
ax.set_xticklabels(xticklabels, minor=False)
delimiter
[row for row in reader]
delimiter
documents = map(itemgetter(0), documents)
delimiter
df = pd.DataFrame(dict(col=a))
delimiter
print(my_min([0, 2, -1]))
delimiter
print(sum(1 for _ in next(groupby(l))[1]) if l else 0)
delimiter
A = np.zeros((x.size, ndim + 1), dtype=float)
delimiter
model_tunning.fit(iris.data, iris.target)
delimiter
regressionmodel(X, Y, Z)
delimiter
list1 = [1, 1, 1, 1, 1]
delimiter
OrderedDict(zip(self._fields, self))
delimiter
0
delimiter
browser.open(post_url, data)
delimiter
asign = np.sign(a)
delimiter
axis([0, 1500, 1000, 0])
delimiter
name = db.Column(db.String())
delimiter
print(grouplist(l, 4, 2))
delimiter
answer.append(elem)
delimiter
self.ClickedLB2.resize(400, 20)
delimiter
opener = urllib.request.build_opener(auth_handler)
delimiter
mod = __import__(os.path.splitext(i)[0])
delimiter
deletemxd, df, newlayer
delimiter
dbb.autocommit(True)
delimiter
pprint(result)
delimiter
np.empty(arr1.shape, result_type(arr1, arr2))
delimiter
percent_list = [percent.get(str(i), 0.0) for i in range(5)]
delimiter
df = pd.DataFrame(np.random.randint(0, 2, (2, 8)))
delimiter
pygame.init()
delimiter
False
delimiter
now = time.time()
delimiter
file1.write(toFile)
delimiter
q.create_queue(1)
delimiter
self.errors.update(form.errors)
delimiter
strcpy(save_path, SYSTEM_FILE_PATH)
delimiter
d = feedparser.parse(feed)
delimiter
alltests = unittest.TestSuite()
delimiter
a.shape
delimiter
a.extend([random.random() for _ in range(10)])
delimiter
y = np.array([(i ** 2 + random.random()) for i in x])
delimiter
psutil.network_io_counters(pernic=True)
delimiter
my_logger.addHandler(handler)
delimiter
session.add(w_2)
delimiter
start_date = end_date - datetime.timedelta(days=8)
delimiter
fig = plt.figure()
delimiter
xs = np.exp(-((ts - 0.4) / 0.1) ** 2) + 2 * np.exp(-((ts - 0.8) / 0.1) ** 2)
delimiter
decorator(fn)
delimiter
fig = plt.figure()
delimiter
t = tuple(d.items())
delimiter
locals()
delimiter
b.capitalize()
delimiter
df = pd.DataFrame(data1)
delimiter
type_of_fave = models.CharField(max_length=1, choices=FAVE_CHOICES)
delimiter
print(fibonacci(10))
delimiter
sys.stderr.write(s)
delimiter
k = quaternion(0, 0, 0, 1)
delimiter
parser = argparse.ArgumentParser()
delimiter
max_value = df[feature_name].max()
delimiter
OffsetTime(offset).localize(datetime.strptime(value, format))
delimiter
df[col] = df[col].ffill()
delimiter
active = User.select().where(User.active == True)
delimiter
self.a + self.b
delimiter
b = list(a)
delimiter
list(range(x1, x2 + 1))
delimiter
r = int(numeric(s))
delimiter
G = nx.Graph()
delimiter
synchIntervall = datetime.hour(10)
delimiter
arr = numpy.row_stack((arr, row))
delimiter
x = np.random.random(num)
delimiter
c = Kls()
delimiter
int(err.split()[-2])
delimiter
ax.boxplot(data, notch=1, positions=pos, vert=1)
delimiter
fig = plt.figure()
delimiter
1
delimiter
st = os.stat(filepath)
delimiter
order = {item: i for i, item in enumerate(presorted_list)}
delimiter
q = multiprocessing.Queue()
delimiter
ax.set_ylim(yl[0] - (yl[1] - yl[0]) * pad, yl[1])
delimiter
do_some_database_stuff()
delimiter
width, height = result.size
delimiter
f.close()
delimiter
print(inspect.getmembers(mymodule, predicate=is_subclass))
delimiter
zi = z[x.astype(np.int), y.astype(np.int)]
delimiter
print(queue.get())
delimiter
r.withdraw()
delimiter
apsched.add_interval_job(checkFirstAPI, seconds=5)
delimiter
apsched.add_interval_job(checkSecondAPI, seconds=5)
delimiter
theFile.close()
delimiter
yy2 = func(tplFinal2, xx2)
delimiter
session.add(TS1(datetime(2001, 1, 2, 2), 1))
delimiter
size = fig.get_size_inches() * fig.dpi
delimiter
w = copy.deepcopy(x)
delimiter
QtGui.QTableWidget.__init__(self, *args)
delimiter
random.shuffle(randomized_list)
delimiter
b = list((i, j) for (i, _), (j, _) in itertools.combinations(enumerate(a), 2))
delimiter
manager.connect()
delimiter
extra_files.append(filename)
delimiter
random.shuffle(x, lambda : r)
delimiter
twitter = Twython()
delimiter
mail = email.message_from_string(email_body)
delimiter
sys.exit(main(sys.argv[1:]))
delimiter
ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])
delimiter
soup4.html.__next__
delimiter
stext.pack(fill=BOTH, side=LEFT, expand=True)
delimiter
h.split().count(n)
delimiter
g.sum()
delimiter
data = f.readlines()
delimiter
engine = sa.create_engine(DSN, convert_unicode=True)
delimiter
res = np.array_equiv(A, B)
delimiter
matches[0].fromy, matches[0].fromx
delimiter
z()
delimiter
print(key, value)
delimiter
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
height = db.IntegerProperty()
delimiter
b = np.swapaxes(a, 2, 0)
delimiter
arr = np.roll(np.roll(arr, shift=-x + 1, axis=0), shift=-y + 1, axis=1)
delimiter
name = db.Column(db.String(100))
delimiter
S = n(n + 1) / 2
delimiter
sound.play()
delimiter
word_gen = ((word, word[::2], word[1::2]) for word in words)
delimiter
split.append(([], []))
delimiter
print(traceback.format_exc())
delimiter
df[col] = numpy.roll(df[col], 1)
delimiter
bin(1 << 7)
delimiter
stdout, stderr
delimiter
self._value = v
delimiter
trimmed.pop()
delimiter
uno.systemPathToFileUrl(os.path.realpath(path))
delimiter
w = csv.writer(sys.stdout)
delimiter
np.fill_diagonal(corr_table.values, np.nan)
delimiter
allobjc
delimiter
data = np.random.random(size=(50, 50, 50))
delimiter
self._mqpush(request)
delimiter
(x0, y0), (x1, y1) = rect.get_bbox().get_points()
delimiter
fig = plt.figure()
delimiter
results = (c_char_p * 4)(addressof(create_string_buffer(7)))
delimiter
x = np.where(x < 0, 0.0, x * 10)
delimiter
match.group(0)
delimiter
gen()
delimiter
np.mgrid[:4, :5].transpose(1, 2, 0)
delimiter
j = np.arange(2, -1, -1)
delimiter
cache[s1, s2] = 1 + lcs(s1[:-1], s2[:-1])
delimiter
stream.close()
delimiter
deletea
delimiter
self.current.append(token.strip())
delimiter
Pdb
delimiter
os.linesep.join(helplines)
delimiter
setattr(args, self.dest, values)
delimiter
environment = jinja2.Environment(whatever)
delimiter
o.one()
delimiter
r, g, b, a = np.rollaxis(arr, axis=-1)
delimiter
points = np.concatenate([points[:-1], points[1:]], axis=1)
delimiter
Z = np.sin(X) * np.sin(Y)
delimiter
id(df2._data)
delimiter
c.write(sys.stdout)
delimiter
tree = ElementTree.fromstring(response.content)
delimiter
self.assertListEqual(expected_urls, css_urls)
delimiter
B.shape
delimiter
user = models.OneToOneField(User)
delimiter
inspect.getmembers(OptionParser, predicate=inspect.ismethod)
delimiter
[A[b] for b in range(end, start, stride)]
delimiter
model_instance.image_field.save(uniquename, ContentFile(upload.read()))
delimiter
setattr(destination, key, value)
delimiter
bounding_boxes.append((x, y, w, h))
delimiter
num_eq = np.equal(a, b, out).sum()
delimiter
plt.show()
delimiter
li = line.strip()
delimiter
[0, 1, 0, 1]
delimiter
isinstance(yourNumber, numbers.Real)
delimiter
data.append(listofgroups)
delimiter
ax.set_aspect(5)
delimiter
self.order = datetime.now()
delimiter
Ainv[j] = (Ainv[j] - factor * Ainv[i]) % q
delimiter
self.func(obj)
delimiter
gtk.widget_set_default_colormap(colormap)
delimiter
x[:] = np.where(norms != 0, x / norms, 0.0)
delimiter
wx.ListCtrl.__init__(self, parent, ID, pos, size, style)
delimiter
out = np.take(x, lin_idx)
delimiter
err = np.abs(a - b) / b * 100
delimiter
kks[0] = 1.0
delimiter
np.triu(A.T, 1) + A
delimiter
main()
delimiter
opener = urllib.request.build_opener(proxy_handler)
delimiter
json.dumps(data)
delimiter
zip(a, b)
delimiter
p.terminate()
delimiter
self.L.append(k)
delimiter
server.login(SERVER_EMAIL, EMAIL_HOST_PASSWORD)
delimiter
fitness = np.linalg.det(individual.reshape(self.N, self.N))
delimiter
res = np.split(idx_sort, idx_start[1:])
delimiter
axes.set_yticklabels(labels)
delimiter
pool.close()
delimiter
OC.check_output(self, want, got, optionflags)
delimiter
bool({})
delimiter
set_item(9)
delimiter
workbook = Workbook()
delimiter
a, b = 1, 2
delimiter
x = np.random.random(10)
delimiter
ds = datetime.date.today()
delimiter
f(a)
delimiter
line_split.append(annos.pop(0))
delimiter
final_func = functools.partial(intermed_func, lst)
delimiter
server.sendmail(fromMy, to, msg)
delimiter
map(lambda x: x >= 4, a)
delimiter
data = np.ones(N, dtype=int)
delimiter
time.strftime(format, time.localtime(ptime))
delimiter
pool.join()
delimiter
d = np.abs(data - np.median(data))
delimiter
print(F.__code__.co_consts)
delimiter
pool.close()
delimiter
mycsv = csv.DictReader(f)
delimiter
z = np.empty(ind.shape, dtype=x.dtype)
delimiter
print(repr(better_uc))
delimiter
headers = dict(req.headers)
delimiter
po.close()
delimiter
print(date)
delimiter
os.fsync()
delimiter
Unicode(500)
delimiter
new_dict[v] = k
delimiter
temp = numpy.copy(my_array[:, (0)])
delimiter
driver = webdriver.Firefox()
delimiter
print(list[i])
delimiter
window = Gtk.Window()
delimiter
np.array([res])
delimiter
print(scores.mean())
delimiter
doctest.run_docstring_examples(f, globals())
delimiter
html = render_to_string(template_name, context)
delimiter
htmldocstr = infile.read()
delimiter
m.close()
delimiter
assert data.shape == (10,)
delimiter
self.property_names = list(names)
delimiter
selection.set(selection.get_target(), 0, iter_str)
delimiter
plt.show()
delimiter
x[1][0][0] = 21
delimiter
print(dykSuperstring(deqs))
delimiter
func(*func_args, **func_kwargs)
delimiter
artist_count = len(artists)
delimiter
logger.addHandler(fh)
delimiter
x, y = zip(*points)
delimiter
myfile.write(chunk)
delimiter
c = zip(*a)[0]
delimiter
chunk = f.read(4096)
delimiter
burroughs_wheeler.test(1000)
delimiter
data = json.loads(open(file).read())
delimiter
print(x.foo)
delimiter
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
delimiter
Thread(target=reactor.run, args=(False,)).start()
delimiter
block.text = hilited
delimiter
set(df1.x).symmetric_difference(df2.y)
delimiter
print(f(2))
delimiter
self.pool = multiprocessing.Pool(processes=processes)
delimiter
r_server.ping()
delimiter
tex.insert(tk.END, s)
delimiter
pos == len(b)
delimiter
b = (a * b).sqrt()
delimiter
test_dict = autoparts()
delimiter
Py_Initialize()
delimiter
print(np.allclose(q, t))
delimiter
A.add_edges_from(G.edges())
delimiter
df.sort_index(inplace=True)
delimiter
event.setDropAction(QtCore.Qt.CopyAction)
delimiter
assert isinstance(node, Tree)
delimiter
x.append(temp)
delimiter
logging.getLogger().addHandler(ch)
delimiter
Py_DECREF(name)
delimiter
a = array((1, 0, 0, 1, 1, 0, 0))
delimiter
render_window.Finalize()
delimiter
t.join()
delimiter
tar.addfile(tarinfo=info, fileobj=string)
delimiter
p = Polynomial.fit(x, y, 4)
delimiter
clf = sklearn.tree.DecisionTreeClassifier()
delimiter
text = doc.toPlainText()
delimiter
cv2.floodFill(result, maskborder, seed_pt, (255, 0, 0))
delimiter
lst[-1] += old_d[key][i]
delimiter
newimg = np.zeros((img.shape[0], img.shape[1]))
delimiter
indices = list(g)
delimiter
x % 1000
delimiter
handles, labels = ax.get_legend_handles_labels()
delimiter
FAQ
delimiter
print(tavnit % row)
delimiter
a / foo.py
delimiter
path = sys.argv[1]
delimiter
next(wood)
delimiter
termios.tcsetattr(fd, termios.TCSAFLUSH, old)
delimiter
gdal.UseExceptions()
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
MenuItemComponent.objects.filter(menuItem=menuitem)
delimiter
[chr(n & 255)] + to_bytes(n >> 8) if n > 0 else []
delimiter
x1, x2, y1, y2 = ax.axis()
delimiter
HttpResponseRedirect(redirect_url)
delimiter
jsonify(data=cursor.fetchall())
delimiter
print(arr.shape)
delimiter
print_one()
delimiter
all_matches = [matches(list2, v) for l in list1]
delimiter
hex_data
delimiter
loop.run_forever()
delimiter
test_date = date_list[0]
delimiter
mail.list()
delimiter
prof.print_stats()
delimiter
df1 = df.loc[pd.MultiIndex.from_arrays(edge_subset2.T)]
delimiter
data = sockfilefile.readline()
delimiter
dfasamplefive = dfa[5:]
delimiter
node.val = some_val
delimiter
print(base_url)
delimiter
print(matchResult.group(1))
delimiter
HexDump()
delimiter
print(inspect.stack())
delimiter
self.valid_keys.remove(key)
delimiter
email_message = email.message_from_string(raw_email_string)
delimiter
print(args.f)
delimiter
lowest_values.append(x)
delimiter
CalculatorUI.__init__(self)
delimiter
func2()
delimiter
metadata = MetaData(bind=engine)
delimiter
sys.exit(1)
delimiter
float(num)
delimiter
file_words = (word for line in fileobj for word in line.split())
delimiter
os.path.dirname(path)
delimiter
print(df.drop(idx))
delimiter
new_body_text = re.sub(pattern, make_create_footnote_numbers(), text)
delimiter
cdvirtualenv
delimiter
{{message | safe}}
delimiter
repo = Gittle.clone(repo_url, repo_path)
delimiter
text = f.read()
delimiter
x, y = get_point(foo)
delimiter
my_user.username
delimiter
{protocol, internal_ip, internal_port, foreign_ip, foreign_port}
delimiter
globals()[name]
delimiter
serializer_class = UserSerializer
delimiter
ax = fig.add_axes(ax_size)
delimiter
df
delimiter
ax2 = ax.twinx()
delimiter
username_field.send_keys(self.user.username)
delimiter
-W15
delimiter
data[i] = random.random()
delimiter
d = {(1): 1, (2): 2}
delimiter
ser.setDTR(level=0)
delimiter
os.chdir(workingdir)
delimiter
__init__.py
delimiter
htmlString = response.read()
delimiter
lookup[l].add(v)
delimiter
func
delimiter
list_two = [4, 5, 6]
delimiter
time.sleep(0.1)
delimiter
plt.pause(0.5)
delimiter
c = canvas.Canvas(file, pagesize=landscape(letter))
delimiter
shifts = [(-1, 0), (0, -1), (0, 1), (1, 0)]
delimiter
logger.setLevel(logging.DEBUG)
delimiter
root_logger.setLevel(logging.DEBUG)
delimiter
self.builder.connect_signals(self)
delimiter
type(b)
delimiter
order = np.argsort(x)
delimiter
s = socket()
delimiter
widget.configure(foreground=color)
delimiter
ordered(a) == ordered(b)
delimiter
xy[xy[:, (1)] > 0]
delimiter
sorted(animals, key=lambda animal: animal[2])
delimiter
d[v].append(k)
delimiter
ranges = [(1, 5), (10, 20), (40, 50)]
delimiter
x = np.arange(16).reshape((4, 4))
delimiter
csv_writers[k].writerow(row)
delimiter
np.cross(a, b)
delimiter
Iopen = bwareaopen(Iclear, 120)
delimiter
now = datetime.utcnow()
delimiter
globallock.acquire()
delimiter
server = SocketServer.TCPServer((HOST, PORT), MyTCPHandler)
delimiter
numbers.append(current)
delimiter
print(list(gen))
delimiter
[0, 0, 1]
delimiter
G.edges(data=True)
delimiter
y = v[:, (1)]
delimiter
print(foolib.__file__)
delimiter
b = [x for x in a if a.count(x) > 1]
delimiter
m = re.match(regex, s)
delimiter
paw_number += 2
delimiter
book1 = Workbook()
delimiter
weights.append(W - sum(weights))
delimiter
print(np.argsort(-df.values, axis=1)[:, :2])
delimiter
[x for n in getNeighbors(vertex) for x in getNeighbors(n)]
delimiter
connect_timeout = 100
delimiter
new_pdf = PdfFileReader(packet)
delimiter
ranges[i:i + 2] = [[ranges[i][0], ranges[i + 1][1]]]
delimiter
ax1 = fig.add_subplot(211)
delimiter
main()
delimiter
4.0 / 100.0
delimiter
xi = np.array([0.0, 0.5, 1.0])
delimiter
ax.set_yticks(minorticks, minor=True)
delimiter
self.timer.timeout.connect(self.updateClock)
delimiter
id_list = id.readlines()[1:]
delimiter
sorted((minval, value, maxval))[1]
delimiter
Tkinter._test()
delimiter
self.fail(self._formatMessage(msg, standardMsg))
delimiter
_f(*args)
delimiter
bar = forms.ModelChoiceField(queryset=Bar.objects.none())
delimiter
power(5, 2)
delimiter
wrapper
delimiter
print(data)
delimiter
signal.alarm(0)
delimiter
self.input_queue = mp.Queue()
delimiter
gradients = 1.0 * (data > 0)
delimiter
tmp += int(sline[1])
delimiter
im.set_transform(im_trans)
delimiter
random_sample_output.writelines(random_sample_input)
delimiter
Test.calc_a.__code__.co_names
delimiter
children = []
delimiter
sys.meta_path.append(MyImporter())
delimiter
custom_cv = zip(train_indices, test_indices)
delimiter
cur_list.append({keys[i]: values[i][j]})
delimiter
(x + y).subs(reversed(100 * reps))
delimiter
hfile.seek(pos, os.SEEK_SET)
delimiter
queryset = User.objects.all()
delimiter
sys.stdout = capturer
delimiter
self.e = Entry(top)
delimiter
pic = QtGui.QLabel(window)
delimiter
os.dup2(0, 1)
delimiter
numOccurences = len(pattern.findall(target))
delimiter
u = f.read()
delimiter
t = ssh.get_transport()
delimiter
s.plot()
delimiter
fig.set_figheight(96)
delimiter
Gtk.init([])
delimiter
foo.map(lambda x_y: (x_y[0], [x_y[1]])).reduceByKey(lambda p, q: p + q).collect()
delimiter
exit(1)
delimiter
pd.Series(sm.OLS(y, x).fit().predict())
delimiter
run_main()
delimiter
out[i, j] = lst[i] in lst[j]
delimiter
image.save(pic, image.format, quality=100)
delimiter
self.view.setModel(self.treeModel)
delimiter
queryset = Widget.objects.all()
delimiter
cursor = conn.cursor()
delimiter
Py_Initialize()
delimiter
a = list(range(1, 101))
delimiter
diam = np.zeros(len(seed))
delimiter
A[0, 1] *= 0.5
delimiter
x1, x2 = np.nonzero(accum)
delimiter
chain.from_iterable(map(f, seq))
delimiter
signal.alarm(10)
delimiter
f.write(binary_representation)
delimiter
lines = []
delimiter
insummer = datetime.datetime(2009, 8, 15, 10, 0, 0)
delimiter
res = split(cols, inverse_rows[1:])
delimiter
left = random.randrange(0, x1)
delimiter
answer += str(i)
delimiter
data = json.loads(json.dumps(data))
delimiter
isprintable = set(yourstring).issubset(printset)
delimiter
a = np.array([])
delimiter
novel.append(word)
delimiter
tuple()
delimiter
fig = plt.figure(figsize=(8, 6), dpi=80)
delimiter
x, y
delimiter
process.stdin.write(data)
delimiter
print(next(reader))
delimiter
DO_STUFF
delimiter
loop = asyncio.get_event_loop()
delimiter
output = output[:-1]
delimiter
output = [x for x in L]
delimiter
Py_Initialize()
delimiter
simplejson.dumps(finalObj)
delimiter
{k: dct[k] for k in keys}
delimiter
zipFile.close()
delimiter
scores = cross_val_score(clf, X, y, cv=cv_custom)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
0
delimiter
os.unlink(db_fname)
delimiter
browser = webdriver.Firefox(capabilities=firefox_capabilities)
delimiter
self.shutdown()
delimiter
im = Image.open(im_file)
delimiter
foo = Foo()
delimiter
ssh = paramiko.SSHClient()
delimiter
c = cs.send(c + 1)
delimiter
stringbuilder_test.py
delimiter
answer.append(d)
delimiter
sorted(x)
delimiter
fig, ax = plt.subplots()
delimiter
fig, ax = plt.subplots()
delimiter
network.add_layer(1)
delimiter
myl[myl.index(item)] = 44
delimiter
df = pd.DataFrame(np.random.randn(4, 4))
delimiter
dict.__getitem__(self, key)
delimiter
p1.conversations.filter(participants__in=p2)
delimiter
bool(a) ^ bool(b)
delimiter
Z = VV / WW
delimiter
wait_for_element_visibility(welcome_button).click()
delimiter
therest = []
delimiter
s.close()
delimiter
P = np.array(mean_data)[:, (1)]
delimiter
df = pd.concat([df] * 1000).reset_index(drop=True)
delimiter
dictlist.append(temp)
delimiter
p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
delimiter
self.f = f
delimiter
assert len(lines) == N
delimiter
4015
delimiter
im = np.zeros((imsize, imsize), dtype=float)
delimiter
df_a.div(df_b)
delimiter
Z = np.random.random((500, 500))
delimiter
rows = np.arange(y.size)
delimiter
swap_rows(my_array, 0, 2)
delimiter
uniquifier.uniquify(a_timestamp)
delimiter
cb = pyplot.colorbar(cs)
delimiter
print(set(c) <= set(a))
delimiter
latest_file = max(list_of_files, key=os.path.getctime)
delimiter
plt.plot(lowess[:, (0)], lowess[:, (1)])
delimiter
tuple(v)
delimiter
main()
delimiter
np.random.seed(1977)
delimiter
self.fp.seek(position, 0)
delimiter
1 + countit(target, key, where + 1)
delimiter
color = image.getpixel((x, y))
delimiter
printTree(myTree)
delimiter
objectA = get_object_from_db()
delimiter
pyplot.bar(histo[1][:-1], cumulative_histo_counts, width=bin_size)
delimiter
MyObject()
delimiter
A1 = A.reshape(4, 2, 2).transpose(0, 2, 1)
delimiter
aspectRatio = image.shape[1] / image.shape[0]
delimiter
f is f()
delimiter
entropy = np.array(entropy)
delimiter
grequests.map(rs)
delimiter
ax.set_ylim(-0.6, 0.6)
delimiter
Alias / media / opt / django / site2 / media / statics
delimiter
print(text)
delimiter
-1
delimiter
False
delimiter
ax = plt.gca()
delimiter
class_items = iter(self.__class__.__dict__.items())
delimiter
print(letters_in_order_of_frequency(string))
delimiter
unittest.TextTestRunner(verbosity=2).run(suite)
delimiter
s = requests.session()
delimiter
a = np.array([1, 5, 50, 500])
delimiter
lst_intensities.append(img[pts[0], pts[1]])
delimiter
cmd.Cmd.__init__(self)
delimiter
o.__dict__
delimiter
s2 = sum(x * x for x in samples)
delimiter
results = list(foo())
delimiter
self.user
delimiter
random_index = random.randrange(len(cells))
delimiter
region_el = [item[0] for item in remaining]
delimiter
scene.camera.location.z = tz
delimiter
decoded_data = chan.decode(sample_data)
delimiter
method = possibles.get(method_name)
delimiter
fig = plt.figure()
delimiter
timeit(hugeequal1, hugeequal2, 1000)
delimiter
{{form.csrf_token}}
delimiter
ax1.set_yticklabels(data.index)
delimiter
data = open(filename)
delimiter
Base = declarative_base()
delimiter
InfoDF = pd.DataFrame()
delimiter
love_ctx.add((bob, hates, charlie))
delimiter
print(bar())
delimiter
args = [iter(iterable)] * n
delimiter
d(a, b)
delimiter
data = {x: y for x, y in zip(df.columns, df.iloc[0])}
delimiter
cardsdiscarded = 0
delimiter
count += 1
delimiter
data = reader.GetOutput()
delimiter
response = browser.open(request)
delimiter
a = np.random.randint(1, 5, (500, 500))
delimiter
bool(match)
delimiter
some_func(l, 5)
delimiter
ax.set_zlim([0, 4])
delimiter
stck.append(crnt)
delimiter
WHITE = 255, 255, 255
delimiter
df = pd.DataFrame(s)
delimiter
a / b
delimiter
print(Temperature.identifier)
delimiter
a.get(1)
delimiter
self.webview.setWebViewClient(self.wvc)
delimiter
d.hexdigest()
delimiter
ax = fig.add_subplot(111)
delimiter
len(data)
delimiter
df = df.append(h, ignore_index=True)
delimiter
photo = models.ImageField(upload_to=photo_path, blank=True)
delimiter
index = self.model.index(0, 0, QtCore.QModelIndex())
delimiter
bins.append(x0)
delimiter
group_list = grouped.map(lambda x: list(x[1]))
delimiter
myfile = open(os.path.join(MEDIA_ROOT, f.Audio.path)).read()
delimiter
full = os.path.join(os.path.dirname(module.__file__), thing)
delimiter
parsed = urlparse.urlparse(url)
delimiter
b = np.array([5, 6])
delimiter
x + 1
delimiter
signal.alarm(0)
delimiter
b = np.dot(X.T, (mask * Y).T)
delimiter
df = pd.DataFrame(ls).set_index(0)
delimiter
sizer.Add(self.log, 1, wx.ALL | wx.EXPAND, 5)
delimiter
cc = Country.objects.all()
delimiter
s = pickle.dumps(lambda x, y: x + y)
delimiter
newax.imshow(im)
delimiter
266248
delimiter
sys.path.insert(0, pluginsDir)
delimiter
diff(nges_uneval, n[5]).doit()
delimiter
self._window = gtk.Window()
delimiter
m = pat.match(s)
delimiter
listener.bind((HOST, PORT))
delimiter
G = nx.DiGraph()
delimiter
freqs = np.fft.fftfreq(len(w))
delimiter
request
delimiter
items = re.findall(itemfinder, html)
delimiter
Py_DECREF(key)
delimiter
logging.root.addHandler(file_handler)
delimiter
print(dp(n, left)[1])
delimiter
index += 1
delimiter
self.sock.connect((self.host, self.port))
delimiter
urllib.request.install_opener(opener)
delimiter
X[np.abs(X) < 0.1] = 0
delimiter
exit(1)
delimiter
b.fly()
delimiter
address = ws.Cells(row, col).Hyperlinks.Item(1).Address
delimiter
data[:, (1)]
delimiter
args = sys.argv
delimiter
new_bar = updated(bar, extra)
delimiter
r = [(i / s) for i in r]
delimiter
print(id(a))
delimiter
df
delimiter
result = max(iter(d.items()), key=lambda x: x[1])
delimiter
kthsmallest(A[:i], B[j:], k - j)
delimiter
digs[0]
delimiter
npa = np.asarray(a)
delimiter
filtered_string = [x for x in myStr if x in string.printable]
delimiter
c.setopt(c.URL, host_url)
delimiter
a = Addressbook()
delimiter
print(allimports.sum(1, 1))
delimiter
df.id.apply(str)
delimiter
current_vertex = graph[0][0]
delimiter
True in ((start < date) & (date < finish)).unique()
delimiter
jsonobj = json.loads(jsonstr)
delimiter
log_handler2 = logging.handlers.RotatingFileHandler(file_2, *args)
delimiter
myFunction()
delimiter
ax = plt.axes(projection=ccrs.PlateCarree())
delimiter
exec(urllib.request.urlopen(x), globals())
delimiter
fig = plt.figure()
delimiter
categories.extend(animal.categories.all())
delimiter
IT.chain.from_iterable(IT.combinations(s, r) for r in rvals)
delimiter
v_box = QtGui.QVBoxLayout()
delimiter
perm(prefix + [rest[i]], rest[:i] + rest[i + 1:])
delimiter
db.close()
delimiter
plt.subplot(121)
delimiter
it.chain.from_iterable(it.repeat(i, i) for i in range(1, 5))
delimiter
box = ax.get_position()
delimiter
idx = np.argmin(np.abs(sw - sCut))
delimiter
z = np.ones((nr, nc))
delimiter
args = parser.parse_args()
delimiter
GL.glRectf(-0.8, -0.8, 0.8, 0.8)
delimiter
ticks = np.linspace(0, 1, num_ticks)
delimiter
a = np.array([[5, 4]])
delimiter
CE, BD, BE, BF, BC
delimiter
v = list(d.values())
delimiter
f.set_axis_off()
delimiter
self.root.destroy()
delimiter
parser = argparse.ArgumentParser()
delimiter
fn(*args, **kwargs)
delimiter
clf.estimators_
delimiter
partitions.append([e])
delimiter
a = [Foo(), Foo(), Foo()]
delimiter
queue = collections.OrderedDict()
delimiter
self.glade = gtk.Builder()
delimiter
ax.bar(x, y, log=1)
delimiter
len((a > 10).tostring())
delimiter
sum += distance(randoms[offset][0], randoms[offset][1])
delimiter
session.execute(i)
delimiter
self.x = x_
delimiter
final_image = Image.fromarray(np.uint8(im.clip(0, 255)))
delimiter
pyqt5.vext
delimiter
MasterObject.__init__(a, b, c)
delimiter
(Sxy * N - Sy * Sx) / det, (Sxx * Sy - Sx * Sxy) / det
delimiter
f.write(content)
delimiter
np.mean(counts)
delimiter
image = Image.open(buffer)
delimiter
f.write(l)
delimiter
my_list = list(N.values())
delimiter
client = paramiko.SSHClient()
delimiter
res = [(-1) for i in range(len(myLists))]
delimiter
A = diag(arange(0, 10, 1))
delimiter
subsymbtree
delimiter
print(item)
delimiter
N = np.logspace(2, 5, 4)
delimiter
w = csv.writer(f)
delimiter
print(soup)
delimiter
plt.plot(t, s, c=seaborn.color_palette()[2])
delimiter
fig, ax = plt.subplots()
delimiter
print(query)
delimiter
self.show()
delimiter
cur = con.cursor()
delimiter
local_dt = timezone.localize(dt)
delimiter
result = defaultdict(int)
delimiter
r = s.post(URL, data=login_data)
delimiter
print(list(roundrobin(*groups)))
delimiter
print(string)
delimiter
df = pd.DataFrame()
delimiter
doc = xee.fromstring(data)
delimiter
logresults = log_stream.getvalue()
delimiter
sc = SparkContext(conf=sconf)
delimiter
out[:, (0)] = np.repeat(arrays[0], m)
delimiter
data = dict(zip(labels, [int(x) for x in starf]))
delimiter
p.start()
delimiter
print(lst2[0])
delimiter
my_engine.commit()
delimiter
t1.stop()
delimiter
weekly = numpy.sum(by_week, axis=1)
delimiter
memory_file.seek(0)
delimiter
f[i] = 0
delimiter
p = np.array([[1.5, 0], [1.4, 1.5], [1.6, 0], [1.7, 1.8]])
delimiter
result.append(str[last_end:])
delimiter
self.gravity = 982.0
delimiter
parser.print_help()
delimiter
check(my_list[:start], tracking=tracking)
delimiter
idx = np.where(m.any(1), idx0, np.nan)
delimiter
b = np.zeros(a.shape, dtype=a.dtype)
delimiter
hi_result = hi()
delimiter
_sum(iterable, start)
delimiter
days.index(inp)
delimiter
df2 = pd.concat([df, df1], axis=1).sort_index(axis=1)
delimiter
data = f.read(block_size)
delimiter
results = {}
delimiter
AppHelper.runEventLoop()
delimiter
Process.__init__(self)
delimiter
grid()
delimiter
foo = Foo()
delimiter
django.db.transaction.leave_transaction_management()
delimiter
type(self) == type(other) and self.value == other.value
delimiter
yaxis.set_minor_locator(MinorSymLogLocator(0.1))
delimiter
fig = plt.figure()
delimiter
data = np.random.random(numdense)
delimiter
lis1, lis2 = map(itemgetter(0), my_list), map(itemgetter(1), my_list)
delimiter
Base.metadata.create_all(engine, tables=[DeclarativeTestModel.__table__])
delimiter
Bar() < Foo()
delimiter
Z = np.arange(2000).reshape(20, 100)
delimiter
print(str(obj.node))
delimiter
group = groupby([1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1])
delimiter
np.log(gev.pdf(data, *fit0)).sum()
delimiter
PyQt4.QtCore.QPoint(1509, 549)
delimiter
process_f()
delimiter
dtype2 = np.dtype({name: arr.dtype.fields[name] for name in fields})
delimiter
help(re)
delimiter
sleep(1)
delimiter
sIO.__init__(self, *args, **kwargs)
delimiter
b.sum(axis=1)
delimiter
clock.tick(20)
delimiter
v_box.addWidget(self.box_two)
delimiter
object.__eq__(self, other)
delimiter
digits = len(foo.split(dec_pt)[-1])
delimiter
ax.add_patch(patch2b)
delimiter
attr = getattr(self.obj, name)
delimiter
a1.yaxis.tick_left()
delimiter
B_process.stdin.close()
delimiter
self.iterator = iter(generator)
delimiter
response
delimiter
plt.show()
delimiter
name = models.CharField()
delimiter
time.sleep(1)
delimiter
conn.send(data)
delimiter
[nan] == [nan]
delimiter
image.load()
delimiter
do_something_here(*args, **kwargs)
delimiter
fig = plt.figure()
delimiter
fp = np.polyder(f)
delimiter
bdm = boto.ec2.blockdevicemapping.BlockDeviceMapping()
delimiter
F[np.triu_indices(n, 1)] = 0
delimiter
self.root = Tkinter.Tk()
delimiter
transport = TTransport.TBufferedTransport(socket)
delimiter
X = np.random.rand(100)
delimiter
compile(expr, filename, mode, PyCF_ONLY_AST)
delimiter
append()
delimiter
form.instance.created_by = self.request.user
delimiter
[l]
delimiter
lattice[i] = mksite(pair[0], pair[1])
delimiter
[]
delimiter
Base = sqlalchemy.ext.declarative.declarative_base()
delimiter
print(df_means.head())
delimiter
obj2.decrypt(ciphertext)
delimiter
ModelID = Column(Integer, primary_key=True, autoincrement=True)
delimiter
self.changeLayout(QtCore.Qt.Horizontal)
delimiter
tagger = nltk.UnigramTagger(nltk.corpus.brown.tagged_sents())
delimiter
ax = fig.add_subplot(111)
delimiter
print(result[0])
delimiter
values.append([a, a + 200])
delimiter
y_neg = np.where(y < 0)[0]
delimiter
e.sum(axis=0).shape == (2, 2)
delimiter
g()
delimiter
br = mechanize.Browser()
delimiter
b = B()
delimiter
a = [1, 2]
delimiter
launchVim()
delimiter
existing(self, *args, **kw)
delimiter
rnd = 2.0 * np.random.rand(n)
delimiter
root = elem.getroot()
delimiter
zip(*(islice(cycle(elem), max_length) for elem in inputs))
delimiter
print(a)
delimiter
numpy.lib.stride_tricks.as_strided(stacked, shape, strides)
delimiter
new_url
delimiter
v1fColor = NP.array(lst, dtype=NP.uint8)
delimiter
fig = plt.figure()
delimiter
print((i, j, k))
delimiter
print(hex(id(w)))
delimiter
arr = np.array(im)
delimiter
os.path.relpath(datastore.__file__, here),
delimiter
B = [2, 6, 5, 4, 2]
delimiter
[0, 0, 0, 0]
delimiter
print(a)
delimiter
a().method()
delimiter
items = map(dicttolatex, items_to_clean)
delimiter
csv_in.close()
delimiter
cv.WarpPerspective(cv.fromarray(im), out_2, cv.fromarray(h))
delimiter
print(b)
delimiter
t[:] = np.arange(4).reshape(2, 2)
delimiter
abs(gTob(a) - gTob(b)) == 1
delimiter
fig = plt.figure()
delimiter
list(gexpr)
delimiter
full = np.random.randint(1, 99, size=(8, 8))
delimiter
d.groan()
delimiter
print(x)
delimiter
obj.get_object()
delimiter
arcpy.RefreshActiveView()
delimiter
x = np.random.standard_normal(n)
delimiter
print(item)
delimiter
fig = plt.figure()
delimiter
rows = np.array([0, 1]).reshape(-1, 1)
delimiter
my_task.delay()
delimiter
c = [_f for _f in [list(set(sublist).intersection(set(b))) for sublist in a] if _f]
delimiter
b = a[:]
delimiter
f.close()
delimiter
c = ctypes.cast(pBuf, ctypes.POINTER(ctypes.c_char))
delimiter
my_code = get_my_code(ParentA)
delimiter
list(deque(fin, n))
delimiter
[1, 1, 2]
delimiter
gc.collect()
delimiter
node = character.ENodeId(int(node + 1))
delimiter
client = paramiko.client.SSHClient()
delimiter
new_a * b
delimiter
parser.print_help()
delimiter
app = Flask(__name__)
delimiter
hax2.set_axis_off()
delimiter
readx = select.select([proc.stdout.fileno()], [], [])[0]
delimiter
pickle.dump(obj, file, protocol=4)
delimiter
print(line.strip().upper())
delimiter
x = 0
delimiter
self.pkwargs = pkwargs
delimiter
N = A.shape[0]
delimiter
foo(1, 2)
delimiter
re.findall(notes + accidentals + chords + additions, line)
delimiter
self.memo[id(obj)] += 1
delimiter
sub_df
delimiter
stream.stop_stream()
delimiter
(b - a).days
delimiter
ax.xaxis.set_minor_locator(plt.FixedLocator([50, 500, 2000]))
delimiter
new_a = np.empty(a.shape)
delimiter
sizer = wx.BoxSizer(wx.VERTICAL)
delimiter
msg.attach(attachment)
delimiter
setattr(cls, k, v)
delimiter
short_desc = forms.CharField(widget=forms.Textarea)
delimiter
avgs.append(total / count)
delimiter
print(line)
delimiter
sys.setrecursionlimit(10 ** 6)
delimiter
knnres = KNN(lowdimtrain, trainY, lowdimtest, k)
delimiter
visited.add(self)
delimiter
fff = os.path.join(working_folder, f)
delimiter
stop_event.wait(random.randint(0, 5))
delimiter
action.visit(this)
delimiter
print(testfunc(1))
delimiter
iris = datasets.load_iris()
delimiter
arr[i][j] = numpy_arr[i][j]
delimiter
a = np.array([True, True, False])
delimiter
logging.Handler.__init__(self)
delimiter
plt.xticks(rotation=90)
delimiter
sympy.nextprime(50)
delimiter
slice(n if k > 6 else k)
delimiter
zip(a, b)
delimiter
s.sort(reverse=True)
delimiter
sys.stdout.encoding
delimiter
setattr(self.obj, self.method, self.orig_method)
delimiter
ax.set_yticklabels(yticklabels, minor=False)
delimiter
res.sort()
delimiter
img = Image.open(sys.argv[1])
delimiter
some_exit_code
delimiter
False
delimiter
self + [fillvalue] * (n - len(self))
delimiter
os.path.exists(sys.stdin.name)
delimiter
tuple(flatten(args))
delimiter
mock(*args, **kwargs)
delimiter
new_arr.shape
delimiter
cpy.seek(0)
delimiter
datetime.utcfromtimestamp(dt64.astype(int) * ns)
delimiter
os.setpgrp()
delimiter
df
delimiter
data = self._fp.read()
delimiter
a = np.zeros((N, N), a.dtype)
delimiter
b.append(i if i else b[-1])
delimiter
data = json.load(f)
delimiter
logging.getLogger().setLevel(getattr(logging, FLAGS.logging_level))
delimiter
ax.set_xticks(ind + width)
delimiter
self.refresh()
delimiter
parser = etree.XMLParser(remove_blank_text=True)
delimiter
imgBoth = np.dstack((a, b))
delimiter
filename = os.path.basename(url)
delimiter
writer = csv.writer(output_file)
delimiter
df = DataFrame(resoverall.fetchall())
delimiter
root = tk.Tk()
delimiter
bestfit = bettermodel
delimiter
list([t for t in list(d1.items()) if t[1] == m])[0][0]
delimiter
test_suite = unittest.TestSuite(suites)
delimiter
df
delimiter
threading.Thread.__init__(self)
delimiter
unq_first = np.concatenate(([True], a_sorted[1:] != a_sorted[:-1]))
delimiter
loop.close()
delimiter
upp = np.array([0.1, -0.2])
delimiter
mf = mmap.mmap(f.fileno(), 0)
delimiter
sock.sendall(msg)
delimiter
title = title_search.group(1)
delimiter
gf.seek(-4, 2)
delimiter
print((k, g))
delimiter
self.testbed.deactivate()
delimiter
process = Popen(command, stdout=PIPE, stderr=PIPE, bufsize=1)
delimiter
print(t.getvalue())
delimiter
conn.shutdown(2)
delimiter
zip = zipfile.ZipFile(zipinmemory)
delimiter
print(dollars)
delimiter
output.addPage(page)
delimiter
axes[0].imshow(z)
delimiter
sh.setLevel(logging.DEBUG)
delimiter
locale.atof(num)
delimiter
EAGAIN or EWOULDBLOCK
delimiter
app.run(port=9001)
delimiter
le.inverse_transform([0, 0, 1, 2])
delimiter
x_a = np.linspace(-8, 0, 60)
delimiter
switch_path if sum(switch_path) < sum(stay_on_path) else stay_on_path
delimiter
hugeData = json.load(f)
delimiter
retval = ser.readline()
delimiter
mydb.commit()
delimiter
print(response1.text)
delimiter
sqrt(2, precision(100))
delimiter
print(s.unpack_from(y))
delimiter
args.command(subparsers.choices[sys.argv[1]], args)
delimiter
a[:] = da[:]
delimiter
subcats.extend(dirnames)
delimiter
self._ssh = paramiko.SSHClient()
delimiter
tree = ET.fromstring(content, parser=ET.HTMLParser())
delimiter
value = getattr(self, key)
delimiter
self._s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
delimiter
s.head(10)
delimiter
ax.set_yticks([])
delimiter
o.a
delimiter
ptext = h[0].text_content()
delimiter
desk.picture.set(mactypes.File(f.name))
delimiter
output, errors = p.communicate()
delimiter
lines = proc.stdout
delimiter
orig_dev = os.stat(path).st_dev
delimiter
label = gtk.Label()
delimiter
self.master.after(1000, self.change_label)
delimiter
x = np.linspace(-5, 5, 100)
delimiter
op.pow(a, b)
delimiter
getattr(self, name)
delimiter
options = parser.parse_args()
delimiter
arrayList.append(wM)
delimiter
utils.formatdate(nowtimestamp)
delimiter
sum(it.imap(doSomething, originalList), [])
delimiter
data = [(1, 2), (40, 2), (9, 80)]
delimiter
Base = declarative_base()
delimiter
a.registerCallback(listener2)
delimiter
post_data = urllib.parse.urlencode(post_data)
delimiter
self.beep.emit(i)
delimiter
print([(elem * 2 if elem % 2 == 0 else elem) for elem in a_list])
delimiter
pool = Pool(processes=8)
delimiter
dict_data = json.loads(venues)
delimiter
print(b.shape)
delimiter
ax.grid(False)
delimiter
time.sleep(1)
delimiter
kill(proc.pid)
delimiter
mt.roundrobin(*([iter(list1)] * (n - 1) + [list2]))
delimiter
next(self.it)
delimiter
method(**keywords)
delimiter
frame_size = cv.GetSize(frame)
delimiter
table.create()
delimiter
1
delimiter
out = np.count_nonzero(m[1:] > m[:-1]) + m[0]
delimiter
w.resize(600, 400)
delimiter
handled = pygame.mouse.get_pressed()[0]
delimiter
new_list.pop()
delimiter
chunk = fp.read(BUFSIZE)
delimiter
to_search[NAME]
delimiter
TEST_RUNNER.run(TEST_SUITE)
delimiter
sorted([x for x in res if x < limit])
delimiter
relative_path = os.path.relpath(local_path, local_directory)
delimiter
t = threading.Thread(target=f)
delimiter
water_held += (pos - stack[-1].pos) * well_height
delimiter
d.cards.remove(card)
delimiter
[0, 0, 1, 1]
delimiter
help(distutils.version)
delimiter
out.close()
delimiter
bpy.utils.unregister_class(customToolshelfPanel)
delimiter
id(s.index), id(s.values)
delimiter
plt.title(slope)
delimiter
{}
delimiter
pprint(ddiff, indent=2)
delimiter
assert f() is f()
delimiter
correlations_array = np.asarray(df.corr())
delimiter
other_f(other_f(s[1:])) + s[0]
delimiter
time.sleep(4)
delimiter
data = collections.defaultdict(list)
delimiter
list(self.data.keys())
delimiter
word = s[:end + 1]
delimiter
raise urllib.error.URLError(err)
delimiter
self._choices = []
delimiter
df2 = df.copy()
delimiter
print((c.id, c.title, c in u.channels))
delimiter
shift = max([t.get_window_extent().width for t in legend.get_texts()])
delimiter
print(df.groupby(df.A // 2).A.apply(pd.Series.sample, n=1))
delimiter
HiPRIOpoller.register(socket_0_pull, zmq.POLLIN)
delimiter
fig, ax = plt.subplots()
delimiter
bins = [0, 0.1, 0.9, 1]
delimiter
handler[cookie[0]] = cookie[1]
delimiter
[2] + [(2 * i + 1) for i in range(1, n // 2) if sieve[i]]
delimiter
{1} & {1}
delimiter
urllib.request.install_opener(opener)
delimiter
bool(-1)
delimiter
some.development.host
delimiter
print(d[str])
delimiter
point_buffer[:, (0)] * 0.5
delimiter
[(1 / egg) for egg in eggs if egg != 0]
delimiter
log_handler1 = logging.handlers.RotatingFileHandler(file_1, *args)
delimiter
self.src[-1].insert(0, itemtoshift)
delimiter
0.6625, sym2, 8, 5, 10, 10
delimiter
f(d, name)
delimiter
[any(t) for t in zip(a, b, c)]
delimiter
main()
delimiter
[0, 1, 0]
delimiter
first, rest = list[0], list[1:]
delimiter
print(sys.argv[0])
delimiter
result.append(a_class)
delimiter
x = np.array(x)
delimiter
non_empty = [line.rstrip() for line in lines if line.strip()]
delimiter
stack.append(s)
delimiter
p = psutil.Process(somepid)
delimiter
rolled = np.roll(y, 1, axis=0)
delimiter
sys.exit(1)
delimiter
self.connection.channel(self.on_channel_open)
delimiter
response = requests.get(my_url)
delimiter
vis = cv2.cvtColor(vis, cv2.COLOR_GRAY2BGR)
delimiter
fig.autofmt_xdate()
delimiter
self.web_view = QWebView()
delimiter
print(in1d(b, a).all())
delimiter
start, end, step = len(out) - 1, -1, -1
delimiter
mime_msg.get_payload()
delimiter
print(sys.argv)
delimiter
self.x, self.y = x, y
delimiter
do_something_else_2()
delimiter
max(chain(l_one, l_two))
delimiter
list(x)
delimiter
res = A[:, (B)][(B), :]
delimiter
_widget = QtGui.QWidget()
delimiter
b.decode()
delimiter
a = np.arange(10)
delimiter
self.pushButtonSimulate.clicked.connect(self.on_pushButtonSimulate_clicked)
delimiter
s = set(fus_d.keys())
delimiter
data = {}
delimiter
b.build_purelib
delimiter
results.append(common)
delimiter
is_equal(df, using_precomputation, using_index)
delimiter
print(df)
delimiter
fig.patch.set_alpha(0.7)
delimiter
(min(r1.end, r2.end) - max(r1.start, r2.start)).days + 1
delimiter
do_something(line)
delimiter
os.startfile(command[input][4])
delimiter
tuple(gen(d) for d in deques)
delimiter
classname = self.__class__.__name__
delimiter
tornado.ioloop.IOLoop.current().start()
delimiter
a + -1 / L * math.log(1 - u * (1 - math.exp(-L * b) / math.exp(-L * a)))
delimiter
decorator
delimiter
df = DataFrame(np.random.randint(0, 10, size=100).reshape(10, 10))
delimiter
Y = X[:, (j)].reshape((N, 1))
delimiter
{{analysis.simple_info}}
delimiter
a = b + a
delimiter
reverse_fks = my_model._meta.get_all_related_objects()
delimiter
raise MyCustonException(attr)
delimiter
grid_x, grid_y = np.mgrid[0:149:150j, 0:149:150j]
delimiter
self.current += 1
delimiter
locals()
delimiter
line = p.stdout.readline()
delimiter
list(dep.triples())
delimiter
x[i], y[i], z[i] = data.GetPoint(i)
delimiter
QtCore.QThread.start(self)
delimiter
self.arg1 = arg1
delimiter
print(line)
delimiter
pylab.ylim([len(names) - 0.5, -0.5])
delimiter
isinstance(f, types.FunctionType)
delimiter
res1 = np.zeros((ni, nk))
delimiter
x[:, 1:2] * y[:, 1:2]
delimiter
middle = [end_pts[1], end_pts[2]]
delimiter
l[i] = bar
delimiter
Year.add(row[0])
delimiter
self.write(File.read())
delimiter
zip(*lines[1:])
delimiter
log_capture_string.close()
delimiter
print(child.read())
delimiter
outfile.close()
delimiter
k = np.tile(k, (1000, 1))
delimiter
distutils.log.set_verbosity(distutils.log.DEBUG)
delimiter
g = g.map_diag(sns.kdeplot)
delimiter
index[1:] = groups[1:] != groups[:-1]
delimiter
app = web.application(urls, globals())
delimiter
number = next(iterator)
delimiter
lambda : arg() if callable(arg) else arg
delimiter
[0.0, 0.0] / 0
delimiter
end = lst.index(item, start + 1)
delimiter
out = a[np.sort(sortidx[valid_ind])]
delimiter
last_updated = DateTimeField(required=True, default=datetime.now())
delimiter
test(name)
delimiter
_assertSquareness(a)
delimiter
self.dataChanged.emit(index, index)
delimiter
max(iter(c.items()), key=itemgetter(1))
delimiter
C = np.cumsum(lens)
delimiter
i = i + 1
delimiter
node = row[0]
delimiter
mask = np.cumsum(np.isnan(arr), axis=1).astype(bool)
delimiter
[5, 6, 0, 1, 2]
delimiter
cycles.append(list(c))
delimiter
self.setAcceptDrops(True)
delimiter
r = random.randint(0, 10)
delimiter
[Fraction(n) for n in (degrees, minutes, remainder * 60)]
delimiter
FancyArrowPatch.__init__(self, (0, 0), (0, 0), *args, **kwargs)
delimiter
h = logging.StreamHandler()
delimiter
column_widths = []
delimiter
[0, 0, 0, 1]
delimiter
requirements.txt
delimiter
setheading(180)
delimiter
result.append(-1)
delimiter
model.update(**kwargs)
delimiter
authorization = DjangoAuthorization()
delimiter
df = pd.DataFrame(sample)
delimiter
time.sleep(0.0001)
delimiter
joined.fillna(-1, inplace=True)
delimiter
print(tokens.asDict())
delimiter
page = urllib.request.urlopen(urls).read()
delimiter
map(lambda e: urlparse.urljoin(base, e), es)
delimiter
dir = os.path.basename(filepath)
delimiter
x = my_list.pop()
delimiter
b = np.logical_not(a)
delimiter
self._value = value
delimiter
dodgy.append(i)
delimiter
logging.Handler.__init__(self)
delimiter
old_keys = [(x[0], x[1]) for x in old_vals]
delimiter
self.data.config(yscrollcommand=self.scrollbar.set)
delimiter
browser.set_cookiejar(cookies)
delimiter
self.timer.start()
delimiter
i += 1
delimiter
self.lom = []
delimiter
self.is_active
delimiter
lambda x: x
delimiter
crsr.close()
delimiter
[reduce_num(num) for num in list1]
delimiter
[blas]
delimiter
bson_obj.decode()
delimiter
min_num, max_num = min(nums), max(nums)
delimiter
urllib.request.install_opener(opener)
delimiter
S = P_i.sum(axis=1)
delimiter
WSGIApplicationGroup % {GLOBAL}
delimiter
f.read(bom_len)
delimiter
li[-1]
delimiter
myArray[i] = [i, i + 1, i + 2]
delimiter
temp = models.IntegerField()
delimiter
b2.grid(row=1, column=4)
delimiter
print(sorted(z, key=lambda x: x[1])[-2:])
delimiter
widget.setGeometry(200, 200, 100, 50)
delimiter
r.push(bests[best[1]])
delimiter
t = QtGui.QTableView()
delimiter
groups.append((test_size, train_size))
delimiter
cap = cv2.VideoCapture(0)
delimiter
X, Y = np.meshgrid(x, y)
delimiter
n = mat.shape[0]
delimiter
self.memo[str]
delimiter
mismatches.append(seqloc)
delimiter
final_list.append(tuple_item)
delimiter
c[i, j] = b
delimiter
pos += 1
delimiter
f.__name__
delimiter
QItemDelegate.__init__(self, parentView)
delimiter
m.span()
delimiter
root = Tkinter.Tk()
delimiter
a = numpy.array(l)
delimiter
line = next(i)
delimiter
import_array()
delimiter
app = Flask(__name__)
delimiter
thefile.flush()
delimiter
print(cmp(list_1, list_1))
delimiter
self = Foo()
delimiter
0
delimiter
np.array(tuple(it.islice(it.cycle(arr), length)))
delimiter
flags = fcntl.fcntl(fd, fcntl.F_GETFD)
delimiter
elem.append(match)
delimiter
the_table.set_zorder(10)
delimiter
context.set_source_rgb(0, 0, 0)
delimiter
self.type.get_object_for_this_type(id=self.id)
delimiter
indent = len(line) - len(line.lstrip())
delimiter
self.id
delimiter
self.callback()
delimiter
p.text()
delimiter
f.vals[0] = 10
delimiter
draw = ImageDraw.Draw(img)
delimiter
result += [(v + p) for p in perms(s[:i] + s[i + 1:])]
delimiter
profile.print_stats()
delimiter
sys.stdin = dummyStream()
delimiter
a = [(lambda x: x * i) for i in (1, 2)]
delimiter
name = event.GetEventObject().myname
delimiter
self.b = b
delimiter
a = np.ma.zeros((500, 500))
delimiter
minm = np.array([], dtype=int)
delimiter
q.put(item)
delimiter
cls.x = 1
delimiter
pprint(output)
delimiter
fig, ax = plt.subplots()
delimiter
count[0] += 1
delimiter
current = array[:, (i)]
delimiter
z = pickle.loads(s)
delimiter
self.method(key)
delimiter
im = Image.fromarray(cm.jet(s, bytes=True))
delimiter
np.abs(a - val) < tol
delimiter
print(n)
delimiter
forms.remove((form, question))
delimiter
object.__new__(cls, *args, **kargs)
delimiter
str(self.list)
delimiter
fh.write(str([data]))
delimiter
ix_j = np.tile(np.arange(x.shape[1]), (x.shape[0], 1))
delimiter
levels = np.linspace(-1, 1, 40)
delimiter
hourly_data = df.values[:, :]
delimiter
x[0] = Decimal(1)
delimiter
handle.close()
delimiter
indices = rows.nonzero()[0]
delimiter
getchar()
delimiter
MyException, (self.arg1, self.arg2)
delimiter
count_arr = np.concatenate((a[:, (1)], b[:, (1)]))
delimiter
self.cursor = self.connection.cursor()
delimiter
a.test()
delimiter
raise web.nomethod(cls)
delimiter
t = np.mean(t, axis=2)
delimiter
X = u.dot(np.diag(s))
delimiter
list.__delitem__(self, key)
delimiter
result
delimiter
hash - r
delimiter
name, path, args, kwargs
delimiter
email = Column(String)
delimiter
myqserver = Qserver()
delimiter
print(a)
delimiter
Foo.__init__(self)
delimiter
result.update({j: [i]})
delimiter
__init__.py
delimiter
print(cube(-8))
delimiter
category[key].append(i)
delimiter
getLogger().addHandler(StreamHandler(stream=logfile))
delimiter
os.mkdir(dir)
delimiter
assert not any(x in d for x in lst)
delimiter
s == json.loads(t)
delimiter
content.append(info)
delimiter
plt.plot([1, 2])
delimiter
A[idx[0]]
delimiter
host = hosts[host_id]
delimiter
f, ax = plt.subplots(2, 1, figsize=(12, 6))
delimiter
df1.div(df1.sum(1), axis=0)
delimiter
lst = literal_eval(string)
delimiter
dict.__setitem__(self, val, key)
delimiter
t.stop()
delimiter
[i for i in range(5)]
delimiter
dates.append(date)
delimiter
time.sleep(10)
delimiter
self.assertEqual(expect, result)
delimiter
BananServer, GulServer, SolServer, RymdServer, SkeppServer
delimiter
df
delimiter
im = cv2.imdecode(np.asarray(bytearray(im_data), dtype=np.uint8), 1)
delimiter
fig = plt.figure()
delimiter
logger.addHandler(sh)
delimiter
pickled_value = redis.get(key)
delimiter
plt.colorbar(im)
delimiter
imarray
delimiter
get_type_hints(__main__)
delimiter
tree = KDTree(numpy.array(ecef_cities))
delimiter
forced_managed = False
delimiter
concatenated_df = pd.concat(df_from_each_file, ignore_index=True)
delimiter
ax.add_collection(lc)
delimiter
nn.activate([0, 0])
delimiter
layout.addWidget(self.datetime)
delimiter
pd.Series(np.tile(c, n), [i.repeat(m), v.ravel()]).unstack()
delimiter
image = wx.ImageFromStream(sbuf)
delimiter
jagged_slice_of_a = a[:, (entries_of_interest)].diagonal()
delimiter
BOOST_PYTHON_MODULE(__main__)
delimiter
self.ToggleTool(self._NTB2_ZOOM, False)
delimiter
pipe = subprocess.Popen(args, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
delimiter
utc_date = datetime.utcnow().date()
delimiter
fig = plt.figure()
delimiter
fexps = list(range(-1, -int(precision + 1), -1))
delimiter
os.makedirs(dest)
delimiter
H = np.random.randn(n, n)
delimiter
get_index(lst, num, index + 1)
delimiter
print([x for x in g2 if x[2] >= 1.5])
delimiter
ax2.add_artist(bbox_image)
delimiter
text = f.read()
delimiter
points.intersects(poly.ix[0])
delimiter
bars = forms.ModelMultipleChoiceField(queryset=Bar.objects.all())
delimiter
mdev = np.median(d)
delimiter
sns.heatmap(data=df2, annot=True, alpha=0.0)
delimiter
self.__dict__ == other.__dict__
delimiter
s = s.strip(string.punctuation)
delimiter
dateeastern = dategmt.astimezone(eastern)
delimiter
poly = np.polynomial.Polynomial(np.random.rand(d + 1))
delimiter
os._exit(0)
delimiter
dc.SetBackground(wx.Brush(self.GetParent().GetBackgroundColour()))
delimiter
start_response(status, response_headers)
delimiter
B = numpy.lib.stride_tricks.as_strided(A, shape=newshape, strides=newstrides)
delimiter
aa = N.zeros((len(br), 2))
delimiter
print(somelist[index])
delimiter
rectangles.add(new_rectangle)
delimiter
print(myFunction(myCount))
delimiter
element = etree.Element(CDATA)
delimiter
x, y = np.meshgrid(np.linspace(-2, 2, 200), np.linspace(-2, 2, 200))
delimiter
Location4 = motion_plan(increasor(0, -1), alternator(0, 1))
delimiter
Values = [f(x) for x in range(0, 1000)]
delimiter
str(self.karma_delta)
delimiter
AppHelper.runEventLoop()
delimiter
sys.stdout.buffer.flush()
delimiter
any(d for d in self.digits)
delimiter
new_df = df.where(df.date >= last_week)
delimiter
next(a)
delimiter
df
delimiter
data = urllib.request.urlopen(url).read()
delimiter
now = time.time()
delimiter
sys.stdout = os.devnull
delimiter
print(datetime.date.timetuple(t1))
delimiter
log.addHandler(ch)
delimiter
count += 1
delimiter
newlist.append(l[(i + j) % d])
delimiter
myX, myY = text_center[0] + height / 2, text_center[1] - width / 2
delimiter
client.set_string(key, str(val))
delimiter
g = Group.objects.get(id=1)
delimiter
self[key]
delimiter
app = Flask(__name__)
delimiter
d1[k].append(v)
delimiter
d_keys = list(d.keys())
delimiter
client_sock.send(response_headers_raw)
delimiter
locations = Location.objects.all()
delimiter
self.process_events()
delimiter
index = [0, 2]
delimiter
response
delimiter
t.extend(t2)
delimiter
sns.set()
delimiter
args = parser.parse_args()
delimiter
p2 = np.tensordot(p1, w, axes=([0, 2], [0, 1]))
delimiter
df1 = df[swapidx]
delimiter
id, value, _ = zip(*ans)
delimiter
f.write(s)
delimiter
print(form.errors)
delimiter
main()
delimiter
r, c = np.unravel_index(np.argmin(a), shp)
delimiter
a, b, c, d, e, f, g = [object() for i in range(7)]
delimiter
x, y, z = zip(*data)
delimiter
sum([(i - 1) for i in list(c.values()) if i > 1])
delimiter
self.lock.acquire()
delimiter
wrapped_decorator
delimiter
session1 = SessionSRC()
delimiter
c.append(itemgetter(len(b) - i - 1)(b))
delimiter
kmeans.labels_
delimiter
X, Y = np.meshgrid(xi, yi)
delimiter
module.init()
delimiter
np.choose(x > 0, [-1, 1])
delimiter
self.Layout()
delimiter
(i for p, i in l1 if p), (i for p, i in l2 if not p)
delimiter
fig = plt.figure()
delimiter
wait = WebDriverWait(driver, 10)
delimiter
fd = set(d.items())
delimiter
HttpResponse(json.dumps(result))
delimiter
pool = Pool(processes=4)
delimiter
max(0, min(b, d) - max(a, c))
delimiter
response.status = falcon.HTTP_404
delimiter
already_loaded = s.query(A).filter(A.id.in_(random.sample(ids, 10))).all()
delimiter
df
delimiter
socket.send(toAddr, zmq.SNDMORE)
delimiter
x = ClassName()
delimiter
STARTMSB = [0]
delimiter
table_name.addParseAction(noWhitespace)
delimiter
logger.console(s)
delimiter
critical_code()
delimiter
index = pd.MultiIndex.from_tuples(list(product(individuals, time)))
delimiter
MySQLdb.__version__
delimiter
f = open(input_file)
delimiter
dict(scores)
delimiter
items = len(list(group))
delimiter
all(l)
delimiter
setattr(self, klass.__name__, DummyClass())
delimiter
cur.execute(query)
delimiter
result.append((int(k), na_list[0]))
delimiter
your_application_main()
delimiter
test_suite
delimiter
ret = func(*args, **kwargs)
delimiter
pycrypto_key = Crypto.PublicKey.RSA.construct((n, e))
delimiter
win.scrollok(True)
delimiter
self.queue = set()
delimiter
root.mainloop()
delimiter
a = np.arange(50)
delimiter
app.login_manager.init_app(app)
delimiter
encoded.hexdigest()
delimiter
self.canv.drawImage(self.img, 0, 0, height=-2 * inch, width=4 * inch)
delimiter
[l[0] - 1] + decr(l[:1])
delimiter
len(ws.strip())
delimiter
t.save()
delimiter
w / w.sum().astype(float)
delimiter
y = np.arange(100)
delimiter
mailserver.quit()
delimiter
print((name, seq))
delimiter
h.hexdigest()
delimiter
fpp = POINTER(c_float)()
delimiter
d = dict(l)
delimiter
list_a[k][j][i]
delimiter
a[0:][::2]
delimiter
canvas.setPageSize(landscape(letter))
delimiter
[-2.0, 0.0, -2.0, 4.0, 10.0, 4.0]
delimiter
model.py
delimiter
corr_table = pd.concat([c(*t) for t in tups], axis=1)
delimiter
[tuple[1:] for tuple in temp]
delimiter
d = Naughty()
delimiter
value_s = locale.currency(value, grouping=True)
delimiter
fig = plt.figure()
delimiter
unknown = set(data.keys()) - set(self.fields.keys())
delimiter
doc = html.fromstring(body)
delimiter
df = pd.DataFrame(sample)
delimiter
pn5 = pd.Panel(data, df.columns, df.index[4:], pd.RangeIndex(5))
delimiter
gs1 = gridspec.GridSpecFromSubplotSpec(1, 1, subplot_spec=outer[0])
delimiter
naive_dt = datetime(2020, 10, 5, 15, 0, 0)
delimiter
s = inspect.getsource(func)
delimiter
pygame.draw.rect(*self.stim[stimType])
delimiter
counter = Counter.objects.get_or_create(name=name)
delimiter
p.print_help()
delimiter
inputdict[key] = newvalue
delimiter
self.destroyed.connect(self.handleDestroyed)
delimiter
sys.stdout = f
delimiter
f_out.write(block)
delimiter
new_lis.sort(key=len)
delimiter
print(date.to_ical())
delimiter
npage = pdf_im.getNumPages()
delimiter
outputs.remove(s)
delimiter
plt.colorbar(sm, cax=cax)
delimiter
j = json.loads(s)
delimiter
subclass2.bar()
delimiter
result.remove(a)
delimiter
df_new
delimiter
yag.send(contents=contents)
delimiter
self.s = s
delimiter
DEPENDS = []
delimiter
WSGIPythonHome / path / to / python / 2.5 / exe / directory
delimiter
Response({})
delimiter
foo.x = 0
delimiter
default_proxy_opener = urllib.request.build_opener()
delimiter
self.cj.save()
delimiter
list(triangle(100, 0.5))
delimiter
self.data.insert(END, str(i))
delimiter
root = pomFile.getroot()
delimiter
s = requests.Session()
delimiter
pygame.event.pump()
delimiter
mat[x].append(random.random())
delimiter
msg = MIMEMultipart()
delimiter
row_count = sum(1 for row in fileObject)
delimiter
A = np.array(np.random.randn(N, N))
delimiter
f(10, 20)
delimiter
myfunc()
delimiter
c = np.mean(c, axis=0)
delimiter
print(value, array2[i])
delimiter
users = db.session.query(User).join(sub, sub.c.ml == User.numLogins).all()
delimiter
print(outaction.default)
delimiter
deploy()
delimiter
bbox = np.min(a[0]), np.max(a[0]), np.min(a[1]), np.max(a[1])
delimiter
b.index[b.argmax()]
delimiter
max(v1 - v0 for v0, v1 in zip(values[:-1], values[1:]))
delimiter
punc = punc.decode()
delimiter
name = models.CharField(max_length=255)
delimiter
s.push(20)
delimiter
len(first)
delimiter
source / usr / local / bin / virtualenvwrapper.sh
delimiter
assert os.path.isdir(basedir)
delimiter
self.sizer.Add(self.editname, (1, 1))
delimiter
ax.grid(True)
delimiter
len(A)
delimiter
newfunc
delimiter
[-2.0, -1.0, 0.0, 1.0, 2.0],
delimiter
d.update(buf)
delimiter
marky = interp(markx, x, y)
delimiter
a[out.sum(axis=0) == 1]
delimiter
any(equals)
delimiter
list_y.remove(ely)
delimiter
fig = figure()
delimiter
f.seek(pos)
delimiter
data = np.random.random((4, 10, 10))
delimiter
root.deiconify()
delimiter
self.__is_shut_down.wait()
delimiter
self.axes.set_xlabel(xlabel)
delimiter
pprint(A)
delimiter
position = fin.tell()
delimiter
U = np.zeros((N, N))
delimiter
div = make_axes_locatable(ax)
delimiter
line = next(infile)
delimiter
c.most_common(1)
delimiter
pdq.append(x1)
delimiter
user = django.contrib.auth.get_user(django_request)
delimiter
nose.main()
delimiter
array([0, 2, 5, 9])
delimiter
result = numpy.empty(data.shape[0])
delimiter
upload_date = models.DateTimeField(auto_now_add=True)
delimiter
ts = pd.to_datetime(str(date))
delimiter
s = socket.socket()
delimiter
label.set_fontproperties(ticks_font)
delimiter
palette.setColor(palette.Light, QtGui.QColor(255, 0, 0))
delimiter
count += 1
delimiter
surf = ax.plot_surface(X, Y, mat)
delimiter
print(cluster2)
delimiter
1 + max(-1, min(a.dateEnd, b.dateEnd) - max(a.dateStart, b.dateStart))
delimiter
df
delimiter
x = list(range(5))
delimiter
plt.subplot(121)
delimiter
a.test()
delimiter
print(m.__name__)
delimiter
print(traceback.format_exc())
delimiter
print(driver.current_url)
delimiter
response_body = response.content
delimiter
name = os.path.basename(os.path.abspath(filepath))
delimiter
self.newString
delimiter
_list.append(data)
delimiter
result = [foo(x) for f in seq if bar(x)]
delimiter
main()
delimiter
barbarbar
delimiter
do_something(cell)
delimiter
b = np.reshape(a, (np.product(a.shape),))
delimiter
print(PlaintextWriter.write(doc).getvalue())
delimiter
sys.stdout.isatty()
delimiter
print(x)
delimiter
title = models.CharField(max_length=100)
delimiter
plot(x, y1)
delimiter
np.array(y)
delimiter
jfile = json.loads(chunk)
delimiter
application.listen(8888)
delimiter
df
delimiter
i, o, e = select.select([sys.stdin], [], [], 1)
delimiter
b = [0, 2, 4, 5]
delimiter
ax.plot(x, y, color=col_dict[class_col[i]], **kwds)
delimiter
chardet_detector.result
delimiter
dict(y=a.y, z=a.z)
delimiter
map(type, a).count(int)
delimiter
fig.canvas.draw()
delimiter
pb.run()
delimiter
rooms = Room.objects.filter(school=self)
delimiter
bs = BeautifulSoup.BeautifulSoup(data)
delimiter
signal.signal(signal.SIGALRM, lambda a, b: sys.exit(1))
delimiter
n.parent
delimiter
cache[s1, s2] = max(lcs(s1[:-1], s2), lcs(s1, s2[:-1]))
delimiter
f.close()
delimiter
len(rng)
delimiter
fig = plt.figure()
delimiter
newpath, tail = os.path.split(path)
delimiter
server.serve_forever()
delimiter
tree = {}
delimiter
plt.show()
delimiter
aDict.update(dict(list(element.items())))
delimiter
points.append((cos(radians(startAngle)), sin(radians(startAngle))))
delimiter
ax.set_xlim(-0.6, 0.6)
delimiter
a = np.ascontiguousarray(a)
delimiter
lambda x: f(g(x))
delimiter
d.quantize(Decimal(1)) if d == d.to_integral() else d.normalize()
delimiter
a, b, c
delimiter
ax.hist2d(x, y, bins=(xbins, ybins))
delimiter
logging.getLogger().addHandler(fh)
delimiter
result = curs.fetchall()
delimiter
draw.flush()
delimiter
lines.append(line)
delimiter
x = [1, 0]
delimiter
result
delimiter
sfi = SHFILEINFO()
delimiter
ET.tostring(root)
delimiter
description = Column(String(100))
delimiter
sum(sum(l))
delimiter
[15, 8, 9, 6]
delimiter
obj._meta.concrete_model._meta.app_label
delimiter
blob_key = files.blobstore.get_blob_key(zip_file)
delimiter
method = getattr(my_cls, method_name)
delimiter
jsonf.write(data)
delimiter
raise KeyError()
delimiter
result = days[days.index(weekday):] + days[:days.index(weekdays)]
delimiter
fig, ax = plt.subplots()
delimiter
[Arthur]
delimiter
data2b = np.array(np.random.uniform(0, 1, batchSize))
delimiter
sock.bind((source_ip, 0))
delimiter
opener = urllib.request.build_opener(urllib.request.HTTPSHandler(debuglevel=1))
delimiter
s[-amount:]
delimiter
app = wx.App(redirect=False)
delimiter
soup = BeautifulSoup(page)
delimiter
o.__hasattr__(a)
delimiter
random.shuffle(words)
delimiter
print(found[0].text)
delimiter
call(*args, **kwargs)
delimiter
df.dtypes
delimiter
df
delimiter
w, -x, -y, -z
delimiter
self.configMap[key]
delimiter
o.many2many.add(ModelB.objects.get(id=2))
delimiter
ax = fig.add_axes([0.12, 0.12, 0.68, 0.78])
delimiter
result_dict = collections.defaultdict(list)
delimiter
self.right = right
delimiter
method.__class__
delimiter
self._callback(self._value)
delimiter
setattr(self, item, value)
delimiter
s[s.map(type).ne(str)]
delimiter
rrset = response.authority[0]
delimiter
result = [value_if_false, value_if_true][condition]
delimiter
list(find_creators(f, builtins))
delimiter
d = {}
delimiter
pygame.draw.circle(srf, color, (x, y), radius)
delimiter
username == line[1].strip()
delimiter
bar = Foo()
delimiter
xs = np.linspace(0, 8, 200)
delimiter
Qapp = QApplication(sys.argv)
delimiter
print(test.__dict__[a_string])
delimiter
parent = elem.getparent()
delimiter
np.diff(s.values)
delimiter
ModelA.objects.instance_of(ModelB)
delimiter
ax.set_xticklabels(ax.get_xticks(), fontproperties=font)
delimiter
tips = pd.read_csv(url)
delimiter
self.request.send(self.data.upper())
delimiter
pts2_ = cv2.perspectiveTransform(pts2, H)
delimiter
float(v)
delimiter
yi = np.array([0.0, 0.5, 1.0])
delimiter
[{(1): 2}]
delimiter
time.sleep(1)
delimiter
chapters += 1
delimiter
cc0 = [x for x in cc]
delimiter
5 / 2
delimiter
i
delimiter
USE_L10N = True
delimiter
USE_TZ = True
delimiter
y = np.matrix(x)
delimiter
print(myre.group(0))
delimiter
freq4[char] += 1
delimiter
pprint(FW)
delimiter
self.n += 2
delimiter
distance_matrix_np = np.array(distance_matrix)
delimiter
indices = np.empty((sizes[-1],), dtype=np.intp)
delimiter
res.append(t)
delimiter
MB_OKCXL = 1
delimiter
cbar = plt.colorbar(surf)
delimiter
t.left(90 * random.randrange(4))
delimiter
screen = pygame.display.set_mode((200, 200))
delimiter
out = process.stdout.readline(1)
delimiter
app.debug = True
delimiter
soup = BeautifulSoup(response)
delimiter
b = np.random.rand(4)
delimiter
new_d = pickle.load(file2)
delimiter
crawler.crawl(spider)
delimiter
NOTHING = object()
delimiter
r = session.post(URL, data=login_data)
delimiter
jsonify(**request.json)
delimiter
allocate(tmp(gridsize, gridsize, gridsize))
delimiter
x[y] += 10
delimiter
height = GetSystemMetrics(1)
delimiter
print(k)
delimiter
ypxl2 = ipart(yend)
delimiter
unhexlify(s)
delimiter
self.list.setIndexWidget(index, button)
delimiter
product = models.ForeignKey(Product)
delimiter
regressor.score(X, y)
delimiter
upload_directory(path, upload_file)
delimiter
a = 42
delimiter
w.start()
delimiter
columns = [list() for i in range(10)]
delimiter
f = Foo()
delimiter
plt.contourf(grid)
delimiter
xpointer = ctypes.addressof(asdouble)
delimiter
extractor.runInParallel(numProcesses=2, numThreads=4)
delimiter
sys.exit(app.exec_())
delimiter
deactivate
delimiter
df.columns = columns
delimiter
setattr(targetCls, name, closure(name, func))
delimiter
line_contents_expr.runTests([sample1, sample2])
delimiter
request.start_time = time.time()
delimiter
output = proc.stderr.read()
delimiter
root = Tk()
delimiter
os.close(fileHandle)
delimiter
raise NotImplementedError
delimiter
init()
delimiter
self.view.setScene(self.scene)
delimiter
ans_time = time.mktime(dtime.timetuple())
delimiter
summary[s] = [int(x) for x in list(set(summary[s]))]
delimiter
target_dict[key1][key2] = val
delimiter
self.results = {}
delimiter
my_set
delimiter
self.children.append(kiddo)
delimiter
print(key)
delimiter
element = WebDriverWait(driver, 10).until(find)
delimiter
loop1()
delimiter
fd = os.open(os.ctermid(), os.O_RDONLY)
delimiter
label.set_fontsize(15)
delimiter
y = np.outer(np.sin(theta), np.sin(phi))
delimiter
about = About.objects.get(id=1)
delimiter
count += 1
delimiter
col_ind = np.argsort(data.values, axis=0)[::-1, :]
delimiter
df.replace(to_replace, np.nan)
delimiter
show()
delimiter
letter = input(prompt).strip()
delimiter
t.append(z)
delimiter
source_key.copy(dest_bucket_name, dest_key_name)
delimiter
rms = audioop.rms(data, 2)
delimiter
dict(zip(*([iter(List)] * 2)))
delimiter
particles = [Particle(i) for i in range(500000)]
delimiter
f.write(raw_img)
delimiter
line_number -= 1
delimiter
MyClass.defaults[key]
delimiter
b = Boo()
delimiter
cls()
delimiter
v[:len(tmp)] += tmp
delimiter
x_list = numpy.random.random(200)
delimiter
ysize = len(np.unique(lons))
delimiter
s2 = s1.index.to_series().shift(-1).loc[idx].astype(int)
delimiter
self.SetSizeHints(minW=-1, minH=hsize, maxH=hsize)
delimiter
i += 1
delimiter
markx, marky
delimiter
Thread(target=guiloop).start()
delimiter
df
delimiter
ax = plt.gca()
delimiter
lab.pack()
delimiter
ax2 = plt.subplot(122)
delimiter
fig, ax = plt.subplots()
delimiter
phi2 = np.linspace(0, 5 * 2 * np.pi, 1000)
delimiter
xml_output = response.read()
delimiter
xx, yy = np.meshgrid(x, y)
delimiter
print(list_of_strings)
delimiter
np.cov(data.T)
delimiter
ret.reserve(funs.size())
delimiter
plt.setp(g.ax_heatmap.get_yticklabels(), rotation=0)
delimiter
console.start()
delimiter
mantissas[fixmsk] *= 10.0
delimiter
reservations = conn.get_all_instances()
delimiter
visited.append(rule)
delimiter
np.random.seed(1)
delimiter
print(tn.read_eager())
delimiter
y.nonzero()
delimiter
ax.axis((0, 2, 0, 2))
delimiter
np.testing.assert_almost_equal(x, y)
delimiter
df = pd.concat([df, pd.DataFrame(np.tile(np.nan, [len(df), 50]))], axis=1)
delimiter
self._byhour
delimiter
self._byminute
delimiter
self._bysecond
delimiter
df[sum_columns] = df.groupby(axis=1, level=1).sum()
delimiter
ax2 = plt.subplot(2, 1, 2, sharex=ax1)
delimiter
decorator1(f)
delimiter
self.name = name
delimiter
cpid = os.fork()
delimiter
b = int(x)
delimiter
print(t.get(timeout=1))
delimiter
sublime.get_clipboard()
delimiter
self.updater.setInterval(10)
delimiter
print(m_swapped.shape)
delimiter
sleep(5.0)
delimiter
df.index += 17
delimiter
minmax = [(min(v) if k else max(v)) for k, v in groupby(lst, lambda a: a < 0)]
delimiter
r = requests.post(endpoint, data=request_parameters, headers=headers)
delimiter
np.count_nonzero(y == 1)
delimiter
tlist = []
delimiter
file.close()
delimiter
print(self._concrete_method())
delimiter
d = sum(li[:4])
delimiter
[(x + y) for x in xs for y in ys]
delimiter
dis.dis(lambda x: str(x))
delimiter
h.feed(page)
delimiter
value = dictionary[key]
delimiter
all(map(somePredicate, somIterable))
delimiter
u.close()
delimiter
print(res.status, res.reason)
delimiter
args = docopt.docopt(_(__doc__))
delimiter
print(data)
delimiter
array[1]
delimiter
print(obj.number)
delimiter
sess.run(D)
delimiter
f.close()
delimiter
clientSocket.send(data.encode())
delimiter
output.append(tmp)
delimiter
print(i)
delimiter
print(data[4].text)
delimiter
sum(ord(c) for c in L)
delimiter
fig, ax = plt.subplots()
delimiter
os.write(out_fd, PASSPHRASE)
delimiter
drawing = numpy.zeros([100, 100], numpy.uint8)
delimiter
x, y = zip(*points)
delimiter
help(newImg1.save)
delimiter
a = handle.readlines()[1:]
delimiter
oldtrace = [sys.gettrace()]
delimiter
plt.xticks(list(range(ncols)), col_labels)
delimiter
driver = webdriver.PhantomJS()
delimiter
set([pd.Categorical(x, l[::-1], True).max()])
delimiter
res.setdefault(k, [])
delimiter
ha.plot_surface(X, Y, data)
delimiter
main()
delimiter
result = client.service.IsHealthy()
delimiter
tf.truncated_normal_initializer(stddev=stddev)
delimiter
self.session = Session()
delimiter
Y = numpy.repeat(X[:, (j)], n).reshape((N, n))
delimiter
print(x.bar())
delimiter
a.pop(0)
delimiter
results = [line.strip().lower() for line in f if line]
delimiter
print(pir(df))
delimiter
type = models.CharField(max_length=255)
delimiter
A[0].shape
delimiter
mercurial.__file__
delimiter
fig = plt.figure()
delimiter
print(hash.name, hash.hexdigest())
delimiter
self.observer.join()
delimiter
leng(s[1:], count)
delimiter
slices_start = np.array([s.start for s in slices])
delimiter
root = tree.getroot()
delimiter
fig.colorbar(im1)
delimiter
the_queue = multiprocessing.Queue()
delimiter
self.readonly_fields
delimiter
seen.add(found)
delimiter
cls
delimiter
partition(a_, equiv_)
delimiter
soup = BeautifulSoup(br.response().read())
delimiter
origlist.append(t)
delimiter
session_config = tf.ConfigProto(gpu_options=gpu_options)
delimiter
train, test = train_test_split(df, test_size=0.2)
delimiter
app = Flask(__name__)
delimiter
print(t.timeit())
delimiter
a = np.empty(0)
delimiter
Ni = f.shape[0]
delimiter
data = json.loads(json_str)
delimiter
hline.set_ydata((y, y))
delimiter
ax = plt.subplot(111)
delimiter
get_result()
delimiter
c = conn.cursor()
delimiter
client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
delimiter
afun
delimiter
s.close()
delimiter
a(your_list)
delimiter
b_sub = b[mask]
delimiter
self.gamma = tf.Variable(tf.constant(1.0, shape=[depth]))
delimiter
z = np.linspace(1.0, 2.0, 20)
delimiter
lock.acquire()
delimiter
matplotlib.pyplot.yticks(yint)
delimiter
self.op = op
delimiter
s.post(url, data=user_data)
delimiter
fl.close()
delimiter
comment.save()
delimiter
john.save()
delimiter
tile_array(a, 2, 2)
delimiter
AlwaysCallable(self.__class__)
delimiter
fig = plt.figure()
delimiter
max(0, min(x, 255))
delimiter
pool = Pool(8)
delimiter
self.grid.CreateGrid(25, 8)
delimiter
self.vline.set_xdata((x, x))
delimiter
now = datetime.now(timezone.utc)
delimiter
conn1 = psycopg2.connect(dsn1)
delimiter
len1, len2 = len(string1), len(string2)
delimiter
time.sleep(0.1)
delimiter
print(c.fetchall())
delimiter
pythonbrew_install
delimiter
list(d.items())
delimiter
n = len(l)
delimiter
pylab.legend()
delimiter
np.random.shuffle(cols)
delimiter
files = pattern.findall(str)
delimiter
XmlStream.__init__(self)
delimiter
screen = curses.initscr()
delimiter
cmd = sys.argv[1]
delimiter
x = [0] * 51
delimiter
self.testbed.init_user_stub()
delimiter
architecture / webservice_tech
delimiter
print((n, sorted(p)))
delimiter
path.append(lastnode)
delimiter
data = response.read()
delimiter
self.lbl.grid()
delimiter
y_vals = np.cumsum([0] + pieces)
delimiter
db.tbl.insert(**db.tbl._filter_fields(newRowAsDict))
delimiter
p1.join()
delimiter
Py_XDECREF(module)
delimiter
list_of_tuples.append((x, y))
delimiter
a = np.random.rand(6, 4)
delimiter
array = [([0] * len(Split_Line[1])) for i in Split_Line[0]]
delimiter
win.unmaximize()
delimiter
assert x.shape == y.shape
delimiter
app = Flask(__name__)
delimiter
to_stream.write(processed_buf)
delimiter
print(d[0])
delimiter
next_down(x)
delimiter
command = lambda i=i, j=j: update_binary_text(i, j)
delimiter
print(path_buf.value)
delimiter
weights.dot(features) + bias * len(weights)
delimiter
here = lambda x: os.path.abspath(os.path.join(os.path.dirname(__file__), x))
delimiter
g = sns.pairplot(iris)
delimiter
fig = plt.figure()
delimiter
image = Image.open(filename)
delimiter
not [v for v in list(remaining_weights.values()) if v != 0]
delimiter
c_ulong_type = PyTypeObject.from_address(id(c_ulong))
delimiter
ax.set_ylim(ymin, ymax)
delimiter
unixtime.days * 24 * 60 * 60 + unixtime.seconds + unixtime.microseconds / 1000000.0
delimiter
f.close()
delimiter
endif
delimiter
ax.set_xticklabels(xlabels)
delimiter
seen = set()
delimiter
stdin_fileno = sys.stdin.fileno()
delimiter
dic = {x: [] for x in lis}
delimiter
win2.destroy()
delimiter
print(x)
delimiter
gray = cv2.medianBlur(cv2.cvtColor(img, cv2.COLOR_RGB2GRAY), 5)
delimiter
a = np.empty(guess.shape, dtype=int)
delimiter
result = pipe.stdout.read()
delimiter
self.sys_stdout = sys.stdout
delimiter
now = datetime.now()
delimiter
cv2.drawContours(close, [cnt], 0, 0, -1)
delimiter
print(new_dict)
delimiter
int(0.5 + 10 ** ((n - 1) * K))
delimiter
matched_data.append(d)
delimiter
zf.close()
delimiter
{{}}
delimiter
8595000
delimiter
px = pygame.image.load(path)
delimiter
A = A.view(A.dtype[0]).reshape(-1, len(A.dtype))
delimiter
i, WSSSE
delimiter
cursor = conn.cursor()
delimiter
os.abspath(os.path.join(__file__, os.path.pardir, file_name))
delimiter
p.start()
delimiter
filedescriptor = urllib.request.urlopen(req)
delimiter
reader = csv.reader(f)
delimiter
numpy.subtract((10, 10), (4, 4))
delimiter
str(h)
delimiter
os.startfile(filepath)
delimiter
csv.writer(f).writerows(list_of_lists)
delimiter
wb.ActiveSheet.ExportAsFixedFormat(0, path_to_pdf)
delimiter
ax = fig.add_subplot(212)
delimiter
data_stream = Popen(mycmd, stdin=PIPE, stdout=PIPE)
delimiter
cap.release()
delimiter
zipped = [list(t) for t in zip(x, y)]
delimiter
print(e.__traceback__)
delimiter
my_iterator = iter(sorted(a + b + c))
delimiter
noise = np.random.randn(100)
delimiter
CS = ax.contourf(xi, yi, zi, 60, cmap=plt.cm.jet, zorder=1)
delimiter
print(songs[song_index])
delimiter
len(self.nodes)
delimiter
s = requests.Session()
delimiter
options, args = parser.parse_args()
delimiter
infile.close()
delimiter
ws.add_image(img)
delimiter
reader.Update()
delimiter
False
delimiter
print(link)
delimiter
[1, 2, 0]
delimiter
x = a[:i]
delimiter
E += potential(np.sqrt(np.sum((x[i] - x[j]) ** 2)))
delimiter
a = np.array([2, 6, 4, 8])
delimiter
matches = (i for i in range(len(b), 0, -1) if b[:i] == a[-i:])
delimiter
content = forms.CharField()
delimiter
nomwe_corpus.append(nomwe.split())
delimiter
f, ax = plt.subplots(1, 2)
delimiter
responses_dir = os.path.dirname(os.path.realpath(__file__))
delimiter
match = match_obj.group(0)
delimiter
csvfile = StringIO.StringIO()
delimiter
ax = fig.add_subplot(111)
delimiter
seen.add(first)
delimiter
writer.writerow(row)
delimiter
self.__str__()
delimiter
bundle
delimiter
vector = vector.reshape(1, len(vector))
delimiter
d = np.diff(np.asarray(b, dtype=int))
delimiter
app = Flask(__name__)
delimiter
device.close()
delimiter
seq = chain[:]
delimiter
k0.lst.append(1)
delimiter
host = req.get_host()
delimiter
False
delimiter
next(result)
delimiter
src_address = Column(String(16), index=True)
delimiter
max(map(commonprefix, pairwise(suffixes)), key=len)
delimiter
max(hand, key=lambda c: rank_cards_map[c[0]])
delimiter
df = df.replace(nan, 0)
delimiter
fp[(i), :] = fp[(i + 1), :]
delimiter
p = Pool(1)
delimiter
keybd_event(Key, 0, 1, 0)
delimiter
solar_time = datetime.combine(dt.date(), time(0)) + timedelta(minutes=tst)
delimiter
df2.L = df2.L.str.strip()
delimiter
setattr(instance, attr, value)
delimiter
run_time = time.time() - start
delimiter
sess = tf.Session()
delimiter
1 == 1 + 0j == 1.0
delimiter
nums = np.array([1, 1, 1, -1 - 1, 1, -1, 1, 1, -1, -1, -1, 1, -1])
delimiter
fruitdict = {}
delimiter
raise AttributeError
delimiter
out = out[::-1]
delimiter
app = Flask(__name__)
delimiter
p.save()
delimiter
B = dataset[where[~a_idx]]
delimiter
df.groupby([df.Type, isnull]).size().unstack()
delimiter
mydict[k] = mylist.count(k)
delimiter
value
delimiter
bg1 = cv2.BackgroundSubtractorMOG()
delimiter
[(c in this.d and this.d[c] or c) for c in this.s]
delimiter
yaml.Loader.yaml_constructors
delimiter
[row[column_number] for row in array]
delimiter
year = int(yourString[0:4])
delimiter
data = np.arange(n_data)
delimiter
p.children.append(Child(loc=cloc, status=cstat))
delimiter
port
delimiter
x + y.todense()
delimiter
(1, 2) == 1, 2
delimiter
[True, False, False],
delimiter
buff = f.read()
delimiter
Y[-fc:], alpha, beta, rmse
delimiter
np.sum(-p * np.log2(p) for p in probs if p > 0)
delimiter
sys.stdout = St_ampe_dOut()
delimiter
p.close()
delimiter
x.append(2.2)
delimiter
f.read(8)
delimiter
y = a[2] * b[0] - a[0] * b[2]
delimiter
abs(z.T - z)
delimiter
len(self._data.values)
delimiter
object_class = models.CharField(max_length=20)
delimiter
x1 = np.random.normal(0, 10, 100000)
delimiter
sorted(s, key=lambda t: -t[0] * t[1])
delimiter
f_new = pickle.loads(f_string)
delimiter
pcolor(df1.T)
delimiter
type(unicodecontent)
delimiter
install_hooks.post_install()
delimiter
threadB.join()
delimiter
1 + x + x ** 2 / 2.0
delimiter
figures = [x for x in matplotlib._pylab_helpers.Gcf.get_all_fig_managers()]
delimiter
Base = declarative_base()
delimiter
Story.append(paragraph)
delimiter
palette.extend((v, v, v))
delimiter
print(difft(time(20, 40, 0), time(18, 41, 0)))
delimiter
line_num += 1
delimiter
self.id == other.id
delimiter
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
delimiter
a = models.CharField(max_length=42)
delimiter
color = QtGui.QColor(value)
delimiter
im.thumbnail(size_maxi, Image.ANTIALIAS)
delimiter
something()
delimiter
self._fail(self.failureException(msg))
delimiter
meds = df2.median().sort_values()
delimiter
np.nan
delimiter
response
delimiter
{offset(k, base): v for k, v in list(dct.items())}
delimiter
reactor.listenTCP(8001, server.Site(root))
delimiter
print(result.column_name)
delimiter
self.lock = threading.Lock()
delimiter
mdb.connect(**connectParams)
delimiter
root = LH.fromstring(text)
delimiter
soup = BeautifulSoup(html)
delimiter
headers = {}
delimiter
result = can_count_a * a + can_count_b * b
delimiter
print(f.upper())
delimiter
logger2.addHandler(logfile)
delimiter
print(key, word_dict[key])
delimiter
self.treeview.append_column(self.tvcolumn0)
delimiter
vals_array.fill(np.nan)
delimiter
my_dict = defaultdict(list)
delimiter
out = input[binary_matrix.ravel()[lin_idx] == 1]
delimiter
PolarAxes.LogPolarTransform(self._axis, self._use_rmin)
delimiter
iter([data])
delimiter
print(df1.T)
delimiter
pool = mp.Pool()
delimiter
target_path = imp.find_module(target)
delimiter
fig, ax = plt.subplots(2, sharex=True)
delimiter
pp.savefig(plt.gcf())
delimiter
self.happiness = self.wealth / global_wealth
delimiter
self._intersections[a][b] += 1
delimiter
{{login.login_date}}
delimiter
child.join()
delimiter
heapq.nlargest(n, iter)[-1]
delimiter
set(l1) & set(l2)
delimiter
process.join()
delimiter
items = Item.objects.filter(created_date__gte=aMonthAgo)
delimiter
PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_LIST_SUBCLASS)
delimiter
b = [a]
delimiter
b = arr(a)
delimiter
name = Column(String)
delimiter
link.next_sibling.next_sibling
delimiter
Clock.schedule_once(self.quit_screen, 0)
delimiter
db.session.add(group_from_factory)
delimiter
word.lower()
delimiter
ws = wb.get_active_sheet()
delimiter
self.parent = weakref.proxy(parent)
delimiter
X = np.random.randn(10, 4)
delimiter
app = QApplication(sys.argv)
delimiter
list1 = [[-2.0, 0.0, -2.0, 2.0, 10.0, 2.0], [-1.0, 0.0, 2.0, 1.0, 5.0, 4.0]]
delimiter
pylab.draw()
delimiter
self.connect((host, 80))
delimiter
[(10 ** (i * 2 / 9.0)) for i in range(10)]
delimiter
a * x + b + c * np.exp((x - d) / e)
delimiter
self.grid(sticky=N + S + E + W)
delimiter
0
delimiter
module1.func1 = self.old_func1
delimiter
spam._original(testcon)
delimiter
socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, ip, port)
delimiter
cv.WriteFrame(video_out, frame)
delimiter
isinstance(50, list)
delimiter
plt.hist((a, b, c), **common_params)
delimiter
ser = serial.Serial(s_name)
delimiter
list(filter(exists, L))
delimiter
object.__new__(cls, *args, **kw)
delimiter
query_set.filter(active=False)
delimiter
b = [45, 42, 0, 1, -1, 0]
delimiter
getattr(obj, name)
delimiter
GetCurrentProcessId() == GetWindowThreadProcessId(wnd)
delimiter
self._a
delimiter
new_cmap
delimiter
lines[0]
delimiter
parsed = urlparse(url)
delimiter
A.foo()
delimiter
response.headers
delimiter
top.after_cancel(job1)
delimiter
[0, 0, 1, 0]
delimiter
t = time.strptime(line, fmt)
delimiter
ax1.add_line(copy.copy(line1))
delimiter
h.file.read()
delimiter
resultFyle.close()
delimiter
b = c_[a, c]
delimiter
ax1.set_ylim(-5, 5)
delimiter
df[df != 0].cumsum(axis=1).min(axis=1)
delimiter
tree = etree.parse(response, htmlparser)
delimiter
print(html)
delimiter
out = dat[top_left[0]:bottom_right[0] + 1, top_left[1]:bottom_right[1] + 1]
delimiter
[f(0) for f in fs]
delimiter
print(child.tag, child.text)
delimiter
zeta = 50
delimiter
pos = nx.spring_layout(G)
delimiter
self.__dict__.update(x.__dict__)
delimiter
d = distances[clust[i].id, clust[j].id]
delimiter
a[2:7 + 1] = b
delimiter
response
delimiter
N = len(perms[0][0])
delimiter
asyncore.loop()
delimiter
s = s.replace(hit, chr(entnum))
delimiter
float(s)
delimiter
sftp_client = ssh_client.open_sftp()
delimiter
f = Foo()
delimiter
pet_food.save()
delimiter
response
delimiter
first_sheet = book.sheet_by_index(0)
delimiter
set(array1) & set(array2)
delimiter
fnew[0]
delimiter
dire = sys.argv[1]
delimiter
count
delimiter
conn = engine.connect()
delimiter
logistic.cdf(0.458)
delimiter
worksheet.fit_num_pages = 1
delimiter
X[np.arange(len(Y)), Y] = 1
delimiter
dist = udist.data
delimiter
text.draw(fig.canvas.get_renderer())
delimiter
funcs[2]()
delimiter
root = Tkinter.Tk()
delimiter
result
delimiter
reader = csv.reader(f)
delimiter
fig = plt.gcf()
delimiter
parser = etree.XMLParser(schema=schema)
delimiter
mymean = [np.mean(myarray[t, yy, xx]) for t in np.arange(5)]
delimiter
raise MemoryError()
delimiter
m_action.add(action1, action2)
delimiter
img = img[c1:c1 + 25, r1:r1 + 25]
delimiter
bot.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
delimiter
w, v = np.linalg.eig(A)
delimiter
writer.writerow([name, membership])
delimiter
result = res.pop(0)
delimiter
result
delimiter
httplib.HTTPConnection.__init__(self, *args, **kwargs)
delimiter
anobj.amethod(x)
delimiter
loop = asyncio.get_event_loop()
delimiter
fig = plt.figure()
delimiter
0
delimiter
print(GetUserInput(listOfOptions, True).getInput())
delimiter
l[0]
delimiter
xcode - select - -install
delimiter
self.server.shutdown()
delimiter
print(datetime.datetime.fromtimestamp(time.time()))
delimiter
result = [[] for i in range(n)]
delimiter
conn.endheaders()
delimiter
img = Image.open(StringIO.StringIO(file_body))
delimiter
AMOServer.Restore(AMORestoreInfo)
delimiter
True
delimiter
df
delimiter
self.transport.loseConnection()
delimiter
self.window.add(self.button)
delimiter
actions.move_to_element(element)
delimiter
points.append((xs[i], ys[j], zs[k], v))
delimiter
data
delimiter
show_banner()
delimiter
isinstance(9, int)
delimiter
d2.year - d1.year + (d2.month - d1.month) / 12, (d2.month - d1.month) % 12
delimiter
right_thresh[:, :w - i] += img[:, i:]
delimiter
setattr(self, kw, arg)
delimiter
config = tf.ConfigProto(log_device_placement=True)
delimiter
signal.alarm(10)
delimiter
plt.imshow(g)
delimiter
some_dict = dict(zip(sample(population, n), sample(list(range(1, 100000)), n)))
delimiter
soup = BeautifulSoup(f.fp)
delimiter
self.content_length = content_length
delimiter
d[k].append(v)
delimiter
l_counts.sort(reverse=True)
delimiter
a = numpy.empty(shape=(4,), dtype=object)
delimiter
example.print_value_2(s)
delimiter
iter(self._choices)
delimiter
a[mask] = 10
delimiter
response = requests.get(URL.format(**params))
delimiter
parent = elem.getparent()
delimiter
f.close()
delimiter
jsonObj = json.load(f)
delimiter
unq_count = np.bincount(id)
delimiter
Doc.update(set__VAR=Val, set__VAR2=Val2)
delimiter
fig = plt.figure()
delimiter
self.button1.pack()
delimiter
print(p.sub(lambda mo: d[mo.group(1)], mystring))
delimiter
x = np.random.randint(0, 4, size=(8, 10))
delimiter
treeaslist.extend(self.makeList(aNode.rChild))
delimiter
np.allclose(pi[0, 0, 0], np.linalg.pinv(b[0, 0, 0]))
delimiter
os.close(1)
delimiter
r = requests.get(url)
delimiter
plt.ion()
delimiter
self.__dict__.clear()
delimiter
fig, ax = plt.subplots()
delimiter
result = df2.reindex(np.union1d(df1.index, df2.index))
delimiter
elem.clear()
delimiter
f = scipy.linspace(0, fs, N, endpoint=False)
delimiter
sequence2 = record2.seq
delimiter
posts = db.ListProperty(db.Key, indexed=False)
delimiter
ax.plot([1, 2], [1, 2])
delimiter
img_file = Image.open(image_name)
delimiter
transitions == 2
delimiter
signal.alarm(0)
delimiter
print(partsChild.childNodes[0].nodeValue)
delimiter
name.ljust(15)
delimiter
dct = json.loads(my_json_str)
delimiter
print(USAGE)
delimiter
True
delimiter
fig = plt.figure()
delimiter
self.crawler_process.start()
delimiter
pinit = [1.0, -1.0]
delimiter
len(set(y))
delimiter
pd.Series(1, set(x))
delimiter
foo = Foo()
delimiter
gc.collect()
delimiter
m = len(df)
delimiter
mask = np.ones(len(array), dtype=bool)
delimiter
ax.set_yticks(np.arange(AUC.shape[0]) + 0.5, minor=False)
delimiter
_generate_range_values(start, end)
delimiter
cb = fig.colorbar(cf, cax=cax)
delimiter
plt.barh(yvalues, xvalues, figure=fig)
delimiter
a = a[:, ::-1]
delimiter
non_list_items.append(item)
delimiter
suite = unittest.TestSuite(l)
delimiter
myParent.__init__(self, customParam)
delimiter
A -= A.mean()
delimiter
fig = plt.figure()
delimiter
soup = BeautifulSoup(urllib.request.urlopen(url).read())
delimiter
print(len(seq_record))
delimiter
itertools.compress(d, map(lambda x: x > 4, a))
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
plt.pause(0.02 * 200)
delimiter
os.remove(temporarylocation)
delimiter
log.addHandler(custom_logger.MyHandler())
delimiter
user = request.db.query(User).filter_by(id=userid).first()
delimiter
print(self.a, self.b)
delimiter
cls.funky = 1
delimiter
x = np.array([u0, phi0])
delimiter
parser.print_help()
delimiter
b.sum(axis=0)
delimiter
n, mod = divmod(n - 1, len(digits))
delimiter
list_1 = [item for item in list_1 if f(item)]
delimiter
cv2.waitKey(0)
delimiter
server.sendmail(emailfrom, emailto, msg.as_string())
delimiter
df1.dot(t)
delimiter
q.task_done()
delimiter
p = readdir(dir_p)
delimiter
len(x)
delimiter
a = np.array([list(range(1, 10)), list(range(1, 10))])
delimiter
heapq._siftup(h, i)
delimiter
bundle
delimiter
full.paste(img, (x * w, y * h))
delimiter
self.accept_imports()
delimiter
False
delimiter
df
delimiter
chunks = [files[i:i + chunksize] for i in range(0, len(files), chunksize)]
delimiter
random.shuffle(l)
delimiter
data_frame = data_frame.where(data_frame < 0, 0)
delimiter
np.median([9, 2, 0, 1, 0])
delimiter
text = text.replace(key, value)
delimiter
plt.plot(t, s, color=c)
delimiter
pylab.plot(t, s)
delimiter
print(self.x)
delimiter
res.append(tasks.process_read_pair.s(r1, r2))
delimiter
gevent.sleep(0.5)
delimiter
BY = np.take(B, y + 1)
delimiter
self.assertEqual(self.expected, isEven(self.num))
delimiter
db.session.add_all(items)
delimiter
json_object = json.load(response)
delimiter
self.conn.set_isolation_level(0)
delimiter
app = wx.PySimpleApp()
delimiter
{{element.product}} - {{element.price}}
delimiter
data = s.recv(1024)
delimiter
figure()
delimiter
initquacker()
delimiter
sys.getsizeof(2 ** 99)
delimiter
self.__dict__.pop(*args)
delimiter
zi = ml.griddata(x, y, z, xi, yi)
delimiter
print(nCr(4, 2))
delimiter
string = json.dumps(lst)
delimiter
df.iloc[-6:-1, (2)]
delimiter
pprint.pprint(list(chunks(list(range(10, 75)), 10)))
delimiter
print(NL)
delimiter
m = np.random.randint(20, 100)
delimiter
x.astype(int)
delimiter
buffer.open(QtCore.QIODevice.WriteOnly)
delimiter
print(f.readline())
delimiter
state = models.ForeignKey(USState)
delimiter
serializer_class = WdigetSerializer
delimiter
work.join()
delimiter
src_proj = src.GetProjection()
delimiter
df.dot(v2)
delimiter
fooarray[key1, key2] = value
delimiter
d = OrderedDict({x: x for x in range(10)})
delimiter
v = -np.cos(np.pi * x) * np.sin(np.pi * y) * np.cos(np.pi * z)
delimiter
Quota.extend(lstnans)
delimiter
random.sample(list(range(100)), 20)
delimiter
c.append(a[k])
delimiter
root = tk.Tk()
delimiter
cli.cmdloop()
delimiter
array = array[mask]
delimiter
log.addHandler(handler)
delimiter
f(i)
delimiter
dt = datetime(2008, 1, 1, 0, 0, 0, 0)
delimiter
D = NP.random.randn(10000 * 10).reshape(1000, 10)
delimiter
app = Flask(__name__)
delimiter
w.close()
delimiter
search_response = urllib.request.urlopen(url)
delimiter
deleteL[write_i:]
delimiter
d = np.diff(condition)
delimiter
http_server = tornado.httpserver.HTTPServer(application)
delimiter
self.f()
delimiter
i += 1
delimiter
W = nx.DiGraph()
delimiter
response
delimiter
ax.imshow(gray_data, cmap=cm.gray)
delimiter
area += x[i] * y[i + 1] - x[i + 1] * y[i]
delimiter
print(i, repr(time.time()))
delimiter
self.finish()
delimiter
dat2 = np.array([1, 2, 1, 2])
delimiter
len(self.m[0])
delimiter
id = Column(Integer, primary_key=True)
delimiter
f = lambda x: x * math.cos(x - 4)
delimiter
json_data = data.dumps()
delimiter
do_stuff(line)
delimiter
heapq.heappop(gens)
delimiter
out_f.getvalue()
delimiter
g.ax_joint.plot(row[0], row[1], color=colors[i], marker=markers[i])
delimiter
display.stop()
delimiter
request = mechanize.Request(url)
delimiter
profile = webdriver.FirefoxProfile()
delimiter
f = inspect.currentframe()
delimiter
screen.fill((200, 100, 200))
delimiter
print(data)
delimiter
ax2.plot(dates, data)
delimiter
prime_slices = [[prime for prime in primes if prime < n] for n in range(1000)]
delimiter
self.rowconfigure(0, weight=1)
delimiter
self.sck.recv()
delimiter
b = a[:]
delimiter
[0, 1, 2]
delimiter
name = models.CharField(max_length=100)
delimiter
white_areas = (red == 255) & (blue == 255) & (green == 255)
delimiter
math.pi
delimiter
1, 8, 1, 8
delimiter
{func: result.get() for func, result in list(results.items())}
delimiter
gene = info[this_re.start(0):this_re.end(0)]
delimiter
result = self.func(x)
delimiter
sys.getsizeof(foo1.__dict__)
delimiter
fig = plt.figure()
delimiter
gf.seek(0)
delimiter
fig, ax = plt.subplots()
delimiter
count += 1
delimiter
nltk.__version__
delimiter
k_keys_sorted = heapq.nlargest(k, dictionary)
delimiter
hax = plt.subplot(1, 2, 1)
delimiter
session.add(w_1)
delimiter
test.plus(1)
delimiter
console = logging.StreamHandler()
delimiter
db.session.add(group_from_factory)
delimiter
self.sock.connect_ex(self.socketpath)
delimiter
points = np.random.random((10, 2))
delimiter
b[a > 80] = funcC(a[a > 80])
delimiter
Fraction(1, int(xc) + 1)
delimiter
r = list(range(-int(n / 2), int(n / 2) + 1))
delimiter
fcntl.fcntl(fd, fcntl.F_SETFL, flags_save & ~os.O_NONBLOCK)
delimiter
self.idImage = self.canvas.create_image(0, 0, image=image1)
delimiter
s.connect((host, 9))
delimiter
l.sort()
delimiter
product.append(i * 5)
delimiter
a = [4, 6, 12]
delimiter
db_thread = threading.Thread(target=main_loop, args=(socket_file_name,))
delimiter
data = [[x.text.strip() for x in row] for row in table.getchildren()]
delimiter
os.path.join(sys._MEIPASS)
delimiter
app = Flask(__name__)
delimiter
request.user and request.user.is_authenticated()
delimiter
form = Product(request.form)
delimiter
i, j = np.indices(A.shape)
delimiter
decompressor.decompress(part)
delimiter
Vote.objects.filter(choice=self).count()
delimiter
kOUT[i] = func(TempLake[i], Z)
delimiter
type(foo)
delimiter
read_pdf = PyPDF2.PdfFileReader(pdf_file)
delimiter
gui.show()
delimiter
columns = [list() for i in range(len(headers))]
delimiter
do_final_thing_with(obj)
delimiter
pickle.dump(somedata, f)
delimiter
distance(a, c) + distance(c, b) == distance(a, b)
delimiter
foo(depth + 1)
delimiter
X.tocsc()[:, (unique_columns)]
delimiter
deque(f, maxlen=n)
delimiter
csv_contents.append(line)
delimiter
pd.io.json.dumps(summary)
delimiter
numC = random.randint(1, 100)
delimiter
stdout.read()
delimiter
self.output.reset()
delimiter
window.reserve_space(0, 0, height, 0)
delimiter
data = sorted(data) + [100000]
delimiter
label.show()
delimiter
data_loaded = json.loads(data)
delimiter
killasgroup = true
delimiter
numeric = lambda x: int(x) if x.isdigit() else 0
delimiter
name = db.Column(db.String(100))
delimiter
text[text.startswith(prefix) and len(prefix):]
delimiter
stack.pop()
delimiter
subsets = list(range(1, 2 ** n))
delimiter
base_pic.save(file=result_pic)
delimiter
out_queue.put(result)
delimiter
print(repr(points))
delimiter
result
delimiter
parse(InfiniteXML())
delimiter
self.f.flush()
delimiter
plt.imshow(im_out)
delimiter
i += 1
delimiter
x &= ~(1 << index)
delimiter
sm.stats.lillifors(x)
delimiter
handler = logging.FileHandler(filename)
delimiter
self.dataChanged.emit(QtCore.QModelIndex(), QtCore.QModelIndex())
delimiter
self.extend(list(args))
delimiter
print(info.groups())
delimiter
window = MainWindow()
delimiter
img.show()
delimiter
nms = nms.dropna(thresh=2)
delimiter
self.player.add(self.source, self.scaler, self.fvidscale_cap, self.sink)
delimiter
jfile = json.loads(line)
delimiter
l = [1, 5, 7]
delimiter
print(Ellipse((1.0, -1.0), (2.0, 0.5)).distance_from_origin())
delimiter
cls
delimiter
self.__dict__
delimiter
fs2 = frozenset([666, 42])
delimiter
buf.append(data)
delimiter
app.register_blueprint(admin)
delimiter
d.my_attr
delimiter
wrapper
delimiter
isinstance(f, io.IOBase)
delimiter
s = socket.create_connection(*args, **kwargs)
delimiter
print(x.data)
delimiter
findex.fromfile(f, findex[0])
delimiter
{{department.product_count}}
delimiter
func(**kwargs)
delimiter
self.a.b.c = value
delimiter
print(np.roll(v2, -rot)[:v.size])
delimiter
brush.add_point((event.x, event.y))
delimiter
seq.ratio()
delimiter
split = [l[i:i + len(l) / cols] for i in range(0, len(l), len(l) / cols)]
delimiter
arr = [(a * 2 if a < b * 10 else -a) for a in arr]
delimiter
x = bar(x)
delimiter
delattr(Dummy, attrname)
delimiter
embed = tk.Frame(root, width=500, height=500)
delimiter
computed[n]
delimiter
d[c] += 1
delimiter
rows = [row for row in reader]
delimiter
data = json.load(data)
delimiter
ind = np.arange(0, 12, 2)
delimiter
False
delimiter
do_your_subprocess_stuff(temp_file)
delimiter
before = datetime.datetime(year, 1, 1)
delimiter
seen = set()
delimiter
self.conn.set_isolation_level(old_isolation_level)
delimiter
dis.dis(lambda : str(100000))
delimiter
keys.sort()
delimiter
opener = urllib.request.build_opener(proxy_support)
delimiter
utcnow = Utcnow()
delimiter
y = np.interp(t, np.arange(len(y)), y)
delimiter
id(df.index), id(df2.index)
delimiter
plt.show()
delimiter
Base = declarative_base()
delimiter
self.get(username__iexact=username)
delimiter
x = np.linspace(np.min(roots) - 50, np.max(roots) + 50, num=1000)
delimiter
hov = ActionChains(wd).move_to_element(element)
delimiter
parse()
delimiter
currdir = os.path.dirname(os.path.abspath(__file__))
delimiter
soup = BeautifulSoup(content)
delimiter
a = np.random.randint(N, size=n)
delimiter
x = np.ravel(A).reshape((9, 1))
delimiter
get_field = cls._meta.get_field
delimiter
foo.method1()
delimiter
list(A.__dict__.keys())
delimiter
[0, 0, 0, 1]
delimiter
w = gtk.gdk.get_default_root_window()
delimiter
arg_dict[o] = ast.literal_eval(arg)
delimiter
list(range(start, stop + step, step))
delimiter
lst.append(old_d[key][i])
delimiter
delta = n / 10
delimiter
l = []
delimiter
i += 1
delimiter
jsonf.close()
delimiter
len(self._od)
delimiter
noo = Foo()
delimiter
print(i, foo())
delimiter
self.Add(self.buttonPanel2, 0, wxALL | wxALIGN_LEFT, 5)
delimiter
next(bar)
delimiter
funcs.append(lambda : x)
delimiter
fig = plt.figure(1)
delimiter
hxs = HtmlXPathSelector(response)
delimiter
filteredKeys = [key for key in list(aDict.keys()) if searchString in key]
delimiter
d[keys]
delimiter
json_data = open(json_file)
delimiter
handler.response.write(content)
delimiter
pprint.pprint(L)
delimiter
response
delimiter
self.open(self.host, self.port)
delimiter
self.my_class = my_class
delimiter
academic_year = models.CharField(max_length=255)
delimiter
print(response)
delimiter
fig, a = plt.subplots()
delimiter
x + x
delimiter
wrapper
delimiter
[1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0]
delimiter
f.read()
delimiter
outfile.write(file1.read())
delimiter
plt.plot_date(dates, y_values)
delimiter
digits = (character for character in input_string if character.isdigit())
delimiter
map(lambda k: nthRootOfr * exp((t + 2 * k * pi) * 1j / n), list(range(n)))
delimiter
plt.scatter(group.x, group.y, s=sizes[i], alpha=0.5, label=labels[i])
delimiter
df
delimiter
ipc_event_cmd.buffer.add(data_str)
delimiter
print(i)
delimiter
self._tarobj = tarobj
delimiter
sample.index = pd.MultiIndex.from_tuples(list(product(list(range(100)), time)))
delimiter
my_mesh.SetControlPointAt(v, 0)
delimiter
d[i].append(x[i])
delimiter
L.remove(M)
delimiter
self.value
delimiter
obj = MyModel.objects.create(val=1)
delimiter
self.list_one.setGeometry(0, 0, 500, 100)
delimiter
threading.Thread(target=op).start()
delimiter
p = Pool(5)
delimiter
matplotlib.__version__
delimiter
d1.update(d2)
delimiter
self._test = get_initial_value()
delimiter
tests.append(make_test(i))
delimiter
bio_tagged_sent.append((token, tag))
delimiter
[1, 1, 0, 1]
delimiter
app = Flask(__name__)
delimiter
ax.xaxis.set_major_locator(plt.FixedLocator(x_coordinates))
delimiter
print(re.sub(pat, repl, str))
delimiter
list(x.values())
delimiter
lengths = {key: len(value) for key, value in d.items()}
delimiter
next(generator)
delimiter
pprint.pprint(fruit)
delimiter
self._stdout.close()
delimiter
self.setPath(path)
delimiter
existing_item.put()
delimiter
cskel = np.logical_not(skel)
delimiter
li.append(li[-1] + 1)
delimiter
type(0)
delimiter
B[2, inverse[A[1] == 2]] = A[2, A[1] == 2]
delimiter
self.submit_form(login_form)
delimiter
data = []
delimiter
indices[tuple(column)].append(index)
delimiter
a = []
delimiter
max(stats, key=stats.get)
delimiter
test()
delimiter
math.ceil(4500 / 1000)
delimiter
my_handler.setFormatter(log_formatter)
delimiter
reshaped_data_m = tranposed_data_m.reshape(250000, 64, 64, 2)
delimiter
[(x + [nan] * (max_lenght - len(x))) for x in l]
delimiter
lst.append(i + 1)
delimiter
fileobj.close()
delimiter
d = np.arange(1, 21)
delimiter
print(args.a, args.b)
delimiter
print(sorted(finder.nbest(bigram_measures.raw_freq, 2), reverse=True))
delimiter
plt.xlim(1.8, 9.2)
delimiter
plt.plot(data2)
delimiter
s.bind((HOST, PORT))
delimiter
a += 1
delimiter
self.template = self.template.lower()
delimiter
Thread.run(self)
delimiter
os.fstat(g.fileno()).st_nlink
delimiter
merged = collections.defaultdict(list)
delimiter
sample_func()
delimiter
a = [[0] * 10] * 10
delimiter
mydict = recursivedict()
delimiter
dataQ = Queue.Queue(maxsize=0)
delimiter
do_something(line)
delimiter
parser = argparse.ArgumentParser()
delimiter
[7, 0, 7],
delimiter
y, x = np.nonzero(img)
delimiter
chars.append(escaped_str[i + 1])
delimiter
permissions[0].id
delimiter
pool.join()
delimiter
sum((w[i] * (y[i] - s(x[i]))) ** 2, axis=0) <= s
delimiter
dict(form=g)
delimiter
list(calendar.day_name)
delimiter
fh.close()
delimiter
yf = np.random.uniform(np.min(y), np.max(y), size=(f,))
delimiter
print(str(1).zfill(2))
delimiter
[1, 1, 1, 0]
delimiter
subplot(121)
delimiter
sock.settimeout(0.01)
delimiter
merged = pd.concat(df_list, axis=0)
delimiter
np.array(data[:]).reshape(shape[:])
delimiter
data = np.tile(data, (50, 50))
delimiter
self.list.insert(i, v)
delimiter
c = array([[1, 1, 1]])
delimiter
print(row)
delimiter
count += 1
delimiter
file, line
delimiter
glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR)
delimiter
d
delimiter
self._window.add(vbox)
delimiter
foo_noniterable(noniterable)
delimiter
validate_email(email.strip())
delimiter
session.add(new_prod)
delimiter
p(1) / 2 + p(1) / 2 + 1 / 2
delimiter
self.proxy.setSourceModel(self.model)
delimiter
setattr(self, key, value)
delimiter
l.append(foo)
delimiter
cls(list(datadict.items()))
delimiter
my_list = json.loads(data[0][1])
delimiter
f = x & 255
delimiter
username = db.Column(db.String(80), unique=True)
delimiter
b.extend([0] * (minlen - len(b)))
delimiter
self.layers += [NeuronLayer(self.n_outputs, self.n_neurons_to_hl)]
delimiter
m = regex.match(s)
delimiter
[i for i in eq2.atoms(Pow) if i.base == a]
delimiter
ispower(50, 5)
delimiter
dftmtx = np.fft.fft(np.eye(N))
delimiter
response = urllib.request.urlopen(request_object)
delimiter
[]
delimiter
nan_idx = np.where(np.isnan(a))[0]
delimiter
count += 1
delimiter
a = np.array([0.1, 0.2, 1.0, 1.0, 1.0, 0.9, 0.6, 1.0, 0.0, 1.0])
delimiter
json_text = json.load(json_file)
delimiter
colors = np.r_[np.linspace(0.1, 1, 5), np.linspace(0.1, 1, 5)]
delimiter
print(df)
delimiter
page.mergePage(new_pdf.getPage(0))
delimiter
Foo.x = range(1, 4)
delimiter
format_to_year_to_value_dict = defaultdict(dict)
delimiter
sampleip0 = []
delimiter
m = [0] * (N ** 2 + 1)
delimiter
sendSock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)
delimiter
lock.release()
delimiter
lxml.version
delimiter
row in self.data[column]
delimiter
keys = list(dictionary.keys())
delimiter
bin(a & b)
delimiter
extension = mimetypes.guess_extension(content_type)
delimiter
updiag = [0.5] * n
delimiter
app = Flask(__name__)
delimiter
r = q.T.reshape(-1, k, n)
delimiter
logger.propagate = False
delimiter
print(f.root.data[1:10, 2:20])
delimiter
list(islice(set(a).difference(b), 100))
delimiter
out[0]
delimiter
main()
delimiter
splits = list((m.start(), m.end()) for m in re.finditer(pattern, string))
delimiter
w.setLayout(layout)
delimiter
self.properties = {}
delimiter
self._close_database()
delimiter
ipshell()
delimiter
response = br.submit()
delimiter
ctx.stroke()
delimiter
oldmodule.__dict__.clear()
delimiter
poller.register(client_receiver, zmq.POLLIN)
delimiter
ax = plt.subplot(111)
delimiter
print(np.dtype(float).itemsize)
delimiter
tree_selection = treeview.get_selection()
delimiter
output_notebook()
delimiter
log.error_log.addHandler(h)
delimiter
outputfile.write(line)
delimiter
basename = os.path.basename(filename)
delimiter
log.msg(response)
delimiter
plt.show()
delimiter
print([word for word in lst if word in test])
delimiter
exclude_patterns = []
delimiter
s = Search.from_dict(body)
delimiter
LB[i] <= x[i] <= UB[i]
delimiter
logging.config.fileConfig(_log_config_location)
delimiter
poly_verts = [(2, 2), (5, 2.5), (6, 8), (2, 2)]
delimiter
a * x * x + b
delimiter
chars += len(word) + 1
delimiter
columns = list(set(columns))
delimiter
pixel = walnut.getpixel((x0, y0))[:-1]
delimiter
as_strided(A2[0], shape=(2, 2, 2), strides=(8, 8, 4))
delimiter
HttpResponseBadRequest()
delimiter
object_list.filter(user=request.user)
delimiter
com.convert_robj(rdfrm)
delimiter
p(10)
delimiter
fig, ax = plt.subplots(1, 1, figsize=(9, 5))
delimiter
print(s)
delimiter
y = np.cos(angle)
delimiter
result.result
delimiter
dates = [df.index[i] for i in row_pos]
delimiter
app.MainLoop()
delimiter
v_box.addWidget(self.list_one)
delimiter
plt.colorbar()
delimiter
BLUE_MAX = np.array([50, 50, 255], np.uint8)
delimiter
FACTORY_FOR = Comment
delimiter
threading.Thread(target=tail_forever, args=(fn,)).start()
delimiter
a.argsort()
delimiter
timestamp = time.mktime(foreign_dt).astimezone(pytz.utc).timetuple()
delimiter
L = sorted(zip(x, y), key=operator.itemgetter(0))
delimiter
new_df = multiindex_me(mydf)
delimiter
False
delimiter
bytearray(content[current_pos:final_pos])
delimiter
spamwriter.writerow(row)
delimiter
list(islice(iterable, n))
delimiter
-0.0121994
delimiter
result = [(item * item) for item in get_list() or []]
delimiter
[1, 2]
delimiter
newImage.paste(im, (x1, y1, x1 + old_width, y1 + old_height))
delimiter
image = ImageGrab.grab()
delimiter
mymodule.myfunc()
delimiter
single = [i for i in chain.from_iterable(combined)]
delimiter
mng.resize(*mng.window.maxsize())
delimiter
print(parser.parse_args())
delimiter
patch_distutils()
delimiter
self.set_positions((xs[0], ys[0]), (xs[1], ys[1]))
delimiter
words = string.split()
delimiter
keys = A.keys() & B.keys()
delimiter
data, addr = sock.recvfrom(1024)
delimiter
dis.dis(fr.f_code)
delimiter
thingys.append(x)
delimiter
wrapper
delimiter
loop = asyncio.get_event_loop()
delimiter
line = line.rstrip().split(delimiter)
delimiter
count_2.most_common()
delimiter
f = mux41(0, 1, 1, 0)
delimiter
b = [4, 5, 6, 7]
delimiter
self.number_of_employee = number_of_employee
delimiter
max_list = group_list.map(reduce_by_max).collect()
delimiter
print(f.read())
delimiter
spl = [list(y) for x, y in itertools.groupby(lst, lambda z: z == w) if not x]
delimiter
data = f.readlines()
delimiter
cls.D[t]()
delimiter
get_something(a)
delimiter
zvalues = f(xvalues, yvalues)
delimiter
root.lift()
delimiter
dy = [0.5, 0.5, 0.5]
delimiter
self.obj = obj
delimiter
print(df1)
delimiter
filehandle.truncate()
delimiter
fig.subplots_adjust(hspace=0.1, wspace=0.1)
delimiter
-ea
delimiter
xlock = threading.Lock()
delimiter
gram_matrix
delimiter
a.append(5)
delimiter
df.Name.str.contains(pat)
delimiter
df1 = pd.DataFrame(d)
delimiter
print(f())
delimiter
pimage.putpalette(PALETTE)
delimiter
{}
delimiter
opener.add_handler(my_handler)
delimiter
self.scrollbar.grid(row=0, column=1, sticky=(N, S, E))
delimiter
customer = models.CharField(max_length=150)
delimiter
pyplot.show()
delimiter
old_stdout_fileno = sys.stdout.fileno()
delimiter
frame.pack()
delimiter
random.shuffle(target)
delimiter
arg(a, b, c)
delimiter
Process(target=loop_a).start()
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
grid = np.random.random((10, 10))
delimiter
self.typemap = {}
delimiter
s.close()
delimiter
idx = np.argmax(means)
delimiter
root = tree.getroot()
delimiter
maxx = max(dic.values())
delimiter
min(later, key=lambda d: get_datetime(d[0]))
delimiter
self._add(val, self.root)
delimiter
self.view.setDragDropMode(QtGui.QAbstractItemView.InternalMove)
delimiter
_decorator
delimiter
histo = gg.apply(lambda x: x.count())
delimiter
arr[i] = get_something_from_database()
delimiter
X = np.arange(size)
delimiter
fn = sys.argv[1]
delimiter
print_size(**dict)
delimiter
signal.signal(signal.SIGHUP, handler)
delimiter
L = [1, 1, 2, 2, 2, 2]
delimiter
imported_modules = {m: importlib.import_module(m) for m in modules_to_import}
delimiter
A * x
delimiter
clf = linear_model.LinearRegression()
delimiter
counts, bins = np.histogram(x, bins=num_bins)
delimiter
np.vectorize(d.__getitem__)(a)
delimiter
existing_category = db.get(category_key)
delimiter
print(clusters.shape)
delimiter
ElementTree.dump(root)
delimiter
W = DFT_matrix(N)
delimiter
os.mkdir(newdir)
delimiter
req = urllib.request.Request(path, mydata)
delimiter
_autoargs
delimiter
False
delimiter
admin.autodiscover()
delimiter
x = dict((row.SITE_NAME, row.LOOKUP_TABLE) for row in cursor)
delimiter
chrome_options = webdriver.ChromeOptions()
delimiter
f.subs({x: 0})
delimiter
conn.commit()
delimiter
title = models.CharField(max_length=100)
delimiter
df = df[df.date1 == df.date2]
delimiter
a[a > 0.7].min()
delimiter
p.close()
delimiter
B = pd.Series(list(range(1, 5)))
delimiter
numpy.unravel_index(a.argmax(), a.shape)
delimiter
figs = list(map(plt.figure, plt.get_fignums()))
delimiter
y, x = find_image(im, tpl)
delimiter
saver = tf.train.Saver()
delimiter
gtk_dlls = []
delimiter
frame.Show(True)
delimiter
IsoInB = 0
delimiter
IsoOutA = 0
delimiter
IsoOutB = 0
delimiter
self.parser.set(self.name, attr, str(value))
delimiter
logger.addHandler(ch)
delimiter
df = pd.read_csv(io.StringIO(temp), names=list(range(10)))
delimiter
mapping = dict(zip(lookup[:, (0)], list(range(len(lookup)))))
delimiter
index += 1
delimiter
arr[i, j] += 1
delimiter
base_value * 1.0 / 2.54
delimiter
pos = nx.spring_layout(G)
delimiter
print(is_new_style(old_style))
delimiter
A = np.random.uniform(0, 2 * np.pi)
delimiter
x = [[]] * 4
delimiter
x.add_to_one(b=9)
delimiter
self.console.pack(fill=tk.BOTH)
delimiter
df
delimiter
obj.foo
delimiter
os.path.normpath(path1) in list_of_paths
delimiter
self.button.clicked.connect(self.handleOpenDialog)
delimiter
root.mainloop()
delimiter
assert len(string_1) == len(string_2)
delimiter
new_queue = OrderedDict()
delimiter
profiler.runcall(self._handle, *args, **options)
delimiter
self._advance()
delimiter
m.set_array([])
delimiter
children.append(node.keys[i])
delimiter
recall = np.linspace(0.0, 1.0, num=42)
delimiter
print(os.strerror(e.errno))
delimiter
observation = iter(data)
delimiter
s.ix[x:y].asfreq(BDay())
delimiter
graph = fig.add_subplot(111)
delimiter
sys.exit(1)
delimiter
random.random() >= p
delimiter
f = interpolate.interp1d(x, y)
delimiter
false
delimiter
all_lines = infile.readlines()
delimiter
functype = ctypes.CFUNCTYPE(restype, *argtypes)
delimiter
self.matrix.__setitem__(index, item)
delimiter
stackstr
delimiter
title = models.CharField(max_length=50)
delimiter
dif = np.setdiff1d(col, a[:, (0)])
delimiter
[snip]
delimiter
help(foo.myfunc)
delimiter
incrementerBy2 = Incrementer(2)
delimiter
t2start, t1end
delimiter
t1start, t2end
delimiter
t1start, t1end
delimiter
lu_obj = scipy.sparse.linalg.splu(a_sps)
delimiter
sys.stdout = orig_stdout
delimiter
result.append(item)
delimiter
print(estimate_pi(s1, s2))
delimiter
data = socket.gethostbyname(d)
delimiter
plt.imshow(polar_grid, extent=(theta.min(), theta.max(), r.max(), r.min()))
delimiter
ctx.load_verify_locations(capath=sys.argv[2])
delimiter
xidx, yidx, zidx = np.where(hist > 0)
delimiter
t = Thread(target=getabit, args=(pobj.stdout, q))
delimiter
httpd.serve_forever()
delimiter
c.append([(A - B) for A, B in zip(a[i], b[i])])
delimiter
profs.append(user)
delimiter
print(result)
delimiter
self.arrays[j][i + shift]
delimiter
byte = f.read(1)
delimiter
finder.apply_ngram_filter(creature_filter)
delimiter
sleep(5)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
new_user
delimiter
vals = sorted((sinval(i), i) for i in range(1024))
delimiter
sys.argv.insert(1, name)
delimiter
thread.start()
delimiter
array2.max()
delimiter
print([i for i in sentence.lower().split() if i not in stop])
delimiter
a, b, c = [fgen(n) for n in L]
delimiter
self.fn(*sub_args)
delimiter
increment()
delimiter
K = np.arange(n - 2)
delimiter
s.send(l)
delimiter
outline = np.array(list(dict(reversed(coords)).items()) + list(dict(coords).items()))
delimiter
dt_sec = helper(dt)
delimiter
print(json.loads(thing, object_hook=object_hook))
delimiter
writer.save()
delimiter
mktime(gmtime())
delimiter
im = ax.imshow(data)
delimiter
container.__iter__()
delimiter
print(repr(dt))
delimiter
foo[1]
delimiter
NEWLIST.append(i)
delimiter
self.saver.save(self.session, fn)
delimiter
output.write(left + new_delimiter.join(row) + right + newline)
delimiter
s.add(i)
delimiter
lc.set_linewidth(2)
delimiter
self.temperature += 1
delimiter
globals()[name] = __import__(name)
delimiter
b.extend(s)
delimiter
[0, 0, 1, 1]
delimiter
ax2.xaxis.set_major_locator(copy.copy(Locator))
delimiter
self.exec_()
delimiter
[list_to_int(l) for l in combine(xs, ys)]
delimiter
logger.info(__name__)
delimiter
Test.A
delimiter
dist = np.sum(dist, axis=1)
delimiter
tree = {}
delimiter
match = pattern.match(s)
delimiter
result.put(target(*args))
delimiter
width = self.canvas1.winfo_width()
delimiter
ax2 = fig.add_subplot(222)
delimiter
abspath = lambda *p: os.path.abspath(os.path.join(*p))
delimiter
f.write(next(rbg))
delimiter
output.write(line)
delimiter
self[self.nearest_key(key)]
delimiter
x = MyClass(*args, **kw)
delimiter
afile.close()
delimiter
ax2 = plt.subplot(gs[2])
delimiter
self.setPen(QPen(Qt.red, 1.75))
delimiter
head = models.BooleanField(default=True)
delimiter
xml = doc.toprettyxml()[len(declaration):]
delimiter
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
p.append(tuple(k))
delimiter
seen_add(element)
delimiter
url = urllib.parse.urlunsplit(url)
delimiter
inst.__dict__[self.name]
delimiter
post.save()
delimiter
fLim = [(x / 7.0) for x in range(1, 8)]
delimiter
(a + b + c ^ 2 - (a ^ 2 + b ^ 2 + c ^ 2)) / 2
delimiter
df = DataFrame(data=list(result), columns=list(result.keys()))
delimiter
x -= 1
delimiter
do_something_with(out)
delimiter
l = [0, 1, 1]
delimiter
plot(1)
delimiter
fruit[1] = int(fruit[1]) + 1
delimiter
tree = parse(BytesIO(some_byte_string))
delimiter
logger = logger.YarnLogger()
delimiter
2 - 1 < 0
delimiter
print(result.get())
delimiter
inArray = np.asarray(inArray, dtype=np.double)
delimiter
data = [sheet.cell_value(0, col) for col in range(sheet.ncols)]
delimiter
y = np.random.random(10)
delimiter
communication_set = CommunicationFormSet(request.POST, instance=my_contact)
delimiter
a.set_xticklabels(a.get_xticks(), fontProperties)
delimiter
True
delimiter
True
delimiter
saver = tf.train.Saver(sharded=True)
delimiter
instance.save()
delimiter
b = copy.copy(a)
delimiter
user = oauth.get_current_user(SCOPE)
delimiter
ax = fig.add_subplot(111)
delimiter
arr = numpy.arange(10)
delimiter
result = []
delimiter
product.listing.save()
delimiter
output.addPage(page)
delimiter
ax = fig.add_subplot(111)
delimiter
dt = nofrag_dt.replace(microsecond=int(frag))
delimiter
pos = np.arange(len(alphab))
delimiter
self.save_object(sub_object)
delimiter
ax.scatter(x, y)
delimiter
more_settings.modify(globals())
delimiter
result.update({k: v})
delimiter
deleteself.left[0:x]
delimiter
doubles = dict()
delimiter
line_dic[last].append(x)
delimiter
OrderedDict()
delimiter
df_confusion = pd.crosstab(y_actu, y_pred)
delimiter
print(user.id, user.email)
delimiter
os.utime(path, (accessed_time, modified_time))
delimiter
line = line.lower()
delimiter
func.current_timestamp(type_=types.Time, bind=engine2)
delimiter
False
delimiter
individual_dict[a.individual].append(a)
delimiter
np.abs(stats_z) > 2
delimiter
result = pickle.load(infile)
delimiter
parser._actions[0]
delimiter
-libxml2 - dev
delimiter
-libfreetype6 - dev
delimiter
test.sin_2_(byref(x))
delimiter
pairs = set(frozenset((w1, w2)) for w1 in words for w2 in prefixes[w1[1:]])
delimiter
condition = np.abs(x) < 1
delimiter
console.log(String(i), String(i / 10))
delimiter
intercept = np.ones(mX.shape[0]).reshape(mX.shape[0], 1)
delimiter
Base = declarative_base()
delimiter
touch(os.path.join(root, filename))
delimiter
results.append(line)
delimiter
ques_type = models.SmallIntegerField(default=2)
delimiter
df[filter_col]
delimiter
state = models.CharField(max_length=100)
delimiter
pp.imshow(matrix)
delimiter
print(sum(1, 1))
delimiter
list(choice(j[user_input]).values())[0]
delimiter
ofp.write(line)
delimiter
[(part1 + part2) for part1, part2 in zip(xs[1::2], xs[2::2])]
delimiter
greetings.hello()
delimiter
a = np.array([[1, 5, np.nan, 6], [10, 6, 6, np.nan]])
delimiter
soup = Soup(open(filename))
delimiter
df
delimiter
screen = curses.initscr()
delimiter
tag, body = next(iter(list(d.items())))
delimiter
app = current_app._get_current_object()
delimiter
fig = plt.figure()
delimiter
db = SQLAlchemy(app)
delimiter
test = Test()
delimiter
map.seek(0)
delimiter
print(type(self))
delimiter
fig.canvas.draw()
delimiter
print(a[167])
delimiter
n_rows = len(list(data.keys()))
delimiter
out.println(msg)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
dfs_rec({Sequence1: [Translate], Translate: [Sequence1]}, Sequence1)
delimiter
print(jsbeautifier.beautify(script.string))
delimiter
session = Session()
delimiter
my_list = in_list[:]
delimiter
random.seed(seed)
delimiter
print(repr(profile))
delimiter
contourf(X, Y, out)
delimiter
capture = cv.CaptureFromFile(filename)
delimiter
x = np.zeros(N, N)
delimiter
DTYPE_f64 = np.float64
delimiter
c = pycurl.Curl()
delimiter
B.shape
delimiter
np.linalg.matrix_rank(a)
delimiter
print(match_obj.group(1))
delimiter
dmap[d] != dmap[newd]
delimiter
COMPRESS_OFFLINE = False
delimiter
raise TimeoutException(message)
delimiter
non_unique_column_idx = npi.multiplicity(a, axis=1) > 1
delimiter
x[-1]
delimiter
d[k].append(v)
delimiter
self.store.append(self.key, df, data_columns=True)
delimiter
-next_up(-x)
delimiter
enc.n_values_
delimiter
a, b, c, d = np.ogrid[:n, :n, :n, :n]
delimiter
s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_V6ONLY, 1)
delimiter
print(ind[A[ind] == value])
delimiter
t = currT
delimiter
y.groupby((y != y.shift()).cumsum()).cumcount() + 1
delimiter
c.setopt(pycurl.TIMEOUT, 10)
delimiter
categories_w_rand_books.append((category, collection[category.id]))
delimiter
logging.info(line)
delimiter
argrelmax(y)[0]
delimiter
print(roundPartial(11.12, 0.25))
delimiter
print(roundPartial(5.24, 0.25))
delimiter
print(roundPartial(9.76, 0.25))
delimiter
bodylist.append(tempset)
delimiter
res
delimiter
items = db.get(random_keys)
delimiter
a, b, c = int_list
delimiter
rads = atan2(-dy, dx)
delimiter
bins = bins[:-1] + (bins[1] - bins[0]) / 2
delimiter
pixbuf = loader.get_pixbuf()
delimiter
AT & F0
delimiter
time.sleep(0.1)
delimiter
[p.stdout, p.stderr],
delimiter
sys.stdout.buffer.write(os.urandom(1000000).translate(tbl))
delimiter
exampleName(row, column, name)
delimiter
print(x)
delimiter
queryset = User.objects.all()
delimiter
myfunc(*mylist)
delimiter
[0, 2, 1]
delimiter
set_.update(list(dict_.keys()))
delimiter
plt.legend(loc=0)
delimiter
sqsregion = sqsregion or SQSREGION
delimiter
pythoncom.PumpWaitingMessages()
delimiter
print(k, v, x)
delimiter
a = np.random.random(100)
delimiter
canvas.itemconfigure(interior_id, width=canvas.winfo_width())
delimiter
False
delimiter
print(res)
delimiter
[]
delimiter
instance = SomeClass()
delimiter
widget.hide()
delimiter
configure_blueprints(app)
delimiter
mail.quit()
delimiter
self.lines.append(self.addLine(xc, 0, xc, height, pen))
delimiter
self.Bind(wx.EVT_TIMER, self.onTimer, timer)
delimiter
[1, 0, 1]
delimiter
print(a)
delimiter
ax2 = fig.add_subplot(122)
delimiter
df.columns = cols
delimiter
repr(d)
delimiter
split_points = [(x, y + 1) for x, y in split_points]
delimiter
ftp_handle.cwd(name)
delimiter
cr.paint()
delimiter
[0, 0, 0, 0, 0, 0, 162, 1, 162, 2],
delimiter
ET.ElementTree(root), ns
delimiter
test_suite.addTest(suiteFilter.suite())
delimiter
[False, True, True, True, True],
delimiter
print(files)
delimiter
[1, 1, 0, 0]
delimiter
x = np.random.rand(m, n)
delimiter
print(df1.date.dtypes)
delimiter
InterfaceClass(iface.__name__, (iface,), fields)
delimiter
b = Counter(0, 1, 1)
delimiter
t.daemon = True
delimiter
scraps.save()
delimiter
t.join()
delimiter
numpy.fix(a).astype(int)
delimiter
print(df)
delimiter
do_work()
delimiter
a.attr.append(1)
delimiter
print(a + b)
delimiter
slither / setup.py
delimiter
np.fill_diagonal(b, 0)
delimiter
dis.dis(use_floordiv)
delimiter
print(retrieved_body)
delimiter
newMtx = Mtx[:, (nonzero(s.T > 0)[0])]
delimiter
groups.size().unstack()
delimiter
unique = {urlparse(u).netloc for u in urls}
delimiter
setattr(cls, name, op_hook)
delimiter
response = self.client.get(url)
delimiter
print(string2[match.b:match.b + match.size])
delimiter
X, Y = np.meshgrid(x, y)
delimiter
X = np.random.normal(size=(10, 5))
delimiter
numpy.lib.stride_tricks.as_strided(a, shape=shape, strides=strides)
delimiter
y.groupby((y != y.shift()).cumsum()).cumcount()
delimiter
print(word)
delimiter
col2 = matrix[:, (2)]
delimiter
extractDefines(TEST4)
delimiter
x.f()
delimiter
seekpoint = fro.tell()
delimiter
y = np.arange(-1, 1, 0.2)
delimiter
chapter = form.create(parent=book)
delimiter
signal_axes = fig.add_subplot(211)
delimiter
c()
delimiter
line = linecache.getline(filename, lineno, traceback.tb_frame.f_globals)
delimiter
layout = QtGui.QHBoxLayout()
delimiter
row_as_dict = dict(row)
delimiter
client = client(url)
delimiter
idx = [val] + df.index.drop(val).tolist()
delimiter
request.GET._mutable = False
delimiter
mydic[key] = [value]
delimiter
list == [1, 2]
delimiter
a()
delimiter
Py_Initialize()
delimiter
my_content.append(data)
delimiter
args = parse.parse_args()
delimiter
x = np.arange(0, size, 1, float)
delimiter
create_ranges(start, stop, 5, endpoint=False)
delimiter
firstline = next(f).split()
delimiter
col_ind = [i for ids in list(d.values()) for i in ids]
delimiter
indices = [i for i, x in enumerate(ar) if fnmatch.fnmatch(x, pattern)]
delimiter
mngr = plt.get_current_fig_manager()
delimiter
new_labels = labels[2:]
delimiter
l2 = [a[:i + 1] for a in l1 for i in range(len(a))]
delimiter
cipher = AES.new(key, AES.MODE_CBC, IV=iv)
delimiter
df
delimiter
not array[0]
delimiter
g += a
delimiter
dG.add_node(word)
delimiter
str(n)
delimiter
res1 = numpy.array(list(zip(*zip_longest(fillvalue=0, *a))))
delimiter
print(len(ids))
delimiter
scene = bpy.context.scene
delimiter
collection.set_facecolor(face_color)
delimiter
spl.append([])
delimiter
points = [(random(), random()) for _ in range(1000)]
delimiter
vectors = np.random.rand(100, 25)
delimiter
raw_data += bytes
delimiter
curses.setsyx(-1, -1)
delimiter
od.setdefault(ele[0], []).extend(ele[1:])
delimiter
z.close()
delimiter
heapq.heapify(self._data)
delimiter
y_coord = radius * np.sin(theta) * np.sin(phi)
delimiter
False
delimiter
check_token
delimiter
ax1 = plt.subplot(2, 1, 1)
delimiter
recvSock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)
delimiter
cursor = self.db.cursor()
delimiter
out.append(A[0][::-1])
delimiter
session.expire_all()
delimiter
forced_managed = True
delimiter
x = np.array([6.4, 6.500000001, 6.5, 6.51])
delimiter
x.append(5)
delimiter
result.append(word)
delimiter
conn.quit()
delimiter
start = time()
delimiter
f.cwd(DIRN)
delimiter
a = []
delimiter
x += mydict.get(count, 0)
delimiter
x, y
delimiter
value = df.iloc[5]
delimiter
word_list2 = sorted(word_list2, key=itemgetter(1), reverse=True)
delimiter
print(i + --+i)
delimiter
tuple(v)
delimiter
adobe_to_srgb(image)
delimiter
QObject.__init__(self, *args, **kwargs)
delimiter
fig = plt.figure()
delimiter
self.queue.put(message)
delimiter
int(number / interval) * interval
delimiter
plt.draw()
delimiter
np.all(x[idx, J, I] == y)
delimiter
v = [1, 4, 5]
delimiter
root = Tkinter.Tk()
delimiter
my_secure_rng.randrange(n, m)
delimiter
a[inds][mask]
delimiter
lib / nark
delimiter
cashflow
delimiter
p.print_help()
delimiter
application.main.show()
delimiter
colorjh = jmag - hmag
delimiter
map = mmap.mmap(f.fileno(), 0, prot=mmap.PROT_READ)
delimiter
print(list(squares(5, 50)))
delimiter
killer = GracefulKiller()
delimiter
worksheet = workbook.add_worksheet()
delimiter
plotlyjs
delimiter
split_string.append(identifier[previous:match.start()])
delimiter
d[x[4]]
delimiter
f.seek(0)
delimiter
self.app = MyApplication(param1, param2).getApplication().test_client()
delimiter
example()
delimiter
requests_logger.setLevel(logging.DEBUG)
delimiter
packet = ip.assemble(ip_packet, 0)
delimiter
df1.columns = df1.columns.droplevel(level=1)
delimiter
sim.start()
delimiter
url_pattern.findall(urls)
delimiter
print(df)
delimiter
dataframe[column].value_counts().index.tolist()
delimiter
z = list(zip(t, t2))
delimiter
lookup[key(item)].append(item)
delimiter
property2 = ndb.StringProperty()
delimiter
dt = nofrag_dt.replace(microsecond=int(frag))
delimiter
b = np.array([a])
delimiter
fig = plt.figure()
delimiter
2 * x
delimiter
json.dump(data, jsonfile)
delimiter
self.end_headers()
delimiter
part_number = models.CharField(max_length=10)
delimiter
print(df)
delimiter
closest_keys = [k for k, v in list(d.items()) if abs(v - target) == min_diff]
delimiter
main(sys.argv)
delimiter
your_domain = Site.objects.get_current().domain
delimiter
args = [iter(iterable)] * n
delimiter
__file__
delimiter
img = img.smooth()
delimiter
b = np.random.randint(l, size=k)
delimiter
lay.addWidget(le)
delimiter
setd2 = set(d2)
delimiter
lst.sort(key=weight_key)
delimiter
response
delimiter
defaultdict(ddict)
delimiter
pprint(data)
delimiter
b = [4, 5, 6]
delimiter
server = BaseHTTPServer.HTTPServer(server_address, TestHandler)
delimiter
imputed_array = np.copy(arr)
delimiter
s = requests.Session()
delimiter
[mysqld]
delimiter
r = list(csv.reader(file_obj))
delimiter
B.shape
delimiter
overlay = mask * image1 + -mask * image2
delimiter
match = re.match(regex, thestr)
delimiter
dct = {}
delimiter
self.a = a
delimiter
out_csv.writerows(in_txt)
delimiter
results.append(word_length)
delimiter
self.__fill_left()
delimiter
p.join()
delimiter
result += Data[..., (0)]
delimiter
ranking = []
delimiter
app = QtGui.QApplication([])
delimiter
ax.add_patch(sea_patch)
delimiter
buf = StringIO.StringIO(req.read())
delimiter
[fn(*args, **kw) for x in range(count)]
delimiter
~reduce(np.logical_and, map(pred, list(range(A.shape[1])))).any(axis=1)
delimiter
successed += 1
delimiter
curses.endwin()
delimiter
movie = input()
delimiter
d2[key] = d1[key]
delimiter
Py_XDECREF(result)
delimiter
trainer = DeepBeliefTrainer(net, dataset=dataSet)
delimiter
HTTPFound(location=request.application_url)
delimiter
daemon_runner.do_action()
delimiter
[1, 0, 0, 0]
delimiter
count = 0
delimiter
progname = sys.argv[0]
delimiter
newlist.append([alist[i]])
delimiter
X = np.c_[x, np.ones_like(x)]
delimiter
a = np.random.rand(N, N)
delimiter
zip(*args)
delimiter
d = json.loads(j)
delimiter
sum_chunk(a, 2)
delimiter
ax.hold(True)
delimiter
curses.resizeterm(y, x)
delimiter
print(int_no)
delimiter
rtn_words.append(word_without_exclamation)
delimiter
plt.bar(bins[:-1], hist, widths)
delimiter
Response(url, response.status_code, {}, response.content)
delimiter
mm.stop()
delimiter
zipwrite.writestr(item, data)
delimiter
layout.addWidget(self.output)
delimiter
print(a)
delimiter
random.choice(animals)
delimiter
JSONEncoder().encode(YourModel.all().fetch())
delimiter
combs = []
delimiter
print(test.vec()[0])
delimiter
(t ** 2 + 4.0) ** 2 / 16.0
delimiter
ret
delimiter
items = []
delimiter
etree.tostring(t)
delimiter
first_arg = sys.argv[1]
delimiter
HAVE_CYTHON = True
delimiter
df.as_matrix()
delimiter
M = M[M.getnnz(1) > 0]
delimiter
Z2 = [np.dot(X[k], Y[k]) for k in range(10)]
delimiter
fixed = [(pos, item) for pos, item in enumerate(items) if item.freeze]
delimiter
group = Group.objects.get(pk=1)
delimiter
seen_add(k)
delimiter
temp = my_array[:, (0)]
delimiter
getline(cin, input_line)
delimiter
list.__setitem__(self, i, x)
delimiter
f.close()
delimiter
data = client.recv(1024)
delimiter
ax.add_patch(clip_path)
delimiter
a[slice(*a.nonzero()[0].take([0, -1]))] = True
delimiter
f = numpy.vectorize(f)
delimiter
char = screen.getch()
delimiter
discoverer = GstPbutils.Discoverer()
delimiter
game.main()
delimiter
d[key].append(word)
delimiter
resp = urllib.request.urlopen(req)
delimiter
word.lower() == word.lower()[::-1]
delimiter
not_index = np.array([k for k in range(n_b) if k not in index])
delimiter
column_label = gtk.Label(column_title)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
fig, ax = plt.subplots(1, 1)
delimiter
color_data = np.random.random((numframes, numpoints))
delimiter
rot_sprite = pygame.transform.rotate(image, angle)
delimiter
results = [list(islice(c, length)) for length in b]
delimiter
time.sleep(5)
delimiter
mainDlg.Show()
delimiter
bands = im.split()
delimiter
result = f(*args, **kargs)
delimiter
layout.addWidget(vline)
delimiter
y = np.array([-2, -1, 0, 1, 2])
delimiter
count = 0
delimiter
n = s * (zp + z) ** 2 / d ** 2
delimiter
main()
delimiter
axis = fig.add_subplot(111)
delimiter
value = 4294967295
delimiter
app.py
delimiter
p.start()
delimiter
outfile.write(format % ([i] + row))
delimiter
ch.setLevel(level)
delimiter
Counter(chain.from_iterable(linewords))
delimiter
self.fields[str(f.id)] = forms.BooleanField(initial=False, required=False)
delimiter
http = httplib2.Http()
delimiter
file.close()
delimiter
total = 0
delimiter
print ()
delimiter
page = opener.open(uri)
delimiter
self.alertParent(str(key), str(item))
delimiter
btn.bind(on_press=partial(self.foo, btn))
delimiter
vals = list(range(1, 2000))
delimiter
quad(integrand, 0, 1000)
delimiter
writer.writerow(newrow)
delimiter
df = DataFrame(dict([(k, Series(v)) for k, v in list(food2.items())]))
delimiter
buffer = f.read(1024)
delimiter
data = pandas.DataFrame(y)
delimiter
shlex.split(text)
delimiter
print(tds[0].text)
delimiter
pprint.pprint(d)
delimiter
plt.close(fig)
delimiter
arr_2 = np.array([False, True, False, True])
delimiter
mime_msg = email.message_from_string(msg_str)
delimiter
peaking = np.random.random() < alpha
delimiter
result = dict(mainDict)
delimiter
number = sorted(number, reverse=True)
delimiter
name = cls.__name__
delimiter
layout.addWidget(picture)
delimiter
x0s = imsize * np.random.random(ng)
delimiter
fs.add_file(file)
delimiter
c = np.zeros((a.shape[0], b.shape[1]), dtype=DOUBLE)
delimiter
df = pd.DataFrame(my_data, dtype=str)
delimiter
print(foo)
delimiter
bytes.close()
delimiter
os.chdir(command[input][0])
delimiter
etime = time.mktime(time.strptime(end, format))
delimiter
new_im_vec = new_im.flatten()
delimiter
False
delimiter
t = threading.Thread(target=self.receive)
delimiter
old_init(self, *args, **kwargs)
delimiter
l = []
delimiter
print(Counter(contents))
delimiter
string
delimiter
L.__code__.co_filename
delimiter
smtpd.SMTPServer.__init__(*args, **kwargs)
delimiter
dis.dis(afunc)
delimiter
options, args = parser.parse_args()
delimiter
assert np.all(np.isclose(convolved, convolved_2))
delimiter
output.add(x)
delimiter
ptr[2] = color[2]
delimiter
print(i)
delimiter
frame = pd.DataFrame()
delimiter
word.capitalize() if len(word) > length else word
delimiter
ax = fig1.add_subplot(111)
delimiter
self._bymonthday + self._bynmonthday
delimiter
print(name)
delimiter
all_keys = set(chain.from_iterable(dict_list))
delimiter
sys.exit()
delimiter
typing.get_type_hints(Node.__init__)
delimiter
a.size
delimiter
updated = request.GET.copy()
delimiter
counts, bins = numpy.histogram(a, bins=100, density=True)
delimiter
loop = asyncio.get_event_loop()
delimiter
cv2.drawContours(mask, [best_cnt], 0, 255, -1)
delimiter
y = x[1:5]
delimiter
conn, addr = s.accept()
delimiter
root = tk.Tk()
delimiter
print(df)
delimiter
response
delimiter
my_df.reset_index(inplace=True)
delimiter
row_json = json.dumps(row)
delimiter
print(stealth_check[stealth_roll])
delimiter
arr.keys
delimiter
ivalue = Column(Integer)
delimiter
SimpleXMLRPCServer.SimpleXMLRPCServer.__init__(self, *args, **kw)
delimiter
self.load_results()
delimiter
np.dot(x, y) / (np.linalg.norm(x) * np.linalg.norm(y))
delimiter
print(totals.argsort())
delimiter
n - 1
delimiter
numOfRuns += 1
delimiter
plt.subplot(211)
delimiter
parser = argparse.ArgumentParser()
delimiter
b.foo()
delimiter
self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
delimiter
print(get_image_info(data))
delimiter
dir()
delimiter
IedConnection_getServerDirectory.restype = c_int
delimiter
seen = {(row[0], row[2]) for row in r}
delimiter
show_strings.visit(root)
delimiter
print(df.dtypes)
delimiter
df
delimiter
1128
delimiter
last_inner_append(cont[-1], el)
delimiter
object.__setattr__(self, attr, value)
delimiter
panel.draw()
delimiter
sys.exit(1)
delimiter
df
delimiter
print(random_list)
delimiter
sps_acc = sps.coo_matrix((rows, cols))
delimiter
[1, 0, 1, 1]
delimiter
db.session.commit()
delimiter
print(pos, word.lower())
delimiter
pipdeptree
delimiter
n % lcm20 == 0
delimiter
ax.xaxis.set_major_formatter(EpiCycleScalarFormatter())
delimiter
print(msg)
delimiter
label_sequences = [[0, 1, 0], [1, 0], [1, 1, 1]]
delimiter
ctx.set_verify(VERIFY_PEER | VERIFY_FAIL_IF_NO_PEER_CERT, self.verifyHostname)
delimiter
atexit.register(cleanup)
delimiter
a = sin(x)
delimiter
self.assertCountEqual(self.result, self.expected)
delimiter
print(time.time() - start)
delimiter
root = Tkinter.Tk()
delimiter
H, xedges, yedges = np.histogram2d(x_axis, y_axis, bins=10, weights=z_axis)
delimiter
lens = np.array([len(i) for i in data])
delimiter
list(islice(c, size))
delimiter
[func(group) for group in np.split(S.data, S.indptr[1:-1])]
delimiter
gc.enable()
delimiter
2 - 1.781216
delimiter
print((first_string, second_string, third_string))
delimiter
np.set_printoptions(1)
delimiter
plt.plot(xf[1:], 2.0 / N * np.abs(yf[0:N / 2])[1:])
delimiter
cv2image = cv2.cvtColor(img, cv2.COLOR_BGR2RGBA)
delimiter
a is a.astype(int)
delimiter
fig = plt.figure()
delimiter
s[0] * s[1] + s[2]
delimiter
print(isCircular(bigList, bigList2))
delimiter
toss2 = np.array(toss)
delimiter
image.paste(outline, mask=mask)
delimiter
dist = sqrt(sum([(x * x) for x in hist_sel - hist]))
delimiter
jar = cookielib.CookieJar()
delimiter
df_running = df_change.cumsum()
delimiter
self._data_filter.update(attr_dict)
delimiter
max(SubDirPath(d), key=os.path.getmtime)
delimiter
PySys_SetArgv(argc, argv)
delimiter
xmlhttp.send()
delimiter
badtuple = tuple(badlist)
delimiter
-1
delimiter
self.get_year_sales(datetime.now().year)
delimiter
retval, img = cv2.threshold(img, 200.0, 255.0, cv2.THRESH_BINARY_INV)
delimiter
df2 = df.apply(pd.to_timedelta)
delimiter
l = list(range(1, 10))
delimiter
check(my_list[start + 1:], tracking=tracking)
delimiter
a = numpy.float64(numpy.nan)
delimiter
Xi[0] = Yf[0]
delimiter
d = defaultdict(int)
delimiter
1,
delimiter
channel = connection.channel()
delimiter
_unpickle_method, (func_name, obj, cls)
delimiter
self.peercert = self._connection.sock.getpeercert()
delimiter
ax.plot([-1, 0, 1, 2], list(range(4)))
delimiter
foo.db
delimiter
f.write(req.content)
delimiter
s.close()
delimiter
present - datetime(2000, 4, 4)
delimiter
{2, 4}.issubset(chain.from_iterable(x))
delimiter
data.boxplot()
delimiter
all(x in mystr for x in ls)
delimiter
buffer
delimiter
program = tapjoy - game1, tapjoy - game2
delimiter
print(row[col])
delimiter
self.previewImage = QtGui.QLabel(self)
delimiter
menu.addAction(a)
delimiter
t1.start()
delimiter
group = np.zeros((len(values[0]),), dtype=np.int64) - 1
delimiter
Session.query(Record.id, Record).filter(Record.id.between(chunk[0], chunk[-1]))
delimiter
array([100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000])
delimiter
root.attrib
delimiter
process(chunk)
delimiter
f = list([l for l in a if t[0] <= int(l[0]) < t[1]])
delimiter
assert d.x == 1492
delimiter
print(f)
delimiter
np.ndarray(arr.shape, dtype2, arr, 0, arr.strides)
delimiter
name = db.Column(db.String, nullable=False)
delimiter
np.bitwise_and.reduce(c) == c[0]
delimiter
f.flush()
delimiter
regex = re.compile(regex_txt, re.IGNORECASE)
delimiter
User.delete_auth_token(user_id, token)
delimiter
b = np.array([2, 4])
delimiter
self.thread.start()
delimiter
z = np.logical_or(y, rolled)
delimiter
process.start()
delimiter
surf.write_to_png(image_file)
delimiter
fig = figure(figsize=(6.5, 12))
delimiter
example()
delimiter
top = curses.newwin(1, 10, 0, 0)
delimiter
assert len(w) == 1
delimiter
singlet_list = []
delimiter
html = browser.open(url)
delimiter
prod = [(i * 5) for i in lst]
delimiter
parser.print_help()
delimiter
print(wow)
delimiter
id = sa.Column(sa.Integer, primary_key=True)
delimiter
cb = plt.colorbar(im)
delimiter
bv[0] = 1
delimiter
d = {}
delimiter
[k for k in list(d.keys()) if not d[k]]
delimiter
update_index.Command().handle()
delimiter
cursor.execute(query_string, query_args)
delimiter
self.old_handler(*self.signal_received)
delimiter
ax.legend()
delimiter
firstname = Column(String(50))
delimiter
dataBitMap.CreateCompatibleBitmap(dcObj, w, h)
delimiter
cmyk[i][x, y] = cmyk[i][x, y] - gray
delimiter
x + 1
delimiter
max_indices.append(i)
delimiter
coll = Elasticsearch()
delimiter
env = Environment()
delimiter
foo = threading.Event()
delimiter
ax = plt.gca()
delimiter
loop.run_until_complete(client_handler(CTX))
delimiter
cont, = ax.contourf(x, y, z, 500)
delimiter
self.root = tk.Tk()
delimiter
doWork()
delimiter
d = QtGui.QDialog(self)
delimiter
od.setdefault(n, []).append(s)
delimiter
process.communicate()
delimiter
ax = fig.add_subplot(111)
delimiter
dill.detect.trace(True)
delimiter
g.output(index)
delimiter
test(100, 50, 11)
delimiter
np.array([np.cos(r), np.sin(r)])
delimiter
output = [6, 4, 2, 2, 1, 1]
delimiter
atexit.register(DataBase.close_database)
delimiter
False
delimiter
l[t[0]] = {}
delimiter
help(cv2.HOGDescriptor())
delimiter
main()
delimiter
plot = fig.add_subplot(111)
delimiter
f = self[name]._fields.get(ftmp)
delimiter
print(get_decorators(Foo))
delimiter
lons.append(float(row[2]))
delimiter
u, s, v = np.linalg.svd(a)
delimiter
psutil.Process(doc.pid).get_children()[0].kill()
delimiter
f()
delimiter
soft, hard = resource.getrlimit(rsrc)
delimiter
data = np.where(df.sign == 1)[0]
delimiter
Employee.__init__(self, name, wage * 26)
delimiter
axes = plt.subplot(gs[1, 0])
delimiter
deltas = np.diff(data)
delimiter
np.array([ax2_cid[axs] for axs in x2_Kaxs_2.flat], dtype=object).shape
delimiter
soup = BeautifulSoup.BeautifulSoup(s)
delimiter
self.flush()
delimiter
date = datetime.now(tz=pytz.utc)
delimiter
obj = c()
delimiter
ax = fig.add_subplot(111)
delimiter
(),
delimiter
output_dim = len(y_train[0])
delimiter
self._dynprop = value
delimiter
view1[1] = 5
delimiter
sum_a = list(map(sum, a))
delimiter
writer = csv.writer(outfile)
delimiter
ax = s.cumprod().plot()
delimiter
user = request.user
delimiter
seq[start:end] = replacement
delimiter
f.write(opener.open(request).read())
delimiter
math.floor(1.5)
delimiter
req = urllib.request.Request(starturl, datagen, headers)
delimiter
print(Dog().speak())
delimiter
ssh = paramiko.SSHClient()
delimiter
np.array(lst)
delimiter
queryset = models.Bloop.objects.all()
delimiter
socket.setdefaulttimeout(timeout)
delimiter
np.arange(n)[b[:-1]].repeat(np.diff(b))
delimiter
True
delimiter
self.SetSizer(box_sizer)
delimiter
self.finish()
delimiter
g.edges()
delimiter
email.send()
delimiter
plt.show()
delimiter
chunk = next(self)
delimiter
s.add(el)
delimiter
pool.close()
delimiter
ys[0] + (x - xs[0]) * (ys[1] - ys[0]) / (xs[1] - xs[0])
delimiter
pl.imshow(z2, extent=[-5, 5, -5, 5], alpha=0.5)
delimiter
self.map = {}
delimiter
sys.modules[name] = mod
delimiter
hdu.writeto(filename)
delimiter
bool(0)
delimiter
sign * np.exp(logdet)
delimiter
calendar.day_name[my_date.weekday()]
delimiter
server_B_thread.start()
delimiter
res.append((x - 1, x, x + 1))
delimiter
df
delimiter
signal.alarm(0)
delimiter
shutil.rmtree(instance.repo)
delimiter
data = self.leftover
delimiter
self.increment_counter()
delimiter
print(int((t2 - t1).seconds))
delimiter
bytes(c ^ mask[i % lmask] for i, c in enumerate(byt))
delimiter
l.append(b)
delimiter
y, x - a / b * y
delimiter
Line2D([0, 1], [0, 1], color=color, **kwargs)
delimiter
self.rect.top += self.dir.y * SPEED
delimiter
proxy_client = SSHClient()
delimiter
k.press_key(k.left_key)
delimiter
loop.run_forever()
delimiter
self.count = 0
delimiter
print(response.code)
delimiter
a[index]
delimiter
self.allClasses = []
delimiter
reportlab.platypus.Flowable.__init__(self)
delimiter
res = df[df.cluster >= 0]
delimiter
pytz.all_timezones
delimiter
set([8, 9]) & a
delimiter
print(slice_coords_by_x(2, 4, coords))
delimiter
Dict[wn + 1] = [(d + timedelta(days=k)).isoformat() for k in range(0, 7)]
delimiter
_chord.AsyncResult(callback_id), r
delimiter
logging.getLogger(LOG_AREA1).addHandler(stdoutHandler)
delimiter
pdf.savefig()
delimiter
list(gen)
delimiter
pprint.pprint(build_structure(jdata))
delimiter
t.start()
delimiter
lcms.cmsCloseProfile(outprof)
delimiter
bigrange = tf.range(-1, rank + 1)
delimiter
print(sum(x / 2 for x in sq_inc))
delimiter
my_norm = matplotlib.colors.Normalize(vmin, mmax)
delimiter
df
delimiter
node = node.__next__
delimiter
args = parser.parse_args()
delimiter
assert len(l1) == len(l2)
delimiter
plt.show()
delimiter
print(name_age.name)
delimiter
sum(bool(e) for e in l) == 1
delimiter
CUDA_TRACE = False
delimiter
result += int(i)
delimiter
np.core.defchararray.add(a1, a2)
delimiter
self.i
delimiter
print(a)
delimiter
output.stdout
delimiter
hash(s)
delimiter
z2.namelist()
delimiter
opener = urllib.request.build_opener(urllib.request.HTTPHandler(debuglevel=1))
delimiter
num_ones = (y == 1).sum()
delimiter
my_mesh.EndPolygon()
delimiter
laparams = LAParams()
delimiter
zip(a, b)
delimiter
text += elem.strip()
delimiter
fig, (ax1, ax2) = plt.subplots(1, 2)
delimiter
print(data)
delimiter
view.show()
delimiter
f.close()
delimiter
row = curs.fetchone()
delimiter
result.save()
delimiter
do_things(test_image)
delimiter
zip_longest(fillvalue=fillvalue, *args)
delimiter
takewhile(lambda x: x <= max, numbers)
delimiter
arr[mask] = np.nan
delimiter
standardized_data = StandardScaler().fit_transform(your_data)
delimiter
pyplot.gca().add_patch(circle)
delimiter
set(l1).difference(l2)
delimiter
server_socket.listen(5)
delimiter
Method(self, key)
delimiter
print(r.content)
delimiter
self._canvas.place_forget()
delimiter
email_body = data[0][1]
delimiter
a = argparse.ArgumentParser()
delimiter
[0]
delimiter
(u - v) ** 2 * self._norm
delimiter
a, b, rest = list[0], list[1], list[2:]
delimiter
code = Column(String(20))
delimiter
register = template.Library()
delimiter
map(lambda p: myFunc(p, additionalArgument), pages)
delimiter
unittest.main()
delimiter
start = len(my_list) // 2
delimiter
str(self.to_dict())
delimiter
s = str(n)
delimiter
time.sleep(0)
delimiter
Model.objects.filter(Q(m2m_field=1) & Q(m2m_field=2))
delimiter
assert 5 * 60 * 60 + 20 * 60 + 25 == delta.total_seconds()
delimiter
ZZ.old_poly_ring(x).quotient_ring([x ** 2])
delimiter
plt.plot(*zip(*testList2))
delimiter
1 << len(self.array)
delimiter
b = np.arange(10)
delimiter
series2 = series1[::-1]
delimiter
sleep(0.5)
delimiter
_iterencode(o, 0)
delimiter
self.files = []
delimiter
self.city = city
delimiter
t.start()
delimiter
ax1 = fig.add_subplot(211)
delimiter
root = Tk()
delimiter
p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
delimiter
olist = [Foo() for j in range(n)]
delimiter
print(data)
delimiter
sourcelines = inspect.getsourcelines(cls)[0]
delimiter
layout.addWidget(self.label)
delimiter
queryset = User.objects.all()
delimiter
b = np.random.rand(1000)
delimiter
ax.plot([1], [1])
delimiter
model.sample(10000)
delimiter
p = Process(target=f, args=(num, arr))
delimiter
client.on_message = on_message
delimiter
df = df[~(df == 0).any(axis=1)]
delimiter
slug = models.SlugField(max_length=255)
delimiter
ax = fig.add_subplot(111)
delimiter
np.take(np.cumsum(np.log(np.arange(1, m + 1))), n - 1)
delimiter
upper_color = np.array([color + sensitivity, 255, 255])
delimiter
print(k)
delimiter
queue.put(line)
delimiter
print(line)
delimiter
G.add_edge(subject_id, object_id, weight=1)
delimiter
result = list(some_complex_algo(source_data))
delimiter
plt.plot(x, y)
delimiter
x = np.arange(9)
delimiter
fig = plt.figure()
delimiter
aa = arr.ctypes.data_as(ctypes.POINTER(ctypes.c_ubyte * len(str_bytes)))
delimiter
as_list = list(ast.literal_eval(args))
delimiter
self.__dict__.update(new_self.__dict__)
delimiter
cal_window = gtk.Window(gtk.WINDOW_TOPLEVEL)
delimiter
newlist = mylist[2:-2]
delimiter
self.widget(field, **kwargs)
delimiter
mask = np.hstack((True, np.diff(lid[sidx]) != 0, True))
delimiter
turtle.goto(x, y)
delimiter
BaseObject.initialized
delimiter
main()
delimiter
im.wcs
delimiter
X_train_to_add = X_masked[(indices_to_add), :]
delimiter
col.set_color(color)
delimiter
lst[:] = list(range(1, 4))
delimiter
x = np.linspace(-1, 2, 151)
delimiter
digits.append(digs[x % base])
delimiter
seen = set()
delimiter
df = DataFrame(index=list(range(5)))
delimiter
leglines.append(legline)
delimiter
ax.set_ylim(y_min, y_max)
delimiter
db.session.commit()
delimiter
random.seed(x[0][0])
delimiter
print(sqrt(diag(cov)))
delimiter
fp.close()
delimiter
cls(**d)
delimiter
r.close()
delimiter
mat[:, (diag[0]), (diag[1])] = numpy.nan
delimiter
min_value = df[feature_name].min()
delimiter
module
delimiter
setattr(cls, name, wrap_method(cls, name))
delimiter
writer.add_document(spelling=item.Title)
delimiter
f.readline()
delimiter
col_index = np.isnan(a).argmin(axis=1)
delimiter
lines = [(int(row[0]), row[1]) for row in lines]
delimiter
s = List()
delimiter
self.object.get_absolute_url()
delimiter
setattr(obj, self.name, result)
delimiter
DA = pd.DataFrame(A).T
delimiter
pool.close()
delimiter
path, _ = self._treeView.get_cursor()
delimiter
links = linkregex.findall(str(msg))
delimiter
text_list = []
delimiter
func()
delimiter
vline.set_xdata((x, x))
delimiter
b1.pack()
delimiter
[1, 1]
delimiter
row1 = next(reader)
delimiter
preparser = argparse.ArgumentParser(add_help=False)
delimiter
mf.close()
delimiter
author = models.ForeignKey(Author)
delimiter
batch.add(service.animals().list(), callback=list_animals)
delimiter
lr2 = clone(lr1)
delimiter
print(ftp.getwelcome())
delimiter
x = x.rstrip()
delimiter
obj = self.__dict__.get(key)
delimiter
ID = Column(types.Integer, primary_key=True)
delimiter
board = [[(0) for x in range(n)] for x in range(n)]
delimiter
s = ttk.Style()
delimiter
init_b = min(y)
delimiter
shutil.rmtree(d)
delimiter
numpy.flatnonzero((lst > a) & (lst < b))[:10]
delimiter
print(item)
delimiter
cookies = driver.get_cookies()
delimiter
Session.begin()
delimiter
Test.static_method()
delimiter
df[df.B == B_maxes]
delimiter
df.dtypes
delimiter
content_type = models.ForeignKey(ContentType)
delimiter
self.show()
delimiter
t[-1][1]
delimiter
XGBClassifier(grid)
delimiter
pickle.dump(obj, fh)
delimiter
x.add(2)
delimiter
ordered.append(t)
delimiter
np.argsort(p)
delimiter
max2here = pd.expanding_max(ser)
delimiter
obj.user_set.count()
delimiter
array2 = np.empty((20, 20) + array1.shape, dtype=array1.dtype)
delimiter
self.store.insert(i, (key, value))
delimiter
a1 = A.objects.create()
delimiter
axe = fig.add_subplot(111)
delimiter
print(df)
delimiter
ids.append(int(x))
delimiter
Grid.columnconfigure(frame, 0, weight=1)
delimiter
event.accept()
delimiter
logger = logging.getLogger(__name__)
delimiter
self._value = val
delimiter
x = [k for k in list(d.keys()) if d[k] == 1]
delimiter
P.show()
delimiter
output.write(outputStream)
delimiter
lines = my_file.readlines()
delimiter
health < max_meath or armor < enemy.attack < attack > enemy.defense
delimiter
d = datetime.utcnow()
delimiter
a = [str(f) for f in range(n)]
delimiter
a = np.random.randint(2, size=(10000, 6))
delimiter
a = []
delimiter
foo == bar
delimiter
pyplot.show()
delimiter
config = configparser.ConfigParser()
delimiter
fullpath = os.path.join(path, *paths)
delimiter
cmd.Cmd.__init__(self)
delimiter
xidx = (raw[:, (0)] - xrange[0]).astype(int)
delimiter
keys = pygame.key.get_pressed()
delimiter
k = (k + 1) % len(l)
delimiter
zip(*([chain(iterable, repeat(padvalue, n - 1))] * n))
delimiter
print(npdata)
delimiter
window = Gtk.Window()
delimiter
youget = the_idea
delimiter
BOOST_PYTHON_MODULE(get_dir_list)
delimiter
b = [numpy.vstack((a.real.T[i], a.imag.T[i])) for i in range(a.shape[2])]
delimiter
a is a[0]
delimiter
self.x = 0
delimiter
plt.show()
delimiter
repo.heads[0].commit.message
delimiter
event = models.ForeignKey(Event)
delimiter
change_request.save()
delimiter
a + b
delimiter
outputStream.close()
delimiter
log.put()
delimiter
x + y
delimiter
freq += lemma.count()
delimiter
y = data[:, (1)]
delimiter
result = pd.DataFrame.from_records(data).mean().to_dict()
delimiter
self.user = user
delimiter
X = np.ascontiguousarray(X)
delimiter
n_neighbors = tree2.count_neighbors(tree1, r=4.2)
delimiter
t * b + a
delimiter
memset(id(s) + offset, 0, len(s))
delimiter
total = sum(counts.values())
delimiter
image_string = cStringIO.StringIO(base64.b64decode(rawbase64))
delimiter
sum(c * x ** (n - i) for i, c in enumerate(self.coef))
delimiter
print(datetime.datetime.now())
delimiter
joe = name, age, location
delimiter
self.__dict__[key] = item
delimiter
result = []
delimiter
print(df)
delimiter
print(asizeof.asizeof(list(range(N))) / N)
delimiter
list(x)
delimiter
retcode = cmdp.wait()
delimiter
min(bar)
delimiter
app.deleteLater()
delimiter
root = Tk()
delimiter
boo = Boo()
delimiter
particles1.move()
delimiter
reviewURL = scrapy.Field()
delimiter
a = numpy.array([-128, -1, 0, 1, 127], dtype=numpy.int8)
delimiter
dists = sklearn.metrics.pairwise.manhattan_distances(r)
delimiter
percentiles = [percentileofscore(data, i) for i in data]
delimiter
rv.append((labels[x[0]], x[1]))
delimiter
s.commit()
delimiter
key = pygame.key.get_pressed()
delimiter
self.buttons.rejected.connect(self.reject)
delimiter
x, y = minloc
delimiter
key = cv2.waitKey(20)
delimiter
db = SQLAlchemy(app)
delimiter
fig.colorbar(cax)
delimiter
here = os.path.dirname(os.path.abspath(__file__))
delimiter
len(_)
delimiter
df1.sort_index(axis=1, level=1, inplace=True)
delimiter
print([([k] + val) for k, val in list(od.items())])
delimiter
df
delimiter
sns.heatmap(df)
delimiter
app = QtWidgets.QApplication(sys.argv)
delimiter
writer = csv.DictWriter(csvfile, fieldnames)
delimiter
image1 = Image.open(f)
delimiter
outlist = [k for k in mylist if k[1] not in other]
delimiter
b = cv2.erode(b, element)
delimiter
dfc = df.copy()
delimiter
fn
delimiter
max(seq)
delimiter
s = requests.session()
delimiter
os.dup2(so.fileno(), sys.stdout.fileno())
delimiter
auc1, auc2 = sklearnAUC(Y_test, Y_pred)
delimiter
args = parser.parse_args()
delimiter
settings.py
delimiter
np.argsort(arr + np.random.rand(*arr.shape))
delimiter
self._list = list()
delimiter
vec = DictVectorizer()
delimiter
c = a[b]
delimiter
dot(v1, v2)
delimiter
user_lon > this_lon - omega and user_lon < this_lon + omega
delimiter
root.mainloop()
delimiter
main()
delimiter
print(t.timeit())
delimiter
root.withdraw()
delimiter
print(dt.timedelta(seconds=hms.seconds % resolution.seconds))
delimiter
response = conn.getresponse()
delimiter
print(x)
delimiter
print_node(node)
delimiter
one_week = 604800
delimiter
items.issubset(set([1, 2]))
delimiter
base_classes.Bookcollection = Bookcollection
delimiter
observer.start()
delimiter
False == 0
delimiter
self.server.shutdown()
delimiter
b = np.cumsum(a)
delimiter
df
delimiter
self.idle()
delimiter
i, j = np.mgrid[:10, :10]
delimiter
item = db.get(key)
delimiter
kl.setMath(f.getBody())
delimiter
word_set = set(word_list)
delimiter
row.append(mapper[row[1]])
delimiter
now = datetime.now()
delimiter
x[1:] *= m[:-1] < m[1:]
delimiter
self.takeItem(self.row(item))
delimiter
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cookiejar))
delimiter
True, s[1:]
delimiter
a[(0), :, :] = b
delimiter
x = -1.1111
delimiter
values = [random.randint(1, 100) for _ in range(n)]
delimiter
opener = urllib.request.build_opener(BindableHTTPHandler)
delimiter
self.setFlag(QGraphicsItem.ItemIsMovable)
delimiter
pd.DataFrame(data=dct).T.reset_index()
delimiter
[x[0]] + f([m for m in x if len(m) != len(x[0])])
delimiter
cursor = connection.cursor()
delimiter
f.seek(0)
delimiter
t = list(range(len(x)))
delimiter
prepdf.xs(sheet).to_excel(writer, sheet_name)
delimiter
dx, dy = x2 - x1, y2 - y1
delimiter
time.sleep(snooze)
delimiter
header_cell = sheet.cell(row=1, column=j)
delimiter
print(l)
delimiter
q = multiprocessing.Queue()
delimiter
n = sum(1 for line in pd.read_csv(filename))
delimiter
print(log_contents.lower())
delimiter
deleteself.thisptr
delimiter
soup = BeautifulSoup(htmlstring)
delimiter
i += 1
delimiter
b = np.arange(10)
delimiter
df_new
delimiter
TaskBase.__call__(self, *args, **kwargs)
delimiter
a.sum()
delimiter
self.local_storage._save(name, content)
delimiter
func(b)
delimiter
test = sess.run(e)
delimiter
print(b.get())
delimiter
log = logging.getLogger(__name__)
delimiter
lines = df.plot(ax=ax)
delimiter
tree = ET.fromstring(data)
delimiter
term_appearance = Counter(chain.from_iterable(l))
delimiter
serializers.ModelSerializer.to_representation(self, data)
delimiter
f.read().splitlines()
delimiter
foo(a)
delimiter
print(A[ind] == value)
delimiter
self.x = 1
delimiter
sums = np.add.reduceat(a, reductions)[::2]
delimiter
f()
delimiter
os.setpgrp()
delimiter
d.update(b)
delimiter
os.kill(pid, signal.SIGKILL)
delimiter
plt.figure()
delimiter
f = urlopen(url)
delimiter
[0, 0, 1, 0]
delimiter
json.dumps(_)
delimiter
switches = [True, False, True]
delimiter
tree = ElementTree.ElementTree()
delimiter
validate(request.json, current_app.config[schema_name])
delimiter
up = np.genfromtxt(lines[4::4], dtype=str)
delimiter
deleteinst.__dict__[self.name]
delimiter
b = np.array(a)
delimiter
b = json.dumps(json.dumps(a))
delimiter
print(sh1.col_values(1))
delimiter
c.save()
delimiter
pattern_obj.sub(replacement_string, originalstring)
delimiter
u = numpy.linspace(0, 2 * numpy.pi, 100)
delimiter
result
delimiter
plt.legend(loc=0)
delimiter
self.exit()
delimiter
ax.set(aspect=1)
delimiter
root = Tkinter.Tk()
delimiter
myList = np.random.random(100)
delimiter
print(x)
delimiter
queryset = queryset.all()
delimiter
garbage.append(line)
delimiter
data.apply(lambda x: dump_sframe_to_dict(x, a))
delimiter
print(CreateTable(table))
delimiter
sys.stdout.write(reader.read())
delimiter
colors = plt.cm.rainbow(np.linspace(0, 1, 20))
delimiter
fig.set_size_inches(w, h)
delimiter
epoch = datetime.datetime(1991, 9, 1, 0, 0, 0)
delimiter
self.name + str(self.age)
delimiter
img_np = cv2.imdecode(nparr, cv2.CV_LOAD_IMAGE_COLOR)
delimiter
listD = []
delimiter
a_polygon.contains(a_point)
delimiter
self._results.append(result)
delimiter
document2.body.append(copy.copy(element))
delimiter
b = datetime.now() - a
delimiter
req = urllib.request.Request(starturl)
delimiter
time.sleep(5)
delimiter
newopen.write(line)
delimiter
print([v, w])
delimiter
func = functools.partial(self.on_button, name=name)
delimiter
request = urllib.request.Request(url, data=data)
delimiter
b = zip(*a)
delimiter
sline = line.split()
delimiter
input = default
delimiter
a = [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1]
delimiter
item
delimiter
result = list(toposort2(dep_dict))
delimiter
M[4, 1]
delimiter
self.free.append(seq_num)
delimiter
new_list = []
delimiter
s = s.replace(hit, chr(htmlentitydefs.name2codepoint[name]))
delimiter
h.endheaders()
delimiter
yaml.dump(d, f, default_flow_style=False)
delimiter
worker_thread.start()
delimiter
data
delimiter
help(getattr(dict, me))
delimiter
parsed_input = json.loads(input_data)
delimiter
background_label.place(x=0, y=0, relwidth=1, relheight=1)
delimiter
d1 = {x: x for x in range(1, 6)}
delimiter
b = a.reshape(s)
delimiter
[mindist, (x_coord, y_coord)]
delimiter
data = np.loadtxt(input_filename)
delimiter
4 / 100
delimiter
1 + (n - 1) % 9 if n else 0
delimiter
some_method(my_data)
delimiter
session.connection().commit_prepared(xid, recover=True)
delimiter
ascii_fh.readlines()
delimiter
i.seek(0)
delimiter
item
delimiter
sh.write(m, 1, e2)
delimiter
app.Dispatch()
delimiter
Object(self)
delimiter
cardValue = card[0]
delimiter
df
delimiter
{}
delimiter
new = interpolate.splev(np.linspace(0, 1, 500), tck)
delimiter
py > matrix[2][4]
delimiter
b = a.compress(logical_not(z), axis=1)
delimiter
len(subs)
delimiter
down_thresh[:h - i, :] += img[i:, :]
delimiter
sys.stdout = writer
delimiter
main()
delimiter
r.delete(key)
delimiter
mask = cv2.GaussianBlur(mask, (BLUR, BLUR), 0)
delimiter
print(Counter(L))
delimiter
print(xopt)
delimiter
f(1, 0, 0)
delimiter
NullColumn = partial(Column, nullable=True)
delimiter
last_lines = []
delimiter
epoch = datetime(1970, 1, 1, tzinfo=timezone.utc)
delimiter
form = playlistform(request, request.POST, instance=playlistmodel)
delimiter
(1 - coeff * z ** -2)([0, 1, 0, 0, 0, 0, 0]).take(inf)
delimiter
kingdom = models.ForeignKeyField(Kingdom)
delimiter
default_mro[1:2] + default_mro
delimiter
compressor.add(file)
delimiter
cap0 = cv2.VideoCapture(0)
delimiter
d[text[i:i + n]].append(i)
delimiter
data2 = np.empty((h + 2, w + 2))
delimiter
result = data[:data.size // width * width].reshape(-1, width).mean(axis=1)
delimiter
timeout = 60
delimiter
d = {i: [] for i in x}
delimiter
fieldnames.extend(reader.fieldnames)
delimiter
my_db.close()
delimiter
df.loc[g.groups.get(1, [])]
delimiter
self.cnt += 1
delimiter
libadd.Add.argtypes = [ctypes.c_int, ctypes.c_int]
delimiter
ax.plot(x, y, color=col_dict[class_col[i]], label=label, **kwds)
delimiter
op = np.zeros(n.shape[0])
delimiter
unittest.main(testLoader=loader, verbosity=2)
delimiter
index = np.argsort(x)
delimiter
D_Didx = np.digitize(D, Dbins)
delimiter
time.sleep(random.uniform(0, 0.02))
delimiter
vocab_tage = {value: key for key, value in list(tag_vocab.items())}
delimiter
shutil.copyfileobj(source, temp_file)
delimiter
pb = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, False, 8, sz[0], sz[1])
delimiter
server_thread.start()
delimiter
m = defaultdict(lambda : defaultdict(list))
delimiter
liPos = [(2, 5), (8, 9), (18, 22)]
delimiter
matplotlib.hatch._hatch_types.append(CustomHatch)
delimiter
sum(1 for row in matrix for cell in row if cell == WATER)
delimiter
second_smallest([a, b] + rest)
delimiter
NULL
delimiter
loop.run_until_complete(asyncio.gather(*pending))
delimiter
data[index]
delimiter
B = np.asarray([A] * N)
delimiter
Test.objects.filter(id=fr).update(id=to)
delimiter
np.unique(_25.index.get_level_values(1).dayofweek)
delimiter
stack.insert(0, x)
delimiter
output.write(field.ljust(fieldlength))
delimiter
{{spygames / games | length * 100 | round(0) | int}}
delimiter
c.clip(a, b)
delimiter
t = int(list[i])
delimiter
now = datetime.datetime.now()
delimiter
stdin = subprocess.PIPE
delimiter
Variance(X)
delimiter
print(user.name)
delimiter
t.setDaemon(daemonic)
delimiter
consumer.run()
delimiter
server.ehlo()
delimiter
plt.pause(delay)
delimiter
i += 1
delimiter
flask.session.modified = True
delimiter
print(a + b)
delimiter
popt, pcov = curve_fit(goal.__call__, xdata, ydata)
delimiter
result = count(l, 4)
delimiter
reversed = line[::-1]
delimiter
item, = []
delimiter
linprog(c, A_ub, b_ub, A_eq, b_eq, options=dict(bland=True, tol=1e-15))
delimiter
print(l)
delimiter
x_2 = odeint(sis, [0, 0], t, args=(acel_interp,))
delimiter
datafile.save()
delimiter
registered_plugins.append(shortname)
delimiter
FATAL = 5
delimiter
ycenter = len(y) / 2
delimiter
BDF.to_excel(writer, sheet_name=B, index=False)
delimiter
a2.yaxis.tick_right()
delimiter
ss.connect((host, int(port)))
delimiter
theList.append(4)
delimiter
zip(*((x,) * n))
delimiter
s = map(sum, zip(*([iter(s)] * 2)))
delimiter
d = np.eye(foo.shape[1]) * foo[:, (np.newaxis)]
delimiter
self.foo = functools.partial(__, self)
delimiter
print(e.headers)
delimiter
mask = np.zeros(len(ar1), dtype=np.bool)
delimiter
child_count = len(instance.children.all())
delimiter
connection = engine.connect()
delimiter
plt.tight_layout()
delimiter
assert r.status == 400
delimiter
new_data = []
delimiter
sock.send(chunk)
delimiter
stdout, stderr = p.communicate(scpt)
delimiter
port = self.mailport
delimiter
D = D[:, :-2]
delimiter
[]
delimiter
v = -np.cos(np.pi * x) * np.sin(np.pi * y) * np.cos(np.pi * z)
delimiter
n0 = a / math.pow(1 - math.pow(e * math.sin(phi1), 2), 1 / 2.0)
delimiter
decorator
delimiter
uncompyle2.uncompyle_file(sys.argv[1], f)
delimiter
model.metadata.create_all(engine)
delimiter
html = BeautifulSoup(html)
delimiter
self.worker = Worker(self)
delimiter
isclose(a, b, rel_tol=1e-09, abs_tol=0.0)
delimiter
A(self.value + other.value)
delimiter
fitness_landscape = np.random.uniform(0, 1, size=(N,) + (2,) * K)
delimiter
line = line.rstrip()
delimiter
Fraction.from_float(1 / 2.54)
delimiter
licenses = set()
delimiter
hsv[:, :, (2)] += value
delimiter
file_two.seek(0, 2)
delimiter
n += 1
delimiter
queue.append(obj)
delimiter
user.save()
delimiter
writer.close()
delimiter
ymin, ymax = y[mask].min(), y[mask].max()
delimiter
popt, pcov = curve_fit(func, x, yn)
delimiter
mylist = [1, 2, 5, 4, 7, 8]
delimiter
ppxml2 = etree.tostring(xml2, pretty_print=True)
delimiter
self.p.stdin.close()
delimiter
yaml.add_representer(str, unicode_representer)
delimiter
logging.Handler.__init__(self)
delimiter
SlicableDict(items[index_slice])
delimiter
f = test.make_fptr()
delimiter
poly = PolyCollection(verts, facecolors=fcs, closed=False)
delimiter
chr(_)
delimiter
text.pack()
delimiter
P[idx_tuple]
delimiter
print(Fraction(0.25))
delimiter
[0, 0, 0, 0]
delimiter
egg2(*argList)
delimiter
x = np.random.uniform(high=maxi, size=ntot)
delimiter
any(i > 10 for i in range(19))
delimiter
self.parser.result.append(word)
delimiter
self._initializeStream()
delimiter
print(list(sec))
delimiter
groups.append(list(g))
delimiter
map(partitioner, data)
delimiter
self.stop_process = True
delimiter
registry.add_field(cls, self)
delimiter
duplicate_shaders_dict = {}
delimiter
self.container[self.item]
delimiter
endfor
delimiter
plt.imshow(data)
delimiter
end_time = datetime.datetime.utcnow() - start_time
delimiter
[(1 if is_cjk(ch) else 0) for ch in text]
delimiter
[v for v, ret in [(a, True), (0, bret), (0, cret)] if ret]
delimiter
obj = json.loads(encoded)
delimiter
shuffle(seq)
delimiter
d[n].update(g.values.tolist())
delimiter
fn(self)
delimiter
unsure_rows = dict.fromkeys(csv_reader.fieldnames, [])
delimiter
result = np.zeros(reference.shape)
delimiter
local_filename
delimiter
from_date = datetime.now()
delimiter
cmp(a[10:], b[10:])
delimiter
do_error()
delimiter
pool.close()
delimiter
print(get_deep_text(element_of_interest))
delimiter
hllDll.wrp_testchar.restype = c_int
delimiter
sys.getsizeof(aStrOBJECT)
delimiter
axes.xaxis.grid(False)
delimiter
hax2 = plt.subplot(1, 2, 2)
delimiter
self.show()
delimiter
new_list[jj].append(some_tuple)
delimiter
im = Image.open(old_image_path)
delimiter
json_dict[self._KIND2_PARAM] = self._reader2.to_json()
delimiter
engine.start()
delimiter
print(df)
delimiter
arr.resize(shape, refcheck=False)
delimiter
order = {A.index(j): i for i, j in enumerate(sorted(A))}
delimiter
myA.myattribute = 9
delimiter
parse_code_2 = compose(2, 1, 1)
delimiter
grid = np.vstack((grid, np.ones((1, grid.shape[1]))))
delimiter
unique_features.sort()
delimiter
vectorizer = TfidfVectorizer(ngram_range=(1, 2))
delimiter
SOAPpy.__file__
delimiter
a = MyOrderedField(0)
delimiter
handler = logging.StreamHandler(sys.stdout)
delimiter
i = 0
delimiter
kOUT = np.zeros(N + 1)
delimiter
p.join()
delimiter
Fx = np.random.rand(100, 50, 10)
delimiter
csvfile.seek(0)
delimiter
m = T.matrix(dtype=theano.config.floatX)
delimiter
t = time.time()
delimiter
a = np.column_stack((x.ravel(), y.ravel(), z.ravel()))
delimiter
a == b
delimiter
data = []
delimiter
session.flush()
delimiter
pid = os.fork()
delimiter
range_list.append(i)
delimiter
print(response.json())
delimiter
arr = np.delete(arr, np.arange(0, arr.size, 4))
delimiter
fig, ax = plt.subplots()
delimiter
board = [1, 1, 2, 1], [0, 2, 1, 1], [2, 2, 2, 1], [1, 0, 0, 1]
delimiter
{}
delimiter
1
delimiter
source / opt / python / run / venv / bin / activate
delimiter
cmap = mpl.colors.ListedColormap(colors)
delimiter
axes.set_ylim(-0.5, 9.5)
delimiter
it = random.choice(iters)
delimiter
log.setLevel(loglevel)
delimiter
p = zip(t[::2], t[1::2])
delimiter
data = json.loads(source)
delimiter
r, c = np.where(N[row_idxs] == 6)
delimiter
print(csv2)
delimiter
e.execute(ins)
delimiter
result
delimiter
sys.getdefaultencoding()
delimiter
newsocket, fromaddr = bindsocket.accept()
delimiter
angle = math.atan(float(dx) / float(dy))
delimiter
userhome + path[i:]
delimiter
root.withdraw()
delimiter
client.close()
delimiter
K.argsort()[-5:]
delimiter
print(key, value)
delimiter
garbage.append(line)
delimiter
self.grid()
delimiter
self.server_bind()
delimiter
HAVE_CURSES = False
delimiter
func(*args, **kwargs)
delimiter
data.sort(key=key)
delimiter
main()
delimiter
print_two()
delimiter
x = NP.arange(0, t.shape[0])
delimiter
points.append((px, py))
delimiter
deletedict[k]
delimiter
Dummy.a
delimiter
ax4 = plt.subplot(gs[(1), 2:])
delimiter
fs = [(lambda x, _i=i: x + _i) for i in range(10)]
delimiter
x = object()
delimiter
sublist.reverse()
delimiter
x[x.first_valid_index()]
delimiter
self.list1[i], self.list2[i]
delimiter
fig = plt.gcf()
delimiter
fp.seek(BOMLEN, os.SEEK_CUR)
delimiter
self._setup_widgets()
delimiter
seq = [1, 4, 6, 9, 11]
delimiter
querywords = query.split()
delimiter
somemodule = importlib.import_module(module_name)
delimiter
glClearColor(0 / 255, 0 / 255, 0 / 255, 0 / 255)
delimiter
sys.path = old_path
delimiter
newopen.write(line)
delimiter
bytearray(data[i] ^ key[i % l] for i in range(0, len(data)))
delimiter
np.set_printoptions(precision=17)
delimiter
mask = np.zeros(gray.shape, np.uint8)
delimiter
tree = etree.ElementTree(root)
delimiter
key = self.window.getch()
delimiter
pool = Pool(processes=numProcesses, initializer=initPool)
delimiter
d = {x: i for i, x in enumerate(t)}
delimiter
result_dict[key] = list(value)
delimiter
inner
delimiter
output = PdfFileWriter()
delimiter
len(get_file_contents(filename).split())
delimiter
df = df[reordered]
delimiter
tck, u = interpolate.splprep(data)
delimiter
end_date = time.strptime(end_date[:-ulr], fmt)
delimiter
self.Close()
delimiter
a = map(int, [(x ** 0.5) for x in range(20)])
delimiter
1, int(x)
delimiter
pygame.init()
delimiter
self.resize(frame.contentsSize())
delimiter
porter = PorterStemmer()
delimiter
ax = fig.add_subplot(111)
delimiter
self.grid = gridlib.Grid(self, style=wx.BORDER_SUNKEN)
delimiter
cutoff = df.indweight.sum() / 2.0
delimiter
np.ix_([0], [0, 1, 2], [0, 2])
delimiter
list.append(num)
delimiter
tt.tm_year * 1000 + tt.tm_yday
delimiter
inlines = [BookInline]
delimiter
x = np.arange(8.0)
delimiter
EPOCH_DATETIME = datetime.datetime(1970, 1, 1)
delimiter
raise Timeout()
delimiter
a = [1, 2]
delimiter
numberPlate = models.IntegerField(primary_key=True)
delimiter
df = df.iloc[idx]
delimiter
print(type(inputList))
delimiter
matcher.a[match.a:match.a + match.size]
delimiter
rcount(a)
delimiter
self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
result = thirdparty.go()
delimiter
sys.stdout = old_stdout
delimiter
process_count -= 1
delimiter
meta.add_tags()
delimiter
parser = argparse.ArgumentParser()
delimiter
m = re.search(r, s)
delimiter
df[df1.columns.unique()] = df1.groupby(df1.columns, axis=1).sum()
delimiter
sys.modules[newk] = sys.modules[k]
delimiter
locals()
delimiter
q.join()
delimiter
p.get_device_info_by_index(4)
delimiter
window.show()
delimiter
newList.append(list(range(r[0], r[1] + 1)))
delimiter
d = defaultdict(dict)
delimiter
btn.set_style(style)
delimiter
any(i) and not any(i)
delimiter
print(int_list)
delimiter
lst.append(i)
delimiter
Base.metadata.create_all(engine)
delimiter
print(a)
delimiter
alpha.paste(circle.crop((0, 0, rad, rad)), (0, 0))
delimiter
A = np.array([1, nan, nan, 2, 2, nan, 0])
delimiter
br.open(url)
delimiter
print(SequenceMatcher(a=s_1, b=s_2).ratio())
delimiter
circularity = circumference ** 2 / (4 * math.pi * area)
delimiter
fig, ax = plt.subplots()
delimiter
print(i)
delimiter
auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
delimiter
print(posneg([-1, 1, -4, 5]))
delimiter
pygame.init()
delimiter
self.func(self, *args, **kwargs)
delimiter
a = a[:-1]
delimiter
y += 0.5 * y.max() * np.random.random(num)
delimiter
f = urllib.request.urlopen(req)
delimiter
ax.set_ylim(-2, 2)
delimiter
profile.save()
delimiter
asin(2).rewrite(log)
delimiter
print(get_long(b, 1))
delimiter
formset
delimiter
created_at = models.DateTimeField(auto_now=True)
delimiter
np.sqrt(g, out=g)
delimiter
print(a)
delimiter
app = Flask(__name__)
delimiter
index.reshape(-1, k)
delimiter
float_to_str(0.1)
delimiter
s = requests.session()
delimiter
window.add(frame)
delimiter
soup = bs4.BeautifulSoup(html)
delimiter
cities = City.objects.all()
delimiter
masks = [p for p in product([0, 1], repeat=len(data))]
delimiter
stdscr.addstr(i, 0, line)
delimiter
libc.cprogram(wts, res, kks, n, ex)
delimiter
df.columns
delimiter
print(s)
delimiter
df1 = merge(csv1, csv2, **kw1)
delimiter
digit_product2()
delimiter
count = len(s)
delimiter
doc = minidom.parse(myXmlFile)
delimiter
im_norm = (im_g - im_g.min()) / (float(im_g.max()) - im_g.min())
delimiter
True
delimiter
func(*args, **kw)
delimiter
cur_set.pop()
delimiter
result_list.append(queue.get())
delimiter
ax = fig1.add_subplot(111)
delimiter
sum(s[i] != t[i] for i in range(len(s)))
delimiter
t.start()
delimiter
smtp.starttls()
delimiter
{k: [max((a for a in s if n in a), key=len) for n in v] for k, v in list(my_dict.items())}
delimiter
w = gtk.gdk.get_default_root_window()
delimiter
data = []
delimiter
self.data[key].add(element)
delimiter
found_dates.append(m.group(1))
delimiter
rhythmbox_dbfile = os.path.expanduser(dbfile)
delimiter
self.timer.Stop()
delimiter
deleteself.all[self._key]
delimiter
rect = plt.Rectangle((i, -0.5), 1, 1, facecolor=col)
delimiter
sum(y)
delimiter
data
delimiter
rand_x_digit_num(10)
delimiter
p = mp.Process(target=twitter, args=())
delimiter
wb = Workbook()
delimiter
n -= 1
delimiter
o.pull()
delimiter
A.setdiag(b[:-1], k=1)
delimiter
numerator = sum([(vec1[x] * vec2[x]) for x in intersection])
delimiter
ipsh()
delimiter
mask = np.isnan(arr)
delimiter
val = np.asarray(imgTk)[x, y]
delimiter
content_type, width, height
delimiter
sys._getframe(back + 1).f_code.co_filename
delimiter
df
delimiter
ll = [[(x * N) for x in y] for y in hh]
delimiter
msg = str(_sys.exc_info()[1])
delimiter
a[1](1)
delimiter
xlim, ylim = ax.get_xlim(), ax.get_ylim()
delimiter
a = datetime.now()
delimiter
max_val = max(l)
delimiter
print(x)
delimiter
True
delimiter
cumdims = (np.maximum(A.max(), B.max()) + 1) ** np.arange(B.shape[1])
delimiter
ic = image.crop(box)
delimiter
cur = con.cursor()
delimiter
print(asubkey)
delimiter
user_id = 142187
delimiter
page = urllib.request.urlopen(request)
delimiter
close(child2father_pipefd[0])
delimiter
pyautogui.moveRel(0, 10)
delimiter
to_product.append([(k, list(l)) for l in c])
delimiter
self.assertRedirects(response)
delimiter
raise TypeError
delimiter
new_stack
delimiter
uniq.append(x)
delimiter
self.foo = foo
delimiter
x.start()
delimiter
result = []
delimiter
Counter(map(tuple, a))
delimiter
self._find(val, self.root)
delimiter
llslice[1][1:2] = [10, 11, 12]
delimiter
pd.concat([sales, pd.DataFrame(hours, index=sales.index)], axis=1)
delimiter
max_value = max(scores.values())
delimiter
res
delimiter
print(cookie.name, cookie.value)
delimiter
sidx = a.argsort()
delimiter
i += 1
delimiter
[]
delimiter
lst = [list(grp) for i, grp in groupby(lst, key=len)]
delimiter
value[:2]
delimiter
pylab.ylim(-1.5, 2.0)
delimiter
v = float(s) if pattern.findall(s) else int(s)
delimiter
p = multiprocessing.Pool()
delimiter
x[0] = 100
delimiter
m4x = np.sum(Z * X4) / np.sum(Z)
delimiter
m4y = np.sum(Z * Y4) / np.sum(Z)
delimiter
data.splitlines()
delimiter
self.queue.put_nowait(s)
delimiter
[1, 0, 0, 0]
delimiter
ax.set_yticks(list(range(0, 9000, 1000)))
delimiter
v = float(s) if any(c in chars for c in s) else int(s)
delimiter
x[1] < seq[end - 1][1]
delimiter
minutes, seconds = divmod(seconds, 60)
delimiter
serializer.save()
delimiter
Thread(target=write_input, args=(file, process.stdin), daemon=True).start()
delimiter
rabbit_frog
delimiter
rabbit_horse
delimiter
offset = (today.weekday() - 2) % 7
delimiter
print(a, b, c)
delimiter
print(integrate.quad(func2, -pi / 2, pi / 2, args=(-pi / 2, pi / 2))[0])
delimiter
helper = np.vectorize(lambda x: x.total_seconds())
delimiter
height = rect.get_height()
delimiter
axc = fig.add_axes([0.85, 0.1, 0.05, 0.85])
delimiter
newk = []
delimiter
spam(5).__closure__[0].cell_contents
delimiter
f = urllib.request.urlopen(url)
delimiter
self.val = val
delimiter
fig = plt.figure()
delimiter
start = pyqtSignal(str)
delimiter
[c for c in s]
delimiter
n += 1
delimiter
Q, R = np.linalg.qr(X)
delimiter
print(np.ma.MaskedArray(Z, mask=~mask).sum())
delimiter
print(lucky(10))
delimiter
struct.unpack(format, frame_data)
delimiter
self.func(*self.args, **self.kwargs)
delimiter
indices = numpy.arange(a.size)
delimiter
[26.7, 8.0],
delimiter
t2.close()
delimiter
random.shuffle(combined)
delimiter
client, address = self.sock.accept()
delimiter
self.body = body
delimiter
all_data = pd.DataFrame()
delimiter
type.__new__(meta, classname, bases, newClassDict)
delimiter
current_dir = os.getcwd()
delimiter
layout.deleteLater()
delimiter
m.captures(4)
delimiter
Session.commit()
delimiter
b = a[:, (np.newaxis)] * np.ones((1, 7, 1))
delimiter
df = pd.DataFrame(np.random.choice([1, np.nan], (100000, 150), p=(0.01, 0.99)))
delimiter
children.add(ast.children.get(i))
delimiter
glMatrixMode(GL_MODELVIEW)
delimiter
c.execute(q)
delimiter
termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
delimiter
method(self, *args, **kwargs)
delimiter
c.append(a[index])
delimiter
linkers = []
delimiter
self.L.sort()
delimiter
Swallow.i += 1
delimiter
mlab.pipeline.volume(grid, vmin=min, vmax=min + 0.5 * (max - min))
delimiter
self.view = QtGui.QTreeView()
delimiter
MI.Open(directory + file)
delimiter
a[a < 0] = 0
delimiter
edgar.database.load(quarters)
delimiter
new_s += chr(n)
delimiter
pool = mp.Pool(processes=4)
delimiter
pl.imshow(z0, extent=[-5, 5, -5, 5], alpha=0.5)
delimiter
counts = Counter(list1)
delimiter
app = web.application(urls, globals())
delimiter
1 / 0
delimiter
base64.b64encode(aes.encrypt(message)).decode()
delimiter
self.yvel -= self.jump_speed
delimiter
app = Flask(__name__)
delimiter
set([t.farm for t in qs])
delimiter
result = {}
delimiter
print(stored_file.content_type)
delimiter
h
delimiter
do_error()
delimiter
validate(input, schema)
delimiter
channel.exec_command(remote_command)
delimiter
r = redis.StrictRedis(connection_pool=pool)
delimiter
x = np.ones((5, 1))
delimiter
self.window_list = []
delimiter
p, e = optimize.curve_fit(piecewise_linear, x, y)
delimiter
print(bar())
delimiter
np.sort(data.reshape(N, -1))
delimiter
print(o.foo())
delimiter
cPickle.dump(root.sclX.config(), f, -1)
delimiter
pickle.dump((a, b), f)
delimiter
soup = BeautifulSoup(str(response))
delimiter
ax = fig.add_axes([1, 1, 1, 1])
delimiter
match = matchre.match(character)
delimiter
verts.append(zip(xs, ys))
delimiter
ipshell
delimiter
x[:, (0), (0)]
delimiter
secgen = map(operator.itemgetter(1), gen)
delimiter
root.mainloop()
delimiter
total += int(col)
delimiter
ranges.append(s)
delimiter
0
delimiter
do_something(arr)
delimiter
ax4.xaxis.tick_bottom()
delimiter
dialog.ui = Ui_MyDialog()
delimiter
J.append(np.arange(start, end))
delimiter
next(g)
delimiter
pickle.dump(d, f)
delimiter
row.pop(6)
delimiter
np.array(result)
delimiter
table(ax, df)
delimiter
fig = plt.figure()
delimiter
l = [x for x in l if x[0] != last[0] and x[1] != last[1]]
delimiter
IPython.Cell.options_default.cm_config.lineWrapping = true
delimiter
num_chars += len(line)
delimiter
self.show_file(self.save_image(image), **options)
delimiter
samples = np.empty((0, 100))
delimiter
x
delimiter
img = LoadImage(sys.argv[1], 1)
delimiter
fo.close()
delimiter
s = sorted(zip(list_2, list_1), reverse=True)
delimiter
print(a, b)
delimiter
n = 0
delimiter
pwd = os.path.dirname(__file__)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
worker.start()
delimiter
self._timeCreated = time.time()
delimiter
terms = vectorizer.get_feature_names()
delimiter
print(thing)
delimiter
opener = urllib.request.build_opener(proxy, auth, urllib.request.HTTPHandler)
delimiter
rndseries.head()
delimiter
html.title
delimiter
power(base, exponent - 1, result * base)
delimiter
latlong = transform.TransformPoint(x, y)
delimiter
image = image.resize(size, Image.ANTIALIAS)
delimiter
[[]]
delimiter
logger.setLevel(logging.ERROR)
delimiter
self.f.write(x)
delimiter
a[~((a < -100) | (a > 100))]
delimiter
train, test = mylist[0]
delimiter
np.vstack((unq, unq_avg))
delimiter
foo()
delimiter
strs = repr(s)
delimiter
response
delimiter
window.add(image)
delimiter
f(*a, **kw)
delimiter
data.append(m.groups())
delimiter
ax.pole(*mplstereonet.vector2pole(x, y, z))
delimiter
print(repr(process.stdout.readline()))
delimiter
b = [4, 5, 6]
delimiter
random.seed()
delimiter
[1, 0, 1, 1]
delimiter
conn.close()
delimiter
array([46, 62, 61])
delimiter
data = zipread.read(item.filename)
delimiter
m = stats.trim_mean(X, 0.1)
delimiter
arr = np.array(some_sequence)
delimiter
size = f.tell()
delimiter
e = ET.ElementTree(ET.fromstring(xml_string))
delimiter
list(sum(list_, ()))
delimiter
ancestor.before.remove(descendent)
delimiter
func(ret, *args)
delimiter
angles = np.arange(0, 2 * np.pi, d * np.pi / 180)
delimiter
ax = fig.axes[0]
delimiter
it.chain(*mt.roundrobin(mt.chunked(list1, n - 1), list2))
delimiter
minutes = utc_offset / timedelta(minutes=1)
delimiter
store_file(new_file, nchunks, hash)
delimiter
matrix[4][4] = 2
delimiter
Testing(4 / 4)
delimiter
pool.map(worker, list(range(10)))
delimiter
Test.__init__
delimiter
df = df._get_numeric_data()
delimiter
repr(bar)
delimiter
plt.xticks(rotation=90)
delimiter
colors = img.getcolors(256)
delimiter
scat = ax.scatter(x, y, c=z, s=200)
delimiter
outfile.write(doc.prettify())
delimiter
ax.set_ylim([0.1, 0.8])
delimiter
n, k = int(eval(input())), int(eval(input()))
delimiter
Row(*A)
delimiter
x[np.nonzero(x)]
delimiter
print(k, list(v))
delimiter
from_date = datetime.datetime.today()
delimiter
turtle.right(90)
delimiter
nums[1]
delimiter
particles = [Particle(i) for i in range(100000)]
delimiter
do_something_else(arr)
delimiter
id(a[1])
delimiter
command = sys.argv[1]
delimiter
np.random.seed(2015)
delimiter
model_class = self._get_model_class(query)
delimiter
ranked = sx.expanding().apply(lambda x: ranking(x))
delimiter
ccv1
delimiter
ccb1
delimiter
print((der_a.a, der_a.z))
delimiter
results.extend(result.groups())
delimiter
print(args)
delimiter
print(r.findall(s))
delimiter
print(temp)
delimiter
dt = dt.replace(hour=0, minute=0, second=0, microsecond=0)
delimiter
mask = np.zeros(image_src.shape, np.uint8)
delimiter
file_path = request.url[7:]
delimiter
plt.setp(ax.xaxis.get_gridlines(), clip_path=circle)
delimiter
df
delimiter
b[-1] = b[-1][0], end
delimiter
form.permissions.data = [p.id for p in user.permissions]
delimiter
threading.Thread(target=self.listenToClient, args=(client, address)).start()
delimiter
val_to_delete = max(d.values())
delimiter
_lazyprop
delimiter
results = (c_char_p * 4)(addressof(create_string_buffer(7)))
delimiter
file.seek(0)
delimiter
curses.wrapper(main)
delimiter
kernel[1, 1] = 2.0
delimiter
decorator(fn_or_output)
delimiter
self.logwindow.AppendText(msg)
delimiter
ab = np.where(a[:, (np.newaxis)] == b[(np.newaxis), :])
delimiter
process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)
delimiter
arr = np.array([False, True])
delimiter
l = sc.recv(1024)
delimiter
0
delimiter
f.write(DATA)
delimiter
params = {}
delimiter
output = capturer.getvalue()
delimiter
s = pylzma.compressfile(i)
delimiter
decoded = decode_columns(out.indices).reshape(X.shape)
delimiter
counter.most_common()
delimiter
lengths = Counter(len(v) for v in list(userIdDict.values()))
delimiter
w.start()
delimiter
f(0, 0, 0)
delimiter
self.assertEqual(expect, foo)
delimiter
B_out[:, (col_idx)] = np.add.reduceat(A[:, (sidx)], grp_start_idx, axis=1)
delimiter
tcpCliSock.close()
delimiter
self.d = self.m.dict()
delimiter
fnx = lambda v: NP.random.randint(0, 10, v)
delimiter
my_instance = MyClass()
delimiter
cert_path
delimiter
build_base = my / build / dir
delimiter
screen_names = [user.screen_name for user in api.lookup_users(user_ids=ids)]
delimiter
t.daemon = True
delimiter
myapp.run()
delimiter
y = list([0, 1])
delimiter
[1, 0, 0, 1]
delimiter
l = list(range(20))
delimiter
self.loginPage()
delimiter
yourThread = threading.Thread()
delimiter
wrapped
delimiter
self.sizer = wx.BoxSizer(wx.VERTICAL)
delimiter
np.sum(x != y)
delimiter
k = np.array([True, False, False, True, False])
delimiter
self.start()
delimiter
event.fire(*args, **kargs)
delimiter
jsonify(u.get_public())
delimiter
img2x = img2.shape[1]
delimiter
sample_object.users.through.objects.create(user_id=1, sample_id=sample_id)
delimiter
data = inf.read(BLOCKSIZE)
delimiter
dateData.append(end)
delimiter
poly = np.poly1d(coeffs)
delimiter
worksheet = workbook.add_worksheet()
delimiter
yrloc = matplotlib.ticker.MaxNLocator(steps=[1, 2, 5, 10])
delimiter
r = list(range(1000))
delimiter
manage.py
delimiter
sparsemax(X, Y)
delimiter
df = pandas.DataFrame(data)
delimiter
func(that, session, *args, **kwargs)
delimiter
im.blit(0, 0, window.width, window.height)
delimiter
c[c < 0] = 0
delimiter
pprint(get_driver_name_from_guid(x))
delimiter
words = line.split()
delimiter
ar.reshape(ar.shape[0], 1)
delimiter
toolz.valmap(f, my_list)
delimiter
colorama.init(autoreset=True)
delimiter
f = lambda x: map(neg, x)
delimiter
user_email = instance.email
delimiter
self.left = left
delimiter
A = scipy.delete(A, 1, 0)
delimiter
isinstance(obj, str)
delimiter
df.index = df.index.get_level_values(0) + df.index.get_level_values(1)
delimiter
key = operator.itemgetter(0)
delimiter
t = np.linspace(0, 4 * np.pi, N)
delimiter
print([i for i in lib.make_array().contents])
delimiter
fibonacci(n - 1) + fibonacci(n - 2)
delimiter
noVow(seq[1:])
delimiter
seclist = [2, 4, 6]
delimiter
tk = tkinter.Tk()
delimiter
serializer_class = SpeakerSerializer
delimiter
wedding_obj
delimiter
df = pd.DataFrame(df)
delimiter
H, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0
delimiter
r1 = Range(start=datetime(2012, 1, 15), end=datetime(2012, 5, 10))
delimiter
t.render(context)
delimiter
(1 - coeff * z ** -2)([1, 0, 0, 0, 0, 0, 0]).take(inf)
delimiter
result = np.empty((4, 2), dtype=int)
delimiter
df = df[df.TMP.notnull()]
delimiter
timer1.stop()
delimiter
mysets = (set(x.items()) for x in MyList)
delimiter
im_out = np.dstack([r, g, b])
delimiter
traceback.print_exc()
delimiter
str(root)
delimiter
plt.boxplot(weighted_appearances)
delimiter
list(spam.items())
delimiter
x = np.empty(len(a))
delimiter
ax2.autoscale(False)
delimiter
b.flags.owndata
delimiter
Foo.py
delimiter
d[str(k)] = v
delimiter
self.optionmenu_b.pack()
delimiter
ax1 = fig.add_subplot(221)
delimiter
col.append(row[i])
delimiter
model1 = build_model()
delimiter
lst.extend(words)
delimiter
w, h = win.GetSize()
delimiter
triplets = [[a] for a in listA]
delimiter
lines.append(self.context)
delimiter
[1, 1, 0]
delimiter
jobscheduler.configure(jobstores=jobstores)
delimiter
remote_conn = remote_conn_pre.invoke_shell()
delimiter
old_path = sys.path
delimiter
arr.copy()
delimiter
mask = ~np.any(np.isnan(x), axis=1)
delimiter
ax2.scatter(bins_mean, n)
delimiter
repr(dict)
delimiter
self._task_handler.start()
delimiter
s.dropna().plot()
delimiter
button.Bind(wx.EVT_BUTTON, func)
delimiter
file.__init__(self, *args, **keyws)
delimiter
self.mainLayout = QtGui.QVBoxLayout(self)
delimiter
print(line)
delimiter
plt.subplot(122)
delimiter
yourNewSet = map(set, list(set(map(tuple, yourSet))))
delimiter
range_start = 10 ** (n - 1)
delimiter
writer.writeheader()
delimiter
func(*func_args, **func_kwargs)
delimiter
x = np.arange(10)
delimiter
print(c)
delimiter
plt.plot(x, intg / fullpower)
delimiter
b1 = np.random.randint(0, 100, 50)
delimiter
self.func(*args, **kwargs)
delimiter
a.take((1,), axis=0)
delimiter
self.qa.save()
delimiter
ax.set_title(label, size=20)
delimiter
self.head = tmp.__next__
delimiter
s.ioctl(socket.SIO_RCVALL, socket.RCVALL_ON)
delimiter
print(True)
delimiter
self.b_set.add(b)
delimiter
[_f for _f in map(self._func, collection) if _f]
delimiter
contents = fp.readlines()
delimiter
id(my_dict)
delimiter
can.place(relx=0.5, rely=0.5, anchor=CENTER)
delimiter
sorted(iterable, key=natural, reverse=reverse)
delimiter
print(len(shared_items))
delimiter
inds = np.triu_indices_from(a, k=1)
delimiter
lines = stdout.readlines()
delimiter
gmm.delta = 0
delimiter
f.getvalue()
delimiter
dt = datetime.datetime.fromtimestamp(jsts / 1000.0)
delimiter
b = a
delimiter
count += 1
delimiter
random.shuffle(listOfItems)
delimiter
client2.close()
delimiter
Whatever().dosomething()
delimiter
np.where(cnt, hi[ind[cnt - 1]], initial)
delimiter
dic = dict(zip(lis, lis[1:]))
delimiter
c = lambda a, b: [list(c) for c in zip(a, b)]
delimiter
s.ioctl(socket.SIO_RCVALL, socket.RCVALL_ON)
delimiter
L.append(results.get())
delimiter
error_class = err.__class__.__name__
delimiter
sys.stdout = old
delimiter
k.release_key(k.alt_key)
delimiter
a.clip(0)
delimiter
print(sum(res))
delimiter
i += self.shape[0]
delimiter
r = np.minimum(np.arange(n)[::-1], np.arange(n))
delimiter
incrementerBy1 = Incrementer(1)
delimiter
dis.dis(greet)
delimiter
print(list(Foo().foo()))
delimiter
self.d = {}
delimiter
print()
delimiter
Frequency = Pitch(data)
delimiter
fig = plt.gcf()
delimiter
m.group(2)
delimiter
do_some_thing()
delimiter
t = timeit.Timer(foo)
delimiter
session2.close()
delimiter
zip(table, list)
delimiter
tmp2[:, (0)] *= -1
delimiter
main.write(ccode)
delimiter
print(b.shape)
delimiter
display.display(pl.gcf())
delimiter
fw.close()
delimiter
inMemoryOutputFile.seek(0)
delimiter
process.get_memory_info()[0] / float(2 ** 20)
delimiter
plt.imshow(image)
delimiter
num += cur.execute(sql, arg)
delimiter
client = docker.Client()
delimiter
test2.reshape(-1, 2)[::2].reshape(-1, 4)
delimiter
k = [(x, l.count(x)) for x in set(l)]
delimiter
sum(1 for k in ks if k_v1s.get(k) != k_v2s.get(k))
delimiter
n, p = map(int, input().split())
delimiter
picked.append(random.choice(data))
delimiter
item_length = len(item) + 1
delimiter
print(test_unicode)
delimiter
d = {}
delimiter
root = Tk()
delimiter
a[i] = x + 4
delimiter
x + y
delimiter
print(poly.containsPoint(QPoint(1, 1), Qt.OddEvenFill))
delimiter
catpcha = find_catpcha(response)
delimiter
response = urllib.request.urlopen(request)
delimiter
app.exec_()
delimiter
connection.execute(ins, values)
delimiter
self.pack()
delimiter
clf = linear_model.LinearRegression()
delimiter
string.split(divs[0])
delimiter
print(list(recurse(dirDict)))
delimiter
sum(row) > 0.5
delimiter
ordered = OrderedDict()
delimiter
QtGui.QSystemTrayIcon.__init__(self, icon, parent)
delimiter
df = pd.DataFrame(invs)
delimiter
s = q.get()
delimiter
chrome_options = webdriver.ChromeOptions()
delimiter
all(ord(c) < 128 for c in s)
delimiter
inputs = [1, 1, 0, 2]
delimiter
x = np.linspace(data.min(), data.max(), 100)
delimiter
inputarr = sys.stdin.read().split()
delimiter
tree = etree.parse(testf, parser=parser)
delimiter
[hyde]
delimiter
obj_list.append(obj[i])
delimiter
list(range(lowerBound, upperBound + step, step))
delimiter
fig.autofmt_xdate()
delimiter
foo = np.array(foo_array)
delimiter
count += 1
delimiter
a[row, col] = a.sum(axis=1) - a[row, col]
delimiter
MonkeyDevice.__init__(self)
delimiter
Signal.send(sender, **kwargs)
delimiter
print(a % np.sign(a))
delimiter
copyfileobj(fsrc, fdst)
delimiter
DL_path = os.getcwd()
delimiter
max(chars, key=chars.count)
delimiter
print(i1 & 16777215, i2)
delimiter
surf = pg.Surface((200, 200), flags=HWSURFACE)
delimiter
dct[elem_name]
delimiter
keys = sorted(sorted(shaders_dict), key=shaders_dict.get)
delimiter
tick.set_markeredgewidth(2)
delimiter
parser.argparse.ArgumentParser()
delimiter
timeit(stmt1, number=100)
delimiter
u, v = np.mgrid[0:2 * np.pi:20j, 0:np.pi:10j]
delimiter
cols = df.columns.values
delimiter
has_add_permission(self.request.user, self.request)
delimiter
print(data)
delimiter
index, item
delimiter
a[0] + a[1] * 0.1
delimiter
print(repr(packet))
delimiter
Py_Initialize()
delimiter
cv2.line(out, (int(x1), int(y1)), (int(x2) + cols1, int(y2)), (255, 0, 0), 1)
delimiter
dict_of_lists = defaultdict(list)
delimiter
sum = 0
delimiter
dllname = os.path.split(dllname[0])
delimiter
expr.setParseAction(Expr)
delimiter
print(REGEX.findall(test_string))
delimiter
ax = fig.add_subplot(111)
delimiter
setattr(mod, attr, value)
delimiter
pubs[0].num_books
delimiter
do_something(obj)
delimiter
json.dump(testarr, test_file)
delimiter
output.close()
delimiter
screen.fill((159, 182, 205))
delimiter
self.nout = a
delimiter
tmp = np.zeros((height, width))
delimiter
data.update(a_dict)
delimiter
t = np.floor(x)
delimiter
ans.extend([(a, x) for x in l2[b:e]])
delimiter
print(polygon(4, 100))
delimiter
fd.write(data)
delimiter
f.writelines(lines[-LIMIT:])
delimiter
qcookiejar.setCookiesFromUrl(qnetworkcookie_list, QUrl(requested_url))
delimiter
httplib.HTTPConnection.putheader(self, header, value)
delimiter
loop_start = time.time()
delimiter
foo = Foo()
delimiter
fbhandle.close()
delimiter
dir(test)
delimiter
pd.__version__
delimiter
train_set, valid_set, test_set = pickle.load(f)
delimiter
cnxn = pypyodbc.connect(conn_str)
delimiter
login_form = LoginForm(request.POST)
delimiter
assert istr.good()
delimiter
print(arguments[i].value)
delimiter
pool = multiprocessing.Pool(1)
delimiter
result
delimiter
value
delimiter
merged.update(obj)
delimiter
Py_Initialize()
delimiter
s.append(item[0] + item[1])
delimiter
result_data[mask] = np.mean(values[mask])
delimiter
True
delimiter
print(list(all_combos(ceiling=6, target_sum=12, num_cells=4)))
delimiter
im_out = (im_out * 255).astype(np.uint8)
delimiter
op.__dict__.update(locals())
delimiter
PyErr_Print()
delimiter
train_data[:, (indexes[0])]
delimiter
plot(times, sin(2 * pi * freq * times))
delimiter
palette_img.putpalette(flat_palette)
delimiter
img = feature.canny(img).astype(np.uint8)
delimiter
print(type(node), node)
delimiter
dictionary[x].append(y)
delimiter
image.save(file_obj, ext)
delimiter
file.write(i)
delimiter
output[parts[1].strip()] = parts[2].strip()
delimiter
line = plt.plot(t, y)[0]
delimiter
c.stop()
delimiter
assert a.average() == 7.5
delimiter
x1 = np.random.permutation(100000)
delimiter
one_set = set(one_list)
delimiter
splits = list(m.start() for m in re.finditer(pattern, string))
delimiter
{{response | safe}}
delimiter
result = re.sub(p, subst, test_str)
delimiter
existing_alias.put()
delimiter
df = pd.DataFrame(data, columns=mux)
delimiter
show(p)
delimiter
obj = get_object_or_404(CustomModel, id=some_id)
delimiter
0.6942, sym2, 7, 5, 10, 10
delimiter
req = urllib.request.Request(url, stream)
delimiter
np.nanmax(grouped_2Darray, 1)
delimiter
print(a.__dict__)
delimiter
print(line1.intersection(line2))
delimiter
locale.nl_langinfo(locale.RADIXCHAR)
delimiter
ranges.remove(i)
delimiter
deploy(hosts, command)
delimiter
base_value * (1.0 / 2.54)
delimiter
browser = mechanize.Browser()
delimiter
correlations = df.corr()
delimiter
self.names = set()
delimiter
df
delimiter
cur = con.cursor()
delimiter
a = numpy.array([[2.0, 0.0, 0.0], [0.0, 2.0, 0.0], [0.0, 0.0, 4.0]])
delimiter
popularity = sorted(set(a), key=lambda x: -a.count(x))
delimiter
gtxt = [pat[b[0]:b[1] + 1] for b in bloc]
delimiter
y_rev = x.size - y - 1
delimiter
result.groups() if result else []
delimiter
self.delete()
delimiter
account.objects.get(pk=42).accounttypeb
delimiter
out = x[idx[count == 1]]
delimiter
lockedmethod.__name__ = methodname
delimiter
x.visit(t)
delimiter
print(property.content)
delimiter
h = 1 << bits - 1
delimiter
comment_tree.append(create_tree(record, comment_set))
delimiter
client, address = s.accept()
delimiter
b = 1
delimiter
Counter(s) == Counter(t)
delimiter
expressions.append(list(itertools.product(o, v)))
delimiter
ipshell.mainloop()
delimiter
np.percentile(data, percents)
delimiter
attrs
delimiter
m = s.str.len().max()
delimiter
gevent.spawn(read_stream, p.stderr, stderr)
delimiter
df = df.fillna(0)
delimiter
d2 = myfun(d)
delimiter
name = models.CharField(max_length=50)
delimiter
print(a)
delimiter
type(b)
delimiter
a = len(may_a)
delimiter
lexer = lex.lex(optimize=1)
delimiter
user = form.save()
delimiter
pool = ThreadPoolExecutor(max_workers=40)
delimiter
y = (lambda x=x: [(x + i) for i in range(1)])()
delimiter
L = dot(diag(D ** -0.5), dot(A, diag(D ** 0.5)))
delimiter
lib.test.argtypes = POINTER(darray), POINTER(darray)
delimiter
f(5)
delimiter
curses.endwin()
delimiter
S = pd.Series(np.random.normal(size=200))
delimiter
print(l)
delimiter
regex.sub(repl, string)
delimiter
main()
delimiter
root.mainloop()
delimiter
fig = figure()
delimiter
print(foo, bar)
delimiter
triples.append((i, t1, t2))
delimiter
A()
delimiter
out = zip(r, c, a[r, c])
delimiter
ctypes.sizeof(ctypes.c_uint16)
delimiter
L = [1, 1, 2]
delimiter
array([6, 8])
delimiter
flab_nickers,
delimiter
x = np.random.random((M, N))
delimiter
row = line.split()
delimiter
result = [idx for idx, item in enumerate(a) if item in a[:idx]]
delimiter
max_value = a[mask].max()
delimiter
rs = (grequests.get(u) for u in urls)
delimiter
nrange = np.arange(n)
delimiter
po = Pool()
delimiter
mat[0][0] = 1
delimiter
np.set_printoptions(linewidth=1000, edgeitems=5)
delimiter
Base = declarative_base()
delimiter
random_sample(data, timesteps=2, batch_size=2)
delimiter
ystart = 0
delimiter
b.getDouble_B()
delimiter
e = Environment(loader=fileloader, autoescape=True)
delimiter
d(10) ** d(10) ** d(10) == d(10) ** d(10) ** d(10) + 1000000
delimiter
xml.sax.parse(f, ch)
delimiter
df_test.loc[idx]
delimiter
d.update(value)
delimiter
arr = (i >> nxn) % 2
delimiter
numpy.asarray([my_list]).shape
delimiter
http_server.listen(8080)
delimiter
self.identity.do_something()
delimiter
plt.grid(True)
delimiter
new_list.extend(letters[start_index:start_index + n])
delimiter
jsonresponse = json.loads(response.body_as_unicode())
delimiter
self.func(*func_results)
delimiter
print(yaml.dump(d))
delimiter
key_fu = lambda x: x[0][0]
delimiter
print(a[(np.newaxis), :, :].shape)
delimiter
gca().add_patch(rect)
delimiter
FirstBase.__init__(self, *args, **kargs)
delimiter
plt.semilogy(xdata, ydata)
delimiter
print(prng.random())
delimiter
pageContent = urllib.request.urlopen(httpRequest)
delimiter
df
delimiter
i, j = 0, 0
delimiter
self.setLayout(layout)
delimiter
row_names.append(name)
delimiter
slices = sorted(random.sample(list(range(0, len(index))), 2 * n))
delimiter
self.heap = []
delimiter
d = defaultdict(list)
delimiter
load_file(self.md5)
delimiter
logging.error(self.headers)
delimiter
line2 = LineString([(0, 1), (1, 1)])
delimiter
write_and_close_docx(word_doc, tree, new_word_doc)
delimiter
Lv = np.append(Lv, [last])
delimiter
lst = list(range(4))
delimiter
data = json.loads(elevations)
delimiter
Pdb
delimiter
print(page_html + news_script_output)
delimiter
td = datetime.timedelta(hours=2)
delimiter
cmp(v1, v2)
delimiter
dtype2 = np.dtype({name: arr.dtype.fields[name] for name in fields})
delimiter
arr = np.arange(2000).astype(float)
delimiter
A.__dict__
delimiter
self.add_widget(widget)
delimiter
s1.erase(*iter)
delimiter
server_url = models.CharField(max_length=255)
delimiter
histogram[img.getpixel((x2, y2))] += 1
delimiter
loop = asyncio.get_event_loop()
delimiter
arr
delimiter
out = np.zeros((maxt, maxdimx, maxdimy))
delimiter
list(seen2)
delimiter
a = []
delimiter
matches = my_regex.findall(string)
delimiter
searchlines = f.readlines()
delimiter
print(df[inds].to_string())
delimiter
button.pack()
delimiter
df.B.ix[:4].last_valid_index()
delimiter
R.append(psi)
delimiter
print(stringtest)
delimiter
stars1 == stars2
delimiter
True
delimiter
[gdb.Breakpoint(m) for m in method_names]
delimiter
A = np.zeros((nr - 1, nr))
delimiter
plt.plot(x, delay)
delimiter
stdoutdata, stderrdata = p.communicate()
delimiter
Notification.objects.exclude(pk__in=objects_to_keep).delete()
delimiter
line.setOpacity(opacity)
delimiter
last_index = -1
delimiter
print(k[2])
delimiter
db.run_in_transaction(txn)
delimiter
ans = x / y
delimiter
dis.dis(a_long_tuple)
delimiter
discoverer = Discoverer(sys.argv[1])
delimiter
execute_from_command_line(sys.argv)
delimiter
np.array([5.6]).dtype.num
delimiter
outfile.write(mystring)
delimiter
BoundingBox = cv2.boundingRect(c)
delimiter
item
delimiter
t = t + (1,)
delimiter
parser = argparse.ArgumentParser()
delimiter
mask_idx = ~np.in1d(pairs1D, positions1D).reshape(-1, 2).all(1)
delimiter
_render_template(*args, **kwargs)
delimiter
sh = wb.get_active_sheet()
delimiter
i = 0
delimiter
x += 1
delimiter
size = len(value)
delimiter
print(sql)
delimiter
nrm = stats.logistic.cdf(1) - stats.logistic.cdf(0)
delimiter
conn.close()
delimiter
True
delimiter
random.shuffle(b, lambda : r)
delimiter
{{YOUR_CUSTOM_SETTING}}
delimiter
test(1000, 50, 11)
delimiter
ax = ax.ravel()
delimiter
double_to_hex(-17.5)
delimiter
x = np.interp(t, np.arange(len(x)), x)
delimiter
list(csv.reader(inf))
delimiter
fn = sys.stdin.fileno()
delimiter
finalresults = results.execute()
delimiter
alpha = 2 * math.pi * random.random()
delimiter
config = ConfigParser()
delimiter
out_count = np.zeros_like(out_id)
delimiter
frame = sys._getframe(1)
delimiter
skyscrapers[building_number] = AIR
delimiter
output.write(encrypted_secret_key)
delimiter
collator = PyICU.Collator.createInstance(PyICU.Locale.getFrance())
delimiter
deleteelem.getparent()[0]
delimiter
x = arange(0, 1, 1.0 / POINTS)
delimiter
row_names, col_names, data_table = [], [], [[]]
delimiter
[1, 0, 0]
delimiter
k1 = sorted(dict1, key=dict1.get)
delimiter
handle = models.CharField(max_length=255)
delimiter
mydict = {}
delimiter
od2 = OrderedDict(sorted(list(d2.items()), key=lambda t: t[1]))
delimiter
labels = [item.get_text() for item in ax2.get_xticklabels()]
delimiter
main()
delimiter
transposed = zip(*arr)
delimiter
result[i]
delimiter
1 + len_recursive(s[1:])
delimiter
to_dict(y)
delimiter
App().root.mainloop()
delimiter
y = (i for i, v in enumerate(l) if is_odd(v))
delimiter
QtGui.QSystemTrayIcon.__init__(self, icon, parent)
delimiter
Department.objects.raw(sql)
delimiter
asyncio.set_event_loop(self.loop)
delimiter
assert sum(A) == sum(B)
delimiter
pd.DataFrame(dict(l1=lp1, l2=lp2))
delimiter
globals()[name] = ClassFactory(name, params)
delimiter
renWinL.Render()
delimiter
generate_n_primes(10)
delimiter
print(item)
delimiter
str(m)
delimiter
minutes, seconds = divmod(remainder, 60)
delimiter
sys.getsizeof(n)
delimiter
ax1 = fig1.add_subplot(1, 1, 1)
delimiter
os.waitpid(pid)
delimiter
time.sleep(0.1)
delimiter
getattr(self._parent, name)
delimiter
df.head()
delimiter
results = sorted(lists, key=lambda x: (x[0], int(x[1]), int(x[2])))
delimiter
order = np.lexsort((data, groups))
delimiter
show_graph(adjacency)
delimiter
t5.join()
delimiter
cfd(treebank.tagged_words())
delimiter
s = dff.isnull().apply(sum, axis=0)
delimiter
response = urllib.request.urlopen(crawling)
delimiter
s = set([4, 5, 6])
delimiter
fh = logging.FileHandler(LOG_FILE)
delimiter
np.asarray([a[(n), :, (p)] for n, p in enumerate(b2)])
delimiter
file_date_tuple_list = [(x, os.path.getmtime(x)) for x in files]
delimiter
pd.get_dummies(s, drop_first=True)
delimiter
self.fn(*args, **kwargs)
delimiter
filehandler.write(image_data)
delimiter
self._s.bind((self._host_address, port))
delimiter
setup2DstuffModelview()
delimiter
G = nx.Graph()
delimiter
B_out = np.zeros((len(A), n_cols))
delimiter
curs.close()
delimiter
c[:, (np.concatenate(([True], c[(1), 1:] != c[(1), :-1])))][0]
delimiter
w, h = Image.open(imlist[0]).size
delimiter
count_list = list(range(1, N + 1))
delimiter
f = Foo()
delimiter
convolved = np.zeros((nx, ny, nz))
delimiter
print(minimal_dims.shape)
delimiter
the_list = [5, 7, 6, 5, 5, 4, 4, 7, 5, 4]
delimiter
sys.stdout.encoding
delimiter
df = DataFrame(d)
delimiter
ba = bytearray(fh.read())
delimiter
dirpath = sys.argv[1]
delimiter
mask = np.hstack((mask1, mask2))
delimiter
title = models.CharField(max_length=255, unique=True)
delimiter
article = Article.objects.all()[random.randint(1, 15)]
delimiter
my_random_bytes = bytearray(randbytes(1000000))
delimiter
f.close()
delimiter
shutil.copy2(src_file_name, tf.name)
delimiter
out.append(d)
delimiter
print(message.format(value))
delimiter
print(help(a))
delimiter
mylist = []
delimiter
a is b, a is c, a is d, c is d
delimiter
self.pack()
delimiter
record.append(line)
delimiter
n = np.prod(shape)
delimiter
divider = make_axes_locatable(ax)
delimiter
full_name.strip()
delimiter
print(list(p))
delimiter
contents = f.read().split()
delimiter
t = Thread(target=self._run, args=[self])
delimiter
f = [0] * nfactors
delimiter
keys = sorted(d.keys())
delimiter
self.get_year_sales(datetime.now().year - 1)
delimiter
build_matrix(f1, (A, B))
delimiter
self.assertItemsEqual(lst1, lst2)
delimiter
response = urllib.request.urlopen(request)
delimiter
p.append(1)
delimiter
dato = forms.DateField(widget=SelectDateWidget(), initial=yesterday)
delimiter
shell.interact()
delimiter
collections.defaultdict(tree)
delimiter
ax = df.plot()
delimiter
transport = paramiko.Transport((ssh_host, ssh_port))
delimiter
a.dtype.type is np.string_
delimiter
ssl.__file__
delimiter
position = center[0] - 10, center[1] + 10
delimiter
value = self._get_val_from_obj(obj)
delimiter
True
delimiter
form = YourForm(data)
delimiter
mythread.start()
delimiter
themod = __import__(themodname)
delimiter
foo.x
delimiter
sess = tf.InteractiveSession()
delimiter
form.category.choices = categories
delimiter
text = f1.read()
delimiter
result = cur.fetchone()
delimiter
a = df.values
delimiter
urljoin(url, quote_plus(term))
delimiter
ax.spines[pos].set_edgecolor(color)
delimiter
{{formset.management_form}}
delimiter
f = tempfile.NamedTemporaryFile(delete=False)
delimiter
_init_func()
delimiter
handles, labels = ax.get_legend_handles_labels()
delimiter
out.close()
delimiter
d = feedparser.parse(url)
delimiter
arclen = 2 * np.pi * r
delimiter
True
delimiter
main()
delimiter
ax.contourf(xs, ys, zs, cmap=cm.autumn)
delimiter
ax.set_ylim(0.5, max(y))
delimiter
t = Thread(target=newFunc)
delimiter
string.seek(0)
delimiter
self.send(s)
delimiter
draw.rectangle(transparent_area, fill=0)
delimiter
draw.text((0, 50), txt)
delimiter
contents = output.getvalue()
delimiter
muY = Y.mean(0)
delimiter
plt.show()
delimiter
b = [4, 5, 6]
delimiter
s = pylzma.decompressobj()
delimiter
np.linalg.det(a)
delimiter
a, b = pickle.load(f)
delimiter
zf.close()
delimiter
rc2f = np.ravel_multi_index(rc2, A.shape)
delimiter
results = proc.stdout.readlines()
delimiter
math.floor(-1.5)
delimiter
result
delimiter
mpp.join()
delimiter
my_dict = dict(list(tmp.values()))
delimiter
book.py
delimiter
out = my_array[cond]
delimiter
req = urllib.request.Request(url)
delimiter
numpy.searchsorted(a, v, side=numpy.CONSTANTS.SIDE.RIGHT)
delimiter
print(elevation)
delimiter
threads.append(thread)
delimiter
file = os.path.abspath(file)
delimiter
good = np.where(np.isfinite(A))
delimiter
self.parent.Iconize()
delimiter
output_wave_file.setparams(input_wave_files[0].getparams())
delimiter
config.get(section, name)
delimiter
pickle.dump([obj0, obj1, obj2], f)
delimiter
action.triggered.connect(self.mapper.map)
delimiter
tar.addfile(tarinfo=info)
delimiter
docs.append(raw_doc)
delimiter
df
delimiter
foo = 1
delimiter
page = f.read()
delimiter
print(df)
delimiter
BOOST_PYTHON_MODULE(example)
delimiter
sum([(1, 2), (1,), ()], ())
delimiter
-[a, b, c]
delimiter
filepath = os.path.join(path, filename)
delimiter
cp = urllib.request.HTTPCookieProcessor()
delimiter
max(self.root.left.height(), self.root.right.height()) + 1
delimiter
dW[:, (y[ii])] -= XX[(ii), (jj), (ii), :].transpose((2, 0, 1))
delimiter
t.start()
delimiter
X = pd.DataFrame(data)
delimiter
response.peer = self.sock.getpeername()
delimiter
db.put_async(self)
delimiter
inputproc1 = Popen(shlex.split(inputcmd1), stdout=PIPE)
delimiter
fp.close()
delimiter
doStuff()
delimiter
e.property
delimiter
surf.fill(BGCOL)
delimiter
ax = plt.subplot(111)
delimiter
u = User.objects.get(id=1)
delimiter
unittest.TestSuite.run(self, testResult)
delimiter
plt.tight_layout()
delimiter
split_ip(item[0])
delimiter
line_count += 1
delimiter
my_module
delimiter
vbox1.addWidget(self.edit1)
delimiter
Thread(target=loop).start()
delimiter
print(len(results))
delimiter
i = np.argsort(a, axis=1)
delimiter
maxlen = max(map(len, data))
delimiter
np.multiply(normal, -1)
delimiter
ax.get_xaxis().set_visible(False)
delimiter
log = logging.getLogger()
delimiter
doStuff(self.model.documents)
delimiter
L[left:right]
delimiter
C = np.random.rand(N, N)
delimiter
draw = ImageDraw.Draw(mask)
delimiter
DeckForm.__init__(self, *args, **kwargs)
delimiter
Evaluation.EXCLUDE_AND_CONTINUE
delimiter
getPermutations(string[:i] + string[i + 1:], prefix + string[i])
delimiter
corrected_link = upper_match.replace(match.group(2).upper(), match.group(2))
delimiter
main(args)
delimiter
app = Flask(__name__)
delimiter
self.labels = self.ax.get_xmajorticklabels()
delimiter
abs(x) / abs(y) * cmp(x, 0) * cmp(y, 0)
delimiter
worksheet = workbook.sheet_by_name(workbook.sheet_names()[0])
delimiter
self.serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
dist / hello.app / Contents / MacOS / hello
delimiter
[f.name for f in matplotlib.font_manager.fontManager.afmlist]
delimiter
yhi = yhi if yhi <= imsize else imsize
delimiter
print([(r / psum(raw)) for r in raw])
delimiter
len(b)
delimiter
2 - 1
delimiter
box.pack()
delimiter
self.a = a
delimiter
xpxl2 = xend
delimiter
x = y[0] * y[1]
delimiter
iter(self._inner)
delimiter
sys.stdout = file
delimiter
root = lxml.html.fromstring(html)
delimiter
cur = conn.cursor()
delimiter
d.a[i:i + k] == d.b[j:j + k]
delimiter
words_found.append((k, v))
delimiter
xml.sax.expatreader
delimiter
res.append(Gap(min(random.randint(1, 5), l - t)))
delimiter
print(args)
delimiter
auto_generate_test_cases(Tester, Testee)
delimiter
row.append(DataReader[j].ToString())
delimiter
line += next(f)
delimiter
inner_nodes.sort(key=lambda n: len(subtree[n]))
delimiter
fig = plt.figure(figsize=(6, 6))
delimiter
bi_tag.evaluate(cess_sents[train + 1:])
delimiter
notebook.set_tab_reorderable(page2, True)
delimiter
register = Library()
delimiter
max_x = scipy.optimize.fmin(lambda x: -f(x), 0)
delimiter
os.mkdir(newDir)
delimiter
response
delimiter
y = np.outer(np.sin(lons), np.cos(lats)).T
delimiter
statbuf = os.stat(filename)
delimiter
self.src[i].insert(0, itemtoshift)
delimiter
l, = ax.plot(x, y)
delimiter
sys.stdin = sys.stdin.detach()
delimiter
self.path = path
delimiter
SOME_OTHER_CONSTANT = 2
delimiter
ws = wb.active
delimiter
list(date_range(begin, end, 4))
delimiter
matches[1].fromy, matches[1].fromx
delimiter
print(funcs[1]())
delimiter
print(unrooted_tree)
delimiter
end_date = datetime.datetime.utcnow()
delimiter
time.sleep(8)
delimiter
then = now - datetime.timedelta(days=90)
delimiter
print(json_data)
delimiter
self.__init__(self.sl)
delimiter
tuple(a.tolist())
delimiter
root.grid_columnconfigure(1, weight=2)
delimiter
self.fault = fault
delimiter
ax4.legend(loc=5)
delimiter
lines = lines[-10:]
delimiter
self.handleFontChanged(self.font())
delimiter
self.buf.seek(0, 2)
delimiter
self.a = a
delimiter
[1, 0, 1, 0]
delimiter
response.status
delimiter
r = re.search(lun_q, s)
delimiter
lines = file.readlines()
delimiter
[truncate(f, n) for n in range(7)]
delimiter
hash(True)
delimiter
result.append((longest_keyword, ()))
delimiter
random_list = random.sample(list(genes_dict.items()), int(length))
delimiter
c = conn.cursor()
delimiter
r = list(range(1, loopcount))
delimiter
True
delimiter
resultset.append(dict(row))
delimiter
main()
delimiter
et = ET.ElementTree(document)
delimiter
type(a)
delimiter
np.sum(arr ** 2)
delimiter
bool(set(fruit_dict2).intersection(fruits))
delimiter
start = time.time()
delimiter
self.destinitions_list.append(destinition)
delimiter
file.write(dictionary_content)
delimiter
PrintLn(f)
delimiter
print(myset)
delimiter
all(nested_equal(a[k], b[k]) for k in list(a.keys()))
delimiter
serial = LadySerializer(tiger, many=False)
delimiter
sock.close()
delimiter
zip_write.writestr(item, data)
delimiter
timeit[n / 100, n / 10 % 10, n % 10]
delimiter
self.cntrlPanel.SetPosition((0, 0))
delimiter
a()
delimiter
a = [4, 2, 1, 5]
delimiter
x[i] = x[i] + 1.0
delimiter
array.sort(lambda L, R: -1 if R is 0 else 0)
delimiter
os.dup2(self._devnull, 1)
delimiter
purple_count = len(set(list_of_purple_items).difference(list_of_all_items))
delimiter
self._bar = bar
delimiter
re.sub(findthe, lambda m, r=iter(replacement): next(r), sentence)
delimiter
offset += 1
delimiter
profile = webdriver.FirefoxProfile()
delimiter
result.append((1, record.id, values))
delimiter
d2 + datetime.timedelta(calendar.monthrange(d2.year, d2.month)[1])
delimiter
self._func(*args, **kwds)
delimiter
datetime.time(hour, minute, second)
delimiter
print(nsmallest(4, indices(), key=keyfn))
delimiter
results[key] = params[key]
delimiter
PyErr_Print()
delimiter
aa.set_axis_off()
delimiter
False
delimiter
northing = 10000000 - northing
delimiter
print(result)
delimiter
os.kill(p.pid, signal.CTRL_C_EVENT)
delimiter
self._session
delimiter
png_formatter.for_type(Image.Image, display_pil_image)
delimiter
p = argparse.ArgumentParser()
delimiter
_generate_range_values(value, end)
delimiter
add_colorbar(im)
delimiter
logger = logging.getLogger(__name__)
delimiter
print(df)
delimiter
emonth1.insert(10, 1)
delimiter
title = models.CharField(max_length=255)
delimiter
[nest(x, n - 1)]
delimiter
url = url_test.format(i)
delimiter
method_to_be_executed_in_case_of_exception_or_pk_is_false()
delimiter
Foo.y
delimiter
foo.bar = types.MethodType(partial(foo.bar, qux=1), foo)
delimiter
groups = list(groups)
delimiter
np.ix_(rows, cols)
delimiter
x = np.arange(16).reshape((4, 2, 2))
delimiter
D = {k: v for v, k in enumerate(albums_yesterday)}
delimiter
session = dryscrape.Session()
delimiter
result = {}
delimiter
print(msg.Subject)
delimiter
print(A.T)
delimiter
sqr = int(math.sqrt(n)) + 1
delimiter
self.after(100, self.updateimage, (sprite + 1) % self.num_sprintes)
delimiter
foo.num += 1
delimiter
time.sleep(0.2)
delimiter
chambersinreactor += 1
delimiter
ret = np.concatenate(ret)
delimiter
pd.DataFrame(self.values.copy(), self.index.copy(), self.columns.copy())
delimiter
rStandalone.reassign(7)
delimiter
original = cv2.cvtColor(original, cv2.COLOR_BGR2RGB)
delimiter
threshold(imgrey, imgrey, 100, 255, 0)
delimiter
raise KeyError(key)
delimiter
__slots__ = []
delimiter
last_friday_at_16 = datetime.datetime.combine(last_friday, datetime.time(16))
delimiter
plt.subplot(2, 1, 1)
delimiter
user_email = db.Column(db.String(128), unique=True)
delimiter
zinfo.CRC = CRC
delimiter
writer = csv.writer(out_f)
delimiter
idx = arr[arr.hour >= 17] + pd.offsets.Day(1)
delimiter
nodaemon = true
delimiter
surf1.set_alpha(100)
delimiter
surf2.set_alpha(100)
delimiter
print(longest_common([a, b, c]))
delimiter
soup = BeautifulSoup(markup)
delimiter
u = [np.zeros((n, n)) for i in range(N)]
delimiter
sum(counts)
delimiter
print((m, b))
delimiter
app
delimiter
print(categorize(event))
delimiter
addlist.append(item)
delimiter
Sw = np.cumsum(cw[1:] ** 2)
delimiter
np.take(bins, np.digitize(a, bins, right=True))
delimiter
my_set = set(my_list)
delimiter
self.panel = wx.Panel(self, wx.ID_ANY)
delimiter
all_features.sort()
delimiter
ax.broken_barh([(midpoint - 0.1, 0.2)], (perc[1], perc[2] - perc[1]))
delimiter
print(p.stdout.readlines())
delimiter
instance = RemoveNoise()
delimiter
app = Flask()
delimiter
inlines = [PageFileInline]
delimiter
[operation(n) for n in list]
delimiter
self.listbox.pack()
delimiter
test_settings(self.request.user)
delimiter
wiringpi2.wiringPiISR(4, wiringpi2.INT_EDGE_BOTH, my_int)
delimiter
pl.show()
delimiter
print(df)
delimiter
slen1 = len(s)
delimiter
coeffs = np.polyfit(x, y, 2)
delimiter
chain(*(map(iter, self.children) + [isingle(self.value)]))
delimiter
good = df.ix[df.index - sub.index]
delimiter
stop_timeout = 20
delimiter
vals = data_rvs(k).astype(dtype)
delimiter
ax = plt.gca()
delimiter
print(df1)
delimiter
testarr = np.asarray(test)
delimiter
graph.set_ydata(Y)
delimiter
my_set.add(5)
delimiter
f(150, 150)
delimiter
root = Tk()
delimiter
np.testing.assert_almost_equal(x, y, 5)
delimiter
str(soup)
delimiter
Y = np.dot(beta, X.T)
delimiter
q.put(line.strip())
delimiter
piexif.insert(data, path)
delimiter
self.fileobj.seek(offset, whence)
delimiter
ret.append(i ** 2)
delimiter
rec += connection.recv(1024)
delimiter
ax.yaxis.set_minor_formatter(matplotlib.ticker.ScalarFormatter())
delimiter
main()
delimiter
0
delimiter
processBody(line)
delimiter
self.items.pop()
delimiter
abbreviation = models.CharField(max_length=4)
delimiter
ipc_event_cmd.execute()
delimiter
indexes.append(idx)
delimiter
y_indices = indices[1]
delimiter
m_t.bind()
delimiter
self.connection.settimeout(self.timeout)
delimiter
[0, 2, 2]
delimiter
cssutils.log.setLevel(logging.CRITICAL)
delimiter
myTurtle.done()
delimiter
cond = np.logical_and(arr[:, (0)] >= dtx, arr[:, (0)] < dty)
delimiter
pDF = sqlContext.createDataFrame(pdDF)
delimiter
print(df[order])
delimiter
nbits = n.bit_length() + (1 if n < 0 else 0)
delimiter
df.to_html(out, float_format=fmt)
delimiter
node0.join()
delimiter
block_list.extend(sequences[::-1])
delimiter
list(range(df.EVALUATION_GRADE.min(), df.EVALUATION_GRADE.max() + 1)),
delimiter
timeout = Timeout(seconds, exception)
delimiter
sx = np.sqrt(np.sum(x2 * xp) / np.sum(xp))
delimiter
gram_matrix[i, j] = K(x, y)
delimiter
d = defaultdict(list)
delimiter
np.vsplit(a, 2)
delimiter
alpr.is_loaded()
delimiter
testsuite = unittest.TestSuite()
delimiter
channel.exec_command(COMMAND)
delimiter
os._exit(1)
delimiter
result.append(item)
delimiter
log.err()
delimiter
QtCore.Qt.CopyAction | QtCore.Qt.MoveAction
delimiter
button.setIcon(icon)
delimiter
self.arrays[j][i - shift]
delimiter
is_sum_of_numbers(18, numbers)
delimiter
csvout.writerows(repeat(row[2:4], count))
delimiter
cache.get(key)
delimiter
list_a = ModelA.objects.all()
delimiter
seen = set()
delimiter
ax.plot(list2)
delimiter
idx = mask[xarr, yarr].astype(bool)
delimiter
iter(obj.items())
delimiter
scatter(X, Y, c=next(cycol))
delimiter
map.remove(coord)
delimiter
_cell.style.alignment.wrap_text = True
delimiter
lucky = []
delimiter
fp.close()
delimiter
color = px[x, y]
delimiter
len(a)
delimiter
counter = collections.defaultdict(int)
delimiter
s[d[i]] = rearranged_data[i]
delimiter
a[2:]
delimiter
req = urllib.request.Request(url_2, data)
delimiter
[0, 2, 0],
delimiter
results = cursor.fetchall()
delimiter
self._callfunc = lambda s: s
delimiter
self.appExeCB = QtGui.QComboBox()
delimiter
ret, gray = cv2.threshold(gray, 10, 255, 0)
delimiter
handles, labels = ax.get_legend_handles_labels()
delimiter
c = mkunion(a, b)
delimiter
fig.savefig(filename)
delimiter
msg.send()
delimiter
response.peercert = resp.peercert
delimiter
f(a)
delimiter
app.debug = True
delimiter
blob_reader = blobstore.BlobReader(blob_key)
delimiter
do_something(vals[key])
delimiter
event = pygame.event.wait()
delimiter
new_usage = [sum(x[1] for x in v) for k, v in groupby(zip2, key=itemgetter(0))]
delimiter
tree[0].text
delimiter
thread.start()
delimiter
name = file.filename
delimiter
sympy.__version__
delimiter
df
delimiter
m_ = np.ma.masked_where(y > 2, x)
delimiter
start_date.replace(year=start_date.year + 1)
delimiter
print(result)
delimiter
fig = plt.figure()
delimiter
self.nodes.append(n)
delimiter
any(some_list)
delimiter
mylib.Add.restype = c_int
delimiter
a = numpy.arange(1000.0)
delimiter
print(line)
delimiter
[plt.plot(i, 0, marker=markers[i], ms=10) for i in range(16)]
delimiter
BrotliCompression.Decompress(input, output)
delimiter
threads[t].start()
delimiter
foo_copy = copy.deepcopy(foo)
delimiter
type(self)(self.default_factory, copy.deepcopy(list(self.items())))
delimiter
type.__setattr__(cls, attr, value)
delimiter
list2 = list1.split()
delimiter
[0, 2, 0]
delimiter
f.seek(2, 1)
delimiter
print(f)
delimiter
layout = QtGui.QVBoxLayout(w)
delimiter
binary.insert(0, bit)
delimiter
foo(**args_dict)
delimiter
[(i, z) for i in [1, 2] for z in itertools.filterfalse(lambda x: x in ys, xs)]
delimiter
f = pickle.loads(x)
delimiter
True
delimiter
loggerCent.addHandler(ce)
delimiter
wrapper_object.close()
delimiter
content = conn.getresponse().read()
delimiter
print(data)
delimiter
parser = argparse.ArgumentParser(usage=usage)
delimiter
plt.plot(x, f2(x))
delimiter
df1
delimiter
res.get()
delimiter
d = datetime.timedelta(days=21)
delimiter
feed = feedparser.parse(url)
delimiter
qry = session.query(Page)
delimiter
hasher.update(block)
delimiter
dict.__setitem__(self, key, val)
delimiter
Review.objects.filter(venue__pk=2)
delimiter
b()
delimiter
sleep(1)
delimiter
items = [i.items() for i in items]
delimiter
f.write(html)
delimiter
print((table, field, row[field]))
delimiter
new_list
delimiter
input = input()
delimiter
list_of_numbers = sorted(list_of_numbers)
delimiter
res.head(10)
delimiter
self._ngrams.add(ngram)
delimiter
p2.stdin.write(data)
delimiter
tick.label1 = tick._get_text1()
delimiter
fig = plt.figure()
delimiter
view.replace(edit, sublime.Region(0, view.size()), text)
delimiter
p = Popen(cmd, stdout=PIPE)
delimiter
green_list.append(s[0] - green_start)
delimiter
doc = docx.Document(filename)
delimiter
device.close()
delimiter
fliplr(flipud(m))
delimiter
im.show()
delimiter
self.assertEqual(untrusted, res)
delimiter
a.sort_index(1, inplace=True)
delimiter
explain.my_selfexplaining_method()
delimiter
client = paramiko.SSHClient()
delimiter
first_elts = [x[0] for x in my_tuples]
delimiter
z = np.zeros((5, 5))
delimiter
testloader = unittest.TestLoader()
delimiter
basepart, ext = os.path.splitext(filename)
delimiter
replace(list, 1, 7)
delimiter
sorted_chunk = sorted(islice(input_file, 50000))
delimiter
foo = lambda x: pd.Series(pd.qcut(x, 10, labels=False), index=x.index)
delimiter
ADOMDConn.Open()
delimiter
sentencecount += 1
delimiter
subdict = {x: bigdict[x] for x in interesting_keys if x in bigdict}
delimiter
last_key = line[:-1]
delimiter
self.worker = Worker()
delimiter
alist.sort(key=natural_keys)
delimiter
result = pool.map_async(task, list(range(10)))
delimiter
print(sess.run(b))
delimiter
D()
delimiter
X = [np.sin(e) * np.cos(a), np.sin(e) * np.sin(a), np.cos(e)]
delimiter
df = pd.DataFrame(np.random.randn(10000, 10000))
delimiter
feedparser.parse(url)
delimiter
self.window.setWindowFlags(QtCore.Qt.Widget)
delimiter
second += timedelta(days=1)
delimiter
result = []
delimiter
srn(my_number)
delimiter
circle[0]
delimiter
main()
delimiter
User.master_query.filter(User.id == 1).all()
delimiter
do_something(fname)
delimiter
a1 = np.array([[1, 1, 1], [1, 1, 1], [1, 1, 1]])
delimiter
a = np.random.random((10, 10))
delimiter
self.assertEqual(1 + 1, 2)
delimiter
a = Article.objects.all()[0]
delimiter
+b * cos(u) * sin(v)
delimiter
r_server = redis.Redis(connection_pool=pool)
delimiter
cc.get_violating_points()
delimiter
g = g.reset_index()
delimiter
horizontal.sort(key=lambda x: x[1])
delimiter
start = time.time()
delimiter
table[i][W - 1]
delimiter
rgb_to_hsv = np.vectorize(colorsys.rgb_to_hsv)
delimiter
print(Crypt.find_crypts(0))
delimiter
self.view = QtGui.QTreeView()
delimiter
response = connection.getresponse()
delimiter
print(authentry.parseString(text).dump())
delimiter
box_form = workbook.add_format()
delimiter
layout = QtGui.QHBoxLayout()
delimiter
sources[:MAX_SOURCES]
delimiter
time.sleep(0.7)
delimiter
writer.writerow(newline)
delimiter
self.centralwidget = QtGui.QWidget(self)
delimiter
np.where((abcd <= data2a) & (abcd >= data2b), 1, 0).sum()
delimiter
items[bisect.bisect(added_weights, random.random() * last_sum)][0]
delimiter
sorted_input = sorted(input, key=itemgetter(1))
delimiter
can.pack()
delimiter
d = {}
delimiter
a = np.array(quantized)
delimiter
z = zipfile.ZipFile(some_source)
delimiter
print(outputStr[:-1])
delimiter
print(cert.prettyPrint())
delimiter
new_val = sum([d[topkey][key] for d in dicts])
delimiter
process.start()
delimiter
df[columns]
delimiter
ord(hashlib.md5(s).digest()[0])
delimiter
PyErr_Print()
delimiter
S[col] = int(homescore) - int(awayscore)
delimiter
style = wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER
delimiter
i = np.where(mask)[0][0] + 1
delimiter
A = np.random.randint(1, 5, (N, N, K))
delimiter
ax2.set_xlim(51, 56)
delimiter
self.reader.__iter__()
delimiter
testlist = random.sample(list(range(0, 20)), 10)
delimiter
edges[i - 2, j].append((i + 2, j))
delimiter
self.creation_date = datetime.datetime.now()
delimiter
x = 1
delimiter
primes = []
delimiter
__bootstrap__()
delimiter
[self[i] for i in range(*idx.indices(len(self)))]
delimiter
writer = csv.writer(fp)
delimiter
[1, 2] in {1, 2}
delimiter
r, w, e = select.select(r, w, e, timeout)
delimiter
ax.plot(scipy.randn(8))
delimiter
model.add(Dropout(dropout))
delimiter
soup = BeautifulSoup.BeautifulSoup(html)
delimiter
n_lsb(n) & ~n_lsb(m)
delimiter
counts = Counter(chain(*map(set, mylist)))
delimiter
b.shape
delimiter
self.b.clicked.connect(self.clickHandler)
delimiter
figure()
delimiter
nltk.__version__
delimiter
many = True
delimiter
crawler.signals.connect(reactor.stop, signal=signals.spider_closed)
delimiter
wp.interpolate()
delimiter
b = np.matrix(b).T
delimiter
i += 1
delimiter
salt = bcrypt.gensalt()
delimiter
fig, ax = pl.subplots()
delimiter
result = list(camel.camel_search(text, search_words))
delimiter
a.getSingle(), b.getSingle(), b.getSingle_B()
delimiter
M = Matrix(([x, y], [a, b]))
delimiter
plt.figure()
delimiter
[1, 0, 0, 1]
delimiter
a = datetime.now()
delimiter
train_op = optimizer.apply_gradients(capped_gvs)
delimiter
self.portfolio.append(entry)
delimiter
plt.show()
delimiter
col = np.tile(ii, (a.shape[1],))
delimiter
price2
delimiter
start = end + 1
delimiter
print(cur.fetchall())
delimiter
a = representatives[a]
delimiter
process()
delimiter
p.close()
delimiter
result
delimiter
data = conn.recv(1024)
delimiter
repo.index.commit(commit_message)
delimiter
total_columns = len(the_tuple)
delimiter
False
delimiter
print(selected_option.text)
delimiter
self.fp.write(buf)
delimiter
test2.timestamp = datetime.datetime.now() - datetime.timedelta(hours=1)
delimiter
x = []
delimiter
stack.pop().append(element)
delimiter
data = mmap.mmap(f.fileno(), 0)
delimiter
pylab.xlim([min(lefts), max(rights)])
delimiter
print(fin.read().strip())
delimiter
cause.append(n.id)
delimiter
bool([x for x in list(results.values()) if set(x) == match])
delimiter
dfs.append(psql.read_frame(sql, cnxn))
delimiter
111111
delimiter
[p.join() for p in proc]
delimiter
self.remoteuser = remoteuser
delimiter
self.remotehost = remotehost
delimiter
resized_file = orig_image.resize(scaled_size, Image.ANTIALIAS)
delimiter
x * y
delimiter
window = np.asarray(window)
delimiter
self.statusItem.setHighlightMode_(TRUE)
delimiter
fftf = scipy.fftpack.fftn(f)
delimiter
adlen = ctypes.c_ulonglong(len(ad))
delimiter
self.recv_buf_i += 4
delimiter
today = datetime.datetime.now()
delimiter
do_something()
delimiter
com = serial.Serial()
delimiter
-cr.fetchone()
delimiter
time.sleep(1)
delimiter
print(unpickle_regexes(pkl))
delimiter
value
delimiter
d = dict(l)
delimiter
len(self._list)
delimiter
urls.py
delimiter
os.utime(fileName, (orgTime, orgTime))
delimiter
print(out)
delimiter
[(not b) for b in x]
delimiter
line = f.next().strip()
delimiter
powers.append(i)
delimiter
object_session(self).query(Foo).filter(Foo.bar == self).count()
delimiter
a = A()
delimiter
loop.run_until_complete(run())
delimiter
fig.set_size_inches(1, 1)
delimiter
h2o.auc(best_model, valid=TRUE)
delimiter
current = datetime.date(2010, 8, 1)
delimiter
set(deletes + transposes + replaces + inserts)
delimiter
dict(zip(it1, it2))
delimiter
session.configure(bind=engine)
delimiter
kill_proc_tree(me)
delimiter
value = count_list.pop()
delimiter
AxesWidget.__init__(self, ax)
delimiter
self.sprockets.remove(spr)
delimiter
km.load_connection_file()
delimiter
f.write(counter)
delimiter
df[df.ge(0)].fillna(-9999).where(df < 0, df.eq(df.max(1), 0).astype(int))
delimiter
a.foo()
delimiter
canvas.create_polygon(*coords)
delimiter
sleep(0.1)
delimiter
mro = self.__class__.mro()
delimiter
1
delimiter
self.__offset = timedelta(minutes=offset)
delimiter
setattr(TestSequence, testmethodname, testmethod)
delimiter
draw_ellipse(image, ellipse_box, width=20)
delimiter
df
delimiter
channel = connection.channel()
delimiter
self.update(rawdata)
delimiter
user = User.objects.get(username=username)
delimiter
myseries_one.loc[0:2]
delimiter
logger.setLevel(logging.INFO)
delimiter
print(myglobal)
delimiter
result
delimiter
print(f.__defaults__)
delimiter
f()
delimiter
i -= 1
delimiter
print(df)
delimiter
sorted_ab = zip(*sorted(chain(keyed_a, keyed_b), key=lambda t: t[0]))[1]
delimiter
cbar_ax.set_position([posn.x0 + posn.width + 0.01, posn.y0, 0.04, posn.height])
delimiter
dict(ChainMap(*a))
delimiter
processBody(line)
delimiter
line = line.strip()
delimiter
Function(lambda x: self(x) / other(x))
delimiter
self.stdout = sys.stdout
delimiter
ax1 = fig.add_subplot(111)
delimiter
date = dt.datetime(1970, 1, 1)
delimiter
df[subset.isin(myList).rolling(2, axis=1).sum().max(axis=1) >= 2]
delimiter
ch1 = stackless.channel()
delimiter
eval(method_name2)
delimiter
window_name = window.get_wm_name()
delimiter
assert np.allclose(means, funcmeans)
delimiter
1
delimiter
m.group(1)
delimiter
counts[i] = counts.get(i, 0) + 1
delimiter
counter[0] -= 1
delimiter
archive.write(path, relname)
delimiter
users = api.lookup_users(user_ids=ids)
delimiter
cj.load()
delimiter
df.dtypes
delimiter
ax = fig.add_subplot(111)
delimiter
L[a + span2:c] = L[a:b]
delimiter
min_dist = np.empty(n)
delimiter
main()
delimiter
copy_of_a = list(a)
delimiter
nl.append(base)
delimiter
list(zip(a, b))
delimiter
ax.yaxis.set_major_formatter(FixedOrderFormatter(-9))
delimiter
s = open(filename).read(512)
delimiter
p.insert(0, a)
delimiter
Test.method_two()
delimiter
file.close()
delimiter
self.layoutVertical = QtGui.QVBoxLayout(self)
delimiter
iter1, iter2 = [x[0] for x in compound_iter], [x[1] for x in compound_iter]
delimiter
logging.config.dictConfig(LOGGING)
delimiter
g.readinto(q)
delimiter
ret = float(s)
delimiter
_a(cos(p[0]) * p[1], sin(p[0]) * p[1])
delimiter
df
delimiter
k = k[k != test].reshape(-1, 2).astype(float)
delimiter
bs = BeautifulSoup(html)
delimiter
image_yuv = cv2.cvtColor(image, cv2.COLOR_BGR2YUV)
delimiter
t.set_priv(True)
delimiter
retval += chr(node[1][0][1][0])
delimiter
palette = imframe.getpalette()
delimiter
z = np.logical_or(z, rolled)
delimiter
np.dot(L1_sums, L2_sums)
delimiter
data = s.recv(1024)
delimiter
list = [7, 6, 5, 7, 6, 7, 6, 6, 6, 4, 5, 6]
delimiter
pygame.time.Clock().tick(10)
delimiter
reader = csv.reader(f)
delimiter
ax.add_collection(col)
delimiter
sock = socket_create(AF_INET, SOCK_STREAM, 0)
delimiter
plt.plot(ipl_t, x_i)
delimiter
d[k] += v
delimiter
[7, 8, 9],
delimiter
raise ConnectionError(err, request=request)
delimiter
dict(d)
delimiter
ransport = random.choice(list(sportDict.keys()) + [sport])
delimiter
distutils.log.set_verbosity(-1)
delimiter
fig, (ax, ax2) = plt.subplots(1, 2, sharey=True, tight_layout=True)
delimiter
aut.add_word(s, s)
delimiter
mins.sort()
delimiter
self.bar % 2 == 0
delimiter
unquote(value)
delimiter
new_arr.append(new_val)
delimiter
session.flush()
delimiter
image = Image.open(data)
delimiter
func.__get__(obj, cls)
delimiter
nx.draw_networkx_edges(Gcc, pos, alpha=0.4)
delimiter
ax.set_ylim(-0.5, 0.5)
delimiter
settings.MYAPP_SETTINGS_1
delimiter
save(random.choice(classes), arg)
delimiter
[self[x] for x in range(i.start, i.stop, i.step or 1)]
delimiter
Object.__getattr__(self, name)
delimiter
print(len(x))
delimiter
sys_exit.assert_called_with(1)
delimiter
pylab.plot(list(range(10)))
delimiter
df
delimiter
threads.append(t)
delimiter
atexit.register(web.quit)
delimiter
print(sdi)
delimiter
plt.yticks(np.array([]))
delimiter
match = [0] * (len(s) + 1)
delimiter
timeout.cancel()
delimiter
session.flush()
delimiter
print(time.clock())
delimiter
client_socket.send(size)
delimiter
df[~df.stack().between(0.1, 1).unstack()].dropna(axis=1)
delimiter
window_size = np.abs(np.int(window_size))
delimiter
a + b
delimiter
True
delimiter
image_input = tf.placeholder(tf.uint8, shape=[22500])
delimiter
subprocess.check_output(command).strip()
delimiter
isinstance(p, list)
delimiter
print(lst)
delimiter
o = Object()
delimiter
print(match)
delimiter
self.delete(self.index(Tkinter.INSERT), Tkinter.END)
delimiter
self.tgtkey = self.currkey = self.currvalue = object()
delimiter
session.add(new_bike)
delimiter
setattr(obj, accessor_name, object_list)
delimiter
m = a[k]
delimiter
message = self.queue.get()
delimiter
edgex2 = region2 ^ np.roll(nregion2, shift=shift, axis=0)
delimiter
c = formC.save(commit=False)
delimiter
print(platform.python_version())
delimiter
dest.blit(tmp, (0, 0), dest.get_rect().clip(maskrect))
delimiter
fmt_values
delimiter
self.store.remove(key)
delimiter
divider = make_axes_locatable(ax1)
delimiter
pd.crosstab(df.Event, df.Status)
delimiter
a += [4]
delimiter
clusters[-1].append(point)
delimiter
tmp.seek(0)
delimiter
branch[1].append(path[-1])
delimiter
progress.setValue(100)
delimiter
x * 2
delimiter
merge_Sort(list1, list2, new_list)
delimiter
Z.data *= Y[Z.row]
delimiter
d[c] = i
delimiter
args, subargs
delimiter
self.factory.echoers.remove(self)
delimiter
video_window.destroy()
delimiter
sct.norm.ppf(q=0.05, loc=60, scale=40)
delimiter
string[string.find(substring) + len(substring):]
delimiter
response = requests.get(_GOOGLE_TRENDS_URL % term)
delimiter
0, [True, True, True, True]
delimiter
loaded_dict = json.loads(dumped_dict, object_hook=date_hook)
delimiter
wx.Panel.__init__(self, parent)
delimiter
L = [0, 8, 5, 6, 4, 5, 6, 14, 8]
delimiter
myTurtle.forward(size)
delimiter
myObject.die()
delimiter
file.seek(currentReadPos)
delimiter
scene.objects.active = lamp_object
delimiter
result[key] = value
delimiter
f1 = lambda x: np.sum(x) - 1
delimiter
nested.__closure__[0]
delimiter
ax = fig.add_subplot(111)
delimiter
G.add_edge(parent, child)
delimiter
self._conn.timeout = timeout
delimiter
fscale = t / max(t)
delimiter
df
delimiter
obj0, obj1, obj2 = pickle.load(f)
delimiter
kwonly = oldcode.co_kwonlyargcount
delimiter
jsondata = JsonData(**result)
delimiter
file_list.extend(join(root, f) for f in files)
delimiter
b = np.random.randint(N, size=n)
delimiter
image = Image.open(stream)
delimiter
print(soup.contents[0].string)
delimiter
x.cumsum()
delimiter
current_color = px[i, j]
delimiter
print(count.most_common())
delimiter
print(len(match_foo))
delimiter
dt_now = datetime.now()
delimiter
result = task.get()
delimiter
db.put(fu_list)
delimiter
idx = list(df.index)
delimiter
print([x for x in words if len(x) > avg])
delimiter
os.dup2(fd_stdout, 1)
delimiter
print(type(value))
delimiter
{{block_of_text | nl2br}}
delimiter
html
delimiter
ast.dump(node)
delimiter
fig = plt.figure()
delimiter
idx = cutoffs.searchsorted(np.random.uniform(0, cutoffs[-1]))
delimiter
s.intersection(*ip)
delimiter
heapq.heappush(pqueue, (-atime, fsize))
delimiter
result[-1].append(s)
delimiter
self.set_weights([random.uniform(0, 1) for x in range(0, n_inputs + 1)])
delimiter
self.min_value, self.max_value = min_value, max_value
delimiter
im = np.vstack((im[1:], im[0]))
delimiter
n = len(x)
delimiter
self.rematch.group(i)
delimiter
B[idx[1]]
delimiter
generate_random_data(latitude, longitude, 5, file_n)
delimiter
l2 = [4, 5, 6]
delimiter
uform = UserForm(data=request.POST)
delimiter
t = threading.Thread(target=worker)
delimiter
x2 = np.linspace(0, 2, 100)
delimiter
B = np.rollaxis(A, 2)
delimiter
draw = ImageDraw.Draw(image)
delimiter
id(gb1.a)
delimiter
ax.set_ylabel(label, size=20)
delimiter
pzi = points[i, 2]
delimiter
data.append(group)
delimiter
self.view = QtGui.QTableView(self.centralwidget)
delimiter
(x.index if isinstance(x, arg) else -1 for x in pargs),
delimiter
titled.append(word)
delimiter
a
delimiter
assert b.get_value_indirect() == 0
delimiter
content = urllib.request.urlopen(url).read()
delimiter
self._list = list(data)
delimiter
df
delimiter
d.hexdigest()
delimiter
s.kill()
delimiter
memoizer
delimiter
obj.companyid.name
delimiter
polygon_coordinates = [[5, 10], [7, 9], [8, 11], [11, 20]]
delimiter
my_dict = MyDict()
delimiter
session = sessionmaker(binds=binds)()
delimiter
json.dumps(data, indent=2)
delimiter
X, Y = np.meshgrid(row, row)
delimiter
query_string = urlencode(OrderedDict(data=initial_url, search=search))
delimiter
child_list.append(child)
delimiter
old_handler = signal.signal(signal.SIGALRM, timeout_handler)
delimiter
self.oldglobals = {}
delimiter
f(**kwargs)
delimiter
xmin, xmax, ymin, ymax = x.min(), x.max(), y.min(), y.max()
delimiter
b = B()
delimiter
x = np.linspace(np.min(sample), np.max(sample))
delimiter
total = 0
delimiter
True
delimiter
buffer.seek(0)
delimiter
stat2[k] += v
delimiter
all(lst) or not any(lst)
delimiter
C = []
delimiter
array = getarray[i]
delimiter
print(np.outer(x[(10), :], y[(10), :]))
delimiter
BeautifulSoup(badString, markupMassage=myNewMassage)
delimiter
somefile.seek(0, os.SEEK_END)
delimiter
prev, current = current, next(self.__iter)
delimiter
query
delimiter
lin = np.linspace(0, 5, 100, endpoint=False)
delimiter
df[df.columns[1:]]
delimiter
context = {}
delimiter
rotated_df = largest_haloes.dot(x)
delimiter
group = models.ForeignKey(Group)
delimiter
l_counts = [(l.count(x), x) for x in set(l)]
delimiter
nones.append(ind)
delimiter
setattr(self, name, float(x))
delimiter
template.format(userinfo)
delimiter
s = np.argsort(b)
delimiter
k = json.dumps(m)
delimiter
n = sum(1 for row in csv.reader(filename))
delimiter
io.show()
delimiter
sub_arrays = [arr[ds] for ds in data_slices]
delimiter
+models.py
delimiter
x = np.arange(1.0 * 2 * k).reshape(2, k)
delimiter
pprint(h)
delimiter
cleansed = cleaner.clean_html(code)
delimiter
atexit.register(save_history)
delimiter
curpath = os.path.dirname(os.path.abspath(file))
delimiter
libcap.cap_to_text.restype = ctypes.c_char_p
delimiter
cols = np.array([1, 2])
delimiter
pprint.pprint(codes)
delimiter
wnl.lemmatize(greatest)
delimiter
self.value.__str__()
delimiter
print(A.method_c.__func__.__code__.co_firstlineno)
delimiter
pl.imshow(z1, extent=[-5, 5, -5, 5], alpha=0.2)
delimiter
print(list(rand_days))
delimiter
a = ctypes.create_string_buffer(lnum.bit_length() // 8 + 1)
delimiter
ax1.grid(True)
delimiter
screen.blit(sys_font.render(l, 0, hecolor), (x, y + fsize * i))
delimiter
np.stack(np.where(df.values)).reshape(-1, 2)
delimiter
thread.start()
delimiter
radii = np.linspace(0.5, 1, 10)
delimiter
w.head()
delimiter
buf = (c_char * n).from_address(p)
delimiter
s = pd.Series(words, index=idx)
delimiter
data[i] = valuej
delimiter
client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
A.shape
delimiter
data = f.read()
delimiter
template = env.get_template(templatefile)
delimiter
p = subprocess.Popen(filepath, shell=True, stdout=subprocess.PIPE)
delimiter
layout.addWidget(de)
delimiter
f.write(chunk)
delimiter
parser.write(f)
delimiter
y = [4, 5, 6]
delimiter
Foo.instance_count += 1
delimiter
self.name
delimiter
line = eval(input())
delimiter
self.oparg = oparg
delimiter
start = dt - timedelta(days=dt.weekday())
delimiter
app = wx.PySimpleApp()
delimiter
cls.__old_init(self, *a, **kw)
delimiter
set([(d1 + timedelta(days=i)) for i in range(delta.days + 1)])
delimiter
y = [4, 5, 6]
delimiter
app = wx.App(False)
delimiter
pos = nx.spring_layout(G, fixed=list(fixedpos.keys()), pos=fixedpos)
delimiter
c.persist()
delimiter
delta = timedelta(days=-delta_days, weeks=delta_weeks)
delimiter
print((my_num, my_string))
delimiter
x = x.__iadd__([4, 5, 6])
delimiter
check(float(sys.argv[1]), float(sys.argv[2]))
delimiter
out, err = p.communicate()
delimiter
X[([10]), :]
delimiter
self.old_handler = signal.getsignal(signal.SIGINT)
delimiter
excel.Visible = 0
delimiter
print((x[N], y[N]))
delimiter
regr.fit(chntrain_X, chntrain_y)
delimiter
kwargs = dict(kwargs)
delimiter
stream.close()
delimiter
self.files += 1
delimiter
assert len(c) == 1
delimiter
texter.setPlainText(infile.read())
delimiter
ss.sort(key=lambda a: a[1].order)
delimiter
a.a = 2
delimiter
print(temp.weekday())
delimiter
destination.set_contents_from_file(myfile)
delimiter
my_map.bluemarble()
delimiter
filename = sys.argv[1]
delimiter
rowspans[daynum] -= 1
delimiter
b = [0, 2, 4, 5]
delimiter
output = ps.communicate()[0]
delimiter
n = b.shape[0]
delimiter
child.close()
delimiter
self.inverse.setdefault(self[key], []).remove(key)
delimiter
print(x)
delimiter
repr(test.f_call)
delimiter
NULL
delimiter
width, height = self.width, self.height
delimiter
dG.add_node(next_word)
delimiter
f.__closure__
delimiter
self.Bind(wx.EVT_LIST_BEGIN_LABEL_EDIT, self.OnBeginLabelEdit)
delimiter
cumsum = df.indweight.cumsum()
delimiter
Descr = row.Cells(2).Range.Text
delimiter
doc = etree.parse(fp)
delimiter
logger = logging.getLogger()
delimiter
v = numpy.diff(t)
delimiter
m_action.perform()
delimiter
print(combs(sampleip1))
delimiter
print(combs(sampleip0))
delimiter
data = pd.read_csv(filename, names=headings)
delimiter
df = pd.DataFrame.from_records(t, columns=t.columns)
delimiter
print(c)
delimiter
data_string = pickle.dumps(data, -1)
delimiter
new_button.configure(command=callback_factory(new_button))
delimiter
img_result = numpy.dstack([img, img, img])
delimiter
not_contains = ~df.isin([0.1, 1.2]).any(axis=1)
delimiter
elapsed2s = []
delimiter
z
delimiter
filepaths.sort(key=lambda filename: filename[1], reverse=reverse)
delimiter
base = np.arange(size)
delimiter
gcs_file = gcs.open(filename)
delimiter
tuple(self.construct_sequence(node))
delimiter
df
delimiter
parser.parse(d)
delimiter
res.append(defaults[f])
delimiter
log.startLogging(sys.stdout)
delimiter
now = datetime.now()
delimiter
c[1, 2] = 5
delimiter
print(i + 1)
delimiter
self.response.write(gcs_data.gcs_read_blob(dyn))
delimiter
x = np.linalg.solve(a, b)
delimiter
src = driver.page_source
delimiter
draw = ImageDraw.Draw(img)
delimiter
a = s[0:24].uintle
delimiter
site = self.request.db.query(Site).filter_by(id=key).first()
delimiter
self.process.finished.connect(lambda : self.runButton.setEnabled(True))
delimiter
utc_offset = local_dt.utcoffset()
delimiter
print(g(x))
delimiter
[1, 2] == [1, 2]
delimiter
self
delimiter
current_line = my_file.readline()
delimiter
datetime(date.year, date.month, day)
delimiter
print(max(list(kmer2count.items()), key=lambda k_v: k_v[1]))
delimiter
map(operator.itemgetter(1), L)
delimiter
repl += repl_pattern[len(match_str):]
delimiter
ax = plt.subplot(111)
delimiter
display = Xlib.display.Display()
delimiter
list(chunker(x, 2))
delimiter
t.join()
delimiter
serializer.object
delimiter
angleInDegrees = atan2(deltaY, deltaX) * 180 / PI
delimiter
dx = x2 - x1
delimiter
result = []
delimiter
self.axes = self.figure.add_subplot(111)
delimiter
pickle.dump(value, f)
delimiter
grid()
delimiter
outliers = X[labels == -1]
delimiter
CustomPaginateNode(paginator_class, objects, **kwargs)
delimiter
tally[item].append(i)
delimiter
myDict = {x.index: x for x in xs}
delimiter
key = row[1], row[2]
delimiter
group_by(input, 1)
delimiter
g.usersview.render()
delimiter
s.sum(level=1)
delimiter
header = gtk.HBox()
delimiter
z.insert(0, z.pop())
delimiter
np.random.shuffle(mask)
delimiter
lambda cls: make_threadsafe(cls, methodnames, lockfactory)
delimiter
idx = np.random.choice(np.arange(len(x)), 1000, replace=False)
delimiter
Py_DECREF(index)
delimiter
lst = sorted(iter(d.items()), key=itemgetter(1))
delimiter
http = httplib2.Http()
delimiter
tuple(getattr(self, slot) for slot in self.__slots__)
delimiter
app = wx.App(False)
delimiter
localtime = time.localtime()
delimiter
myIntList = [x for x in myList if isinstance(x, int)]
delimiter
print(string[6])
delimiter
br.geturl()
delimiter
temp.append(i)
delimiter
name, age = noglobaltest()
delimiter
self._waitready = set()
delimiter
db1 = SQLAlchemy(app1)
delimiter
w = w.translate(table)
delimiter
print(folder.name)
delimiter
views.py
delimiter
deleted[1]
delimiter
data[:, (0)]
delimiter
new_word = word[:index] + char + word[index + 1:]
delimiter
stdin, stdout, stderr = ssh.exec_command(prepare_command(command))
delimiter
only_words = list(filter(str.isalpha, my_list))
delimiter
self.name = name
delimiter
print(json.dumps(d, indent=2))
delimiter
print(self.treeWidget.currentItem().text(0))
delimiter
fexdata = {}
delimiter
hash1 = hashlib.md5()
delimiter
print(z)
delimiter
s = a.argsort()
delimiter
E = np.array((xp, yp, zp))
delimiter
a = Decimal(str(a))
delimiter
rs = q.get_messages(10)
delimiter
start = time.time()
delimiter
ang = math.atan2(b[0] - a[0], b[1] - a[1])
delimiter
downloadFiles(source, dest)
delimiter
self.rect.left += self.dir.x * SPEED
delimiter
result2 = pd.concat([d1, df1], axis=1)
delimiter
self.ax = self._fig.add_subplot(111)
delimiter
client.remove_flags(msg_ids, [SEEN])
delimiter
NSScreen.mainScreen().frame().height
delimiter
data = literal_eval(f.read())
delimiter
self.count += 1
delimiter
args = parser.parse_args()
delimiter
result.append(dict(type=key, items=list(v[0] for v in valuesiter)))
delimiter
data = np.zeros([N, 4114])
delimiter
logging.disable(logging.CRITICAL)
delimiter
conn = pycurl.Curl()
delimiter
{{forms.render_field(field)}}
delimiter
raise ndb.Return(buildings)
delimiter
np.random.shuffle(col0)
delimiter
global_objs = list(globals().items())
delimiter
print(response.msg)
delimiter
print(page.read())
delimiter
Pdb
delimiter
a = [4, 5, 0, 0, 6, 7, 0, 1, 0, 5]
delimiter
aList.pop(0)
delimiter
np.nonzero(b)
delimiter
me = np.zeros(n.shape[0])
delimiter
main()
delimiter
p.join()
delimiter
QtGui.QDirModel.setData(self, index, value, role)
delimiter
print(x)
delimiter
print(pandas_select(df, select_dict).to_string())
delimiter
myShape.translate(Base.Vector(2, 0, 0))
delimiter
stock = data.ix[idx]
delimiter
(df == window_stop_row).all(axis=1)
delimiter
lambda self, *args: getattr(self.num, name)(*args)
delimiter
time_series.append(forecast_append)
delimiter
q = manager.Queue()
delimiter
t2 = threading.Thread(target=thread2, args=(2, t2_stop))
delimiter
self.cursor.execute(sql, (reason, id))
delimiter
logging.getLogger().addHandler(fh)
delimiter
x.append(words[1])
delimiter
self.ax.set_thetagrids(self.angles, labels=titles, fontsize=14)
delimiter
set_lst = set_lst.difference(check_file)
delimiter
grid = np.arange(100).reshape((10, 10))
delimiter
argsdict = {}
delimiter
base_string % values
delimiter
std2 = 1.0
delimiter
PersonQuerySet(self.model)
delimiter
iter(list(itr)[1:])
delimiter
a, b = list[0], list[1]
delimiter
parser.print_help()
delimiter
map(x.count, x)
delimiter
appended_data.append(data)
delimiter
A.T
delimiter
p.append(2)
delimiter
[atleast_2d(_m) for _m in tup]
delimiter
input.close()
delimiter
mx = np.matrix(x)
delimiter
self.layout = QtWidgets.QVBoxLayout()
delimiter
C2 = Cookie.SimpleCookie()
delimiter
imp.find_module(module_name)
delimiter
cursor = conn.cursor(cursors.SSCursor)
delimiter
{{number}}
delimiter
tmp.blit(mask, destpos, maskrect, special_flags=pygame.BLEND_RGBA_MULT)
delimiter
widget.layout().addWidget(label)
delimiter
n = int(math.sqrt(2 * x))
delimiter
cc.run()
delimiter
r = requests.get(url)
delimiter
logging.FileHandler.__init__(self, filename, mode, encoding, delay)
delimiter
env = jinja2.Environment()
delimiter
print(result.get(timeout=1))
delimiter
f.read(1)
delimiter
modela = models.OneToOneField(ModelA)
delimiter
params.append(filtervalue)
delimiter
self.weight = weight
delimiter
heatmap = plt.pcolor(data)
delimiter
b = int(a)
delimiter
consume(some_func(x) for x in some_list if x > 5)
delimiter
r = pd.Series(list(range(len(df))))[::-1] + 1
delimiter
value = line.split()[-1]
delimiter
l[i] += 1
delimiter
transactions.sort(key=operator.itemgetter(0))
delimiter
a + 0
delimiter
output = PdfFileWriter()
delimiter
combined[key1].append(key2)
delimiter
screen = pygame.display.set_mode([100, 100])
delimiter
counts = np.zeros(shape=arr.shape)
delimiter
tutorials = [frozenset(tutorial) for tutorial in tutorials]
delimiter
setattr(obj, proxy.value_attr, value)
delimiter
self.read_events()
delimiter
self.inner_test = InnerTest()
delimiter
plt.tight_layout()
delimiter
df[keys] = df[j] - df[from_joint]
delimiter
h2.setLevel(logging.WARNING)
delimiter
seen.add(x)
delimiter
cap = cv2.VideoCapture(0)
delimiter
A, B, C = np.polyfit(x, np.log(y), 2)
delimiter
arg_dict = {}
delimiter
[(grouper, list(values)) for grouper, values in my_groupby_generator]
delimiter
count[word] += 1
delimiter
ax.w_zaxis.set_pane_color((1.0, 1.0, 1.0, 0.0))
delimiter
obj_a.my_method()
delimiter
axis1.plot(list(range(10)))
delimiter
blank_image[:, 0.5 * width:width] = 0, 255, 0
delimiter
[1, 0, 1, 0]
delimiter
self.__dict__[name]
delimiter
print(foo.args)
delimiter
N = col.shape[0]
delimiter
FIN.seek(random.randrange(length), 0)
delimiter
[2, 0, 1],
delimiter
float(timedelta.days) + float(timedelta.seconds) / float(86400)
delimiter
setattr(obj, self.private_name, result)
delimiter
dir(parrot.Norwegian)
delimiter
c1.say_my_name()
delimiter
ctx.set_line_width(1.5)
delimiter
signal = wave_file.read_frames(wave_file.nframes)
delimiter
v = A[position:][:length]
delimiter
self._build_calendar()
delimiter
self._fileobj.tell() - self._offset
delimiter
foundwords = []
delimiter
PyErr_Print()
delimiter
output.write(input.readline())
delimiter
mplrun()
delimiter
upper_white = np.array([180, 25, 255])
delimiter
A[(_), :]
delimiter
b = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
delimiter
parseiter = iter(ElementTree.iterparse(rhythmbox_dbfile))
delimiter
quarters = []
delimiter
d_ini = dict((c, 0) for c in string.ascii_letters)
delimiter
table[n - 1] if n else 1
delimiter
a = 1
delimiter
1, 1, 1, 8
delimiter
p.join()
delimiter
axes = plt.subplot(gs[0, 1])
delimiter
edges = np.reshape(edges, (edges.shape[0] / 2, 2))
delimiter
print(Dog.__bases__)
delimiter
print(primeslt(int(i)))
delimiter
keep_default = False
delimiter
D = set()
delimiter
min(compress(my_lookup, my_list), key=my_lookup.get)
delimiter
n == 1
delimiter
root = Tk()
delimiter
clip = Gtk.Clipboard.get(Gdk.SELECTION_CLIPBOARD)
delimiter
p.join()
delimiter
lcls = inspect.stack()[2][0].f_locals
delimiter
r = requests.get(url)
delimiter
df = json_normalize(data)
delimiter
ser.plot(ax=axes[0])
delimiter
d1 = pd.concat([d1.loc[[1]].rename(index={(1): 0}), d1])
delimiter
sys.stdout = stdout
delimiter
result = list(product(all_files, all_files))
delimiter
print(x == 247)
delimiter
d = date.today()
delimiter
items = sorted([(k.lstrip().lower(), v) for k, v in list(d.items())])
delimiter
self._result = result
delimiter
app = QApplication(sys.argv)
delimiter
k1 = 0
delimiter
node = lxml.html.fromstring(node)
delimiter
y = np.outer(x, k) + b + np.random.normal(size=(50, 1000), scale=1e-10)
delimiter
type(name, (Parent,) + bases, dict)
delimiter
20000000000
delimiter
list(range(0, len(list1)))
delimiter
self.transport.write(self.factory.text)
delimiter
lapack_routine(n, n, tmp, n, pivots[i], 0)
delimiter
self.value = value
delimiter
entry = menu.addAction(item)
delimiter
print(type(p))
delimiter
json.loads(data)
delimiter
image = open(filename)
delimiter
socket.inet_aton(address)
delimiter
p.apply_async(f, (np.random.rand(1000, 1000), np.random.rand(1000)))
delimiter
a = numpy.float64(42.0)
delimiter
a = csv.writer(b)
delimiter
print(mo.group(0))
delimiter
(0, 1)[1]
delimiter
IsoInA = 0
delimiter
p.hello()
delimiter
True
delimiter
title = models.CharField(max_length=255)
delimiter
new_row.append(row[column_index])
delimiter
count(6)
delimiter
y_tick = np.arange(-0.5, 0.5 + unit, unit)
delimiter
getattr(self.get_query_set(), name, *args)
delimiter
alice.toys = toys
delimiter
soup = BeautifulSoup(page)
delimiter
my_model = MyModel.objects.all()
delimiter
data = os.read(fd, 1024)
delimiter
x, y = new_x, new_y
delimiter
name = models.CharField(max_length=255)
delimiter
DBListings()
delimiter
hash((self.x, self.y))
delimiter
process.stdout.readline()
delimiter
self.DataPlot.draw()
delimiter
p.close()
delimiter
dict[firstName] += 1
delimiter
max_pub_date_time = datetime.combine(pub_date, time.max)
delimiter
assert sum_nested([[([8, 9], 10), 11], 12]) == 50
delimiter
y = canvas.canvasy(event.y)
delimiter
reader = csv.reader(infile)
delimiter
socket.gethostbyname(i.strip())
delimiter
actions.perform()
delimiter
lines = lines + 1
delimiter
new_date = old_date + relativedelta(years=1)
delimiter
P.figure()
delimiter
list(all_but_n_last(data, 1))
delimiter
driver = webdriver.PhantomJS(service_args=args)
delimiter
A = scipy.io.mmread(sys.argv[1])
delimiter
b = pickle.load(handle)
delimiter
select.order_by(func.random())
delimiter
sys.exit(app.exec_())
delimiter
callUponTimeout(*args, **kw)
delimiter
Py_Initialize()
delimiter
s = s[n:]
delimiter
b = min([n for n in list2 if n > i])
delimiter
print(folder.name)
delimiter
print(soup)
delimiter
max = len(lst)
delimiter
flat_y = tf.reshape(y, [-1])
delimiter
assert isinstance(n, int)
delimiter
converters = [str.strip] + [float] * (len(headers) - 1)
delimiter
soup = BeautifulSoup(r.text)
delimiter
dollars += 1
delimiter
root = tk.Tk()
delimiter
key = row[0]
delimiter
self.stream.write(msg.encode(self.stream.encoding))
delimiter
top.mainloop()
delimiter
logger.addHandler(someutils.null_handler)
delimiter
time_list = np.array(time_list)
delimiter
render_to_csv_response(qs)
delimiter
fig, ax = plt.subplots()
delimiter
self.__setattr__(key, value)
delimiter
a[:], b[:] = zip(*combined)
delimiter
next(f)
delimiter
x = np.array([1, 1, 1, 2, 2, 2, 5, 25, 1, 1])
delimiter
frec(word[len(s):], values + [s])
delimiter
print(fileinput.filename(), fileinput.lineno(), line)
delimiter
fW.flush()
delimiter
session.add(user2)
delimiter
curs = conn.cursor()
delimiter
__slots__ = ()
delimiter
df
delimiter
output.append(number)
delimiter
gona[(1), :]
delimiter
pool.apply_async(test, (k, multi_d))
delimiter
arr.view(np.dtype((np.void, arr.dtype.itemsize * arr.shape[-1])))
delimiter
logging.basicConfig(level=logging.INFO)
delimiter
tracks = [i[0] for i in list(radio.items())]
delimiter
standard_scalerX.fit(X_test)
delimiter
leng(s[1:], count + 1)
delimiter
b = [5, 6, 7, 8, 9]
delimiter
str(r)
delimiter
log.addHandler(journal.JournaldLogHandler())
delimiter
user_id
delimiter
ax1 = plt.subplot(gs[(0), 0:2])
delimiter
a.get(0)
delimiter
figure = np.random.uniform(size=(4, 4))
delimiter
5 - 0.464188
delimiter
addvec2(mat, vec)
delimiter
self.append(text)
delimiter
b = a + b
delimiter
self.d = {}
delimiter
df = df[::-1]
delimiter
new_array = array[mask]
delimiter
encoded_pw = base64.b64encode(raw_pw)
delimiter
a = np.array([[1, 0, 1], [0, 0, 1]])
delimiter
f.__setitem__((slice(5, 10), 100), 2)
delimiter
print(poly.intersection(merged_cells).area)
delimiter
tf.get_default_graph().finalize()
delimiter
result = defaultdict(int)
delimiter
help(enumerate)
delimiter
key_list = sorted(value.keys())
delimiter
0
delimiter
child.expect(pexpect.EOF)
delimiter
n = len(archive.getnames())
delimiter
diff(nges, n[5])
delimiter
self._fill(index)
delimiter
list(range(start_val, start_val + 10))
delimiter
cursor = connection.cursor()
delimiter
MyPickler(output).dump(thingee)
delimiter
dic = dic.setdefault(key, {})
delimiter
ret, mask = cv2.threshold(result_grey, 10, 255, cv2.THRESH_BINARY)
delimiter
self.properties.update(attr)
delimiter
xmlFile.childNodes[0].appendChild(newScript)
delimiter
shutil.copy(os.path.join(source, fname), os.path.join(dest, fname))
delimiter
self.transport.loseConnection()
delimiter
result = []
delimiter
A = np.arange(24)
delimiter
key, val = list(e.items())[0]
delimiter
zip_path = os.path.join(zip_subdir, fname)
delimiter
include_dirs = []
delimiter
sel = Selector(response)
delimiter
self.name = name
delimiter
it = zip(*([iter(L)] * 2))
delimiter
ui.write(e.EV_KEY, e.KEY_LEFTSHIFT, 1)
delimiter
c = c.ravel()
delimiter
content = f.read()
delimiter
print(new_items)
delimiter
ans = (x - y) ** 2
delimiter
df = df.loc[mask]
delimiter
PrintLn(Abs(vi))
delimiter
script.extract()
delimiter
print(str(msg))
delimiter
newargs = list(funcsig.parameters.values())
delimiter
g.get_all_shortest_paths(0, 15)
delimiter
w = gtk.Window()
delimiter
self.type
delimiter
ax.set_ylim((-1, 1))
delimiter
time.sleep(1)
delimiter
print(arg)
delimiter
d1.keys() & d2.keys()
delimiter
result.append(dict(zip(recordset.column_names, row)))
delimiter
msvc9compiler.VERSION = 11
delimiter
item_dict = json.loads(json_data)
delimiter
email = Column(String, primary_key=True)
delimiter
x()
delimiter
list1, list2 = list2, list1
delimiter
print(k, v, highest_values, len(highest_values))
delimiter
idxs = numpy.where(diff < 0)[0]
delimiter
dirname, filename = os.path.split(name)
delimiter
inner
delimiter
driver.switch_to_default_content()
delimiter
big = np.arange(Nbig * Nbig).reshape([Nbig, Nbig])
delimiter
logger.addHandler(file_handler)
delimiter
True
delimiter
x, y
delimiter
test2.test()
delimiter
df.reindex(t.index)
delimiter
[int(round(i)) for i in net.activateOnDataset(ts)[0]]
delimiter
print(line)
delimiter
datetime = Column(DateTime, primary_key=True)
delimiter
plt.legend()
delimiter
dicta = dict(zip(listanum, lista))
delimiter
q = multiprocessing.JoinableQueue()
delimiter
driver = webdriver.PhantomJS(*args, **kwargs)
delimiter
d = sqrt((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1))
delimiter
soup = BeautifulSoup(html)
delimiter
connection = engine.connect()
delimiter
a, b = itertools.tee(iterable)
delimiter
swap_cols(my_array, 0, 1)
delimiter
type(f())
delimiter
ang1 = angle(sx1[iseg1], sy1[iseg1])
delimiter
yb = yum.YumBase()
delimiter
screen.blit(px, px.get_rect())
delimiter
0
delimiter
mercury_thread.start()
delimiter
np.round(dfnum)
delimiter
y = poly(x) + np.random.rand(n) - 0.5
delimiter
print(add_odd_numbers(10))
delimiter
c.start()
delimiter
next(mygen)
delimiter
value = Column(String)
delimiter
f.close()
delimiter
ax.w_xaxis.set_pane_color((1.0, 1.0, 1.0, 0.0))
delimiter
response
delimiter
seq[0] + listSum(seq[1:])
delimiter
TRY
delimiter
copy
delimiter
funcs.append(makeFunc(x))
delimiter
lons = np.array([102.5, 5.5, 116.2, 102.5, 5.5, 116.2, 102.5, 5.5, 116.2, 100])
delimiter
V.reshape(V.shape[:len(D.shape)] + (-1,))
delimiter
stack.append(n)
delimiter
Py_Initialize()
delimiter
it = iter(seq)
delimiter
df
delimiter
self.filename = filename
delimiter
nameserver
delimiter
doctest.testmod()
delimiter
opts = {}
delimiter
mybucket / files / pdf / abc4.pdf
delimiter
array = [array[i:i + s] for i in range(0, len(array), s)]
delimiter
data = [2, 2]
delimiter
self.func = func
delimiter
audio / mpeg
delimiter
reader = csv.reader(input_file)
delimiter
pickle.dump(dictname, f)
delimiter
random.shuffle(x)
delimiter
labels.reshape(data.shape)
delimiter
a = [[], [], []]
delimiter
ax = plt.subplot(gs[(2), :])
delimiter
lam_f = sympy.lambdify(x, f(x))
delimiter
print(dir(data))
delimiter
print(npstr)
delimiter
-1
delimiter
decorator
delimiter
temp_csv.flush()
delimiter
print(newcorpus.raw().strip())
delimiter
assert all(len(set(roster)) == len(roster) == 8 for roster in all_rosters)
delimiter
values = [r[1] for r in result]
delimiter
rows = array.shape[0]
delimiter
glo = [[x for x, y in g] for k, g in groupby(lki, key=itemgetter(1))]
delimiter
a - b * 4
delimiter
[np.sum(x ** 2 + a), 2 * x]
delimiter
results.append(res)
delimiter
soup = BeautifulSoup(file_h.read())
delimiter
self.ses.get(URL).text
delimiter
Shell_NotifyIcon(NIM_ADD, nid)
delimiter
x += b
delimiter
df = df.stack().reset_index()
delimiter
t = np.linspace(0, u.max(), 20)
delimiter
-__init_.py
delimiter
chars.append(escaped_str[i])
delimiter
web.setDisabled(True)
delimiter
callwith5(setanitem)
delimiter
sizer.Add(self.comboBox1, 0, wx.ALL | wx.CENTER, 5)
delimiter
root = tk.Tk()
delimiter
s
delimiter
values = Value.objects.filter(record=record).select_related()
delimiter
x = somequeryset.query
delimiter
params[:n + 1]
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
delimiter
self.opt.kill()
delimiter
date_after_month = datetime.today() + relativedelta(months=1)
delimiter
inv_mapping = {i: u for i, u in enumerate(labels)}
delimiter
print ()
delimiter
pool.close()
delimiter
d[k] += v
delimiter
t[2]
delimiter
ax1.scatter(list(range(10)), list(range(10)), c=list(range(10)), alpha=0.2)
delimiter
application = bottle.default_app()
delimiter
fig = plt.figure()
delimiter
new_stdout1.seek(0)
delimiter
math.sqrt(0.241 * r ** 2 + 0.691 * g ** 2 + 0.068 * b ** 2)
delimiter
result[mask] = 0
delimiter
print(set(list2) - set(list1))
delimiter
camcapture = cv.CaptureFromCAM(0)
delimiter
zip(a, b)
delimiter
stderr = ferr.getvalue()
delimiter
pb = pb.get_from_drawable(w, w.get_colormap(), 0, 0, 0, 0, sz[0], sz[1])
delimiter
perform_some_action()
delimiter
common.get_users()
delimiter
s.close()
delimiter
print(i)
delimiter
signal.signal(signal.SIGINT, term)
delimiter
print(line)
delimiter
split_string
delimiter
np.arange(n) >= m
delimiter
idx = np.random.permutation(4)
delimiter
self.list_two.setGeometry(0, 0, 500, 100)
delimiter
ax = fig.add_subplot(111)
delimiter
soup = BeautifulSoup(file)
delimiter
df = dfA[dfA.index.labels != -1]
delimiter
data = [map(int, row) for row in csv.reader(f)]
delimiter
arg.upper()
delimiter
s = s[k:]
delimiter
df1 = pd.read_csv(StringIO(df1_text), delim_whitespace=True)
delimiter
print(next(product(count(1), count(1))))
delimiter
self.z = z
delimiter
example1(x, a, b, D)
delimiter
root_element = xml.get_root()
delimiter
plate_chars += str(chr(results[0][0]))
delimiter
sys.stdout = StringIO.StringIO()
delimiter
df
delimiter
wx.Panel.__init__(self, parent, size=wx.Size(806, 450))
delimiter
position.append(0)
delimiter
f(name)
delimiter
hist, bin_edges = np.histogram(np.random.randint(0, 10, 100), normed=True)
delimiter
self.get_card(card_id).invert()
delimiter
ranges = ((n, n + step) for n in range(start, stop, step))
delimiter
next(self)
delimiter
timeit[Model.objects.filter(date_created__contains=today)]
delimiter
y_uspline = uspline(x)
delimiter
start = sum(range(n)) + 1
delimiter
lists = f.readlines()
delimiter
new_list = sorted(playlist, key=lambda L: next(by_artist[L.artist]))
delimiter
interp([9, 10], x, y)
delimiter
client.send(msg)
delimiter
t1, t2 = tee(iterable)
delimiter
root = Tk()
delimiter
A = A.reshape(4, 6)
delimiter
parser = argparse.ArgumentParser()
delimiter
os.system(c)
delimiter
plt.grid(True)
delimiter
my_instance.c()
delimiter
self.is_active = True
delimiter
sum(1 if c1 != c2 else 0 for c1, c2 in zip_longest(w1, w2))
delimiter
match = pattern.match(line)
delimiter
new_contact = form.save(commit=False)
delimiter
[self.list[i] for i in range(key.start, key.stop, key.step)]
delimiter
G.add_node((0, 0))
delimiter
g = lambda a, b=b: f(a, b)
delimiter
e1.pack()
delimiter
hformats = []
delimiter
contents = f.read()
delimiter
self.rowconfigure(0, weight=1)
delimiter
f, ax = plt.subplots(1)
delimiter
text = p.stdout.read()
delimiter
ADDRESS2 = ctypes.create_string_buffer(64)
delimiter
list(theDict.keys() & theList)
delimiter
pandas.core.frame.DataFrame
delimiter
self._parent.AppendUpdate(self.myproc.stdout.readline())
delimiter
c[k] += a[j] * b[k + j * K]
delimiter
readme.close()
delimiter
new.append(a[i])
delimiter
w[[a, a + 1]] + np.array([0, -2])
delimiter
geoms = []
delimiter
main()
delimiter
arr
delimiter
start = time.time()
delimiter
hash(self.name)
delimiter
f.seek(start)
delimiter
len(md5bytes)
delimiter
dict_out
delimiter
new_grammar._productions.append(nltk.grammar.Production(lhs2, [lhs]))
delimiter
ax.set_zlim(-1, 1)
delimiter
cursor = conn.cursor()
delimiter
reader = csv.reader(f)
delimiter
print(res.read())
delimiter
output[words[0]] = words[-1]
delimiter
s.sort()
delimiter
r_mid = 0.5 * (r_edges[:-1] + r_edges[1:])
delimiter
testmethod = lambda self: self.assertEqual(fn(i), output[i])
delimiter
root = lxml.html.fromstring(response.body)
delimiter
tmp[(2), :, :] = np.ones((sy, sz))
delimiter
f2.write(line)
delimiter
print(result)
delimiter
shuffle.append(newEl)
delimiter
self.execute(sql)
delimiter
cursor = conn.cursor()
delimiter
self.x1, self.y1 = int(event.x), int(event.y)
delimiter
names.append(i)
delimiter
print(cf.read(99))
delimiter
min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
delimiter
xmin = logdata.min()
delimiter
fd = self.process.stdout.fileno()
delimiter
self.setCentralWidget(self.text)
delimiter
print((date_cand, (datetime.date.today() - date_cand).days))
delimiter
print(r.raw._original_response.peer)
delimiter
print(x)
delimiter
log_observer.start()
delimiter
d = dict(l)
delimiter
b = [str(f) for f in range(n)]
delimiter
list1.remove(item)
delimiter
self.cond.wait()
delimiter
self.buf.seek(0, os.SEEK_END)
delimiter
self.panel.top()
delimiter
Grid.append([])
delimiter
print(my_array + [e])
delimiter
group = models.ForeignKey(Group)
delimiter
calendar.monthrange(2012, 1)
delimiter
m = pattern.search(line)
delimiter
n = 10
delimiter
np.exp(np.dot(mX, vBeta)) / (1.0 + np.exp(np.dot(mX, vBeta)))
delimiter
0
delimiter
newList = map(lambda x: x / myInt, myList)
delimiter
main.destroy()
delimiter
to = len(list)
delimiter
self.markdown.htmlStash.store(self.unescape(element))
delimiter
clf.predict(iris.data[125])
delimiter
+apache2
delimiter
diag_indices = A.indices[idx_begin:idx_end]
delimiter
main()
delimiter
z = zipfile.ZipFile(io.BytesIO(r.content))
delimiter
self.released.connect(self.update)
delimiter
self.f.setsampwidth(sampwidth)
delimiter
d[k].append(v)
delimiter
datetime = dt.datetime.combine(date, time)
delimiter
self.avail_ranges.remove(ip_network)
delimiter
bSizer.Add(button1, 0, wx.ALL, 5)
delimiter
print(c.html.strip())
delimiter
_triple_file.close()
delimiter
str(d)
delimiter
pip - -version
delimiter
new_lst = []
delimiter
add(1, [])
delimiter
mask = np.all(np.isnan(a) | np.equal(a, 0), axis=1)
delimiter
print(dict(filter_dict_path(old_dict, sub)))
delimiter
my_dict[x] = 4
delimiter
IS_SETUP = True
delimiter
print(repr(tokzr_QA_non_canonical(inp1)))
delimiter
print(input[a])
delimiter
self.assertListEqual(self.result, self.expected)
delimiter
data = f.read().strip()
delimiter
lst = numpy.array([random.uniform(0, 5) for _ in range(1000)])
delimiter
method = getattr(foo_obj, command)
delimiter
print(args.doh)
delimiter
newlist = []
delimiter
columns.append([7, 7, 7])
delimiter
plt.subplots_adjust(left=0.2)
delimiter
axone = plt.axes([0.1, 0.05, 0.1, 0.075])
delimiter
distribution = scipy.stats.norm(loc=100, scale=5)
delimiter
vals[mask].reshape(-1, out_shape[1])[:out_shape[0]]
delimiter
any(map(bool, list(d.values())))
delimiter
left_thresh[:, i:] += img[:, :w - i]
delimiter
print(hex2.neighbors())
delimiter
dirname, basename = os.path.split(filename)
delimiter
arr_2 = np.array(multidim_list2)
delimiter
transaction.rollback()
delimiter
print(window.get_name())
delimiter
48.1145061659
delimiter
time += 1
delimiter
self._async_interrupt.wait_for_receive()
delimiter
a = A()
delimiter
x[2:10]
delimiter
df = s.reset_index()
delimiter
print(self.companies[index])
delimiter
0
delimiter
result1.append(x)
delimiter
file = sys.argv[1]
delimiter
help(Test)
delimiter
self.data.extend(list(other))
delimiter
c = a * b.reshape((b.size, 1))
delimiter
children.append(node.values[i])
delimiter
tokens = nltk.word_tokenize(text)
delimiter
line = line.strip()
delimiter
assert_array_compare(operator.__eq__, x, y, err_msg=err_msg)
delimiter
sdl2.SDL_SetRenderDrawColor(renderer, 255, 255, 255, sdl2.SDL_ALPHA_OPAQUE)
delimiter
list.__getitem__(self, index)
delimiter
number = models.CharField(max_length=50)
delimiter
xpos, ypos = np.meshgrid(xedges[:-1] + 0.25, yedges[:-1] + 0.25)
delimiter
Servername = MYSERVER
delimiter
axtwo = plt.axes([0.21, 0.05, 0.1, 0.075])
delimiter
print(any(list_item in fruit_dict1 for list_item in fruits))
delimiter
root = tix.Tk()
delimiter
self.edit = QtGui.QLineEdit(self)
delimiter
lines.append(linecache.getline(filename, curline).rstrip())
delimiter
salt = bcrypt.gensalt()
delimiter
opener = urllib.request.build_opener(cookies)
delimiter
a = np.random.normal(0, 1, N)
delimiter
print(element)
delimiter
hrago = now - timedelta(hours=1)
delimiter
lensub1, lensub2 = len(subset1), len(subset2)
delimiter
pos = entry.get_position()
delimiter
self.children = []
delimiter
a, b = [iter(x)] * 2
delimiter
print(o.foo())
delimiter
outlen = in1.shape[-1] + in2.shape[-1] - 1
delimiter
br = mechanize.Browser()
delimiter
print(x)
delimiter
formatter = logging.Formatter(LOG_FORMAT)
delimiter
b.sort()
delimiter
print(files)
delimiter
os.close(rpipe)
delimiter
columnNames = [d[0] for d in cursor.description]
delimiter
s.set_debuglevel(1)
delimiter
blob_reader = blobstore.BlobReader(blob_key)
delimiter
print(gitpath.root())
delimiter
np.isnan(x)
delimiter
flatten = [item for sublist in temp for item in sublist]
delimiter
code_to_profile()
delimiter
work.append(nope)
delimiter
request = Request(url, headers=headers)
delimiter
print(d[int])
delimiter
main()
delimiter
curses.noecho()
delimiter
smprint()
delimiter
test_dict = {}
delimiter
retDirs.append(os.path.join(root, i))
delimiter
setattr(namespace, self.dest, value)
delimiter
f = Foo()
delimiter
self.data = data
delimiter
print(etree.tostring(tree.getroot()))
delimiter
min([(x, distance(word, x)) for x in lst], key=itemgetter(1))
delimiter
first.request.SetInParent()
delimiter
entry = tk.Entry(self)
delimiter
sleep(0.001)
delimiter
self.name
delimiter
self._fileobj.seek(offset)
delimiter
nx.draw(G, with_labels=False)
delimiter
proc = mp.Process(target=worker, args=[q, arr])
delimiter
hax.set_position([0.1, 0.1, 0.8, 0.8])
delimiter
obj = Try()
delimiter
d[k].append(v)
delimiter
L = fo.readlines()
delimiter
os.rename(tmp, myfilepath)
delimiter
twitter = Twython(APP_KEY, APP_SECRET, oauth_token, oauth_token_secret)
delimiter
[0, 2, 0, 1, 0, 1, 0, 1, 1, 1, 2, 0]
delimiter
sys.exit(app.exec_())
delimiter
print(Type[x][x], len(Type[x][x]))
delimiter
GameApp().run()
delimiter
driver.get_screenshot_as_file(screenshot_file_path)
delimiter
driver.switch_to_frame(iframe)
delimiter
dt = datetime.datetime.now()
delimiter
a[:, (0)] == 1
delimiter
r[v].append(k)
delimiter
reader = csv.reader(file)
delimiter
t.start()
delimiter
tokens = text.split()
delimiter
calendar.timegm(utc_timetuple)
delimiter
segment_two = csv.reader(file_two)
delimiter
cax = ax.matshow(cm, cmap=cmap)
delimiter
[[[0, 1]]]
delimiter
sum(c.isalpha() for c in s)
delimiter
app = Flask(__name__)
delimiter
stacked_conv_neibs = T.stack(*multiple_conv_out).T
delimiter
arg_list
delimiter
x += 1
delimiter
im_temp = im_temp.resize((250, 250), Image.ANTIALIAS)
delimiter
assert np.allclose(point, round_trip)
delimiter
b1.grid(row=0, column=0, pady=10, padx=10, sticky=Tkinter.SE)
delimiter
sorted_tuples = sorted(initial_ranges)
delimiter
d = dict(foo=1, bar=2)
delimiter
input_list = set([0, 1])
delimiter
dct = json.loads(json_string, object_hook=datetime_parser)
delimiter
thisRDD.count()
delimiter
root = etree.fromstring(broken_xml, parser=parser)
delimiter
result = list(islice(it, n))
delimiter
list(dates)
delimiter
df1
delimiter
df2 = pd.DataFrame(data2)
delimiter
list(unique_everseen(items))
delimiter
fig, ax = plt.subplots(figsize=(20, 10))
delimiter
deepReduce(f, f(y, xs[0]), xs[1:])
delimiter
splittime / parsetime
delimiter
app = Flask(__name__)
delimiter
exec(self.raw)
delimiter
s
delimiter
lattice = list(range(0, len(inputs)))
delimiter
palette.append((0, 0, 255 - i))
delimiter
filters.append(Q(tree_id=n.tree_id, lft__gt=lft, rght__lt=rght))
delimiter
friendList.append(self)
delimiter
[l[0] - 1] + recurseDecrMap(l[1:]) if l else []
delimiter
Queue.__init__(self, maxsize)
delimiter
tsp = [(el[0], el[-1]) for el in ts]
delimiter
edgey2 = region2 ^ np.roll(nregion2, shift=shift, axis=1)
delimiter
some_heavy_calculations()
delimiter
i = a.index(p[0])
delimiter
print(cv2.isOpened())
delimiter
catalog = dict((name, idx) for idx, name in names.items())
delimiter
timeit.timeit(lambda : bytearray(os.urandom(1000000)), number=10)
delimiter
form = forms.ChapterForm(request.POST)
delimiter
json_str = json.dumps(data)
delimiter
env = _Env()
delimiter
crsr.fetchall()
delimiter
id(a[1])
delimiter
a = Example()
delimiter
samples2 = [samples2[i:i + 2] for i in range(0, len(samples2), 2)]
delimiter
app.config_from_object(Config)
delimiter
map = base_map.set_a_map()
delimiter
cont = ax.contour(X, Y, Z)
delimiter
unittest.TestSuite([DataTestCase(n) for n in numbers])
delimiter
result = []
delimiter
merged
delimiter
CONTINUOUS_INTEGRATION = true
delimiter
d = datetime.datetime(2011, 8, 29)
delimiter
os.makedirs(dirmk)
delimiter
Fy = np.random.rand(100, 10, 40)
delimiter
execlist[index][2] = myx
delimiter
tz = pytz.timezone(zonename)
delimiter
list(range(10, 20))
delimiter
manager = urllib.request.HTTPPasswordMgrWithDefaultRealm()
delimiter
S.remove(10)
delimiter
newlist
delimiter
expire_events.py
delimiter
response.replace(body=new_body, encoding=self.encoding)
delimiter
proc.start()
delimiter
self.list[index], self.list[-1] = self.list[-1], self.list[index]
delimiter
redis - cli
delimiter
echo.py
delimiter
plot(x, z)
delimiter
a[I, J]
delimiter
tuple.__new__(cls, initialValue)
delimiter
mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, se2)
delimiter
setup_func(a_cxx_foo)
delimiter
seq.insert(i, item)
delimiter
zipname = sys.argv[1]
delimiter
diff2 = np.sqrt(diff2)
delimiter
nowtuple = nowdt.timetuple()
delimiter
value_counts = df.stack().value_counts()
delimiter
sleep(time)
delimiter
--enable - pythoninterp
delimiter
print(c)
delimiter
results.append(tuple([row[i] for i in headers]))
delimiter
plt.plot(data1)
delimiter
ax.add_collection(coll)
delimiter
fs.visititems(callback)
delimiter
trends1 = api.trends_place(1)
delimiter
self._pred_map[self]
delimiter
client_tcp[1].send_data_to_tcp(self.data)
delimiter
L1 = [i for i in L if i in L1]
delimiter
arr_1 = np.arange(10)
delimiter
logger.addHandler(handler)
delimiter
clf.fit(X_, vector)
delimiter
f = f.reshape(())
delimiter
test = math.inf
delimiter
diff = ImageChops.difference(im2, im1)
delimiter
utc_time = datetime1 - datetime1.utcoffset()
delimiter
g()
delimiter
M = M[M.getnnz(1) > 0, M.getnnz(0) > 0]
delimiter
y = lambda u: u ** -2 + 8
delimiter
func.__get__(instance, cls)(*args, **kwargs)
delimiter
crawler.crawl(spider)
delimiter
options = ChromeOptions()
delimiter
print(len(list(filter(is_div_three, r))))
delimiter
rotated_image = cv2.warpAffine(image, rot_mat, shape, flags=cv2.INTER_LINEAR)
delimiter
print(etree.tostring(tree))
delimiter
widget1.update_idletasks()
delimiter
count
delimiter
hello()
delimiter
self.timer = QtCore.QTimer()
delimiter
request.session.cycle_key()
delimiter
self.title, self.artist, self.album, self.source, self.dest
delimiter
x = np.linspace(data.min(), data.max(), 100)
delimiter
np.repeat(arr, rep.flat)
delimiter
self.type = type
delimiter
connection.endheaders(request_body)
delimiter
q = Queue()
delimiter
print(r(-1, 1))
delimiter
referrer.append(x)
delimiter
round(base * round(float(x) / base), prec)
delimiter
x_mean = np.mean(x, axis=1, keepdims=True)
delimiter
Py_DECREF(pystdout)
delimiter
y2.append(random.randint(1, 100))
delimiter
sympy.randprime(0, 100)
delimiter
kde = stats.gaussian_kde(data)
delimiter
Base = declarative_base()
delimiter
np.hstack((np.zeros(shape), data))
delimiter
print(g[first_row:last_row + 1, first_col:last_col + 1])
delimiter
print(user_postition)
delimiter
ftp.login()
delimiter
data = json.load(f)
delimiter
now = datetime.datetime.now()
delimiter
hamming_distance(a, b)
delimiter
copy = df.copy()
delimiter
auth.save_session()
delimiter
main.show()
delimiter
hash(self.name)
delimiter
frame.Bind(wx.EVT_WINDOW_DESTROY, self._unregister)
delimiter
english_dict[word]
delimiter
y += np.random.randn(6) / 10
delimiter
deps.append(str(name))
delimiter
np.bitwise_and.reduce(a) == a[0]
delimiter
r.terminate()
delimiter
stoppool = threading.Thread(target=close_pool)
delimiter
dsolve(eq)
delimiter
a.insert(0, i)
delimiter
sys.stderr = sys.__stderr__
delimiter
confusion_matrix(y_true, y_pred)
delimiter
list(f(doc))
delimiter
print(num)
delimiter
idx = np.argsort(a)
delimiter
newMethod.__get__(a, A)
delimiter
table.show()
delimiter
result.append(x)
delimiter
subs = [set(j) for i in range(len(s)) for j in combinations(s, i + 1)]
delimiter
name, score = line.split()
delimiter
srf.blit(f.render(unistr, True, (255, 255, 255)), (0, 0))
delimiter
recall
delimiter
len(bin(100)) - 2
delimiter
print(inspect.signature(f).parameters)
delimiter
sys.stdin = s
delimiter
fun(indata, indata.size, outdata)
delimiter
mod.HelloWorld()
delimiter
meta = MetaData(bind=migrate_engine)
delimiter
logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)
delimiter
pl.plot(x, us(x))
delimiter
(2, 1)(2, 1)
delimiter
propfaid.set_cache(*settings)
delimiter
A[:(A < np.percentile(a, 90)).argmin()].sum()
delimiter
mins.append(i)
delimiter
bool(self.value)
delimiter
self.__add__(-i)
delimiter
triplets = list(permutations(lst, n))
delimiter
x = True
delimiter
s.indices(10)
delimiter
data_ratio = plt.gca().get_data_ratio()
delimiter
dothat(item)
delimiter
print(list(my_range(4, 20, 2)))
delimiter
d.bar
delimiter
fig, axes = plt.subplots(nrows=2, ncols=1, sharex=True)
delimiter
self.do_something(name, value)
delimiter
object._state.db
delimiter
time.sleep(self.interval)
delimiter
self.output_queue = mp.Queue()
delimiter
parent = Parent()
delimiter
cat / etc / nginx / sites - enabled / myapp.conf
delimiter
bool_arr = np.array([True, True, False])
delimiter
index = random.choice(list(range(len(MY_LIST))))
delimiter
p[0] + p[1] * x ** p[2]
delimiter
mailList = [i.strip() for i in urlFile.readlines()]
delimiter
type(-maxint - 2)
delimiter
draw.line((i, 0, i, 100), fill=random.randrange(256))
delimiter
self.crawler.stop()
delimiter
out = x.truncate(before=datetime.datetime(2015, 12, 2, 12, 2, 18))
delimiter
print((val, k))
delimiter
b = a[(0), (1), ::2]
delimiter
valid_file = False
delimiter
sys.exit(1)
delimiter
a.add(1)
delimiter
txt = self.proc.stdout.readline()
delimiter
tag = node.tagName
delimiter
spider
delimiter
lines = []
delimiter
show()
delimiter
result = []
delimiter
match.group(1)
delimiter
persist_file.Save(shortcut_path, 0)
delimiter
myfield = QuerySelectField(query_factory=fill_field)
delimiter
r.append(blocktag[1])
delimiter
np.poly1d(p)(x)
delimiter
render_user(request)
delimiter
browser = spynner.Browser()
delimiter
ax.matshow(m[(0), :, :, (j)], cmap=cm.gray)
delimiter
sequence[0:len(sequence):2] == sequence[:len(sequence):2] == sequence[::2]
delimiter
self.close()
delimiter
print(self.value, self.foobar)
delimiter
xmldoc = minidom.parse(usock)
delimiter
list_magicInput.append(letter)
delimiter
array([5, 7])
delimiter
s.rollback()
delimiter
QtGui.QMainWindow.__init__(self)
delimiter
np.may_share_memory(X2, X2.reshape(X2.shape[0], -1)[:, (0)])
delimiter
print(tokenize.untokenize(output))
delimiter
x = new_array()
delimiter
vmin = min(map(lambda x: min(abs(x)), data))
delimiter
b = numpy.array([0] * n + [1] * 2)
delimiter
reactor.callLater(1.0, heartbeat)
delimiter
created = models.DateTimeField(auto_now_add=True)
delimiter
fig, ax = plt.subplots()
delimiter
next(gen)
delimiter
output = requests.get(url).text
delimiter
os.dup2(oldstderr, sys.stderr.fileno())
delimiter
ax1 = fig.add_subplot(gs[0, 0])
delimiter
result = {k: [expand_string(s, all_strings) for s in v] for k, v in list(my_dict.items())}
delimiter
non_numeric_chars = string.printable[10:]
delimiter
worksheet = workbook.add_worksheet()
delimiter
setattr(self.obj, self.method, self.called)
delimiter
unique.append(obj)
delimiter
auth_handler = urllib.request.HTTPBasicAuthHandler()
delimiter
print(x)
delimiter
data = parser.parse_args(contents.split())
delimiter
model_subklass(**kwargs)
delimiter
parser.parse_args(args.split())
delimiter
ys.append(y)
delimiter
f(1)
delimiter
date.day
delimiter
app.jinja_env.globals.update(can_access=can_access)
delimiter
raise PartialImport(locals())
delimiter
MIGRATION_MODULES = DisableMigrations()
delimiter
np.log10(df.timeLength)
delimiter
sow = today - datetime.timedelta(days=now.weekday())
delimiter
fp[:, (i)] = fp[:, (i + 1)]
delimiter
curs.execute(sql)
delimiter
n = 0
delimiter
signal.pause()
delimiter
profile = webdriver.FirefoxProfile()
delimiter
self.base.foo = f
delimiter
df.dtypes
delimiter
a = models.CharField(max_length=5)
delimiter
x = numpy.random.randint(0, 1000, 1000000)
delimiter
do_stuff(level_lookup[key])
delimiter
x_indices = indices[0]
delimiter
df.loc[mask == 1, 0] = 200
delimiter
codepoint = ord(c)
delimiter
worksheet.setRowCount(worksheet.getRowCount() + 1)
delimiter
quicksort(array, start, i - 1)
delimiter
1 if S == 0 else 0
delimiter
print(list(inverse_regex.ipermute(data)))
delimiter
triple = line.split()
delimiter
foo(args)
delimiter
s = self.fileobj.read(1)
delimiter
x if x % 100 == 0 else x + 100 - x % 100
delimiter
result = []
delimiter
setofcols.add(tuple(column.A1.tolist()))
delimiter
todayDate += datetime.timedelta(7)
delimiter
req.has_data()
delimiter
print(df1)
delimiter
logger = logging.getLogger(__file__)
delimiter
scene.objects.link(lamp_object)
delimiter
color_cycle = ax._get_lines.color_cycle
delimiter
test = coo_matrix((val, (row, col)), shape=(nele, nbus), dtype=complex)
delimiter
dict.__delitem__(self, self[key])
delimiter
bar.__doc__
delimiter
print(line)
delimiter
importer.find_module(RUN_MODULE).load_module(RUN_MODULE)
delimiter
np.bincount(ids, weights=data)
delimiter
self.parsedData.append(dataRow)
delimiter
date_created = models.DateTimeField(auto_now_add=True)
delimiter
plt.imshow(H)
delimiter
output = proc.stdout.readline()
delimiter
B, C = split_list(A)
delimiter
print(browser.html)
delimiter
cur = con.cursor()
delimiter
batch = service.new_batch_http_request()
delimiter
my_counter = Counter(my_list)
delimiter
a = numpy.random.random(size=100) * 100
delimiter
results = pool.map(process_line, source_file, 4)
delimiter
df_no
delimiter
sizer.AddSpacer(10)
delimiter
image_field.seek(0)
delimiter
r = r[0].isoformat() + tz
delimiter
serializer_class = UserSerializer
delimiter
result = tocontainer(result)
delimiter
plt.plot(x, -y)
delimiter
c = array([1, 1, 1])
delimiter
b2 = tf.Variable(tf.zeros([10]))
delimiter
tri = np.zeros((67, 67))
delimiter
application.listen(8888)
delimiter
True
delimiter
X4, Y4 = np.meshgrid(x4, y4)
delimiter
Astarrs = list(ApStars)
delimiter
sheet.write(cell, value)
delimiter
0.16515994072
delimiter
body = part.get_payload(decode=True)
delimiter
mainwin.set_default_size(200, 200)
delimiter
wb = Workbook()
delimiter
print(T(lambda : fj(controls)).repeat(number=REPS))
delimiter
[]
delimiter
self._cards[card_ID].invert()
delimiter
numbers = [d.setdefault(i, next(c)) for i in names]
delimiter
coc = CopyOfC()
delimiter
x = ax.get_xlim()
delimiter
self.assertEqual(42, s2)
delimiter
Area2(a, b, c) < 0
delimiter
f
delimiter
publish_date = db.Column(db.DateTime, default=tomorrow)
delimiter
self.byName[person.name].append(person)
delimiter
xi = np.linspace(X.min(), X.max(), 1000)
delimiter
data = urllib.parse.urlencode(params)
delimiter
{4}
delimiter
np.fill_diagonal(product, 0)
delimiter
self.Bind(wx.EVT_CLOSE, self.OnCloseWindow)
delimiter
response.close()
delimiter
eroded = binary_erosion(data, structure, border_value=1).astype(int)
delimiter
fig.canvas.print_png(ram)
delimiter
name = db.Column(db.String())
delimiter
cr.set_source_rgba(0.5, 1.0, 0.0, 1)
delimiter
fig = plt.figure()
delimiter
gtk.main()
delimiter
main()
delimiter
sm = plt.cm.ScalarMappable(cmap=my_cmap, norm=plt.normalize(vmin=0, vmax=1))
delimiter
host
delimiter
exit(0)
delimiter
print_sorted(filename, sort_col)
delimiter
y.append(ind_2)
delimiter
library(SnowballC)
delimiter
print(p.ne(p.shift()).cumsum())
delimiter
df
delimiter
left_key, right_key, max_groups = self._get_group_keys()
delimiter
input = [server, sys.stdin]
delimiter
sys.stdout = StringIO()
delimiter
config = configparser.ConfigParser()
delimiter
signal = np.sin(50 * 2 * np.pi * x)
delimiter
ax1 = fig.add_subplot(111)
delimiter
b = np.array(b)
delimiter
p_values = scipy.stats.norm.sf(abs(z_scores))
delimiter
f(1)
delimiter
Frame.__init__(self, master)
delimiter
pylab.rcParams.update(params)
delimiter
list(it)
delimiter
new.append(recursivereverese(k))
delimiter
print(x)
delimiter
c = orcl.cursor()
delimiter
X -= np.mean(X, axis=0)
delimiter
contained(a, b)
delimiter
id = row[0]
delimiter
x + self.y
delimiter
stdout.write(x)
delimiter
self.img_id = self.canvas.create_image(x, y, image=self.img)
delimiter
sess.run(training_net, feed_dict={inputs: batch[0], labels: batch[1]})
delimiter
row0_sum = mat[0] * (len(ixs) - np.count_nonzero(nzmask))
delimiter
Py_XDECREF(self.members[i])
delimiter
x.append(y)
delimiter
print(row)
delimiter
tbl[-1].append(str(td.text_content()))
delimiter
plt.figure(2)
delimiter
l.set_option(ldap.OPT_DEBUG_LEVEL, 255)
delimiter
s.dt.days
delimiter
f = f_wrapper(_f_call, _f_ptr)
delimiter
command = os.path.realpath(command)
delimiter
closex = close.copy()
delimiter
count = 0
delimiter
response = urllib.request.urlopen(req)
delimiter
response = requests.get(url)
delimiter
my_instance.save()
delimiter
data[header].append(value)
delimiter
grouped.size()
delimiter
pprint.pprint(result)
delimiter
print(ulst)
delimiter
L.reverse()
delimiter
Base * get_other_base()
delimiter
print(out_str)
delimiter
data = ser.read(4)
delimiter
sys.exit()
delimiter
yappi.start()
delimiter
today = date.today()
delimiter
count = len(values)
delimiter
DD = datetime.timedelta(days=-90)
delimiter
print(saber)
delimiter
min(Mylist)
delimiter
ceo.greets(emp)
delimiter
data = pandas.DataFrame(np.transpose(df_std))
delimiter
data = string[0]
delimiter
t, y, x = numpy.indices(J.shape)
delimiter
print(get_size())
delimiter
sentence_dict[word] = []
delimiter
result = f(*args, **kargs)
delimiter
m_ind, n_ind = w.T
delimiter
zvals = np.random.rand(100, 100) * 10 - 5
delimiter
db.run_in_transaction(txn, cat_alias.keyname_for_category())
delimiter
s.listen(5)
delimiter
plot = ax.plot_surface(X, Y, soln, **plot_args)
delimiter
msgBox = QtGui.QMessageBox()
delimiter
list(chain(*[([x] * i) for i, x in zip(A, B)]))
delimiter
operator.itemgetter(*b)(a)
delimiter
print(1)
delimiter
fill_color = line.get_color()
delimiter
arr = array(arr, copy=False, subok=True, ndmin=2).T
delimiter
ser = serial.Serial(port, 9600)
delimiter
w.show_all()
delimiter
result = []
delimiter
os.unlink(f.abspath)
delimiter
dis.dis(f)
delimiter
wide
delimiter
pool.map(worker, [(i, array) for i in range(n)])
delimiter
keys = [wx.WXK_LEFT, wx.WXK_RIGHT, wx.WXK_UP, wx.WXK_DOWN]
delimiter
pymongo.version
delimiter
np.array(*args, **kwargs).view(myarray)
delimiter
cr = csv.reader(f)
delimiter
wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)
delimiter
tokenizer.tokenize(text.strip())
delimiter
A = A.astype(int)
delimiter
im1.set_clim([smin.val, smax.val])
delimiter
setting1 = config1
delimiter
self.name = name
delimiter
x = np.linspace(0, 2, N)
delimiter
lightened25 = [lerp(c, w, 0.25) for c, w in zip(my_color, white)]
delimiter
p.terminate()
delimiter
csvreader = csv.DictReader(inf)
delimiter
arr = np.empty(len(lst), dtype=object)
delimiter
print(a.shape)
delimiter
it = iter(iterable)
delimiter
cw.writerows(csvList)
delimiter
deactivate
delimiter
ans.append(s[0])
delimiter
self.readonly_fields
delimiter
p = x.pop()
delimiter
assert len(c) == 1
delimiter
module_code = __import__(name)
delimiter
pat.match(s)
delimiter
sh.write(n, 1, col2_name)
delimiter
self._thread_id = tid
delimiter
results.append(out.toString())
delimiter
keys = list(myDict.keys())
delimiter
idx1 = np.arange(len(desc1))
delimiter
pickle.dumps(cycle)
delimiter
line2 = f.readline()
delimiter
print(df1.fillna(df2))
delimiter
x.shape
delimiter
axis[:set_xlim](0, 10)
delimiter
p = psutil.Process(1694)
delimiter
msg = next(myproducer)
delimiter
b.append(i)
delimiter
vec = numpy.zeros(num_rows)
delimiter
main.py
delimiter
r = np.arange(X.shape[0])
delimiter
cluster = dict()
delimiter
id(a[2]), id(b[-2])
delimiter
myDict = {}
delimiter
print(id(string[0:5]))
delimiter
False
delimiter
[freetds]
delimiter
terminator.cancel()
delimiter
line.set_ydata(sin(x + i / 10.0))
delimiter
f.write(decodestring(imagestr))
delimiter
print([num, diff])
delimiter
data = f.read()
delimiter
kernel.execute(command)
delimiter
len(df[np.isclose(df.R, 0.9)])
delimiter
inner_qs = table2.objects.all()
delimiter
r
delimiter
data = np.ascontiguousarray(data)
delimiter
_to_etree(v, ET.SubElement(root, k))
delimiter
print(b[0].dtype)
delimiter
ax = fig.add_subplot(111)
delimiter
name = models.CharField(max_length=100)
delimiter
_array[::][1:]
delimiter
ax.invert_yaxis()
delimiter
tb.show()
delimiter
queue.append(item)
delimiter
img = Image.fromarray(maxi)
delimiter
print(update_doc(b))
delimiter
this_prize
delimiter
(v for m in self.maps for v in m.values())
delimiter
globals()[key] = value
delimiter
remote_client = SSHClient()
delimiter
self.test(*self.arg)
delimiter
print(r)
delimiter
backdrop = pygame.Rect(0, 0, SCREEN_X, SCREEN_Y)
delimiter
self.co = self.sink()
delimiter
assertTrue(True)
delimiter
p = multiprocessing.Pool(2)
delimiter
nz = np.nonzero(cells)[0]
delimiter
str.__new__(str, arg=1)
delimiter
app.register_blueprint(child2.child2)
delimiter
n = float(n)
delimiter
print(handle_csrf.__doc__)
delimiter
f.close()
delimiter
(y, m) if m else (y - 1, 12)
delimiter
self._1d_array = np.arange(10)
delimiter
left, bottom, width, height = [0.25, 0.6, 0.2, 0.2]
delimiter
self.output += data.strip()
delimiter
col = array([0, 2, 2, 0, 1, 2])
delimiter
out = {}
delimiter
df.index = list(range(len(df)))
delimiter
m.update(string)
delimiter
inverse_dict = defaultdict(list)
delimiter
B.add_nodes_from(cells_list, bipartite=1)
delimiter
int(s)
delimiter
print(self.a)
delimiter
X = StandardScaler().fit_transform(X)
delimiter
PyLong_AsByteArray(lnum, a, len(a), 0, 1)
delimiter
mask = np.in1d(pairs1D, positions1D).reshape(-1, 2)
delimiter
new_list = list(filter(keep_this_element, l))
delimiter
g = (i for i in range(100))
delimiter
min(results, key=test_string.index)
delimiter
execute_from_command_line(sys.argv)
delimiter
y = y[mask]
delimiter
d = {}
delimiter
stackless.tasklet(a)()
delimiter
ax.broken_barh([(midpoint - 0.01, 0.02)], (perc[0], perc[1] - perc[0]))
delimiter
sys.excepthook = handle_exception
delimiter
all_records = NCBIXML.parse(handle)
delimiter
ret = os.popen(cmd + file).readline().strip()
delimiter
df
delimiter
x = random.choice([left, right] * adjpx + [withinx])
delimiter
print(df)
delimiter
now = datetime.utcnow()
delimiter
di[pos][1].append(listb[i])
delimiter
colors = [(color * (0.5 + norm(v) * 0.5)) for v in shade]
delimiter
self.bar(**args)
delimiter
pos_frame = cap.get(cv2.cv.CV_CAP_PROP_POS_FRAMES)
delimiter
L = list(range(0, 101, 10))
delimiter
n
delimiter
x_err = np.array([random.random() for i in x])
delimiter
out[2]
delimiter
form_user = UserForm(request.POST, instance=request.user)
delimiter
link = self.br.find_element_by_link_text(month)
delimiter
p = QPixmap.grabWindow(widget.winId())
delimiter
b = a[:-4]
delimiter
ax4 = plt.subplot(gs[-1, 0])
delimiter
collection[obj.category_id].append(obj)
delimiter
dis.dis(test4)
delimiter
[length] = set(map(len, list_of_lists))
delimiter
b = a + 1
delimiter
b = np.linspace(0, 1, 16, endpoint=False).reshape(4, 4)
delimiter
app.installEventFilter(win)
delimiter
r, g, b = im.getpixel((i, j))
delimiter
conn = engine.connect()
delimiter
data.append(integers)
delimiter
path = os.path.realpath(path)
delimiter
flatten(something, a)
delimiter
file_handler = logging.FileHandler(filename)
delimiter
unique_name = models.CharField(max_length=255)
delimiter
roundedB = b.replace(hour=0, minute=0, second=0, microsecond=0)
delimiter
raise StopIteration
delimiter
ard.write(setTemp1)
delimiter
temp_dir = tempfile.gettempdir()
delimiter
formData.append(name, val)
delimiter
self.seek(-blocksize, 1)
delimiter
width = label.fontMetrics().boundingRect(label.text()).width()
delimiter
somemodule.someclass = debug_signals(somemodule.someclass)
delimiter
[gb.get_group(x) for x in gb.groups]
delimiter
out = [float(f_interp(*p)) for p in points]
delimiter
p.map_async(func, iterable).get(timeout=10000000)
delimiter
a.update(b)
delimiter
es = Elasticsearch()
delimiter
[(string + repr(i)) for i in range(11)]
delimiter
driver.get(url)
delimiter
Pxx_dB = np.log10(Pxx)
delimiter
self.text = tk.Text(self, width=40, height=20, yscrollcommand=self.vsb.set)
delimiter
ax = plt.subplot(111, polar=True)
delimiter
print(str(x))
delimiter
i = patch_instance(x.get_instance())
delimiter
f(*arg)
delimiter
seq[int(self.random() * len(seq))]
delimiter
result = np.array([[f(i, j) for j in b] for i in a])
delimiter
myTurtle = turtle.Turtle()
delimiter
type, value, tb = sys.exc_info()
delimiter
swap(xs, a, b)
delimiter
self.foo = foo
delimiter
self._global_wealth = 10.0
delimiter
test_data = tf.Variable(1000)
delimiter
main()
delimiter
x.append(ind_1)
delimiter
canvas.Canvas.save(self)
delimiter
ret[ret > 0].sum()
delimiter
times[-1]
delimiter
b = object()
delimiter
f.truncate()
delimiter
sum(base_lists, [])
delimiter
sys.stderr.write(u)
delimiter
weight_total = sum(item[1] for item in items)
delimiter
i += 1
delimiter
yesterday = now - timedelta(days=1)
delimiter
ax = plt.gca()
delimiter
list(x) is x
delimiter
shutil.rmtree(apppath)
delimiter
new_user.save()
delimiter
0
delimiter
out[k].append(recursive_asdict(item))
delimiter
df
delimiter
image = image.resize((nw, th), Image.ANTIALIAS)
delimiter
print(line)
delimiter
b = values(numpy.arange(100))
delimiter
asdf = form.save(commit=False)
delimiter
locals().update(adict)
delimiter
root = lxml.html.fromstring(driver.page_source)
delimiter
deleteself.weapon
delimiter
fp.write(chunk)
delimiter
iter(iterable.items())
delimiter
loop.add_timeout(time.time() + seconds, callback=gen.Callback(some_unique_key))
delimiter
listbox.pack()
delimiter
b = np.append(a, [False])
delimiter
page_next_app_table = template.render()
delimiter
txt = wx.TextCtrl(self)
delimiter
self.data = [[(0) for c in range(cols)] for r in range(rows)]
delimiter
self.noload = unpickler.noload
delimiter
main.show()
delimiter
pprint.pprint(lines_to_dict(d))
delimiter
type(dates[0])
delimiter
self.frame = Frame(self.root)
delimiter
--__init__.py
delimiter
t = np.linspace(-10.0, 10.0, 100)
delimiter
df
delimiter
data = []
delimiter
plt.plot([(x * x * curvature) for x in range(0, 11)])
delimiter
print(inspect.getsource(Tester))
delimiter
a = models.ForeignKey(A)
delimiter
self._cards[card_ID].invert()
delimiter
words = sentence.split()
delimiter
solution[1], sum(oldmoves[solution[1]]), oldmoves[solution[1]]
delimiter
decorated.sort()
delimiter
True
delimiter
axarr[0].plot(x, y)
delimiter
sys.stdout = stdout
delimiter
result = []
delimiter
lst = [(val * 2) for val in lst]
delimiter
X_kpca = kpca.fit_transform(X)
delimiter
y = [(max(k), v) for v, k in list(d.items())]
delimiter
sess.run(init)
delimiter
date = parser.parse(text)
delimiter
ser.str.isdigit().sum()
delimiter
max_range = list(range(start, end))
delimiter
[(key, [self[key]]) for key in self.order]
delimiter
diff[y, x] = img1[y, x] - img2[y, x]
delimiter
json.loads(raw_post_data, object_pairs_hook=KeyWatcher)
delimiter
private_key = keyfactory.parsePrivateKey(rsa_key)
delimiter
result = set()
delimiter
corner2 = [1, 1, 1]
delimiter
Py_DECREF(result)
delimiter
value = list(value)
delimiter
contour = numpy.array([[[0, 0]], [[10, 0]], [[10, 10]], [[5, 4]]])
delimiter
modules = map(__import__, myList)
delimiter
register = template.Library()
delimiter
ax = fig.add_subplot(111)
delimiter
do_first_thing_with(obj)
delimiter
PyArray_Descr * descr
delimiter
i = np.array([0, 0, 1, 2, 2])
delimiter
fr.f_code.co_name
delimiter
corners = np.squeeze(np.int0(corners))
delimiter
e = pygame.event.poll()
delimiter
graph.append([])
delimiter
b[x].append(x)
delimiter
cx2
delimiter
n = len(txt)
delimiter
result1 = pool.apply_async(solve1, [A])
delimiter
nums = [6, 10, 4, 8, 2, 12, 10]
delimiter
self.optionmenu_a.pack()
delimiter
session.add(doc)
delimiter
gplt.show()
delimiter
app = wx.App(False)
delimiter
pagination_serializer_class(instance=page, context=context)
delimiter
question = session.query(Question).first()
delimiter
members[index]
delimiter
cutoffs = np.cumsum(probs)
delimiter
linepos.append(offset)
delimiter
user = models.ForeignKey(User)
delimiter
canvas = numpy.zeros((12, 12), dtype=int)
delimiter
df.set_index(rng, inplace=True)
delimiter
pprint.pprint(w.fields)
delimiter
overlaycolour = [255, 0, 0]
delimiter
ax2 = fig.add_subplot(5, 4, 2, sharex=ax1)
delimiter
[t[:2] for t in data]
delimiter
df = pd.DataFrame(np.random.choice([1, np.nan], (1000000, 15), p=(0.01, 0.99)))
delimiter
a[(a >= -100) & (a <= 100)]
delimiter
print(res)
delimiter
lmul(ll[0], [[item] for item in ll[1]])
delimiter
np.random.seed(0)
delimiter
team = models.ForeignKey(Team)
delimiter
c = np.intersect1d(a, b)
delimiter
t = et.fromstring(df.to_html())
delimiter
CC1 = CC1a * (CC1b + CC1b.T + np.eye(n1))
delimiter
third_friday = first_friday + timedelta(days=14)
delimiter
sin = np.sin(angles)
delimiter
lines = file.read().splitlines()
delimiter
db.create_tables([Person])
delimiter
self.ui = Ui_MainWindow()
delimiter
tuple(prime_factors(100))
delimiter
createIndex(row, column)
delimiter
a(4, 5)
delimiter
value, count = c.most_common()[0]
delimiter
ax.set_xticklabels(())
delimiter
arr.tocsr()
delimiter
real_f.close()
delimiter
actions.move_by_offset(x_to, y_to)
delimiter
-setup.py
delimiter
proc = multiprocessing.Process(target=wrapper, args=(queue, bob))
delimiter
mkl_rt.mkl_set_num_threads(ctypes.byref(ctypes.c_int(48)))
delimiter
df = df.reset_index(drop=True)
delimiter
parsed = json.loads(your_json)
delimiter
True
delimiter
a = x.copy_with(y=4)
delimiter
hash1 == hash2
delimiter
a.clip(0, 10)
delimiter
print(user.username)
delimiter
sums = itertools.accumulate(seq)
delimiter
type.__new__(meta, classname, bases, newClassDict)
delimiter
tree.query_ball_point([london], r=euclidean_distance(100))
delimiter
np.putmask(array, numpy.random.rand(array.shape) < prob, np.logical_not(array))
delimiter
fig1 = plt.figure()
delimiter
os.rename(outfile.name, inpath)
delimiter
ax2 = ax1.twinx()
delimiter
l = []
delimiter
print(parse(test))
delimiter
self.draw()
delimiter
lib.a.A()
delimiter
lst.sort()
delimiter
tick.label.set_fontsize(14)
delimiter
[[1], [4, 5, 6], [10], [15, 16, 17, 18], [22], [25, 26, 27, 28]]
delimiter
data
delimiter
nt = etree.ElementTree(root)
delimiter
[f for S in s for f in [FunkyFunction(a[S])] if f > 0]
delimiter
result = []
delimiter
print(data)
delimiter
contents = output.getvalue()
delimiter
m = np.median(foo[foo > 0])
delimiter
self.mainframe = ttk.Frame(self.root, padding=(6, 6, 12, 12))
delimiter
Dy = L1[0] * L2[2] - L1[2] * L2[0]
delimiter
oFig1.add_subplot(4, 4, 11)
delimiter
print(filename)
delimiter
sums = a.sum(axis=1).A1
delimiter
print(filename)
delimiter
savek = list(k)
delimiter
{{modelform1}}
delimiter
{{modelform2}}
delimiter
my_command.py
delimiter
p.join()
delimiter
mp_handler()
delimiter
sorted_files = []
delimiter
out[1:-1]
delimiter
Map(fold=lambda f, g: f(x), bimap=lambda f, g: Left(f(x)))
delimiter
x, y, p
delimiter
set(lst1 + lst2)
delimiter
lines_counter += 1
delimiter
s = slice(2, 4)
delimiter
values = [5, 10, 15, 20]
delimiter
d1 = date(2008, 9, 26)
delimiter
string_dec = str(dec)
delimiter
f1 = lambdify(x, diff(f(x)))
delimiter
print(line)
delimiter
glClear(GL_COLOR_BUFFER_BIT)
delimiter
float(s)
delimiter
tokens = nltk.word_tokenize(raw)
delimiter
a = Counter(0, 1, 2, 1)
delimiter
ip_range = netaddr.cidr_merge(ip_range)
delimiter
f.writelines(datum + os.linesep for datum in data)
delimiter
myClass.py
delimiter
image.thumbnail((256, 256), Image.ANTIALIAS)
delimiter
response = unirest.post(url, headers=headers, params=params)
delimiter
pprint(result.data)
delimiter
static_indices = numpy.ogrid[0:a.shape[0], 0:a.shape[1], 0:a.shape[2]]
delimiter
b = a[index, index]
delimiter
sys.getsizeof(test_ordered_dict)
delimiter
print((u[i], i, u, len(u)))
delimiter
f.set_figwidth(15)
delimiter
a += 1
delimiter
vec /= np.linalg.norm(vec, axis=0)
delimiter
sys.stdout = StringIO.StringIO()
delimiter
orig_import(name, *args)
delimiter
Ainv
delimiter
strcat(greeting, name)
delimiter
traceback.print_stack(file=self.stdout)
delimiter
f_name = func.__name__
delimiter
self.fn(*args, **kwargs)
delimiter
form = ArticleForm(request.POST, instance=article)
delimiter
np.random.shuffle(indices)
delimiter
cls
delimiter
a[1:2]
delimiter
mydict[currentid].append(currentvalue)
delimiter
stefan.append(list(args))
delimiter
self.__do_layout()
delimiter
print(sys.version)
delimiter
[a]
delimiter
data = request.GET.copy()
delimiter
ax = plt.axes(projection=ccrs.Robinson())
delimiter
result = dict(pool.map(f, inputs))
delimiter
filepath = os.path.join(root, names)
delimiter
output_wave_file.close()
delimiter
[(x / sum_samples) for x in samples]
delimiter
y -= 2
delimiter
models.Field.formfield(self, StringListField, **kwargs)
delimiter
cols = cols[-1:] + cols[:-1]
delimiter
platform.release()
delimiter
t = np.arange(-0.5, 1, 1e-05)
delimiter
Y = np.array([2, 0, 1, 1])
delimiter
cval = int(c)
delimiter
value = 1
delimiter
ExampleModel.objects.filter(some_datetime_field__range=[start, new_end])
delimiter
pause(1)
delimiter
l[x] = l[x][1024:]
delimiter
file.write(data)
delimiter
zipfile = ZipFile(StringIO(url.read()))
delimiter
self.listWidgetA.currentItemChanged.connect(self.item_clicked)
delimiter
mat.close()
delimiter
U = np.random.rand(n, n)
delimiter
dict_[methodname] = lockmethodfactory(methodname, lockattr)
delimiter
loop.run()
delimiter
todayDate = datetime.date.today()
delimiter
result.x
delimiter
wb.save(output)
delimiter
shortset.add(seq[i:i + shortlen])
delimiter
print(b.base is a)
delimiter
z = np.polyfit(x, y, 1)
delimiter
A[[0]].shape
delimiter
all(map(lambda x: x == l[0], l))
delimiter
a[i] = int(a[i][::-1])
delimiter
data = globals()
delimiter
raise NotImplementedError
delimiter
a = numpy.empty((ix.sum(), h5_array.shape[1]), dtype=float)
delimiter
print(avg_positive_speed(speed))
delimiter
p = lambda x, y: x + y
delimiter
self.width = width
delimiter
string.punctuation
delimiter
plt.ylim(0, 2500)
delimiter
meth
delimiter
self.extend(db.get(key, []))
delimiter
wf.close()
delimiter
gevent.Greenlet.__init__(self)
delimiter
bpy.ops.transform.rotate(value=rot.angle, axis=rot.axis)
delimiter
fig, (ax1, ax2) = plt.subplots(1, 2, sharey=True)
delimiter
pool.close()
delimiter
B = csr_matrix((5, 2), dtype=int)
delimiter
mail.check()
delimiter
keys, values = zip(*list(my_dict.items()))
delimiter
print(ctypes.get_last_error())
delimiter
m = np.ma.masked_where(y > 5, y)
delimiter
sys.stdout = devnull
delimiter
os.mkdir(corpusdir)
delimiter
db.add(marker_type)
delimiter
p = figure()
delimiter
l = []
delimiter
cv.SetData(image0, rotated_image.tostring())
delimiter
rotmat = np.array([[0.0, 0.0, 1.0], [0.0, 1.0, 0.0], [-1.0, 0.0, 0.0]])
delimiter
self.stack.append(0)
delimiter
higher = Vertex()
delimiter
text_link.insert_after(is_my)
delimiter
i = j + 1
delimiter
gtk.main()
delimiter
grid = [0, 5, 10, 15, 20]
delimiter
result[-1].append(text)
delimiter
self.columnconfigure(2, weight=1)
delimiter
A = A.T
delimiter
mask = np.tril(np.ones((4, 4), dtype=bool))
delimiter
fig2 = plt.figure()
delimiter
diff_idx = np.flatnonzero(np.linalg.norm(b[1:] - b[:-1], axis=1) > thresh) + 1
delimiter
total = sum(el for el in list(val.values()))
delimiter
d = datetime.datetime.utcnow()
delimiter
writer.writeheader()
delimiter
bearing = math.atan2(y2 - y1, x2 - x1)
delimiter
m.move(x, y)
delimiter
br.set_handle_redirect(True)
delimiter
self.__dict__ = kwargs
delimiter
im_hsv = cv2.cvtColor(im, cv2.COLOR_BGR2HSV)
delimiter
sys.stdout = mystdout = StringIO()
delimiter
PyEval_AcquireThread(myThreadState)
delimiter
pop_conn.quit()
delimiter
new_matrix = []
delimiter
d = {}
delimiter
p = Point(1, y=2)
delimiter
form = CustomerInfoForm(request.POST)
delimiter
img = filedescriptor.read()
delimiter
dyna_join(df, [0, -2])
delimiter
print(config_file[opt_name])
delimiter
print(list(build_notes(DF)))
delimiter
list(someDict.keys()) & someSet
delimiter
self.dummy.x = value
delimiter
n % 10 + digitalSum(n // 10)
delimiter
parameter = eval(file_text)
delimiter
root = Tk()
delimiter
idx = numpy.random.choice(len(choices), 4)
delimiter
res = [test[(i + 1) * i // 2:(i + 1) * (i + 2) // 2] for i in range(bound)]
delimiter
EMAIL_USE_TLS = True
delimiter
new.append(graph[i])
delimiter
d.nonzero()
delimiter
st.norm.cdf(1.64)
delimiter
decoder.decode(s)
delimiter
dict(add=_add)
delimiter
output[lake] = lake.sum() < 6
delimiter
self.hair = hair
delimiter
data.text
delimiter
count[0] += 1
delimiter
print(b - a, len(numbers))
delimiter
self.i += 1
delimiter
df
delimiter
s = requests.session()
delimiter
some_thing_that_fails()
delimiter
print(e.findall(data))
delimiter
odict[key]
delimiter
req.setRawHeader(k, v)
delimiter
M = np.random.randint(2, size=(h, n))
delimiter
fig.autofmt_xdate()
delimiter
attachedvolumes()
delimiter
self._async_interrupt.interrupt()
delimiter
conn = engine.commit()
delimiter
p.start()
delimiter
now = datetime.utcnow()
delimiter
finalizebins(bins, binsize)
delimiter
X_subset = [X[idx] for idx in indices]
delimiter
os.kill(int(pid_str), sig)
delimiter
result = collections.defaultdict(list)
delimiter
print(i)
delimiter
df[1] = df[0].diff() > 600000000000.0
delimiter
keys = list(d.keys())
delimiter
results = pool.map(do_work, work)
delimiter
datamean = data.mean(axis=0)
delimiter
y.byteswap()
delimiter
lines.append({})
delimiter
rev_ref = dict((v, k) for k, v in ref.items())
delimiter
w.add(a)
delimiter
hashes.append(sha1OfFile(os.path.join(path, file)))
delimiter
res_lst.append(out_queue.get())
delimiter
print(result)
delimiter
generations.append(generations[-2] + generations[-1])
delimiter
b.py
delimiter
t.start()
delimiter
plt.legend()
delimiter
m = pd.Series(to_filenames.values, from_filenames.values)
delimiter
char * saveptr
delimiter
axes = plt.subplot(gs[0, 0])
delimiter
System.err.println(tmpFunction.getClass())
delimiter
reader_p = Process(target=reader, args=(queue,))
delimiter
bin(x)
delimiter
c = wmi.WMI()
delimiter
p.start()
delimiter
s = map(set, g)
delimiter
self.broken = True
delimiter
some.unrelated.development.host
delimiter
picture.putdata(colors)
delimiter
session.expunge_all()
delimiter
rle = [(k, len(list(g))) for k, g in groupby(li)]
delimiter
test()
delimiter
job.get()
delimiter
s.astype(np.datetime64).fillna(pd.NaT)
delimiter
self.size = max(self.size, self.position)
delimiter
t = datetime.date.today()
delimiter
ispower(625, 5)
delimiter
0
delimiter
print(str(err))
delimiter
fig = plt.figure(figsize=(ncol + 1, nrow + 1))
delimiter
f = StringIO()
delimiter
x, y, z
delimiter
subprocess.call(commandline)
delimiter
X_test = np.array(descs_train)
delimiter
cursor = db.cursor(cursor_class=MySQLCursorDict)
delimiter
a2.remove(e)
delimiter
A[row] = [data]
delimiter
test2()
delimiter
lib.TessBaseAPIGetUTF8Text.restype = ctypes.c_char_p
delimiter
s = sys.__stdin__.readline()
delimiter
data = Column(String(20))
delimiter
gcf().canvas.draw()
delimiter
self.happiness = self.wealth / self.data.global_wealth
delimiter
driver.execute_async_script(load_jquery_js, jquery_url)
delimiter
7, array([4, 5, 6]), array([8, 9])
delimiter
timedelta.days * 86400 + timedelta.seconds
delimiter
result = pipe.stdout.readline()
delimiter
roster = []
delimiter
x[:, (x_range), (y_range)]
delimiter
n >>= 8
delimiter
queryset = Location.objects.all()
delimiter
total_distance = numpy.hypot(*numpy.diff(numpy.array(points), axis=0)).sum()
delimiter
kclass = []
delimiter
a = A()
delimiter
root = tkinter.Tk()
delimiter
json.JSONEncoder.default(self, obj)
delimiter
a1.append(int(data[0]))
delimiter
print_tree(d)
delimiter
np.fromiter(dropwhile(lambda x: x, ar[::-1]), dtype=bool)[::-1]
delimiter
print(a, b)
delimiter
result, index = arraysums_recursive((a, b), lower=5, upper=6)
delimiter
sys.stdout = f
delimiter
ax = plt.gca()
delimiter
print(now.strftime(fmt))
delimiter
fig = plt.figure()
delimiter
r1 = np.hstack((b, w, b, w, b, w, b))
delimiter
nx.draw(G, pos, alpha=0.75)
delimiter
requests.get(url, auth=auth)
delimiter
new_dic = {}
delimiter
print(p, p.is_alive())
delimiter
b.set_clip_on(False)
delimiter
dirName = os.path.abspath(dirName)
delimiter
np.array(signal)
delimiter
self.tree_filter.refilter()
delimiter
response.append(line)
delimiter
vertices, np.hstack((bary, 1 - bary.sum(axis=1, keepdims=True)))
delimiter
values = np.random.rand(1000)
delimiter
connection = pyodbc.connect(connection_string)
delimiter
n[i] = next(iterators[i], done)
delimiter
g.draw()
delimiter
edges[i + 2, j].append((i - 2, j))
delimiter
model._meta.verbose_name
delimiter
xpp = (x.ctypes.data + np.arange(x.shape[0]) * x.strides[0]).astype(np.uintp)
delimiter
sums.append(data[groups == group].sum())
delimiter
letters.remove(chr(part[1]))
delimiter
dict(one=1, two=2)
delimiter
b[x] = 1
delimiter
ctypes.pythonapi.Py_IncRef(pyo)
delimiter
fig.delaxes(fig.axes[2])
delimiter
car2 = pygame.transform.rotate(car1, 10)
delimiter
module_a.py
delimiter
k = k + 1
delimiter
len(self.buffer) > 0
delimiter
output = process.communicate()
delimiter
outfile.write(outline)
delimiter
the_data = json.loads(json_string)
delimiter
outlist.append([])
delimiter
ssh = paramiko.SSHClient()
delimiter
print(n.predict(B))
delimiter
x()
delimiter
output = PdfFileWriter()
delimiter
array([[0.5, 2.5, 4.5], [0.5, 2.5, 4.5], [0.5, 2.5, 4.5]])
delimiter
main()
delimiter
set_state(args.state)
delimiter
print(ensure_datetime(x))
delimiter
pygame.camera.init()
delimiter
diff = datetime.now() - birthday
delimiter
app.run(debug=True)
delimiter
reps = [(y, x ** 2), (x, 2)]
delimiter
cv2.drawContours(mask, [best_cnt], 0, 0, 2)
delimiter
print(value)
delimiter
funcname = func.__name__
delimiter
found = False
delimiter
main_window.setCentralWidget(enable_window.control)
delimiter
print(line)
delimiter
values = np.hstack([np.random.normal(0, 1, 10), np.random.normal(10, 1, 100)])
delimiter
plot(row, x, y)
delimiter
glEnd()
delimiter
ax.draw_artist(col)
delimiter
fin[i[0][0]] = i[-1]
delimiter
dd = dd.replace(year=dd.year - 100)
delimiter
img = cv2.cvtColor(final_hsv, cv2.COLOR_HSV2BGR)
delimiter
Matrix(final).expand()
delimiter
ui.setupUi(Form)
delimiter
sys.stdin = progA.stdout
delimiter
main()
delimiter
self.send_response(200)
delimiter
webbrowser.open_new(url)
delimiter
data[:-(data[-1] if type(data[-1]) == int else ord(data[-1]))]
delimiter
ws.send(json.dumps(dict(received=message)))
delimiter
set(b).issubset(set(a))
delimiter
print(date_dict.get(date, []))
delimiter
df = pd.DataFrame([[y[0] for y in x] for x in outputdata], columns=Molecule)
delimiter
b, c = zip(*zipped)
delimiter
x = np.arange(xmax)
delimiter
self.should_run.clear()
delimiter
complex_process(df.ix[idate], idate)
delimiter
self.src[-1].append(item)
delimiter
np.not_equal(c[1:], c[:-1], out=flag[1:])
delimiter
myList[-1]
delimiter
d = hashlib.md5()
delimiter
current_class.append(node.tag)
delimiter
s = fh.read(40256)
delimiter
times = pd.to_datetime(df.timestamp_col)
delimiter
print(df_final)
delimiter
client2 = socket.socket()
delimiter
self.__or__(other)
delimiter
sys.exit(2)
delimiter
im.set_ylim((125, 1000))
delimiter
points = np.random.rand(15, 2)
delimiter
entropy
delimiter
img = cv2.merge((r, g, b))
delimiter
radius = vor.points.ptp().max()
delimiter
fake_csv.seek(0)
delimiter
matrices.append(np.random.random_integers(100, size=(1000, 1000)))
delimiter
y = 10 * np.random.normal(mu, sigma, 5000)
delimiter
pprint(soup.find(text=pattern).__dict__)
delimiter
print(my_globals.thing)
delimiter
help(Foo.bar)
delimiter
tables = connection.introspection.table_names()
delimiter
plt.imshow(green_img)
delimiter
qproc = Process(target=sub_proc, args=(q, fn))
delimiter
app = Flask(__name__)
delimiter
ax1.set_xticks([])
delimiter
lambda : reqd_email == cherrypy.request.login
delimiter
column_widths[i] = len(cell)
delimiter
l[-1] += s[:r]
delimiter
usage()
delimiter
date_requested = DateField()
delimiter
data = urllib.request.urlopen(str(i)).read()
delimiter
points = np.mgrid[1:6, 2:5, 8:10]
delimiter
newlist[-1].append(alist[i])
delimiter
vec < -vector()
delimiter
stdscr.refresh()
delimiter
self.counter += 1
delimiter
pl.show()
delimiter
issubclass(instance.__class__, object)
delimiter
mask = np.zeros((all_i.shape[0],) * n, dtype=np.bool)
delimiter
print(mystring.format(wash_clothes, clean_dishes))
delimiter
self.user = auth_user
delimiter
fig = plt.gcf()
delimiter
maxes = (np.diff(np.sign(np.diff(xs))) < 0).nonzero()[0] + 1
delimiter
self._body = self.read()
delimiter
yaml.add_representer(str, str_presenter)
delimiter
max(pairs, key=lambda x: x[1])[0]
delimiter
gobject.idle_add(discoverer.discover)
delimiter
path = sys.argv[1]
delimiter
results[i % 2].append(e)
delimiter
driver = webdriver.Firefox()
delimiter
content = response.read()
delimiter
float(m(256))
delimiter
dest.addPage(PDF.pages)
delimiter
TESTING = True
delimiter
dir(Foo)
delimiter
dis.dis(empty)
delimiter
rdd.mapPartitionsWithIndex(remove_header)
delimiter
vectorized_array = vectorized_sparse.toarray()
delimiter
wsgi.py
delimiter
plt.xlim(ax, bx)
delimiter
idx = [(np.ones(len(a)) * i) for i, a in enumerate(arrs)]
delimiter
le.fit([1, 2, 2, 6])
delimiter
now = datetime.datetime(2009, 5, 5)
delimiter
fig = plt.figure()
delimiter
found.append(word)
delimiter
index += match.group(1)
delimiter
present = datetime.now()
delimiter
posts.fetch()
delimiter
intersection = max(a[0], b[0]), min(a[1], b[1])
delimiter
set().union(*(x.nodes() for x in list(periodic_gs.values())))
delimiter
sys.stderr.flush()
delimiter
label.setPixmap(pixmap)
delimiter
dict_writer.writeheader()
delimiter
1.0 / 2
delimiter
p = re.compile(regex, re.U)
delimiter
generators = [read_values(file) for file in datfiles]
delimiter
nb.train(v)
delimiter
IS_SETUP = False
delimiter
img = ImageTk.PhotoImage(Image.open(path))
delimiter
fig.set_size_inches(18.5, 10.5)
delimiter
uexpr.doit()
delimiter
idx = [1, 4, 8, 10, 22]
delimiter
[(self._min_x, self._min_y), (self._max_x, self._max_y)]
delimiter
job.start()
delimiter
cv.Copy(img0, newCanvas)
delimiter
ax = fig.add_subplot(111)
delimiter
out[R, C] = A[R].multiply(B[:, (C)].T).sum(1).ravel()
delimiter
corner1 = [0, 0, 0]
delimiter
mylst = list(range(10, 20))
delimiter
list_1_sorted = [x[0] for x in sorted_together]
delimiter
logger.addFilter(dup_filter)
delimiter
r.append([d, f])
delimiter
print(tfidf.todense())
delimiter
entry.configure(show=random_char())
delimiter
shape = tf.shape(image)
delimiter
_create_unverified_https_context = ssl._create_unverified_context
delimiter
datetime.datetime(*dt_args)
delimiter
self.foo_impl(x)
delimiter
rows, cols = np.triu_indices_from(arr, k=k)
delimiter
f = float(s)
delimiter
ax = plt.axes()
delimiter
indices = [i for i, v in enumerate(a >= 4) if v]
delimiter
meta = MetaData()
delimiter
logger
delimiter
lock.acquire()
delimiter
hash(self._vals())
delimiter
print(posneg([6, 44, 1, -7, -6, 19]))
delimiter
b[2] += 7
delimiter
ax0 = plt.subplot(gs[0])
delimiter
dump(indata, 5, 6)
delimiter
min(points, key=self.compute_distance_to)
delimiter
SublimeLauncherApp().run()
delimiter
get_color(0.2)
delimiter
hash(str(self))
delimiter
self.cells[index] = new_value
delimiter
print(df)
delimiter
b0 = tf.Variable(tf.zeros([256]))
delimiter
file.seek(position)
delimiter
np.allclose(out1, reduce_after_multiply(M1, M2))
delimiter
output = StringIO.StringIO()
delimiter
df.shape
delimiter
dict(iterableOfKeyValuePairs, **dictOfKeyValuePairs)
delimiter
A = p1[1] - p2[1]
delimiter
assert not p.poll()
delimiter
root = ET.fromstring(xml, parser)
delimiter
importPath = os.path.dirname(path)
delimiter
plt.grid(True)
delimiter
file_args = compdb.getCompileCommands(source_file_path)
delimiter
print(new_list2)
delimiter
hours = sales.index.hour
delimiter
pieces = urlparse.urlparse(url)
delimiter
token_dict = keystone.auth_ref
delimiter
-libjpeg - dev
delimiter
tour = []
delimiter
xy = (np.random.random((10, 2)) - 0.5).cumsum(axis=0)
delimiter
print(get_script_dir())
delimiter
f.close()
delimiter
hashes[newhash] = newurl
delimiter
li = st.split()[::-1]
delimiter
print(result)
delimiter
ax.plot(list(range(10)))
delimiter
df2 = df.copy(deep=True)
delimiter
X = np.reshape(lena, (-1, 1))
delimiter
a = pandas.DataFrame(np.arange(25, dtype=np.float16).reshape(5, 5))
delimiter
print(result[0])
delimiter
ax = plt.subplot(111)
delimiter
f(*arg, **kw)
delimiter
self.index += 1
delimiter
f = Foo()
delimiter
self._attr_value_to_obj_set[attr_value].add(obj)
delimiter
[(f[::-1] if needs_flip[f] else f) for f in orderless_faces]
delimiter
sys.modules[mod_name] = Mock()
delimiter
self.tabs[index].append(CQWebView(self))
delimiter
subset[subset.isin(myList)].stack().duplicated().unstack()
delimiter
axis.set_ylim(y_min - 0.1, y_max + 0.1)
delimiter
cj.save(ignore_discard=True)
delimiter
pprint.pprint(my_structure)
delimiter
arginfo = inspect.getargvalues(s[1][0])
delimiter
a2.eliminate_zeros()
delimiter
email = db.Column(db.String(120), unique=True)
delimiter
ax.plot(list1, list2)
delimiter
{{answer.someattribute}}
delimiter
self.panel.hide()
delimiter
context.set_source_rgb(1, 1, 1)
delimiter
mpu = bucket.initiate_multipart_upload(key)
delimiter
gen.close()
delimiter
a[5:0:-1]
delimiter
matching_solutions.append(sol)
delimiter
user.save()
delimiter
p1.stdout.close()
delimiter
ya.set_major_locator(MaxNLocator(integer=True))
delimiter
image_content = base64.b64encode(image.read())
delimiter
mask = np.isnan(a)
delimiter
print((item.subject, item.body, item.attachments))
delimiter
ans[-1] += letter
delimiter
__contains__
delimiter
CM = CM.sum(axis=1)
delimiter
print(line)
delimiter
--tasks
delimiter
[ax4.plot(i, j) for i, j in graph_data]
delimiter
p.start()
delimiter
raise NotImplementedError()
delimiter
logging.Handler.setFormatter(self, fmt)
delimiter
cls.__items[item]
delimiter
next_up(x)
delimiter
a.getDouble(), b.getDouble()
delimiter
int_array = [int(a, 16) for a in ar]
delimiter
math.hypot(self.x, self.y)
delimiter
ai = np.argsort(a)
delimiter
print(i)
delimiter
temp = np.random.randint(1, 10, 10)
delimiter
print(nltk.sem.relextract.show_raw_rtuple(rel))
delimiter
cursor = db.cursor()
delimiter
lab = color.rgb2lab(rgb)
delimiter
response
delimiter
pipeline.set_state(gst.STATE_PAUSED)
delimiter
ind = np.lexsort((a[:, (1)], a[:, (0)]))
delimiter
(1 if text[i] == char else 0) + count(char, text, i + 1)
delimiter
paths = []
delimiter
a.data
delimiter
k = bucket.new_key(full_key_name)
delimiter
print(len(dodgy))
delimiter
sorted(a)
delimiter
ax.set_xlim(min(x) - offset, max(x) + offset)
delimiter
print(X_train_tfidf.shape)
delimiter
print(x.size)
delimiter
foo(node, p.copy())
delimiter
my_data = [list(range(5)) for i in range(5)]
delimiter
num_bin = num_bin_reversed[::-1]
delimiter
app = tornado.web.Application(Router.urls, debug=settings.DEBUG)
delimiter
np.dot(m, prior_reci) + np.dot(1 - m, 0.1 * prior_reci)
delimiter
p.terminate()
delimiter
key = bytearray([19, 0, 0, 0, 8, 0])
delimiter
b = pd.DataFrame(a)
delimiter
column_entry = gtk.Entry()
delimiter
print(data)
delimiter
self.current = next(self.__gen)
delimiter
TTY / dev / ttyS0
delimiter
container[key].update(values)
delimiter
lF.grid()
delimiter
kl.getFormula()
delimiter
print(my_random_string(6))
delimiter
ttlist = []
delimiter
tree.left = self.left
delimiter
dictfetchall(cursor)
delimiter
self.doc = ET.parse(fname)
delimiter
d.append(t)
delimiter
Main()
delimiter
data = conn.recv(1024)
delimiter
x, y, w, h = x - 2, y - 2, w + 4, h + 4
delimiter
width = db.IntegerProperty()
delimiter
output.flat[ind] = res
delimiter
dir = os.path.dirname(path)
delimiter
conn.setopt(pycurl.WRITEFUNCTION, response.write)
delimiter
end_dt = datetime.date(2005, 6, 1)
delimiter
a[0, 0]
delimiter
new_list = [(x + str(y)) for x in the_list for y in range(n)]
delimiter
oldval, oldidx = val, index
delimiter
output.addPage(pdfOne.getPage(i))
delimiter
recovered_time_shift = dt[xcorr.argmax()]
delimiter
df = pd.read_csv(StringIO(txt), skipinitialspace=True)
delimiter
Counter(x) == Counter(y)
delimiter
ex.show()
delimiter
keyValues[key].append(value)
delimiter
imc = im.crop((w - 50, h - 50, w + 50, h + 50))
delimiter
client = app.test_client()
delimiter
fig.axes.get_yaxis().set_visible(False)
delimiter
types.FunctionType(self.func.__code__, new_globals)
delimiter
copyData(data, arr)
delimiter
c.executescript(query)
delimiter
self.print_usage(sys.stderr)
delimiter
dict2 = copy.deepcopy(dict1)
delimiter
any(elem in test2 for elem in string)
delimiter
models.DateTimeField(blank=True)
delimiter
B = NP.array([0, 1, 0, 1, 0])
delimiter
sorted_points = sorted(points)
delimiter
True
delimiter
INVENV = 0
delimiter
self.response.write(g.text)
delimiter
print(itertools.permutations.__doc__)
delimiter
url = key.generate_url(expires_in=0, query_auth=False, force_http=True)
delimiter
driver = webdriver.Firefox()
delimiter
print(str(10).zfill(2))
delimiter
output[-1] += char
delimiter
fnan < 0
delimiter
True
delimiter
header[key] = [x.strip() for x in header[key]]
delimiter
client.close()
delimiter
myObject = myObject.doStuf()
delimiter
sigma = np.matrix([[4, 10, 0], [10, 25, 0], [0, 0, 100]])
delimiter
i += 1
delimiter
raise ValueError
delimiter
parser = argparse.ArgumentParser()
delimiter
Gvalue = someoperation(Gnodes)
delimiter
app = QApplication(sys.argv)
delimiter
th = np.linspace(0, 2 * np.pi, M)
delimiter
d = d[k]
delimiter
full_dir = os.path.join(home, directory)
delimiter
axis2.plot(list(range(10, 20)))
delimiter
squre_pts.push_back(R4)
delimiter
plt.plot(x, y)
delimiter
print(first(l for l in lettfreq if lettfreq[l] == 1))
delimiter
ax5 = plt.subplot(gs[-1, -2])
delimiter
reader = csv.reader(f)
delimiter
k.delete()
delimiter
is_linear(eq1, [a, d])
delimiter
i = np.random.randint(0, nrows - 1, numdense)
delimiter
axis([-1.5, 1.5, -1.5, 1.5])
delimiter
dfs = [df1, df2]
delimiter
d = {}
delimiter
print((fit_alpha, fit_loc, fit_beta))
delimiter
plt.contour(np.log(r))
delimiter
re2_matches = re.findall(re2, text)
delimiter
key = Key(bucket, filename)
delimiter
b = [(10, 40), (40, 60), (60, 90), (90, 100)]
delimiter
filename = os.path.join(dirname, basename)
delimiter
result.append(mofile)
delimiter
print(res[0])
delimiter
f.diff(x).diff(x) < 0
delimiter
x = np.linspace(0, 2 * np.pi, 100)
delimiter
show(ptr, 0)
delimiter
c = np.hstack((a, np.atleast_2d(b).T))
delimiter
fig.canvas.draw()
delimiter
self.__dict__[key]
delimiter
c.perform()
delimiter
np.lib.stride_tricks.as_strided(arr, shape=shape, strides=strides)
delimiter
0
delimiter
map(operator.itemgetter(0), L)
delimiter
self.__dict__.update(state[0])
delimiter
X.tocsc()[indices]
delimiter
Y[..., (1)] = np.clip(np.abs(X) / absmax, 0, 1)
delimiter
round_total_digits(x)
delimiter
IOLoop.add_timeout(deadline, callback)
delimiter
hist, xedges, yedges = np.histogram2d(x, y, (xedges, yedges))
delimiter
dayafter = now + timedelta(days=2)
delimiter
[([x] + p) for x in [4, 5, 6] for p in product(*seqs[1:])]
delimiter
img = ImageTk.PhotoImage(Image.open(path))
delimiter
part.speed = [random.uniform(smin, smax) for _ in range(size)]
delimiter
print(sys.getsizeof(x))
delimiter
send_from_directory(directory, filename)
delimiter
seed = np.zeros(data.shape, dtype=bool)
delimiter
help(sys)
delimiter
print(numpy.nanmean(A))
delimiter
plt.contour(X, Y, F, [0])
delimiter
r = np.sqrt(x ** 2 + y ** 2)
delimiter
fig.show()
delimiter
b = r_[a, c]
delimiter
all(i is a[0] for i in a)
delimiter
default = parser.parse_args(args[:-1], namespace=ns)
delimiter
print(map(tuple, output_sent))
delimiter
k = cv2.waitKey(0)
delimiter
self.z = z
delimiter
b = [a, a]
delimiter
X = np.linalg.solve(A, y)
delimiter
t = set([1, 2])
delimiter
self.listOfVideo
delimiter
data
delimiter
np.random.seed(0)
delimiter
fibs = [fib(i) for i in range(fib_n)]
delimiter
rec.set_clip_on(False)
delimiter
series2 = series1[::-1]
delimiter
pygame.init()
delimiter
empty_keys = [k for k, v in metadata.items() if not v]
delimiter
content = result.read()
delimiter
self._oldstdout_fno = os.dup(sys.stdout.fileno())
delimiter
fd.floatarr.argtypes = [POINTER(c_int), POINTER(POINTER(c_float))]
delimiter
utils.py
delimiter
total.finish()
delimiter
a = [1, 2]
delimiter
ind = np.column_stack(np.unravel_index(idx, lon.shape)).tolist()
delimiter
new_rows = []
delimiter
YourTask.apply_async(args=[some, args, here], eta=when)
delimiter
a = list(a)
delimiter
all_keys = set(chain(*[list(x.keys()) for x in dd]))
delimiter
v = np.arange(0, original.shape[0], 0.5).astype(int)
delimiter
tree.body[1].names[0].name
delimiter
ssh.load_system_host_keys()
delimiter
np.dot(arr, arr)
delimiter
myNewList[i] += math.copysign(0.01, n)
delimiter
d.x
delimiter
encoded_data = urllib.parse.urlencode(data)
delimiter
mw.show()
delimiter
fig.colorbar(surf, shrink=0.5, aspect=5)
delimiter
t = datetime.datetime.fromtimestamp(float(s) / 1000.0)
delimiter
runner = unittest.TextTestRunner(f)
delimiter
image = Image.open(image_file)
delimiter
color = sns.color_palette()[5]
delimiter
dt_aware = pytz.timezone(tz).localize(dt_naive)
delimiter
[tensor.name for tensor in tf.get_default_graph().as_graph_def().node]
delimiter
cscope - R
delimiter
FlakyClient.call()
delimiter
os.seteuid(os.getuid())
delimiter
tree = ET.parse(newfile)
delimiter
print(funcs[0]())
delimiter
datetime.date(2012, 11, 22), datetime.date(2012, 12, 25), datetime.date
delimiter
strcpy(cpy, str)
delimiter
modified = {k: max(v) for k, v in list(d.items())}
delimiter
results.append(line)
delimiter
int(self) > int(other)
delimiter
d = dict(zip(val_old, val_new))
delimiter
True
delimiter
reader = csv.reader(fin)
delimiter
output = pandas.DataFrame(index=outDates, columns=strData)
delimiter
self.tapDetected()
delimiter
signal.alarm(timeout)
delimiter
df
delimiter
Vector([(s + other) for s in self.data])
delimiter
nmean = autojit(mean_numba)
delimiter
name = models.CharField(max_length=255)
delimiter
handler = logging.StreamHandler()
delimiter
from_date - relativedelta(years=years)
delimiter
tmp_planes = ax1.zaxis._PLANES
delimiter
j += 1
delimiter
result = []
delimiter
array = list(range(10))
delimiter
raise
delimiter
mysql_cn.close()
delimiter
objects = PersonManager()
delimiter
self.pk
delimiter
word = word.strip()
delimiter
cv.SetData(cv_im, pil_im.tostring(), pil_im.size[0])
delimiter
print(string_numbers)
delimiter
print(sys.argv[1])
delimiter
plot(xdata, ydata)
delimiter
fp = webdriver.FirefoxProfile()
delimiter
zip(list(range(start, stop)), collection)
delimiter
finalinfo[s] = finalinfo.get(s, 0) + t
delimiter
new_dict
delimiter
np.multiply(d, d, out=g)
delimiter
a.indices(1)
delimiter
signals.pre_save.connect(update_timestamp, sender=Post)
delimiter
print(doc.to_json())
delimiter
print(x)
delimiter
x = random.random()
delimiter
xx = np.linspace(0, 1, 1000)
delimiter
os.close(self.pipe[1])
delimiter
h2o.init()
delimiter
d = p.dirname(somepath)
delimiter
table[i - 1][j - 1] = data[str(i)][str(j)]
delimiter
result += [i for i in range(len(values)) if values[i] == sv]
delimiter
res = cursor.fetchall()
delimiter
a, b, c, d = np.ogrid[:n, :n, :100, :n]
delimiter
concurrent_suite.run(testtools.StreamResult())
delimiter
ylim(10, 17.5)
delimiter
print(key, my_dict[key])
delimiter
random.seed(newseed)
delimiter
im = numpy.random.randint(0, 50, (5, 7))
delimiter
print(sub_toks)
delimiter
ui.write(e.EV_KEY, e.KEY_A, 1)
delimiter
ax.plot(xdata, ydata)
delimiter
test_greet()
delimiter
t.start()
delimiter
abspath(getsourcefile(lambda : 0))
delimiter
10.0 ** 10 ** 10
delimiter
1, 1, 8, 1
delimiter
[(16, -16), (40, -40)]
delimiter
main()
delimiter
list(closed_range(1, 10, 2))
delimiter
first_ungrouped_idx = np.where(matching)[0][0]
delimiter
[(l == value) for l in lst]
delimiter
ax.scatter(x, y, marker=symbol[sign(chg)], s=175)
delimiter
print(first_day + relativedelta(months=1))
delimiter
localrandom = random.Random(id_num)
delimiter
y = y + y
delimiter
time.sleep(0.2)
delimiter
time.sleep(50.0 / 1000.0)
delimiter
fig, axs = plt.subplots(1, 1)
delimiter
self.rop = rop
delimiter
print(data)
delimiter
module = __import__(module, fromlist=[name])
delimiter
obj.actor.scale = [0, 0, 0]
delimiter
data = np.array([6])
delimiter
other + str(self)
delimiter
outputmapping[idx] = val
delimiter
new_stack.append(old_stack.pop())
delimiter
a_thread.join()
delimiter
customer.save()
delimiter
stack.extendleft(reversed(node.children))
delimiter
a = numpy.arange(10000, dtype=numpy.double)
delimiter
self.dot.set_data([[value], [value]])
delimiter
df = DataFrame(columns=list(range(100)), index=list(range(1000)))
delimiter
next(op)
delimiter
results = []
delimiter
self.b = b
delimiter
self.update()
delimiter
self.session_store = sessions.get_store(request=self.request)
delimiter
self.systemTrayIcon.setVisible(True)
delimiter
dict = {}
delimiter
Container(result)
delimiter
scalemap[:] = scale * xmap
delimiter
x == y
delimiter
copy_of_a = a[:]
delimiter
emails.append(email.fetch())
delimiter
map(id, a)
delimiter
line = line.rstrip()
delimiter
legs = 0
delimiter
a = a[0]
delimiter
sinks = sys.argv[1:]
delimiter
no_vow(seq, index)
delimiter
axes.bar(x2, y, facecolor=getCycledColor())
delimiter
df = concat(tp, ignore_index=True)
delimiter
axes = plt.subplot(111)
delimiter
locals()
delimiter
df.update(df_small)
delimiter
dropped_copies.append(x[i] for x in copies[i])
delimiter
Log.setLevel(level)
delimiter
x = np.linspace(-1, 1, 500)
delimiter
t /= np.linalg.norm(t)
delimiter
poison(spam)
delimiter
logger = logging.getLogger(__name__)
delimiter
pool.join()
delimiter
self.value
delimiter
only_words = [token for token in my_list if token.isalpha()]
delimiter
y_test = np.random.randint(0, 10, [50])
delimiter
self.value = value
delimiter
b = a()
delimiter
data = xmltodict.parse(data)
delimiter
DEBUG = True
delimiter
object_list.filter(username=request.user)
delimiter
new_queryset = queryset.none()
delimiter
fig.canvas.draw()
delimiter
logger.py
delimiter
dpi = fig.get_dpi()
delimiter
f.__closure__[0].cell_contents
delimiter
strt_dt = datetime.date(2001, 1, 1)
delimiter
xmean = xwin.mean(axis=1)
delimiter
self.hide()
delimiter
t.stop()
delimiter
float(s)
delimiter
bval[q - 1] ^= 1 << r
delimiter
loop.close()
delimiter
np.diff(np.sort(a))
delimiter
g = io.BytesIO(f.read())
delimiter
seconds = value.total_seconds()
delimiter
self.Bind(wx.EVT_MENU, self.OnMinimize, id=minimize.GetId())
delimiter
[0, 1, 1]
delimiter
im = Image.open(img)
delimiter
print(rows[len(ray) - idx])
delimiter
self._index += 1
delimiter
self.img_label.pack(side=tk.TOP)
delimiter
np.hstack((arr.reshape(x * y, z), indices))
delimiter
client_receiver.RCVTIMEO = 1000
delimiter
print(utc.localize(test2))
delimiter
mask = np.ones(a.shape, dtype=bool)
delimiter
res = a[0] * b[0] + a[1] * b[1] + a[2] * b[2]
delimiter
self.collector = collector
delimiter
msg = xmpp.Message(self.request.POST)
delimiter
search_results = search_response.read()
delimiter
SettableDataBits = TRUE
delimiter
form = UsersForms.UserImage(request.POST, request.FILES)
delimiter
foo = my_func(your_func(their_func()))
delimiter
flattened = chain.from_iterable([x] if isinstance(x, str) else x for x in lst)
delimiter
bus = dbus.SessionBus()
delimiter
metadata.drop_all()
delimiter
filt1(signal) * line(dur, 0, 1) + filt2(signal) * line(dur, 1, 0)
delimiter
j = np.array([[0, 0, 0], [1, 1, 1]])
delimiter
display = Xlib.display.Display()
delimiter
main.show()
delimiter
print(result)
delimiter
line = line[:-1]
delimiter
print(p1.x.x)
delimiter
last_build = my_job.get_last_buildnumber()
delimiter
print(total)
delimiter
options = parser.parse_args()
delimiter
cvtColor(img, img_bw, COLOR_BGR2GRAY)
delimiter
consecutive_diffs = (y - x for x, y in pairwise(xs))
delimiter
path = os.path.join(dir, name)
delimiter
print(name)
delimiter
seen.add(item)
delimiter
a_test.method_two()
delimiter
n_interior = abs(diff(a, axis=0)).sum() + abs(diff(a, axis=1)).sum()
delimiter
UserSerializer(user).data
delimiter
arrangement = list(list(row) for row in itertools.islice(iterator, 4))
delimiter
logger.removeHandler(handler)
delimiter
df = df.applymap(format)
delimiter
self.flush()
delimiter
setattr(self, field.name, new_filename)
delimiter
TextWidget.focus_set()
delimiter
crsr = cnxn.cursor()
delimiter
print(finder.nbest(trigram_measures.likelihood_ratio, 10))
delimiter
path = os.path.join(dirpath, filename)
delimiter
store.close()
delimiter
cleared = []
delimiter
False
delimiter
basis_vecs = sorted_eigvecs[:, -num_basis_vecs:]
delimiter
digit_to_char(m)
delimiter
decorator
delimiter
self.y += 1
delimiter
keyValues[key].append(value)
delimiter
pickle.load(f)
delimiter
CM_tilde = np.mean(data, axis=1)
delimiter
zinfo = zipinfo
delimiter
itertools.chain(f(reversed(a[:i])), [a[i]], f(a[i + 1:]))
delimiter
time.sleep(SECONDS_TO_WAIT)
delimiter
new_path.append(current_neighbour)
delimiter
code.interact(banner=banner, local=namespace)
delimiter
self._a = a
delimiter
CALLS += 1
delimiter
list = []
delimiter
plt.yticks(yvalues, ylabels, figure=fig)
delimiter
app = Flask(name)
delimiter
f = urllib.request.urlopen(req)
delimiter
self._heartbeat = heartbeat
delimiter
list(iterable.keys())
delimiter
StartDance(*list(range(5, 9)))
delimiter
driver.get(url)
delimiter
literal_eval(x)
delimiter
[1, 8, 6]
delimiter
C = A.dot(B)
delimiter
dir(img)
delimiter
C.copy(ffi.from_buffer(arr_in), ffi.from_buffer(arr_out), 16)
delimiter
frequencies[character.lower()] += 1
delimiter
b = set(a)
delimiter
itertools.groupby(list(range(10)), lambda x: x < 5)
delimiter
a = [2, 7, 9]
delimiter
df_index = np.insert(np.arange(arr.shape[0]), idx + 1, idx, axis=0)
delimiter
corner2Copy = (len(arr) - 1) * numpy.array(corner2)
delimiter
serverSocket.bind((HOST, PORT))
delimiter
print(str)
delimiter
0
delimiter
BOOST_PYTHON_MODULE(s)
delimiter
p.start()
delimiter
B = [[0, 0, 1, 0], [1, 0, 1, 0], [1, 1, 0, 0], [1, 0, 0, 1], [1, 0, 0, 0]]
delimiter
loadedArchive = np.load(outFile)
delimiter
found = False
delimiter
tasks = multiprocessing.Queue(1)
delimiter
print(test(15))
delimiter
main()
delimiter
False
delimiter
oss.str()
delimiter
parser
delimiter
screen = pygame.display.set_mode((800, 600))
delimiter
x = np.zeros(2, dtype=dt)
delimiter
search(s)
delimiter
self._cache = {}
delimiter
sys.exit(app.exec_())
delimiter
b[a]
delimiter
plt.figure(figsize=(15, 5))
delimiter
{}
delimiter
deleteself.list[i]
delimiter
x, p = set(range(2, n)), 2
delimiter
x.A.count() * (x.A.count() - 1) * 2
delimiter
pqueue = []
delimiter
imframe.putpalette(palette)
delimiter
current_dir.pop()
delimiter
done.add(row[0])
delimiter
j2.sort()
delimiter
ax0 = fig.add_subplot(1, 2, 1)
delimiter
[t for t in grouper(s) if t[0] in vowels]
delimiter
config = ConfigParser.ConfigParser()
delimiter
result = PyClass()
delimiter
print(doc.reprJSON())
delimiter
wave_file.close()
delimiter
ext = os.path.splitext(path)[1]
delimiter
subprocess.Popen(args1)
delimiter
subprocess.Popen(args2)
delimiter
x[1::2]
delimiter
diff = [(a[i + 1] - a[i]) for i in range(N - 1)]
delimiter
f.close()
delimiter
t.set_axis_off()
delimiter
print(str[:6] * 2)
delimiter
a = np.transpose(a)
delimiter
{0, 1, 0, 0, 0, 0, 0},
delimiter
b1 = np.array([[5, 6], [7, 8]])
delimiter
d[date] = {}
delimiter
self.kNN = initializekNN()
delimiter
server = urllib.request.build_opener(ph)
delimiter
a * b
delimiter
m.predict([1, 1, 1])
delimiter
print(df)
delimiter
QtCore.QAbstractListModel.__init__(self, parent)
delimiter
date_joined = models.DateField()
delimiter
result.append((longest_keyword, all_occ[longest_keyword][0]))
delimiter
write(file)
delimiter
X_min = np.min(X[idx])
delimiter
assert nextafter(0, 1) - nextafter(0, 1) == 0
delimiter
sys.path = sys.path[:4]
delimiter
it = iter(it)
delimiter
a = np.arange(10)
delimiter
fig2 = plt.figure(figsize=(4, 4))
delimiter
white = np.array([255, 255, 255])
delimiter
pprint(offset_keys(dct, datetime.date(2015, 7, 12)))
delimiter
self.print1()
delimiter
cc = np.load(f)
delimiter
wr = csv.writer(your_csv_file, quoting=csv.QUOTE_ALL)
delimiter
besseli_vec = np.frompyfunc(mp.besseli, 2, 1)
delimiter
plt.hist2d(new_x, new_y, bins=(50, 50))
delimiter
decrypted = crypt_object.decrypt(decoded)
delimiter
pygame.init()
delimiter
resp
delimiter
plt.plot(x, norm_vals)
delimiter
clients += 1
delimiter
p.start()
delimiter
x, y = x + dx, y + dy
delimiter
np.random.seed(1977)
delimiter
p4 = ctypes.c_int(0)
delimiter
y_growth_flips = np.where(np.diff(np.diff(y) > 0))[0] + 1
delimiter
getattr(urlparse, method).append(scheme)
delimiter
[5, 2, 2, 1, 4, 1],
delimiter
my_user.save()
delimiter
cv2.drawContours(close, [cnt], 0, 255, -1)
delimiter
pool.join()
delimiter
f = eval(s)
delimiter
b.T
delimiter
events = (a[0] + a[-1] + sum(a[i] != a[i - 1] for i in range(1, len(a)))) / 2
delimiter
self.maps = maps
delimiter
0, 1, [t]
delimiter
menu = Menu(root, tearoff=0)
delimiter
db_field.formfield(**kwargs)
delimiter
test = [[0.0] * 10] * 10
delimiter
b[:, (a)]
delimiter
deleteposix
delimiter
print(image.shape)
delimiter
echo((foo + bar) * baz / (bar + foo))
delimiter
scipy.stats.norm(100, 12).cdf(98)
delimiter
printTree(tree, child)
delimiter
findex.fromfile(f, 1)
delimiter
args = parser.parse_args()
delimiter
len(self.datatable.columns.values)
delimiter
version[0] == 6 and version[1] == 0 and version[8] == VER_NT_WORKSTATION
delimiter
ModClass.class_method()
delimiter
f_new.close()
delimiter
button.pack()
delimiter
print(root.getprevious())
delimiter
cr.set_source_rgb(1, 1, 1)
delimiter
df1 = pd.DataFrame(data1)
delimiter
split = shlex.split(s)
delimiter
data = urlopen(info_url).read()
delimiter
out.write(buf[0])
delimiter
cyclic_equiv(a, b)
delimiter
ctx.push()
delimiter
inF.close()
delimiter
uniq = list(OrderedDict.fromkeys(lst, 0))
delimiter
False
delimiter
count += 1
delimiter
dtype.append((field, object))
delimiter
c = Counter(list(d.values()))
delimiter
numeral = numerals[numeral_index]
delimiter
b = int(sys.argv[1])
delimiter
partners = np.empty_like(X, dtype=int)
delimiter
cv.ResetImageROI(newCanvas)
delimiter
print(form.errors)
delimiter
str(s)
delimiter
wx.CallAfter(self.frame.Close)
delimiter
repr(d)
delimiter
print(network)
delimiter
driver.maximize_window()
delimiter
result
delimiter
app.main()
delimiter
_ROOT = os.path.abspath(os.path.dirname(__file__))
delimiter
print((c.x, c.y, c.z))
delimiter
t = threading.Thread(target=do_work, args=(work, results))
delimiter
(10, [2, 5]),
delimiter
print(m.group(1))
delimiter
usernametoken.insert(uname)
delimiter
self.delete(save=False)
delimiter
plt.imshow(np.random.randn(100, 100))
delimiter
df
delimiter
print(a)
delimiter
setattr(foo, generatedClass.__name__, generatedClass)
delimiter
img[data[i, 0], data[i, 1]] += 1
delimiter
a[1] = np.ma.masked
delimiter
timeit.Timer(myTImedClass.square).timeit()
delimiter
queue.put([e, traceback.format_exc(e)])
delimiter
id(a[0])
delimiter
aapl_50ma = pd.rolling_mean(aapl, 50)
delimiter
p = np.poly1d
delimiter
result[k] = result.get(k, 0) + v
delimiter
user_count = serializers.SerializerMethodField()
delimiter
self.index += 1
delimiter
f, x, y, z
delimiter
qbtn.move(50, 50)
delimiter
means = np.mean(complete_matrix, 1)
delimiter
app.debug = True
delimiter
df[cond1 | cond2]
delimiter
generations.append(generations[-2] + generations[-1] - 1)
delimiter
src = inspect.getsource(target)
delimiter
self.assertTrue(element in self.seq)
delimiter
self.transport.loseConnection()
delimiter
a = models.ForeignKey(A)
delimiter
result.append(p[:i] + [l[0]] + p[i:])
delimiter
bind_layers(PPPoE_Tag, Padding, tag_type=0)
delimiter
f.close()
delimiter
mydict.setdefault(currentid, [])
delimiter
suite.run(defaultTestResult())
delimiter
dir(nodebox)
delimiter
founds.append((inters, list_number1, list_number2))
delimiter
cell.value = 2
delimiter
assert a == b
delimiter
self.renderer0 = gtk.CellRendererText()
delimiter
asyncio.wait(self._set)
delimiter
app.wsgi_app = LoggingMiddleware(app.wsgi_app)
delimiter
fd, path = tempfile.mkstemp()
delimiter
current += 1
delimiter
self.tearDown()
delimiter
L2 = [u, v, w], [x, y, z]
delimiter
main()
delimiter
event.fire(*args, **kargs)
delimiter
self._q.put(self.o)
delimiter
name = Column(String, primary_key=True)
delimiter
df = df[df.apply(lambda x: x.A in x.B, axis=1)]
delimiter
array2 = np.broadcast_to(array1, (20, 20, 2, 4))
delimiter
min(lis2, key=func)
delimiter
sys.stdin.read(1)
delimiter
rlcn = RLCN()
delimiter
hb1 = plt.hexbin(x1, y1, norm=norm)
delimiter
sp.solve(lst)[0][x]
delimiter
self.label = QLabel(self)
delimiter
dis.dis(lambda : True == True != False)
delimiter
find_common = lambda a, b: a.intersection(b)
delimiter
elapsed = time.time() - now
delimiter
p.join()
delimiter
f2.close()
delimiter
cls._bar = value
delimiter
nhb if random.random() < p else x
delimiter
y = ax.get_ylim()
delimiter
self.index += 1
delimiter
z.close()
delimiter
meta.reflect(bind=someengine)
delimiter
5 - +-+-+2
delimiter
module = import_module(module_name)
delimiter
a * 2.0
delimiter
X = np.ma.masked_equal(X, 0)
delimiter
1 << 100
delimiter
address = models.ForeignKey(Address, blank=True, null=True)
delimiter
print(author.first(), author.last())
delimiter
which = numpy.array(list(itertools.combinations(list(range(10)), 2)))
delimiter
uri, tag
delimiter
[[(x + y) for x, y in zip(*row)] for row in zip(outgoing, incoming)]
delimiter
y = y.reshape(-1, x.shape[0])
delimiter
array = [random.uniform(1.5, 12.4), random.uniform(0, 5)]
delimiter
foo(A(), A())
delimiter
p = Process(target=MP_Stuff, args=(self, id))
delimiter
p.map(worker, nums)
delimiter
ilabel.grid(row=1, column=1)
delimiter
print(mondays[-1])
delimiter
items = list(some(**m) for m in dl)
delimiter
f = staticmethod(f)
delimiter
self._conn = self._pool.get()
delimiter
line = file_obj.readline()
delimiter
out, err = process.communicate()
delimiter
fp = webdriver.FirefoxProfile()
delimiter
do_whatever_else()
delimiter
connection.commit()
delimiter
car2 = pygame.transform.rotate(car1, 20)
delimiter
dudette = form.save()
delimiter
foo * a + str(bar)
delimiter
file.close()
delimiter
__builtin__.object = orig_object
delimiter
fig.colorbar(qmesh, ax=ax)
delimiter
img.seek(0)
delimiter
L[i] = L[idel]
delimiter
proc.join()
delimiter
z = np.outer(np.ones(np.size(lons)), np.sin(lats)).T
delimiter
lines = np.empty((len(x_range) + len(y_range), 2, 100))
delimiter
response = self.client.get(some_url)
delimiter
tree = []
delimiter
deleteself.z[-1]
delimiter
print(platform.python_version())
delimiter
print(r.text)
delimiter
setCustomWidth(2)
delimiter
result = []
delimiter
x + y + z
delimiter
traceback.print_exc()
delimiter
el = fromstring(some_string)
delimiter
[1.000051]
delimiter
x.split()
delimiter
print((key, list(grp)))
delimiter
stdout, stderr = p.communicate()
delimiter
c = np.concatenate((a, b))
delimiter
driver = webdriver.Chrome()
delimiter
doc = ET.parse(xmlfile).getroot()
delimiter
pprint.pprint(zip(chain.from_iterable(expressions), results))
delimiter
f(*args, **kwargs)
delimiter
{}
delimiter
p.map(e.op2, arg_list)
delimiter
new_t = [names[item] for item in t]
delimiter
my_list[7:10], my_list[2:4] = my_list[2:4], my_list[7:10]
delimiter
new_lst = [sorted(sublist) for sublist in lst]
delimiter
im = imclearborder(im)
delimiter
dc = wx.WindowDC(window)
delimiter
b.shape
delimiter
xlim = ax.get_xlim()
delimiter
cap1 = cv2.VideoCapture(1)
delimiter
print(utc_date)
delimiter
np.trapz([-1, 0, 1])
delimiter
item
delimiter
spreadsheets_client.ProgrammaticLogin()
delimiter
self._inner[index]
delimiter
captcha = CaptchaStore.objects.all()[0]
delimiter
self.update(*args, **kwargs)
delimiter
loop = asyncio.get_event_loop()
delimiter
moneyx = float(l)
delimiter
df_list = [pd.read_table(file) for file in filelist]
delimiter
main()
delimiter
echoer.transport.write(data)
delimiter
i += 1
delimiter
end_ts = time.time()
delimiter
composed
delimiter
(vmax - vmin) * np.random.rand(n) + vmin
delimiter
print(arr.columns)
delimiter
df
delimiter
listtwo = [4, 5, 6]
delimiter
session = requests.session()
delimiter
my_urls + urls
delimiter
M = np.random.rand(N * 10 * 10).reshape(N, 10, 10)
delimiter
res = np.zeros(reslen, dtype=a.dtype)
delimiter
obj = mlab.imshow(img)
delimiter
nonzeroind = np.nonzero(a)[0]
delimiter
self.panel.SetScrollbars(1, 1, 1, 1)
delimiter
ii = np.where(a[:, (0)] == b.reshape(-1, 1))[1]
delimiter
print(sorted(product(xs) for xs in itertools.product(*values)))
delimiter
a.helloThere()
delimiter
biglist[:] = unique(biglist)
delimiter
A = 1e-07
delimiter
rows.append(row)
delimiter
rows = cursor.fetchall()
delimiter
n = int(line)
delimiter
self.renderer(name, str_value, final_attrs, choices)
delimiter
np.set_printoptions(2, threshold=100, edgeitems=5, suppress=True)
delimiter
1 - 1 - 1
delimiter
[6, 6, 6, 6, 6]
delimiter
a[:] = b
delimiter
temp = [key, value]
delimiter
leg = ax.legend()
delimiter
horizontal = [img[int(h / 2), i] for i in range(w)]
delimiter
self.assertEqual(2 + 2, 4)
delimiter
L[:][1]
delimiter
print(result)
delimiter
output.write(chunk)
delimiter
exit(0)
delimiter
width = 2 * np.pi / N
delimiter
s.hist()
delimiter
print(map(applyEpsilon, inputList))
delimiter
print(lh.tostring(doc))
delimiter
print(item)
delimiter
a * np.exp(-c * (x - b)) + d
delimiter
fullDict.setdefault(row[0], []).append(row[1])
delimiter
h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)
delimiter
Console.ReadLine()
delimiter
X[mask1.nonzero()[0], mask2.nonzero()[0]]
delimiter
sidx = a.argsort()
delimiter
counts = np.diff(a.indptr)
delimiter
request.user = User.objects.get(id=1)
delimiter
set1 = set(array1)
delimiter
death_year = death_data.get(1).value
delimiter
end = time.time()
delimiter
chunks = [bin_string[i:i + 6] for i in range(0, len(bin_string), 6)]
delimiter
p.suspend()
delimiter
height = len(data)
delimiter
the_time = the_time.replace(second=0, microsecond=0)
delimiter
runrec(new_src, level + 1)
delimiter
inds = np.arange(A.shape[0])
delimiter
r.div(r.sum(1), 0).plot.bar()
delimiter
repr((self.name, self.grade, self.age))
delimiter
x, y
delimiter
fig = plt.figure()
delimiter
n += 1
delimiter
min(PlayerList, key=lambda p: min(p[1:]))
delimiter
sum((xa - xb) ** 2 for xa, xb in zip(a, b))
delimiter
x = np.random.random(10)
delimiter
df
delimiter
r = b * sympy.sin(c)
delimiter
mro = inspect.getmro(self.__class__)
delimiter
whereclauses = []
delimiter
next(f)
delimiter
plt.pcolormesh(gridx, gridy, grid)
delimiter
df2 = pd.read_table(io.BytesIO(content2))
delimiter
b.String()
delimiter
self.render()
delimiter
print(type(fh.read(100)))
delimiter
x = [1, 7]
delimiter
store.append(tabular_key, store.get(key), data_columns=True)
delimiter
buf = f1.read(1024)
delimiter
run_start = time.time()
delimiter
data_pipeline.close()
delimiter
closing(inner())
delimiter
list(join_unescaped(list_1))
delimiter
listStore = gtk.ListStore(int)
delimiter
self.data
delimiter
i += 1
delimiter
a = [1, 1, 2, 1, 1, 4, 5, 6]
delimiter
t1 = threading.Thread(target=thread1, args=(1, t1_stop))
delimiter
x = linspace(0, 2 * pi, 20)
delimiter
total = next(it)
delimiter
app.update_template_context(context)
delimiter
self.setResizeColumn(0)
delimiter
soup = Soup(htmlFile)
delimiter
signal.alarm(0)
delimiter
self.n = 1
delimiter
val = f.f_back.f_locals[x]
delimiter
x[2], x[1] = x[1], x[2]
delimiter
matplotlib.hatch.Shapes.__init__(self, hatch, density)
delimiter
not sum([(not i in data) for i in data2])
delimiter
df
delimiter
d = calendar.monthrange(dt.year, dt.month + 1)[1]
delimiter
self.flush()
delimiter
forks.append(Fork(names, goal, success))
delimiter
value
delimiter
xs.sort()
delimiter
r = np.random.randint(rows, size=100)
delimiter
a, b = 0, 1
delimiter
example()
delimiter
loop.run_until_complete(user_func())
delimiter
print(list(m))
delimiter
sh.write(n, 0, v_desc)
delimiter
kalman = cv2.KalmanFilter(4, 2)
delimiter
W = W.reshape(8, 10)
delimiter
Area2(a, b, c) == 0
delimiter
raise NotImplementedError()
delimiter
height, width = image.shape[0:2]
delimiter
list(bcdDigits(characters))
delimiter
x -= 0.5 * (bins[1] - bins[0])
delimiter
[self.cousinitt(x) for x in self.gomez * n]
delimiter
df.b.loc[s & (s != s.shift(-1))].tolist()
delimiter
my_button1.bind(on_press=self.changer)
delimiter
func
delimiter
resultlist.append(M)
delimiter
sklearn.feature_selection.f_regression(X, Y, center=False)
delimiter
result = {}
delimiter
items = [conv(val) for conv, val in zip(converters, vals)]
delimiter
deletex
delimiter
splitList.pop(0)
delimiter
rgb_values.pop(i)
delimiter
rc1f = np.ravel_multi_index(rc1, A.shape)
delimiter
print(infer_spaces(s))
delimiter
signal.signal(signal.SIGALRM, alarmHandler)
delimiter
gevent.spawn(read_stream, p1.stdout)
delimiter
decay_rate = 5e-06
delimiter
exec(code, m.__dict__)
delimiter
soup.original_1.body.append(b)
delimiter
self.canvas.repaint()
delimiter
myOjbect.doStuf().doMoreStuf(arg1, arg2).goRed().goBlue().die()
delimiter
indices = list(range(N))
delimiter
b = [4, 5, 6]
delimiter
session = sessionmaker(bind=engine)()
delimiter
print(network)
delimiter
self.a()
delimiter
item = item.lower()
delimiter
df
delimiter
app = QApplication(sys.argv)
delimiter
seps
delimiter
self.connections.append(self)
delimiter
sentences.append(sentence)
delimiter
print((val, ty.currentLevel()))
delimiter
quantiles = numpy.array(quantiles)
delimiter
record._cache.update(record._convert_to_cache(values, update=True))
delimiter
k = i * len(b) + j
delimiter
a[x] = a[x][1]
delimiter
eday1.insert(10, 10)
delimiter
arg in arg2value
delimiter
xsgn = np.sign(x)
delimiter
panel.SetSizer(sizer)
delimiter
M = np.random.randint(2, size=(h, n))
delimiter
index = clang.cindex.Index.create()
delimiter
x.extend(item)
delimiter
previous = [0] * len(criteria)
delimiter
foo(parent2)
delimiter
layout = QHBoxLayout(self)
delimiter
Tools | SublimeREPL | Language
delimiter
wd = webdriver.Remote(server_url, dc)
delimiter
iseq = iter(seq)
delimiter
lines = ax.plot(list(range(10)), pylab.randn(10), list(range(10)), pylab.randn(10))
delimiter
root_logger.setLevel(logging.INFO)
delimiter
len(frozenset(objs)) == len(objs)
delimiter
grp = (isone != idx.to_series().diff().eq(1)).cumsum()
delimiter
outdata = numpy.empty((5, 6))
delimiter
files.finalize(zip_file)
delimiter
count_helper(len(text) - 1)
delimiter
df.index = df.index + pd.DateOffset(days=15)
delimiter
assert a.average() == 5.5
delimiter
username = Martin.Thoma
delimiter
np.array(y)
delimiter
db_list = insp.get_schema_names()
delimiter
b = datetime.datetime(2015, 10, 29)
delimiter
self.fig = pylab.figure()
delimiter
l = list(map(itemgetter(0), g))
delimiter
page = page[n:]
delimiter
test2 = test1.astype(int)
delimiter
endif
delimiter
outfile.write(line)
delimiter
new_instance.put()
delimiter
total += 1
delimiter
X = np.arange(-2, 2, dx)
delimiter
splitext(path)
delimiter
data = fin.read(end_index - start_index)
delimiter
df.dtypes
delimiter
thing.getSecret()
delimiter
s.get_matching_blocks()[:-1]
delimiter
logger.addHandler(handler)
delimiter
sum += x
delimiter
write_lamb(sys.argv[1])
delimiter
print(x)
delimiter
foo().baz()
delimiter
response = requests.post(url, params=data, headers=headers)
delimiter
tuple(l)
delimiter
y[0]
delimiter
print(df)
delimiter
uniques[col] = uniques[col].union(chunk[col].unique())
delimiter
text = first_td.renderContents()
delimiter
q, r = divmod(q, l)
delimiter
listSum(ls[1:], result + ls[0])
delimiter
print(ignore_upper(a, skip_rows=1, skip_cols=2))
delimiter
item.setEditable(False)
delimiter
get_key(d, 10)
delimiter
df
delimiter
console.setFormatter(formatter)
delimiter
NULL
delimiter
created_at = models.DateTimeField(default=timezone.now)
delimiter
any(map(my_dict.__contains__, my_list))
delimiter
frame = sys._getframe()
delimiter
a[get_x()]
delimiter
df
delimiter
y = np.array([1.5e-10, 1.5, 1500])
delimiter
mask = np.random.random_integers(0, 1, N * M).reshape((M, N))
delimiter
itit = iter(thedict.items())
delimiter
carray[:5]
delimiter
arr[:] = lst[:]
delimiter
f.__setitem__(Ellipsis, 100)
delimiter
s.bind((HOST, 0))
delimiter
stsets = sorted(stset_string, key=len, reverse=True)
delimiter
myLib.RegisterNofityCallback(45454, 0, self.getCallbackFunc())
delimiter
print(list(find(l)))
delimiter
print(item)
delimiter
setattr(instance, self.name, min(self._max, max(value, self._min)))
delimiter
when = models.DateTimeField(null=False, auto_now_add=True)
delimiter
transf1d(f, x, y, out)
delimiter
System.out.println(value.scriptResult)
delimiter
QMainWindow(parent)
delimiter
x.__reduce__()[1]
delimiter
Counter(str1)
delimiter
log_file.write(line)
delimiter
a = A(b)
delimiter
endif
delimiter
signal.alarm(5)
delimiter
parser.delete_first_token()
delimiter
module
delimiter
s.get(url)
delimiter
frame = inspect.currentframe()
delimiter
time2 = datetime.datetime.now()
delimiter
plt.errorbar(x, y, yerr)
delimiter
httplib.HTTPConnection.debuglevel = 1
delimiter
L = [15, 16, 57, 59, 14]
delimiter
ts = time.mktime(time.gmtime())
delimiter
ax.imshow(data)
delimiter
list1b = list[5:]
delimiter
driver = webdriver.PhantomJS()
delimiter
fig.savefig(fname, dpi)
delimiter
Z1 = np.abs(np.sin(2 * X ** 2 + Y))
delimiter
bins.append([min])
delimiter
newImage.save(new_image_path)
delimiter
fig.set_dpi(dpi)
delimiter
-1
delimiter
self.planet = Planet.EARTH
delimiter
urllib.request.HTTPSHandler.__init__(self)
delimiter
l = len(s)
delimiter
wi.food(2.5)
delimiter
len(empty)
delimiter
output, error = someprogram.communicate()
delimiter
connection.close()
delimiter
df = xl.parse(xl.sheet_names[0])
delimiter
node.start()
delimiter
authors = stage2.findall(preliminary)
delimiter
app.register_blueprint(main)
delimiter
ol.add(1)
delimiter
isinstance(result, (collections.Sequence, collections.Iterator))
delimiter
groups.setdefault(key(sub), []).append(sub)
delimiter
points = np.vstack([x, y]).T.reshape(-1, 1, 2)
delimiter
xs, ys = zip(*sorted(zip(xs, ys)))
delimiter
visited.add(path)
delimiter
collections.Counter(df[0])
delimiter
print(i[0], list(i[1]))
delimiter
self.skipTest(MyTestCase)
delimiter
1, 1, 0
delimiter
count += 1
delimiter
self.ui.setupUi(self)
delimiter
1, 8, 8, 1
delimiter
M = sparse.lil_matrix((10, 10))
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
a.__class__
delimiter
clientSocket.send(endmsg.encode())
delimiter
os.remove(tmp_filename)
delimiter
max_index = index
delimiter
plt.imshow(image)
delimiter
root.withdraw()
delimiter
a * b
delimiter
set(a)
delimiter
self.username
delimiter
print(result)
delimiter
df.index.slice_indexer(start_remove, end_remove)
delimiter
print(content)
delimiter
p.apply_async(e.op1, arg_list)
delimiter
mapper.SetScalarVisibility(1)
delimiter
soup = BeautifulSoup(doc)
delimiter
type(g._productions[-1])
delimiter
stream.getvalue()
delimiter
self.send_response(200)
delimiter
groups.setdefault(len(e), []).append(e)
delimiter
df[~df.stack().between(0.1, 1).unstack()]
delimiter
assert is_palindrome(s)
delimiter
np.abs(a[2] - a).max(axis=1)
delimiter
K = abs(A - C) < abs(B - C)
delimiter
print(stderr)
delimiter
BaseHandler.__init__(self)
delimiter
fn()
delimiter
new_list = []
delimiter
arr.fill(np.nan)
delimiter
plt.figure()
delimiter
t = np.arange(0, 40000, 4000)
delimiter
print(model_tunning.best_params_)
delimiter
main()
delimiter
print(find_subimage(screenshot, subimg_path))
delimiter
c = C()
delimiter
img[:, :, (1)] = 50
delimiter
print(id(text))
delimiter
f = open(path)
delimiter
img_data_ndarray = cv2.imdecode(file_bytes, cv2.CV_LOAD_IMAGE_UNCHANGED)
delimiter
ax1 = fig.add_subplot(111)
delimiter
is_file_like = not isinstance(fp, str)
delimiter
minutes_id = models.IntegerField(blank=True, null=True)
delimiter
d = d.month + 1
delimiter
arr[slices]
delimiter
self.value = value
delimiter
_wrapper
delimiter
connection.start()
delimiter
s.listen(10)
delimiter
_authentication_required
delimiter
logger = sc._jvm.org.apache.log4j
delimiter
dingo
delimiter
f
delimiter
xstring = infile.readlines()
delimiter
selected_item = self.main_window.widget_layers.selectedItems()[0]
delimiter
model.load_weights(weights_path)
delimiter
n - 1
delimiter
settings.py
delimiter
filename = os.path.splitext(os.path.basename(sys.argv[0]))[0]
delimiter
block = f.read(bufsize)
delimiter
copytree(srcname, dstname, symlinks, ignore)
delimiter
fig.colorbar(surf)
delimiter
print(C())
delimiter
f.close()
delimiter
os.linesep
delimiter
a = np.arange(1000)
delimiter
cls.open_files()
delimiter
pdb.set_trace
delimiter
type(z)
delimiter
fp.close()
delimiter
print(pool.map(f, list(range(10))))
delimiter
print(word)
delimiter
p[0] > p[1] > p[2]
delimiter
result
delimiter
idx = np.where(a[i] > 0)
delimiter
data = source.get_data()
delimiter
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
type(name, bases, new_dict)
delimiter
any(x % 2 == 0 for x in mylist)
delimiter
rec_dd = lambda : defaultdict(rec_dd)
delimiter
img = PIL.Image.open(file_like)
delimiter
foo.__code__.co_consts[1].co_consts
delimiter
print(item)
delimiter
CD, BF, BE, BC, BD
delimiter
2, 2, 2, 0.1
delimiter
grpA = np.empty(mask.shape)
delimiter
query = query.filter(table_a.id == table_b.id)
delimiter
print(itertools.__doc__)
delimiter
myFunc(2)
delimiter
related_classes = [prop.mapper.class_ for prop in relation_properties]
delimiter
data2[(0, -1), :] = np.nan
delimiter
result = match.group(1)
delimiter
p = Process(target=editDict, args=(mlist[i], mlist, i))
delimiter
name in dir(__builtins__) + kwlist
delimiter
children = {}
delimiter
data = df.loc[(mask), :]
delimiter
self.a = a
delimiter
im = ImageGrab.grab()
delimiter
type(k)
delimiter
x[-1:4, -1:4]
delimiter
np.allclose(a[:, :, :, (0)], collapse_dims(a)[:, :, 0:2])
delimiter
current_dt = datetime.datetime.now()
delimiter
sorted_a = a[np.argsort(a[:, (1)])]
delimiter
self.axes.draw_artist(self)
delimiter
image = Image.open(source_path)
delimiter
table = [[(0) for x in range(count)] for x in range(count)]
delimiter
sieve = [1, 1] + [0] * (R - 1)
delimiter
first_list = []
delimiter
pdb._runscript(mainpyfile)
delimiter
main()
delimiter
valid_utf8 = False
delimiter
np.bitwise_or.reduceat(m, ind.ravel())[::2]
delimiter
a[1:4]
delimiter
firstName = db.StringProperty()
delimiter
b
delimiter
next(lines)
delimiter
point[0] + k * vec[0], point[1] + k * vec[1]
delimiter
print(time.clock() - start)
delimiter
timer_thread = Thread(target=start_timer)
delimiter
response = urllib.request.urlopen(urllib.request.Request(self.pubmed_url))
delimiter
fW.write(y)
delimiter
self.verbosity
delimiter
self.log.removeHandler(handler)
delimiter
regressions = np.polyfit(X, A2, degree)
delimiter
[X, Y] = meshgrid(x, y)
delimiter
myseries_two.loc[0:2]
delimiter
form = form_class(data)
delimiter
--start
delimiter
list = []
delimiter
file_content = f.read(1)
delimiter
sys.exit(app.exec_())
delimiter
exit(0)
delimiter
DOT11_CIPHER_ALGO_CCMP = 4
delimiter
c[0].set_color(time_color)
delimiter
result = cv2.warpPerspective(img2, Ht.dot(H), (xmax - xmin, ymax - ymin))
delimiter
zsum, areasum
delimiter
W_o = tf.Variable(tf.random_normal([num_units, input_size], stddev=0.01))
delimiter
time_tuple = dt.timetuple()
delimiter
res = [dict(zip(res1, t)) for t in zip(*list(res1.values()))]
delimiter
data = line.split()
delimiter
self.assertGreaterThan(len(foo.config.mock_calls), 0)
delimiter
s = list(iterable)
delimiter
vmax = max(map(lambda x: max(abs(x)), data))
delimiter
field = QtGui.QLabel(text, self)
delimiter
response.url
delimiter
pool.join()
delimiter
dict(zip(spec.args[-len(spec.defaults):], spec.defaults))
delimiter
s[pd.isnull(s)] = n
delimiter
nmask = sparse.csr_matrix(~mask.A)
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
time.sleep(0.25)
delimiter
delta = numpy.eye(5)
delimiter
self.c.set(SERV_SECTION, SERV_DESC, SERV_DESC_DEFAULT)
delimiter
dir(string)
delimiter
gd_client = gdata.photos.service.PhotosService()
delimiter
b.ques_type
delimiter
jar = Cookie.SimpleCookie()
delimiter
results = mysql_cursor.fetchone()
delimiter
ax1 = fig.add_axes([0.05, 0.8, 0.9, 0.15])
delimiter
compose(compose(f, f), f)
delimiter
a, b = tee(iterable)
delimiter
plt.hold = True
delimiter
ax = plt.axes()
delimiter
preview = Preview()
delimiter
t2 = datetime.now()
delimiter
ax = fig.add_subplot(n_rows, n_cols, n + 1)
delimiter
name = self.aliases.get(name, name)
delimiter
print(df)
delimiter
s = requests.Session()
delimiter
item.save()
delimiter
inspect.getargspec(foo)
delimiter
response
delimiter
sys.exit(segmentation.exec_())
delimiter
df = df.join(s)
delimiter
p.pop()
delimiter
locals().update(f())
delimiter
pylab.show()
delimiter
dtoff = datetime.timedelta(days=1)
delimiter
print(root_tree)
delimiter
f = lambdify(t, a)
delimiter
gmaps = GoogleMaps(API_KEY)
delimiter
login(self.request, new_user)
delimiter
x = 1.2876
delimiter
print(sline[-1])
delimiter
self.left = []
delimiter
kernel /= kernel.sum()
delimiter
list_result
delimiter
form = FooForm
delimiter
self.response.out.write(template.render(path, template_values))
delimiter
y = np.arange(100).reshape(10, 10)
delimiter
p = Pool()
delimiter
output_lambda = df.apply(lambda x: [x.value_counts().to_dict()])
delimiter
sqrt(v1[0] ** 2 + v1[1] ** 2 + v1[2] ** 2)
delimiter
list(d.items())
delimiter
django.db.transaction.managed(True)
delimiter
plt.figure()
delimiter
NULL
delimiter
ax.yaxis.get_major_locator().base(2)
delimiter
print(lst[0])
delimiter
ceiling_key(d, 6)
delimiter
po.apply_async(mine_page, (filepath,), callback=save_data)
delimiter
ranks1 = dict(map(reversed, enumerate(sorted(dict1, key=dict1.get))))
delimiter
s = np.argsort(ab)
delimiter
form.instance.author = self.request.user
delimiter
top = np.argpartition(myBigArray, num, axis=1)[:, :num]
delimiter
_get_elements_by_tagName_helper(node, name, rc)
delimiter
by_val = [(v, list(ks)) for v, ks in itertools.groupby(keys, shaders_dict.get)]
delimiter
index = self.get_index()
delimiter
overlay_pic.close()
delimiter
PyErr_Print()
delimiter
transitions = transitions + array[0] + array[-1]
delimiter
tk.LabelFrame.__init__(self, root, **options)
delimiter
pprint_on()
delimiter
matches = {}
delimiter
imgx, imgy = REGION.max.x + 1, REGION.max.y + 1
delimiter
getattr(obj, attribute)
delimiter
atexit.register(cleanup)
delimiter
__init__.py < ---empty
delimiter
location_out = list(splot(location_in))
delimiter
arr = random.random(N)
delimiter
product(L[1:], tmp + [i])
delimiter
print(random.choice(verb_list))
delimiter
x = np.arange(1, 15.1, 0.1)
delimiter
newclass = getattr(amodule, classname)
delimiter
setattr(self, member[0], withx(member[1]))
delimiter
a = np.argsort(dist, axis=1)
delimiter
ex.show()
delimiter
l._legmarker.set_xdata(l._legmarker.get_xdata()[1:2])
delimiter
not sys.stdin.isatty
delimiter
fff(index)
delimiter
timezone.utcoffset(dt)
delimiter
description = models.TextField()
delimiter
show()
delimiter
id = Column(INTEGER, primary_key=True)
delimiter
tmp.seek(0)
delimiter
args = parser.parse_args(args, namespace)
delimiter
path = os.path.join(root, fname)
delimiter
current_base = len(rest_digits)
delimiter
id_s = {c: i for i, c in enumerate(set(list))}
delimiter
graph.add_edge(node_number, random.choice(graph.nodes()))
delimiter
np.log2(x)
delimiter
dow = my_date.weekday()
delimiter
{{your_python_data | as_json}}
delimiter
x + y
delimiter
self.timer.start()
delimiter
library.func.argtypes = [c_void_p]
delimiter
file_like_io.seek(0)
delimiter
plt.ion()
delimiter
A = np.random.random_sample(10000.0)
delimiter
screen.nodelay(False)
delimiter
ctx.move_to(-x_bearing, -y_bearing)
delimiter
cax = fig.add_axes([0.12, 0.1, 0.78, 0.8])
delimiter
type(myObj)()
delimiter
colmax += i
delimiter
file.close()
delimiter
result = rec(a)
delimiter
stream.close()
delimiter
CHECK_RE.match(mystring)
delimiter
result = np.vectorize(operator.le)(lhs, rhs)
delimiter
accounts = [Account(x) for x in user_list]
delimiter
slice(0, 0, 1)
delimiter
zip(*([chain(iterable, repeat(padvalue, n - 1))] * n))
delimiter
X, Y = np.meshgrid(x, y)
delimiter
str(self.contract)
delimiter
task = AsyncResult(task_id)
delimiter
pdb.gimp_image_delete(image)
delimiter
df.a = df.a.astype(float)
delimiter
draw.text((10, 25), txt, font=font)
delimiter
matches = list(filter(fulfills_some_condition, lst))
delimiter
False, False, False, False, False, False, False, False, False
delimiter
self._store_aggregation_timer.cancel()
delimiter
self.append(self._fx())
delimiter
x = plot(t, x)
delimiter
lock = threading.Lock()
delimiter
svc.fit(X_train, y_train)
delimiter
z_indices = indices[2]
delimiter
simulation_params = simulations.get()
delimiter
newdata = json.loads(myData.text())
delimiter
start = time.time()
delimiter
print(line)
delimiter
self.SetBackgroundColour(wx.Colour(0, 0, 0))
delimiter
city = models.CharField(max_length=75)
delimiter
buff = StringIO.StringIO()
delimiter
new_list1 = [v[0] for v in decorated]
delimiter
print(i)
delimiter
name_value_dict = dict(itertools.zip_longest(names, values))
delimiter
print(urllib.parse.urlencode(params, True))
delimiter
df = df.set_index(index_name)
delimiter
tableWidget = QtGui.QTableWidget(10, 2, self)
delimiter
print(df)
delimiter
find(query)
delimiter
app.setQuitOnLastWindowClosed(False)
delimiter
oldstdout_fno = os.dup(sys.stdout.fileno())
delimiter
c.setopt(c.HEADER, 1)
delimiter
x = int(input())
delimiter
c = Counter([letter for letter in message if letter.isalpha()])
delimiter
cursor = dbapi_conn.cursor()
delimiter
self.clients.remove(client)
delimiter
cv2.circle(out, (int(x2) + cols1, int(y2)), 4, (255, 0, 0), 1)
delimiter
chrome = webdriver.Chrome(chrome_options=chrome_options)
delimiter
sorted_files_with_size = sorted(files_and_sizes, key=operator.itemgetter(1))
delimiter
f.writelines(res)
delimiter
shortcut.save()
delimiter
old_stdout = sys.stdout
delimiter
pairwise = np.empty((n, n), dtype=np.float)
delimiter
link = f.read()
delimiter
logging.debug(pprint.pformat(ds))
delimiter
self.size += 1
delimiter
num *= 1
delimiter
deque.extend(words[:n - 1])
delimiter
self.newText.tokens.clear()
delimiter
dll_excludes = w9xpopen.exe
delimiter
q.put((key, count))
delimiter
fp.close()
delimiter
formset = WorkoutInlineFormSet(instance=workout)
delimiter
plt.semilogy(x)
delimiter
im2 = cv2.cvtColor(im, cv2.COLOR_BGR2RGB)
delimiter
s = socket(AF_INET, SOCK_DGRAM)
delimiter
set(c) < set(b)
delimiter
print(adam)
delimiter
self.driver = WebDriver(firefox_profile=profile)
delimiter
x.run()
delimiter
count = 1
delimiter
proc = pool.apply_async(processfile, args=[filename, cursor, end])
delimiter
rng2 = reikna_norm_rng(1, 100, 10000, 0, 1)
delimiter
print(key)
delimiter
v = [random.gauss(0, 1) for i in range(0, n)]
delimiter
matcher = difflib.SequenceMatcher(a=string_a, b=string_b)
delimiter
True
delimiter
Base = declarative_base()
delimiter
message = models.CharField(max_length=100)
delimiter
{{formset.management_form}}
delimiter
value
delimiter
logger.addHandler(stream_handler)
delimiter
raise
delimiter
Py_Finalize()
delimiter
particle.speedy = int(circle.speedy)
delimiter
self.data += [val]
delimiter
exec(fh.read())
delimiter
f.__code__ = g.__code__
delimiter
print((x, timeit.timeit(lambda : h.update(data), number=100)))
delimiter
new_row = temp
delimiter
mat = pat.search(os.path.split(x)[-1])
delimiter
inds = np.where(np.isnan(a))
delimiter
5.8
delimiter
fig.canvas.manager.window.raise_()
delimiter
myList = []
delimiter
self, self.__class__(other)
delimiter
resp = make_response(f(*args, **kwargs))
delimiter
searchable_file = FileSearcher(file_to_search)
delimiter
getcontext().prec = 6
delimiter
job.hour.every(4)
delimiter
png.load()
delimiter
pprint(get_connection_name_from_guid(x))
delimiter
x.extend(compress(a, a))
delimiter
test.eval.restype = ctypes.c_double
delimiter
t.write()
delimiter
ax.set_ylim(bottom=0)
delimiter
driver.get(url)
delimiter
bucket = conn.get_bucket(bucket_name)
delimiter
ax.yaxis_date()
delimiter
row_pointers = Ks.indptr
delimiter
env.use_ssh_config = True
delimiter
signal.alarm(0)
delimiter
code_out = StringIO.StringIO()
delimiter
sline = i.split()
delimiter
plt.clim(-4, 4)
delimiter
v = tk.StringVar()
delimiter
s[-2:]
delimiter
[0, 0, 2, 1]
delimiter
fig = plt.figure()
delimiter
y = a * t ** alpha + b
delimiter
page = br.open(base_url, timeout=10)
delimiter
logger.setLevel(logging.INFO)
delimiter
plt.show()
delimiter
server.serve_forever()
delimiter
A = np.asarray(AList)
delimiter
df = pd.DataFrame(s, columns=heirIndex)
delimiter
cache[key] = fun(*args, **kwargs)
delimiter
self._logger
delimiter
exit()
delimiter
pyplot.gca().add_line(line)
delimiter
print(overall_structure.parseString(test).asList())
delimiter
output = list(range(input + 1))
delimiter
xi = np.linspace(xmin, xmax, numx)
delimiter
result = [(x + [y]) for x in result for y in pool]
delimiter
print ()
delimiter
print(os.path)
delimiter
y1.append(random.randint(1, 100))
delimiter
csv_w.writerow(columns)
delimiter
register_openers()
delimiter
fig.colorbar(surf, shrink=0.5, aspect=5)
delimiter
list((y - x).elements())
delimiter
d = defaultdict(list)
delimiter
df
delimiter
setattr(self, key, value)
delimiter
fig.set_size_inches([5, 5])
delimiter
result.append([])
delimiter
intArray_getitem(mylibrary.V, 0)
delimiter
app = Flask(__name__)
delimiter
local_dt = datetime.fromtimestamp(expiration_utc_ts)
delimiter
__getitem__ = object.__getattribute__
delimiter
k = k.parent()
delimiter
x = etree.fromstring(body)
delimiter
i += 1
delimiter
os.chdir(file_path)
delimiter
CS = plt.contourf(xi, yi, zi, 15, cmap=plt.cm.rainbow, vmax=zmax, vmin=zmin)
delimiter
deletesprocket
delimiter
glLoadIdentity()
delimiter
mkstring(10)
delimiter
sorter = numpy.argsort(values)
delimiter
[a] + li
delimiter
integer = int(str_dec)
delimiter
self.dealloc_cb_p(self.p, self.l, self.dealloc_cb_arg)
delimiter
arr[:, 1:] = float(10)
delimiter
db_crsr.execute(_stmt)
delimiter
df = PD.concat(data, axis=1, keys=[s.name for s in data])
delimiter
t = np.linspace(0, 2 * np.pi, 100)
delimiter
print(myfun(l, 0))
delimiter
nlargest(1).reset_index()
delimiter
id = ndb.ComputedProperty(lambda self: self.key.id())
delimiter
table = {}
delimiter
grouped = df.groupby(lambda x: x.day)
delimiter
root = lh.tostring(sliderRoot)
delimiter
x2 = np.random.permutation(100000)
delimiter
fit0 = so.curve_fit(model0, xdata, ydata, p0=(p1, p2))[0]
delimiter
html_parser = HTMLParser.HTMLParser()
delimiter
self.send_response(200)
delimiter
t1.join()
delimiter
where = [m.start() for m in re.finditer(sub, string)][n - 1]
delimiter
self.msgs.add(record.msg)
delimiter
time.sleep(0.2)
delimiter
dictonary = dict((i, []) for i in drug_list)
delimiter
Py_DECREF(myfunc)
delimiter
print(result)
delimiter
fileHandler.setFormatter(format)
delimiter
s[4:6]
delimiter
s = [item.capitalize() for item in s]
delimiter
plt.imshow(data)
delimiter
mySet = set()
delimiter
stdin = sys.stdin.read()
delimiter
self.data = {col: set() for col in columns}
delimiter
str(my_uuid)
delimiter
t = datetime.now()
delimiter
full = np.random.random((1002, 1004))
delimiter
headrev = revlog[0].revision.number
delimiter
plt.ylim(1e-06, 1)
delimiter
letters.lower() in ascii_lowercase
delimiter
parser = argparse.ArgumentParser(description, usage)
delimiter
test(0, 10, 20)
delimiter
result = re.sub(pattern, substitute, string)
delimiter
print(df.loc[mask])
delimiter
data = list(reader)
delimiter
new_stepListB.extend([pathList[n][0], pathList[n][2]])
delimiter
t = my_date.weekday()
delimiter
inv = ax.transData.inverted()
delimiter
objects = models.GeoManager()
delimiter
B = np.where(np.isfinite(A), A, f(inds))
delimiter
G.add_nodes_from(rank_of_nodes)
delimiter
print(a, b, c, d)
delimiter
n, remainder = divmod(n, 10)
delimiter
fig, ax = plt.subplots()
delimiter
okays = [r for r in results if success_condition(r)]
delimiter
devnum = 10
delimiter
df
delimiter
json_str = json.dumps(json_object, indent=4, sort_keys=True)
delimiter
globals()[name] = some_decorator(getattr(some_module, name))
delimiter
a_set = set()
delimiter
cache_file = os.path.join(__cache_dir__, cache_key)
delimiter
something.jpg
delimiter
print(user.screen_name)
delimiter
req = con.getresponse()
delimiter
img = Image.open(infilename)
delimiter
color_bar.draw_all()
delimiter
MyTimeDelta(hours=12) / MyTimeDelta(hours=2)
delimiter
region_dict[a.region].append(a)
delimiter
datetime.timedelta(**{interval_type: interval_num})
delimiter
r(a[:i] + m + a[i + 1:])
delimiter
iw, ih = img.getSize()
delimiter
df_possible_dup.apply(lambda x: worker(x, fuzz_ratio))
delimiter
self.currentStack = []
delimiter
app.request_class = MyRequest
delimiter
foo.mymethod = mymethod
delimiter
xv, yv = np.meshgrid(x, y)
delimiter
brr = brr[::-1]
delimiter
result = tuple(islice(it, n))
delimiter
ctr = Counter(frozenset(x) for x in a)
delimiter
df
delimiter
choice = get_input()
delimiter
exns = []
delimiter
tck = interpolate.splrep(x, y, k=2, s=0)
delimiter
master = Tk()
delimiter
0
delimiter
text_file.seek(os.path.getsize(filename) - len(os.linesep))
delimiter
self.set_val(val)
delimiter
print(new_list)
delimiter
b = a
delimiter
x, y, w, h = cv2.boundingRect(c)
delimiter
django.setup()
delimiter
lock.acquire()
delimiter
fit_result[-1]
delimiter
deleteself._cache[self._job]
delimiter
my_array[my_array > 255] = 255
delimiter
cw.writerow(one_line_of_data)
delimiter
thefile.seek(0, 2)
delimiter
im.set_data(data)
delimiter
np.allclose(a[:, :, :, (1)], collapse_dims(a)[:, :, 2:4])
delimiter
print(x, y)
delimiter
ln - s / proc / self / fd / dev / fd
delimiter
y()
delimiter
writer.writerow(data)
delimiter
x, y = l.split()
delimiter
list(range(5))[4:5]
delimiter
outputPDF = PdfFileWriter()
delimiter
False
delimiter
self.axes.set_ylabel(ylabel)
delimiter
a.foo()
delimiter
print(list(merge(times)))
delimiter
inputfile.close()
delimiter
time.sleep(2)
delimiter
newList = []
delimiter
np.dot(mX.T, logit(mX, vBeta) - vY)
delimiter
i = Image.open(StringIO(r.content))
delimiter
vect = TfidfVectorizer(vocabulary=emoticons)
delimiter
cwd = os.getcwd()
delimiter
self.draw_figure()
delimiter
decorator
delimiter
app.Documents.Open(word_file)
delimiter
ax.add_collection(lines)
delimiter
print(list(spamreader))
delimiter
image_without_exif.putdata(data)
delimiter
workbook.Close()
delimiter
zerostr(s)
delimiter
start()
delimiter
base_parser = argparse.ArgumentParser(add_help=False)
delimiter
np.median(rdd.collect()), quantile(rdd, 0.5)
delimiter
print(sys.argv)
delimiter
zip_longest(fillvalue=fillvalue, *args)
delimiter
y = np.random.random(10)
delimiter
s += x
delimiter
Color(255, 255, 255)
delimiter
anadict.sort()
delimiter
d2 = datetime.datetime.strptime(d_string, fmt)
delimiter
c = a.astype(float).cumsum()
delimiter
glLoadIdentity()
delimiter
cout = np.empty_like(arr)
delimiter
shutil.rmtree(dirname)
delimiter
accmask = np.cumsum(mask, out=mask, axis=1)
delimiter
f.close()
delimiter
(np.diff(np.sign(data)[np.nonzero(data)]) != 0).sum()
delimiter
self.all_items.add(item)
delimiter
dict(zip(I, I))
delimiter
[pypi]
delimiter
print(find_matches(im_haystack, im_needle))
delimiter
df.shift(1).min(1),
delimiter
coords = np.stack(np.meshgrid(*args), axis=-1)
delimiter
fig, ax = plt.subplots(1, 1)
delimiter
dct = dict(splt(item) for item in lst)
delimiter
test_login()
delimiter
module = sys.modules[thing.__module__]
delimiter
loss(y, y_pred)
delimiter
x /= numpy.linalg.norm(x, axis=1)[:, (numpy.newaxis)]
delimiter
next_link.__class__.__name__
delimiter
is_even = generate_is_even(reject_zero)
delimiter
c_double_p = POINTER(c_double)
delimiter
argmax = lambda keys, func: max(map(lambda key: (func(*key), key), keys))[1]
delimiter
i.save()
delimiter
handle.write(sort_by)
delimiter
menu.appendItem(fileItem)
delimiter
o.first_item()
delimiter
env = Environment(ENV=os.environ)
delimiter
app.mainloop()
delimiter
print(x)
delimiter
[int(item == max_val) for item in my_list]
delimiter
output_logger.error(line)
delimiter
result = {}
delimiter
dset.resize(row_count + chunk.shape[0], axis=0)
delimiter
x0, y0, z0, w0 = np.rollaxis(quaternion0, -1, 0)
delimiter
round_to_1(19)
delimiter
new.append(num)
delimiter
p.map_async(f, [slice(stop_f)] * M)
delimiter
coo = coo_matrix((data, (row, col)))
delimiter
print(a.value)
delimiter
1062, 1062, 1062, 1062, 1062, 1125, 1000, 1125
delimiter
sess.run(train, feed_dict={X: batch[0], y_: batch[1]})
delimiter
a = b
delimiter
h[a, b, c].append(value)
delimiter
log.start(loglevel=log.DEBUG)
delimiter
daemon.restart()
delimiter
out = optimize.leastsq(errfunc, pinit, args=(logx, logy), full_output=1)
delimiter
nk = min((k for k in self), key=lambda k: NearestDict.__dist(key, k))
delimiter
now()
delimiter
x = df[cols].ix[0] > 0
delimiter
d = date(year, 1, 1)
delimiter
self.func
delimiter
plt.draw()
delimiter
list(thedict.keys())
delimiter
age = int((date.today() - birth_date).days / days_in_year)
delimiter
HttpResponseRedirect(reverse(contact_details, args=(new_contact.pk,)))
delimiter
normalizedscores[u] = float(l) / maxscore
delimiter
{{inner2()}}
delimiter
os.close(fd)
delimiter
fig, ax = plt.subplots(1)
delimiter
inds = np.ones(rng[-1], dtype=np.int)
delimiter
ax = fig.add_subplot(111)
delimiter
a.__dict__
delimiter
result = []
delimiter
[]
delimiter
Second / Third / Fourth / Fifth
delimiter
d = {}
delimiter
restart()
delimiter
url = urljoin(response_url, url)
delimiter
move(y, x)
delimiter
myDict[key] = 10
delimiter
ax = fig.add_subplot(111)
delimiter
type(cls.__name__, tuple(classes), dict(cls.__dict__))
delimiter
print(X[0], Y[0], calc_slow(X[0], Y[0]))
delimiter
solns7 = solve(smin, smax, coef1, coef2)
delimiter
print(checksum, hex(checksum), chr(checksum))
delimiter
lemmas = set(chain.from_iterable([word.lemma_names() for word in synonyms]))
delimiter
files = [os.path.join(os.getcwd(), f) for f in files]
delimiter
printFoo()
delimiter
print(mm.filled(np.nan))
delimiter
sleep(random.randint(10, 1000) / 1000.0)
delimiter
assert ceil_dt(t7) == t7
delimiter
main.show()
delimiter
NULL
delimiter
root.mainloop()
delimiter
colors.remove(c)
delimiter
cursor.execute(query, station_id=id)
delimiter
result = []
delimiter
print(line)
delimiter
opener = urllib.request.build_opener(handler)
delimiter
total / (len(items) - 1)
delimiter
b = np.zeros((nx, nz))
delimiter
q.join()
delimiter
o.close()
delimiter
x = np.array([6, 1, 7, 6, 9, 0, 8, 2, 1, 8])
delimiter
print(fmt.format(*container[0]))
delimiter
a = numpy.random.random(100)
delimiter
state = self.__dict__.copy()
delimiter
numpy.vstack([test, test[::-1]])
delimiter
htmlcolor(0.1, 1.0, 0.9)
delimiter
self._filename = filename
delimiter
teams = collections.defaultdict(list)
delimiter
[2]
delimiter
soup = BeautifulSoup(html)
delimiter
rand_index = random.randint(0, len(graph[unmatched_woman]) - 1)
delimiter
unmanhattan = manhattan.envelope.symmetric_difference(manhattan)
delimiter
root = Tkinter.Tk()
delimiter
sum(i != j for i, j in i.izip(s_1, s_2))
delimiter
name = models.ForeignKey(School)
delimiter
self.process.terminate()
delimiter
pool = list(Content.objects.all())
delimiter
columns = line.split(column_separator)
delimiter
autorestart = true
delimiter
autostart = true
delimiter
f.close()
delimiter
colors = [(0, 0, 255), (0, 255, 0), (255, 0, 0)]
delimiter
tableWidget.setRowCount(len(entries))
delimiter
instances = formset.save(commit=False)
delimiter
tentativeLength = len(json.dumps(row))
delimiter
x.add_row(row)
delimiter
print(e.args)
delimiter
list(common_entries(da))
delimiter
end = datetime.datetime(2009, 2, 10, 16, 0)
delimiter
ea = LinearRing(a)
delimiter
a = [somestuff]
delimiter
cv.GetQuadrangleSubPix(image, output_image, map_matrix_cv)
delimiter
assert isinstance(v, str)
delimiter
b[i] += x[i]
delimiter
value &= ~(1 << 10)
delimiter
name = models.CharField(max_length=100)
delimiter
src_geotrans = src.GetGeoTransform()
delimiter
ptw = fR.tell()
delimiter
mls.geom_type
delimiter
df.values[mask] = s[s.index.searchsorted(df.index)].repeat(mask.sum(1))
delimiter
fig = plt.figure()
delimiter
deleteresult[-1]
delimiter
output.append(s)
delimiter
ax1.plot(np.array([1, 5]) * i, label=i)
delimiter
libc.syscall(186)
delimiter
sum(cents_list) == 500
delimiter
nx.draw(G)
delimiter
math.atan2(0.0, 0.0) == math.atan2(-0.0, 0.0)
delimiter
type(y[0])
delimiter
self.counter += db.run_in_transaction(_tx)
delimiter
dates1[mask]
delimiter
labels = np.arange(1, num_labels + 1)
delimiter
therest.append(para)
delimiter
unrooted_paths.append(path)
delimiter
y = np.ravel(B).reshape((9, 1))
delimiter
d[k] += int(v)
delimiter
triang.vertices
delimiter
map(csv_writer.writerow, json_dict[entity])
delimiter
ax2.set_ylim(0, 1500)
delimiter
fig = plt.figure()
delimiter
ax = fig.add_subplot(111)
delimiter
ax.add_patch(p)
delimiter
print(request.error_code)
delimiter
1
delimiter
pool.join()
delimiter
deletedict_del[k]
delimiter
m_normalized = m / m.sum(axis=1).reshape((m.shape[0], 1))
delimiter
df
delimiter
result.append(c)
delimiter
linspace_x = np.linspace(x_range[i], x_range[i], 100)
delimiter
result.append(position)
delimiter
predictions = results.predict(data[half:])
delimiter
profile_text = pattern.search(script.text).group(1)
delimiter
cert.decode(der)
delimiter
True
delimiter
lookup = collections.defaultdict(list)
delimiter
sys.stdout.write(frame.tostring())
delimiter
self.__dict__ = somearg.__dict__.copy()
delimiter
os.makedirs(dir_name)
delimiter
memory = defaultdict(list)
delimiter
i += 1
delimiter
increment()
delimiter
(t[0], ()) + t[2:]
delimiter
days_in_month = calendar.monthrange(start_date.year, start_date.month)[1]
delimiter
func
delimiter
filename[len(root):].lstrip(os.path.sep).lstrip(os.path.altsep)
delimiter
aList[i] = 0
delimiter
stars = set(random.sample(range(n + k - 1), k))
delimiter
date_before_leaps - timedelta(seconds=leap(date_before_leaps))
delimiter
C[x, y, z] += A[x1, y1, z1] * B[x2, y2, z2]
delimiter
a[:] = [(x + 2) for x in a]
delimiter
print(tags)
delimiter
takewhile(bool, (list(islice(stream, size)) for _ in count()))
delimiter
f(add, 10, 7)
delimiter
axis(2)
delimiter
is_separately_linear(eq1, [a, d])
delimiter
result = cv2.matchTemplate(image, template, method, mask=transparent_mask)
delimiter
tornado.auth.TwitterMixin.get_authenticated_user(self)
delimiter
print(username)
delimiter
oba.name
delimiter
target.append(idx)
delimiter
data = clientsocket.recv(1024)
delimiter
count += 1
delimiter
iB = 0
delimiter
glLoadIdentity()
delimiter
self._mod.__dict__[attrname]
delimiter
h1 = hyst(y, -0.5, 0.5)
delimiter
resp = json.loads(json_str)
delimiter
rdr = csv.reader(source)
delimiter
temp = {v[1]: ([k] + v) for k, v in list(rays_starters.items())}
delimiter
_mkdir(miniature)
delimiter
df
delimiter
blockwise_times.append(best)
delimiter
D = L1[0] * L2[1] - L1[1] * L2[0]
delimiter
PyEval_InitThreads()
delimiter
f[0].data
delimiter
student = form.save(commit=False)
delimiter
a = np.random.random_integers(low=0, high=1 << 10, size=2 * n).reshape(-1, 2)
delimiter
endfun
delimiter
posn = ax.get_position()
delimiter
img.im_feeling_lucky()
delimiter
vertices.clear()
delimiter
self.ser.read()
delimiter
os.killpg(pro.pid, signal.SIGTERM)
delimiter
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
delimiter
y = (x + 1) // 2
delimiter
self.master.bell()
delimiter
root.mainloop()
delimiter
values.append(float(value))
delimiter
a.remove(b)
delimiter
people = Person.objects.all()
delimiter
m = X.mean(axis=1, keepdims=True)
delimiter
t = TestClass()
delimiter
poly = GeoSeries([Polygon([(0, 0), (0, 2), (2, 2), (2, 0)])])
delimiter
out = np.zeros(x.shape, dtype=int)
delimiter
data = []
delimiter
match = re.search(regexp, str)
delimiter
datarows.append(row)
delimiter
body_content = message.body
delimiter
print(get_nesting_level())
delimiter
heapq.heappop(heap)
delimiter
{{docimage.image.url}}
delimiter
xi = np.linspace(0, 5, 10)
delimiter
12568
delimiter
df
delimiter
dict(ChainMap(*ds))
delimiter
x[x < 0] = new_value_for_neg
delimiter
unique_rows(a)
delimiter
self.foo = 5
delimiter
d_next += datetime.timedelta(weeks=1)
delimiter
indexes = np.arange(len(labels))
delimiter
my_list.append(abe)
delimiter
self.request_log.append(suffix)
delimiter
predicted = classifier.predict(X_test)
delimiter
result = []
delimiter
open_cv_image = numpy.array(pil_image)
delimiter
self.nesting = 0
delimiter
z = numpy.array([[0.1, 0.1, 1.0], [1.0, 0.1, 0.09], [0.1, 1.0, 0.2]])
delimiter
dct = OrderedDict()
delimiter
self.show_progress(test_progress_bar.value)
delimiter
print(b[0])
delimiter
print(frames_to_timecode(26))
delimiter
df
delimiter
encoded = base64.b64encode(cipher.encrypt(msg_text))
delimiter
grandFather.removeChild(father)
delimiter
setattr(obj, k, v)
delimiter
ipaddress.ip_address(ipv6)
delimiter
x = 1
delimiter
id_counter = Counter(dct.get(k) for dct in my_list)
delimiter
a.flat[idx]
delimiter
self.datadex = {f: (42) for f in foo}
delimiter
self.parent.iadd_x(val)
delimiter
f(**{kw: True})
delimiter
t.daemon = True
delimiter
decorator(method_or_name)
delimiter
br = mechanize.Browser()
delimiter
name_son1.parents_backref.append(name_father1)
delimiter
timediff = datetime.datetime.now() - time_posted
delimiter
s = p.stdout.readline()
delimiter
destination_ou.com_object.MoveHere(str(user.as_string()), str(user.Name))
delimiter
A[:, (second), (third)].flatten()
delimiter
time.sleep(x)
delimiter
y = numpy.random.rand(2)
delimiter
x, y = intersections(a, b)
delimiter
err = random.randint(0, 4)
delimiter
print(x[0])
delimiter
Dx = L1[2] * L2[1] - L1[1] * L2[2]
delimiter
result = ImageOps.colorize(gray, (0, 0, 0, 0), color)
delimiter
cax.get_yaxis().set_visible(False)
delimiter
s[1:] + s[:1]
delimiter
xs = s.strip()
delimiter
matplotlib_fig = plt.figure()
delimiter
UTF - 8
delimiter
a180 = a[..., ::-1, ::-1]
delimiter
c = pymongo.MongoClient()
delimiter
field1 = models.TextField()
delimiter
seq[:i], seq[i:]
delimiter
audio.add_picture(image)
delimiter
root = Tk()
delimiter
lambda x: func(rec_func(x))
delimiter
ends = np.hstack((nonoverlapping, [-1]))
delimiter
entries = nltk.corpus.cmudict.entries()
delimiter
dict(message=message)
delimiter
x_max = xs.max()
delimiter
s1.is_valid()
delimiter
foo.method(2)
delimiter
a[5:7]
delimiter
s = np.cos(t)
delimiter
y[1] = 4
delimiter
formatted = [[format(v) for v in r] for r in m]
delimiter
exch(k, k / 2)
delimiter
device.send_command(CMD_BLINK, 100)
delimiter
message = messages.GetFirst()
delimiter
content = self._request.read()
delimiter
cb = plt.colorbar(p, shrink=0.5)
delimiter
tr2 = np.fft.rfft(in2, n)
delimiter
result = self.output.getvalue()
delimiter
outfd, outsock_path = tempfile.mkstemp()
delimiter
count = 1
delimiter
ax1 = plt.figure(1).add_subplot(211)
delimiter
k = json.loads(j)
delimiter
print(f.data)
delimiter
binplace = np.digitize(avgs, bins)
delimiter
masked_diff = np.ma.masked_array(diff, mask)
delimiter
x = np.linspace(0, np.pi, 100)
delimiter
config_parser.read(config_files)
delimiter
parser = argparse.ArgumentParser()
delimiter
df
delimiter
process1.wait()
delimiter
df
delimiter
print(check_for_triangle(tri1, lines))
delimiter
p.join()
delimiter
frame.f_locals.clear()
delimiter
form = MyForm
delimiter
self.log.SetBackgroundColour(self.bgColor)
delimiter
[Request(x, callback=self.parse_link) for x in links]
delimiter
print(line)
delimiter
result = []
delimiter
batch.delete()
delimiter
groups[len(e)].append(e)
delimiter
address = models.ForeignKey(Address)
delimiter
result.append(sorted_intervals.pop())
delimiter
meta = MetaData(bind=engine)
delimiter
data = Column(String)
delimiter
y[:, (0)] = 0
delimiter
Xcum[(t - H), :] = np.sum(X[t - H:t, :], axis=0)
delimiter
buffer = cStringIO.StringIO()
delimiter
timerthread[0].cancel()
delimiter
print(a, b, c)
delimiter
x_min = xs.min()
delimiter
its = [iter(l) for l in lists]
delimiter
rlist.append(tuple((k, tuple(gg[1:][0][0] for gg in g))))
delimiter
print(df)
delimiter
print(data)
delimiter
time.timezone
delimiter
signal.connect(self._checkSignal)
delimiter
print(img_tf.get_shape().as_list())
delimiter
self[key] = self.__class__()
delimiter
active = models.BooleanField(default=True, editable=False)
delimiter
last_value = 0
delimiter
C[:, :, (0), (0)] = a[:-1, :-1]
delimiter
m[i] = int(row[0]), int(row[1])
delimiter
arry.append(-1)
delimiter
a = [1, 0, 0, 2, 0]
delimiter
print(L)
delimiter
s.connect((host, int(port)))
delimiter
[argv[i] for i in range(start, argc.value)]
delimiter
theclass = TheClass()
delimiter
df2
delimiter
decoded_string = base64.b64decode(encoded_string)
delimiter
response
delimiter
print(datetime.datetime.now())
delimiter
x[0]
delimiter
L = [1, 2]
delimiter
self.dataobj = dataobj
delimiter
name, extension = os.path.splitext(self.file.name)
delimiter
aux = matriz[:]
delimiter
foo = df.groupby(level=0).mean()
delimiter
serializer_class = EstablecimientoSerializer
delimiter
-Evan
delimiter
fields
delimiter
displays = (wx.Display(i) for i in range(wx.Display.GetCount()))
delimiter
p[:i] + [l[0]] + p[i:]
delimiter
d = pd.DataFrame(randint(1, 10, (n_rows, 8)))
delimiter
print(repr(process_line(line).strip()))
delimiter
list2 = np.zeros(len(lis))
delimiter
i += 1
delimiter
attrnames.append(name)
delimiter
min_distance = min(min_distance, distance(p0, p1))
delimiter
baseFile = os.path.basename(url)
delimiter
SSL_CTX_set_options(ctx, flags)
delimiter
abc = myFunction
delimiter
response
delimiter
b.int
delimiter
ii = np.where(a[:, (0)] - b.reshape(-1, 1) == 0)[1]
delimiter
addresses = session.query(address_table).filter(address_table.c.retired == 1)
delimiter
doctest.testmod()
delimiter
(person for person in self.__pList if person.match(**kwargs))
delimiter
df_l.append(pandas.DataFrame([val], index=MI))
delimiter
dx_intersect = -dx / (z[1:] - z[:-1]) * z[:-1]
delimiter
sess = tf.Session()
delimiter
df_stops = df_stops.reindex(full_index, fill_value=0)
delimiter
Page.objects.public()
delimiter
plt.show()
delimiter
2 * 11 - (2 + 10)
delimiter
dna.lstrip(string.uppercase)
delimiter
doc.close()
delimiter
dict[1] = a[0]
delimiter
settings.INSTALLED_APPS += app_name,
delimiter
plt.yticks(list(range(nrows)), row_labels)
delimiter
B = np.zeros(A.size)
delimiter
self.text.append(data)
delimiter
cell_format = self.workbook.add_format(cell_format_dict)
delimiter
next(next_lines)
delimiter
wsgi_app = create_your_wsgi_app()
delimiter
img = Image.open(imlist[i])
delimiter
_kls = Klass()
delimiter
x = [x]
delimiter
print(ax.get_xticks())
delimiter
self.func = func
delimiter
f1.close()
delimiter
item
delimiter
m.groups()
delimiter
arr = coo_matrix((data_f, (row_f, col_f)), df.shape, dtype=np.float64)
delimiter
np.random.seed(1)
delimiter
cnxn = pyodbc.connect(databasez)
delimiter
False
delimiter
a + b
delimiter
arr.append(inner)
delimiter
coupler = (idx for idx, (x, y) in coupled_idx if x != y)
delimiter
s2 = pd.Series(new_items)
delimiter
result = np.reshape(result, (chunk_length, channels))
delimiter
L[i] = result
delimiter
result = MyTask.AsyncResult(task_id)
delimiter
date = datetime.strptime(date_string, fmt).replace(tzinfo=tzinfo)
delimiter
round(2.500000001)
delimiter
pid = os.fork()
delimiter
coll = db.test_collection
delimiter
df = pd.read_csv(filename[0])
delimiter
keyPub = RSA.importKey(keyDER)
delimiter
print(df)
delimiter
q.put([list(range(200)) for j in range(100)])
delimiter
createIndex(sourceIndex.row() + 1, sourceIndex.column())
delimiter
print(value)
delimiter
a = Foo()
delimiter
body = f.read()
delimiter
print(args.foo)
delimiter
parser = argparse.ArgumentParser()
delimiter
pattern = np.ones(N, dtype=int)
delimiter
time.sleep(4)
delimiter
Nj = f.shape[1]
delimiter
second_largest([10, 7, 10])
delimiter
x_mid = xs[:-1] + np.diff(xs) / 2
delimiter
t.join()
delimiter
my_dict = recursively_default_dict()
delimiter
f.show()
delimiter
c = getattr(cls, c)
delimiter
imgray = cv2.cvtColor(aframe, cv2.COLOR_BGR2GRAY)
delimiter
QAbstractTableModel.headerData(self, section, orientation, role)
delimiter
buttonwin = tk.Frame(root, width=75, height=500)
delimiter
print(stdout)
delimiter
mem.Blit(0, 0, size[0], size[1], screen, 0, 0)
delimiter
f = Foo()
delimiter
image = cv2.resize(image, dim, interpolation=cv2.INTER_AREA)
delimiter
circle1.destroy()
delimiter
trace.text = str(a_numpy_array)
delimiter
f.close()
delimiter
self.a.b.c = 10
delimiter
self.lda[self.tfidf[bow]]
delimiter
[0, 0, 1]
delimiter
0 < ------------------------------------8 < -9
delimiter
myDict = defaultdict(int)
delimiter
test_printFoo()
delimiter
Y[..., (2)] = np.clip(np.abs(X) / absmax, 0, 1)
delimiter
b[-1] = b[0] + b[1]
delimiter
now - then > timedelta(days=1)
delimiter
plt.scatter(x, y, c=z)
delimiter
m.drawcountries()
delimiter
s.getvalue()
delimiter
keys = [i.strip() for i in keys]
delimiter
result.extend(v * v for v in vals)
delimiter
p.join()
delimiter
g()
delimiter
self.z = z
delimiter
Z2 = np.abs(np.cos(2 * Y ** 2 + X ** 2))
delimiter
remove_common(x, y)
delimiter
1 - 1
delimiter
last = MyModel.objects.count() - 1
delimiter
sigma = np.matrix([[20, 10, 10], [10, 25, 1], [10, 1, 50]])
delimiter
ax = fg.add_subplot(1, 1, 1)
delimiter
scores.append(subcheckio(nstones, left, rite + stones[0]))
delimiter
plt.title(date)
delimiter
ct = ContentType.objects.get_for_model(GRmodel)
delimiter
Image.open(strio)
delimiter
raise ndb.Return(True)
delimiter
df
delimiter
[(letter, matches.count(letter)) for letter in letters]
delimiter
dill.dumps(f)
delimiter
self.rect = Rectangle()
delimiter
parser.print_help()
delimiter
f(2, range(5))
delimiter
pprint(get_info(soup.li))
delimiter
self._rooms.clear()
delimiter
x, y, z = np.ogrid[-10:10:20j, -10:10:20j, -10:10:20j]
delimiter
a = []
delimiter
self.value = value
delimiter
1 - 10
delimiter
{{form.content}}
delimiter
{{form.as_p}}
delimiter
a = []
delimiter
linecache.clearcache()
delimiter
-betaln(1 + n - k, 1 + k) - np.log(n + 1)
delimiter
matches = tokens[1::2]
delimiter
a_label.pack()
delimiter
print_tree(tree)
delimiter
self.response = app.get(*args, **kw)
delimiter
print(type((1,)))
delimiter
print(s.strip())
delimiter
p = Popen(shlex.split(job), stdout=PIPE)
delimiter
self.wordList = list(wordList)
delimiter
print(f.read())
delimiter
[(x + (z.get(x[0]),)) for x in l]
delimiter
y_mean = np.mean(y, axis=1, keepdims=True)
delimiter
foo(A(), B())
delimiter
list_size_2 = []
delimiter
p.map(f, itertools.chain(((0, x) for x in females), ((1, x) for x in males)))
delimiter
formfield.queryset = Cars.objects.filter(owner=person)
delimiter
b = a.copy()
delimiter
np.count_nonzero(np.eye(4))
delimiter
table.style = style
delimiter
classifier.predict(datum)
delimiter
prodmap[:] = np.memmap.dot(xmap, ymap)
delimiter
plt.plot(a)
delimiter
Qt / QtGui / __init__.py
delimiter
df
delimiter
foo().wrong
delimiter
interpreter.process_page(page)
delimiter
vbox.addWidget(linetext)
delimiter
x - x.mean(axis)
delimiter
mask = np.ones(a.size, dtype=bool)
delimiter
c = np.array([np.linspace(i, j, 12) for i, j in zip(a, b)])
delimiter
print_ephemeris_for_month(year, month, bodies)
delimiter
row = array([0, 0, 1, 2, 2, 2])
delimiter
d.rectangle([(80, 0), (150, 20)], fill=(220, 0, 0))
delimiter
True
delimiter
logger.addHandler(gm)
delimiter
x = np.sin(angle)
delimiter
df
delimiter
w.setEditable(True)
delimiter
app = wx.App(False)
delimiter
soup.contents[0].name
delimiter
result = func(*args)
delimiter
print(bar.a)
delimiter
form
delimiter
mynums = [int(i) for i in s.split()]
delimiter
input_with_timeout(5)
delimiter
q = Comment.query.filter(any_(11, Comment.path))
delimiter
sample_func()
delimiter
self.map.key
delimiter
z1.namelist()
delimiter
r < -raster(mat, xmn=0, xmx=n, ymn=0, ymx=m)
delimiter
print(n)
delimiter
shuffle(x)
delimiter
M = max(max(x) for x in list(foo.values())) + 1
delimiter
m.drawcoastlines()
delimiter
print(item)
delimiter
generate([list(range(1, 11)), list(range(10, 21))], 100)
delimiter
my_dictionary = json.loads(args.my_dict)
delimiter
paths[T]
delimiter
self.assertTrue(user.username == iunicode(testuser.upper()))
delimiter
iter(x)
delimiter
datetime.datetime.utcfromtimestamp(u)
delimiter
{0, 0, 0, 0, 0, 0, 0}
delimiter
b[-2] += [10]
delimiter
inverted_dict.add(actor)
delimiter
self.store.save()
delimiter
data = urllib.parse.urlencode(forms, doseq=True)
delimiter
print(df)
delimiter
xx, yy = np.meshgrid(np.linspace(-7, 7, 500), np.linspace(-7, 7, 500))
delimiter
print(np.asarray(testdataset).shape)
delimiter
DOT11_CIPHER_ALGO_WEP104 = 5
delimiter
pylab.plot(tst_xdata, tst_ydata)
delimiter
filedata = imgstr.read()
delimiter
rhs = dict([(D[k], pop(D, k)) for D in rhs])
delimiter
df = df.convert_objects(convert_numeric=True)
delimiter
out = out.reset_index()
delimiter
process_b.start()
delimiter
print(file.character_count())
delimiter
row = dict((name_map[name], val) for name, val in row.items())
delimiter
bytes is str
delimiter
c = BinominalCoefficient(2 * n, n)
delimiter
tags = django.forms.CharField(required=True)
delimiter
session.add(obj1)
delimiter
print(A.shape)
delimiter
sock = socket(AF_INET, SOCK_STREAM)
delimiter
s.close()
delimiter
lock.release()
delimiter
os._exit(0)
delimiter
parser.print_help()
delimiter
df
delimiter
indices = np.nonzero(X)
delimiter
cursor = self.conn.cursor()
delimiter
my_list = []
delimiter
f.write(data)
delimiter
gmpy2.isqrt((10 ** 100 + 1) ** 2 - 1)
delimiter
d[key].append(word)
delimiter
holes.append((int((x1 + x2) / 2), int((y1 + y2) / 2)))
delimiter
self._observers = []
delimiter
b = numpy.array([conv[x] for x in a], dtype=numpy.uint8)
delimiter
self._insert(bisect.bisect_left(self, value), value)
delimiter
tree.printTree()
delimiter
m = numpy.swapaxes(m, 2, axis)
delimiter
exec_globals.update(frame.f_globals)
delimiter
PyObject_HEAD_INIT(NULL)
delimiter
created = models.DateTimeField(auto_now_add=True)
delimiter
x = [65] * 9999999
delimiter
name = traceback.tb_frame.f_code.co_name
delimiter
[list(permutations(grp.index)) for name, grp in age]
delimiter
self.RUNNING = JOBSTATE_RUNNING
delimiter
self.FINISHED = JOBSTATE_FINISHED
delimiter
hessian = np.empty((x.ndim, x.ndim) + x.shape, dtype=x.dtype)
delimiter
proc.wait()
delimiter
others = [n for n in G.neighbors((1, 1)) if n != neighb]
delimiter
file.seek(position, 0)
delimiter
Py_XDECREF(pFunc)
delimiter
self.test_panel.SetSizer(self.panel_sizer)
delimiter
x = kbfunc()
delimiter
reader = csv.reader(csvfile, dialect)
delimiter
new_time = newdt.time()
delimiter
zedges = np.linspace(-10, 10, 10)
delimiter
m.drawstates()
delimiter
utc_date = date(2008, 1, 1)
delimiter
test()
delimiter
instance.is_initialized = True
delimiter
i += 1
delimiter
ax = plt.subplot(111)
delimiter
close(father2child_pipefd[1])
delimiter
line_new = word[0].rjust(10) + word[1].rjust(10) + word[2].rjust(10)
delimiter
triplets[iT].append(listB[iB + 1])
delimiter
pool = multiprocessing.pool(args)
delimiter
f, ax = plt.subplots(figsize=(7, 7))
delimiter
list.append(calc)
delimiter
s = pd.Series(test)
delimiter
dates = [nextdate(i) for i in range(value)]
delimiter
x = []
delimiter
Z = tf.pow(Z, 2.0)
delimiter
stdout.write(beeString)
delimiter
[[x] for x in seqs[0]]
delimiter
offset = values[0][1] - datetime.fromtimestamp(values[0][0] * factor)
delimiter
exec(pyCode, global_namespace, lobaca_namespace)
delimiter
x = np.arange(0, 10)
delimiter
m_list
delimiter
self.bind(a=self.set_c)
delimiter
sizes = np.concatenate(([0], np.cumsum(sizes)))
delimiter
solns = sympy.solve(sym_df)
delimiter
x = np.linspace(0, 50, 100)
delimiter
level = operator.itemgetter(1)
delimiter
i < len(self._list) and self._list[i][0] == k
delimiter
proxy.ProxyRequest.process(self)
delimiter
cache[args]
delimiter
c = np.random.randint(m, size=k)
delimiter
num = int(line)
delimiter
p.start()
delimiter
raise StopIteration()
delimiter
self.map = {}
delimiter
code_obj.co_stacksize, code_obj.co_flags, code_obj.co_code
delimiter
plt.figure(dpi=dpi)
delimiter
print(sub_k_list(a, k))
delimiter
df_dict[col_index[j]].append(cell.value)
delimiter
sorted_dict = SortedDict(**unsorted_dict)
delimiter
isinstance(Ham1(), Ham2)
delimiter
results = Result.objects.all()
delimiter
assert qlock.locked()
delimiter
L.append(a)
delimiter
self.rtype = rtype
delimiter
INSTALLED_APPS += ()
delimiter
n -= 1
delimiter
CONVERSION_DICT[source](temp)
delimiter
s[start:end]
delimiter
points_unique[:, (0)], points_unique[:, (1)]
delimiter
ax.set_xlim(xmin, xmax)
delimiter
fhandle.seek(0)
delimiter
print(n)
delimiter
print(k, mydict[k])
delimiter
print(a[2, 1])
delimiter
left = a[max(0, index - num_neighbor):index]
delimiter
0 - 0
delimiter
sorted(ordered(x) for x in obj)
delimiter
X_train_pca = estimator.fit_transform(X_train)
delimiter
overlap(0, 50, 0, 50)
delimiter
new_stepListA.extend([pathList[n][1], pathList[n][2]])
delimiter
quote = m.group(1)
delimiter
pub = Publication.objects.all()[random.randint(1, 2)]
delimiter
print(L)
delimiter
logger_1.addHandler(hdlr_1)
delimiter
b = (a[..., (np.newaxis)] > np.arange(n)).astype(int)
delimiter
processor.start()
delimiter
res.append(arr)
delimiter
readline.set_pre_input_hook(rl_autoindent)
delimiter
transposes = [(a + b[1] + b[0] + b[2:]) for a, b in splits if len(b) > 1]
delimiter
conn.set_debuglevel(False)
delimiter
body = json.loads(request.content.read())
delimiter
max_depth.update({i: find_depth(dep, MyDict[i])})
delimiter
matplotlib.rcsetup.validate_backend(name)
delimiter
main(*sys.argv[1:])
delimiter
memview = memoryview(buffer)
delimiter
frame = inspect.currentframe()
delimiter
mutex.acquire()
delimiter
sys.exit(1)
delimiter
[2, 2, 1]
delimiter
yTrain = np.array([[0], [1], [1], [0]])
delimiter
cbar1 = fig.colorbar(im1, cax=cax1)
delimiter
result = []
delimiter
y = np.array([int(i[0]) for i in data])
delimiter
f + f
delimiter
get_all_object_keys(bucket, prefix, last_key, keys)
delimiter
arr = numpy.array(list(itertools.zip_longest(fillvalue=numpy.nan, *lst)))
delimiter
now = datetime.datetime.now()
delimiter
ts2[0] = 99
delimiter
area_dict = dict(zip(lakes.area, lakes.count))
delimiter
form_args = dict(username=dict(validators=[no_root_allowed]))
delimiter
plt.xticks(indexes + width * 0.5, labels)
delimiter
genedata = OneOrMore(genebit).parseString(fastasrc)
delimiter
parts_dict, list_of_parts
delimiter
os.getcwd()
delimiter
self.assertEqual(handler.request.recv.call_args[0], 1024)
delimiter
result = defaultdict(list)
delimiter
cost = tf.reduce_mean(losses)
delimiter
self._locals
delimiter
bodylist.append([edge[0], edge[1]])
delimiter
foo = models.ForeignKey(Foo)
delimiter
self.sum = 0
delimiter
print(string_set(string_list))
delimiter
result.get()
delimiter
print(x, y, z)
delimiter
cls._instances.append(instance)
delimiter
filterfalse(pred, t1), list(filter(pred, t2))
delimiter
assert 1 == 0
delimiter
self.table.setHorizontalHeader(HeaderView(self.table))
delimiter
B[0, 0]
delimiter
self._format(object.foo, stream, indent, allowance + 1, context, level)
delimiter
self.adjacencyList = []
delimiter
Repeat.count += 1
delimiter
vbox1.addWidget(self.button)
delimiter
np.hstack((vector1[:, (np.newaxis)], matrix2))
delimiter
self.fp.write(zinfo.FileHeader())
delimiter
writer.writerow(payload)
delimiter
f(**args)
delimiter
deletemylist
delimiter
f.close()
delimiter
root.withdraw()
delimiter
ax.set_xlim(x_min, x_max)
delimiter
cast(v.vendorName, c_char_p).value[7]
delimiter
loop.run_until_complete(asyncio.wait(tasks))
delimiter
fig.subplots_adjust(hspace=0)
delimiter
print(df)
delimiter
g.write(new_entry)
delimiter
master_indices = dict((r[1], i) for i, r in enumerate(csv.reader(master)))
delimiter
indptr = np.zeros((2,), dtype=np.intp)
delimiter
print(line)
delimiter
serializer_class = UserSerializer
delimiter
self.assertEqual(12 * 12, 144)
delimiter
x = np.arange(0, n * len(A), n)
delimiter
body = response.read()
delimiter
summary = conn.get_account_summary()
delimiter
w
delimiter
t.seek(0)
delimiter
m[0][0] * m[1][1] - m[0][1] * m[1][0]
delimiter
security.insert(usernametoken)
delimiter
byweekday = (TU, WE),
delimiter
self.name.lower()
delimiter
chunk = f.read()
delimiter
start, end = L[0], L[-1]
delimiter
lines = text_file.readline()
delimiter
t = type(x)
delimiter
fn(*args, **kwargs)
delimiter
pool = multiprocessing.Pool(processes=pool_size, maxtasksperchild=4)
delimiter
out[mask] = np.concatenate(L).ravel()
delimiter
heapq.nlargest(2, x)
delimiter
print(repr(m_float))
delimiter
print(isPower(1, 1))
delimiter
greet_self()
delimiter
revbin = bin_n[::-1]
delimiter
rawImage = f.read()
delimiter
DistutilsInstall.run(self)
delimiter
ax.set_ylim(ymin, ymax)
delimiter
d1 = pd.concat([df.loc[[1]].rename(index={(1): 0}), df])
delimiter
self.size -= 1
delimiter
l = threading.Lock()
delimiter
np.count_nonzero(y == 2)
delimiter
x = np.random.rand(50)
delimiter
[4, 4]
delimiter
best[n][1]
delimiter
bk.show(p)
delimiter
Xi, Yj = np.indices(shape)
delimiter
print(c.Pear)
delimiter
print(c.Fish)
delimiter
self.canvas.move(oid, dx, dy)
delimiter
cPickle.dump(root.config(), f, -1)
delimiter
f2()
delimiter
c = np.dstack([r, g, b])
delimiter
r1 = Range(start=date(2016, 1, 1), end=date(2016, 2, 5))
delimiter
cr.fill_preserve()
delimiter
count = 0
delimiter
A[i], A[j] = A[j], A[i]
delimiter
y = np.array([2, 4, 6])
delimiter
self.popitem()
delimiter
merged = merge(string1.lower(), string2.lower())
delimiter
y = np.sin(x) + np.random.random(100) * 0.2
delimiter
[0, 1, 0],
delimiter
Test().__init__
delimiter
COV = np.divide(C, V + 1e-119)
delimiter
dec
delimiter
np.linalg.matrix_rank(b)
delimiter
delimiter = firstline[1][-1]
delimiter
GPIO.setup(7, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
delimiter
dic = dict((x, 0) for x in lis)
delimiter
df
delimiter
df_out = pivoted.cumsum() + (pivoted == -1)
delimiter
print(res)
delimiter
z = eval(y)
delimiter
df = pd.read_json(json.dumps(dictionary_example)).T
delimiter
t.daemon = True
delimiter
fig = plt.figure()
delimiter
shutil.rmtree(tempdir)
delimiter
close_button = gtk.Button()
delimiter
array = np.tile(np.arange(1, 4), (N, 1))
delimiter
f2 = lambda x: np.dot(x, P) - 760
delimiter
all(i > 10 for i in range(19))
delimiter
pylab.grid(True)
delimiter
res = defaultdict(lambda : defaultdict(lambda : defaultdict(list)))
delimiter
self.name = name
delimiter
self._buf += next(self._file).strip()
delimiter
self.qux()
delimiter
print(response)
delimiter
float(n) / 1 << n.bit_length() - 1
delimiter
column.append(row[key])
delimiter
((days * 24 + hours) * 60 + minutes) * 60 + seconds
delimiter
app = wx.App()
delimiter
all_rosters.append(roster[:])
delimiter
pool = multiprocessing.Pool(processes=numthreads)
delimiter
HttpResponse(data, **response_kwargs)
delimiter
self._dict[key]
delimiter
plt.plot(a)
delimiter
new_string += char
delimiter
print(xquery.execute())
delimiter
flush()
delimiter
p.close()
delimiter
f
delimiter
print(min(matches, key=len))
delimiter
filtered = [i for i in full if not regex.search(i)]
delimiter
xi = np.linspace(0, 2, 10)
delimiter
timestamp = calendar.timegm(utc_dt.timetuple())
delimiter
output[contig] += 1
delimiter
value
delimiter
loop = asyncio.get_event_loop()
delimiter
parser = etree.XMLTreeBuilder()
delimiter
session.flush()
delimiter
sess.run(training_op, feed_dict={X: X_batch, y: y_batch})
delimiter
globals()[k] = MyDict(v)
delimiter
country = models.CharField(max_length=100)
delimiter
gtags - f / tmp / list
delimiter
self.assertEqual(user.username, testuser)
delimiter
strs[ind:ind1]
delimiter
pyobj = json_pkloads(json_str)
delimiter
min(r1.end - r2.start, r2.end - r1.start).days + 1
delimiter
np.maximum.at(diam, data[:, (0)], dist_to_center)
delimiter
show_all.set(True)
delimiter
Node.__init__(self, identifier)
delimiter
self.parent().setCursor(Qt.PointingHandCursor)
delimiter
a = randint(0, 10)
delimiter
bcw = csv.writer(bc, csv.excel, b.encoding)
delimiter
splitted = my_string.split()
delimiter
samples, labels = zip(*data)
delimiter
img = misc.imread(fp)
delimiter
Blue = RGBint & 255
delimiter
new_dict = {}
delimiter
self.detach_webview()
delimiter
app = wx.App(False)
delimiter
infilename = os.path.join(folder, filename)
delimiter
abclass
delimiter
Nfeval += 1
delimiter
shared_row = theano.shared(numpy.zeros((1, 10)), broadcastable=(True, False))
delimiter
User.create_table()
delimiter
theta = np.arctan2(y, x)
delimiter
_members_ = {}
delimiter
s - set([4, 5])
delimiter
s = pd.Series(t2.index.get_level_values(1), t2.index.get_level_values(0))
delimiter
driver = webdriver.PhantomJS()
delimiter
idx, val = s.index.get_level_values(0), s.index.get_level_values(1)
delimiter
values[1] = values[:]
delimiter
self._assert(cap)
delimiter
old_a.f()
delimiter
a = numpy.zeros(10, dtype=str)
delimiter
x.subs(ordereddict.OrderedDict([(x, y), (y, z)]))
delimiter
y = x.swapaxes(-1, -2)
delimiter
command = os.path.abspath(command)
delimiter
ax.contourf(np.random.rand(10, 10), 5, cmap=plt.cm.Oranges)
delimiter
print(add2(10))
delimiter
partition(X, my_relation)
delimiter
f = fileinput.input(filename, inplace=1)
delimiter
sorted_keys = sorted([x for x in d])
delimiter
nlines += 1
delimiter
dis.dis(foo)
delimiter
show()
delimiter
ax = fig.gca()
delimiter
print(queue1.get())
delimiter
len(self.inner) < len(other.inner)
delimiter
self.mainLayout.setMargin(10)
delimiter
ax = fig.add_subplot(111)
delimiter
G = nx.DiGraph()
delimiter
comp = wmi.WMI()
delimiter
print(np.ma.compressed(m))
delimiter
object_id = models.PositiveIntegerField()
delimiter
os.dup2(0, 1)
delimiter
[unrank(list(range(5)), 2, i) for i in range(20)]
delimiter
x_train = np.array([i[1::] for i in data])
delimiter
diff_idx = np.where(np.any(np.diff(sorted_arr, axis=0), 1))[0]
delimiter
result.append(item)
delimiter
county_colors.append(colors[idx])
delimiter
time.clock()
delimiter
myList = list(f)
delimiter
process.start()
delimiter
df
delimiter
csv_out = csv.writer(out)
delimiter
c = wmi.WMI()
delimiter
xml.sax.saxutils
delimiter
year = sorted(set(map(lambda x: x[0], file_contents_values)))
delimiter
pool = mp.Pool()
delimiter
x = np.random.randn(N)
delimiter
plt.show()
delimiter
exit(a)
delimiter
print(new_d)
delimiter
socket = context.socket(zmq.PUB)
delimiter
True
delimiter
figure(1)
delimiter
pool.close()
delimiter
measure = lambda x: -x.count_ops()
delimiter
lis.append(lambda : 1)
delimiter
e2 = tk.Entry(self)
delimiter
uf = np.frompyfunc(lambda a, b: a + (b - a) * 0.5, 2, 1)
delimiter
f.close()
delimiter
platform.platform()
delimiter
x = np.array([0, 1, 2])
delimiter
gtk.main_iteration(False)
delimiter
ws.set_panes_frozen(True)
delimiter
sleep(10)
delimiter
Thread(target=begin).start()
delimiter
values = np.random.uniform(low=0, high=1, size=ages.shape)
delimiter
print(sub.recv(zmq.NOBLOCK))
delimiter
d = {tuple(i): a.count(i) for i in a}
delimiter
tuple_dict = {}
delimiter
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj), authinfo)
delimiter
(nonzero_array[:-1] * nonzero_array[1:] < 0).sum()
delimiter
print(parser.format_help())
delimiter
tar.addfile(info, data)
delimiter
sys.exit(1)
delimiter
self.numbers[-i - 1] = 0 if num == 9 else num + 1
delimiter
loss = tf.reduce_sum(tf.abs(tf.sub(x, y_)))
delimiter
self.c = cv2.VideoCapture(0)
delimiter
res_ols.params
delimiter
B = np.random.randint(k, size=(n, m))
delimiter
daemon_kenny.start()
delimiter
vals = np.empty(len(s))
delimiter
print(lst)
delimiter
output = subprocess.check_output(command_line)
delimiter
xlmodule.CodeModule.AddFromString(strcode.strip())
delimiter
print(len(chuck))
delimiter
plt.title(title, figure=fig)
delimiter
print((first, second, third))
delimiter
self.Artwork = Label(self.frame, image=self.photo)
delimiter
notify_another_process()
delimiter
print(s)
delimiter
print(a[167])
delimiter
date_of_appointment = models.DateField()
delimiter
Point(other.x, other.y)
delimiter
plt.savefig(outputname, dpi=80)
delimiter
print(screen_name(api.lookup_users(i)))
delimiter
sizer = wx.BoxSizer(wx.VERTICAL)
delimiter
print(content)
delimiter
XtX = np.dot(np.transpose(X), X)
delimiter
wavfile.write(WAVE_OUTPUT_FILENAME, RATE, result)
delimiter
tgrid = np.linspace(times.min(), times.max(), 100)
delimiter
maxm = np.array([])
delimiter
minm = np.array([])
delimiter
print(Expression(4))
delimiter
setattr(self, attr, val)
delimiter
A.sort()
delimiter
draw = ImageDraw.Draw(img)
delimiter
a = np.arange(10)
delimiter
self.flush()
delimiter
worksheet = workbook.add_worksheet()
delimiter
numbers.append(my_alphabet.index(letter))
delimiter
[4, 8, 7]
delimiter
my_dict = {}
delimiter
data = EXIF.process_file(f)
delimiter
__import__(sys.argv[1])
delimiter
thread.join()
delimiter
line_list = list(self.readlines())
delimiter
hy = T.hessian(y, [A, b, c])
delimiter
id = db.Column(INTEGER(unsigned=True), primary_key=True)
delimiter
walk(path)
delimiter
app = Flask(__name__)
delimiter
train_op.run()
delimiter
urls.append(page.url())
delimiter
match_ds = gdal.Open(match_filename, gdalconst.GA_ReadOnly)
delimiter
dfnew = pd.concat([dfnew, dfnondup], axis=0)
delimiter
opener = urllib.request.build_opener(auth_handler)
delimiter
fig, (axes_1, axes_2) = mpl_plt.subplots(2, 1)
delimiter
b = date(2011, 11, 17)
delimiter
stdout_lines.append(line)
delimiter
question.id = str(question.key().id())
delimiter
A = np.zeros((5, 100))
delimiter
stack[-1].append(item)
delimiter
True
delimiter
self.timer = QtCore.QTimer()
delimiter
L = list(range(-10, 10))
delimiter
AI2 = 0
delimiter
colors = np.outer(0.5 + norm(shade) * 0.5, color)
delimiter
d = collections.defaultdict(int)
delimiter
pattern = re.compile(regex_txt, re.IGNORECASE)
delimiter
window = screen.get_active_window()
delimiter
queryset = Experiment.objects.all()
delimiter
doit()
delimiter
[0, 0, 2, 0]
delimiter
crypt_object = AES.new(key=key, mode=AES.MODE_CBC, IV=iv)
delimiter
worker = Worker()
delimiter
lines = [span.get_text() for span in spans]
delimiter
N[row_idxs[r], c] = 0
delimiter
logsum += log(x)
delimiter
data = f1.read(chunk)
delimiter
w.join()
delimiter
fh.setFormatter(formatter)
delimiter
stream.truncate()
delimiter
self._num_expectations = 0
delimiter
GObject.threads_init()
delimiter
now = datetime.now()
delimiter
print(df1)
delimiter
shlex.__init__(self, *args, **kwargs)
delimiter
wb = excel.Workbooks.Open(doc)
delimiter
fl = fcntl.fcntl(fd, fcntl.F_GETFL)
delimiter
print(sum(a for a in fibonacci_iter(4000000.0) if not a & 1))
delimiter
thirdpartymodule_b.dosomething()
delimiter
h.pop()
delimiter
request = scrapy.Request(url=url, callback=callback)
delimiter
response = request.execute()
delimiter
todos = ToDo.objects.filter(user=request.user)
delimiter
paramstr = urllib.parse.urlencode(params)
delimiter
transaction.commit()
delimiter
serial.flushInput()
delimiter
p.send(message)
delimiter
by1, by2 = sorted([random.random(), random.random()])
delimiter
foo = Foo()
delimiter
fig, axes = plt.subplots(nrows=2)
delimiter
True
delimiter
self.test(*self.arg)
delimiter
print(encoded)
delimiter
__cache = {}
delimiter
arr_1 = np.array([False, False, True, True])
delimiter
self.scroll.setWidgetResizable(True)
delimiter
sb.palplot(sb.color_palette())
delimiter
pool = Pool(4)
delimiter
pattern = re.compile(format_to_re(layout))
delimiter
flt = lrg[lrg == 0]
delimiter
parseHTML(curRes)
delimiter
cheese = make_cheese(Goat().milk())
delimiter
bool(regex.match(s))
delimiter
warnings.show_warning(message, category, filename, lineno, file, line)
delimiter
f.readline()
delimiter
figure(1)
delimiter
541
delimiter
cov[i, j] = calculate_value(i, j)
delimiter
sizer = wx.BoxSizer(wx.VERTICAL)
delimiter
False
delimiter
dict.__getitem__(self, x)
delimiter
y0 = y_indices.astype(np.integer)
delimiter
pypreprocessor.parse()
delimiter
run(app=myapp)
delimiter
self.br
delimiter
b = [4, 5, 6, 7]
delimiter
print(choice)
delimiter
ax = fig.add_subplot(2, 2, i)
delimiter
print(df.query(qry))
delimiter
time.sleep(24 * 60 * 60)
delimiter
words = x.split()
delimiter
q.put(item)
delimiter
os.chdir(destination)
delimiter
self.stack.pop()
delimiter
wrapper_object.open()
delimiter
anotherfile.isatty()
delimiter
ppxml1 = etree.tostring(xml1, pretty_print=True)
delimiter
gs = gridspec.GridSpec(4, 4)
delimiter
self.__class__.count += 1
delimiter
d2 = {x: x for x in range(1, 6)}
delimiter
leadingzerocounts = [0] * m
delimiter
print(df1)
delimiter
root = tk.Tk()
delimiter
print(r.cookies)
delimiter
byte_s = f.read(1)
delimiter
self.date = self.evaluation_id.date
delimiter
end.time()
delimiter
nextlevel.append(n.right)
delimiter
restorer = tf.train.Saver([w])
delimiter
bokeh.io.show(grid)
delimiter
textview.modify_font(fontdesc)
delimiter
do_it_lots()
delimiter
X = np.matrix([[0, 0], [1, 0], [0, 1], [1, 1]])
delimiter
do_generator_empty()
delimiter
sys.exit(0)
delimiter
n -= 1
delimiter
img = pygame.image.load(filepath)
delimiter
abstrapz([-1, 0, 1])
delimiter
pylab.show()
delimiter
ts = time.time()
delimiter
cummax(a)
delimiter
plt.ion()
delimiter
client.sendPreparedMessage(preparedMessage)
delimiter
self.name
delimiter
handler.setFormatter(formatter)
delimiter
cls.initStuff()
delimiter
TextWidget.pack()
delimiter
f()
delimiter
your_plot.set_xticklabels(ticks)
delimiter
store_to_request(request)
delimiter
self.put(data)
delimiter
builder.connect_signals(LoseFocusHandler())
delimiter
network[x][y] = common
delimiter
stream_handler = logging.StreamHandler()
delimiter
render_template(template, mydict=mydict)
delimiter
self.A = np.asanyarray(A)
delimiter
login(request, user)
delimiter
list1 + list2
delimiter
a > 2
delimiter
df.idxmin(axis=1)
delimiter
stackless.tasklet(b)()
delimiter
out = np.lib.stride_tricks.as_strided(x, shape=shp, strides=(M * n, n)).ravel()
delimiter
net.layers[1].blobs[0].diff.shape
delimiter
Pear = 6
delimiter
out = np.empty_like(y)
delimiter
test_timing()
delimiter
mpl.rcParams.update(pgf_with_pdflatex)
delimiter
RGH = 8
delimiter
list(partitions(s))
delimiter
x * self.z
delimiter
layout = QVBoxLayout(self)
delimiter
print(result)
delimiter
logfile.write(output)
delimiter
libraries[:10]
delimiter
status = models.CharField(max_length=25)
delimiter
len(unequal_pos[0])
delimiter
np.save(f, a)
delimiter
f(*args)
delimiter
np.random.seed(8)
delimiter
a = list(range(10))
delimiter
out.write(line)
delimiter
bokeh.io.show(layout)
delimiter
rsp = urllib.request.urlopen(req)
delimiter
b = b - 1
delimiter
np.any(count > 1)
delimiter
connection.cursor()
delimiter
print(x)
delimiter
f(xv, yv)
delimiter
i = int(f)
delimiter
c.append(map(sub, a[i], b[i]))
delimiter
Pdb(def_colors).set_trace(sys._getframe().f_back)
delimiter
data = np.random.normal(mu, sigma, 10000)
delimiter
self.U[:, :n] * self.d[:n]
delimiter
print(keyword, x.strip()[:5])
delimiter
next(i)
delimiter
deleteyshape[axis]
delimiter
mat1[1][i] = 1
delimiter
Node.__init__(self, identifier)
delimiter
print(lt_obj.get_text())
delimiter
self.doSomething(Notification)
delimiter
nlesser_items = heapq.nsmallest(n, items)
delimiter
pygame.mixer.music.load(wav_path)
delimiter
self.dict[self.first]
delimiter
print(df.dtypes)
delimiter
x = (i for i in range(10))
delimiter
imgB = numpy.array(imgB)
delimiter
data = socket.gethostbyname_ex(d)
delimiter
T = tri.Triangulation(x, y)
delimiter
lines_gen = islice(infile, N)
delimiter
ax1 = plt.subplot(gs[1], sharey=ax0)
delimiter
print(len(zero_crossings2))
delimiter
max(i.arity() for i in s)
delimiter
root.grid_columnconfigure(2, weight=1)
delimiter
-Flask - Testing
delimiter
self.toolbar = self.CreateToolBar()
delimiter
width, height = img_padded.size
delimiter
func1(gen1)
delimiter
[lambda : 2][0]()
delimiter
line_count = 0
delimiter
f.write(line)
delimiter
replchars[i] = replchars[i].upper()
delimiter
prod(list)
delimiter
previous_day = read_date - datetime.timedelta(days=1)
delimiter
self.__dict__[attr_name]
delimiter
pp.show()
delimiter
assert foo(5) == 10
delimiter
addresses = [address.strip() for address in addresses]
delimiter
A = Matrix([[5, 6], [7, 9]])
delimiter
lut2 = lut.reshape(-1, 4)
delimiter
attachment = msg.get_payload()[1]
delimiter
http_server.listen(8888)
delimiter
self.src.append([item])
delimiter
self.save_object(related_item)
delimiter
PROG = os.path.basename(os.path.splitext(__file__)[0])
delimiter
lines[-1] += segment
delimiter
soup = BeautifulSoup(response.body)
delimiter
fullPathToFile = os.path.join(root, file)
delimiter
raise IndexError()
delimiter
self.__ntrue
delimiter
ax.set_xlim(0, 9)
delimiter
cj
delimiter
lst.append(sp.Eq(i, j))
delimiter
app = Flask(__name__)
delimiter
self.data[self.start + idx]
delimiter
self.window.set_border_width(10)
delimiter
book_ct = ContentType.objects.get_for_model(Book)
delimiter
print(Foo.objects.in_a_number_order())
delimiter
tkmc.set_timeout(timeoutSp)
delimiter
old_settings = termios.tcgetattr(fd)
delimiter
a
delimiter
preallocate_file(fn, size)
delimiter
201112
delimiter
iter(lookup.items())
delimiter
x = 10 * np.random.normal(mu, sigma, 5000)
delimiter
print(merge(d1, d2))
delimiter
show()
delimiter
x = np.arange(100).reshape(10, 10)
delimiter
print(b)
delimiter
{{body}}
delimiter
coords = nx.spring_layout(G)
delimiter
lines.set_facecolors(cm.jet(np.random.rand(1)))
delimiter
self.df.log(request, self.spider)
delimiter
result = [s + timedelta(days=(calendar.FRIDAY - s.weekday()) % 7)]
delimiter
words = s.split()
delimiter
a, b, c = myfunc()
delimiter
self.layoutVertical.addWidget(self.canvas)
delimiter
conn.sendmail(fromaddr, toaddrs, msg.format(txt))
delimiter
atexit.register(exit_handler)
delimiter
b = a
delimiter
a, b = b, a
delimiter
rs = [grequests.get(url, hooks=dict(args=print_url)) for url in urls]
delimiter
y = [0, 0, 0]
delimiter
self.func, self.args = func, args
delimiter
self.iterator
delimiter
xk = np.arange(7)
delimiter
s.into_raw()
delimiter
self.wfile.write(message)
delimiter
l.sort(key=alphanum_key)
delimiter
im.size
delimiter
lines.append(line.strip())
delimiter
signal.signal(signal.SIGINT, signal.SIG_DFL)
delimiter
href
delimiter
to_modify[index] = replacement
delimiter
blog_entry = get_cached(BlogEntry, pk=4)
delimiter
ra.append(float(line.split()[0]))
delimiter
False
delimiter
df[start:end]
delimiter
vote.delete()
delimiter
os.setuid(471)
delimiter
dict(zip(p[:100], p[100:]))
delimiter
random.sample(WeightedPopulation(population, weights), k)
delimiter
df.index[-1] + pd.offsets.MonthEnd(0)
delimiter
self.restart_celery()
delimiter
foo.error
delimiter
re.sub(r, replacer, string)
delimiter
result = dict()
delimiter
x_key = keyfunc(x)
delimiter
print(c)
delimiter
averages = [([k] + [(sum(x) / len(v)) for x in zip(*v)]) for k, v in list(d.items())]
delimiter
[1]
delimiter
l_copy = [x for x in l]
delimiter
self.worker.moveToThread(self.thread)
delimiter
show()
delimiter
rv = self.next_chunk[:n]
delimiter
filesystem.GetFileAttributes(filepath).hidden
delimiter
ind = np.indices(myarray.shape)[0]
delimiter
self.axes.hold(False)
delimiter
sum((ea - eb) ** 2 for ea, eb in zip(ka, kb))
delimiter
work.join()
delimiter
total += ampl * math.cos(cosarg * math.pi / 180)
delimiter
origin = 0, 0
delimiter
ff = [functools.partial(lambda i: i, x) for x in range(100)]
delimiter
self._compare(other, segment=-1)
delimiter
sign *= np.multiply.reduce(d / absd, axis=1)
delimiter
c.update(set(v))
delimiter
foo_noniterable(thing)
delimiter
zero = numpy.zeros(10)
delimiter
points = np.hstack((p1, p2, a, b))
delimiter
DataFrame(self.model.predict(X))
delimiter
soup = BeautifulSoup(source_code)
delimiter
b.burn(library, lighter)
delimiter
results.append(option)
delimiter
obj
delimiter
soup = BeautifulSoup.BeautifulSoup(content)
delimiter
f_old.seek(0)
delimiter
items = [i.strip() for i in items]
delimiter
pool = multiprocessing.Pool(1)
delimiter
max(v1 - v0 for v0, v1 in zip(values[:-1], values[1:]))
delimiter
int(gmpy2.mpz(12))
delimiter
Application().Run(MyWindow())
delimiter
data_dict = json.loads(data)
delimiter
sys.exit(4)
delimiter
copy_file(src, self.target_dir)
delimiter
setattr(self, key, value)
delimiter
plt.xticks(list(range(width)), alphabet[:width])
delimiter
f.seek(0)
delimiter
im = im.crop((left, top, right, bottom))
delimiter
n_samples += int(self.smooth_idf)
delimiter
dt + (datetime.min - dt) % delta
delimiter
mymap = [m for m in mymap if m[0] > 0 and m[1] > 0]
delimiter
RAWR = lR
delimiter
next(gen())
delimiter
assert np.all(Ax[ix:ix + Bx.shape[0], iy:iy + Bx.shape[1]] == Bx)
delimiter
result.append(buff)
delimiter
self.host = host
delimiter
print(repr(e))
delimiter
[-2.0, 0.0, -2.0, 2.0, 10.0, 4.0]
delimiter
loop.run_until_complete(example())
delimiter
k.open()
delimiter
myseq = tuple(sorted((k,) + v for k, v in mydict.items()))
delimiter
r1 = conn.getresponse()
delimiter
time.sleep(0.1)
delimiter
n2 = np.random.random(N)
delimiter
self.username
delimiter
ax.bar(pos, vals, width=width, label=cond, color=cm.Accent(float(i) / n))
delimiter
match.index[0]
delimiter
df.T
delimiter
can.save()
delimiter
str(digit)
delimiter
output = []
delimiter
c += 1
delimiter
fig, ax = plt.subplots(1, 1)
delimiter
old_settings = termios.tcgetattr(sys.stdin)
delimiter
managed = False
delimiter
clipboard.SetText(data)
delimiter
module1.Relay(GPIO)
delimiter
max_step = 100
delimiter
l += 1
delimiter
server.bind((host, port))
delimiter
dictionary[parts[0]] += 1
delimiter
dd[v].append(k)
delimiter
argsdict[arg].append(val)
delimiter
Base.metadata = metadata
delimiter
data_sum = data.sum()
delimiter
print(len(allkitties))
delimiter
show(p)
delimiter
N = int(sys.argv[1])
delimiter
zip(a, b)
delimiter
self._ref2 = ref2
delimiter
self.my_setting = my_setting
delimiter
Y.__init__(self)
delimiter
a = A()
delimiter
matches.append([value, values[x]])
delimiter
layout.addWidget(button)
delimiter
dmin = len(trans[0])
delimiter
df
delimiter
sys.stdout.writelines(merge(key=second_column, *sorted_files))
delimiter
process.poll()
delimiter
[]
delimiter
yaml.load(_)
delimiter
fh.flush()
delimiter
{NULL, NULL}
delimiter
YourObject.id.generation_time
delimiter
session = sessionmaker(bind=engine)()
delimiter
image_type, width, height = getimageinfo.getImageInfo(imgdata)
delimiter
self.tag = tag
delimiter
sleep(0.1)
delimiter
df.dot(s)
delimiter
file1.write(toFile)
delimiter
o = Observable()
delimiter
client_sock.close()
delimiter
two_d[np.ix_(first, second)]
delimiter
[1, 1, 1]
delimiter
count += 1
delimiter
periods = dict(zip(times, labels))
delimiter
path_file = os.path.join(path_file_dir, file)
delimiter
diag = np.arange(M.shape[1])
delimiter
[a, b]
delimiter
i += 1
delimiter
tidx + pd.Timedelta(days=15)
delimiter
timeit(lambda : list(fulldict.keys()))
delimiter
self.current - 1
delimiter
L = Linitial
delimiter
replace(l, 1, 7)
delimiter
raw_values = [o.i for o in MyList]
delimiter
os.remove(new)
delimiter
m.add(k, dict1.get(k))
delimiter
d1[1]
delimiter
first_col = np.array([1, 0, 0, 0])
delimiter
parser = argparse.ArgumentParser()
delimiter
self.__keys.append(key)
delimiter
X.toarray()
delimiter
b[a[:, (0)], a[:, (1)]] = 10
delimiter
b = np.random.normal(0, 1, (N, M)).mean(axis=1)
delimiter
xd = np.linspace(0, 15, 100)
delimiter
print(sheet[0][0])
delimiter
df.value1 = df.value1.round()
delimiter
dis.dis(a)
delimiter
procs = [Process(target=f, args=(d,)) for _ in range(10)]
delimiter
fh.write(str(buf))
delimiter
screen.blit(draw_me, backdrop)
delimiter
average = total / count
delimiter
sum
delimiter
fig.subplots_adjust(hspace=0, wspace=0, top=0.925, left=0.1)
delimiter
pprint(d)
delimiter
hog = cv2.HOGDescriptor()
delimiter
dicc = parse_qs(request.query_string)
delimiter
df
delimiter
tksupport.install(root)
delimiter
sys.path.insert(0, mysite)
delimiter
hours = df_energy2.index.hour
delimiter
img1 = cv2.imread(fn1, 0)
delimiter
picklable.append((r, p, code))
delimiter
self.s_in.close()
delimiter
print(t, expr.parseString(t).asList())
delimiter
a.x
delimiter
lists = sorted([sorted(x) for x in lists])
delimiter
print(i)
delimiter
wfloat = wally.astype(float)
delimiter
h1 & 4294967295
delimiter
st.norm.interval(0.95, loc=np.mean(a), scale=st.sem(a))
delimiter
X = np.ones((n, 2))
delimiter
my_second_egg = my_related_object.egg
delimiter
print(p.mass, p.position, p.velocity, p.force)
delimiter
proc.start()
delimiter
clf.fit(X.iloc[(train_idx), :], y[train_idx])
delimiter
groups = list(groups)
delimiter
ca_two = str(sys.argv[2])
delimiter
print(self.bar)
delimiter
df_ordered_multi_cols = pd.DataFrame(df_ori, columns=multi_cols)
delimiter
start_time = timeit.default_timer()
delimiter
actcount += 1
delimiter
d = {key: a.rx2(key)[0] for key in a.names}
delimiter
_srcfile = os.path.normcase(_srcfile)
delimiter
python - i
delimiter
output = p.communicate()
delimiter
results.append(result)
delimiter
p.communicate()
delimiter
print(ET.fixtag(some_node.tag, NS_MAP))
delimiter
cookies = requests.utils.cookiejar_from_dict(pickle.load(f))
delimiter
assert abs(new_version - old_version) == 1
delimiter
index_start = df.index[-1] + 1
delimiter
child = pexpect.spawn(ssh_cmd, timeout=timeout)
delimiter
id = Column(Integer, primary_key=True)
delimiter
sparse + 0.228869672266
delimiter
fig = plt.figure()
delimiter
self.fed.append(d)
delimiter
eventloop.run_forever()
delimiter
f(x) ** 2
delimiter
a = [(lambda : i) for i in range(5)]
delimiter
str(self.value)
delimiter
print(mat.A)
delimiter
a += b
delimiter
tok_gen = tokenize.generate_tokens(sys.stdin.readline)
delimiter
my_mesh.BeginPolygon()
delimiter
process = sp.Popen(shlex.split(cmdline), stdout=sp.PIPE, stderr=sp.PIPE)
delimiter
os.makedirs(dirmk)
delimiter
d = collections.defaultdict(dict)
delimiter
outcsv.writerow(x[0] for x in cursor.description)
delimiter
cmd.append(command)
delimiter
axes = fig.add_axes([0.1, 0.1, 0.8, 0.8])
delimiter
clf = AdaBoostClassifier(n_estimators=2)
delimiter
mymod = importlib.import_module(module)
delimiter
ipython - noconfirm_exit
delimiter
dev2 = os.stat(file2).st_dev
delimiter
loop.run_until_complete(main())
delimiter
print(parser.print_help())
delimiter
A2[mask] = 0
delimiter
res = urllib.request.urlopen(req)
delimiter
_dict = simplejson.loads(json_data)
delimiter
a = [4, 5, 0, 0, 6, 7, 0, 1, 0, 5]
delimiter
lines = f.readlines()
delimiter
blob_info = blobstore.BlobInfo.get(resource)
delimiter
seq[start], seq[end - 1] = seq[end - 1], seq[start]
delimiter
random.shuffle(sequence_containing_z_vals)
delimiter
CALLBACK = CFUNCTYPE(c_int, c_void_p, POINTER(c_char), c_long)
delimiter
tree = chunker.parse(postoks)
delimiter
get_color(0.7)
delimiter
q = int(a / b)
delimiter
open_file.close()
delimiter
content = f.read()
delimiter
multiprocessing.Process.__init__(self)
delimiter
keys.append((h, r))
delimiter
sys.getsizeof({})
delimiter
print(pd.factorize(np.hstack(df.values)))
delimiter
[babel.extractors]
delimiter
L = Linitial[:]
delimiter
gridsize = (len(lines) - 2) / 2
delimiter
self.root = tk.Tk()
delimiter
Py_Initialize()
delimiter
my_view
delimiter
raise StopIteration
delimiter
pylab.grid(True)
delimiter
frame = bytearray()
delimiter
line = plt.plot(list(range(10)))
delimiter
np.random.seed(1)
delimiter
self.errors = errors
delimiter
sys.path.insert(0, project_dir)
delimiter
z = (df != 0) * 1
delimiter
bool(p)
delimiter
a[0] = 7
delimiter
[flake8]
delimiter
print(s)
delimiter
request = urllib.request.Request(my_url, data)
delimiter
context = cairo.Context(surface)
delimiter
(i & (1 << length - 1) - 1) << 1 | i >> length - 1
delimiter
thedir = sys.argv[1]
delimiter
print(x)
delimiter
assert set(x.id for x in all_) == to_load
delimiter
d = defaultdict(int)
delimiter
data = [tuple(x) for x in frame.values]
delimiter
print(IOB_to_tree(sentence))
delimiter
A.__init__(self)
delimiter
y()
delimiter
self.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
delimiter
get_class = lambda x: globals()[x]
delimiter
len(self.data)
delimiter
test_func()
delimiter
request.response.headerlist.extend(headers)
delimiter
cv2.putText(out, string, (x, y + h), 0, 1, (0, 255, 0))
delimiter
ranges.pop(0)
delimiter
idx = c.index((1, 4))
delimiter
a = math.cos(theta / 2.0)
delimiter
result = {}
delimiter
output = StringIO.StringIO()
delimiter
1, 0, 1
delimiter
f = figure(figsize=(6.2, 5.6))
delimiter
ret.append((point[0], point[1] - 2 * (point[1] - BOTTOM_LEFT[1])))
delimiter
self.q = Queue(1)
delimiter
draw.text((5, 0), title, font=font, fill=(0, 0, 0))
delimiter
ax.set_yticks([])
delimiter
cache = Cache()
delimiter
db.run_in_transaction(_tx)
delimiter
zipdata = result.read()
delimiter
fig = plt.figure()
delimiter
drvs
delimiter
cv.WriteFrame(writer, frame)
delimiter
lambda x: a * x + b
delimiter
base_close += timedelta(days=1)
delimiter
mouseclickdn(60, 100)
delimiter
queue = collections.OrderedDict((key, queue[key]) for key in keys)
delimiter
type(xml.__loader__) in CUSTOM_LOADERS
delimiter
unqID_mask = np.append(True, np.any(np.diff(sorted_coo, axis=0), axis=1))
delimiter
xs, ys = np.meshgrid(x, y)
delimiter
np.sum(np.abs(x - y) > 1)
delimiter
gene = this_re.group(1)
delimiter
self.view.setSortingEnabled(True)
delimiter
next(b)
delimiter
layout = QtGui.QHBoxLayout()
delimiter
parser.config_files.extend(values)
delimiter
y = np.arange(len(x))
delimiter
spl = [func(x) for x in inputText.split()]
delimiter
photos = json.loads(parsed_photos[0])
delimiter
instance.app.amqp.queues.select_add(queue)
delimiter
output += cssin.read()
delimiter
print(pruned)
delimiter
y = np.linspace(0, 100, 100)
delimiter
writer = csv.writer(fl)
delimiter
print(b, repr(b))
delimiter
print(list(generator_overlap_split_list(l, s)))
delimiter
mySocket.connect((SERVER_IP, PORT_NUMBER))
delimiter
print(response.read())
delimiter
sampled_df = df.ix[rows]
delimiter
f(kw)
delimiter
qry = session.query(Parent)
delimiter
diff = np.diff(a, axis=0)
delimiter
stripped_line = line.strip()
delimiter
self.wrong_values = []
delimiter
method = getattr(self.data, name)
delimiter
datetime.datetime.strptime(s_date, pattern).date()
delimiter
[4, 2, 9]
delimiter
print([toHex(x) for x in numbers])
delimiter
print(value)
delimiter
out = merge(left, right)
delimiter
print(gen_hex_colour_code())
delimiter
parent = Parent()
delimiter
func2 = somedecorator(func2)
delimiter
args = parser.parse_args()
delimiter
urlretrieve(image_url, outpath)
delimiter
xml_dict(childnode, name, dic)
delimiter
index = np.searchsorted(data, values)
delimiter
print(s)
delimiter
dwg.save()
delimiter
ax1 = np.histogram2d(x_data, y_data, bins=bins)
delimiter
b = set([9, 7, 6, 5, 1, 0])
delimiter
sum_a[i] += x
delimiter
l_y.append(s[-1])
delimiter
list1 = [[-2.0, 0.0, -2.0, 2.0, 10.0, 2.0], [-1.0, 0.0, 2.0, 1.0, 5.0, 4.0]]
delimiter
find_intersect(x_down, y_down, x_up, y_up)
delimiter
Deidre
delimiter
Felicity
delimiter
Harriet
delimiter
Craig
delimiter
Greg
delimiter
Edward
delimiter
Andrew
delimiter
numbers = sum(c.isdigit() for c in s)
delimiter
sudokupossibilities[1][1][1] = 2
delimiter
predicted = classifier.predict(X_test)
delimiter
[7, 2, 6]
delimiter
fig, axes = plt.subplots(1, len(df.columns))
delimiter
pow(2, 2)
delimiter
LR_Multi.fit(X_stack[:, :half], y_stack[:, :half])
delimiter
do_something_with(line)
delimiter
print(i)
delimiter
employee = sc.parallelize(employee).map(lambda e: (e[1], e[0]))
delimiter
print(bool(Something()))
delimiter
theta %= 2 * np.pi
delimiter
darray = np.array([distances(s) for s in new_shapes])
delimiter
print(x.format(42))
delimiter
f.write(s)
delimiter
assert len(c) == 2
delimiter
ax = plt.gca()
delimiter
xyz = [0, 12, 4, 6, 242, 7, 9]
delimiter
t()
delimiter
fig = plt.figure()
delimiter
python - V
delimiter
rolled_view = np.transpose(coords, rolled_axes)
delimiter
net.layers[1].blobs[0].data.shape
delimiter
humansize(1049)
delimiter
groups[groupcol].add(col)
delimiter
self.obj[frozenset((idx,))]
delimiter
myseries_three.loc[0:2]
delimiter
itemset = set(randint(0, X) for _ in range(100000))
delimiter
self.inspector.setPage(self.view.page())
delimiter
tri = qhull.Delaunay(xyz)
delimiter
print(team([1, 1, 50, 50, 50, 1000]))
delimiter
mimedata = QtCore.QMimeData()
delimiter
label_height, label_standoff, label_text_align, label_text_alpha
delimiter
setterific(larry) == setterific(moe)
delimiter
a = numpy.arange(1, 15)
delimiter
zip_longest(fillvalue=fillvalue, *args)
delimiter
frame = Tkinter.Frame(root)
delimiter
a
delimiter
x[1][2]
delimiter
soup = BeautifulSoup(str(content))
delimiter
sleep(time)
delimiter
raise ImportError(msg)
delimiter
attr(*args, **kwargs)
delimiter
__all__ = []
delimiter
DEDENT
delimiter
f.close()
delimiter
next(reader)
delimiter
b = np.array([1, 2, np.NaN])
delimiter
ax2.xaxis.set_major_formatter(FuncFormatter(fmt_zToEta))
delimiter
class_name = db.Column(db.String(128), unique=True)
delimiter
console_handler = logging.StreamHandler()
delimiter
app = create_app(logger)
delimiter
threading.Thread(target=show_progress_B, args=(win,)).start()
delimiter
df
delimiter
decimal.Decimal(-1200)
delimiter
PyArray_Descr * descr
delimiter
stream.render(out=f)
delimiter
Xc.setdiag(0)
delimiter
l[0]
delimiter
s = requests.Session()
delimiter
print(config_root.log_file)
delimiter
plt.colorbar(im)
delimiter
set_4 = {100, 20, 40, -40, 60, -20, -80, 0, -60, -100}
delimiter
c = Counter(elem[0] for elem in list1)
delimiter
minm = argrelextrema(y, np.less)
delimiter
print(itteration)
delimiter
m1 += np.bincount(a + m.shape[1] * b, minlength=m1.size)
delimiter
itertools.cycle.__init__(self, self._iterable)
delimiter
[0, 1, 0]
delimiter
oaischema = etree.XMLSchema(schema_doc)
delimiter
(4, 1)(4, 1)
delimiter
most_frequent(y for x, y in Ns[:self.k])
delimiter
round(f)
delimiter
df
delimiter
word_counts
delimiter
good.append([m])
delimiter
plt.scatter(roc_x, roc_y)
delimiter
view.setRootIndex(model.index(QDir.homePath()))
delimiter
response = opener.open(request)
delimiter
pstack.append(i)
delimiter
newlist.append([val])
delimiter
Base * get_base()
delimiter
print(dsum(x, y))
delimiter
arr = [[[(i + j + k) for i in range(5)] for j in range(5)] for k in range(5)]
delimiter
HOST = socket.gethostbyname(socket.gethostname())
delimiter
l = [list(g) for k, g in groupby(x, lambda x: x.isalpha())]
delimiter
_to_etree(e, ET.SubElement(root, k))
delimiter
slots = [(e if e else next(it_A)) for e in slots]
delimiter
rpath = rpath[4:]
delimiter
module = new_module(name)
delimiter
df1 = df1.stack()
delimiter
self.fig = f
delimiter
l = l[1:]
delimiter
self.button.customContextMenuRequested.connect(self.on_context_menu)
delimiter
view.setModel(model)
delimiter
print(key, mydict[key])
delimiter
colormap.SetHueRange(0.667, 0.0)
delimiter
context[self.attr_name]
delimiter
f.write(bitbuf)
delimiter
com.open()
delimiter
widget.set_size_request(200, 200)
delimiter
data.shape
delimiter
seaborn.set()
delimiter
pygame.draw.rect(windowSurface, self.color, self.rect)
delimiter
df
delimiter
foo.set_a_to_three(globals(), locals())
delimiter
rdd = sparkdf.rdd.zip(new_col).map(process)
delimiter
im = Image.open(image_io)
delimiter
HAVE_CYTHON = False
delimiter
plt.xlim(0, 8000)
delimiter
print(b.text)
delimiter
user = oauth.get_current_user(scope)
delimiter
pylab.ion()
delimiter
flat_for(a, lambda x: x + 5)
delimiter
min_x, max_x, min_y, max_y, min_z, max_z = minmaxes(triplets)
delimiter
user = User.objects.get(email=email)
delimiter
[-1, -1, -1, -1, -1]
delimiter
np.save(f, b)
delimiter
number % 2 != 0
delimiter
foo()
delimiter
self.data = str
delimiter
CELL_LIST.append(Cell(v == 1, x, y))
delimiter
ax = plt.subplot(111)
delimiter
callable(object) == True
delimiter
javascript_html = Render(url).html
delimiter
e[0]
delimiter
obj[key] = mod.__dict__[key]
delimiter
b = list(a + i for i in range(10))
delimiter
b[:] = 0
delimiter
self._name = name
delimiter
m, n = len(seq) + 1, len(sub) + 1
delimiter
kml = simplekml.Kml()
delimiter
path = str(path, sys.getfilesystemencoding())
delimiter
w = wmi.WMI()
delimiter
self.db = db
delimiter
fmstr.format(*args)
delimiter
clf2 = joblib.load(filename)
delimiter
easy_csv.append([row_preprocessed])
delimiter
[(splt[0], splt[1]) for s in strings for splt in [s.split()]]
delimiter
f.write(output_from_parsed_template)
delimiter
primeList.append(num)
delimiter
7, 8, 9
delimiter
counts[name] += 1
delimiter
a = object()
delimiter
traceback.print_exc()
delimiter
x = np.eye(2)
delimiter
a, _, _ = numbers()
delimiter
mask[indices] = False
delimiter
PQRGQQGTSQEGEQKLQNILEIAPRKASSQPGRFCPFHSLAQGATSPSRKDTMSTESMIRDVELAEEALPQKMGGFQNSRRCLCLSLFSFLLVAGATTLFCLLNFGVIGPQRDEKFPNGLPLISSMAQTLTLRSSSQNSSDKPVAHVVANHQVEEQLEWLSQRANALLANGMDLKDNQLVVPADGLYLVYSQVLFKGQGCPDYVLLTHTVSRFAISYQEKVNLLSAVKSPCPKDTPEGAELKPWYEPIYLGGVFQLEKGDQLSAEVNLPKYLDFAESGQVYFGVIAL * REWVFIHSLPSPHSDPFTLTPLLSTPQSPQSVSF * LRKGIMAQGPTLCSELSTTTQKHKMLGQ * PGLWASHAPPSRTQMGFPNSLEPRMSIPEFCKGRVVRLPLSQNEAG * DLRPSYLQTFPDSSLRCNAQPSSQSQPPSIYICTYYLLFIYYLFICL * MYLFGRPGCPGGPSVGSCLQTDMFSVKTELSCPHLASLPCCLLFCLCLKQNIYLTQLS ** R * FGDQAVATSLNLCSPREP * L * SPYGSLREI
delimiter
indexes[i] = reference[data[i]]
delimiter
df.index.dtype
delimiter
x = 2
delimiter
os.startfile(command[myIraw_inputput][1])
delimiter
self.trell.append([word, copy.deepcopy(temp)])
delimiter
element.tag
delimiter
p.start()
delimiter
a = tf.Variable(init_a)
delimiter
table[0]
delimiter
data = np.genfromtxt(f, usecols=list(range(5, num_cols)))
delimiter
2
delimiter
licenses.add(get_plate())
delimiter
self.my_table.insert(dict(item))
delimiter
s.add(2)
delimiter
loop.run_forever()
delimiter
wrapper
delimiter
o.date = datetime(2012, 4, 15, 1, 0, 2)
delimiter
False
delimiter
[data[b:e] for b, e in [(spl[i - 1], spl[i]) for i in range(1, len(spl))]]
delimiter
dsp.setparameters(AFMT_S16_NE, nc, fr)
delimiter
x = data[:, (0)]
delimiter
uniqueDF = df.drop_duplicates()
delimiter
AB = [(A[i] + B[i]) for i in range(min(len(A), len(B)))]
delimiter
{{YOUR_CUSTOM_SETTING}}
delimiter
zlib.decompress(strobj, 15 + 16)
delimiter
ret.insert(0, r)
delimiter
tweets = line_data[1:-1]
delimiter
summed_vals = np.bincount(id_arr, count_arr)
delimiter
f.read()
delimiter
plt.hist(data, 50)
delimiter
np.uint64
delimiter
chart_toolbar.SetSize(wx.Size(fw, th))
delimiter
b[0]
delimiter
SIGN_CHARACTER + num_encode(-n)
delimiter
fn.__dict__.update(f.__dict__)
delimiter
plt.show()
delimiter
counts.update_point(r, 1)
delimiter
DEBUG = True
delimiter
print(self.a * self.b * self.c)
delimiter
self.socket.listen(128)
delimiter
blobs = BlobInfo.all().fetch(500)
delimiter
s = pd.Series([np.NaN, np.NaN, 1.0])
delimiter
writer = csv.writer(foutput)
delimiter
themax = arr[0]
delimiter
index = bisect([i.lower() for i in my_list], insert_string.lower())
delimiter
app_log.removeHandler(hdlr)
delimiter
items = collections.defaultdict(list)
delimiter
True, s[2:]
delimiter
print(args)
delimiter
np.where(data[:, (1)] == yr + 72)
delimiter
print(data)
delimiter
print(row[1])
delimiter
server.close()
delimiter
start = dt.datetime.now()
delimiter
foo.bars = [1, 2]
delimiter
df
delimiter
plt.show()
delimiter
main_loop = tornado.ioloop.IOLoop.instance()
delimiter
win.show_all()
delimiter
bcut.on_clicked(_yes)
delimiter
mergedlist = listone + listtwo
delimiter
length = len(list1)
delimiter
indices.sort(axis=axis)
delimiter
self.a = a
delimiter
f1.close()
delimiter
print(df)
delimiter
self.wfile.flush()
delimiter
session.add(prod)
delimiter
a = np.rint(x)
delimiter
d.clear()
delimiter
PROJECT_PATH = os.path.realpath(os.path.dirname(__file__))
delimiter
target_file_name = os.path.basename(filename)
delimiter
sorted_eigvecs = eigvecs[:, (eig_idx)]
delimiter
A2 = np.random.randint(-4, 10, size=(100000, 100))
delimiter
True
delimiter
ZZ.old_poly_ring(x).ideal(x ** 2 + 1)
delimiter
mask = np.tile(np.any(im, axis=0), (2,))
delimiter
the_files.append(target_file_name)
delimiter
x = int(x)
delimiter
ret.append((point[0] - 2 * (point[0] - BOTTOM_LEFT[0]), point[1]))
delimiter
self.widget.see(END)
delimiter
app.quit()
delimiter
fn
delimiter
list(a)
delimiter
group = list(group)
delimiter
k, v = s.split()
delimiter
a = np.random.randint(0, 100, 100000)
delimiter
time.sleep(SECONDS)
delimiter
odd.append(num)
delimiter
a = df.t.values
delimiter
fh.level = logging.WARNING
delimiter
print(row)
delimiter
self.render_to_response(context)
delimiter
sys.exc_info()[1]
delimiter
number = int(eval(input()))
delimiter
do_some_stuff(k, v)
delimiter
fitfunc = lambda params, x: params[0] * x
delimiter
self.data[dataKey].remove(item)
delimiter
PCO_api.PCO_OpenCamera(ctypes.byref(camera_handle), 0)
delimiter
np.array(list(itertools.zip_longest(fillvalue=0, *v))).T
delimiter
count += 1
delimiter
d = np.empty(n)
delimiter
tree = etree.HTML(doc)
delimiter
name[0][0]
delimiter
btn.Bind(wx.EVT_BUTTON, self._onShowHelp)
delimiter
fig = Figure()
delimiter
client = oauth.Client(consumer)
delimiter
suite = indentedBlock(stmt, indentstack, True)
delimiter
mydict[index] = +1
delimiter
mw.ui.plotWidget.setGeometry(1, 1, s.width() - 2, s.height() - 2)
delimiter
functools.update_wrapper(wrapper, fn[0])
delimiter
obj.b()
delimiter
is_new_style_class(int)
delimiter
nodes.append(Node(ndx[k], []))
delimiter
J = sparse.coo_matrix((np.ones_like(ixs, int), (np.zeros_like(ixs, int), ixs)))
delimiter
fig, ax = plt.subplots()
delimiter
divisors = []
delimiter
m1.create_all(conn)
delimiter
random_array = np.array(random_array, dtype=np.uint8)
delimiter
raise sqlalchemy.exc.DisconnectionError
delimiter
weeks.count()
delimiter
d1[start:end].value_counts().index[0]
delimiter
x[1, 0, 2]
delimiter
hash(self.item1) * hash(self.item2)
delimiter
G.add_edges_from(megalist)
delimiter
row = next(itertools.islice(csv.reader(f), row_number, row_number + 1))
delimiter
cj = cookielib.CookieJar()
delimiter
first_list = [1, 2, 2, 5]
delimiter
user = User()
delimiter
print(df_expanded)
delimiter
ax.w_xaxis.line.set_color((1.0, 1.0, 1.0, 0.0))
delimiter
pygame.quit()
delimiter
number = eval(input())
delimiter
1, 1, 0
delimiter
o_func1()
delimiter
set([t.id for t in prerequisites_complete]) == set([a.id, b.id])
delimiter
new_lock.acquire()
delimiter
abspath = os.path.join(dirpath, f)
delimiter
_PIDS.append(pid)
delimiter
print(f)
delimiter
self._inner.insert(index, item)
delimiter
w.wcs_pix2world(100.0, 100.0, 1)
delimiter
value_to_key[v].append(k)
delimiter
len(bin(1000)) - 2
delimiter
do_something_with(line)
delimiter
l[:] = (i for i in l if counts[i] == 1)
delimiter
a.sort(reverse=True)
delimiter
ipaddress.ip_address(str)
delimiter
wnd.show_all()
delimiter
dircontainingqueuedotyaml = os.path.dirname(os.path.dirname(__file__))
delimiter
CUDA_ENABLE_CURAND = True
delimiter
data = Column(String)
delimiter
settingstime_zone = timezone(settings.TIME_ZONE)
delimiter
print(d.pop(min(d, key=d.get)))
delimiter
y = np.add.accumulate(x)
delimiter
ax2 = np.histogram2d(x_data, z_data, bins=bins)
delimiter
self.session.query(self.model).filter(self.model.paid == True)
delimiter
DF.columns = DataFrame(np.matrix(cursor.description))[0]
delimiter
db.create_all()
delimiter
app.exec_()
delimiter
os = __init__.os
delimiter
splitS.append(s[start + 1:end])
delimiter
self.subframe.Close()
delimiter
fig, ax = plt.subplots()
delimiter
self.b.follow_link(link)
delimiter
float(n_ab) / (n_a + n_b - n_ab)
delimiter
opener = urllib.request.build_opener(auth_handler)
delimiter
plt.subplot(2, 1, 2)
delimiter
data = json.load(infile)
delimiter
idx = a.cumsum()
delimiter
time.sleep(1)
delimiter
fig, ax = plt.subplots()
delimiter
diff[key] = merge(lhs[key], rhs[key])
delimiter
f(*[v for _, v in sorted(newdict.items())])
delimiter
show(fig)
delimiter
a = [1, 2, 5, 1, 6]
delimiter
Ihmf = (Ihmf - np.min(Ihmf)) / (np.max(Ihmf) - np.min(Ihmf))
delimiter
fig.add_subplot(axes=self.traceax)
delimiter
parent_map = dict((c, p) for p in tree.getiterator() for c in p)
delimiter
d = collections.defaultdict(list)
delimiter
dict_out[key] = value
delimiter
d.dtype.names
delimiter
shift_idx1 = np.append(0, np.where(np.diff(idx1[:, (0)]) > 0)[0] + 1)
delimiter
s.value_counts()
delimiter
self.smtp.close()
delimiter
print(x.format(42))
delimiter
g(*args)
delimiter
raise NotImplementedError()
delimiter
Py_Initialize()
delimiter
p_guess = np.median(x), np.median(y), 1.0, 1.0
delimiter
tokens = nltk.word_tokenize(text)
delimiter
fig = pyplot.figure()
delimiter
print(list(squares(4, 16)))
delimiter
results = zip([x[0] for x in results], smoothed)
delimiter
start_of_week = today - start_delta
delimiter
words += len(wordslist)
delimiter
parse.py
delimiter
self.__fpointer
delimiter
a = a[::-1]
delimiter
str(self.author)
delimiter
fig, ax = plt.subplots()
delimiter
isinstance(value, CheckboxInput)
delimiter
x += N
delimiter
array([10, 14, 15, 56]),
delimiter
original_rows = [[1, 0, 1], [0, 0, 0], [1, 0, 0]]
delimiter
state = models.CharField(max_length=25)
delimiter
b = np.array([4, 5])
delimiter
row.append(DataReader[j])
delimiter
writeFileObject.close()
delimiter
(1 << x) - 1
delimiter
xz = NNN.mean(axis=1)
delimiter
func()
delimiter
num = 9
delimiter
a1_edit.textChanged.connect(lambda text: self.TxtChanged(a1_edit, text))
delimiter
ypos = np.searchsorted(x[xsorted], y)
delimiter
self.sizer.Add(self.button, (2, 0), (1, 2), flag=wx.EXPAND)
delimiter
self.log_queue.append(self.format(record))
delimiter
print(name)
delimiter
print(args_values)
delimiter
scores.append(subcheckio(nstones, left + stones[0], rite))
delimiter
signal.signal(signal.SIGTERM, term)
delimiter
retstr.close()
delimiter
print(x, y, x * y)
delimiter
ax.set_xticks(ind + width)
delimiter
instance.save()
delimiter
__builtins__.max
delimiter
os.chdir(SCRIPT_DIR)
delimiter
po.join()
delimiter
random.shuffle(sequence_containing_y_vals)
delimiter
print(gpsp.get_current_value())
delimiter
sniffer = csv.Sniffer()
delimiter
req.write(resp.data)
delimiter
beta = cov[1, 0] / cov[0, 0]
delimiter
coskew(df)
delimiter
es_logger.addHandler(es_logger_handler)
delimiter
plt.show()
delimiter
self.data = self.request.recv(1024).strip()
delimiter
plt.show()
delimiter
out.append(sum)
delimiter
c.style
delimiter
i = row[0]
delimiter
chr(ord(c) + x)
delimiter
driver.set_window_size(1400, 1000)
delimiter
geom.LineString(((1.1, 2.0), (0.1, 0.4))),
delimiter
sftp.stat(path)
delimiter
x.date()
delimiter
self.children.append(Tree(child, self))
delimiter
df
delimiter
json.JSONEncoder.default(self, obj)
delimiter
cookie = urllib.request.HTTPCookieProcessor(cookie_jar)
delimiter
rows.append(row)
delimiter
array[0]
delimiter
mylist = list(myiterator)
delimiter
b_mock = mock.Mock()
delimiter
self.queue = []
delimiter
xml_file.seek(0)
delimiter
print(20)
delimiter
buf = f.read(1024)
delimiter
fig = plt.figure()
delimiter
df = pd.read_csv(StringIO(temp))
delimiter
dialog.ShowModal()
delimiter
s.close()
delimiter
end = len(lst)
delimiter
raise RuntimeError(msg.format(this.db_name))
delimiter
parser = argparse.ArgumentParser()
delimiter
os.unlink(f.name)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
W = np.random.normal(size=(X.shape[1], 1))
delimiter
age = models.IntegerField()
delimiter
type.__new__(cls, name, bases, dict_)
delimiter
pool = mp.Pool(num_processes)
delimiter
results = []
delimiter
B5 = A5 + B4
delimiter
l.append(k)
delimiter
words = [line.strip() for line in open(WORDS_FILENAME)]
delimiter
self.session_store = sessions.get_store(request=self.request)
delimiter
wx.EVT_TIMER(self, self.belltimer.GetId(), self.OnBellTimer)
delimiter
x
delimiter
consumer.start()
delimiter
height = math.sqrt(max(outer_radius * outer_radius - i * i, 0))
delimiter
ls[1] = int(ls[1])
delimiter
print(self.layers[2][0].value)
delimiter
print(A * x)
delimiter
layout.addWidget(button)
delimiter
formdata.update(data)
delimiter
b = np.random.choice(vals, size=w)
delimiter
property1 = ndb.StringProperty()
delimiter
4, 5, 6
delimiter
b.sort()
delimiter
images = ImageItem.objects.filter(user=user)
delimiter
donut = numpy.logical_and(circle < 6400 + 60, circle > 6400 - 60)
delimiter
rng[argunsort(np.argsort(l))]
delimiter
all(a == z)
delimiter
resultList = [1, 2, 5, 7, 9]
delimiter
self._store_aggregation_timer.start()
delimiter
sortkeys = {v: k for k, v in enumerate(b)}
delimiter
x._get_numeric_data().apply(axis=0, func=np.log2).mean()
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
pad(a, b, offset)
delimiter
c = Cl()
delimiter
filename = os.path.abspath(sys.argv[1])
delimiter
errors.append((srcname, dstname, str(why)))
delimiter
DataFrame(simpleObject.exe(), ssqlContext)
delimiter
plt.show()
delimiter
self.addLine(xc, 0, xc, height)
delimiter
path = self.args[0]
delimiter
s.index = s.index.droplevel(-1)
delimiter
p.terminate()
delimiter
values = map(float, f2.read().split())
delimiter
X, Y = np.meshgrid(np.linspace(0, 5, 100), np.linspace(0, 5, 100))
delimiter
print(c)
delimiter
self.xoo = x
delimiter
os.path.dirname(os.path.realpath(sys.argv[0]))
delimiter
im = Image.open(old_image_path)
delimiter
thread = threading.Thread(target=your_code)
delimiter
result.append([l])
delimiter
l[0]
delimiter
mu, sd = 0, 1
delimiter
f(1, 2)
delimiter
self
delimiter
result[i] = np.random.hypergeometric(colors[i], remaining[i + 1], m)
delimiter
a[0].append(7)
delimiter
N(h, 6, 9)
delimiter
stud = session.merge(stud)
delimiter
Q.set_UVC(U, V)
delimiter
setattr(instance, key, value)
delimiter
print((event.x, event.y))
delimiter
p = ProcessPoolExecutor(2)
delimiter
json.loads(responseJSON)
delimiter
ax = pylab.gca()
delimiter
cnx.close()
delimiter
content = json.load(file_handler)
delimiter
df2[needed_columns] = df.reindex(index=df2.index, columns=needed_columns)
delimiter
timestamp1 = time.mktime(datetime.now().timetuple())
delimiter
driver.get(pageLink)
delimiter
ModelForm = self.get_form(request)
delimiter
d = collections.defaultdict(list)
delimiter
func(self, *args, **kwargs)
delimiter
dict = pickle.load(file)
delimiter
x, y = cluster[:, (0)], cluster[:, (1)]
delimiter
links.append(t.post_set.distinct())
delimiter
QtGui.QMainWindow.__init__(self)
delimiter
arrA = np.asarray(A)
delimiter
timer2 = fig.canvas.new_timer(interval=50)
delimiter
odict[key] = odict.pop(key)
delimiter
self._rooms = {}
delimiter
row_result = []
delimiter
Atomic.register(str)
delimiter
True
delimiter
self.errors = np.ndarray(0)
delimiter
np.bincount(r, dists < R ** 2, minlength=tot_vec)
delimiter
p = Process(target=start_server)
delimiter
nextelem = next(licycle)
delimiter
second.append(4)
delimiter
n = np.random.randint(400, 800)
delimiter
--main.lua
delimiter
max_area = 0
delimiter
result.append(prev)
delimiter
log.close()
delimiter
a = read_dict_from_file()
delimiter
reactor.callLater(timeout, sendelayed, data)
delimiter
x_new = np.linspace(np.min(x), np.max(x), x.shape[0])
delimiter
output.append(letter)
delimiter
arr[97][99][98]
delimiter
node_data.append(node_to_dict(lnode, {}))
delimiter
numpy.mean(a), numpy.std(a)
delimiter
d.update(buf)
delimiter
sh = shape[0], a.shape[0] // shape[0], shape[1], a.shape[1] // shape[1]
delimiter
self.socket.sendto(data, self.address)
delimiter
elem.clear()
delimiter
res = np.zeros_like(arr, int)
delimiter
print(self.x)
delimiter
ans = []
delimiter
math.factorial(arg)
delimiter
self.window.set_border_width(10)
delimiter
X = np.random.randn(1000.0, 5)
delimiter
pubkey.verify_init()
delimiter
sentence_dict = {}
delimiter
sys.__excepthook__(type, value, tback)
delimiter
sizer.Add(btnGreen, 0, wx.ALL | wx.CENTER, 5)
delimiter
ax.plot(np.sin(x))
delimiter
reader = csv.DictReader(csvfile, dialect=dialect)
delimiter
data = urllib.parse.urlencode(values)
delimiter
a.printout()
delimiter
print(some_list)
delimiter
False
delimiter
items = match.groups()
delimiter
pre_save.connect(do_something, sender=MyModel)
delimiter
(14, 20)[14, 15, 16, 17, 18, 19]
delimiter
bri.close()
delimiter
iter(list(range(expecting(offset=0))))
delimiter
self.request = request
delimiter
print(yaml.dump(data))
delimiter
a[tuple(idx.T)] = [5, 10, 15]
delimiter
strings = [x for x in listEx if isinstance(x, str)]
delimiter
YAR002W = apoptosis
delimiter
parser = xml.sax.make_parser()
delimiter
newlist = [newdata[v] for v in ordering]
delimiter
tail = list(it)
delimiter
phi0 = a[-1]
delimiter
list_a = np.array([1, 2, 4, 6])
delimiter
self._sub_results[key]
delimiter
p = pyaudio.PyAudio()
delimiter
someModule.init(NECESSARY_DATA)
delimiter
out = np.zeros((m, n))
delimiter
x = pattern.sub(lambda i: substitutions.pop(0), some_text)
delimiter
data = np.random.normal(0, 1, (1, 5))
delimiter
cleaned_url
delimiter
C = list(Concate.keys())
delimiter
concurrent.futures.wait(futures)
delimiter
_value
delimiter
data = image.load()
delimiter
o = urlparse(url)
delimiter
k.release_key(k.left_key)
delimiter
math.pi
delimiter
i += 1
delimiter
json_obj = json.loads(res.content)
delimiter
stuff()
delimiter
fil = os.path.join(fol, fil)
delimiter
(x1 + x2) / 2.0
delimiter
t.set_position((shift, 0))
delimiter
colors = cm.RdYlBu(np.linspace(0, 1, n))
delimiter
L = [sample(xr, 5) for each in xr]
delimiter
app.run()
delimiter
zip_longest(fillvalue=fillvalue, *args)
delimiter
df2.iloc[0, 0] = 42
delimiter
True
delimiter
cursor.execute(some_statement)
delimiter
it = iter(data)
delimiter
slices = [sli for sli in (list(islice(it, 0, i)) for i in seclist)]
delimiter
list(d.items())
delimiter
a * np.exp(-b * x) + c
delimiter
s2str = series2.astype(np.str)
delimiter
MyList = [d[k] for k in [x, y, z]]
delimiter
exch(k, j)
delimiter
iters.remove(it)
delimiter
socket.listen(5)
delimiter
a[2] = 4
delimiter
sd.append(step_decay(len(self.losses)))
delimiter
range_end = 10 ** n - 1
delimiter
scat = ax.scatter(x, x, s, c)
delimiter
count = 0
delimiter
plt.legend()
delimiter
df = pd.concat([df, pd.read_csv(file)])
delimiter
example.get_time()
delimiter
Child.do_something()
delimiter
current.append(line.text)
delimiter
print(item)
delimiter
query = select(e for e in MyEntity if e.attr > f(x, 200) and g(x, e))
delimiter
dec(f, *args, **kwargs)
delimiter
v.clear()
delimiter
numpy.dot(a.T, numpy.cross(b, c))
delimiter
globals_.update((name, modict[name]) for name in names)
delimiter
results = []
delimiter
myData.close()
delimiter
print(multiprocessing.current_process())
delimiter
someDict.keys() & someSet
delimiter
app = web.application(urls, globals())
delimiter
items.append((lambda i: lambda : dump(i))(i))
delimiter
first_loop()
delimiter
deleteArtofWarCounter[word]
delimiter
scoreB += 1
delimiter
xs, ys = (x[0] for x in xs), (y[1] for y in ys)
delimiter
np.bincount(binNum)
delimiter
values.append(value)
delimiter
hxs = HtmlXPathSelector(response)
delimiter
o.writebits(ord(c), 7)
delimiter
db = conn.test
delimiter
alist == sorted(alist)
delimiter
mask = series1 > series2
delimiter
get_pickling_errors(K)
delimiter
ax.set_xlim(0.0, width_of_im)
delimiter
betas = rdf.apply(beta)
delimiter
self.process = self.process.load()
delimiter
self._box.close()
delimiter
response = br.submit()
delimiter
print([(int(col) if type(col) == float else col) for col in df.columns])
delimiter
self.errorcount = 0
delimiter
self.noisycount = 0
delimiter
x ** 2
delimiter
color_radios_ax = fig.add_axes([0.025, 0.5, 0.15, 0.15], axisbg=axis_color)
delimiter
raise SystemExit(0)
delimiter
groups = df.groupby(np.digitize(df.a, bins))
delimiter
mydict = {}
delimiter
target_f.write(_bytes)
delimiter
d1[k] = v2
delimiter
cartesian(a, b)
delimiter
gen = (x[0] for x in tups)
delimiter
yertle.end_poly()
delimiter
ModelAdmin.__bases__ = (CustomModelAdmin,) + ModelAdmin.__bases__
delimiter
self.lock = Lock()
delimiter
fg1 = bg1.apply(frame)
delimiter
myList.append(random.randint(0, 1))
delimiter
id(foo.__code__) == id(foobar.foo.__code__)
delimiter
db.create_all()
delimiter
0, 0, 4, 1, 0, 48, 8, 1, 64, 48, 7
delimiter
self.rectangle = numpy.hstack((self.pos, self.size))
delimiter
table.setdefault((w1, w2), []).append(word[0:-1])
delimiter
np.minimum(b, np.maximum(a, c))
delimiter
arg_test()
delimiter
swap(i, 0)
delimiter
object.__new__(Parent._children[k])
delimiter
f / 2.0 ** (len(b) - s) if s else f
delimiter
print(args.xDate)
delimiter
channel = self.ssh.invoke_shell()
delimiter
StringIO.__init__(self, stdout)
delimiter
depth = root[len(path) + len(os.path.sep):].count(os.path.sep)
delimiter
temp = map(str, L[j:])
delimiter
dis.dis(x)
delimiter
response = urllib.request.urlopen(req)
delimiter
deletetest[1]
delimiter
output = {}
delimiter
lis.append(x + y)
delimiter
False
delimiter
plt.subplot(211)
delimiter
m[int(y) + (x - 1) * N] = 1
delimiter
draw.line((0, i, 100, i), fill=random.randrange(256))
delimiter
crawler_process.start()
delimiter
primfac.append(n)
delimiter
b = np.diff(a)
delimiter
CLOCK_REALTIME = 0
delimiter
crawler.configure()
delimiter
print(p.map(lambda x: (lambda y: y ** 2)(x) + x, range(10)))
delimiter
t = f()
delimiter
df = DataFrame(table, columns=headers)
delimiter
positions = np.vstack([xx.ravel(), yy.ravel()])
delimiter
imshow(mycmap(Z1), extent=extent)
delimiter
a_sorted = a[idx]
delimiter
text
delimiter
exit(i)
delimiter
axes.plot(rx(t), ry(t), t)
delimiter
food_ctx.add((alice, likes, chocolate))
delimiter
mail.login(SMTP_USERNAME, SMTP_PASSWORD)
delimiter
new_command
delimiter
a.value
delimiter
draw()
delimiter
plt.show()
delimiter
self.text1.pack(side=TOP)
delimiter
client.add_flags(msg_ids, [SEEN])
delimiter
a * math.exp(-(x - b) ** 2 / (2 * c ** 2)) + d
delimiter
buf = f.read(8192)
delimiter
outputData.append(str(i))
delimiter
threshold(gray, bin, 127, 255, THRESH_BINARY_INV)
delimiter
df.Tm.cat.set_categories(sorter, inplace=True)
delimiter
clf.estimators_[1]
delimiter
dt = numpy.dtype(dt)
delimiter
disj_part = list(combinations(nots, k))
delimiter
b_ext = np.row_stack((b, b[:-1]))
delimiter
ss = sum((x - c) ** 2 for x in data)
delimiter
logger.addHandler(ch)
delimiter
len(self.datatable.columns.values)
delimiter
formatted(1e-21)
delimiter
self.lock = threading.Lock()
delimiter
print(solve([fCamel, fCamel, fCamel, gap, bCamel, bCamel, bCamel]))
delimiter
new_list = remove_empties(new_list)
delimiter
self.figure.canvas.flush_events()
delimiter
punkt.train(fin.read(), finalize=False, verbose=False)
delimiter
bucket = conn.get_bucket(bucket)
delimiter
print(q.get())
delimiter
im = [np.zeros((nums + 1, nums + 1)) for i in range(len(xs))]
delimiter
WORKDIR / srv
delimiter
deletea[k]
delimiter
lst_as_sets = map(frozenset, lst)
delimiter
socket.__file__
delimiter
os.seteuid(501)
delimiter
foo.BAR
delimiter
id = fields.String()
delimiter
self.close()
delimiter
m_list[i] = v.union(m_list.pop(j))
delimiter
mfg / recommend
delimiter
ln, = plt.plot([])
delimiter
ax = fig.add_subplot(111)
delimiter
print(self.data)
delimiter
bg.close()
delimiter
b = models.CharField(max_length=5)
delimiter
idx = bisect(fst, 2)
delimiter
[0, 0, 2]
delimiter
PnP = 1
delimiter
s[1:] + s[0]
delimiter
foo = Foo()
delimiter
sortToFile.write(line)
delimiter
cur_num = int(os.path.basename(files[-1])[6:-4])
delimiter
numbers = list(range(1, 11))
delimiter
p.leading = 120
delimiter
list(closed_range(10, 1, -1))
delimiter
d = visdel()
delimiter
km.fit(some_data)
delimiter
print(result)
delimiter
xy = np.vstack([x, y])
delimiter
memory_zip.write(parent_zip.open(child_zip_path).read())
delimiter
print(item)
delimiter
ws.set_paper(9)
delimiter
gx, gy = np.gradient(Z, 0.05, 0.05)
delimiter
beta = scipy.solve_triangular(R, Q.T.dot(y))
delimiter
diff[key] = list(set(a[key]) - set(b.get(key, [])))
delimiter
c1 = Counter(l1)
delimiter
fig, axs = plt.subplots(1, 2)
delimiter
n = len(archive.getnames())
delimiter
youtube_regex_match.group(6)
delimiter
user_fistName = db.Column(db.String(64))
delimiter
self.src[-2].insert(0, itemtoshift)
delimiter
pinf == ninf
delimiter
sh.write(m, 0, e1)
delimiter
a = [True, False, True]
delimiter
assert all(r1 == r2 for r1, r2 in zip(result, result2))
delimiter
scriptable = Scriptable()
delimiter
results.append(point)
delimiter
base64.decodestring(self._data)
delimiter
n = a.shape[0]
delimiter
seen.update(b)
delimiter
self._jrdd_deserializer = rdd._jrdd_deserializer
delimiter
func(*a_b)
delimiter
fig, ax = plt.subplots()
delimiter
instance.do_stuff()
delimiter
self.textLayout.setMargin(10)
delimiter
name, ext = os.path.splitext(os.path.basename(os.path.normcase(FILE_NAME)))
delimiter
diff.append(all)
delimiter
number = models.IntegerField(default=0)
delimiter
execute_from_command_line(sys.argv)
delimiter
self.roomManager.set_handlers()
delimiter
plt.savefig(*args, **kwargs)
delimiter
curl.setopt(pycurl.PROXYTYPE, pycurl.PROXYTYPE_SOCKS5)
delimiter
cls.INVITE_MESSAGE
delimiter
mail.send(fail_silently=fail_silently)
delimiter
-54.5
delimiter
-51.9
delimiter
data = self.fd.read(size)
delimiter
test(re)
delimiter
platform.python_compiler()
delimiter
PLT.show()
delimiter
f = figure(figsize=(10, 10))
delimiter
ind = np.nonzero(lo_or_hi)[0]
delimiter
data = connection.read()
delimiter
Makefile
delimiter
pl.show()
delimiter
indata[i] = (ctypes.c_double * 6)()
delimiter
l = [0] * n
delimiter
c = np.concatenate((a, b), axis=1)
delimiter
address = models.CharField(max_length=50)
delimiter
ttt = ttt + 1
delimiter
oldWindow.get_child().reparent(newWindow)
delimiter
next(f)
delimiter
isinstance(n, numbers.Number)
delimiter
results = []
delimiter
sys.stdout = s
delimiter
plt.yticks(np.arange(0.5, len(df.index), 1), df.index)
delimiter
kwargs.update(dtype=float128)
delimiter
print(any(list_item in fruit_dict2 for list_item in fruits))
delimiter
print(F)
delimiter
application.listen(8888)
delimiter
name = models.TextField(max_length=100)
delimiter
s = frozenset([1, 2])
delimiter
transitions = (array[1:] != array[:-1]).sum()
delimiter
q = q.prefetch(Order.supplier)
delimiter
sign(self.predict(inputs))
delimiter
list.selection_set(items[0])
delimiter
self.reader = csv.reader(self.f)
delimiter
x = x + K * y
delimiter
[1, 0, 2, 0]
delimiter
print(hello_world)
delimiter
queue.append((key, result))
delimiter
raise TimeoutError(error_message)
delimiter
fout.write(line)
delimiter
QtGui.QBrush(QtCore.Qt.darkBlue)
delimiter
xcenter = len(x) / 2
delimiter
np.random.seed(1)
delimiter
bar = staticmethod(foo)
delimiter
value = df.loc[5]
delimiter
Py_DECREF(pName)
delimiter
x = canvas.canvasx(event.x)
delimiter
[0, 1, 1, 1, 1],
delimiter
wrapper
delimiter
lens = np.array([len(item) for item in v])
delimiter
pf.close()
delimiter
array([4, 6])
delimiter
heatmap, xedges, yedges = np.histogram2d(x, y, bins=50)
delimiter
d[keys[-1]] = value
delimiter
key, val = line.split()
delimiter
[mo.group(1), mo.group(2)]
delimiter
w = dict((x, i) for i, x in enumerate(a))
delimiter
y = [(k, v) for k, v in x if d[v] == k]
delimiter
image.deleteThumbnail()
delimiter
ret = np.maximum.reduceat(csr_mat.data, csr_mat.indptr[:-1])
delimiter
c.my_property
delimiter
datetime.date(self.year, self.month, self.day)
delimiter
b = [[(y if y == max(x) else 0) for y in x] for x in a]
delimiter
start = time.time()
delimiter
print(test.f(666))
delimiter
print(x[5], x[8], x[9])
delimiter
--allow - all - external
delimiter
a = (10 * np.random.randn(10, 10) + 127).astype(np.uint8)
delimiter
do_three()
delimiter
roi = cv2.bitwise_and(source, source, mask=mask)
delimiter
PyErr_Print()
delimiter
self.addCleanup(patcher.stop)
delimiter
raise argparse.ArgumentError(self, message)
delimiter
G = nx.DiGraph(input_data.values)
delimiter
dict([(c, 0) for c in strg])
delimiter
y = np.repeat(y, 100, axis=0)
delimiter
data = json.loads(json_txt)
delimiter
grouped_by_soundex = defaultdict(list)
delimiter
0 - 0 - 0
delimiter
sparse_mult(a, b, [(0, 0), (0, 4999), (1999, 0), (1999, 4999)])
delimiter
c[:len(a)] += a
delimiter
self.regularization = j
delimiter
oldval = oldval * random()
delimiter
nums = map(bin, map(int, _in.read().split()))
delimiter
match = sm.find_longest_match(0, len(answer), 0, len(prediction))
delimiter
string
delimiter
a = []
delimiter
d = np.delete(a, np.where(mask == False))
delimiter
main()
delimiter
F0 = numpy.where(mask0, F_mid, F0)
delimiter
data = np.random.rand(nrows, ncols, nframes)
delimiter
response = urllib.request.urlopen(req1)
delimiter
X_train = Xy_train[:, 1:]
delimiter
msg
delimiter
(np.array(pts) ** 2).sum()
delimiter
df.AVG_GRADE = list(map(list, zip(df.HOUR, df.AVG_GRADE)))
delimiter
df
delimiter
np.savez(filename, **attributes)
delimiter
bytes = input()
delimiter
aapl_200ma = pd.rolling_mean(aapl, 200)
delimiter
raise ValueError()
delimiter
df = pd.DataFrame(np.random.choice([1, np.nan], (10000, 1500), p=(0.01, 0.99)))
delimiter
doc2vecmodel.train(sentences)
delimiter
print(data.text)
delimiter
form = FooForm
delimiter
pruned = [[i for i in sublist if i < n][:sublist_length] for sublist in ls]
delimiter
n ^ 1 << k
delimiter
print(elb.getInput())
delimiter
df = pd.DataFrame(data=np.random.normal(0, 1, (20, 10)))
delimiter
XmingProc.wait()
delimiter
print(item)
delimiter
obj.__set__(self, value)
delimiter
zip(a, b)
delimiter
rolling_dd = pd.rolling_apply(s, window_length, max_dd, min_periods=0)
delimiter
print(test.__defaults__[0])
delimiter
config = tf.ConfigProto(allow_soft_placement=True)
delimiter
print(mystring % (wash_clothes, clean_dishes))
delimiter
sys.exit(2)
delimiter
user_input = input()
delimiter
my_checker = SpellChecker(my_dict)
delimiter
l.append(id(x))
delimiter
str_num = str(num)
delimiter
ord1[0] += 1
delimiter
sorted(indices)
delimiter
valid_date = datetime.datetime.strptime(date, fmt)
delimiter
print(queryset.query)
delimiter
data = f.readline()
delimiter
r = urllib.request.urlopen(urllib.request.Request(url))
delimiter
fig = PLT.figure()
delimiter
[output]
delimiter
libraries.append(arg[2:])
delimiter
Tools > Prefences > General
delimiter
line.set_data([], [])
delimiter
plt.figure(figsize=(18, 6))
delimiter
df = df.astype(int)
delimiter
print(new_grammar.productions()[-1])
delimiter
app = main(settings)
delimiter
self.cleaned_data
delimiter
ax = fig.add_subplot(111)
delimiter
tableWidget.setCellWidget(0, 1, ImgWidget1(self))
delimiter
agged = df.x.groupby(df.x.isnull().cumsum()).agg(f)
delimiter
key = self.rel.get_related_field().name
delimiter
author_id = Column(BigInteger, nullable=False, index=True)
delimiter
a.A
delimiter
cmap = matplotlib.cm.jet
delimiter
i += 1
delimiter
main()
delimiter
wx.Bell()
delimiter
result = df.loc[(first[0]), first[1]:last[1]].min()
delimiter
self.sum += value
delimiter
file_B.do_B_stuff
delimiter
b.append(j)
delimiter
deleteordered[tN]
delimiter
value = str(int(value))
delimiter
threadLimiter.acquire()
delimiter
response
delimiter
tn = telnetlib.Telnet(HOST, PORT)
delimiter
element.text = text
delimiter
self.FileModel.setCondition(text)
delimiter
hash(x)
delimiter
root.destroy()
delimiter
yet_to_run += 1
delimiter
soup.span.renderContents()
delimiter
a.sum()
delimiter
head[(0), :] = 16
delimiter
f.seek(step, os.SEEK_END)
delimiter
num = np.array([1.0])
delimiter
redis.Redis.RESPONSE_CALLBACKS[command](response)
delimiter
logit_val = sess.run(logits)
delimiter
self.__func__(self.__self__, *args, **kwargs)
delimiter
assert len(c) == 0
delimiter
print(self.x)
delimiter
results = Result.objects.filter(id__in=obj.result_set)
delimiter
d_with_str_keys = dict((str(k), v) for k, v in d.items())
delimiter
pyplot.savefig(sio, format=format)
delimiter
plt.xlim(0, 47)
delimiter
self.i = 0
delimiter
corn = Corn(201212)
delimiter
a = numpy.array([d, d, d], dtype=numpy.dtype(decimal.Decimal))
delimiter
result = [m.group() for m in matches]
delimiter
inner()
delimiter
print(myformat)
delimiter
7, [False, False, False, False]
delimiter
Counter(y) - Counter(x)
delimiter
msg_contant = process_multipart_message(msg)
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
win.add(bro)
delimiter
iter(f.readlines())
delimiter
print(tuple(exp.findall(st)))
delimiter
ascii_lower = set(string.ascii_lowercase)
delimiter
df
delimiter
reps.append(rep)
delimiter
niceText = pprint.pformat(yourDict)
delimiter
self.assertEqual(t.render(c), output)
delimiter
self.is_running = True
delimiter
cls(key_name=key_name, delete_when=deadline)
delimiter
plt.show()
delimiter
libraries[4:12]
delimiter
set_request(request)
delimiter
req = urllib.request.Request(url, data)
delimiter
p.join()
delimiter
logger = logging.getLogger(__name__)
delimiter
frequency_list.sort(reverse=True)
delimiter
vectorized_sparse = vectorizer.fit_transform(train_as_dicts)
delimiter
d.most_common()
delimiter
bytes += stream.read(1024)
delimiter
arr = np.empty((initial_guess, M))
delimiter
1
delimiter
self.children = children
delimiter
print(data[0])
delimiter
ws.set_horz_split_pos(1)
delimiter
t[2] += AddIDemo([5, 6])
delimiter
names = Employee.objects.filter()
delimiter
self.text_area.grid(row=1, column=1)
delimiter
df2 = df1.copy()
delimiter
d.setdefault(x % 10, []).append(x)
delimiter
brr[:] = brr[sort_indices]
delimiter
dt = datetime.fromtimestamp(posix_timestamp, tz)
delimiter
ss.dtype
delimiter
sm.OLS(y, X)
delimiter
guess_mean = np.mean(data)
delimiter
print([f(k) for k in range(4)])
delimiter
result[i][j] = result[j][i] = val
delimiter
print(my_content)
delimiter
old_stdout = sys.stdout
delimiter
plot(y1[1])
delimiter
raw_value = int(eval(input()))
delimiter
json_obj = json.load(response)
delimiter
d[key].extend(flatten_group(preserve_path(value)))
delimiter
q += 1
delimiter
File.close()
delimiter
self.right.sillywalk()
delimiter
X, Y = np.meshgrid(x, y)
delimiter
list1.extend(map(str, value))
delimiter
logging.basicConfig(format=FORMAT)
delimiter
log.addHandler(handler)
delimiter
size = os.stat(fn).st_size
delimiter
fig = oldfig(*args, **kwargs)
delimiter
ix = np.unravel_index(i, ax.shape)
delimiter
pd.DataFrame(arr)
delimiter
neighbors.remove(parent)
delimiter
g.__name__
delimiter
C = numpy.swapaxes(temp, 1, 2)
delimiter
n += 1
delimiter
b = a.reshape(-1, N)
delimiter
pylab.close(fig)
delimiter
fmt.Println(s)
delimiter
nextB = iter(self.Blist)
delimiter
s = requests.session()
delimiter
args = parser.parse_args()
delimiter
self._lock = threading.Lock()
delimiter
b = pd.Series(pd.np.random.randn(100000))
delimiter
cap.set_markeredgewidth(10)
delimiter
short_sha = repo.git.rev_parse(sha, short=4)
delimiter
thread.start()
delimiter
cols = [2, 2]
delimiter
objects = models.GeoManager()
delimiter
ax2 = ax.twinx()
delimiter
Foo.f = f
delimiter
result = Image.composite(background, foreground, mask)
delimiter
form = BlogForm(request.POST)
delimiter
h, l, s = colorsys.rgb_to_hls(r, g, b)
delimiter
sgn = -1 if n < 0 else 1
delimiter
attr_names = [c_attr.key for c_attr in inst.mapper.column_attrs]
delimiter
1, 8, 1, 1
delimiter
a = np.where(np.isnan(a), b, a)
delimiter
a = 1
delimiter
print(rPM(PROCESS, ADDRESS1, ADDRESS2, 64, ctypes.byref(bytes_read)))
delimiter
stdscr = curses.initscr()
delimiter
b2.grid(row=0, column=1, pady=10, padx=10, sticky=Tkinter.SE)
delimiter
a = 6.75
delimiter
line = infile.readline()
delimiter
print(i)
delimiter
False
delimiter
new_array = a == b
delimiter
print(x)
delimiter
df2
delimiter
Queue(maxsize=0)
delimiter
print(normalized(A, 2))
delimiter
self._bymonth
delimiter
M.append(counter)
delimiter
print(df)
delimiter
asyncio.get_event_loop().run_until_complete(wait_first())
delimiter
a = A()
delimiter
std_dev = math.sqrt((s0 * s2 - s1 * s1) / (s0 * (s0 - 1)))
delimiter
logo = logo.resize((100, 100), Image.ANTIALIAS)
delimiter
auth_handler = urllib.request.HTTPBasicAuthHandler()
delimiter
node = path[-1]
delimiter
flattened = np.array([x_data[i].flatten() for i in range(0, numImages)])
delimiter
print(get_title())
delimiter
l1[:target_index]
delimiter
outf.write(int(line, 16))
delimiter
i = 1
delimiter
print(driver.current_window_handle)
delimiter
log.write(message)
delimiter
t.start()
delimiter
yi = np.linspace(Y.min(), Y.max(), 1000)
delimiter
ast.parse(code)
delimiter
b = [6, 7, 8, 9, 10]
delimiter
cur = con.cursor()
delimiter
pickled_string = pickle.dumps(a)
delimiter
fit.params[1], fit.params[0]
delimiter
dave = person
delimiter
data = np.arange(-50, 50).reshape(10, 10)
delimiter
agf(2)
delimiter
print(out.decode())
delimiter
curdir = os.getcwd()
delimiter
env.AddPreAction(target, action)
delimiter
s.indices(sys.maxsize + 2)
delimiter
paw = models.CharField(max_length=2, choices=paws)
delimiter
wide_df = pandas.read_csv(mockcsv, index_col=[0, 1, 2], header=[0, 1, 2])
delimiter
self._post_init(srid)
delimiter
execute(task, hosts=hosts)
delimiter
Delete()
delimiter
print(x, y)
delimiter
self.close()
delimiter
n = len(lst)
delimiter
t.start()
delimiter
print(s)
delimiter
FigureCanvasWxAgg.__init__(self, parent, -1, self.figure, **kwargs)
delimiter
w.writerows(data)
delimiter
roundedA = a.replace(hour=0, minute=0, second=0, microsecond=0)
delimiter
self.crawled_urls.update(x[0] for x in cur.fetchall())
delimiter
json.dumps(dudette.json())
delimiter
df[cols]
delimiter
set(a).intersection(set(b)) == set(a)
delimiter
n_values = np.hstack([[0], n_values])
delimiter
output.close()
delimiter
result = {}
delimiter
q = session.query(myClass)
delimiter
cNorm = colors.Normalize(vmin=0, vmax=values[-1])
delimiter
root.mainloop()
delimiter
print(slugify(text))
delimiter
transaction.get().addAfterCommitHook(redirect_to_trial, kws=kwargs)
delimiter
main()
delimiter
gtk.main_quit(*args)
delimiter
input = [server]
delimiter
print(line_with_keyword)
delimiter
dict_del
delimiter
countries_dict = dict(COUNTRIES)
delimiter
sb.palplot(sb.color_palette(n_colors=8))
delimiter
today.year - born.year - 1
delimiter
yacc.yacc()
delimiter
globals().update(borrowed_globals)
delimiter
a = [-2, -2, 0, 0, 0, 0, 0]
delimiter
df.index = pd.to_datetime(df.date)
delimiter
[5]
delimiter
testfunc()
delimiter
average_speed = numpy.average(speeds, weights=speeds > 0)
delimiter
np.random.seed(0)
delimiter
gc.collect()
delimiter
question = Question.objects.get(pk=id)
delimiter
ax, _ = mpl.colorbar.make_axes(plt.gca(), shrink=0.5)
delimiter
print(len(Example))
delimiter
main()
delimiter
f.write(content)
delimiter
driver = webdriver.Firefox()
delimiter
print(yaml.dump(a))
delimiter
X_test = np.concatenate((X_test, catVar), axis=1)
delimiter
np.ndarray(arr.shape, dtype2, arr, 0, arr.strides)
delimiter
lg = numpy.where(lg == -numpy.inf, 0, lg)
delimiter
ReturnStatement().act()
delimiter
256 * tup[1] + tup[0]
delimiter
importlib.import_module(module)
delimiter
_f_array[a, b]
delimiter
b = attrdict()
delimiter
a = pixels[:num_pixels]
delimiter
s.close()
delimiter
f.read()
delimiter
c.close()
delimiter
big_array[chosen_slice][chosen_part]
delimiter
self.mouth = 1
delimiter
start = datetime(start_year, start_month, 1)
delimiter
wnd = gtk.Window()
delimiter
G_mean1.append(G)
delimiter
self.setLayout(self.hlayout)
delimiter
print(df2)
delimiter
prod, x, y = heapq.heappop(heap)
delimiter
hxs = HtmlXPathSelector(response)
delimiter
response = client.get_spot_price()
delimiter
print(serializer.getvalue())
delimiter
type.__new__(metacls, name, bases, dct)
delimiter
df
delimiter
d[x] = []
delimiter
N = int(eval(input()))
delimiter
self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
delimiter
fit0 = gev.fit(data)
delimiter
print(sum)
delimiter
x = 5
delimiter
x = sum(starmap(similarity, product(a, b)))
delimiter
_compile(pattern, flags).findall(string)
delimiter
self.request.send(self.data.upper())
delimiter
process(arg)
delimiter
f(a)
delimiter
sb.toString()
delimiter
pil_im = Image.fromarray(cv2_im)
delimiter
response = requests.post(url, data=data, headers=headers)
delimiter
laparams = LAParams()
delimiter
V = (1 / r).sum(axis=1)
delimiter
tornado.ioloop.IOLoop.instance().start()
delimiter
result = {}
delimiter
chr(97)
delimiter
text
delimiter
cell = sheet.cell(r, c)
delimiter
going = False
delimiter
self.add_widget(my_box1)
delimiter
x_decor.sort(key=lambda itm: itm[1])
delimiter
f.close()
delimiter
self._list.__delitem__(key)
delimiter
cursor = conn.cursor()
delimiter
args = parser.parse_args()
delimiter
_clients[name]
delimiter
data = np.ones(N, dtype=dtype)
delimiter
heapify()
delimiter
codecs.unicode_escape_decode(x)[0]
delimiter
plt.plot(xx, piecew(xx))
delimiter
net.addConnection(FullConnection(hidden0, hidden1))
delimiter
loc = ax.xaxis.get_major_locator()
delimiter
print(op(1, 2))
delimiter
polygon = plt.Rectangle((x, y), w, h, color=c)
delimiter
y = defaultdict(lambda : defaultdict(lambda : 0))
delimiter
a == b
delimiter
out = []
delimiter
x
delimiter
request.user.is_authenticated() and request.user.is_admin
delimiter
Logger.manager.getLogger(name)
delimiter
plt.colorbar()
delimiter
M.sum((0, 1))
delimiter
self.left.sillywalk()
delimiter
print_lock = threading.Lock()
delimiter
eigvals, eigvecs = np.linalg.eig(np.cov(xy))
delimiter
d = json.loads(h)
delimiter
activation.undo()
delimiter
do_something(server.local_bind_port)
delimiter
cups_lib.cupsFreeDests(num_dests, dests_p)
delimiter
scheduler.start()
delimiter
ids.extend(list(range(int(xr[0]), int(xr[1]) + 1)))
delimiter
ax = fig.add_subplot(111)
delimiter
table.wrapOn(c, width, height)
delimiter
(a == b) | (a != a) & (b != b)
delimiter
OPTION_C = 1 << 2
delimiter
dir(parrot)
delimiter
a = A()
delimiter
child_count = instance.children.count()
delimiter
self.stream.write(msg.encode(self.stream.encoding))
delimiter
_members_[key] = value
delimiter
root.wait_visibility()
delimiter
nums = [1] * n
delimiter
image = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)
delimiter
tree.parse(source, parser)
delimiter
client.auth_token = gdata.gauth.OAuth2TokenFromCredentials(credentials)
delimiter
t.join()
delimiter
B = np.where(A == value)[0]
delimiter
points = [(0, 10), (10, 20), (20, 40), (60, 100)]
delimiter
b = randint(0, 10)
delimiter
arr = [[]]
delimiter
np.array([u[1], -u[0] + np.sqrt(u[0])])
delimiter
list(range(len(list1), 2))
delimiter
True
delimiter
out = (mask * prior_reci + ~mask * (0.1 * prior_reci)).sum(1)
delimiter
BaseObject.x
delimiter
canvas.create_image(image.size[0] // 2, image.size[1] // 2, image=image_tk)
delimiter
df[numeric_cols].apply(zscore)
delimiter
tk.Tk.__init__(self)
delimiter
c[c < 0] = 0
delimiter
order_array.dtype
delimiter
self.i = i
delimiter
x, y, z = np.ogrid[0:500, 0:500, 0:500]
delimiter
style = window.get_style()
delimiter
b = numpy.power(a, 2)
delimiter
self.write_cell(sheet_name, cell, existing_value, updated_format)
delimiter
src / Makefile
delimiter
ax1 = fig.add_subplot(212)
delimiter
min(start1, start2), max(end1, end2)
delimiter
array_of_strings[0, 0][0, 0]
delimiter
print(list(zip(x, y)))
delimiter
new_dic_defaultdict[1][2] = 5
delimiter
df
delimiter
sys.modules[module_name] = module
delimiter
T = numpy.linspace(-10, 10, 100)
delimiter
not True == 0
delimiter
event.Skip()
delimiter
print(d)
delimiter
original_init(self, a)
delimiter
data = {h: v for h, v in zip(header, zip(*values))}
delimiter
entropy(data) - weighted_ent, subset1, subset2
delimiter
new_string
delimiter
df = pd.DataFrame(data2)
delimiter
frame = cv.RetrieveFrame(cap)
delimiter
sift(0, i)
delimiter
a[1:4] = [9, 7]
delimiter
jython
delimiter
C = np.dot(A, B)
delimiter
hist, bins = np.histogram(data, bins=50)
delimiter
c = list(zip(*b))
delimiter
deletesieve[::item]
delimiter
my_dict = dict((k, some_func(k)) for k in input_list)
delimiter
screen.nodelay(True)
delimiter
http = cred.authorize(httplib2.Http())
delimiter
FFT_FREQS_INDS = -numpy.ones_like(FFT_FREQS)
delimiter
result = _addup(n)
delimiter
hets.append(1 - pf)
delimiter
fh.write(bytes)
delimiter
t = threading.Thread(target=self.handle_request, args=(c,))
delimiter
s.truncate(0)
delimiter
self.background_color = [1, 1, 1, 1]
delimiter
self.logger.error(error.message)
delimiter
pp.show()
delimiter
first_length = len(first) + 1
delimiter
plt.gca().add_collection(coll)
delimiter
l1[:target_ibdex + 1]
delimiter
x ** (m * n)
delimiter
work_with_cube(array[x, y, z])
delimiter
globals()[module_name] = m
delimiter
logkde = kde.score_samples(Vecpoints)
delimiter
auth = OAuthHandler(consumer_key, consumer_secret)
delimiter
ygrid = np.linspace(y.min(), y.max(), 100)
delimiter
print(number_string[:2])
delimiter
nearest = min(sources, key=lambda s: distance(s, demand))
delimiter
target_metadata = Base.metadata
delimiter
source = urllib.request.urlopen(url).read()
delimiter
times = list(range(8, 21, 4))
delimiter
bool(())
delimiter
print(felf.__name__, felf.__doc__)
delimiter
d = datetime.datetime(2011, 2, 28)
delimiter
Py_DECREF(args)
delimiter
print(sys.version)
delimiter
pl.figure(figsize=(10, 5))
delimiter
event.canvas.draw()
delimiter
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
print(match.group())
delimiter
ax2.grid(False)
delimiter
print(calendar.month(2011, 8))
delimiter
Contexts
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
file_handle.write(text)
delimiter
index.append([keyword, [url]])
delimiter
suite = eval(sys.argv[1])
delimiter
xyz = np.array((x, y, z))
delimiter
self.members.append(person.key)
delimiter
sites[parts[0]].append(fname)
delimiter
some_value = new_value
delimiter
r = tf.reduce_sum(A * A, 1)
delimiter
y = random.random()
delimiter
faction
delimiter
True == 1
delimiter
object.__new__(cls, *args, **kwargs)
delimiter
self.height = height
delimiter
celery.current_app.control.inspect().ping()
delimiter
df2.A.plot()
delimiter
self
delimiter
match = regex.match(line)
delimiter
x_coord = radius * np.sin(theta) * np.cos(phi)
delimiter
conds = [x < 0, (x > 0) & (x < 1), (x > 1) & (x < 2), x > 2]
delimiter
obj = Test()
delimiter
img1_k.append(0)
delimiter
conn.send(chunk)
delimiter
d.append(x.kpc)
delimiter
word.istitle()
delimiter
B = np.array([[7, 8, 9], [10, 11, 12]])
delimiter
readline.clear_history()
delimiter
total += nested_sum(item)
delimiter
channel = client.invoke_shell()
delimiter
print(x)
delimiter
common = len(set(left) & set(right))
delimiter
wa = np.bincount(a)
delimiter
folder = FTPTree()
delimiter
smtp.connect(mx[1])
delimiter
b = A(20)
delimiter
self._seed = int(x) + 1, int(y) + 1, int(z) + 1
delimiter
print(thetd.string)
delimiter
b = a + (4, 5, 6)
delimiter
x = foo()
delimiter
writer = csv.writer(fin)
delimiter
x.pop(l - i)
delimiter
ax.invert_yaxis()
delimiter
Decimal.__round__
delimiter
t = np.arange(0.0, 1.0, 0.001)
delimiter
B.append(a)
delimiter
client.set_missing_host_key_policy(AllowAllKeys())
delimiter
preproc = image / average
delimiter
Page.__init__(self, *args, **kwargs)
delimiter
self.assertDictEqual(dict1, dict2)
delimiter
print(d)
delimiter
print(Xfit_mono)
delimiter
matches = [x for x in lst if fulfills_some_condition(x)]
delimiter
np.sum(v)
delimiter
int(argv[1])
delimiter
angle += 2 * math.pi
delimiter
axes = fig.add_subplot(1, 1, 1)
delimiter
print(f.__dict__)
delimiter
us.append(dict(zip(fs, t)))
delimiter
print(a is b)
delimiter
result = doc.getvalue()
delimiter
minList.append(a)
delimiter
deletepak[IP].chksum
delimiter
self.show()
delimiter
name = StringField()
delimiter
pr.disable()
delimiter
m = int(n * (log(n) + log(log(n))))
delimiter
[False, True, False],
delimiter
x = frozenset(x)
delimiter
L = [list(range(5)) for each in range(5)]
delimiter
self.thisobj = obj.thisobj.clone()
delimiter
final = np.zeros((6 * N, 6 * N), dtype=A.dtype)
delimiter
ax = plt.gca()
delimiter
print(converted_value, type(converted_value))
delimiter
data = json.loads(st)
delimiter
author_id = models.AutoField(primary_key=True)
delimiter
db.collection.update(criteria, objNew, upsert, multi)
delimiter
a[j, i]
delimiter
cdf.append(total)
delimiter
email
delimiter
A = 0.5 * ((1 - s) * np.cos(a - b) + (1 + s) * np.cos(a + b))
delimiter
self.object_list = self.get_queryset()
delimiter
np.maximum.at(diam, data[:, (0)], dist_to_center)
delimiter
vif = minv.dot(corr).dot(minv)
delimiter
y = numpy.array([4, 5])
delimiter
n = ord(b)
delimiter
fd = sys.stdin.fileno()
delimiter
regex = re.compile(regex_string, re.MULTILINE)
delimiter
logger.handlers.pop()
delimiter
print((item, others))
delimiter
hours, minutes, seconds
delimiter
view_func(request, authenticated_by_ip, *args, **kwargs)
delimiter
df.sum()
delimiter
data = [math.sin(2 * math.pi * freq * (x / frate)) for x in range(data_size)]
delimiter
X = np.array([(n.x, n.y, n.z) for n in cell])
delimiter
result = [i for k, g in groupby(lst, f) for i in (g if k else (sum(g),))]
delimiter
print(sys.version)
delimiter
death_month = death_data.get(2).value
delimiter
module = __import__(module_name)
delimiter
dreload(myCoolModule)
delimiter
print(server.div(10, 2))
delimiter
type(filt)
delimiter
resize_canvas()
delimiter
features = tf.parse_example(batch_serialized_examples, feature_to_type)
delimiter
raise ValueError(msg.format(a, b, c, len(L)))
delimiter
recurddict = lambda : defaultdict(recurddict)
delimiter
cache.product_part_number
delimiter
config
delimiter
self.axes = self.fig.add_subplot(111)
delimiter
pygame.init()
delimiter
list(OrderedDict([frozenset(list(Counter(tup).items())), tup] for tup in data).values())
delimiter
K.mean(K.pow(y_true - y_pred, 2) * W)
delimiter
calculator.show()
delimiter
today = date.today()
delimiter
index += 1
delimiter
beeper()
delimiter
lr = LinearRegression(**params)
delimiter
fig = plt.figure()
delimiter
rows, cols
delimiter
exampleItem.exampleName(row, column, name)
delimiter
dot(self.Vt[:n].T, (self.dinv[:n] * p).T).T
delimiter
NULL
delimiter
soup = BeautifulSoup.BeautifulStoneSoup(s)
delimiter
server_url = app_identity.get_default_version_hostname()
delimiter
print(line)
delimiter
print(word)
delimiter
x, y = a[b], a[mask]
delimiter
set.add(item)
delimiter
names = np.random.choice(np.arange(N), size=100, replace=False)
delimiter
print(repr(strs))
delimiter
AFMT_S16_NE = ossaudiodev.AFMT_S16_LE
delimiter
self.countdown(10)
delimiter
print(browser.url)
delimiter
logging_thread = threading.Thread(target=logData, args=(input_queue,))
delimiter
ret[l[1]].add(l[0])
delimiter
l.append(v)
delimiter
self.y_without_NaNs = y.copy()
delimiter
a = np.random.randn(100, 2500)
delimiter
a = np.random.randint(0, 100, 1000)
delimiter
plt.subplot(122)
delimiter
0
delimiter
assert c.shape == (a.shape[0], b.shape[1])
delimiter
metadata = sa.MetaData()
delimiter
self.right.pop()
delimiter
soup = BeautifulSoup(HTML)
delimiter
Foo.initStuff()
delimiter
index.sort()
delimiter
D = C.reshape((1, 8))[0]
delimiter
print(pd.DataFrame(d1))
delimiter
input_file = sys.stdin
delimiter
now = dt.datetime.utcnow()
delimiter
ax.yaxis.set_major_formatter(EpiCycleScalarFormatter())
delimiter
item_q.put(StopIteration)
delimiter
data = file_.read()
delimiter
values = [e.value for e in CommonNames]
delimiter
a = [0] * 10
delimiter
print(x[(0), :])
delimiter
draw = ImageDraw.Draw(im)
delimiter
print(key, value)
delimiter
print()
delimiter
ax.axis([1, 10000, 1, 100000])
delimiter
b = jpeg.read(1)
delimiter
readline.set_completer(MyCompleter().complete)
delimiter
A - mean
delimiter
something
delimiter
work()
delimiter
self._log_handler
delimiter
schema = etree.XMLSchema(schema_root)
delimiter
p = figure(width=400, height=400)
delimiter
self.app.exec_()
delimiter
G = (list(x) for _, x in groupby(enumerate(L), lambda i_x: i_x[0] - i_x[1]))
delimiter
found = False
delimiter
yaml.load(s)
delimiter
fhandle.seek(1, 1)
delimiter
np.sum(r ** 2 - r) * 4
delimiter
a.__dict__
delimiter
rand_num = random.randint(0, 99)
delimiter
logger = logging.getLogger(__file__)
delimiter
basis = [(lambda x, n=n: n * x) for n in [0, 1, 2]]
delimiter
im.set_data(arr)
delimiter
canvas = Canvas(master)
delimiter
os.path.splitext(fname)[0][8:]
delimiter
temp = [line.split() for line in datfiles[0]]
delimiter
print(list(l))
delimiter
TOP = os.path.dirname(os.path.dirname(your_application.__file__))
delimiter
a[key] = b[key]
delimiter
keybd_event(Key, 0, 2, 0)
delimiter
f.encoding
delimiter
conn = session.connection()
delimiter
print(key, value)
delimiter
fig = plt.figure()
delimiter
df = grouped.aggregate(lambda x: tuple(x))
delimiter
time.sleep(5)
delimiter
self.bcount = 0
delimiter
current += os.path.getsize(path)
delimiter
outputStream.close()
delimiter
grouped = df.groupby(keys)
delimiter
x[-1]
delimiter
y = list(range(h))
delimiter
a.dtype
delimiter
event.accept()
delimiter
count += 1
delimiter
xcen, ycen
delimiter
pickle.loads(pickle.dumps(x))
delimiter
pos = available[random.randint(0, len(available) - 1)]
delimiter
idx = a.cumsum()
delimiter
G = nx.DiGraph()
delimiter
sleep(0.1)
delimiter
tf.random_uniform_initializer(-init_range, init_range)
delimiter
event.canvas.draw()
delimiter
os.lseek(fd, 0, os.SEEK_END)
delimiter
self._global_wealth = value
delimiter
s[positives].mean()
delimiter
i = 0
delimiter
length = len(string)
delimiter
listOf[elem].append(idx)
delimiter
b = a.ravel()
delimiter
plt.setp(ax2.get_yticklines(), visible=False)
delimiter
sys.exit(app.exec_())
delimiter
True
delimiter
w.start()
delimiter
self.b = b
delimiter
True
delimiter
fig = pyl.figure()
delimiter
a = collections.OrderedDict()
delimiter
HTMLParser().unescape(s.get_data())
delimiter
out = np.bincount(id[mask1] - 1, x[mask1])
delimiter
im.putalpha(mask)
delimiter
slen0 = len(s)
delimiter
asyncore.loop()
delimiter
explore()
delimiter
print(repr(s))
delimiter
next(f)
delimiter
secondTest()
delimiter
pd.isnull(y)
delimiter
list(A.instances)
delimiter
x = [[1, 2], 1, 1, [2, 1, [1, 2]]]
delimiter
signal.alarm(seconds)
delimiter
app = Application(__name__)
delimiter
2, 2, 2, 2, 2, 2, 2, 2
delimiter
types_dict[t].setdefault(k, []).append(v)
delimiter
getattr(self, name)
delimiter
f(x=2)
delimiter
myDict = defaultdict(int)
delimiter
self.delete_async().get_result()
delimiter
degrees(acos(distance)) * 69.09
delimiter
v1 = e.args[0]
delimiter
998
delimiter
to_translate.translate(translate_table)
delimiter
myfile = opener.open(myurl)
delimiter
h, yedges, zedges = np.histogram2d(y, z, bins=50)
delimiter
df = df.reset_index()
delimiter
g()
delimiter
ax2.grid(False)
delimiter
L[i] += L[i - 1]
delimiter
cased = lambda c: c.upper() != c or c.lower() != c
delimiter
print(random_array.dtype)
delimiter
self.queue = queue
delimiter
l.append(42)
delimiter
print(p, np.nonzero(rowsum == p)[0])
delimiter
seenstrings.add(s)
delimiter
result = input(msg).strip()
delimiter
x = np.random.random(50)
delimiter
stuff()
delimiter
user_sessions.append(session.pk)
delimiter
unittest.TestSuite(MyTest(num, expected) for num, expected in data)
delimiter
ax.xaxis.major.formatter._useMathText = True
delimiter
(1)(a, c)
delimiter
analytics_data
delimiter
g.add_edge(p, from_p)
delimiter
A = sp.lil_matrix((5, 5))
delimiter
print(foo.output)
delimiter
numbers = [d[ni] for ni in names]
delimiter
result = []
delimiter
total_count += 1
delimiter
b_result = []
delimiter
round(2.4)
delimiter
dill.detect.badtypes(f, depth=1)
delimiter
self.current += 1
delimiter
self._app = app
delimiter
any(x > 4 for x in mylist)
delimiter
r_getname()
delimiter
sf = pd.DataFrame(data, index=[0])
delimiter
bad.getparent().remove(bad)
delimiter
q.task_done()
delimiter
now = datetime.datetime(2009, 5, 5)
delimiter
{t.tag: map(etree_to_dict, t.iterchildren()) or t.text}
delimiter
lines_list = file_handle.readlines()
delimiter
myapp / __init__.py
delimiter
U, s, Vh = np.linalg.svd(a, full_matrices=False)
delimiter
gen = ((x, y) for x in a for y in b)
delimiter
o1 = np.argsort(arr1)
delimiter
pro = subprocess.Popen(cmd, shell=True, preexec_fn=os.setsid)
delimiter
r = requests.get(get_url, auth=auth)
delimiter
font = ImageFont.truetype(font_path, font_size)
delimiter
agf(1)
delimiter
cust = models.ForeignKey(Customer)
delimiter
numpy.save(memfile, a)
delimiter
np.power(x1, x2)
delimiter
ax6 = plt.subplot(gs[(2), 2:])
delimiter
self.setFocus()
delimiter
keys = list(d1.keys()) & l1
delimiter
browser = webdriver.Chrome()
delimiter
Evaluation.INCLUDE_AND_PRUNE
delimiter
y = np.load(filename)
delimiter
client.logout()
delimiter
t.cancel()
delimiter
stack.append([])
delimiter
self.output_pipe.close()
delimiter
cipher = AES.new(key, AES.MODE_CBC, iv)
delimiter
self.sock = sock
delimiter
writer.writerow(row)
delimiter
rails = list(range(numrails - 1)) + list(range(numrails - 1, 0, -1))
delimiter
main()
delimiter
set_children_clip_box(cbar_ax, hdl.get_clip_box())
delimiter
print(group_names(names, num_pages))
delimiter
white = 255, 255, 255
delimiter
tz._transition_info
delimiter
print(N, i, sum / (N * 2 ** i))
delimiter
logger.addHandler(fh)
delimiter
sorted(value, key=sort_by, reverse=reverse)
delimiter
newarray[ivec[j]] = averank
delimiter
a + b
delimiter
box = 70, 70, 100, 100
delimiter
now += datetime.timedelta(days=7)
delimiter
a[a == 255] = 1
delimiter
child_queue = queue_manager.Queue()
delimiter
new_time = time.time()
delimiter
output = buf.getvalue()
delimiter
Y[i] = Y[i - 1] * decay
delimiter
driver = webdriver.Firefox(firefox_profile)
delimiter
imgdata.seek(0)
delimiter
collection = PatchCollection(patches, cmap=plt.cm.hsv)
delimiter
np.rec.fromarrays(test2.T, mytype)
delimiter
p = Pool(1)
delimiter
list_.append(df)
delimiter
u = np.array([1, 0, 0])
delimiter
print(item)
delimiter
self._initialize(result)
delimiter
Final_Product = A.reshape(-1, R).dot(Combinations.T).T.reshape(-1, M, N)
delimiter
print(core.publish_string(text))
delimiter
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cookie_jar))
delimiter
self._queue.put(line)
delimiter
page.mainFrame().load(QUrl(url))
delimiter
outf.truncate()
delimiter
p = pyaudio.PyAudio()
delimiter
print(df2)
delimiter
abort(404)
delimiter
response = self.browser.submit()
delimiter
app = QApplication(sys.argv)
delimiter
any(t.start() for t in threads)
delimiter
a = tf.Variable(a0)
delimiter
pent_new(i)
delimiter
1 - y | 2 - n | 1 - n | 1 - n
delimiter
d1 = {key: value for i, (key, value) in enumerate(d.items()) if i % 2 == 0}
delimiter
y_itp = r * np.outer(np.sin(theta_itp), np.sin(phi_itp))
delimiter
provided = set()
delimiter
plt.show()
delimiter
log(e)
delimiter
self.__dict__, self.__class__.PARAM
delimiter
z = r * cos(phi)
delimiter
(fn(x + delta) - fn(x)) / delta
delimiter
w = QtGui.QWidget()
delimiter
self.sys_stderr = sys.stderr
delimiter
set(larry) == set(moe)
delimiter
c[0]
delimiter
kwargs.append(params)
delimiter
sentence = []
delimiter
s[::2] + s[-1 - len(s) % 2::-2]
delimiter
driver.quit()
delimiter
found.add(item)
delimiter
os.dup2(self.prevfd, self.fd)
delimiter
doSomething()
delimiter
hash = hashlib.md5()
delimiter
df.date2 = pd.to_datetime(df.date2)
delimiter
application = QtGui.QApplication(sys.argv)
delimiter
self._succ_map[self]
delimiter
print(oct(stat.S_IMODE(mode)))
delimiter
user
delimiter
B[:, (I)] = A[:, (L == I)].sum(axis=1)
delimiter
cmd, call(cmd, stdout=outputfile, stderr=STDOUT)
delimiter
test
delimiter
response = br.submit()
delimiter
self.filter(age__gte=min, age__lt=max)
delimiter
six_months = date.today() - relativedelta(months=+6)
delimiter
test()
delimiter
item = self.listWidget.takeItem(self.listWidget.currentRow())
delimiter
startTime = time.time()
delimiter
self.get_queryset()
delimiter
_a(arctan2(c[1], c[0]), (c ** 2).sum(0) ** 0.5)
delimiter
mat.reshape(m, -1)[:, (np.arange(r) * (r + 1))] = np.nan
delimiter
array
delimiter
type.__new__(mcs, name, bases, dict)
delimiter
shlex.split(command)
delimiter
10 < a < 20
delimiter
int(argv[1])
delimiter
seconds = int(time.time() - time_start) - minutes * 60
delimiter
matrix = np.array([i for i in range(24)]).reshape((6, 4))
delimiter
Atomic.register(bytes)
delimiter
fd.floatarr(pointer(ip), pointer(fpp))
delimiter
d = np.sqrt((n - n.T) ** 2 + (m - m.T) ** 2)
delimiter
gray = cv2.equalizeHist(gray)
delimiter
prefix = a[0][:prefix_len]
delimiter
x = 0
delimiter
cax.get_xaxis().set_visible(False)
delimiter
itemtypes = meta.ManyToManyField(ItemType)
delimiter
lSongs.append(info)
delimiter
D.__bases__
delimiter
print(format_exception(e))
delimiter
date_set = set(date_list)
delimiter
beginx = 0
delimiter
x = numpy.arange(20).reshape((4, 5))
delimiter
widemapIV = dict((ord(x[0]), x[1]) for x in zip(normal, wide))
delimiter
w.setCompleter(c)
delimiter
self.submit.grid(row=1, column=2)
delimiter
instance.project = Project.objects.get(title=offset)
delimiter
df = DataFrame(np.arange(25).reshape(5, 5))
delimiter
[self.from_db_value]
delimiter
json_dict = json.load(f)
delimiter
print(instance.Field1)
delimiter
{0, 0, 0, 0, 0, 0, 0},
delimiter
WSGIScriptAlias / khdx / home / galdosd / khdxweb / rel / khdx / apache / django.wsgi
delimiter
plot(arange(44))
delimiter
a.__setitem__(x, (a[x], a[y]))
delimiter
mindist = numpy.min(pdist(x))
delimiter
setattr(obj, name, value)
delimiter
w.close()
delimiter
x + y + z
delimiter
vals = redis.hgetall(key)
delimiter
fig, axes = plt.subplots(nrows=2, ncols=2)
delimiter
plot(dayswanted, y, label=label)
delimiter
s = socket.socket()
delimiter
client.service.Method(parameter)
delimiter
_objects = models.Manager()
delimiter
new_rrule_object = pickle.loads(serial_str)
delimiter
fnn = buildNetwork(trndata.indim, 5, trndata.outdim, outclass=SoftmaxLayer)
delimiter
list(upper[upper.index(strs[0]):upper.index(strs[-1]) + 1])
delimiter
add(a, b)
delimiter
funcs = [run, jump]
delimiter
plt.plot(a)
delimiter
item_q.put(item)
delimiter
axes.set_xlim(min(latencies), max(latencies) * 1.01)
delimiter
print(i, l[i])
delimiter
array_data = array([1, -1, 1, -1, 1, -1, 1, -1, 1, -1])
delimiter
l[i] += 10
delimiter
print(xml_files[-1])
delimiter
data = numpy.random.random((nx, ny))
delimiter
datetime.datetime.fromtimestamp(dt).isoformat()
delimiter
A = np.unique(A)
delimiter
shape = a.shape[:-1] + (a.shape[-1] - window + 1, window)
delimiter
[locals()[arg] for arg in inspect.getargspec(foobar).args]
delimiter
cols = df.columns.tolist()
delimiter
d = {k: dict(x[1:] for x in g) for k, g in groupby(data, key=itemgetter(0))}
delimiter
c.notify_all()
delimiter
root = tk.Tk()
delimiter
self.loop.start()
delimiter
M.add_edge(1, 2, weight=7)
delimiter
cv.WriteFrame(writer, frame)
delimiter
endwhile
delimiter
df1 = df.copy()
delimiter
q = Queue.Queue()
delimiter
print(self.path)
delimiter
ch.setLevel(logging.ERROR)
delimiter
print(words)
delimiter
seed += 1
delimiter
random.shuffle(unfrozen_set)
delimiter
A = next(rng1)
delimiter
d[i] += 1
delimiter
cmp(self.value, obj.value)
delimiter
list(dic.values())
delimiter
print(test.class_method())
delimiter
a.x, a
delimiter
self.a = 1
delimiter
logging.basicConfig(level=logging.INFO)
delimiter
b1 = B.objects.create()
delimiter
ast.literal_eval(max(lengths, key=len))
delimiter
cursor.execute(cmd)
delimiter
plt.setp(ax.yaxis.get_gridlines(), clip_path=circle)
delimiter
raise KeyError
delimiter
root = tk.Tk()
delimiter
i += 1
delimiter
self.height * self.width
delimiter
subplot(122)
delimiter
map(itemgetter(0), _)
delimiter
process(line)
delimiter
z = np.random.random((len(ra), 1))
delimiter
i += 1
delimiter
ax2 = fig2.add_subplot(1, 1, 1)
delimiter
D[i, j] = abs(x[i] - x[j])
delimiter
collection.append(item)
delimiter
left = int(input())
delimiter
url
delimiter
processes.append(row[2])
delimiter
MyMixin.__mro__
delimiter
a[8:9]
delimiter
print(c.fetchall())
delimiter
ret[l[1]].add(l[1])
delimiter
d1 = p[1] - b[1]
delimiter
b = [i for i in range(20) if i % 2 == 0]
delimiter
facecolor = plt.gcf().get_facecolor()
delimiter
img2 = cv2.merge([r, g, b])
delimiter
help(itertools)
delimiter
d1[k_d1] = b1[k_d1]
delimiter
s = date(d.year, d.month, 15)
delimiter
a * x * x + b
delimiter
self.append(next(self._num_gen))
delimiter
request = urllib.request.Request(url)
delimiter
client_socket.shutdown(1)
delimiter
x_fit = np.linspace(x[0], x[-1], 1000)
delimiter
browser = Firefox()
delimiter
result = [productcode, amountentered] + changecoins
delimiter
self.create_main_frame()
delimiter
raise NotImplementedError
delimiter
_realssl.sslwrap_simple(sock, keyfile, certfile)
delimiter
g = s.groupby([s.index.year, s.index.month]).mean()
delimiter
df2
delimiter
path = sys.path.copy()
delimiter
np.apply_along_axis(nGauss, -1, x1, mu, cov)
delimiter
result.append(perfect_corr)
delimiter
buf.append(line)
delimiter
self.mps_in_process.remove(kill_id)
delimiter
[1.85, 9.6]
delimiter
key
delimiter
gb = df.groupby(group)
delimiter
newstdout = os.dup(1)
delimiter
response = memcache.get(request.my_name)
delimiter
img.size = tuple(i * 10 for i in img.size)
delimiter
roll_right = np.roll(img, i, axis=1)
delimiter
a = np.random.rand(dim, dim)
delimiter
random.shuffle(sequence_containing_x_vals)
delimiter
for_js = int(time.mktime(d.timetuple())) * 1000
delimiter
cols = [ele.text.strip() for ele in cols]
delimiter
np.array(set.union(set(a), b))
delimiter
f.seek(block_number * BLOCK_SIZE, 2)
delimiter
b = [x for x in a if l.count(a[x]) == 1]
delimiter
findContours(maskCirc.clone(), vertices, CV_RETR_LIST, CV_CHAIN_APPROX_NONE)
delimiter
row.append(model.get_value(dragged_iter, i))
delimiter
MAIN_SURF = pygame.display.set_mode((x, y))
delimiter
print(o.x + 5)
delimiter
globals()[targetclass]()
delimiter
self.widget.bar()
delimiter
mask[sample_indexes] = 0
delimiter
get_long_path_name(str(short_path_name), buffer, BUFFER_SIZE)
delimiter
sindata = np.sin(data)
delimiter
keyValList = [(i, i * 2) for i in range(10)]
delimiter
b = [2, 6, 7]
delimiter
jinja2.Markup(scrubber.Scrubber().scrub(text))
delimiter
self.data.__getitem__(key)
delimiter
norm(5, 5).pdf(7)
delimiter
j = Job.objects.get(pk=1)
delimiter
raise ctypes.WinError()
delimiter
sidx = ids.argsort()
delimiter
self.initialized()
delimiter
plt.subplot(121)
delimiter
count = sum(os.path.splitext(f)[-1] in extensions for f in files)
delimiter
self.start_urls.append(urllib.parse.unquote_plus(link[0]))
delimiter
d2 = threading.Thread(target=dep2)
delimiter
model = Sequential()
delimiter
ctpMocks = [mock.Mock(), mock.Mock()]
delimiter
ret.append((point[0], point[1] - 2 * (point[1] - TOP_RIGHT[1])))
delimiter
self.__dict__[key]
delimiter
indices = rng.random_integers(0, len(y_pred) - 1, len(y_pred))
delimiter
ax.yaxis.set_major_formatter(y_format)
delimiter
1, 0, 0
delimiter
args = parser.parse_args(argv[1:])
delimiter
self.buffer = [1] * size
delimiter
bar = [4, 5, 6]
delimiter
self.start_urls = start_urls
delimiter
{x: -y - 1, z: 2}
delimiter
y_bin_midpoints = y_bins[:-1] + np.diff(y_bins) / 2
delimiter
loop.close()
delimiter
self.get_queryset().hard_delete()
delimiter
prefixes = (key[:i + 1] for i in range(len(key)))
delimiter
z = 2.0 * round(y / 2.0)
delimiter
print(the_matrix[0][1][2])
delimiter
screen.blit(circle_surface, POS)
delimiter
root = Tk().withdraw()
delimiter
board = []
delimiter
url = sel.select(item_url_xpath).extract()[0]
delimiter
children.append(parse_inner(toks))
delimiter
response
delimiter
nums = [float(x) for x in sys.argv[1:]]
delimiter
print(title.text)
delimiter
lcms.cmsDoTransform(xform, byref(inbuf), byref(outbuf), 1)
delimiter
newRow.append(row[i])
delimiter
output = {}
delimiter
data_string = json.dumps(data)
delimiter
dss.delete(keys)
delimiter
a, _, _, _ = np.linalg.lstsq(x, y)
delimiter
print((a, b, c))
delimiter
myfoto.write(block_of_data)
delimiter
forward_tunnel(local_port, remote_host, remote_port, transport)
delimiter
main.show()
delimiter
flags = FLAG1 | FLAG8
delimiter
print(request.path)
delimiter
a = np.array([1, 2, np.NaN])
delimiter
a = []
delimiter
{{inline_admin_form.pk_field.field}}
delimiter
b = np.zeros((N, n), a.dtype)
delimiter
glViewport(0, 0, self.width, self.height)
delimiter
self._fileobj.__exit__(*args)
delimiter
string = fp.read()
delimiter
ATE0
delimiter
polB = patches.Polygon(xyB, **kwargsB)
delimiter
primes.append(a[0])
delimiter
s.index = pd.DatetimeIndex(s.index)
delimiter
to_translate.translate(translate_table)
delimiter
cgitb.enable()
delimiter
p.join()
delimiter
grp.div(grp.shift(-1)).groupby(level=0).nth(0)
delimiter
df = pd.DataFrame(data=data[1:], columns=data[0])
delimiter
self.should_run.set()
delimiter
len(self.__dict__)
delimiter
q.put(e)
delimiter
y = array([[[2.5]], [[6.5]]])
delimiter
fig, ax = plt.subplots()
delimiter
filename = wget.download(url)
delimiter
self.stream.write(self._convert_row(row))
delimiter
b = len(may_b)
delimiter
a.b
delimiter
func.__code__.co_argcount
delimiter
insert(d, keyList1, value1)
delimiter
ylim([0, 25])
delimiter
parentView.setMouseTracking(True)
delimiter
ax2.yaxis.set_tick_params(size=0)
delimiter
tdlist = []
delimiter
False
delimiter
x += 1
delimiter
print(ret[-2][6:])
delimiter
a = pd.Series(pd.np.random.randn(100000))
delimiter
reader = csv.reader(f)
delimiter
obj_as_dict
delimiter
print(len(connection.queries))
delimiter
ax2 = ax1.twinx()
delimiter
type, value, traceback = sys.exc_info()
delimiter
np.append(xs, remain)
delimiter
Func(lambda x: self(x) - other(x))
delimiter
i += 1
delimiter
f.write(data)
delimiter
stack[-1][-1][-1] += token
delimiter
getattr(self, self._attr_name)
delimiter
print(findItem(a, b))
delimiter
pathqueue.put(path)
delimiter
True
delimiter
f.quit()
delimiter
collatz(12)
delimiter
next(it)
delimiter
ch.setLevel(logging.DEBUG)
delimiter
np.percentile(S, [0, 100])
delimiter
lifetime = models.IntegerField()
delimiter
a = [7, 14, 0, 9, 19, 9]
delimiter
----APP1
delimiter
self.inbox = self.outlook.Folders(folderindex)
delimiter
np.maximum(one, two)
delimiter
print(user.last_message_time)
delimiter
print(char)
delimiter
next(it)
delimiter
5 - 0.5615
delimiter
plt.show()
delimiter
writer.writerow(line)
delimiter
print(x[::-1])
delimiter
d = {}
delimiter
start_date.replace(month=start_date.month + 1)
delimiter
attr(*args, **kw)
delimiter
extension = os.path.splitext(file_name)[1]
delimiter
house_list = []
delimiter
now = datetime.now()
delimiter
start = time.time()
delimiter
t.join()
delimiter
window.show()
delimiter
wx.lib.pdfwin
delimiter
client.set_options(wsse=security)
delimiter
local.py
delimiter
self.logger.log(self.level, message)
delimiter
r / np.sqrt((r * r).sum(0))
delimiter
result[nearest].append(demand)
delimiter
a == b
delimiter
root.mainloop()
delimiter
self.ui.PoseBtn_GridLayout.setColumnMinimumWidth(4, 4)
delimiter
x
delimiter
soup = BeautifulSoup(html_google)
delimiter
col_combos = cartesian([new.columns[1:], master.columns[1:]])
delimiter
self.value
delimiter
print(x)
delimiter
Py_DECREF(result)
delimiter
print(new_arr)
delimiter
a = np.array([np.array(list) for _ in y])
delimiter
getattr(self.__class__, method).__code__.co_argcount - 1
delimiter
p.close()
delimiter
print(soup.prettify())
delimiter
self.__dict__.update(dill.loads(obj).__dict__)
delimiter
f = s.makefile()
delimiter
resp = make_response(df.to_csv())
delimiter
ind = np.array(list(range(59022)))
delimiter
loop.call_soon(watch_for_file, args.file_path)
delimiter
b = Counter(a)
delimiter
f = urllib.request.urlopen(req)
delimiter
j.set_color(colors[i])
delimiter
your_file.py
delimiter
y = np.cos(x)
delimiter
app = Flask(__name__)
delimiter
paths.extend(find_all_paths(graph, node, end, path))
delimiter
session.add(f)
delimiter
sorted(strings, key=collator.getSortKey)
delimiter
x = 12
delimiter
app = Tk()
delimiter
letters.reverse()
delimiter
item
delimiter
ctrlText.SetBackgroundColour(wx.BLACK)
delimiter
hist, bin_edges = np.histogram(datas, bins)
delimiter
rconsole
delimiter
writer.write_table()
delimiter
show(layout)
delimiter
ax = plt.gca()
delimiter
small_primes = primes[:bisect.bisect(primes, n)]
delimiter
doSomething(a)
delimiter
results.append(list(itertools.product(allfiles, allfiles)))
delimiter
clientImage = np.asarray(bitmapBits, dtype=np.uint8).reshape(height, width, 4)
delimiter
pen = QPen(QColor(255, 0, 100), 1, Qt.SolidLine)
delimiter
df_list = pool.map(reader, file_list)
delimiter
self.zimg_id = self.canvas.create_image(event.x, event.y, image=self.zimg)
delimiter
a * b
delimiter
print(df.apply(assign_metric_vals, 1))
delimiter
size = len(data)
delimiter
dis.dis(haskey)
delimiter
a = np.arange(11)
delimiter
result = []
delimiter
fn(Af, rc1f, rc2f)
delimiter
data = urllib.parse.urlencode(forms)
delimiter
x = np.mgrid[-2:5:120j]
delimiter
os.strerror(2)
delimiter
True
delimiter
PyMODINIT_FUNC
delimiter
user = cursor.fetchone()
delimiter
q.append(item)
delimiter
myHist = plt.hist(data, 100, normed=True)
delimiter
ax.autoscale(True)
delimiter
tag.update()
delimiter
count += 1
delimiter
div(self.rop, self.lop)
delimiter
1, 2
delimiter
[1, 2, 1]
delimiter
{i: j for i, j in zip(data, data[1:]) if i[:-1] == j[:-1]}
delimiter
ncols = sheet.ncols
delimiter
f[1].data
delimiter
cls.x = value
delimiter
STARTLSB = [0]
delimiter
print(str(keys))
delimiter
subprocess.call([cmd, your_executable_to_check_here])
delimiter
Foo.__class__ = Base
delimiter
replaced.append(text[pos:m.start()])
delimiter
self._table = []
delimiter
print(item)
delimiter
info = {}
delimiter
a(1, 2, x=10, y=20)
delimiter
notify.uninit()
delimiter
word_list.append(line.rstrip())
delimiter
B[i][j] = [i, j]
delimiter
l = sc.recv(1024)
delimiter
dis.dis(my_fun)
delimiter
prctl(PR_SET_PDEATHSIG, SIGHUP, 0, 0, 0)
delimiter
manager.start()
delimiter
Author.objects.all()
delimiter
water_held = 0
delimiter
ipca.partial_fit(data[i * chunk_size:(i + 1) * chunk_size])
delimiter
rmin, rmax = np.where(r)[0][[0, -1]]
delimiter
only_singulars = [w for w in noun_list if w == en.noun.singular(w)]
delimiter
partition(list(range(105)), 10)
delimiter
obj = jsonpickle.decode(result.content)
delimiter
pool.apply_async(parallel_worker)
delimiter
database.py
delimiter
print(end_date)
delimiter
x = np.arange(-1, 1, 0.2)
delimiter
X, Y = np.meshgrid(x, x)
delimiter
page + strplus(1)
delimiter
df
delimiter
result.add(now)
delimiter
print(num)
delimiter
f.readline()
delimiter
fib(x - 1) + fib(x - 2)
delimiter
python - V
delimiter
[2, 4, 6, 8]
delimiter
tree = html.fromstring(page_as_string)
delimiter
myservice.listen()
delimiter
4
delimiter
OrderedDict().monkey()
delimiter
outputFile.close()
delimiter
garbage = []
delimiter
output = check_output(cmd, shell=True, stderr=STDOUT).lower()
delimiter
self.transport.write(line)
delimiter
print(a)
delimiter
factory = APIRequestFactory()
delimiter
points.set_data(x, y)
delimiter
obj.isoformat()
delimiter
fut.set_exception(e)
delimiter
list_dir = os.listdir(path)
delimiter
center = vor.points.mean(axis=0)
delimiter
a | b | (x | y)
delimiter
set1 = set(list1)
delimiter
event.widget.tk_focusNext().focus()
delimiter
img_file = BytesIO()
delimiter
libfile.py
delimiter
n = np.empty_like(df)
delimiter
response
delimiter
ax2.yaxis.tick_right()
delimiter
values = list(i.values())
delimiter
a_list = list(map(int, query.split()))
delimiter
avg_round2 = float(sum(b for _, _, b in players)) / len(players)
delimiter
imp.load_module(name, f, path[0], info)
delimiter
mat2[1][i] = 0
delimiter
sock.close()
delimiter
[]
delimiter
text_area = Text(frame)
delimiter
deletetokens[:]
delimiter
is_even(0)
delimiter
button.grid(**buttons[b])
delimiter
x = min(((key, abs(value - v)) for key, value in list(d.items())), key=lambda k_v: k_v[1])[0]
delimiter
cdeltaX, crvalX = linwcs(np.amin(glon), np.amax(glon), len(glon))
delimiter
self.daemonize()
delimiter
celery.worker.job.RESULT_MAXLEN = 1048576
delimiter
count[letters] += 1
delimiter
thread.interrupt()
delimiter
wb = load_workbook(filename, use_iterators=True)
delimiter
u = json.loads(s, object_hook=json_util.object_hook)
delimiter
columnindex += bytechunk / sizeof(double)
delimiter
self.value
delimiter
dir(foo)
delimiter
vfunc = np.vectorize(func)
delimiter
res = res.add(c, fill_value=0)
delimiter
pprint.pprint(r.__dict__)
delimiter
cropped_example.show()
delimiter
do_sth_with(i, item)
delimiter
delattr(this, n)
delimiter
s[s != 0]
delimiter
list(d)
delimiter
print(pix[x, y])
delimiter
b = [float(x) for x in b]
delimiter
re(integrate(1 / (x - y + I * eta), (x, -1, 1))).simplify().subs({eta: 0})
delimiter
out = [(x, y) for x in a for y in b]
delimiter
a = [4, 5, 0, 0, 6, 7, 0, 1, 0, 5] * 1000
delimiter
pairwise.fill(np.nan)
delimiter
sh.write(n, 0, col1_name)
delimiter
step_1 = pd.concat([df, just_dummies], axis=1)
delimiter
self.assertEqual(val1, val2)
delimiter
self._validate_unique(self)
delimiter
r = n - len(s)
delimiter
data = sorted(data, key=keyfunc)
delimiter
df = pd.DataFrame(ts)
delimiter
(1 + 1 + 1) * 1.0 / 10
delimiter
im = Image.open(sys.argv[1])
delimiter
print(list(split_text(d)))
delimiter
df.a = df.a.astype(float).fillna(0.0)
delimiter
r(sys.argv[1])
delimiter
A[::2] += 0.1
delimiter
ax.zaxis.label.set_rotation(a)
delimiter
M[(i), :] *= -1
delimiter
colNameList.append(desc[0])
delimiter
f()
delimiter
self.buffer = [1] * size
delimiter
self.clear_cache()
delimiter
db.system.users.find()
delimiter
print(len(content))
delimiter
result = func(*args, **kwargs)
delimiter
s = set(val for dic in lis for val in list(dic.values()))
delimiter
Counter(dict(zip(vocab, counts)))
delimiter
sys.excepthook = info
delimiter
self.data4undo = [rowstart, colstart, text4undo]
delimiter
print((dict1, dict2))
delimiter
fig = plt.figure()
delimiter
self.overrideredirect(True)
delimiter
r = csv.reader(f)
delimiter
labels = [item.get_text() for item in ax.get_xticklabels()]
delimiter
functools.reduce(lambda x, y: str(x) + sep + str(y), x)
delimiter
np.diff(np.insert(np.where(np.diff(a) == 1)[0] + 1, 0, 0))[::2]
delimiter
lat.iter().zip(lon.iter())
delimiter
True
delimiter
foldl(f, f(head, acc), tail)
delimiter
student.save()
delimiter
filename = askopenfilename()
delimiter
True
delimiter
plt.show(plot)
delimiter
self._lock.release()
delimiter
doc = QtGui.QTextDocument()
delimiter
m = np.ma.masked_where(np.isnan(array), array)
delimiter
print(x)
delimiter
show(p)
delimiter
bar = models.CharField()
delimiter
x = [0.1, 0.2, np.nan, 0.4, 0.5]
delimiter
0
delimiter
uid = pw.pw_uid
delimiter
mix_matrices(A, B)
delimiter
form = cgi.FieldStorage()
delimiter
y = np.sin(u) * np.sin(v)
delimiter
mylist = [(0 if math.isnan(x) else x) for x in mylist]
delimiter
p.name
delimiter
idx = np.where(mask.ravel())
delimiter
sum += value
delimiter
prediction = tf.nn.softmax(logits)
delimiter
x = [0] * a.count(0)
delimiter
data = vals[8:]
delimiter
print(resp.status)
delimiter
Package - 2 / namespace / __init__.py
delimiter
x = Foo()
delimiter
extra_field = db.Column(db.Integer)
delimiter
print(Foo().get_counter())
delimiter
app
delimiter
products = models.ManyToManyField(Product, through=ProductQuantity)
delimiter
d = {(1): [1]}
delimiter
ax = plt.axes(polar=True)
delimiter
irenR.Initialize()
delimiter
pylab.figure()
delimiter
watcher = Watcher()
delimiter
inqueue = mp.Queue()
delimiter
target_path = os.path.join(TARGETDIR, member.filename)
delimiter
result.append(array[mask])
delimiter
do_action()
delimiter
a, b = tee(iterable)
delimiter
keys = sorted(keys)
delimiter
created = models.DateTimeField(auto_now_add=True, db_index=True)
delimiter
x += np.random.randn(6) / 10
delimiter
pixels = pygame.surfarray.pixels2d(srf)
delimiter
y = x
delimiter
self.feed(data)
delimiter
blog_post_mapper = mapper(BlogPost, blog_post_table)
delimiter
pickle.dump(d, f1)
delimiter
df.dtypes
delimiter
ax.xaxis.tick_top()
delimiter
print(custom_sort(population))
delimiter
self.before.append(other)
delimiter
1, 1, 1
delimiter
running_median = [np.median(Y[idx == k]) for k in range(total_bins)]
delimiter
circles1.detectcollision(particles1)
delimiter
args = parser.parse_args()
delimiter
myfunc = itertools.cycle([0, 1]).__next__
delimiter
dists = np.sqrt(((data_sorted[:, 1:] - seed_ext[:, 1:]) ** 2).sum(1))
delimiter
time.sleep(1 + random.random() * 5)
delimiter
dropbox_path = os.path.join(dropbox_destination, relative_path)
delimiter
queryset = User.objects.all()
delimiter
f = urllib.request.urlopen(link)
delimiter
print(x)
delimiter
h, w = a.shape
delimiter
title = models.CharField(max_length=225)
delimiter
columnNames = [d[0].lower() for d in cursor.description]
delimiter
print(df)
delimiter
self.start()
delimiter
resource = WSGIResource(reactor, reactor.getThreadPool(), app)
delimiter
print(s.recvfrom(65565))
delimiter
ulst[j], ulst[i] = ulst[i], ulst[j]
delimiter
frame.Show()
delimiter
each.make_noise()
delimiter
n += 1
delimiter
smtp.connect()
delimiter
srf.blit(f.render(unistr, True, (0, 0, 0)), (0, 0))
delimiter
tai_timestamp = (gps_time_as_tai - tai_epoch_as_tai).total_seconds()
delimiter
accepted_eula = models.BooleanField()
delimiter
date
delimiter
r = requests.get(url)
delimiter
l.extend(other)
delimiter
map(int, strnumbers)
delimiter
timeit(lambda : list(fulldict.keys()))
delimiter
withiny = random.randrange(y1, y2 + 1)
delimiter
suds.client.Client(URL, transport=https)
delimiter
zip(*([iter(seq)] * n))
delimiter
httpd.serve_forever()
delimiter
self.check_all()
delimiter
np.bincount(c)
delimiter
self.model.fit(*args, **kwargs)
delimiter
True
delimiter
count[x] += 1
delimiter
self.num = num
delimiter
month_end = month_dates[-1]
delimiter
image = image.resize((1000, 800), Image.ANTIALIAS)
delimiter
p.join()
delimiter
height = max_height * len(lines)
delimiter
Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])
delimiter
func()
delimiter
mySmallSquareIterator = cycle(i * i for i in range(10))
delimiter
not CHECK_INV_RE.search(mystring)
delimiter
child_strs = [child.display() for child in self.children]
delimiter
xticks = ax.xaxis.get_major_ticks()
delimiter
font.setPointSize(20)
delimiter
start_urls = []
delimiter
self.con.write(data)
delimiter
plt.figure()
delimiter
a and b or c
delimiter
runUntil(end)
delimiter
joined = pd.concat([master, other_data], axis=1)
delimiter
c[1].append(2)
delimiter
comb_dict.setdefault(key, 0)
delimiter
A, B = B, A
delimiter
output
delimiter
bins = np.arange(256).reshape(256, 1)
delimiter
counts = Counter(x)
delimiter
lats = np.linspace(-90, 90, bm.shape[0])[::-1] * np.pi / 180
delimiter
f[0]
delimiter
1.1 - int(1.1)
delimiter
seen = set()
delimiter
half = (x.max() - x.min()) / 2
delimiter
random.random()
delimiter
words = line.split()
delimiter
other_list = []
delimiter
iter(self.list)
delimiter
socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS4, proxy_ip, port, True)
delimiter
d.append(Distance(_, unit=u.kpc).value)
delimiter
im = cvt2cga(imgfn)
delimiter
BOOST_PYTHON_MODULE(hello)
delimiter
a = cyclicallist([0, 1, 2])
delimiter
f()
delimiter
file.close()
delimiter
self.kNN.fit(X2, y2)
delimiter
assigned_to = models.ManyToManyField(to=User)
delimiter
l = [1, 0, -2, 0, 0, 4, 5, 0]
delimiter
cursor = cnxn.cursor()
delimiter
byyearday = byyearday, byeaster = byeaster, byweekno = byweekno,
delimiter
sys.excepthook = exception_handler
delimiter
MSE = ((Y - EY) ** 2).sum() / (n - X.shape[1])
delimiter
p.search(s).group()
delimiter
grand = os.path.join(agrandie, filename)
delimiter
1.0 / (i % 2)
delimiter
s = socket.socket()
delimiter
bin(a | b)
delimiter
anim = animation.FuncAnimation(fig, animate, frames=Nt)
delimiter
result.append(element)
delimiter
c = 0
delimiter
y_series_2 = [1, 2, 5, 6, 7]
delimiter
df = pd.DataFrame.from_dict(d_collapsed)
delimiter
parser = xml.sax.make_parser()
delimiter
plt.xlim(0, 160)
delimiter
l = list(s)
delimiter
timeout_timer.start()
delimiter
beats.reverse()
delimiter
ignore = np.zeros([b.shape[0] - 1, a.shape[0] - 1], dtype=bool)
delimiter
cumprobs = [(p / cumprobs[-1]) for p in cumprobs]
delimiter
jobs.append(p)
delimiter
app.debug = True
delimiter
ts2.head()
delimiter
map.put(i, i)
delimiter
args[0], args[1], args[2:]
delimiter
a = Swallow()
delimiter
NP.insert(T, 4, c, axis=1)
delimiter
reader = csv.reader(f)
delimiter
changewriter.writerow(result)
delimiter
Al = A.tolil()
delimiter
widget.layout().addWidget(label)
delimiter
hist, bins = np.histogram(x, bins=20, density=True)
delimiter
sh = logging.StreamHandler()
delimiter
relaxng.validate(doc2)
delimiter
callback(arg, self)
delimiter
transport.close()
delimiter
s1 * s2.values
delimiter
listy = [item[1] for item in data]
delimiter
do_something(logf)
delimiter
print(name)
delimiter
cv = Canvas(root)
delimiter
row_order = np.argsort(r, axis=1)[:, ::-1]
delimiter
s
delimiter
self.model = cv2.SVM()
delimiter
s1 = [(i + 10) for i in range(0, 11, 2)]
delimiter
first = np.mean(arr[:toslice].reshape(-1, stride), axis=1)
delimiter
clear_mappers()
delimiter
section.insert(0, table)
delimiter
pyplot.show()
delimiter
reloadkeys = set(globaldict) & set(sys.modules)
delimiter
result = []
delimiter
print(sys.maxsize)
delimiter
type(b)
delimiter
outputs.set_shape(inputs.get_shape())
delimiter
self.a = a
delimiter
int(val)
delimiter
fig = figure()
delimiter
t.close()
delimiter
fig = plt.figure(figsize=figsize, dpi=dpi)
delimiter
myset = set()
delimiter
a_thread = threading.Thread(target=get_a)
delimiter
StartupNotify = true
delimiter
False
delimiter
sorted_list = sorted(my_list)
delimiter
file_toload.close()
delimiter
t2 = [(a + b) for a, b in zip(t, t[1:])]
delimiter
yacc.restart()
delimiter
ycenters = ychunks.mean(axis=1)
delimiter
minmax = [(min(v) if k else max(v)) for k, v in groupby(lst2, lambda a: a < 0)]
delimiter
base.extend([ii] * count)
delimiter
plt.yticks(list(range(len(corr.columns))), corr.columns)
delimiter
aaB
delimiter
self.flush()
delimiter
brr = np.reshape(arr, arr.shape[0] * arr.shape[1])
delimiter
it = lambda : list(chain(*tupleOfTuples))
delimiter
True
delimiter
parser = argparse.ArgumentParser()
delimiter
np.where(np.any(np.isnan(df.convert_objects(convert_numeric=True)), axis=1))
delimiter
my_trigger()
delimiter
y2 = np.array([f(t, 50).real for t in time])
delimiter
game.process()
delimiter
r = self.build_response(request, resp)
delimiter
1 | MD5
delimiter
Column(_groupConcat(_to_seq(sc, [col], _to_java_column)))
delimiter
x = datetime.timedelta(hours=hours, minutes=minutes, seconds=seconds)
delimiter
help(plt.ylim)
delimiter
self.assertLengthIsOne(self.seq)
delimiter
Frame.__init__(self, parent)
delimiter
757
delimiter
760
delimiter
761
delimiter
pygame.draw.circle(surface, (0, 0, 0), (10, 10), 15, 0)
delimiter
Al = [0, x, x, x, x, x]
delimiter
times = [800.0, 790.0, 780.0, 770.0]
delimiter
example[1:5, 10:15]
delimiter
print(urow_avg)
delimiter
monthToNumber = dict((name, i + 1) for i, name in enumerate(months))
delimiter
t = threading.Thread(target=task, args=(sc, i))
delimiter
characters += len(word)
delimiter
datafilter = datafilter & Q(publish_date__month=now.month)
delimiter
theta, r = np.meshgrid(thetas, radii)
delimiter
plt.grid()
delimiter
results = parse_jid(sys.argv[1])
delimiter
sprockets_to_dealloc = self.sprockets.copy()
delimiter
plt.show()
delimiter
print(render_user(userinfo))
delimiter
Z[test[:, 0:2].T.tolist()] = test[:, (2)]
delimiter
pprint(_)
delimiter
type(my_set)
delimiter
np.concatenate(out)
delimiter
self.Bind(wx.EVT_TIMER, self.NextFrame)
delimiter
_ * 2 - math.pi
delimiter
b = formB.save(commit=False)
delimiter
minutes = int(secs / 60) % 60
delimiter
self.send_response(500)
delimiter
self.subplot.clear()
delimiter
print(signed_url)
delimiter
result = []
delimiter
sort_index = numpy.argsort(vals)
delimiter
self.send_response(200)
delimiter
s2 = df.groupby([lambda x: x.year, lambda x: x.month]).sum()
delimiter
Z = tf.sqrt(Delta_tilde)
delimiter
float * cfloats
delimiter
getsizeof(json.dumps(my_dictionary))
delimiter
cast = models.ForeignKey(Casts, null=True)
delimiter
d = {x: i for i, x in enumerate(set(a))}
delimiter
a = A()
delimiter
fig = plt.figure()
delimiter
print(len(binary_split_array.tobytes()))
delimiter
page = bokeh.plotting.gridplot([[fig], [current_selection]])
delimiter
fd.write(data)
delimiter
data = clientsocket.recv(1024).decode()
delimiter
self.loop.stop()
delimiter
module = REVERSE_MAPPING[module]
delimiter
self._set(**kwargs)
delimiter
new_list.append(item + 10)
delimiter
names.append(name)
delimiter
a[np.isnan(a)] = b[np.isnan(a)]
delimiter
y = object()
delimiter
num_processes = multiprocessing.cpu_count()
delimiter
decorator
delimiter
print(alist)
delimiter
image = tf.cast(image, dtype=tf.uint8)
delimiter
dill.detect.badtypes(f)
delimiter
generate_n_primes(10, 1000)
delimiter
count = max(0, len(sequence) - n + 1)
delimiter
cls
delimiter
pub_key_der = b64decode(pub_key_pem)
delimiter
self.sync_string(node)
delimiter
x = np.linspace(0, 2 * np.pi, 10)
delimiter
metadata = MetaData()
delimiter
grayed_rgb_color
delimiter
fdst.write(buf)
delimiter
self.f = f
delimiter
self.item_id = item_id
delimiter
curOuter = db.cursor()
delimiter
plt.close(fig)
delimiter
adjlist_find_paths(a, n, m)
delimiter
result = contains_sequence(test_iterable, search_sequence)
delimiter
goto(x, y)
delimiter
cxt.mount()
delimiter
{{message}}
delimiter
os.dup2(0, 2)
delimiter
C = zip(A, B)
delimiter
p.line(50, 660, 560, 660)
delimiter
inputLayer = [neurons[0], neurons[1]]
delimiter
klass = getattr(mod, name)
delimiter
clips.Reset()
delimiter
s += l[i]
delimiter
print(ret.read())
delimiter
deletions.append(keepers[key][0])
delimiter
path = os.path.join(directory, fl)
delimiter
counts = Counter(zip(predicted, gold))
delimiter
a[1] = 4
delimiter
process_messages()
delimiter
tar.addfile(tarinfo=info, fileobj=string)
delimiter
plt.close(fig)
delimiter
scrollbar.config(command=self.data.yview)
delimiter
phrase.capitalize()
delimiter
results = q.fetch(10)
delimiter
initial = np.random.rand(1000)
delimiter
pl.ylim(-1.2, 1.2)
delimiter
[8, 9, 10, 11],
delimiter
float(s)
delimiter
plt.plot(b)
delimiter
__metaclass__ = ModelBase
delimiter
df.plot(ax=ax1)
delimiter
((n,) + t for n, t in enumerate(zip(*iterables), start))
delimiter
schedule_once(tasks.some_task_a, interval=60 * 5)
delimiter
log.append(p.url)
delimiter
print(a[0, 1])
delimiter
df.dtypes
delimiter
A = np.random.randint(2, size=(n, n))
delimiter
yaml.add_representer(folded_unicode, represent_folded_unicode)
delimiter
argparser = argparse.ArgumentParser()
delimiter
file.close()
delimiter
render_to_response(renderer, values)
delimiter
new_image.show()
delimiter
manager = mp.Manager()
delimiter
fig = figure()
delimiter
queryset = Company.objects.all()
delimiter
plot(t, s1)
delimiter
fig = plt.figure(1, figsize=(figwidth, figheight))
delimiter
eigs(A, n)
delimiter
Thread(target=read_stdout, args=[process]).start()
delimiter
triplets[iT].append(listB[iB])
delimiter
f.write(z)
delimiter
cursor = connection.cursor()
delimiter
x ** (m * m)
delimiter
assert os.path.isfile(subimg_path)
delimiter
csv_reader = csv.reader(count_file)
delimiter
request = urllib.request.Request(url)
delimiter
x * x * x
delimiter
np_d_spiky = np.vectorize(d_spiky)
delimiter
file_size = values[0]
delimiter
textlist.append(str(a))
delimiter
people = result.fetchall()
delimiter
app.exec_()
delimiter
n = np.empty((1,), dtype=object)
delimiter
R = dot(u, vh)
delimiter
messages = Message.objects.all()
delimiter
R = random.randint(1, 8)
delimiter
np.lib.stride_tricks.as_strided(a, shape=shape, strides=strides)
delimiter
item_forms = items_formset()
delimiter
list(gen_all_substrings(string))
delimiter
kl = KineticLaw(2, 4)
delimiter
test_file.write(bytearray(binary_data))
delimiter
1, 2
delimiter
numpy.logspace(0, 2, 10)
delimiter
self.current - 1
delimiter
print(a + b + c)
delimiter
canvas.tag_raise(object)
delimiter
start = pd.datetime(2016, 5, 22, 8, 0, 0)
delimiter
b = set(counts.keys())
delimiter
print(i, line.strip())
delimiter
json.JSONEncoder.default(self, obj)
delimiter
d[key] = {}
delimiter
lst.append(element)
delimiter
self.fc2 = FigureCanvas(self._fig)
delimiter
foo(bar)
delimiter
mean, sigma = a.mean(), a.std(ddof=1)
delimiter
round(x, sig - int(floor(log10(x))) - 1)
delimiter
pd.DatetimeIndex(df.t).normalize()
delimiter
prime_form(11, 1, 0)
delimiter
current_dict = current_dict.setdefault(letter, {})
delimiter
plotter(im, i)
delimiter
print(new_a)
delimiter
a.run()
delimiter
b = datetime.timedelta(minutes=1, seconds=1)
delimiter
n = len(points) - 1
delimiter
m = random.randint(0, 1000000)
delimiter
blocks.append([])
delimiter
P.show()
delimiter
foo + bar
delimiter
print(l)
delimiter
msglist.append(chunk)
delimiter
node = Node(node, category, name)
delimiter
setattr(F, name, TextField(name.title()))
delimiter
sess.run(init)
delimiter
newshapes = np.diag(np.array(shape) - 1) + 1
delimiter
gevent.spawn(read_stream, p1.stderr)
delimiter
list.append(self, x)
delimiter
print(np.all(rs[(find_map_sorted(r2[:-10], rs)), :] == r2[:-10]))
delimiter
deleteresult[key]
delimiter
plt.plot([(x * slope) for x in range(0, 11)])
delimiter
now = datetime(datetime.now().year, datetime.now().month, 1)
delimiter
chr(26)
delimiter
x = np.asanyarray(x)
delimiter
train_idxs.append(X_train_1[i_1:i_1 + 1].index)
delimiter
f1 = plt.figure()
delimiter
response = HttpResponse(content_type=mimetype, status=206)
delimiter
arr = np.empty([len(a) for a in arrays] + [la])
delimiter
plt[:show]()
delimiter
rank, v[rank:].T.copy()
delimiter
now = datetime.now()
delimiter
fp.write(decompressor.decompress(chunk))
delimiter
self.result = []
delimiter
time.sleep(1.0)
delimiter
mult = np.hstack((np.repeat(4, p1.shape[0]), np.repeat(2, p2.shape[0]), 1, 1))
delimiter
tb = e.__traceback__
delimiter
print(type(b))
delimiter
subnets
delimiter
db_instance = db_instance_qs.get()
delimiter
main()
delimiter
tabin = [ord(char) for char in tabin]
delimiter
Tkinter.Text.__init__(self, parent, cnf, **kw)
delimiter
gs = gridspec.GridSpec(1, 2, width_ratios=[10, 1])
delimiter
d = {}
delimiter
persons = [re.match(pattern, x).groups()[0] for x in my_strings]
delimiter
y = np.empty((Ndown, Ndown))
delimiter
myfunc()
delimiter
theta = x[1]
delimiter
models.Model.__new__(cls, *args, **kwargs)
delimiter
ingredient_list.append(ingredient)
delimiter
expanded = os.path.expanduser(dirpath)
delimiter
client(clientsocket, address)
delimiter
y[:] = np.where(mask, np.nan, np.log(r) * np.sin(t))
delimiter
log = logging.getLogger()
delimiter
a[index] = 1.0
delimiter
a.show()
delimiter
line = line.strip()
delimiter
sleep(1)
delimiter
l = p.stdout.readline()
delimiter
self._val += 1
delimiter
os.chdir(curdir)
delimiter
plt.boxplot(data)
delimiter
a[1:4, 1:4] = np.nan
delimiter
print(df1)
delimiter
print(a.calculate(1))
delimiter
coeffs2 = np.corrcoef(a.todense(), b.todense())
delimiter
ax.draw_artist(ellip)
delimiter
pixels = img.load()
delimiter
print(find_centroid(im, 1))
delimiter
self.x + other
delimiter
time = rrdMetric[0][0]
delimiter
n * fact(n - 1)
delimiter
A = np.linspace(0, 100.0, 200)
delimiter
zip(a, b)
delimiter
plt.bar(ind, dat, color=col, bottom=bot)
delimiter
deleteoutputter
delimiter
a = int(part)
delimiter
child.interact()
delimiter
do_something_else()
delimiter
b.B()
delimiter
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
delimiter
a.denominator
delimiter
labels = ax2.get_xticklabels()
delimiter
webElement.clear()
delimiter
x = [[1, 2], 1, 1, [2, 1, [1, 2]]]
delimiter
self.app(environ, start_response)
delimiter
len_arrayIN = arrayIN.shape[0]
delimiter
self.col0 = [1.0, 0.0, 0.0, 1.0]
delimiter
print(x[n - 1])
delimiter
F = treecomp(T, L)
delimiter
[(L[i] + L[i + sep]) for i in range(len(L) - sep)]
delimiter
r.content
delimiter
tempShape = tuple([(i * j) for i, j in zip(finalShape, mults)])
delimiter
self.nodes[self.get_index(key)]
delimiter
ret.append((point[0] - 2 * (point[0] - TOP_RIGHT[0]), point[1]))
delimiter
q.put(i)
delimiter
args.insert(0, sys.executable)
delimiter
print(textwrap.dedent(s))
delimiter
foo.__new__(foo, arg=1)
delimiter
d4.update(d2)
delimiter
time.sleep(self.timeout)
delimiter
data.pop(word[i - 1:i])
delimiter
rest = [factors[i] for i in range(len(factors)) if i not in which_is]
delimiter
token.authorize(client)
delimiter
s.upper()
delimiter
~Q(Q)
delimiter
test = np.random.normal(0, 1, 1000)
delimiter
f(f, *p, **kw)
delimiter
system / __init__.py
delimiter
field_class = forms.ModelMultipleChoiceField
delimiter
ax[1].plot(dates, list(range(10)))
delimiter
self.quit(file)
delimiter
BisBigger.data = np.where(BisBigger.data < 0, 1, 0)
delimiter
sum
delimiter
UTC_OFFSET_TIMEDELTA = datetime.datetime.utcnow() - datetime.datetime.now()
delimiter
ax = fig.add_subplot(111)
delimiter
new_list1, new_list2 = zip(*create_matchs(list1, list2))
delimiter
swap(L[:])
delimiter
plt.figure()
delimiter
client = Client(url)
delimiter
user_input = eval(input())
delimiter
form = ImportExcelForm(request.POST, request.FILES)
delimiter
s.ix[x:y]
delimiter
spade = 4
delimiter
w = png.Writer(len(s[0]), len(s), greyscale=True, bitdepth=1)
delimiter
result = input(s)
delimiter
connect_signal2_to_slot2()
delimiter
self.page = QWebPage(self)
delimiter
data[i].pop(pos)
delimiter
np.allclose(method1, method2)
delimiter
x.extend(a)
delimiter
columns = len(next(reader1))
delimiter
sum += number
delimiter
pool.join()
delimiter
ls = [set(l) for l in ll]
delimiter
self.assertEqual(Foo.query.count(), 0)
delimiter
foo.do_interesting_stuff()
delimiter
lstB = [number_list[i]]
delimiter
tcpcounter = 0
delimiter
udpcounter = 0
delimiter
sums = [sum(tab[i:i + 4]) for i, v in enumerate(tab) if i + 4 <= len(tab)]
delimiter
d = {}
delimiter
y[1:] = x[1:] - x[:-1]
delimiter
f.write(FOOTER)
delimiter
flags = re.MULTILINE | re.DOTALL
delimiter
glMatrixMode(GL_MODELVIEW)
delimiter
new_df = new_df.fillna(0).astype(int)
delimiter
True
delimiter
assert find_max([-1]) == 0
delimiter
logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)
delimiter
field2 = models.TextField()
delimiter
d = {}
delimiter
pattern.search(t)
delimiter
pd.DataFrame({cn: cv for cn, cv in zip(colnames, col_iterator)})
delimiter
System.out.println(i)
delimiter
self.worker = Worker(self.spinbox.value())
delimiter
result = list(zip(*withspaces))
delimiter
b = [(10, 40), (40, 60), (60, 90), (90, 100)]
delimiter
print(hex2(-1))
delimiter
arr = eval(repr(([[0] * 5] * 10)))
delimiter
self.name = name
delimiter
basicConfig(level=log_level)
delimiter
df2 = df1.copy()
delimiter
last = row[1]
delimiter
44.44444444444444, 55.55555555555556, 66.66666666666667
delimiter
size -= len(data)
delimiter
img.save(file_out)
delimiter
a.update(b)
delimiter
x = np.arange(10 * 10).reshape((10, 10))
delimiter
print(shortcut.Targetpath)
delimiter
json.dumps(serialize(obj))
delimiter
days = df.groupby(diffs).size()
delimiter
df
delimiter
df1 = df.copy()
delimiter
rectangle.draw()
delimiter
True
delimiter
iterate_file(file_name)
delimiter
dev1 == dev2
delimiter
rows = results(exec_immediate(connection, sql))
delimiter
start_date.replace(month=1)
delimiter
data = res.read()
delimiter
MAKE_NOISE = False
delimiter
document.write(xmlhttp.status + xmlhttp.statusText)
delimiter
gen = get_line()
delimiter
b.f()
delimiter
frame.Show()
delimiter
red = np.random.hypergeometric(nred, ngreen + nblue, m)
delimiter
toc = time.clock()
delimiter
p = pyaudio.PyAudio()
delimiter
his = np.histogram(a, bins=list(range(5)))
delimiter
dst.copy_key(k.key.name, src, k.key.name)
delimiter
secs = x.total_seconds()
delimiter
a2 = A.objects.create()
delimiter
self.__getattribute__(key)
delimiter
acos(cos_x) * EARTH_RADIUS_IN_MILES
delimiter
self.value = 1 / (1 + math.exp(-x))
delimiter
test_Dict = {}
delimiter
p.join()
delimiter
a = np.random.rand(10, 10, 10)
delimiter
os.makedirs(self.cache_location)
delimiter
func(*args)
delimiter
r = view(request, *args, **kwargs)
delimiter
root.after(0, download_chunk)
delimiter
long_desc = forms.CharField(widget=forms.Textarea)
delimiter
fig = matplotlib.pyplot.figure()
delimiter
filename
delimiter
ax.set_xticks(ind + width + width / 2)
delimiter
a2.append(s)
delimiter
combinedRDD = zdd1.join(zdd2).map(lambda k_v: k_v[1])
delimiter
new_row = row
delimiter
self.comovingdist(z) / (1 + z)
delimiter
triple(square(x))
delimiter
assert len(demangled) == len(names) + 1
delimiter
print(path)
delimiter
response = opener.open(request)
delimiter
result.append(current_string_split)
delimiter
plt.legend()
delimiter
fig = plt.figure()
delimiter
print(self.__ordered_fields__)
delimiter
desired_list = list(d.values())
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
{k: (v[0] if len(v) == 1 else v) for k, v in list(items.items())}
delimiter
characters.append(char_image)
delimiter
secondbut.pack()
delimiter
col_order = np.argsort(r, axis=0)[::-1, :]
delimiter
x + y
delimiter
self._load()
delimiter
extract_file.write(bytearray(binary_data))
delimiter
do_stuff
delimiter
c.save()
delimiter
self.tin = wx.TextCtrl(self, size=wx.Size(600, 400), style=wx.TE_MULTILINE)
delimiter
A = np.random.randn(1000, 2000)
delimiter
pdf = FPDF()
delimiter
t.setDaemon(True)
delimiter
lens = [max(map(len, col)) for col in zip(*s)]
delimiter
result = set()
delimiter
type.__call__(A)
delimiter
d = {}
delimiter
self.tab.removeTab(index)
delimiter
listofzeros
delimiter
frags.append(items[0])
delimiter
create_object(form_class=FooForm)
delimiter
abcba
delimiter
abcdcba
delimiter
abcdedcba
delimiter
items.append(lambda i=i: dump(i))
delimiter
x = []
delimiter
print(v)
delimiter
{{formset.empty_form.as_p}}
delimiter
4, [False, True, True, False]
delimiter
binop.setParseAction(lambda t: ops[t[1]](t[0], t[2]))
delimiter
pool.join()
delimiter
elements = (len(xedges) - 1) * (len(yedges) - 1)
delimiter
cache[args] = f(*args)
delimiter
ax2.plot(list(range(1, 10, 1)))
delimiter
mydict = dict()
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
cur = fromdb.cursor()
delimiter
print(df)
delimiter
p.html()
delimiter
OrderedDict(sorted(l))
delimiter
uinfo = user.get_profile()
delimiter
mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()
delimiter
len(str(name))
delimiter
list1 = []
delimiter
infilename = os.path.join(path, folder, filename)
delimiter
recursivedict = lambda : defaultdict(recursivedict)
delimiter
x * x
delimiter
[1.000049]
delimiter
len(n)
delimiter
a = numbers()[0]
delimiter
kind2 = params.get(cls._KIND2_PARAM)
delimiter
utc_date = date_aware_la.astimezone(pytz.utc)
delimiter
self.assertEqual(FooCycle.query.count(), 0)
delimiter
df = df[col_order]
delimiter
self.indexdict[r]
delimiter
chunks.append(chunk)
delimiter
num += 1
delimiter
df
delimiter
self.irenL.Render()
delimiter
1.0 / (x + 1)
delimiter
iter(self.__dict__)
delimiter
currdir = os.getcwd()
delimiter
model.setItem(row, column, item)
delimiter
sys.meta_path.append(self.collector)
delimiter
track1.play_forever()
delimiter
merged = dict()
delimiter
time.sleep(wait)
delimiter
root.quit()
delimiter
flist.append(func)
delimiter
b = models.CharField(max_length=42)
delimiter
print(mylist)
delimiter
out = check_output(args, stderr=t)
delimiter
print(np.arange(100).itemsize)
delimiter
kv = [(bits[i][-1], bits[i + 1][0]) for i in range(len(bits) - 1)]
delimiter
logger.addHandler(fhandler)
delimiter
print(a, b)
delimiter
o.join()
delimiter
print(x)
delimiter
index = nanargmin(zfit, axis=1)
delimiter
sess.run(init)
delimiter
f.close()
delimiter
instance._prefetched_objects_cache[instance.children.prefetch_cache_name]
delimiter
locals().update(d)
delimiter
queue.put(result)
delimiter
a = time.time()
delimiter
self.cub2 = cub2
delimiter
self.setPixmap(pic)
delimiter
self.exns.add(node.name)
delimiter
callback = tsum.subtask()
delimiter
my_module.my_reload()
delimiter
name in self.archive.getnames()
delimiter
p = Process(target=instance.start_listener)
delimiter
traceback.print_exception(type, value, tb)
delimiter
f(**kwargs)
delimiter
u = np.linspace(0, 2 * np.pi, 50)
delimiter
a = 5
delimiter
vector
delimiter
grid_x, grid_y = np.mgrid[min(x):max(x):100j, min(y):max(y):100j]
delimiter
server_A_thread = threading.Thread(target=server_A.serve_forever)
delimiter
Package - 1 / namespace / __init__.py
delimiter
i += 1
delimiter
merged = pd.concat((df1, d_teams), axis=1)
delimiter
bind(myfn, arg(1), 17, arg(0))(19, 14)
delimiter
fig = plt.figure()
delimiter
row.append(SchemaTable.Rows[i][j].ToString())
delimiter
client = paramiko.SSHClient()
delimiter
f.seek(4, 1)
delimiter
ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])
delimiter
gc.disable()
delimiter
model = QtGui.QStandardItemModel(rows, columns, self.table)
delimiter
cursor.close()
delimiter
a = A.__new__(A, *args, **kwargs)
delimiter
serialize(obj.__dict__)
delimiter
xlim, ylim = axis.get_xlim(), axis.get_ylim()
delimiter
assert my_round(5.24) == 5.25
delimiter
root, ext = os.path.splitext(filename)
delimiter
s = [i for i in range(100)]
delimiter
plt.xlim(bin_edges.min(), bin_edges.max())
delimiter
icon = wx.Icon(path, wx.BITMAP_TYPE_PNG)
delimiter
nexts = cycle(iter(it).__next__ for it in iterables)
delimiter
str(int(other).__add__(self))
delimiter
al.spline1dcalc(s, val), func(val)
delimiter
lines = file.readlines()
delimiter
now = datetime.now(tz=timezone(zonename))
delimiter
kOUT = np.zeros(N + 1)
delimiter
timeout_decorator.timeout(GLOBAL_TIMEOUT)(unittest.main)()
delimiter
nodes[0] = 1, 2
delimiter
d = {}
delimiter
writer = csv.writer(outfile)
delimiter
batch = [val for i, val in enumerate(my_deque) if i in idx_batch]
delimiter
[False, False, False],
delimiter
assert b.f() == 2
delimiter
dis.dis(lis[0])
delimiter
main()
delimiter
wb.SaveAs(newFileName, constants.xlHtml)
delimiter
self.items.append(item)
delimiter
self.__pList = []
delimiter
re.search(self.regex, text)
delimiter
print(tempfile.gettempdir())
delimiter
print(data)
delimiter
a[np.in1d(np.mod(np.arange(a.size), 5), idx + offset)] = 100
delimiter
t = urllib.parse.unquote_plus(s)
delimiter
setattr(targetCls, name, closure())
delimiter
cumsum = lambda a: [sum(a[:i + 1]) for i, x in enumerate(a)]
delimiter
780000
delimiter
txnbkwrfkpkmiexloxrifdsnjumkex
delimiter
xlnmlhobtsswjvmqnjupaybkspptpo
delimiter
difference_in_years = relativedelta(end_date, start_date).years
delimiter
[] if S == [] else [S]
delimiter
curs = conn.cursor()
delimiter
df
delimiter
f.levels
delimiter
data = json.loads(obj.to_ecma())
delimiter
setattr(args, self.dest, strategy)
delimiter
M[:, (j)] *= s
delimiter
mutex.release()
delimiter
widget.setLayout(layout)
delimiter
app1 = Flask(__name__)
delimiter
l.pack()
delimiter
response
delimiter
deleteself[key]
delimiter
json = urlopen(request).read().decode()
delimiter
B().do_something()
delimiter
HttpResponse(tmplt.render(context))
delimiter
print(rd[4])
delimiter
dis(f)
delimiter
t.show_all()
delimiter
turtle.done()
delimiter
q.put(1)
delimiter
shuffle(numbers)
delimiter
print(f(a))
delimiter
df.values
delimiter
list(one_duplicate(4))
delimiter
C - 0.120282
delimiter
r = np.empty(n, dtype=np.int64)
delimiter
rIndex.reassign(9)
delimiter
df
delimiter
self.aws.send(data)
delimiter
five_months_ago = datetime.datetime.now() - relativedelta(months=5)
delimiter
cleanfile.append(line)
delimiter
pool.close()
delimiter
d[t[0]] = d.get(t[0], 0) + int(t[1])
delimiter
context
delimiter
email = EmailField(required=True)
delimiter
ustyle = nl.create_userstyle()
delimiter
b = np.array([int])
delimiter
x1 = (x - x0) * cos(theta) - (h - y - y0) * sin(theta)
delimiter
self.data = []
delimiter
HttpResponseNoContent()
delimiter
features = [feature_names[i] for i in tree.tree_.feature]
delimiter
Point(1, 2)
delimiter
abort(404)
delimiter
score_pairwise(seq1, seq2, blosum, -5, -1)
delimiter
df
delimiter
content = db.StringProperty(multiline=True)
delimiter
my_func(42)
delimiter
x()
delimiter
somelist.remove(x)
delimiter
nth_element(my_list, 4, key=f)
delimiter
x[0, 1, 1] = 111
delimiter
col = scipy.array([2, 4, 6, 8, 10])
delimiter
f.write(decodestring(b64data))
delimiter
socket.inet_ntoa(unpacked)
delimiter
[[], []]
delimiter
y[1][0] = 4
delimiter
{{link.href | escape}}
delimiter
df.b.loc[s & (s != s.shift(-1))]
delimiter
df = pd.DataFrame(rslt[0])
delimiter
C = np.hstack(C)
delimiter
row.pop(4)
delimiter
img2 = ImageTk.PhotoImage(Image.open(path2))
delimiter
df
delimiter
assert -1 <= sinval(i) - sintable(i) <= 1
delimiter
root = Tk()
delimiter
app = Bottle()
delimiter
holidays = [datetime.date(2012, 5, 1), datetime.date(2012, 6, 1)]
delimiter
print(fileSystemNameBuffer.value)
delimiter
turtle.forward(n)
delimiter
print(render())
delimiter
request = response.wsgi_request
delimiter
print(QWidget)
delimiter
res = func(*args, **kwargs)
delimiter
data = list(range(4000000))
delimiter
[0, 0, 0, 0, 164, 1, 161, 2, 161, 4],
delimiter
pt.plot.bar()
delimiter
getattr(prototype, name)
delimiter
matrix = [np.random.rand(N) for _ in range(M)]
delimiter
unested = [list(itertools.chain(*sub)) for sub in nested]
delimiter
ax2 = ax1.twiny()
delimiter
Area2(a, b, c) > 0
delimiter
strmap[string]
delimiter
button1.pack()
delimiter
stdscr = curses.initscr()
delimiter
w[i] = -1
delimiter
f
delimiter
startingmods = modules.copy()
delimiter
logOutput.setReadOnly(True)
delimiter
z = [[(0) for _ in range(8)] for _ in range(8)]
delimiter
print(results[0])
delimiter
data.append([name] + [dct[key] for key in obs_keys])
delimiter
True
delimiter
reader = csv.DictReader(csvfile)
delimiter
index = letters.index(letter)
delimiter
[7, 14, 21],
delimiter
bins.append([min, max])
delimiter
fly.rect.y += fly.vspeed
delimiter
zz = file.readline()
delimiter
frame1.axes.yaxis.set_ticklabels([])
delimiter
self.button.clicked.connect(self.handleTest)
delimiter
sc = ax.scatter(x, y, *args, **kwargs)
delimiter
queue.append(new_path)
delimiter
plt.plot(x, y)
delimiter
os._exit(0)
delimiter
print(row)
delimiter
s.shutdown(socket.SHUT_WR)
delimiter
print(msg.Body)
delimiter
result.append(next_third_friday(result[-1]))
delimiter
weights
delimiter
money = price.quantize(cents, decimal.ROUND_HALF_UP)
delimiter
print(x)
delimiter
test[0][0] = 1.0
delimiter
where_mask = arr[:, :, (ind_vals)] == values
delimiter
noop = logging.NullHandler()
delimiter
vals == (0, 1)
delimiter
[(row[:j] + row[j + 1:]) for row in m[:i] + m[i + 1:]]
delimiter
dict.fromkeys(range(4000000))
delimiter
follow(open(filename))
delimiter
pythonpath, top = os.path.split(os.path.realpath(sys.executable))
delimiter
myThread.setDaemon(true)
delimiter
df
delimiter
serializer = self.get_search_pagination_serializer(page)
delimiter
A = np.cos(a) * np.cos(b) - np.sin(a) * np.sin(b) * np.sin(c - d)
delimiter
import_array()
delimiter
x_max = tf.reduce_max(weights)
delimiter
[]
delimiter
row = len(row_names) - 1
delimiter
getattr(self._wrapped, attr_name)
delimiter
stdout
delimiter
display = Display(visible=0, size=(800, 600))
delimiter
pyobj = json.loads(json_str, object_hook=as_python_object)
delimiter
z = 10 * np.random.normal(mu, sigma, 5000)
delimiter
visited_ids.add(node_a_id)
delimiter
b[0] = -1
delimiter
sns.reset_orig()
delimiter
reraise_with_context(key=key)
delimiter
new_df = pd.DataFrame()
delimiter
pp.pprint(tup)
delimiter
html = markdown(some_html_string)
delimiter
[num for num in range(n) if A[num]]
delimiter
x = [1, 1, 0, 0, 0]
delimiter
set_time_limit(0)
delimiter
observer.start()
delimiter
a == 2
delimiter
result[feature_name] = (df[feature_name] - min_value) / (max_value - min_value)
delimiter
pFact.append(num)
delimiter
layer2 = []
delimiter
result = float(node.text_content().lower().count(word))
delimiter
y1 = scipy.sqrt(1 - (abs(x) - 1) ** 2)
delimiter
print(df2)
delimiter
zero_crossings = numpy.where(numpy.diff(numpy.sign(a)))[0]
delimiter
print(df)
delimiter
hold(True)
delimiter
1, 0, [t]
delimiter
self.connected = True
delimiter
ix = [i for i in df.index if i not in blacklist]
delimiter
k = 0
delimiter
d = -np.dot(np.array(point), np.array(normal))
delimiter
app.url_map.strict_slashes = False
delimiter
dis.dis(foo.__code__.co_consts[1])
delimiter
p.move()
delimiter
creds = tools.run_flow(flow, store)
delimiter
y0 = self.canvas.canvasy(0)
delimiter
oct_num = oct(int(oct_string, 8))
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
output = [[]]
delimiter
value
delimiter
Session.add(f)
delimiter
fig.canvas.draw()
delimiter
gray = im.sum(axis=-1)
delimiter
obj.reprJSON()
delimiter
zip(a, chain(b, [next(b)]))
delimiter
np.dtype(float)
delimiter
g = g[(g.date >= g.beg_date) & (g.date <= g.end_date)]
delimiter
lst1 = [1, 2]
delimiter
delattr(mod, modname)
delimiter
thefile.write(replacedText)
delimiter
self.setSelectionMode(QtGui.QAbstractItemView.ExtendedSelection)
delimiter
0
delimiter
sizer.Add(btnRed, 0, wx.ALL | wx.CENTER, 5)
delimiter
b = np.bincount(a)
delimiter
ax.w_zaxis.set_major_locator(LinearLocator(10))
delimiter
request.notifyFinish()
delimiter
packetcount
delimiter
writer.grab_frame()
delimiter
show()
delimiter
ret, frame = cap.read()
delimiter
self.assertEqual(user.username, testuser.upper())
delimiter
zip(*([iter(iterable)] * n))
delimiter
z().visit(t)
delimiter
x = plt.colorbar(ticks=v)
delimiter
writer.writerow(line)
delimiter
x = X()
delimiter
bmpf.seek(start)
delimiter
self.set_encoding(encoding)
delimiter
event = threading.Event()
delimiter
print(cls)
delimiter
Pagination(query, page, per_page, total, items)
delimiter
sleep(0.1)
delimiter
transform = etree.XSLT(etree.XML(xslt))
delimiter
ret.append(work_on)
delimiter
u_new = np.linspace(u.min(), u.max(), 1000)
delimiter
random_sample_input = random.sample(f.read().split(), 10)
delimiter
+---__init__.py
delimiter
cbar = fig.colorbar(CS, ax=ax)
delimiter
A.__init__(self, a)
delimiter
df_list.append(f)
delimiter
response = urllib.request.urlopen(req)
delimiter
f.write(res)
delimiter
True
delimiter
sys.version_info
delimiter
button = QtGui.QPushButton()
delimiter
prototype = c.CFUNCTYPE(c.c_double, c.c_double, c.c_double)
delimiter
conn.connect()
delimiter
django.db.transaction.enter_transaction_management()
delimiter
itergroup([0, 0], 0)
delimiter
ax.plot(xx, yy, zz)
delimiter
print(q)
delimiter
fig, ax = plt.subplots()
delimiter
sps_a.toarray()
delimiter
tix.Label.__init__(self, parent, **kwargs)
delimiter
X, Y = np.meshgrid(x, y)
delimiter
a[(i), :] = map(float, line.split())
delimiter
print(list(M.keys()))
delimiter
server = smtplib.SMTP(smtpserver)
delimiter
print(self.crawler.stats.get_stats())
delimiter
items_view.show()
delimiter
map(second_lowest, lst)
delimiter
result = [tuple([(item + minval) for item in tup]) for tup in result]
delimiter
employee = json.loads(j, object_hook=class_mapper)
delimiter
create_grid(4, 5)
delimiter
formset = QuoteFormSet()
delimiter
wb.save(output)
delimiter
whos
delimiter
dict.__init__(self)
delimiter
rows * array_shape[1] + cols
delimiter
count += 1
delimiter
x < 1
delimiter
print(df1.assign(sum=df1.sum(axis=1)))
delimiter
8, 1, 8, 8
delimiter
df1.T.max() - df1.T.min()
delimiter
mask = (B == i).astype(int)
delimiter
res[v] += 1
delimiter
roots.add(target)
delimiter
my_date = datetime.strptime(test_date, date_format)
delimiter
a[x], a[y] = a[y], a[x]
delimiter
QListIterator(self)
delimiter
add_str_to_lines(f_name=f_name, str_to_add=str_to_add)
delimiter
os.mkdir(folder_location)
delimiter
job.delete()
delimiter
tableWidget.setCellWidget(1, 1, ImgWidget2(self))
delimiter
BaseHTTPServer.test(CORSRequestHandler, BaseHTTPServer.HTTPServer)
delimiter
elem = ElementTree.parse(file)
delimiter
lhs = dict([(D[k], pop(D, k)) for D in lhs])
delimiter
namespace = parser.parse_args()
delimiter
json.dump(doc, fw, indent=4)
delimiter
f = itemgetter(0)
delimiter
print(r.getc)
delimiter
a.extendleft(b[::-1])
delimiter
handles, labels = plt.gca().get_legend_handles_labels()
delimiter
count = diff.nonzero()[0]
delimiter
df.dic.apply(pn.Series)
delimiter
name = models.CharField()
delimiter
json.dumps(self._items)
delimiter
s
delimiter
test.tell()
delimiter
matrix = [([0] * size) for i in range(size)]
delimiter
__builtins__[attr] = getattr(module, attr)
delimiter
self.output_pipe.close()
delimiter
result[np.arange(len(x)), inv] = 1
delimiter
l.sort(key=lambda x: x.lower())
delimiter
sizer.Add(btn)
delimiter
result.append(current_set)
delimiter
your_csv_file.close()
delimiter
msg
delimiter
print(inputList)
delimiter
letters = [chr(i) for i in range(97, last_letter)]
delimiter
xcen, ycen = xgrid[arr == 255].mean(), ygrid[arr == 255].mean()
delimiter
fd = sys.stdin.fileno()
delimiter
all_other_cases(param)
delimiter
to_translate.translate(translate_table)
delimiter
ls = [1, 7, 0, 4, 9, 6, 150]
delimiter
start = start + math.log(random.random()) / i
delimiter
logging.basicConfig(level=logging.INFO)
delimiter
a = np.arange(1, 10000.0, dtype=int)
delimiter
queryset = queryset.filter(name=name)
delimiter
out[int(n)].append((val, v))
delimiter
log_add2(logB, logA)
delimiter
len(output)
delimiter
id(a.bar)
delimiter
np.diff(data.value.index.values)
delimiter
path_lengths = nx.single_source_dijkstra_path_length(G, node)
delimiter
desired_ages = np.array([1, 4, 16, 29, 80])
delimiter
print(char1, len(char1), len(char1[0]))
delimiter
i.append(x)
delimiter
stdout, stderr = process.communicate()
delimiter
index_list.append(i)
delimiter
y = a[2] * b[0] - a[0] * b[2]
delimiter
xedges = np.linspace(0, N, nbin)
delimiter
c = cv.WaitKey(10)
delimiter
deletetag[attribute]
delimiter
[x] + xs
delimiter
f[:]
delimiter
a = numpy.random.randint(0, 10, 10) * 1.0
delimiter
merge(a, b, lambda in_a, in_b: in_a or in_b)
delimiter
a = NoBCArray([[1, 2]])
delimiter
stock_values[stock][days]
delimiter
interpolator((lats, lons, alts, time), data, point)
delimiter
compressedString = zlib.compress(originalString, 9)
delimiter
tree = etree.iterparse(xml_file)
delimiter
y[:, ::2] = 0
delimiter
driver.close()
delimiter
y.append(x)
delimiter
p.stdin.close()
delimiter
indices.append(idx)
delimiter
data_dict[regNumber] = details
delimiter
modifiers = QtGui.QApplication.keyboardModifiers()
delimiter
d_view = [(v, k) for k, v in d.items()]
delimiter
response = urllib.request.urlopen(req, timeout=int(TIMEOUT))
delimiter
eq2 = TestableEq()
delimiter
args = tuple([CallableWrapper(args[0])])
delimiter
int(key)
delimiter
ax.yaxis.set_major_formatter(ptick.ScalarFormatter(useMathText=True))
delimiter
axe = fig.add_axes([0.4, 0.4, 0.2, 0.2])
delimiter
func()
delimiter
cv_image = img_as_ubyte(any_skimage_image)
delimiter
Rule(SgmlLinkExtractor(process_value=delete_random_garbage_from_url))
delimiter
client.service.GetServiceById(arg1, arg2)
delimiter
packet = f.read()
delimiter
find_merged_group(date_time - 1, date_time + 1)
delimiter
df
delimiter
f_myfile.close()
delimiter
sio.seek(0)
delimiter
ax2.imshow(Z)
delimiter
print(user.screen_name, user.followers_count)
delimiter
self.op._getsymbols()
delimiter
do_something(i)
delimiter
df = [DataFrame(e) for e in data]
delimiter
response = urlopen(url)
delimiter
docfile = open(path)
delimiter
groups = conn.get_all_security_groups()
delimiter
ax1 = fig.add_subplot(111)
delimiter
pydevd.GetGlobalDebugger().setExceptHook(Exception, True, False)
delimiter
cimg = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)
delimiter
post_save.disconnect(my_post_save_handler)
delimiter
natsorted(x, key=lambda y: y.lower())
delimiter
Python - virtualen
delimiter
pool.join()
delimiter
new_cipher.append(letters[letters.index(letter) - shift])
delimiter
modict = module.__dict__
delimiter
_Py_ReleaseInternedStrings()
delimiter
a1 = sheet.cell_value(rowx=0, colx=0)
delimiter
ax.plot(np.cos(x))
delimiter
print(dict(zip(headers, values)))
delimiter
foo[:]
delimiter
res = np.split(idx_sort, idx_start)
delimiter
os.remove(str(file_path) + xfile)
delimiter
sympy.simplify(Lagrange(Lx, Ly))
delimiter
parser = argparse.ArgumentParser(formatter_class=CapitalisedHelpFormatter)
delimiter
regex = re.compile(re.escape(before), re.I)
delimiter
ch = logging.StreamHandler()
delimiter
a = int(round(a * 255))
delimiter
self._metadata = MetaData()
delimiter
list(parser)
delimiter
digits = digits[1:]
delimiter
-(-x // 500) * 500
delimiter
result = np.empty((m, n), dtype=np.float)
delimiter
pos = nx.spring_layout(G, fixed=[1, 2])
delimiter
print(int(floor(f1)))
delimiter
output_wb = copy_workbook(input_wb)
delimiter
res.append(0)
delimiter
temp.append(i[0, j])
delimiter
[get_column(pyQueryRow, index) for index in range(0, 12)]
delimiter
writer.writerows(row + [0.0] for row in reader)
delimiter
inner()
delimiter
calendar.timegm(aprilFirst.timetuple())
delimiter
html = response.read()
delimiter
mod = getattr(mod, comp)
delimiter
m.load()
delimiter
yourlist = [[0, 0, 0], [0, 1, 1], [1, 0, 2]]
delimiter
ax = fig.add_subplot(111)
delimiter
line_segments.append([(x, y) for x, y in vor_.vertices[simplex]])
delimiter
X, Y = np.mgrid[:2 * np.pi:0.2, :2 * np.pi:0.2]
delimiter
source_key = source_bucket.get_key(source_key_name)
delimiter
out = np.zeros(tot_vec, dtype=int)
delimiter
cum.tail(1)
delimiter
py26
delimiter
self.func = func
delimiter
ss = s.split()
delimiter
self.sTitle = os.path.basename(self.fileName)
delimiter
a + b
delimiter
height = self.canvas1.winfo_height()
delimiter
h = [(i[0], int) for i in c.description]
delimiter
fsq = np.fft.rfft(xstep)
delimiter
logger.setLevel(logging.DEBUG)
delimiter
end[r[1]].add(r[2])
delimiter
l.append(val)
delimiter
self.statusItem.setEnabled_(TRUE)
delimiter
unittest.main(argv=unittest.sys.argv)
delimiter
metadata1 = MetaData()
delimiter
df = df.append(dff)
delimiter
waitKey()
delimiter
y = 10 + np.sin(50.0 * 2.0 * np.pi * x) + 0.5 * np.sin(80.0 * 2.0 * np.pi * x)
delimiter
concat(dict(A=A, B=B), axis=1)
delimiter
print(longest_common([b, c]))
delimiter
list(range(5))[5:6]
delimiter
conn = SSH2()
delimiter
user = models.OneToOneField(User)
delimiter
f = Foo()
delimiter
info = json.loads(urllib.request.urlopen(url).read())
delimiter
process(line)
delimiter
tic = time.clock()
delimiter
self = self.setdefault(key, {})
delimiter
objects = getattr(a, link).all()
delimiter
stream.close()
delimiter
server.test(*[1, 2])
delimiter
getattr(self, self.object_class)
delimiter
Model.objects.filter(m2m_field=1)
delimiter
a_normalized = [(float(x - min_a) / (max_a - min_a)) for x in a]
delimiter
serializer_class = UserSerializer
delimiter
L.sort(my_cmp)
delimiter
examined_modules = []
delimiter
thislevel = nextlevel
delimiter
raise TypeError
delimiter
b_minus_a = [item for item in b if item not in a]
delimiter
app = config.make_wsgi_app()
delimiter
print(arr)
delimiter
softmaxval = sess.run(softmax)
delimiter
MyModel2.mymodel1.through
delimiter
q = m.Queue()
delimiter
USE_SHIPPED_BOOST = True
delimiter
list_2_sorted = [e[0] for e in s]
delimiter
elt = ris[0]
delimiter
f.__add__(f)
delimiter
i, card
delimiter
print(df)
delimiter
p.parse_args()
delimiter
-Xmx800m
delimiter
dynamic_import_hack(__name__)
delimiter
import_foo()
delimiter
print(dingo)
delimiter
curs = conn.cursor(MySQLdb.cursors.SSCursor)
delimiter
fig = plt.figure()
delimiter
fn(val1, val2)
delimiter
max(sum(tableData, []))
delimiter
callback(file, mask)
delimiter
clf.tree_.value
delimiter
p = np.cumsum(np.append(0, z))[:-1]
delimiter
_nextkey = 0
delimiter
result.sort()
delimiter
members = models.ManyToManyField(Person)
delimiter
print(row)
delimiter
b = a[:]
delimiter
d[x] += 1
delimiter
data.show()
delimiter
datum = caffe.proto.caffe_pb2.Datum()
delimiter
args.append(value)
delimiter
X1D = np.ravel_multi_index(X.T, dims)
delimiter
A[np.maximum.accumulate(~np.isnan(A))]
delimiter
yappi.get_func_stats().print_all()
delimiter
df2 = (df.ix[:, 1:] - df.ix[:, 1:].mean()) / df.ix[:, 1:].std()
delimiter
fig = Figure()
delimiter
tz2 = pytz.timezone(tz_string)
delimiter
my_tuples = literal_eval(s)
delimiter
models.CharField(blank=True)
delimiter
fig, ax = plt.subplots()
delimiter
tmpset = set(L2)
delimiter
set(data) == set(data2)
delimiter
result
delimiter
loss.eval({input: x, label: y})
delimiter
a.UID
delimiter
ax.scatter(df.index, df.AdjClose)
delimiter
raise ImportError
delimiter
unfiltered = [(myFunction(C), C) for C in originalList]
delimiter
chessboard = Chessboard()
delimiter
new_test
delimiter
self._init_B()
delimiter
main(sys.argv)
delimiter
numpy.genfromtxt(io.BytesIO(x.encode()))
delimiter
ax.set_aspect(1)
delimiter
a.argmin()
delimiter
0
delimiter
curses.echo()
delimiter
self.cj.load()
delimiter
df.shape
delimiter
deleteself._dict[key]
delimiter
Decimal(0.2)
delimiter
a = 1
delimiter
A()
delimiter
mask = np.random.randint(0, 2, a.size)
delimiter
i += 1
delimiter
indices = heapq.nsmallest(10, np.nditer(arr), key=arr.__getitem__)
delimiter
data = fi.readlines()
delimiter
l = s.length
delimiter
self.delete(name)
delimiter
base64.encodestring(s)
delimiter
value
delimiter
new_ys = [point[1] for point in sorted_points]
delimiter
ax2 = plt.subplot(gs[1])
delimiter
ax.plot(plots[curr_pos][0], plots[curr_pos][1])
delimiter
manufacturer = models.ForeignKey(production_models.Manufacturer)
delimiter
__metaclass__ = ValidateType
delimiter
long_word_set = set(long_word_list.split())
delimiter
data
delimiter
x = x + A.__class__((xj[w], (w, tempj[:len(w)])), shape=b.shape, dtype=A.dtype)
delimiter
small_nda = numpy.arange(25).reshape(5, 5) > 10
delimiter
self.a = a
delimiter
items = Item.objects.all()
delimiter
cub_left.append(points[0])
delimiter
l = s.split()
delimiter
x, y = np.unravel_index(indices, full.shape)
delimiter
kwargs
delimiter
y = np.cos(x)
delimiter
s.quit()
delimiter
y.insert(0, y0)
delimiter
newList = json.load(infile)
delimiter
ans.append(cur_set[:])
delimiter
sys.stdout.flush()
delimiter
out = np.zeros(x.shape, dtype=int)
delimiter
ranges.append(middle)
delimiter
Console.WriteLine(test.GetTest())
delimiter
{{form.as_p}}
delimiter
print(word)
delimiter
im.thumbnail(size, Image.ANTIALIAS)
delimiter
j_content = json.loads(line)
delimiter
ax = plt.gca()
delimiter
s.groupby(level=0).value_counts().unstack(fill_value=0)
delimiter
date_values = xlrd.xldate_as_tuple(cell_with_excel_time, wb.datemode)
delimiter
True
delimiter
time.sleep(delay)
delimiter
print(oct_num)
delimiter
bin_midpoints = bins[:-1] + np.diff(bins) / 2
delimiter
[4, 1],
delimiter
self.word_type = str(i)
delimiter
stream.close()
delimiter
srand48(100)
delimiter
yTrain = np.array([[1], [0], [0], [0]])
delimiter
nk1 = not_allowedclass()
delimiter
nk = not_allowedclass()
delimiter
nopreds.discard(v)
delimiter
A = M.sum(0).sum(0)
delimiter
id = Column(Integer, primary_key=True)
delimiter
print(data)
delimiter
grouped = df.groupby(groupbycol)
delimiter
pool = Pool(processes=4)
delimiter
pig
delimiter
data = f.readlines()
delimiter
words.append(teens[u])
delimiter
value = dirty_data[key]
delimiter
print(next(reader))
delimiter
res = requests.get(url)
delimiter
print(u)
delimiter
p = figure()
delimiter
summer_funcs(arguments)(1)
delimiter
response
delimiter
union_set.update(*l)
delimiter
user = User.objects.get(username=username)
delimiter
gen = (len(lst) - 1 - i for i, v in enumerate(reversed(lst)) if v == elm)
delimiter
chunk_file.writelines(sorted_chunk)
delimiter
length_of_int = int(math.log(x, base))
delimiter
array = img.get_array()
delimiter
parents = defaultdict(list)
delimiter
items_view = gtk.TreeView(self.items_store)
delimiter
current[name] = {}
delimiter
1, 2
delimiter
ret = np.array(arr)
delimiter
clusters.append([])
delimiter
iframe_soup = BeautifulSoup(response)
delimiter
[Frameworks]
delimiter
self.fmt.format(*self.args, **self.kwargs)
delimiter
res.append(item)
delimiter
hexList = re.findall(reg, hexes)
delimiter
[a for a, m in mapped if m == minVal]
delimiter
app = QtCore.QCoreApplication(sys.argv)
delimiter
pprint.pprint(type)
delimiter
myDict[tupleItem[1]] = myDict.get(tupleItem[1], 0) + tupleItem[2]
delimiter
pool = Pool(processes=5)
delimiter
v = np.ma.array([10.0, 11, 0], mask=[0, 0, 1])
delimiter
Py_INCREF(IorFError)
delimiter
timeit(lambda : iter(fulldict.keys()))
delimiter
hour, minute = divmod(minutes, 60)
delimiter
graph = GraphAPI()
delimiter
False
delimiter
records = cursor.fetchall()
delimiter
text = Column(String)
delimiter
counter += 1
delimiter
newFile.writerow(midterm1Scores)
delimiter
pAUC = numpy.trapz(tpr_array, fpr_array)
delimiter
struct.unpack_from(fmt, self.recv_buf, self.recv_buf_i - sz)
delimiter
con = pymongo.MongoClient()
delimiter
res = set()
delimiter
sA = sparse.csr_matrix(A)
delimiter
item = list(item)
delimiter
unq = unq.view(my_array.dtype).reshape(-1, my_array.shape[1])
delimiter
f[keep_col]
delimiter
print(marker.group(1))
delimiter
next(tokens)
delimiter
todict(X)
delimiter
htmltree = lxml.html.fromstring(htmlstr)
delimiter
[0, 0, 1],
delimiter
not Counter([1, 2]) - Counter([1, 2])
delimiter
src_files = os.listdir(src)
delimiter
uniq = np.unique(data.view(data.dtype.descr * data.shape[1]))
delimiter
aPtr = ctypes.cast(ctypes.pointer(a), ctypes.POINTER(c_void_p))
delimiter
byte_array = client.read_bytes()
delimiter
alt.write(content)
delimiter
print((dirpath, count))
delimiter
f.close()
delimiter
A = 2 * np.arange(10)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
sys.modules[borkenmod.__name__].__file__
delimiter
timezone = pytz.timezone(tz)
delimiter
idx = np.hstack((X.nonzero(), Y.nonzero()))
delimiter
dok = SparseDOK()
delimiter
False
delimiter
print(boo, boo)
delimiter
self._fileobj.__enter__(*args)
delimiter
id = Column(Integer, primary_key=True)
delimiter
fig, ax = plt.subplots()
delimiter
tmp.add(tuple(i))
delimiter
words = line.split()
delimiter
r.text
delimiter
inputList = ast.literal_eval(sys.argv[1])
delimiter
p.join()
delimiter
k_chars = [(m[0][0] + m[0][1]) for m in k]
delimiter
dic1.keys() | dic2.keys()
delimiter
client = oauth2.Client(consumer, token)
delimiter
b = [4, 5, -10]
delimiter
rescaled = (255.0 / data.max() * (data - data.min())).astype(np.uint8)
delimiter
B.do_your_stuff()
delimiter
max_val = l[max_idx]
delimiter
self.master.mainloop()
delimiter
a = np.hsplit(x, np.arange(12, 129, 12))
delimiter
_fake_tb()
delimiter
p = Popen(cmd, bufsize=1, stdin=open(os.devnull), stdout=PIPE, stderr=STDOUT)
delimiter
root = Tk()
delimiter
browser.visit(url)
delimiter
keyword = CharField(max_length=100)
delimiter
myarray = numpy.zeros((N, M))
delimiter
string = df.to_string(header=False, index=False, index_names=False)
delimiter
equal.append(x)
delimiter
c1 = conn.cursor()
delimiter
testsuite.addTest(unittest.defaultTestLoader.loadTestsFromModule(module))
delimiter
file
delimiter
is_approved_by_company_admin = models.BooleanField(default=False, null=False)
delimiter
settings = json.load(f)
delimiter
isclose(100, 97.1, rel_tol=0.02)
delimiter
s += fh.read(SOME_CHUNK_SIZE)
delimiter
lookup[(a[:, (0)] - 1), :]
delimiter
Weight = celltext(columns[2])
delimiter
list(RecursiveList.flatten(self))[index]
delimiter
new[i, j] = xy[i][j]
delimiter
argsdict[arg] = [val]
delimiter
imputed_array
delimiter
print(parser.parse_args())
delimiter
getCards(subList)
delimiter
data_files = os.walk(path_to_files),
delimiter
definition = models.TextField()
delimiter
ax.bar(x_values, log_y_values)
delimiter
results = list(csv.reader(inputfile))
delimiter
bar_from_foo(self.foo(x))
delimiter
http_server = tornado.httpserver.HTTPServer(Application())
delimiter
result.append([])
delimiter
char_counts[char] += 1
delimiter
temp = os.walk(sys.argv[1], topdown=False)
delimiter
activity.setContentView(self.webview)
delimiter
subject = email_message.subject, body = email_message.body,
delimiter
c = [[np.s_[i:j] for i, j in zip(r[:-1], r[1:])] for r in rgen]
delimiter
buffer = QtCore.QBuffer(array)
delimiter
print(text)
delimiter
string = string[len(to_strip):]
delimiter
self.handlers = collections.defaultdict(set)
delimiter
x.executemany(q, itemBank)
delimiter
self.libc.freelocale(self.ctx)
delimiter
infile = open(sys.argv[1])
delimiter
p.join()
delimiter
A_process.wait()
delimiter
test_set = set(string_to_teat)
delimiter
root = ET.fromstring(TEST)
delimiter
itertools.product(*list(rc.values()))
delimiter
print(cell_value)
delimiter
A[0, 1, 2]
delimiter
print(img_tag)
delimiter
numpy.repeat(vec_row.toarray()[0], numpy.diff(mat_row.indptr))
delimiter
self.filter(group_set__pk=group.pk)
delimiter
print(b1.to_array())
delimiter
self.create_test_data()
delimiter
self.height = height
delimiter
pre_save.disconnect(pre_save_callback, sender=models.MyModel)
delimiter
im = np.vstack([x] * len(x))
delimiter
self.element_tree.write(xml_file)
delimiter
ax.plot_surface(xx, yy, zz, alpha=0.5, color=cmap(c))
delimiter
ax.yaxis.get_major_formatter().base(2)
delimiter
dispatcher.connect(self.dont_close_me, signals.spider_idle)
delimiter
-1
delimiter
stopped = False
delimiter
y = np.random.rand(20, 10)
delimiter
j = np.lexsort(a.T)
delimiter
pylab.imshow(img)
delimiter
taker = manager.taker()
delimiter
fig = pylab.figure()
delimiter
cmp(self.number, other.number)
delimiter
response
delimiter
IFBIsFifo = 0
delimiter
retrieved_a = d[b]
delimiter
value & ~(1 << bit)
delimiter
parsed_object = parser.loads(jsonString)
delimiter
users_count = db.users.count()
delimiter
Particle[i].AddNeighbor(Particle[j])
delimiter
args = parser.parse_args()
delimiter
pil_img = PIL.Image.open(StringIO(data))
delimiter
stack.pop()
delimiter
cursor.execute(query, params)
delimiter
idx = np.argmax(np.abs(w))
delimiter
print(body_content)
delimiter
test(n)
delimiter
print(word)
delimiter
print(row)
delimiter
a, b = select(L, 2, 5)
delimiter
t.sort()
delimiter
print(numbers)
delimiter
a = list(range(10))
delimiter
path = unsearched.get()
delimiter
print(x)
delimiter
soup = BeautifulSoup(html_doc)
delimiter
f()
delimiter
self.__dict__.update(kwds)
delimiter
gamma95 = 1.0 - 0.05 ** (1.0 / (edof - 1.0))
delimiter
count = 0
delimiter
s = list(range(5))
delimiter
result[key] = value
delimiter
True
delimiter
palette = img.getpalette()
delimiter
data = [10.01, 5.001, 4.89, 5.1, 9.9, 10.1, 5.05, 4.99]
delimiter
hash = hashlib.sha1(object_to_cache_as_string).hexdigest()
delimiter
l = [4, 5, 6]
delimiter
raise StopIteration
delimiter
arr2d = np.meshgrid(np.linspace(0, 1, 6), np.linspace(0, 1, 11))[0]
delimiter
render_mpl_table(df, header_columns=0, col_width=2.0)
delimiter
self.change_label()
delimiter
output = [(len(new_string[0]), new_string) for new_string in output]
delimiter
print(key)
delimiter
description = models.CharField(max_length=12)
delimiter
topic = Topic.objects.get(pk=1)
delimiter
fields = urlparse.parse_qs(field_data)
delimiter
args = sys.argv[2:]
delimiter
DT = Column(DateTime(timezone=True), default=func.now())
delimiter
self._hash
delimiter
box = x, y, x + w, y + h
delimiter
np.random.seed(42)
delimiter
waitKey()
delimiter
d = {}
delimiter
parser = argparse.ArgumentParser()
delimiter
wave_file.writeframes(sample_str)
delimiter
remainder = proc.communicate()[0]
delimiter
A = A.astype(np.float64)
delimiter
tbl.append(list())
delimiter
array.ravel()[step:-step:step]
delimiter
customAction
delimiter
a.indices(10)
delimiter
fout.close()
delimiter
response = my_view(request)
delimiter
show(p)
delimiter
rows = [(d, random.random()) for i, d in enumerate(dates) if i not in omit]
delimiter
app = QApplication(sys.argv)
delimiter
print(neighbors(5, 5))
delimiter
curdir = os.getcwd()
delimiter
show()
delimiter
precision = np.random.rand(42) * (1.0 - recall)
delimiter
list(map(set, out))
delimiter
B = expm(A).view(matrix)
delimiter
[1, 2]
delimiter
project_points(x, y, z, *calc_plane_bis(x, y, z))
delimiter
beats = audio_file.analysis.beats
delimiter
sys.exit(0)
delimiter
a / b
delimiter
stdout, stderr = process.communicate()
delimiter
Nk = f.shape[2]
delimiter
rect = self.addRect(r, Qt.white, gradient)
delimiter
fig, ax = plt.subplots()
delimiter
check = np.logical_or(a[:, (1)] == 4, a[:, (1)] == 6)
delimiter
cur = [[14, k, j] for j, k in zip(rows[14], list(range(15)))]
delimiter
sys.stdout.flush()
delimiter
list[:] = newlist
delimiter
print((i, item, len(line)))
delimiter
xLim = [(x * 500) for x in range(1, 8)]
delimiter
X = np.arange(1, 17).reshape(4, 4)
delimiter
np.random.seed(0)
delimiter
im = ax.pcolormesh(phi_itp, theta_itp, d_itp, cmap=plt.cm.coolwarm)
delimiter
cft2.append(t.timeit(number=reps))
delimiter
factory = ParentFactory()
delimiter
hello.hello.restype = ctypes.c_char_p
delimiter
x, y = points.get_data()
delimiter
df.dtypes
delimiter
True
delimiter
result = is_abbrev(abbrev, text)
delimiter
filtervalue = obtain_filter_value_for(filtername)
delimiter
t = Test()
delimiter
df
delimiter
line_len = len(line)
delimiter
d1.update(d)
delimiter
print(nx.pagerank(D, max_iter=200))
delimiter
a, s = s[:n], s[n:]
delimiter
task1 = threading.Thread(target=do_request)
delimiter
soln = np.zeros((size, size))
delimiter
row = np.array([5])
delimiter
ax.plot(list(range(100)))
delimiter
links.append(recursiveUrl(link, 0))
delimiter
set([OriginalExampleObject[A][1], OriginalExampleObject[C][2]])
delimiter
df[col] = preprocessing.StandardScaler().fit_transform(df[col])
delimiter
a = [1, 2, 4]
delimiter
self.location = 0.0
delimiter
df
delimiter
p = ggplot(dat, aes(x=x, y=y, fill=z)) + geom_tile()
delimiter
output = np.copy(arr)
delimiter
1
delimiter
fin.close()
delimiter
5.88199996948
delimiter
agenda_id = models.IntegerField(blank=True, null=True)
delimiter
args = opt.parse_args()
delimiter
comp.compile()
delimiter
agacatacagagacatacagagacatacag
delimiter
form = ProjectAdminForm
delimiter
sorted(s)
delimiter
orders = OrderSerializer(many=True)
delimiter
x = datetime.datetime.combine(today, x)
delimiter
c.join()
delimiter
slcs2 = slcs[:]
delimiter
[setattr(j, col.name, getattr(i, col.name)) for col in i.__table__.columns]
delimiter
user = User.objects.get(username=username)
delimiter
first = word[0]
delimiter
self.setIconSize(QtCore.QSize(124, 124))
delimiter
root = Tk()
delimiter
get(remote_path, fd)
delimiter
path
delimiter
img = ImageTk.PhotoImage(image)
delimiter
PyMODINIT_FUNC
delimiter
self.setLayout(QtGui.QFormLayout(self))
delimiter
lengthy_thingy = Thingy()
delimiter
ma = np.ma.masked_array(a, mask=mask)
delimiter
rectangle.erase()
delimiter
j = np.unravel_index(i, a.shape)
delimiter
list(ips_data.keys())
delimiter
x = (np.random.random((10, 10, 20)) + 0.5).astype(np.int)
delimiter
frame = inspect.getouterframes(frame)[1]
delimiter
print(dist.squareform(dist.pdist(data, lambda x, y: ss.pearsonr(x, y)[1])))
delimiter
user = g.get_user()
delimiter
d = datetime.date(2010, 12, 5)
delimiter
next(it)
delimiter
print(format_table(L_in_columns))
delimiter
logging_thread.start()
delimiter
functools.update_wrapper(_d, d)
delimiter
globs = set()
delimiter
sleep(1)
delimiter
output_csv.close()
delimiter
signal.signal(signal.SIGTERM, handle_signal)
delimiter
linkto = os.readlink(srcname)
delimiter
fig.subplots_adjust(bottom=0.2)
delimiter
midpoint = vor.points[pointidx].mean(axis=0)
delimiter
rows.append(row)
delimiter
self._dump()
delimiter
ax = fig.gca()
delimiter
ether = dpkt.ethernet.Ethernet(data)
delimiter
x.lower()
delimiter
print(tag.getAlbum())
delimiter
signal_handler(*args, **kwargs)
delimiter
t = numpy.arange(81.0).reshape((9, 9))
delimiter
part = sock.recv(size - len(msg))
delimiter
worksheet.hide_gridlines(2)
delimiter
x = math.floor((-b - math.sqrt(b ** 2 - 8 * i)) / 2)
delimiter
b, c = [e[0] for e in zipped], [e[1] for e in zipped]
delimiter
l = [(k, process(v)) for k, v in list(stuff.items())]
delimiter
cls.__name__.lower()
delimiter
self.left = tree
delimiter
second_mask = np.zeros((4, 4), dtype=np.bool)
delimiter
text.partition(left_identifier)[2].partition(right_identifier)[0]
delimiter
data = {}
delimiter
fclose(retclam)
delimiter
pool.waitall()
delimiter
sum(c * x ** p for p, c in enumerate(arr))
delimiter
fig, ax = plt.subplots()
delimiter
show()
delimiter
mean = cv2.mean(bottom)[0]
delimiter
c1 = Cookie.SimpleCookie()
delimiter
qs = self.model._default_manager.all()
delimiter
autostart = true
delimiter
extarg = 0
delimiter
p.set_array(colors)
delimiter
vals[i]
delimiter
listB[0][1]
delimiter
c = a + b
delimiter
time_d_ms = time_d / datetime.timedelta(milliseconds=1)
delimiter
cameraL.SetPosition(40, 0, 200)
delimiter
p.start()
delimiter
arrB = np.asarray(B)
delimiter
helpers.bulk(es, actions)
delimiter
index[axis] = z2.argsort(axis)
delimiter
chr(pos + 97)
delimiter
logger = get_task_logger(__name__)
delimiter
print(item)
delimiter
print(date.toordinal(date(1971, 1, 2)))
delimiter
d = {}
delimiter
main()
delimiter
df
delimiter
d[parts[0]] = d.get(parts[0], []) + [parts[1]]
delimiter
match_geotrans = match_ds.GetGeoTransform()
delimiter
con = pymongo.MongoClient()
delimiter
counts = idx[1:] - idx[:-1]
delimiter
yinch = ypixels / dpi
delimiter
self.msg = msg
delimiter
a = np.linalg.inv(np.dot(X.T, X))
delimiter
mat1 = []
delimiter
mat2 = []
delimiter
print(datetime.datetime.utcnow())
delimiter
X, Y = np.meshgrid(x, y)
delimiter
out = [x[0] for x in gona]
delimiter
form = CreateUserForm.new()
delimiter
slcs1[i] = slice(0, -1)
delimiter
ten
delimiter
sum(c1 != c2 for c1, c2 in zip(string_1, string_2))
delimiter
func(*args, **kwargs)
delimiter
func
delimiter
[2] + [(i * 2 + 1) for i, v in enumerate(sieve) if v and i > 0]
delimiter
self._data[self._keys[key]]
delimiter
parseXMLFromString()
delimiter
make - j4
delimiter
reader = csv.reader(f)
delimiter
(16, [2, 2, 2, 2]),
delimiter
words_sorted = sorted(my_string.lower().split(), key=len)
delimiter
self.name
delimiter
self._realOutput.write(text)
delimiter
colors = (np.random.random((N, 4)) * 255).astype(np.uint8)
delimiter
pyplot.show(one.plot())
delimiter
base_h, base_s, base_v = rgb_to_hsv(base_r, base_g, base_b)
delimiter
self.write(text)
delimiter
b[0]
delimiter
A = sc.parallelize().map(partial(worker, V=V))
delimiter
mkl_rt.mkl_set_num_threads(ctypes.byref(ctypes.c_int(cores)))
delimiter
test_results = ldaModel.transform(wordVecs)
delimiter
sizer = wx.BoxSizer(wx.HORIZONTAL)
delimiter
countup(N, n + 1)
delimiter
my_thread.start()
delimiter
sys.getwindowsversion()
delimiter
string[:string.index(suffix) + len(suffix)]
delimiter
self.response = app.post(*args, **kw)
delimiter
print(b.Pear)
delimiter
out = s.index[maxidx + np.arange(maxidx.size)]
delimiter
np.broadcast(*args).shape
delimiter
addArray(array)
delimiter
result
delimiter
log_file.write(s)
delimiter
raise Exception((status, reason))
delimiter
L.append(a)
delimiter
res.append(np.diag(vif))
delimiter
the_data_model.delete()
delimiter
suite = unittest.TestSuite()
delimiter
func_globals.update(_namespace)
delimiter
v.shape
delimiter
line = line.strip()
delimiter
d = {}
delimiter
[cleaned(x) for x in re.finditer(WORD_REGEX, s)]
delimiter
ClassA.__init__(self)
delimiter
words = str_.lower().split()
delimiter
d = {}
delimiter
pp = scipy.interpolate.interpolate.spltopp(tck[0][1:-1], tck[1], tck[2])
delimiter
frame.pack()
delimiter
PyArray_ITER_NEXT(it1)
delimiter
self.SetSizer(sizer)
delimiter
root = html.fromstring(encapsulated_text)
delimiter
Tkinter.Tk().withdraw()
delimiter
raise Exception()
delimiter
forms[1].controls[0].name
delimiter
dict = {}
delimiter
a.x
delimiter
self.sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
delimiter
words = sorted(counts, key=lambda word: (-counts[word], word))
delimiter
mylist = [random.randint(0, 1500) for _ in range(10000000)]
delimiter
parameters = param7, param8, param9
delimiter
json.loads(json.dumps(members))
delimiter
driver = webdriver.Firefox()
delimiter
index2count[i] += 1
delimiter
print(line)
delimiter
sleep(1)
delimiter
bigset = set(random.sample(range(Max), Setsize))
delimiter
print(foobar.__name__)
delimiter
x = np.arange(10)
delimiter
pool = Pool(16)
delimiter
self.func(v1, v2)
delimiter
soup = BeautifulSoup(f)
delimiter
self.nstep = nstep
delimiter
self.form_valid(form, **kwargs)
delimiter
{}
delimiter
column = int(sys.argv[2])
delimiter
basePath = os.path.dirname(os.path.abspath(sys.argv[0]))
delimiter
20, 20, 2, 2, 18, 5
delimiter
records = list(json.loads(df.T.to_json()).values())
delimiter
1 - (A, B, E, D)
delimiter
grids[idx[i, 0], idx[i, 1]] += 1
delimiter
plt.pcolormesh(xi, yi, zi)
delimiter
self.d[k] = v
delimiter
f.name
delimiter
print(sum(map(lambda x: x ** 2, [x for x in lst if x % 2 == 0])))
delimiter
r.headers
delimiter
n = x.shape[0]
delimiter
msgBox.exec_()
delimiter
A[0, 1]
delimiter
res
delimiter
plt.sca(ax)
delimiter
transport.open()
delimiter
sys.stdout.write(screen_code)
delimiter
cython.long
delimiter
plugin.plugin_main(*args, **kwargs)
delimiter
dst.copy_key(k.key, src.name, k.key)
delimiter
can.save()
delimiter
path, filename = os.path.split(path)
delimiter
ax.plot(list(range(10)), rd.random(10))
delimiter
value = blob_reader.read()
delimiter
Makefile
delimiter
app = WSGIApplication()
delimiter
print(s.getvalue())
delimiter
MI.Close()
delimiter
np.allclose(old, new)
delimiter
user = models.ForeignKey(User)
delimiter
l = [2, 6, 5, 4, 2]
delimiter
s.lower() in keywords
delimiter
temp_path
delimiter
val = np.sum(1.0 - np.cos(a - b))
delimiter
count += 1
delimiter
view = QtGui.QTableView()
delimiter
ax2.set_ylim([-200, 200])
delimiter
dic = dic[key]
delimiter
raise ctypes.WinError(ctypes.get_last_error())
delimiter
result.append(opv)
delimiter
extend_nums(nums, 5)
delimiter
r = {}
delimiter
print((len(perms), perms[0:10]))
delimiter
a = np.arange(90).reshape(10, 9)
delimiter
view_fields(a, keep_names)
delimiter
plt.plot(x, y)
delimiter
termf.pack(fill=BOTH, expand=YES)
delimiter
now = np.datetime64(datetime.datetime.now())
delimiter
mask = np.arange(images.shape[0]) % 6 != 0
delimiter
print(serial_ports())
delimiter
plt.contour(np.log(r / 1.2))
delimiter
list(clusters.values())
delimiter
pygame.time.wait(100)
delimiter
row.append(field[k][i])
delimiter
C[1::2] = B
delimiter
inspect.getargspec(aMethod)
delimiter
tkimage = ImageTk.PhotoImage(image.rotate(angle))
delimiter
url = key.generate_url(expires_in=0, query_auth=False)
delimiter
ipdb.set_trace = f
delimiter
result
delimiter
res = self.func(*args, **kwargs)
delimiter
session_key = asymmetric_dec(session_key, prikey)
delimiter
checker.validate(data, schema)
delimiter
self.points = [Point(random(), random()) for _ in range(numpoints)]
delimiter
sample_weight = np.array([(5 if i == 1 else 1) for i in y])
delimiter
process_count += 1
delimiter
file.seek(pos_dec + word_len)
delimiter
styles = getSampleStyleSheet()
delimiter
npreds[v] -= 1
delimiter
fig, ax = plt.subplots(figsize=(9, 5))
delimiter
temp.append(num)
delimiter
print((location.latitude, location.longitude))
delimiter
counter[0] += 1
delimiter
p = Process(target=self.proc, args=(i,))
delimiter
True, True, True, True, True, True, True, True, True
delimiter
activation.done()
delimiter
heapq.heappush(gens, succ)
delimiter
filteredKeys = (key for key in list(myDict.keys()) if userInput in key)
delimiter
ax1 = plt.subplot(gs[0])
delimiter
layout = QtGui.QVBoxLayout()
delimiter
INS
delimiter
sortedDict = sorted(subjects, cmp=make_comparator(cmpValue), reverse=True)
delimiter
x = list(range(0, 7))
delimiter
f = sys._getframe()
delimiter
self.end_headers()
delimiter
cur.execute(string)
delimiter
res = __import__(mod)
delimiter
p1 = os.path.join(path, p)
delimiter
mfun
delimiter
repr(self.__dict__)
delimiter
connection.text_factory = str
delimiter
nx.draw(G, with_labels=True)
delimiter
themin = arr[0]
delimiter
script_elt.extract()
delimiter
dim_array = np.ones((1, a.ndim), int).ravel()
delimiter
G = C_abs + C_abs.T
delimiter
ordered = sorted(iter(colour.items()), key=itemgetter(1))
delimiter
chardet.detect(s)
delimiter
line_list[-lines_2find:]
delimiter
np.exp(x) + np.sin(y)
delimiter
True
delimiter
cls
delimiter
out[k].append(item)
delimiter
choice(seq)
delimiter
rms = sqrt(mean(square(a)))
delimiter
zip.close()
delimiter
p.join()
delimiter
self.assertFailure(d, ValueError)
delimiter
C.shape
delimiter
app.start()
delimiter
c = sys.stdin.read(1)
delimiter
data = []
delimiter
print(row)
delimiter
sys.exit(1)
delimiter
results = a[np.triu_indices(len(x), 1)]
delimiter
lab = color.rgb2lab(io.imread(each_file))
delimiter
d = 2
delimiter
thread.start()
delimiter
dupl = []
delimiter
print(nonlinear_invert(f, x, y, z))
delimiter
m = r.search(str1)
delimiter
endfun
delimiter
now = datetime.datetime.now()
delimiter
pool.close()
delimiter
a = int(a) if int(a) % 2 == 0 else int(a) + 1
delimiter
np.random.seed(101)
delimiter
[(ord(x.lower()) - 96) for x in string.letters]
delimiter
ascript
delimiter
xa.execute()
delimiter
globals()[k] = self.oldglobals[k]
delimiter
print(arr)
delimiter
draw.text((0, 0), text, font=font)
delimiter
functor()
delimiter
assert memprg.date_registered < date.today()
delimiter
username = db.Column(db.String(80), unique=True)
delimiter
x, y = np.random.random((2, 10))
delimiter
response = urllib.request.urlopen(request)
delimiter
program.py
delimiter
p = etree.HTML(r.text)
delimiter
is_sub(b, a)
delimiter
dlg.Destroy()
delimiter
bob0.save()
delimiter
x()
delimiter
self.assertTrue(result > 0)
delimiter
d = datetime.date.today()
delimiter
xlock.acquire()
delimiter
b = [False, False, True]
delimiter
com_instance.Quit()
delimiter
droid = android.Android()
delimiter
raise TypeError(node)
delimiter
resultList = [item for sublist in resultList for item in sublist]
delimiter
install_all_the_things()
delimiter
overlap(0, 10, 80, 90)
delimiter
aes.decrypt(base64.b64decode(encrypted))
delimiter
df
delimiter
self.grid()
delimiter
send_from_directory(UPLOAD_FOLDER, filename)
delimiter
wdict = words_dict()
delimiter
capital = models.CharField(max_length=50)
delimiter
my_model
delimiter
in_.seek(-min(size, chunk_size), 2)
delimiter
do_stuf = fun1(do_stuf)
delimiter
l = [4, 5, 6]
delimiter
data = list()
delimiter
login(request, user)
delimiter
wb = Workbook()
delimiter
bin(2)
delimiter
z = np.random.random((len(r_test), 1))
delimiter
db_session = scoped_session(sessionmaker(bind=engine))
delimiter
t = plt.gca().transData
delimiter
base.__dict__[name]
delimiter
qproc.join()
delimiter
plt.show()
delimiter
rsum.append((x[0], rsum[-1][1] + x[1]))
delimiter
pool.close()
delimiter
p.join()
delimiter
self._channel.basic_ack(basic_deliver.delivery_tag)
delimiter
numbers = [number for number in numbers if number % results[-1] != 0]
delimiter
communicator = Communicator()
delimiter
dests = set()
delimiter
print(imgray.shape[:2])
delimiter
print(a[:4])
delimiter
foo.run_static_method()
delimiter
out = write()
delimiter
Gh = NX.Graph()
delimiter
[2, 4, 6]
delimiter
parent_map = {c: p for p in tree.iter() for c in p}
delimiter
x + 1
delimiter
self.callback()
delimiter
outputfile.write(*args, **kwargs)
delimiter
start_urls = [URL]
delimiter
stack.extend([v for v in self.graph[vertex]])
delimiter
obj.pop(i)
delimiter
sig2 = numpy.interp(t, t2, sig2)
delimiter
small_list_set = set(small_list)
delimiter
mutex.release()
delimiter
image = np.array(image, copy=True)
delimiter
[y ** (1 / 2), -y ** (1 / 2)]
delimiter
xx = np.linspace(0, 10)
delimiter
s.format(**d)
delimiter
n = uniform(0, weight_total)
delimiter
print(cell)
delimiter
samples = [[0, 0], [0, 1], [1, 0], [1, 1]]
delimiter
assert a == b, (repr(s), a, b)
delimiter
df5 = df.ix[:, 48:60]
delimiter
listbox.insert(0, myTkObject.clipboard_get())
delimiter
writer.add_document(title=item.Title, content=item.content, url=item.URL)
delimiter
print(y)
delimiter
ip
delimiter
z.argmin(1)
delimiter
res
delimiter
data_val = np.random.rand(len(data_id))
delimiter
res.append(1)
delimiter
l[1]
delimiter
result.append(p)
delimiter
a.append(99)
delimiter
wildfd.inc((w1, w2))
delimiter
y_subplot = fig2.add_subplot(2, 2, i)
delimiter
output = proc.communicate()[0]
delimiter
name
delimiter
df
delimiter
first_set = set([0, 1, 2])
delimiter
test(constrained_combinations)
delimiter
dvalue = Column(DateTime)
delimiter
rv = self.parse_statement()
delimiter
current_string = current_string[0:-1]
delimiter
p4[8], p4[9] = tb.tb_frame.f_lasti, tb.tb_frame.f_lineno
delimiter
stripped_line = line.strip()
delimiter
soup = BeautifulSoup(s)
delimiter
self.traceback.append(self.col_seq[j - 1].lower())
delimiter
a = np.ascontiguousarray(A).view(rowtype).ravel()
delimiter
print(repr(obj), obj.__dict__)
delimiter
word1 = equivalence.lemmatize(word1)
delimiter
fl.close()
delimiter
std_devs = np.diag(np.sqrt(cov))
delimiter
s += n % 10
delimiter
nondupes = [(original & all_uniques) for original in allsets]
delimiter
list(d.keys())
delimiter
[name for name in namespace if namespace[name] is obj]
delimiter
NA = NA_()
delimiter
np.array([p for i, p in enumerate(A.flatten()) if i > i / N * (1 + N)])
delimiter
new = list(it.imap(int, old))
delimiter
plot_visible(ax.azim, ax.elev)
delimiter
numpy.add.reduceat(a, [0, 2, 4])
delimiter
print(data)
delimiter
sorted(personArray, key=compare_person)
delimiter
gc.collect()
delimiter
b = np.zeros(100, 10)
delimiter
login_user(user, remember=True)
delimiter
plt.show()
delimiter
Mn = set([])
delimiter
bar = Entry(master).grid(row=1, column=1)
delimiter
item = self.combo.model().item(row)
delimiter
print(config_root.server.version)
delimiter
render_template_string(template_form, form=form)
delimiter
print(request.command)
delimiter
dict(t)
delimiter
HTMLParser.__init__(self, strict=False)
delimiter
d[0] += 1
delimiter
pprint.pprint(Y)
delimiter
b = np.ma.masked_where(mymask, a)
delimiter
inqueue.put(sentinel)
delimiter
sys.exit(1)
delimiter
b = [4, 5, 6]
delimiter
myTurtle.goto(0, 250)
delimiter
phi, theta = np.meshgrid(phi_array, theta_array)
delimiter
self.initSearch()
delimiter
foo(line)
delimiter
m = X.mean(axis=1)
delimiter
sys.stdout = out
delimiter
ax.plot(np.arange(0, i * 4, i))
delimiter
n.bit_length() - 1
delimiter
a, b = 1, 1
delimiter
print(my_func(1, 2))
delimiter
shutil.copyfileobj(open(infile), outfile)
delimiter
print(listbox.selection_get())
delimiter
LM2ML(vecs[:k])
delimiter
nodes = draw_networkx_nodes(G, pos)
delimiter
self.is_running = False
delimiter
byte = f.read(1)
delimiter
n & 1 == 0
delimiter
pool = Pool(16)
delimiter
as_strided(b, (n - 1, n + 1), (b.itemsize * (n + 1), b.itemsize))[:, 1:]
delimiter
[6, 5, 4],
delimiter
path[0]
delimiter
res = pd.Series()
delimiter
rows = itertools.product(df1.iterrows(), df2.iterrows())
delimiter
self.initialized()
delimiter
result = result.difference(dateRange2[b])
delimiter
a.write(str(f) + os.linesep)
delimiter
result = d.groupby(level=0).apply(lambda x: pd.value_counts(x.values.ravel()))
delimiter
Y[:, (1)] = 1
delimiter
fig = plt.figure()
delimiter
soup = bsoup(r.content)
delimiter
print(x)
delimiter
yourproject / yourapp / middleware
delimiter
to_remove.append(index)
delimiter
executor.submit(submit_to_gui, f.result())
delimiter
list(map(set, out))
delimiter
self._db = db
delimiter
x += 1
delimiter
br = mechanize.Browser()
delimiter
nums = [int(i) for i in line.strip().split()]
delimiter
epoch = datetime.datetime.fromtimestamp(0)
delimiter
p = itertools.permutations(l)
delimiter
pool.append(p)
delimiter
modules.append(thing)
delimiter
True
delimiter
cur.append(c)
delimiter
loop = asyncio.get_event_loop()
delimiter
str(datetime.now())
delimiter
hsh = urllib.request.HTTPSHandler()
delimiter
Create(Path.Combine(directory, Path.GetRandomFileName()))
delimiter
response = HttpResponse(wrapper, content_type=mime_type)
delimiter
new_string += escape_dict[char]
delimiter
my_contact = Contact.objects.get(pk=contact_pk)
delimiter
glob.iglob(pathname)
delimiter
dfr = df.ix[rindex]
delimiter
cur = con.cursor()
delimiter
self._cards[card_ID].shift(amount)
delimiter
columns = defaultdict(list)
delimiter
json1 = json.dumps(dict2, ensure_ascii=False)
delimiter
simplejson.dump(data, outfile)
delimiter
print(my_date)
delimiter
summary_dict = {col: [] for col in new.columns[1:]}
delimiter
r.sendline(line)
delimiter
a = a & b
delimiter
max(s, key=len)
delimiter
f1 = [(x + 20) for x in range(80)]
delimiter
bitmask = [True] * len(source)
delimiter
canvas = Canvas(root, width=640, height=480, bd=0, highlightthickness=0)
delimiter
int(aString, 8)
delimiter
alphs = string.ascii_lowercase
delimiter
vals[bisect.bisect_right(keys, 0.464897)]
delimiter
id(self._obj)
delimiter
sum(map(operator.mul, *pairwise(l)))
delimiter
True
delimiter
print(regx.sub(repl, ss))
delimiter
mask = np.array(out.sum(axis=0)).ravel() != 0
delimiter
figlegend.show()
delimiter
row_count = chunk.shape[0]
delimiter
doit()
delimiter
leng.count
delimiter
r1.shutdown()
delimiter
subfn
delimiter
attempt(attempt_something, lambda : foo(bar))
delimiter
pairs = []
delimiter
print(names)
delimiter
a[not_indices] = 888
delimiter
x, n = np.mgrid[0:20:0.01, 1:100:1]
delimiter
procs.append(p)
delimiter
x = np.linspace(0, 10 * np.pi, 1000)
delimiter
start = dt.datetime.now()
delimiter
self.typemap = {}
delimiter
filter = np.array([True, False, True, False])
delimiter
tmp_dict = cPickle.load(f)
delimiter
last_name = models.CharField(max_length=40)
delimiter
table.setdefault((w1, w2), []).append(stopword)
delimiter
a == b
delimiter
min_time.replace(hour=hour, minute=minute)
delimiter
ax.add_collection(PC)
delimiter
d = dict(self.__dict__)
delimiter
a = np.asfarray(a)
delimiter
value = func(self)
delimiter
s.close()
delimiter
UTF - 8
delimiter
print(ldamodel.print_topics(num_topics=2, num_words=4))
delimiter
[buildout]
delimiter
defaults.update(kwargs)
delimiter
a = BitArray(6000000)
delimiter
current = []
delimiter
start_new_thread(task, ())
delimiter
y = [4, 5, 6]
delimiter
main()
delimiter
feet = float(floatfeet or 0) + float(feetnum or 0) / float(feetdenom or 1)
delimiter
x = not x
delimiter
cherrypy.engine.block()
delimiter
raise TypeError
delimiter
client = Client(url, transport=ntlm)
delimiter
sys._getframe(back + 1).f_lineno
delimiter
args = p.parse_args([])
delimiter
pos_list.append(item)
delimiter
closedir.argtypes = [c_dir_p]
delimiter
True
delimiter
getattr(__builtins__, name)
delimiter
IFBIsFastSer = 0
delimiter
pylab.plot(f, Xdb)
delimiter
first_col = np.where(cols == False)[0][0]
delimiter
c = get_config()
delimiter
raise
delimiter
_f
delimiter
app = QtGui.QApplication([])
delimiter
wolfer = tempdata[:, (1)]
delimiter
df2
delimiter
data = {k: [convert(v, float)] for k, v in list(dr.next().items())}
delimiter
p_surplus += 1
delimiter
wiringpi2.wiringPiSetupGpio()
delimiter
sp.Popen([programName, fileName])
delimiter
filtered.append(line)
delimiter
f = gen2()
delimiter
print(significant_1(0.45))
delimiter
n = df.shape[0]
delimiter
baz()
delimiter
bode(f)
delimiter
[(a + b + a) for a, b in matches]
delimiter
A[subset][j] = min(A[subset][j], A[subset ^ 1 << j - 1][k] + get_dist(j, k))
delimiter
a in {0, 1}
delimiter
logger.propagate = False
delimiter
rolled_mask = np.roll(np.roll(mask, -2, axis=0), -2, axis=1)
delimiter
{x, 0, y}
delimiter
out[1]
delimiter
500000000000000, 600000000000000, 700000000000000, 800000000000000
delimiter
new_matrix[t, conv[t, z, y, x], y, x] = temp[t, z, y, x]
delimiter
r.url
delimiter
sorted_ab = list(zip(*sorted(chain(keyed_a, keyed_b), key=lambda t: t[0])))[1]
delimiter
d[k] += v
delimiter
b = [4, 5, 6]
delimiter
prev = date.today().replace(day=1) - timedelta(days=1)
delimiter
{{key}}
delimiter
shared_time += (min(t1_stop, t2_stop) - t1_start).total_seconds()
delimiter
doc_dict.update(doc.attrib)
delimiter
print(testme, len(testme))
delimiter
base.summary(my_pandas_dataframe)
delimiter
keyword.kwlist
delimiter
a = [(aa if i < 20 else 0) for i, aa in enumerate(a)]
delimiter
print(c)
delimiter
x / blub10.txt
delimiter
y = np.random.normal(0, 1, num).cumsum()
delimiter
flask.jsonify(time=time.time(), value=value)
delimiter
xmin = data.min()
delimiter
dictb = dict(zip(listbnum, listb))
delimiter
confirmed = get_object_or_404(EmailConfirmed, user=request.user)
delimiter
self.archive = py7zlib.Archive7z(fp)
delimiter
imgB = imgB.astype(float)
delimiter
l2 = [2, 1]
delimiter
p.map(unpack_wrapper(merger), mergelist)
delimiter
sess.run(init_op)
delimiter
myTurtle.speed(0)
delimiter
ip_address = db.StringProperty()
delimiter
i += 1
delimiter
x = np.linspace(10, 110, 1000)
delimiter
rows = cur.fetchall()
delimiter
c = ChessBoard()
delimiter
month = SelectField(choices=MONTHS)
delimiter
dumper.represent_dict(data.convert_to_yaml_struct())
delimiter
self.multiply(self.x, self.y)
delimiter
print(nestedExpr().parseString(data).asList())
delimiter
getattr(logging, key)
delimiter
adj = widget.get_vadjustment()
delimiter
fig, ax = plt.subplots(1, 1)
delimiter
self.pred(obj)
delimiter
characters = splitre.split(credits)
delimiter
df
delimiter
b = bytearray(f)
delimiter
measurements = np.random.normal(loc=20, scale=5, size=100)
delimiter
df1 = df.T
delimiter
stream = cStringIO.StringIO(value)
delimiter
1, 2, 0, 0
delimiter
V = (np.arange(M * N) / (M * N)).reshape(N, M)
delimiter
easygui.egdemo()
delimiter
print(funcs[2]())
delimiter
x = 1
delimiter
dic[a] += b
delimiter
p_values = scipy.special.ndtr(-z_scores)
delimiter
df.index = df.index * 10
delimiter
names = list(row.keys())
delimiter
timeit(lambda : fulldict.keys())
delimiter
deq.append(p)
delimiter
newlist = []
delimiter
bin(1)
delimiter
print(test.g(666))
delimiter
mean2 = g.mean()
delimiter
options = webdriver.ChromeOptions()
delimiter
read = p.stdout.readline()
delimiter
MI = pandas.MultiIndex.from_product([i, j[0]])
delimiter
SEARCHENGINE = NO
delimiter
lg.string
delimiter
is_invertible(b)
delimiter
xx = np.arange((len(A) - 1) * n + 1)
delimiter
options.remove(current_option)
delimiter
filelist = ftp.nlst()
delimiter
namedict[key] = val
delimiter
v = [[1], [1, 2]]
delimiter
print(name)
delimiter
shared_time += (min(t1_stop, t2_stop) - t2_start).total_seconds()
delimiter
vbox.addWidget(button)
delimiter
r = np.zeros((rows, rows))
delimiter
c.join(l)
delimiter
form_class = self.get_form_class()
delimiter
azi = np.arctan2(X[:, (1)], X[:, (0)])
delimiter
self.get_nowait()
delimiter
print(str(err))
delimiter
json_object = json.loads(myjson)
delimiter
serializer_class = serializers.UserSerializer
delimiter
print(theQ.get())
delimiter
print(status)
delimiter
((np.cumprod(x) - 1) * p)[-1]
delimiter
poly_coeff = np.polynomial.polynomial.polyfit(w, v, 2)
delimiter
i = df.index.values
delimiter
self.left.insert(othernode)
delimiter
process_data(data)
delimiter
composed
delimiter
carnamit = iter(carnames)
delimiter
q.put(x)
delimiter
mview = memoryview(tmp_buf)[OFFSET:AMOUNT]
delimiter
show(p)
delimiter
self.color = color
delimiter
[serialize(item) for item in obj]
delimiter
b.set_list(list(range(5, 10)))
delimiter
screen = pygame.display.set_mode((640, 480), FULLSCREEN)
delimiter
index = []
delimiter
clisocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
delimiter
seen_add(element)
delimiter
auth = OAuth1(API_KEY, API_SECRET, ACCESS_TOKEN, ACCESS_TOKEN_SECRET)
delimiter
hash(self.x)
delimiter
i, self.store[i][0]
delimiter
f = (lambda a: lambda x: x ** a)(a)
delimiter
console_handler.setLevel(logging.DEBUG)
delimiter
result[1::2] = list2
delimiter
print(parse(stream))
delimiter
a.save()
delimiter
newfile.write(line)
delimiter
print(json2xml(j))
delimiter
plt.grid(True)
delimiter
v = x * np.cos(5) + y * np.sin(5)
delimiter
b = [4, 5, 6]
delimiter
f(1, covered_list)
delimiter
app.MainLoop()
delimiter
im_data = np.ndarray(shape=(cols, rows), dtype=np.uint8)
delimiter
y = np.sin(x)
delimiter
loop.close()
delimiter
vfoo(I, J, K)
delimiter
df[0] - df[1]
delimiter
v = [7, 4, 5]
delimiter
exponents = list(range(-1, (-precision - 1) * 2, -1))
delimiter
entry_date = models.DateTimeField(default=datetime.now)
delimiter
f.close()
delimiter
d = dict()
delimiter
A[j] = n
delimiter
self.f.write(text)
delimiter
url, len(response)
delimiter
output_notebook()
delimiter
file.tell()
delimiter
self.deadline = self.env.cr.fetchone()[0]
delimiter
Y = np.arange(size)
delimiter
ppc
delimiter
cholupdate(R1_, u.copy())
delimiter
delattr(mod, symbol)
delimiter
request = cherrypy.serving.request
delimiter
p = [l[i:i + 2] for i in range(0, len(l), 2)]
delimiter
print(msg_str)
delimiter
theState = models.CharField(max_length=64)
delimiter
out.flat[np.ravel_multi_index(data.T, dshape)] += 1
delimiter
current_string.append(chr(inkey))
delimiter
t.render(c)
delimiter
obj = ref()
delimiter
foo(42)
delimiter
decorator
delimiter
first_name
delimiter
maxword = max(len(x) for x in words)
delimiter
main()
delimiter
hist, x_bins, y_bins = np.histogram2d(x, y, bins=(50, 50))
delimiter
cols = df.iloc[:, 2:].columns
delimiter
bucket_name = settings.AWS_STORAGE_BUCKET_NAME
delimiter
dateData.append(date)
delimiter
player_wins = rps()
delimiter
br.submit()
delimiter
split_list
delimiter
B[:, (col)] = np.prod(A[:, (mask)], 1)
delimiter
self.assertEqual(Foo.query.count(), 1)
delimiter
si = StringIO.StringIO()
delimiter
idnumber = Int64Col()
delimiter
tmv[i, j] += 1
delimiter
total += os.path.getsize(path)
delimiter
frame.Show(True)
delimiter
list({gameId: bitrate for _, gameId, bitrate in reversed(myListOfTuples)}.items())
delimiter
libadd.Add.restype = ctypes.c_int
delimiter
lons, lats = numpy.meshgrid(lons, lats)
delimiter
logging_handler_out.setLevel(logging.DEBUG)
delimiter
dict(user=g.user)
delimiter
tuple_foo(t)
delimiter
print(json.dumps(x, indent=2))
delimiter
ys = np.sin(xs) + np.random.normal(0, yerrs, xs.shape)
delimiter
self.fig.axes[0].set_title(self.line_edit.text())
delimiter
q.put(s[-4:])
delimiter
writer.write_array(output, pixels)
delimiter
lines = islice(f, 0, 2 * N - 1)
delimiter
main()
delimiter
print((d - epoch).total_seconds())
delimiter
csr.indptr[1:] = np.cumsum(nnz_per_row)
delimiter
img_temp.flush()
delimiter
hosp_info
delimiter
xy = 10 * np.random.random((chunksize, 2))
delimiter
conn, addr = s.accept()
delimiter
ax.view_init(elev, azimuth)
delimiter
f.close()
delimiter
b = np.random.randint(0, 5, size=(6, 4))
delimiter
logger_2.addHandler(hdlr_2)
delimiter
losses.append(b.eval())
delimiter
trgtext = trgtext.split()
delimiter
result[i, j] = a[i] * b[j]
delimiter
self._n = n
delimiter
search_str = self.text_to_find.get_text()
delimiter
idx = random.choice(indices)
delimiter
bsizer = wx.BoxSizer()
delimiter
maxsort = counts.argsort()[::-1]
delimiter
d = d[partial_key]
delimiter
cv2.rectangle(char_mask, (x, y), (x + w, y + h), 255, -1)
delimiter
df.iloc[:, (i)] = i * df.iloc[:, (i - 100)]
delimiter
G = nx.Graph()
delimiter
transaction.savepoint_rollback(sid)
delimiter
r = random.randint(0, i)
delimiter
parse = argparse.ArgumentParser()
delimiter
loop.create_task(do_work(envelope, body))
delimiter
n_pages = document.get_n_pages()
delimiter
isitIn(char, b[:len(b) // 2])
delimiter
name = models.CharField(max_length=128)
delimiter
weights.pop()
delimiter
nums = (b for a, b in zip(a, count(a[0])) if a != b)
delimiter
table.row_cells(r)[c].text = cell
delimiter
all_data = numpy.hstack((A_noisy, B_noisy))
delimiter
out = np.repeat(tmp12, color_occupations.ravel())
delimiter
data.sort(key=lambda c: c[1])
delimiter
inblock = nextnl + 1
delimiter
rows = np.isnan(g).all(axis=1)
delimiter
main()
delimiter
print(i)
delimiter
text[:text.index(c)].rstrip()
delimiter
PTS = lambda x: 1.0 * x
delimiter
renWinR.AddRenderer(renR)
delimiter
jump_indices = np.where(jumps)[0]
delimiter
print(line)
delimiter
n = len(a)
delimiter
NewClass
delimiter
map(print_node, node.get_children())
delimiter
np.random.seed(seed=0)
delimiter
[set(v) for v in arr]
delimiter
a = np.arange(1.0 * 2 * 2 * k * k).reshape(2, 2, k, k)
delimiter
dom = ET.parse(os.path.join(cd, xmlfile))
delimiter
b.argsort(1)
delimiter
self.dialog = QtGui.QDialog(self)
delimiter
interlocked = [word for word, a, b in word_gen if a in words and b in words]
delimiter
a = Column(Integer, primary_key=True)
delimiter
set(b) in set(a)
delimiter
data = np.array([line.strip() for line in f.readlines()])
delimiter
intree = True
delimiter
self._x = value
delimiter
f
delimiter
response.json()
delimiter
self.given_server_is_offline()
delimiter
matches = [r.match(s[i:]) for i in range(len(s))]
delimiter
csvwriter = csv.DictWriter(outf, fieldnames)
delimiter
json = response.body
delimiter
ax = fig.add_subplot(221)
delimiter
sess = tf.Session()
delimiter
pointers = [ctypes.addressof(ctypes.create_string_buffer(8)) for i in range(4)]
delimiter
np.nan_to_num(data)
delimiter
self.pop(i)
delimiter
lsb_release.get_lsb_information()
delimiter
tst = models.ForeignKey(someData)
delimiter
urllib.parse.urlencode(z)
delimiter
cost = [int(i) for i in cost]
delimiter
self.mysignal.emit(text)
delimiter
self.check_object_permission(request.user, obj)
delimiter
pool.apply(locale_aware_sort, [strings, loc])
delimiter
bodylist.append(body)
delimiter
key = row[0], row[1]
delimiter
arr = np.array(img)
delimiter
list.add(1)
delimiter
p.register(f.stdout)
delimiter
d[1]
delimiter
self.__setstate__(s)
delimiter
x = S1()
delimiter
ax = plt.gca()
delimiter
aresult = q.get()
delimiter
my_decorator
delimiter
NULL
delimiter
sample = np.random.uniform(0, 1, 50)
delimiter
result
delimiter
self.trayIcon.show()
delimiter
keys.sort()
delimiter
Foo().spam
delimiter
size = sys.getsizeof(string) - 20
delimiter
(list(map(sub, chain(s, e), chain(b, s))) for s in splits)
delimiter
self.broken = False
delimiter
sess.run(init_op)
delimiter
test.foo(x)
delimiter
dir = frob
delimiter
this_friday = sow + timedelta(days=4)
delimiter
indexing_with_clipping_v2(arr, indices, clipping_value=2)
delimiter
str(soup)
delimiter
r.encoding
delimiter
tor_process.wait()
delimiter
n_edges = data.shape[0]
delimiter
grouped = df.map(lambda row: (row.a, (row.major, row.cnt))).groupByKey()
delimiter
print(item)
delimiter
result = result.astype(np.bool_)
delimiter
a.insert(i + 1, [0, 0])
delimiter
im = rgb2gray(im)
delimiter
celery.start()
delimiter
mock(), mock()
delimiter
print(test.data)
delimiter
pool = Pool(processes=8)
delimiter
mat[i, j] = random.randrange(2)
delimiter
fig, ax = plt.subplots()
delimiter
f.seek(0, 2)
delimiter
self._cookies = pickle.loads(string)
delimiter
requestOpener = urllib.request.build_opener()
delimiter
c = s[:, ([i, j])]
delimiter
numpy.hypot(d0, d1)
delimiter
sys.exit(0)
delimiter
CO = np.corrcoef(X_.T)
delimiter
x = np.linspace(-20, 20, 500)
delimiter
x, y = m(lon2, lat2)
delimiter
path = os.path.join(savedir, filename)
delimiter
mask = np.random.random((10, 10)) < 0.2
delimiter
data[start:start + size]
delimiter
false
delimiter
img.paste(face, tuple(coord[::-1]), mask=face)
delimiter
print(list([w for w in wordlist if prog.match(w)]))
delimiter
messageprocessok = False
delimiter
{}
delimiter
A = np.array(a.data).reshape([4, 4])
delimiter
idx = (A[:, (0)] > from_date) & (A[:, (0)] <= to_date)
delimiter
fig.add_axes(ax)
delimiter
topbottom[(0), 0:im.shape[1]] = np.argmax(im, axis=0)
delimiter
numpy.add.reduceat(data[f], i)
delimiter
a[:, (1)]
delimiter
x = np.array(np.random.normal(size=(4, 4)))
delimiter
n = sum(int(d) for d in str(n))
delimiter
result
delimiter
c.head()
delimiter
num_overlap = sum(1 for t in zip(list1, list2) if all(t))
delimiter
setattr(random, f, our_decorator(getattr(random, f)))
delimiter
list(self._sections[section].keys())
delimiter
fig = plt.gcf()
delimiter
canvas.pack()
delimiter
OrderedDict(sorted(list(d.items()), key=lambda t: len(t[0])))
delimiter
print(D.x)
delimiter
d_truncated = datetime.date(dt.year, dt.month, dt.day)
delimiter
thread.daemon = True
delimiter
email.utils.parseaddr(email_address)
delimiter
np.ma.masked_array(np.interp(value, self._levels, self._normed))
delimiter
matrix = vect.fit_transform(traindata)
delimiter
queue.append(x)
delimiter
filtered1.append(leftData[i])
delimiter
output.append(new_output)
delimiter
lol(x, 7)
delimiter
serializer_class = MyModelSerializer
delimiter
x = a, b, c
delimiter
show()
delimiter
df_test.update(df_update)
delimiter
self.__f(x + 1)
delimiter
imgplot = plt.imshow(img)
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
df
delimiter
shell()
delimiter
i += 1
delimiter
x, x + 2
delimiter
xedges = np.linspace(-10, 10, 100)
delimiter
a = asarray(list(s), dtype=h)
delimiter
logging.basicConfig(stream=log_stream, level=logging.INFO)
delimiter
y_sample = y[idx]
delimiter
2 + 2
delimiter
load(a)
delimiter
left = randint(0, len(L) - 1)
delimiter
L[c] += 1
delimiter
Base.metadata.drop_all(engine, tables=[DeclarativeTestModel.__table__])
delimiter
date = dt.datetime(date.year, date.month, date.day) + dt.timedelta(hours=10)
delimiter
myObject1 = MyObject()
delimiter
repr(0.1000000000000999)
delimiter
new_dc_files.append(dc)
delimiter
print(numbers)
delimiter
x = next(stack[0])
delimiter
print(f.subs(n, 6))
delimiter
output.append(row)
delimiter
fig = plt.figure()
delimiter
data = json.loads(request.data)
delimiter
main()
delimiter
autodoc.add_documenter(DocsonlyMethodDocumenter)
delimiter
train_text[11]
delimiter
vdisplay.stop()
delimiter
user_options = []
delimiter
print(columns[1])
delimiter
gr = P.Group(P.OneOrMore(key_equal + val))
delimiter
html = file.read()
delimiter
fibpy(x - 1) + fibpy(x - 2)
delimiter
ws = excel.Workbooks.Add().Worksheets(1)
delimiter
rand_list = random.sample(range(100000000), num)
delimiter
sorted(globs)
delimiter
os.close(output_fd)
delimiter
results = []
delimiter
plt.clf()
delimiter
print(b.x)
delimiter
df == pd.Series(conditions)
delimiter
x = s[1] - s[0]
delimiter
ws = wb.active
delimiter
Tree()
delimiter
q1m0[k] = -q0m1[k]
delimiter
f.seek(randint(10, 250))
delimiter
d = len(l)
delimiter
result.update(self._attr_value_to_obj_set[attr_value])
delimiter
result = result[::-1]
delimiter
print(significant_1(1999))
delimiter
print(significant_1(1945.01))
delimiter
items = list(d.items())
delimiter
li = iter(object_list)
delimiter
print(net.num_addresses)
delimiter
seen = set()
delimiter
b()
delimiter
print(new_random)
delimiter
ind = ind[third_mask]
delimiter
self.func = func
delimiter
data = [cmap[i] for i in img1_k]
delimiter
diags
delimiter
plt.ylim(ymin, ymax)
delimiter
logging.warning(message, extra=extras)
delimiter
levels.pop()
delimiter
qapp = QApplication(sys.argv)
delimiter
t.join()
delimiter
self.redraw()
delimiter
group = models.ForeignKey(Group)
delimiter
dosomethingelse(),
delimiter
slice(2)
delimiter
smtp.starttls()
delimiter
roundup(101)
delimiter
print(node.getData())
delimiter
result = job.apply_async()
delimiter
data = json.load(response)
delimiter
M = np.arange(1500 * 2000).reshape(1500, 2000)
delimiter
old_init = thirdpartymodule_a.SomeClass.__init__
delimiter
self.b = b
delimiter
self._add(val, node.l)
delimiter
q = Queue()
delimiter
partition.append(justseen)
delimiter
width, height = img.size
delimiter
pymysql.install_as_MySQLdb()
delimiter
start = datetime.now()
delimiter
data.append(0)
delimiter
show_children(parse_root(tokenize(example)))
delimiter
a, N - a * a
delimiter
iterateFinitely(lambda y: [f(y)] if y else [], x)
delimiter
a * (not p) or [sub_k_list(a[:p], k), sub_k_list(a[p:], k)]
delimiter
root = tk.Tk()
delimiter
module = __import__(modulename)
delimiter
z = func((x, y), a, b, c) * 1 + np.random.random(101) / 100
delimiter
ip = models.CharField(max_length=200, blank=True)
delimiter
m[1, 1]
delimiter
print(df1)
delimiter
req_json = request.get_json()
delimiter
[D, [[B, A, C], [F, E, G]]]
delimiter
find_file(drive, rex)
delimiter
item.wickets[10] *= 2
delimiter
number = Wire.read()
delimiter
self.dock1.setWidget(QtGui.QTextEdit(self.dock1))
delimiter
idx0 = np.where(m, a, np.nanmin(a) - 1).argmax(1)
delimiter
csX.nzmax = X.data.shape[0]
delimiter
self.field4price = msg.price
delimiter
b = []
delimiter
result
delimiter
sleep(2)
delimiter
args = parser.parse_args()
delimiter
err()
delimiter
data[tuple(ind)]
delimiter
A = np.random.rand(20, 20, 2, 2, 18, 5)
delimiter
mp_handler()
delimiter
res.get()
delimiter
print(a.shape)
delimiter
r += (x[i * DIM + d] - x[j * DIM + d]) * (x[i * DIM + d] - x[j * DIM + d])
delimiter
next(r)
delimiter
print(s % x)
delimiter
auth.refresh_token()
delimiter
self._count += 1
delimiter
print(parser.parse_args(c.split()))
delimiter
ui[1:] = (diff != 0).any(axis=1)
delimiter
df1.columns = df1.columns.values.astype(str)
delimiter
bSizer.Add(button2, 0, wx.ALL, 5)
delimiter
cpy.write(pgcopy.tostring())
delimiter
print(df2)
delimiter
req = urllib.request.Request(url_1)
delimiter
raise Error(key, context=ex)
delimiter
some_list[start:end:step]
delimiter
timer = Timer(timeout, timeout_handler)
delimiter
solve(equations, P, Q, S, T)
delimiter
knownAdds = set(line.strip() for line in infile)
delimiter
job.start()
delimiter
time.sleep(0.1)
delimiter
thefile.seek(0, 2)
delimiter
test()
delimiter
self.set_list(list(range(n)))
delimiter
exampleText = f.read()
delimiter
cherrypy.engine.start()
delimiter
z = np.ceil(x)
delimiter
False
delimiter
t = threading.Thread(target=my_thread, args=[a_stop_event])
delimiter
entryFrame.grid_propagate(False)
delimiter
(list(range(5))[4:5] + [999])[0]
delimiter
self._worker_handler.daemon = True
delimiter
response.raise_for_status()
delimiter
self.assertEqual(99, s1)
delimiter
ssqlContext = sqlContext._ssql_ctx
delimiter
img = np.zeros((256, 256))
delimiter
serializer = self.get_serializer(page, many=True)
delimiter
self.parse,
delimiter
Type[int(RNumX + 0.5)][int(RNumY + 0.5)].append((RNumX, RNumY))
delimiter
(x >> power2 - 1) + 1 >> 1
delimiter
ab = [o for o in itertools.chain.from_iterable(genny(x) for x in y)]
delimiter
get_user_model().objects.get(pk=username)
delimiter
conn = xmpp.Client(jid.getDomain())
delimiter
print(QtCore)
delimiter
punkt.train(abbrv_sent, finalize=False, verbose=False)
delimiter
a = 0
delimiter
buf[:] = names
delimiter
random.choice(lists[category])
delimiter
pl.show()
delimiter
print(StudentTCI(1, 2, 10, 0.99))
delimiter
self._subs_list(sequence)
delimiter
tmp = [os.path.join(root, f) for f in files if f not in exc]
delimiter
1 * p(x)
delimiter
client = Client(url)
delimiter
last_dir = os.path.dirname(last_dir)
delimiter
now = datetime.datetime.now()
delimiter
bins[1] = bins[1] - bins[1] / 2
delimiter
lft -= 1
delimiter
A[:] = {1, 2}
delimiter
assert np.all(c_order == f_order)
delimiter
print(repr(instance.method))
delimiter
splitter.show()
delimiter
result = urllib.request.urlretrieve(image_url)
delimiter
data = infile.read()
delimiter
print(next(spamreader))
delimiter
joystick_count = pygame.joystick.get_count()
delimiter
result
delimiter
d.astimezone(est)
delimiter
B = A[:, (np.newaxis)]
delimiter
register = template.Library()
delimiter
sorted_list = sorted(initial_list, key=move)
delimiter
clock = pygame.time.Clock()
delimiter
y_mad = left_mad * np.ones(len(y))
delimiter
combo = QtGui.ComboBox()
delimiter
json_doc = json.dumps(doc, default=json_util.default)
delimiter
do_stuff_with(b)
delimiter
self.draw_counter += 1
delimiter
train_data = data[:50]
delimiter
out[start:end] = a.reshape(-1)
delimiter
m = np.random.random((6, 6))
delimiter
x = np.random.rand(10, 10)
delimiter
im = ax.imshow(z, *args, **kwargs)
delimiter
b[b < 0] = 0
delimiter
self.list = QtGui.QListWidget(self)
delimiter
[F(N), F(N - 1)]
delimiter
a[indices]
delimiter
[buildout]
delimiter
fig.autofmt_xdate()
delimiter
self.s = s
delimiter
xyz = [0, 12, 4, 6, 242, 7, 9]
delimiter
tocall(*args)
delimiter
print([data])
delimiter
new_modules
delimiter
r = random.random()
delimiter
print(find_skew(list(range(256 - 256 % 26))))
delimiter
x, y
delimiter
print(tag.name)
delimiter
contact_form = ContactForm(instance=my_contact)
delimiter
camera_pos_x, camera_pos_y, camera_pos_z = s[12:15]
delimiter
cursor.skip(4000)
delimiter
r = requests.get(zip_file_url, stream=True)
delimiter
new_list.append(0)
delimiter
merged = collections.defaultdict(set)
delimiter
False
delimiter
self.timestamp = time.time()
delimiter
parser.add_argument(args1, args2, help=desc, **options)
delimiter
target_file.write(line.translate(trantab))
delimiter
output = []
delimiter
dic = {randint(0, 100): x for x in range(10)}
delimiter
selected = [names[bisect.bisect(cumprobs, random.random())] for i in range(N)]
delimiter
logger = logging.getLogger(__name__)
delimiter
i = np.append(np.where(y), n - 1)
delimiter
x, y, z = arr.shape
delimiter
lat, lon = radians(lat), radians(lon)
delimiter
print(span.text)
delimiter
show_messages()
delimiter
c[i].append([])
delimiter
sess.run(init)
delimiter
buf = buffer.buf
delimiter
print(tag.__class__)
delimiter
roll_left = np.roll(img, -i, axis=1)
delimiter
t = numpy.linspace(0.0, tmax, nsamples, endpoint=False)
delimiter
subset[subset.isin(myList)].stack().duplicated()
delimiter
True
delimiter
G2 = nx.Graph()
delimiter
max(community.membership)
delimiter
name, val = line.split()
delimiter
header = f.read(4)
delimiter
child.setText(0, str(key))
delimiter
pp(list(sections()))
delimiter
print(response.registers)
delimiter
sol = solve((x + I * y) ** 2 - z, (x, y))
delimiter
groupdict[key].append(dict([(k, v)]))
delimiter
dt = datetime.datetime(year=2012, month=2, day=9)
delimiter
self.img_label.configure(image=imgtk)
delimiter
print(table.name)
delimiter
dur = datetime.timedelta(hours=h, minutes=m, seconds=s)
delimiter
df = df.T.stack()
delimiter
ylo = ylo if ylo >= 0 else 0
delimiter
[(51 * ((int(c) + 25) // 51)) for c in colour]
delimiter
console.setFormatter(formatter)
delimiter
curr_num += 1
delimiter
assert me.age == me[2]
delimiter
S = np.sign(dY)
delimiter
print(i)
delimiter
layout.addWidget(self.custom_widget)
delimiter
i = a.intersection(b)
delimiter
myseries_one.loc[0]
delimiter
inputs = []
delimiter
r2 = requests.post(post_url, cookies=r.cookies, data=payload)
delimiter
lines = []
delimiter
page.mergePage(new.getPage(i))
delimiter
self._type = classtype
delimiter
d[k] = ddict2dict(v)
delimiter
MainWindow.setCentralWidget(MainFrame)
delimiter
WHAT_BEATS_WHAT = {ROCK: SCISSORS, PAPER: ROCK, SCISSORS: PAPER}
delimiter
rows = [line.split()[1:] for line in fp if line.strip()]
delimiter
a.e()
delimiter
tuple()
delimiter
comp.compile()
delimiter
a = A()
delimiter
p = Person.objects.get(pk=x)
delimiter
a[:, (0)]
delimiter
solutions.append(copy.deepcopy(board))
delimiter
current_string_split.append(s[j])
delimiter
radar.ax.legend()
delimiter
main.show()
delimiter
self.copy()
delimiter
a = np.sum(np.abs(xs), axis=1)
delimiter
aframe.iloc[locs]
delimiter
active = models.BooleanField()
delimiter
draw = PIL.ImageDraw.Draw(image)
delimiter
plot(time, y)
delimiter
f.format(fmt, **d)
delimiter
print(x)
delimiter
leg = ax.get_legend()
delimiter
host, port = self.client_address[:2]
delimiter
self.x += 1
delimiter
r.write_results()
delimiter
res[k].append(v)
delimiter
original_convert(str)
delimiter
self.buttonCalc.clicked.connect(self.handleCalculate)
delimiter
book.authors.add(george_author.id)
delimiter
[tb.format_exc()]
delimiter
print(diffl, lev, sor, jac)
delimiter
img = cv2.imdecode(arr, -1)
delimiter
[output]
delimiter
data = np.random.random(shape)
delimiter
print(a)
delimiter
a = list(range(10))
delimiter
m[i - 1, j - 1] = 1
delimiter
df
delimiter
f(numpy.array([[[1, 2]]]))
delimiter
ip_range = netaddr.iter_iprange(ip_start, ip_end)
delimiter
funs[eggs]()
delimiter
os.open(name, flag | os.O_TEMPORARY, mode)
delimiter
exec(my_code, mymodule.__dict__)
delimiter
print(config.DEBUG)
delimiter
deltas = [(a - b) for a, b in zip(zones[1:], zones[:-1])]
delimiter
cursor.add_option(8)
delimiter
self.spawn()
delimiter
print(intify(maybeLst))
delimiter
session_start()
delimiter
ret, gray = cv2.threshold(gray, 250, 255, 0)
delimiter
x += y,
delimiter
app = Flask(__name__)
delimiter
my_array.append(str(i))
delimiter
file = forms.FileField()
delimiter
scipy.version.full_version
delimiter
candidates = np.where(dY < 0)[0] + (len(kernel) - 1)
delimiter
[[0] * len(coef)]
delimiter
self.id = id
delimiter
locals()[k] = getattr(module, k)
delimiter
style = xlwt.easyxf(style_string)
delimiter
PyArray_Descr * descr
delimiter
imgBothH.shape
delimiter
-pypy
delimiter
p.findall(s)
delimiter
[11.4, 4.0],
delimiter
res = numpy.empty_like(arr)
delimiter
module = sys.modules.get(name)
delimiter
session.delete(a)
delimiter
x * x
delimiter
readline.write_history_file(historyPath)
delimiter
notebook = gtk.Notebook()
delimiter
scores.update({key: int(score)})
delimiter
self._value = value
delimiter
p.waitFor()
delimiter
s = json.dumps(data, indent=4)
delimiter
next(g)
delimiter
list(unique_everseen(a, key=chained(sorted, tuple)))
delimiter
wb = Workbook()
delimiter
fig, ax = plt.subplots()
delimiter
columnList = list(data[0:])
delimiter
tuple(pixbuf.pixel_array[0, 0])
delimiter
browser = webdriver.Firefox(firefox_binary=binary)
delimiter
luns = [int(lun) for lun in luns]
delimiter
sys.stdout.write(out_str)
delimiter
arr = arr.T
delimiter
S.Sixth.ABs.Eighth
delimiter
tagger = nltk.TrigramTagger(train_sents, backoff=default_tagger)
delimiter
user = models.OneToOne(User)
delimiter
list(map(list, out))
delimiter
logging_handler_err.setLevel(logging.WARNING)
delimiter
parent_mock._kids[1][2] is child_mock2
delimiter
print(generate_chain(409, 5))
delimiter
x + y
delimiter
G.add_edges_from(edges)
delimiter
result[k] = result.get(k, []) + [v]
delimiter
list(_)
delimiter
bundle
delimiter
x_c = np.linspace(4, 6, 15)[1:]
delimiter
b = [6, 1, 0]
delimiter
self.d[self.key].value()
delimiter
foos = [Foo() for i in range(10)]
delimiter
df_out
delimiter
[int(s.endswith(t)) for s in A]
delimiter
SPEED = 4
delimiter
gevent.joinall(tasks, timeout=12.0)
delimiter
msg.attach(basemsg)
delimiter
msg.attach(signmsg)
delimiter
dictionary = json.load(response)
delimiter
count = 0
delimiter
self.threads = []
delimiter
nfactors = len(factors)
delimiter
df
delimiter
main()
delimiter
r = requests.post(url, data=data, allow_redirects=True)
delimiter
b[5, 6, 7, 8]
delimiter
A = np.random.rand(M, N, R)
delimiter
self.tag_test(template, context, output)
delimiter
fig = plt.figure()
delimiter
ax = f.add_subplot(111)
delimiter
d[b]
delimiter
a, b = 0, 1
delimiter
self.left.reverse()
delimiter
etree.XML(xml)
delimiter
n = 2
delimiter
probability = np.sum(kd_vals * step)
delimiter
b = np.array([[4, np.inf], [np.nan, -np.inf]])
delimiter
bin_n = bin(n)[2:]
delimiter
call_logger = lambda *a, **kw: lambda f: f
delimiter
some_tag = etree.fromstring(XML)
delimiter
pprint.pprint(root, width=1)
delimiter
x_fine = np.linspace(-1, 1, 2001)
delimiter
mymin = np.min(a)
delimiter
x_sorted = x[order]
delimiter
g.user = user
delimiter
graphs_sizer.Add(chart_toolbar, 1, flag=wx.ALIGN_CENTER, border=5)
delimiter
np.random.seed(0)
delimiter
print(x)
delimiter
fig = bokeh.plotting.figure()
delimiter
kmeans = KMeans(n_clusters=n_cluster).fit(X)
delimiter
self.x = x
delimiter
roll_up = np.roll(img, -i, axis=0)
delimiter
start = random.randint(0, len(partition) - k)
delimiter
response
delimiter
699
delimiter
L = list(itertools.repeat(10, 20))
delimiter
dest.update(extra)
delimiter
(comp.string.encode(enc) % tuple(params)).decode(enc)
delimiter
assert time.clock() == 1
delimiter
self.__dict__[name] = value
delimiter
print(X_train == X_train_init)
delimiter
plt.xlim([min(xvals) - 0.5, max(xvals) + 0.5])
delimiter
set(zip(*[string[i:] for i in range(n)]))
delimiter
desired_shape = np.array((5, 8))
delimiter
cLoss = sum([(1 - x * one_zero_sum[dist_[y]]) for y, x in enumerate(TLabels)])
delimiter
person_dict[person.last_name].append(person)
delimiter
dy = [size2, size2, -size2, -size2, size2]
delimiter
print(a.shape)
delimiter
crawler.configure()
delimiter
to_del.append(y)
delimiter
p.start()
delimiter
temp = np.partition(-test, 4)
delimiter
image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
delimiter
capture = cv.CaptureFromCAM(i)
delimiter
ds2 = set([tuple(line) for line in df2.values.tolist()])
delimiter
frame = inspect.currentframe()
delimiter
self.value = value
delimiter
result_dict = {}
delimiter
main()
delimiter
df_formatted = pd.concat([df_fmt, df])
delimiter
arg2value = {}
delimiter
sent = BooleanField(default=False)
delimiter
print(i)
delimiter
enable = W0601, W0612
delimiter
stats.kendalltau(B[col1], B[col2])[0]
delimiter
print(m.headers)
delimiter
id = Column(Integer, primary_key=True)
delimiter
True
delimiter
print(max(multiples, key=lambda a_b: a_b[0] * a_b[1]))
delimiter
d.seconds
delimiter
sig1 = numpy.interp(t, t1, sig1)
delimiter
a = np.arange(1, 11)
delimiter
print(i, word)
delimiter
result = []
delimiter
plt.show()
delimiter
Py_DECREF(result)
delimiter
ydata.append(np.exp(-x ** 2) + 10 * np.exp(-(x - 7) ** 2))
delimiter
ax.set_xticks(arange(len(genres)))
delimiter
plt.plot(x, y, x, -0.5 + h1, x, -0.5 + h2)
delimiter
print(result)
delimiter
fig = plt.figure()
delimiter
input = [input]
delimiter
session = create_session(bind=engine)
delimiter
DG.add_edge(stnode, ennode, name=edge)
delimiter
b = datetime.datetime(2011, 8, 29)
delimiter
dt_tuple = xlrd.xldate_as_tuple(cell_value, workbook.datemode)
delimiter
sock.settimeout(prev_timeout)
delimiter
[-2, -1, 0, -1, -2],
delimiter
column_series = pd.Series(list(range(columns)))
delimiter
data.repeat(5)
delimiter
match_proj = match_ds.GetProjection()
delimiter
event.widget.master.focus_set()
delimiter
env = jinja2.Environment()
delimiter
rescaled
delimiter
subprocess.Popen([program]).wait()
delimiter
tempcreator.__exit__()
delimiter
self.le = QLineEdit()
delimiter
print((x, y))
delimiter
bucket = conn.get_bucket(your_bucket)
delimiter
DEBUG = 1
delimiter
log4jLogger = sc._jvm.org.apache.log4j
delimiter
new_dict[length][mykey] = name_num[mykey]
delimiter
self.dictionary[key][1] = value
delimiter
x = T.dmatrix()
delimiter
freq4.timeit(10)
delimiter
logger.setLevel(logging.DEBUG)
delimiter
torfile.add_url_seed(url_seed)
delimiter
i1 = [0, 2, 4, 6]
delimiter
ignore[np.ma.maximum(y11, y12) < np.ma.minimum(y21, y22)] = True
delimiter
HttpResponseRedirect(url)
delimiter
a[~mask] = 999
delimiter
bins = np.histogram(np.hstack((a, b)), bins=40)[1]
delimiter
rle([True, True, True, False, True, False, False])
delimiter
self.aws.__aexit__()
delimiter
True
delimiter
[i for i in range(amount)]
delimiter
tree = etree.parse(metadata, parser)
delimiter
blob_info = upload_files[0]
delimiter
print(str(a))
delimiter
IFAIsFastSer = 0
delimiter
model = Bilag
delimiter
tester.dothis()
delimiter
d = dict(t)
delimiter
time.sleep(0.001)
delimiter
b = time.time()
delimiter
list.append(self, item)
delimiter
fig = plt.figure()
delimiter
output = tf.transpose(tf.pack(outputs), perm=[1, 0, 2])
delimiter
attrs = [(x.attr if hasattr(x) else {}) for x in y]
delimiter
con = pool.get_connection()
delimiter
d4 = eastern.localize(datetime(2016, 11, 5, 5, 0, 0))
delimiter
ff(x, y)
delimiter
paths = [os.path.abspath(path) for path in paths]
delimiter
game_score / max_score * 0.7 + game_score / total_hits * 0.2 + game_score_per_life / hits_per_life * 0.1
delimiter
numpy.nextafter(1, 0) - (1 - sys.float_info.epsilon)
delimiter
o = TestObj2()
delimiter
self.cur2.executemany(query, self.rows)
delimiter
p_df = pd.DataFrame(data)
delimiter
plot(times, freq)
delimiter
lib.test(darray.fromnp(a1), darray.fromnp(a2))
delimiter
fig, ax = plt.subplots()
delimiter
print(e.extra_info)
delimiter
error_list = total_error_list(python_filename)
delimiter
login_form.full_clean()
delimiter
sentence.append(newword)
delimiter
upload_fd.write(read_slice)
delimiter
pagenos = set()
delimiter
klass = getattr(mod, name)
delimiter
os.seteuid(471)
delimiter
self.dictionary[key] = [index, value]
delimiter
max_list.append(s)
delimiter
b.initialize_options()
delimiter
models.signals.pre_init.connect(self.pre_init, sender=cls)
delimiter
acc.extend(items)
delimiter
lines
delimiter
self.running = False
delimiter
self.assertTrue(ip1.ip in result_ips)
delimiter
grp.nlargest(2).div(grp.shift(-1), level=1).groupby(level=0).first()
delimiter
print(current_line)
delimiter
True
delimiter
value, params = cgi.parse_header(header)
delimiter
lst.remove(v)
delimiter
print(linetext.text())
delimiter
context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
delimiter
df
delimiter
db.session.delete(self)
delimiter
doc.build(story)
delimiter
df
delimiter
Base.metadata.drop_all()
delimiter
system = models.ForeignKey(System)
delimiter
cPickle.dumps(d)
delimiter
arr.count(0)
delimiter
basmod = BaseModule(argv[0], argv[1])
delimiter
allhist, allbin = np.histogram(dat, bins=ebins)
delimiter
text = Text(root)
delimiter
a = A(4)
delimiter
U, S, V = np.linalg.svd(sigma)
delimiter
g = tf.Graph()
delimiter
p = Process(target=f, args=(child_conn,))
delimiter
m = [csr_matrix(x) for x in m]
delimiter
intersection = np.all((params >= 0) & (params <= 1), axis=(-1, -2))
delimiter
cursor.execute(query_str)
delimiter
params = dict()
delimiter
can_delete = False
delimiter
config = bucket.get_lifecycle_config()
delimiter
u = urlparse(url)
delimiter
print(line)
delimiter
diag_T = T.diagonal().copy()
delimiter
df.irow(loc - 1)
delimiter
print(i)
delimiter
order_by(t1.c.time)
delimiter
sys.getrefcount(b[-2])
delimiter
x_n = np.sum(x_n, axis=1)
delimiter
ranges.append(new_range)
delimiter
(dates - dateshift).fillna(0).dt.days.cumsum().describe()
delimiter
b = np.repeat(888, a.shape)
delimiter
dst = cv2.bitwise_and(image_src, mask)
delimiter
list(reversed(counts.most_common()[-to_find:]))
delimiter
keys = d.keys() | d1.keys()
delimiter
x, y = np.mgrid[0:a.shape[0], 0:a.shape[1]]
delimiter
key in self.g
delimiter
form = self.get_form(form_class)
delimiter
print(my_string[my_interval])
delimiter
x | x << 1
delimiter
app = Flask(__name__)
delimiter
create_archive(paths, arc_paths, archive)
delimiter
string.digits
delimiter
head, tail = os.path.split(os.path.split(pathname)[0])
delimiter
buffer.close()
delimiter
newest_file
delimiter
np.isnan(y)
delimiter
print(str(is_visible_1(link)))
delimiter
stop = datetime.datetime.now()
delimiter
seq[int(self.random() * len(seq))]
delimiter
d = BidirectionalDict()
delimiter
centroid = sum(x) / len(points), sum(y) / len(points)
delimiter
print(l)
delimiter
urllib.request._urlopener = AppURLopener()
delimiter
my_name = messages.StringField(1, required=True)
delimiter
remote, address = s.accept()
delimiter
text_string = text_string.splitlines()
delimiter
a = zeros((2, 5))
delimiter
a = A(1)
delimiter
lcd.setPalette(palette)
delimiter
self.members.add(member)
delimiter
[0.0, 1.0, 1.0, 1.0, 1.0, 0.0],
delimiter
m = [inner_list] * rows
delimiter
NoStringWrappingPrettyPrinter().pprint(yourobject)
delimiter
md5 = hashlib.md5()
delimiter
dist_a_b = dist(a, b)
delimiter
time.sleep(24 * 60 * 60)
delimiter
b_in_a = [x for x in a if x in set(b)]
delimiter
fullstring, name, number = r.groups()
delimiter
x.loc[(x.date.idxmin()), :]
delimiter
one_day = timedelta(days=1)
delimiter
letters = set(string.ascii_letters)
delimiter
print(first_user.email)
delimiter
date_ints = set([d.toordinal() for d in dates])
delimiter
result.append(str[last_end:sp[0]])
delimiter
int(whole) + fractions.Fraction(frac)
delimiter
res = conn.getresponse()
delimiter
print(value)
delimiter
total_loss = l2_loss_sum([layers[j].weights for j in range(self.n_layers)])
delimiter
mpz_set(modulus, n)
delimiter
pprint(data)
delimiter
print(string.punctuation)
delimiter
d = {}
delimiter
mapper(Orders, orders_table)
delimiter
tree = etree.parse(StringIO(text), parser)
delimiter
ss = ssl.wrap_socket(s)
delimiter
a = np.arange(16).reshape(4, 4).astype(float)
delimiter
plt.plot(t, cos(w * t))
delimiter
re.sub(pattern, replacer, text)
delimiter
append((word, word_offset, running_offset - 1))
delimiter
request = opener.open(url)
delimiter
np.allclose(out1, out2.toarray())
delimiter
print(said)
delimiter
middle = len(strg) // 2
delimiter
np.vstack((rlin * first, np.power(rlin, second)))
delimiter
locals().update(somedict)
delimiter
ax2 = fig.add_subplot(212)
delimiter
f, a = plt.subplots(1)
delimiter
parser = etree.XMLParser(remove_blank_text=True)
delimiter
bar()
delimiter
print(q.statement.compile(dialect=postgresql.dialect()))
delimiter
result = self.contained[item]
delimiter
field_name = funct()
delimiter
0
delimiter
row = numpy.array([(0.0001, 0.002)], dtype=type1)
delimiter
pool = mp.Pool()
delimiter
p.x = 5
delimiter
a = np.array(a)
delimiter
bloop_list = Bloop.as_view()
delimiter
soup = BeautifulSoup(html)
delimiter
value = args[int(key)] if key.isdigit() else kwds[key]
delimiter
n[0]
delimiter
df_test = df_test.append(rows_list)
delimiter
partials = []
delimiter
print(df)
delimiter
multiset[bin_] += 1
delimiter
app = wx.PySimpleApp()
delimiter
d2 = datetime.date(2012, 1, 1)
delimiter
self.clientSocket.send(data)
delimiter
setattr(instance, _UNSAVED_FILEFIELD, instance.image)
delimiter
diff_keys = [k for k in A if A.get(k) != B.get(k)]
delimiter
list(binomial_choice(list(range(5)), 1))
delimiter
keynames[i] = k[1:]
delimiter
tf.import_graph_def(basegraph.as_graph_def())
delimiter
mx_hosts = DNS.mxlookup(hostname)
delimiter
ROOT_PATH = os.path.dirname(__file__)
delimiter
s = al.spline1dbuildakima(x, y)
delimiter
mindate = datetime.date(datetime.MINYEAR, 1, 1)
delimiter
x[1:] = x[:-1]
delimiter
print(df_b)
delimiter
[d[k] for d in ds for k in d if match(k, pat)]
delimiter
nondirectories.append(filename)
delimiter
all(i == first for i in it)
delimiter
soup = BeautifulSoup(s)
delimiter
to_remove = [n for n in outdeg if outdeg[n] == 1]
delimiter
new_list = []
delimiter
self.listener.close()
delimiter
i = self.obj_type.__mro__.find(self.obj_type)
delimiter
Xt = ax.transData.transform(X)
delimiter
i = 1
delimiter
results = pool.map(cube, list(range(1, 7)))
delimiter
self._data_filter
delimiter
wb = o.Workbooks.Open(wb_path)
delimiter
mainwin = Tk()
delimiter
b = copy(a)
delimiter
self._storage[key].has_prefix(word[prefix_index:])
delimiter
im = img_padded.load()
delimiter
exec(code, module.__dict__)
delimiter
output = PdfFileWriter()
delimiter
my_set.update({6, 7})
delimiter
nf.close()
delimiter
print(list(l))
delimiter
edges = collections.defaultdict(list)
delimiter
ax = pylab.gca()
delimiter
f.close()
delimiter
tree = etree.XML(content)
delimiter
cls(value)
delimiter
app = Flask(__name__)
delimiter
R1 = 0
delimiter
nfailed = 0
delimiter
new1
delimiter
total = 0
delimiter
d1.update(d2)
delimiter
l[0] is l
delimiter
print(a, b)
delimiter
B = copy.copy(A)
delimiter
mail.set_debuglevel(debuglevel)
delimiter
r < -reduce(Intervals(cbind(start, end)))
delimiter
word = Column(String)
delimiter
cython.int
delimiter
worksheet = workbook.add_worksheet()
delimiter
x = df.values
delimiter
setup4 = setup2
delimiter
dr = csv.DictReader(f)
delimiter
num1 = int(argv[1])
delimiter
time[i], signal[i] = q.get()
delimiter
bisect_iter_to_list(str.isalpha, iter(l))
delimiter
c()
delimiter
dupcount = 0
delimiter
old_init(self, *k, **kw)
delimiter
self.array_pool[i] = np.frombuffer(buf, dtype=self.dtype).reshape(self.shape)
delimiter
numbers = [10, 20, 1, -11, 100, -12]
delimiter
np.log(gev.pdf(data, *fit)).sum()
delimiter
k, v = build(r, v)
delimiter
self.toolbar.Realize()
delimiter
a = s.split()
delimiter
df
delimiter
clf = ensemble.RandomForestClassifier().fit(X[:100], y[:100])
delimiter
value_counts = df[col].value_counts()
delimiter
app.MainLoop()
delimiter
starts = np.zeros(len(counts), dtype=int)
delimiter
glLoadIdentity()
delimiter
df
delimiter
a = A()
delimiter
print(regx.split(DATA))
delimiter
reviews = session.query(Review).filter(Review.id.in_(review_ids)).all()
delimiter
self.data[index]
delimiter
result = getattr(image, method)
delimiter
fig = plt.figure()
delimiter
fig, ax = plt.subplots()
delimiter
print(next(d(myset)))
delimiter
self.transport = transport
delimiter
data = urlopen(push_url).read()
delimiter
FormRequest(url, formdata=payload, callback=self.parse_stores)
delimiter
sess = tf.Session()
delimiter
f = tar.extractfile(member)
delimiter
tuple(s[i:i + 4] for i in range(0, len(s), 4))
delimiter
ds = SupervisedDataSet(2, 1)
delimiter
dm = pdist(X, lambda u, v: np.sqrt(((u - v) ** 2).sum()))
delimiter
sx, sy = np.sqrt(vx), np.sqrt(vy)
delimiter
logging.basicConfig(level=logging.DEBUG, filename=logfile)
delimiter
timestamp = db.DateTimeProperty(auto_now_add=True)
delimiter
print(Point(1, 2))
delimiter
sudo / usr / bin / somecommand
delimiter
actual_number = random.choice(list(range(k)))
delimiter
cbar2 = fig.colorbar(im2, cax=cax2)
delimiter
lines.append(str(self.context_mark))
delimiter
y = [(x + i) for i in range(1)]
delimiter
a[i - 1]
delimiter
t = threading.Thread(target=self.server.shutdown)
delimiter
mimetypes.guess_type(path, strict=False)
delimiter
mydict[e] += 1
delimiter
print(is_admin)
delimiter
end_date = dateutil.parser.parse(end)
delimiter
df = pd.concat([df, df2])
delimiter
overlap(0, 50, 40, 90)
delimiter
print(res)
delimiter
pytz.__version__
delimiter
thumbnail = serializers.ImageField()
delimiter
u, urlparse.parse_qs(q)
delimiter
data = np.random.random(n)
delimiter
m = Mock()
delimiter
prop.__set__(entity, ref_entities[ref_key])
delimiter
widget.setGeometry(widget.geometry())
delimiter
False
delimiter
result = [(x + [y]) for x in result for y in pool]
delimiter
instance = cls(*args, **kwargs)
delimiter
groups = df.groupby(pandas.cut(df.a, bins))
delimiter
respawn
delimiter
result = [x for k in sorted(d) for x in k * d[k]]
delimiter
epoch = datetime.datetime.utcfromtimestamp(0)
delimiter
{1, 0, 0}
delimiter
permstr += permtype.lower()
delimiter
G.add_node(n1, obj=n1)
delimiter
A = array(a).reshape(len(a) / 2, 2)
delimiter
line = f.readline()
delimiter
st = os.stat(filename)
delimiter
x = np.random.rand(10, 6, 7)
delimiter
m.add(k, dict2.get(k))
delimiter
signal.alarm(2)
delimiter
mapper.SetInputData(self.vtkPolyData)
delimiter
session.add(ed_user)
delimiter
session.save()
delimiter
b = numpy.array(list(range(5)))
delimiter
new_dic_defaultdict = defaultdict(dict)
delimiter
W = tf.Variable(tf.random_uniform([d, 1], -1.0, 1.0))
delimiter
g = map(set, g)
delimiter
c = C(2)
delimiter
print(a)
delimiter
self.val
delimiter
df
delimiter
1
delimiter
b_inv = np.linalg.inv(b)
delimiter
sum_of_two = sum(num_list)
delimiter
tpp, tdv = [], []
delimiter
parser.config_files.append(values)
delimiter
p.join()
delimiter
tags = exifread.process_file(f)
delimiter
retval = self.my_class.__call__(*args, **kwargs)
delimiter
patch.set_facecolor(color)
delimiter
print((a, b, c))
delimiter
df = pd.concat([X] * 10 ** 5, ignore_index=True)
delimiter
sec = glrhs[2]
delimiter
Py_XDECREF(pName)
delimiter
two - 0.444106
delimiter
df
delimiter
print(names[i])
delimiter
self.queue.put(f)
delimiter
new_tokens.append(translated)
delimiter
prefixes.sort(key=lambda s: len(s))
delimiter
h = matrix([[-0.02], [0.05]])
delimiter
pathA = cheapest_path(path_list, A, [])
delimiter
print(result)
delimiter
coords = (0, 0), (0, 2), (2, 0), (2, 2)
delimiter
int_part = int(abs(x))
delimiter
ax = f.add_subplot(1, 1, 1)
delimiter
parse_tree = etree.parse(StringIO(xml_str))
delimiter
g.series(x, y, 0, 0)
delimiter
self.selenium = webdriver.Chrome(desired_capabilities=CHROME)
delimiter
x = create1m()
delimiter
x = create1g()
delimiter
self._c = c
delimiter
nr, nc = imgdata.shape[:2]
delimiter
old_window[0] = gdk_window.get_screen().get_active_window()
delimiter
test1 = array([[True, False, True, False, True]], dtype=bool)
delimiter
df1.columns = df1.columns.droplevel(1)
delimiter
func = lambda x: x + 1
delimiter
fd.seek(0)
delimiter
self.loop.call_soon(self.event.set)
delimiter
print(optimization.curve_fit(func, xdata, ydata, x0, sigma))
delimiter
utc_dt = datetime(1970, 1, 1) + timedelta(seconds=timestamp)
delimiter
output.append(str1)
delimiter
app = QtGui.QApplication([])
delimiter
p2 = Popen(cmd, stdin=p1.stdout, stdout=PIPE, stderr=tempFile)
delimiter
areaofpolygon(polygon, i + 1)
delimiter
subplot2.plot(y, x)
delimiter
result
delimiter
sock.setproxy(*self.proxy_info.astuple())
delimiter
print(match)
delimiter
self.it = iter(range(10))
delimiter
ie = webbrowser.get(webbrowser.iexplore)
delimiter
G = nx.DiGraph()
delimiter
substrings = [a[i:i + n] for i in range(len(a) - n + 1)]
delimiter
grouped = defaultdict(list)
delimiter
True
delimiter
workers.append(child)
delimiter
plot = fig.add_subplot(111)
delimiter
data = cursor.fetchall()
delimiter
c = conn.cursor()
delimiter
pool.close()
delimiter
print(chambersinreactor)
delimiter
print(cardsdiscarded)
delimiter
sqlContext.createDataFrame(temp_rdd, schema).printSchema
delimiter
pic.seek(0)
delimiter
bmarks = json.load(f)
delimiter
noisycount += 1
delimiter
quietcount += 1
delimiter
client.loop()
delimiter
ops = random.choice(list(op.keys()))
delimiter
q = db.Query(PC_Applications, keys_only=True)
delimiter
_data[k] = hex(v)
delimiter
atexit.register(functools.partial(kill_children, c_pid))
delimiter
plt.show()
delimiter
monotone_increasing(lst) or monotone_decreasing(lst)
delimiter
fig, ax = plt.subplots()
delimiter
nx.draw(G, pos=coords)
delimiter
a = a[:-1]
delimiter
Bar()
delimiter
pool = multiprocessing.Pool(n_workers)
delimiter
a = A()
delimiter
proc = subprocess.Popen(lstrun, close_fds=True)
delimiter
start.insert(0, ind)
delimiter
print([i for j in zip(start, repeat(0)) for i in j][:-1])
delimiter
ch = sys.stdin.read(1)
delimiter
time.sleep(random.randrange(4))
delimiter
rtn.append(a)
delimiter
countup(N, n + 1)
delimiter
self.response.out.write(utils.GqlEncoder().encode(results))
delimiter
y_train = self.y[train_mask]
delimiter
now2 = la.localize(datetime.now())
delimiter
self.key
delimiter
l = mpl.pyplot.gca().legend_
delimiter
self._add(attr.get(), obj)
delimiter
tty.setraw(sys.stdin.fileno())
delimiter
plt.colorbar(c)
delimiter
result.append((curr[2], self[curr[2]]))
delimiter
d = defaultdict(dict)
delimiter
file_obj.seek(0)
delimiter
rand_x_digit_num(5, False)
delimiter
df
delimiter
provided_ips = request.access_route
delimiter
bytes = str.encode(my_str)
delimiter
time = time_xpath(row)[0].strip()
delimiter
a = []
delimiter
request = urllib.request.Request(url)
delimiter
startsecs = 5
delimiter
installer.install(options)
delimiter
d
delimiter
tree = lambda : defaultdict(tree)
delimiter
f1 = f.subs(b, 10)
delimiter
panel = wx.Panel(self, wx.ID_ANY)
delimiter
x = 2
delimiter
d[k] = [dictionary[k][column_name] for column_name in column_order]
delimiter
b = copy(a)
delimiter
Pdb
delimiter
self.buf.read(*args, **kwargs)
delimiter
myTaskId = abortable_async_result.task_id
delimiter
node = node[char.upper()]
delimiter
num_cols = len(f.readline().split())
delimiter
print(df)
delimiter
mixer.init()
delimiter
datetime.datetime.utcnow()
delimiter
arr.put(ind, [a, b, c])
delimiter
data = request.data
delimiter
numbers.append(i)
delimiter
self.x = 2
delimiter
print(a[0, 0])
delimiter
print(L)
delimiter
hostname = match.group(1)
delimiter
y = np.exp(-x / 2.0) * np.sin(2 * np.pi * x)
delimiter
combs = set()
delimiter
serial_data = ser.readline()
delimiter
log.flush()
delimiter
ts1, ts2 = p(l)
delimiter
z = np.array((old_val, new_val)).T
delimiter
df.index[9:], df.columns
delimiter
idx = np.argsort(dst)[:f]
delimiter
list(d1.keys())[v.index(max(v))]
delimiter
cos += (-1) ** n * x ** (2 * n) / math.factorial(2 * n)
delimiter
cov.load()
delimiter
assert 0 == 1
delimiter
cookies = urllib.request.HTTPCookieProcessor()
delimiter
f.close()
delimiter
X = np.repeat(X, 100, axis=0)
delimiter
der = ssl.PEM_cert_to_DER_cert(pem)
delimiter
parser.parse(a_datetime).astimezone(tz)
delimiter
value
delimiter
session.expunge(stud)
delimiter
ws = wb.worksheets[0]
delimiter
tag_labels = tag_list(repo)
delimiter
f = ET.fromstring(data)
delimiter
F = np.array(list(itertools.product([0, 1], repeat=n))).T
delimiter
print(l)
delimiter
cvMerge(realInput, imaginaryInput, NULL, NULL, complexInput)
delimiter
r, c = a.shape
delimiter
serializer.is_valid(raise_exception=True)
delimiter
print(i, f)
delimiter
np.linalg.norm(sortedA[1:] - sortedA[:-1], axis=1)
delimiter
Particle[j].AddNeighbor(Particle[i])
delimiter
chars = []
delimiter
train_indices = list(range(40)) + list(range(50, 90))
delimiter
death_year = death_data[2]
delimiter
adj = gtk.Adjustment(1, 1, 99, 1, 1, 1)
delimiter
z0 = z_indices.astype(np.integer)
delimiter
xdata = np.vstack([x, y, z])
delimiter
do_something(line)
delimiter
print(docopt.docopt(__doc__))
delimiter
putstr(prompt)
delimiter
list_of_bools = [True, True, True, True]
delimiter
summary[entry[0]] += entry[1:]
delimiter
yaml.add_representer(literal_unicode, represent_literal_unicode)
delimiter
diff = np.setdiff1d(b, a)
delimiter
pylab.show()
delimiter
schema = etree.XMLSchema(schema_doc)
delimiter
result = np.ma.array(yindex, mask=mask)
delimiter
index.create(engine)
delimiter
(1 - -1) * np.random.random() + -1
delimiter
print(i)
delimiter
urls.append(url)
delimiter
charlie = NS.charlie
delimiter
chocolate = NS.chocolate
delimiter
hates = NS.hates
delimiter
dislikes = NS.dislikes
delimiter
[n for n in list_to_test if isinstance(n, type_of)]
delimiter
self.on_message = on_message
delimiter
self.d[k]
delimiter
print(is_png(data))
delimiter
os._exit(0)
delimiter
width, height = image.size
delimiter
data = plt.cm.jet(data[x_data, y_data])
delimiter
cv2.polylines(h, [pts], False, col)
delimiter
np.dot(af, af).astype(int)
delimiter
my_list[0][0] = 5
delimiter
y = list(x)
delimiter
self.write(line)
delimiter
c = Counter(s)
delimiter
axis.set_minor_locator(NullLocator())
delimiter
df1 = df1.apply(closest, axis=1)
delimiter
candidates[index] = bases[index] * nums[candidates_indexes[index]]
delimiter
signal.alarm(5)
delimiter
ax = plt.gca()
delimiter
iregex
delimiter
cache[method_name]
delimiter
a = np.asanyarray(a)
delimiter
vbox.pack_start(self.button, False, False, 0)
delimiter
ind = (posx > 0) & (posx <= bins[0]) & (posy > 0) & (posy <= bins[1])
delimiter
pl.hist(data, bins=10 ** np.linspace(np.log10(MIN), np.log10(MAX), 50))
delimiter
C = A * B
delimiter
x.foo()
delimiter
np.exp(x)
delimiter
pseudocolor(80, 0, 100)
delimiter
unserialized_data = pickle.load(handle)
delimiter
self.assertRaises(exc, f, *args, **kwargs)
delimiter
self.index -= 1
delimiter
decimal.getcontext().prec = 6
delimiter
self.click_positions.append(event.pos())
delimiter
a()
delimiter
remove(argv[0])
delimiter
b = list(a)
delimiter
a.x
delimiter
datos.append(float(item))
delimiter
l.append(g.name)
delimiter
ax.invert_yaxis()
delimiter
something()
delimiter
contents = self.buf.read(size)
delimiter
max(S)
delimiter
a = np.zeros(42)
delimiter
srcname = os.path.join(src, name)
delimiter
x / y
delimiter
dt = datetime.utcnow()
delimiter
z = exp(-x)
delimiter
i += 1
delimiter
a = []
delimiter
cur = conn.cursor()
delimiter
rows = json.loads(x)
delimiter
print(old_s)
delimiter
reduce(lambda d, k: d[k], keys[:-1], result)[keys[-1]] = value
delimiter
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
delimiter
fig = plt.figure(frameon=False)
delimiter
dragged_iters.append(model.get_iter_from_string(iter))
delimiter
data = np.random.randn(N)
delimiter
print(df)
delimiter
config.read_string(s_config)
delimiter
sqr = col.copy()
delimiter
outThread.start()
delimiter
len(dir(aStrOBJECT))
delimiter
(7, 10)[7, 8, 9]
delimiter
self.x = x
delimiter
view
delimiter
screen.blit(treeImage, pygame.rect.Rect(0, 0, 128, 128))
delimiter
end_date - start_date - datetime.timedelta(days=number_of_weekends * 2)
delimiter
print([v for v in list(anagrams.values())])
delimiter
y = np.arange(-5, 5, 0.25)
delimiter
print(repr(testObject))
delimiter
a = np.array(list(range(1, 10)))
delimiter
struct.unpack(fmt, data)
delimiter
groups = df.groupby(cols)
delimiter
fig.tight_layout()
delimiter
today = date.today()
delimiter
DONT_RESOLVE_DLL_REFERENCES = 1
delimiter
self.clientSocket.close()
delimiter
output += markdown2.markdown(mkin.read())
delimiter
res = {}
delimiter
derangements = (tuple(derange(list(range(n)))) for _ in range(10000))
delimiter
m, n = len(seq), len(sub)
delimiter
True
delimiter
self.page.mainFrame().load(self.currentUrl())
delimiter
print(longest_sum([1, 2, 7, 8, 11, 12, 14, 15], 0, 0, 10))
delimiter
db.delete_async(self)
delimiter
files = []
delimiter
mask = np.in1d(np.arange(np.max(out_id) + 1), out_id)
delimiter
area
delimiter
painter.drawPixmap(event.rect(), self.pixmap)
delimiter
n
delimiter
dx_cell = max(abs(lattice_vectors[0][0]), abs(lattice_vectors[1][0]))
delimiter
output
delimiter
[TYPECHECK]
delimiter
User()
delimiter
labels_one_hot = np.zeros((num_labels, num_classes))
delimiter
www.myurlnumber1.com
delimiter
dic[4]
delimiter
x[a][b].update(C)
delimiter
book.user == bundle.request.user
delimiter
sqrt(y - (p[0] + x * p[1]) ^ 2 + (x - (pinv[0] + y * pinv[1])) ^ 2)
delimiter
print(recv5.decode())
delimiter
lock.release()
delimiter
print(decimal.__version__)
delimiter
self.width = self.winfo_reqwidth()
delimiter
tree.takeTopLevelItem(tree.indexOfTopLevelItem(i))
delimiter
MyTestResult(self.stream, self.descriptions, self.verbosity)
delimiter
func(request, *args, **kwargs)
delimiter
y, x = np.mgrid[:10, :10]
delimiter
c1, c2
delimiter
im.seek(len(seq))
delimiter
pixmap = QPixmap.fromImage(image)
delimiter
fmin = (N + f2 - 1) / f2
delimiter
df2 = pd.DataFrame(index=idx, columns=idx)
delimiter
quotes = formset.save(commit=False)
delimiter
columnNames.append(str(SchemaTable.Rows[i][0]))
delimiter
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
delimiter
set(itertools.product(s1, s1, s1))
delimiter
print((25.4 / 10.0 * (1.0 / 2.54)).__repr__())
delimiter
True
delimiter
p.terminate()
delimiter
sin_data = np.sin(data)
delimiter
4, 5, 6
delimiter
data = np.loadtxt(file, skiprows=8)
delimiter
token = gdata.gauth.token_from_blob(saved_blob_string)
delimiter
soup = Soup(handler)
delimiter
qs.filter(is_active=1)
delimiter
json_object = json.loads(myjson)
delimiter
self.a = a
delimiter
output = PdfFileWriter()
delimiter
np.array(B)
delimiter
Model.objects.filter(m2m_field=1).filter(m2m_field=2)
delimiter
print(df)
delimiter
cj.load()
delimiter
sheet = book.active
delimiter
print(a._x, a._y)
delimiter
crypts = crypts[1:]
delimiter
opener = urllib.request.build_opener(authhandler, urllib.request.HTTPHandler(debuglevel=1))
delimiter
initials = models.CharField(max_length=20, blank=False, null=False)
delimiter
tmp()
delimiter
allowed_domains = []
delimiter
ax.autoscale_view()
delimiter
d[value].append(key)
delimiter
not any(d.values())
delimiter
a = [1]
delimiter
obj.set_x_self()
delimiter
queryset = Game.objects.all()
delimiter
p.feed(xhtml)
delimiter
sum += random.randint(0, 100)
delimiter
x.append([x] * 5, ignore_index=True)
delimiter
my_thread = QThread()
delimiter
comparison = tf.equal(a, tf.constant(1))
delimiter
A1 = [[A[i][j] for j in new_order] for i in new_order]
delimiter
a = list(range(10))[::-1]
delimiter
A = A - A.mean(1)
delimiter
D = list(Concate.values())
delimiter
l = fnmatch.filter(string_input.split(), pattern)
delimiter
b.ndim
delimiter
self.check_word_type(self, self.filename)
delimiter
tlist += ttlist
delimiter
template_globals.update(render=render_partial)
delimiter
hash(self.s)
delimiter
x2 = np.random.normal(size=N)
delimiter
axes[0, 0].set_ylim(0)
delimiter
dis.dis(myfile)
delimiter
print(i)
delimiter
a // 1
delimiter
print(line)
delimiter
ax = plt.gca()
delimiter
os.chdir(destination[0:len(destination) - 1] + path)
delimiter
merge(a, b, lambda in_a, in_b: in_a and not in_b)
delimiter
axs[i].get_xaxis().set_ticks([])
delimiter
processHandle = OpenProcess(PROCESS_ALL_ACCESS, False, pid)
delimiter
dt = utc_dt.astimezone()
delimiter
s.boot
delimiter
print(result.fetchall())
delimiter
16777215
delimiter
type.__new__(mcs, classname, bases, dictionary)
delimiter
self.f.flush()
delimiter
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
-Bob
delimiter
() < []
delimiter
x = {row.SITE_NAME: row.LOOKUP_TABLE for row in cursor}
delimiter
a = Fraction(1, 2)
delimiter
zlib.decompress(compressed)
delimiter
print(f_x([9, 10]))
delimiter
0
delimiter
screen.clear()
delimiter
[a.insert(i, a.pop()) for i in range(1, len(a) + 1, 2)]
delimiter
hashlib.sha512(s).hexdigest()
delimiter
lines = f.readlines()
delimiter
worksheet.update_cell(1, 2, form_value_1)
delimiter
print(uuid.uuid4())
delimiter
subplots_adjust(top=1, bottom=0, right=1, left=0, hspace=0, wspace=0)
delimiter
d1 = datetime.date(2008, 8, 15)
delimiter
root, extension = os.path.splitext(filename)
delimiter
first_ten = df[:10]
delimiter
-1, -2
delimiter
print(f.func_count)
delimiter
my_node.think()
delimiter
raise TypeError(node)
delimiter
a.fn()
delimiter
print(df)
delimiter
Orange.data.Table(tdomain, tinsts)
delimiter
True
delimiter
c = 1
delimiter
conn = httplib.HTTPConnection(proxyHost, proxyPort)
delimiter
self.finish()
delimiter
{{fqdn}}
delimiter
self.child_pipe.send(result)
delimiter
x = len(self.left) // 2
delimiter
a_minus_b = [item for item in a if item not in b]
delimiter
man.start()
delimiter
len(self.text)
delimiter
x2fr = min(x2, inarr.shape[0])
delimiter
check_matr(a, 0)
delimiter
self.addButton = Gtk.ToolButton()
delimiter
df
delimiter
pickle.dump(db, f)
delimiter
file.seek(seek)
delimiter
rect = rect.move((x, y))
delimiter
inside_points.append(point)
delimiter
print(line)
delimiter
self.x -= 1
delimiter
d = datetime.datetime.fromtimestamp(posix_now)
delimiter
cir.draw()
delimiter
print(field)
delimiter
start = datetime.datetime(2009, 2, 10, 14, 0)
delimiter
self.type = type
delimiter
z = np.random.random(10)
delimiter
NAMES.append(name)
delimiter
thread.stop()
delimiter
words = line.split()
delimiter
opt2 = tf.train.GradientDescentOptimizer(0.0001)
delimiter
x = np.arange(12).reshape(2, 6)
delimiter
[e] = S
delimiter
thread = threading.Thread(target=read_from_port, args=(serial_port,))
delimiter
full_path = os.path.join(root, fname)
delimiter
plt.plot(xi, yi)
delimiter
result[key] = [item for item in group]
delimiter
cur.execute(sql)
delimiter
func(*args)
delimiter
y = np.ma.masked_where(x == 0, x)
delimiter
egg2(*argList)
delimiter
foo.foo()
delimiter
inp.setchannels(1)
delimiter
a = np.arange(4)
delimiter
resonator.default
delimiter
print(sp.coo_matrix(m.where(m.notnull(), 0)))
delimiter
471
delimiter
n = datetime.now()
delimiter
any(filter(someDict.__contains__, someList))
delimiter
v = -np.cos(np.pi * x) * np.sin(np.pi * y) * np.cos(np.pi * z)
delimiter
plugin.do_work()
delimiter
sys.settrace(globaltrace)
delimiter
p = multiprocessing.Pool(np)
delimiter
_change = models.IntegerField(default=0)
delimiter
curPG.execute(sqlCmd)
delimiter
animal_proxy.make_noise()
delimiter
d.addCallbacks(callback, errback)
delimiter
regex.sub(lambda match: conv[match.group()], text)
delimiter
stdscr.clear()
delimiter
loop.run_until_complete(task)
delimiter
c = Counter(list1)
delimiter
pickle.dump(data, outfile, pickle.HIGHEST_PROTOCOL)
delimiter
multiprocessing.cpu_count()
delimiter
pkg_resources.require(requirement)
delimiter
s.listen(1)
delimiter
context.enter_context(session)
delimiter
r = [x.sum() for x in y2d]
delimiter
print((x, y))
delimiter
numpy.__version__
delimiter
ofh.seek(0)
delimiter
util.run_wsgi_app(application)
delimiter
logger = logging.getLogger()
delimiter
print((test.a, test.b))
delimiter
end = time.clock()
delimiter
globals.update(frame.f_globals)
delimiter
self.stop()
delimiter
hm.HookMouse()
delimiter
name = forms.CharField(max_length=100)
delimiter
print(next(c))
delimiter
form.fileName.file.save(PATH + myFile)
delimiter
x = [0.2, 0.2, 0.8]
delimiter
[1, 1, 1, 1, 1],
delimiter
clf = RandomForestClassifier(n_jobs=-1, random_state=42, oob_score=False)
delimiter
f(*args, **kwargs)
delimiter
writer = csv.writer(f, dialect=SomeDialect)
delimiter
environment[k].update(v)
delimiter
zip_longest(*(islice(l, i) for i in range(n)))
delimiter
inner_sum += dk * f_big(A, k, 1e-05, 1e-05)
delimiter
mylist1 = [i.strip() for i in mylist]
delimiter
dest = bytearray(10)
delimiter
X = vectorizer.fit_transform(lectures)
delimiter
txt_frm.grid_propagate(False)
delimiter
install.run(self)
delimiter
self.request.close()
delimiter
print(thefile.cleaned_input())
delimiter
print(name_or_id)
delimiter
io.clear()
delimiter
print(sess.run(correct_prediction, feed_dict={x: test_images, y_: test_labels}))
delimiter
matches = matches.reshape((rows, cols, cols))
delimiter
d.append(val)
delimiter
my_array = rand(int(50000000.0), 1)
delimiter
dis.dis(foo)
delimiter
soup = BeautifulSoup(s)
delimiter
nli.get_item()
delimiter
weights = np.array([16, 4, 2])
delimiter
index = np.searchsorted(colkeys, keys, sorter=sorter)
delimiter
block(chr(2944))
delimiter
f.seek(-offset, os.SEEK_END)
delimiter
p = ss.expon.fit(data, floc=0)
delimiter
curs.close()
delimiter
print(s)
delimiter
sns.set(font_scale=0.8)
delimiter
out[product_name] = []
delimiter
country = models.CharField(max_length=150)
delimiter
print(inst.id)
delimiter
plt.figure(figsize=(10, 5))
delimiter
fig = plt.figure()
delimiter
fp.close()
delimiter
alembic.config.main(argv=alembicArgs)
delimiter
inspect.getsource(myfile)
delimiter
target_h, target_s, target_v = rgb_to_hsv(target_r, target_g, target_b)
delimiter
d = defaultdict(list)
delimiter
df1.div(df2squeeze())
delimiter
app.run(use_reloader=False)
delimiter
columns = [column.key for column in mapper.columns]
delimiter
painter.restore()
delimiter
new_rows = []
delimiter
result.insert(0, l)
delimiter
len(b)
delimiter
df = sc.parallelize(row(chr(x)) for x in range(97, 112)).toDF()
delimiter
a = test.Array()
delimiter
print(search_result.group())
delimiter
sock = socket.socket()
delimiter
reverse(x)
delimiter
scikits.audiolab.play(data, fs=44100)
delimiter
x[(0), :, :][:, ([0, 2])]
delimiter
data
delimiter
Y = R * np.sin(THETA) - 2
delimiter
objs.append(parse_obj())
delimiter
c = concatenate((a, b))
delimiter
product = models.CharField(max_length=150)
delimiter
print(newer_grammar.productions()[-1])
delimiter
builder = gtk.Builder()
delimiter
object.__getattribute__(self, x)
delimiter
data.shape = -1
delimiter
0
delimiter
curdict[item] = {}
delimiter
print(proc.pid)
delimiter
lockup
delimiter
crackdown
delimiter
result.append(option)
delimiter
plt.show()
delimiter
COMPRESS_ENABLED = True
delimiter
permutations_helper(elements, [0] * n, n - 1)
delimiter
chars = list(chain.from_iterable([list(set(word)) for word in l]))
delimiter
_f = dill.dumps(f)
delimiter
print(args.n)
delimiter
expr
delimiter
col_names = first_reps.columns.get_level_values(2)
delimiter
print(list(generate_digits_permutation()))
delimiter
print(mse(model_2_v1.predict(xg_test), y_test))
delimiter
ip = get_ip(request)
delimiter
[2, 2, 2]
delimiter
print(list_to_html(toc))
delimiter
temp.append(j)
delimiter
min_kmeans.fit(vectors)
delimiter
[]
delimiter
cookie2 = value2
delimiter
y - fitfunc(p, x)
delimiter
a[2][1] = a[2][1] + 5
delimiter
self.name = name
delimiter
False
delimiter
print(a.x, a.y)
delimiter
a.add_rule(phyrule)
delimiter
dates_dict = defaultdict(list)
delimiter
print(resp.read())
delimiter
pickle.dump(a, handle, protocol=pickle.HIGHEST_PROTOCOL)
delimiter
response
delimiter
g.writelines(ss + line for line in f)
delimiter
wrapper.__doc__ = func.__doc__
delimiter
print(match)
delimiter
a = matrix(n)
delimiter
print(True)
delimiter
set.seed(1)
delimiter
parser = argparse.ArgumentParser()
delimiter
arr = df1.values[:, :-2]
delimiter
all_subclasses.extend(get_all_subclasses(subclass))
delimiter
lang.terminology
delimiter
pprint(dict(year2students))
delimiter
x2 = np.random.normal(-15, 7, 100000)
delimiter
scr.exitonclick()
delimiter
d = {}
delimiter
a.insert(0, 1)
delimiter
pid = sys.argv[1]
delimiter
list_.append(lines[i + j][2])
delimiter
os.close(fd)
delimiter
diffs = array1 - array2
delimiter
p.cpu_times()
delimiter
kernel = np.zeros((2 * radius + 1, 2 * radius + 1))
delimiter
loop.run_until_complete(run(loop=loop))
delimiter
lista = [df.columns[:,].values.astype(str).tolist()] + df.values.tolist()
delimiter
restored = pickle.loads(pickled)
delimiter
x = sin(pi * t)
delimiter
Py_DECREF(keywords)
delimiter
out += ser.read(1)
delimiter
reducedQs = reducedQs.filter(participants__id=p.id)
delimiter
print(b.shape)
delimiter
my_date.setTime(time_t * 1000)
delimiter
self.errorcall(E, *args, **kwargs)
delimiter
a = [4, 5, 6]
delimiter
cv2.circle(img, center, radius, (0, 255, 0), 2)
delimiter
self.__dict__ = dict(module.__dict__)
delimiter
foo.something
delimiter
print(s, sense2freq[s])
delimiter
issubclass(p2, p1)
delimiter
ogl.CGLGetCurrentContext.restype = ctypes.c_void_p
delimiter
dt.replace(tzinfo=self)
delimiter
mydriver.get(baseurl)
delimiter
A.setdiag(b)
delimiter
pyplot.grid()
delimiter
repr(self.val)
delimiter
G.add_edges_from(edges)
delimiter
time_epoch = time.time()
delimiter
dict.__setitem__(self, key, value)
delimiter
gevent.sleep(0)
delimiter
mycursor = db.cursor()
delimiter
results = api.lookup_users(user_ids=page)
delimiter
plt.title(str(i))
delimiter
X.foo = 67
delimiter
num_array.append(int(n))
delimiter
self.figure = Figure()
delimiter
print(type(first_arg_unicode))
delimiter
l_x.append(len(s) - 1)
delimiter
infile.write(text)
delimiter
result = (x for x in l if f(x))
delimiter
values.append((frame, row, col, data[row, col, frame]))
delimiter
[1, 0, 0],
delimiter
a = np.random.randint(0, 5, size=(6, 4))
delimiter
mask
delimiter
myList = [gen_rand(item) for item in myList]
delimiter
True
delimiter
f(l)
delimiter
weights = np.array(initial_weights)
delimiter
arr = []
delimiter
main(sys.argv)
delimiter
out = np.empty((m, n, 2), dtype=int)
delimiter
toks_with_adjectives.extend(adjs)
delimiter
do_something_with(self._implementation())
delimiter
watcher.start()
delimiter
reader = csv.reader(f)
delimiter
np.add.at(grids, (idx[:, (0)], idx[:, (1)]), 1)
delimiter
print(len(stack))
delimiter
x = mu + sigma * np.random.randn(N)
delimiter
drawdown.plot(legend=True)
delimiter
tag = db.ReferenceProperty(Tag)
delimiter
first, rest = ks[0], ks[1:]
delimiter
self.c += 1
delimiter
dist_python_DATA = foo.py
delimiter
time = np.random.random(10)
delimiter
a = [0]
delimiter
data = {}
delimiter
files.sort(key=lambda x: os.path.getmtime(x))
delimiter
df
delimiter
in_file.seek(seek_offset, os.SEEK_END)
delimiter
type(test.f)
delimiter
df = df[::-1]
delimiter
x += 1
delimiter
R1 = numpy.linalg.cholesky(V1).transpose()
delimiter
user_lastName = db.Column(db.String(64))
delimiter
total = 0
delimiter
c4 = sum(1 for i in y if 0.9 < i <= 1.8) / 10000.0
delimiter
swig_wrapper.py_copy(img, mem, length)
delimiter
vol.append(volume[start:end])
delimiter
wrapper
delimiter
client.load_system_host_keys()
delimiter
parent.append(self)
delimiter
new_grammar._productions.append(singapore_production)
delimiter
gobject.timeout_add(60 * 1000, my_timer)
delimiter
x, y if x <= y else y, x
delimiter
tornado.web.Application.__init__(self, handlers, **settings)
delimiter
deleteoutlook, msg
delimiter
text = open(path).read()
delimiter
window.add(box)
delimiter
new_values.append(value)
delimiter
leftfile2rightfile2
delimiter
user = myuser
delimiter
print(is_int(x_))
delimiter
lastname = Column(String(50))
delimiter
name = person.key().name()
delimiter
b = int(round(time.time() * 1000))
delimiter
print(b)
delimiter
setattr(namespace, self.dest, list)
delimiter
manager = multiprocessing.Manager()
delimiter
statinfo.st_size
delimiter
loop.close()
delimiter
self.output = QtGui.QTextEdit()
delimiter
register = template.Library()
delimiter
manager.operations.util.build_filter = brcd_build_filter
delimiter
s = list(range(10))
delimiter
b = numpy.random.randint(0, 10, 10) * 1.0
delimiter
list(range(item.start, item.stop))
delimiter
demo[0][0] = 1
delimiter
inst.__dict__[self.attr]
delimiter
1 << 8
delimiter
o1 = np.lexsort(arr1.T)
delimiter
x = scipy.arange(size)
delimiter
loop.stop()
delimiter
Customer.objects.create(**validated_data)
delimiter
self.loop.stop()
delimiter
strings = [str(i) for i in range(10)]
delimiter
piece_hash = hashlib.sha1(piece).digest()
delimiter
print(mytuple[2])
delimiter
print(i)
delimiter
b.join()
delimiter
do_two()
delimiter
t += 1
delimiter
_recursivePop(tree, nodes[1:])
delimiter
duplicate_shaders_dict
delimiter
f = itemgetter(0)
delimiter
c.pop(0)
delimiter
self.value = min(self._max, max(value, self._min))
delimiter
writer = csv.writer(buffer)
delimiter
l1.append((result1, result2))
delimiter
a = 4
delimiter
x, y = 1, 2
delimiter
print(id(object()))
delimiter
value
delimiter
print(bilinterp(22000, 2))
delimiter
test = models.ForeignKey(Test)
delimiter
inbuf = DblTriplet(60.1, 20.2, 0.5)
delimiter
values = self.request.get_all(argument)
delimiter
strio.write(buffer.data())
delimiter
df[df.T.convert_objects().dtypes != object]
delimiter
dcObj.DeleteDC()
delimiter
res2 = np.sum(a * b, axis=1)
delimiter
fig, ax = plt.subplots()
delimiter
c = np.random.randint(cols, size=100)
delimiter
context.push()
delimiter
[item.serialize for item in self.many2many]
delimiter
customer_number = models.IntegerField(default=1)
delimiter
print(json.dumps(obj, cls=MyEncoder))
delimiter
print(x)
delimiter
df.AVG_MINUTES = list(map(list, zip(df.HOUR, df.AVG_MINUTES)))
delimiter
self.write(str(i))
delimiter
np.exp(-x ** 2)
delimiter
sh.setFormatter(formatter)
delimiter
plt.scatter(xx, yy)
delimiter
getattr(self, self.map[cb])()
delimiter
app = Flask(__name__)
delimiter
d = defaultdict(list)
delimiter
l.insert(0, x)
delimiter
a = np.array([[2, 4], [1, 2]])
delimiter
print(n_neighbor(G, 1))
delimiter
outputs.append(s)
delimiter
print(sm2.getName())
delimiter
args = parse.parse_args()
delimiter
dst[0] = tmp
delimiter
myzipfile = zipfile.ZipFile(zipdata)
delimiter
curl.perform()
delimiter
assert isclose(a, b, abs_tol=10 ** -n)
delimiter
indices = numpy.indices(shape)[axis]
delimiter
unpickler = Unpickler(file)
delimiter
found = re.findall(patbase % x, ss, re.DOTALL)
delimiter
self.validate(parser, value)
delimiter
rs.get()
delimiter
idx = df.index.str[0]
delimiter
atexit.register(exit_handler)
delimiter
out.write(line)
delimiter
data = np.array(data)
delimiter
A[np.isnan(A)] = np.interp(x, xp, fp)
delimiter
d = [c.isdigit() for c in r]
delimiter
reverse.py
delimiter
print(repr(decoded))
delimiter
answer2 = func(remaining_map2)
delimiter
answer1A = func(remaining_map1)
delimiter
groups = [df.customer, df.invoice_nr, df.date, df.amount.abs()]
delimiter
self.functor = functor
delimiter
queue.add(my_func, False, somearg, somekwarg=someval)
delimiter
self.editname = wx.TextCtrl(self.panel, size=(140, -1))
delimiter
self.request.send(data)
delimiter
median = partial(quantile, p=0.5)
delimiter
self.__dict__ = dict
delimiter
1 + max(depth(exp[0]), depth(exp[1:]))
delimiter
PP.pprint(x, width=len(x))
delimiter
np.random.seed(101)
delimiter
Response(status=status.HTTP_205_RESET_CONTENT)
delimiter
t.join()
delimiter
print(df)
delimiter
b.shape
delimiter
self.current = range_list[0]
delimiter
f.flush()
delimiter
my_data[my_data == 0.0] = numpy.nan
delimiter
l.remove(l)
delimiter
self.lst.append(x)
delimiter
input = raw_input
delimiter
sqs = SearchQuerySet().filter(content=q_clean)
delimiter
auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
delimiter
match = p.search(s)
delimiter
y2fr = min(y2, inarr.shape[1])
delimiter
train_labels = np.array([labels.index(x) for x in train_labels])
delimiter
n
delimiter
count += 1
delimiter
[(i, 100, 1000), (i, 100, 1001), (i, 100, 1002), (i + 1, 101, 1001)]
delimiter
self.fnames.append(name)
delimiter
loaded_mm.close()
delimiter
Point(0, 1).wkt
delimiter
Ybase = medfilt(Y, 51)
delimiter
map(lambda x: 1 if x else 0, testList)
delimiter
a_frame.pack()
delimiter
paw_number = np.arange(len(paw_coords))
delimiter
print(hpattern % tuple(headers))
delimiter
print(mystring)
delimiter
B = scipy.delete(B, 2, 0)
delimiter
self.console.configure(state=tk.DISABLED)
delimiter
type(a)
delimiter
print(f.upper().newMethod().lower())
delimiter
a = a.astype(float)
delimiter
pix[x, y] = value
delimiter
k = np.asarray(keys)
delimiter
s = im.tostring()
delimiter
imageLarger = cv2.pyrUp(image)
delimiter
string2 = unique_words(string1)
delimiter
x = scipy.linspace(0, pi, 100)
delimiter
self.camera.input_queue.put(self.idle_data_buffers.pop())
delimiter
setattr(self, special_attr, value)
delimiter
image = pyexiv2.Image(file_path)
delimiter
result[0, 0, 0, 0, 1]
delimiter
list(grps(l, 4, 2))
delimiter
angle = 0.5 * np.arctan(2 * u11 / (u20 - u02))
delimiter
starts = np.where(d == 1)[0]
delimiter
self._meta.db_table
delimiter
data = file.read()
delimiter
q = Queue.Queue()
delimiter
ignore[np.ma.minimum(y11, y12) > np.ma.maximum(y21, y22)] = True
delimiter
dd[v].add(k)
delimiter
hops
delimiter
cout
delimiter
ctx.move_to(0, 0)
delimiter
assert resp.status == 200
delimiter
unittest.TextTestRunner().run(suite)
delimiter
root = Tk()
delimiter
assert fx1
delimiter
demo(1)
delimiter
retcode = proc.poll()
delimiter
t = np.linspace(0, 2 * np.pi, 20)
delimiter
dfi = dfi.set_index(my_column)
delimiter
results = defaultdict(lambda : defaultdict(dict))
delimiter
new_file.save()
delimiter
time.sleep(1)
delimiter
instance = BillboardTracker.objects.get(id=some_id)
delimiter
find([])
delimiter
DEBUG_PROPAGATE_EXCEPTIONS = True
delimiter
rank = tf.rank(x)
delimiter
f.seek(8, 1)
delimiter
my_list
delimiter
raise StopIteration
delimiter
sleep(0.1)
delimiter
False
delimiter
content = sock.read()
delimiter
d.setdefault(k, [k]).append(v)
delimiter
formatted(10000000000)
delimiter
list_of_bools = [True, True, True, False]
delimiter
print(Bar.get_counter())
delimiter
JM1, JM2
delimiter
f(4)
delimiter
self.parent().viewport().mapFromGlobal(QCursor.pos())
delimiter
self.done = True
delimiter
root = Tk()
delimiter
test(1, 2)
delimiter
seen = set()
delimiter
next(reader2)
delimiter
buckets = sorted(buckets, key=get_index)
delimiter
input_str_lower = input_str.lower()
delimiter
set(d.items()) - set(d2.items())
delimiter
self.xaxis.set_zorder(0.5)
delimiter
func.value
delimiter
mock = patcher.start()
delimiter
browser = mechanize.Browser()
delimiter
[comment.extract() for comment in comments]
delimiter
result = numpy.sin(a)
delimiter
repr(fs2)
delimiter
C = [6, 8, 7, 9, 6]
delimiter
lambda *a, **kw: self.command(attr, *a, **kw)
delimiter
user = client_form.save()
delimiter
Ti.UI.setMenu(menu)
delimiter
ax1 = fig.add_subplot(111)
delimiter
f.free_symbols
delimiter
print(nltk.sem.relextract.rtuple(rel))
delimiter
print(i.name, i.pid)
delimiter
repr(obj)
delimiter
seq = itertools.takewhile(lambda x: x < MAXNUM, itertools.count(2))
delimiter
r[np.all(r == 0, axis=1)]
delimiter
fk = models.ForeignKey(ModelB)
delimiter
df
delimiter
user1.friends[0].added_by
delimiter
qp.waitForFinished()
delimiter
args = parser.parse_args()
delimiter
serversocket.close()
delimiter
traceback.print_stack(sys.stderr)
delimiter
response
delimiter
autorestart = true
delimiter
feedback = form.save(commit=False)
delimiter
sys.excepthook(*sys.exc_info())
delimiter
out.append(word)
delimiter
df
delimiter
Surface.fill((255, 255, 255))
delimiter
c = db.cursor()
delimiter
max(set.intersection(*matches), key=len)
delimiter
py.test.cmdline.main(args)
delimiter
fig.clf()
delimiter
app = Flask(__name__)
delimiter
chr(65)
delimiter
data = f.read(8192)
delimiter
1 - 10 < 0
delimiter
frame = cv2.flip(frame, 180)
delimiter
self.list[i]
delimiter
print(df1)
delimiter
parsed_message = json.loads(message)
delimiter
self.pt_plot.set_xdata(x)
delimiter
logging.captureWarnings(True)
delimiter
x = np.arange(start=0, stop=5, step=0.1)
delimiter
leaf[lst[-2]] = lst[-1]
delimiter
first, last = [], []
delimiter
user_ids.append(user_id)
delimiter
neighbors = [e for e in neighbors if e not in visited_nodes]
delimiter
self.assertResultEqual(expected, s)
delimiter
img = cStringIO.StringIO(fp.read())
delimiter
data = json.loads(data)
delimiter
[MYSERVER]
delimiter
html = response.read()
delimiter
increments = [0] * len(a)
delimiter
X ** 2 + Y ** 2 + Z ** 2 < radius ** 2
delimiter
item_dict[sample[0]]
delimiter
s = sum(ind[:i - 1])
delimiter
form = ItemForm(request.POST)
delimiter
a = np.random.random((10, 10, 10, 10, 10, 10, 10))
delimiter
print(my_tz.normalize(my_tz.localize(dt + delta)))
delimiter
columnsums = numpy.sum(points, 0)
delimiter
mouse_tooltip.show()
delimiter
[ascends.pop() for _ in range(idx)]
delimiter
{1} in x
delimiter
signal.siginterrupt(signal.SIGHUP, False)
delimiter
df.sum()
delimiter
self.pipewritestreams = []
delimiter
rec.levelno in (logging.DEBUG, logging.INFO)
delimiter
[1]
delimiter
register = template.Library()
delimiter
STOCK_ORIENTATION_REVERSE_PORTRAIT
delimiter
np.nan != np.nan
delimiter
self.right = []
delimiter
db.session.add(user1_from_factory)
delimiter
joystick = pygame.joystick.Joystick(i)
delimiter
idx = np.argmax(a[i])
delimiter
self.received_cookies.get(key)
delimiter
s[:amount]
delimiter
root = tkinter.Tk()
delimiter
[a, b - a, c - b, 40 - c]
delimiter
text2 = open(file2).read()
delimiter
y = deepcopy(x)
delimiter
print(isinstance(b, A))
delimiter
glClearColor(0, 0, 0, 0)
delimiter
a[::-1][200] = 6
delimiter
self.view.teasers = self.prepare_teasers()
delimiter
self.dg.DataContext = self
delimiter
CENTROIDS = np.array([0, 10, 50])
delimiter
b = np.random.random((2, 5))
delimiter
list_1_sorted = [e[1] for e in s]
delimiter
f(x, A)
delimiter
msg, address = s.recvfrom(1024)
delimiter
data = numpy.zeros((x, y))
delimiter
s = str(d)
delimiter
xlbls = ax.get_xmajorticklabels()
delimiter
data = list(range(1, 11))
delimiter
happy(vs.unhappy)
delimiter
y = 500 + r * math.sin(theta)
delimiter
best = [1.0] + [0.0] * n
delimiter
m = sorted(l)
delimiter
plt.waitforbuttonpress(0)
delimiter
list((found - expected).elements())
delimiter
sdict
delimiter
f.close()
delimiter
mime = mimetypes.guess_type(file)
delimiter
g.write(q)
delimiter
letter_set = frozenset(string.ascii_lowercase + string.ascii_uppercase)
delimiter
(list(range(5))[5:6] + [999])[0]
delimiter
n11, n10, n01, n00
delimiter
b(2, 5)
delimiter
c2 = pickle.loads(pickle.dumps(c))
delimiter
address = StringField()
delimiter
names = []
delimiter
d[word] += 1
delimiter
receive_newsletter = forms.BooleanField()
delimiter
HttpResponseNotAllowed(list(table.keys()))
delimiter
assert True
delimiter
list2 = [(i, i * 2, i) for i in list1]
delimiter
bus = dbus.SessionBus()
delimiter
cgi.escape(site_title), cgi.escape(URL)
delimiter
label.mainloop()
delimiter
w.update()
delimiter
print(md.myfx(arg1))
delimiter
collections.Counter(l)
delimiter
mpl.show()
delimiter
result
delimiter
dt_aware = pytz.utc.localize(dt_naive)
delimiter
i = bisect.bisect_right(intvals, x)
delimiter
_byhour = False
delimiter
s = s[:20]
delimiter
a = random.randint(0, 20)
delimiter
nosetests - -exe
delimiter
df2 = s2.reset_index()
delimiter
q.set_message_class(RawMessage)
delimiter
args = parser.parse_args()
delimiter
Yhat = np.dot(X, bhat)
delimiter
flist.append(partial(func, i))
delimiter
b = []
delimiter
data[name(row)].append(row)
delimiter
df
delimiter
internet_set_option(0, self.INTERNET_OPTION_SETTINGS_CHANGED, 0, 0)
delimiter
lst = [x, y, numberofcolumns, numberofrows]
delimiter
self._file.close()
delimiter
dict([(k, v) for k, v in list(self.items()) if fnmatch(k, match)])
delimiter
y = sin(x * 2) + sin(x + 1)
delimiter
print(list(od.values()))
delimiter
mu, sigma = stats.norm.fit(np.log(x))
delimiter
mpu.upload_part_from_file(stream, partCount[0])
delimiter
rop = str(self.rop)
delimiter
print(s)
delimiter
print(row)
delimiter
ax = fig.add_subplot(222)
delimiter
display(bg_img)
delimiter
FG().f()
delimiter
myfile = get_file(path)
delimiter
series1 = df.iloc[(0), :]
delimiter
a,
delimiter
hdf.close()
delimiter
resmatrix = [[newresnums[i], resindices[i]] for i in range(len(newresnums))]
delimiter
txet
delimiter
sigmoid(W * (x1 + x2) + B)
delimiter
r = NumericProperty(0)
delimiter
l = l.split()
delimiter
nodes_nummpy_array[:, (2)]
delimiter
sys.float_info
delimiter
wn.wup_similarity(dog, car)
delimiter
print(columns[0])
delimiter
a = int(sys.argv[1])
delimiter
sub_lst = [i for i in lst if isinstance(i, str)]
delimiter
print(i)
delimiter
len(list(range(max(x[0], y[0]), min(x[-1], y[-1]) + 1))) > 0
delimiter
DEFAULT_DATE = datetime.datetime(datetime.MINYEAR, 1, 1)
delimiter
xslt_doc = ET.parse(io.BytesIO(xslt))
delimiter
points = np.linspace(x.min(), x.max(), N)
delimiter
classmethod(bar).__get__(foo)()
delimiter
A = [np.random.random((5, 5)) for i in range(4)]
delimiter
old_text = entry.get_text()
delimiter
root = tk.Tk()
delimiter
print(repr(a))
delimiter
print(df)
delimiter
l = list(range(1, 10))
delimiter
name = cls.__name__
delimiter
total += i
delimiter
lens = np.array(map(len, a))
delimiter
print(sql)
delimiter
temp.append(v)
delimiter
items = ((x,) for x in sorted(ps, reverse=True))
delimiter
a = numpy.arange(5)
delimiter
self.updates.add(obj)
delimiter
json.loads(self.data)
delimiter
pprint(dict(busbar._asdict()))
delimiter
self.apply_async(func, args, kwds).get()
delimiter
dt = datetime.datetime.combine(d, t)
delimiter
[1, 2]
delimiter
the_dict[b.pop(0)] = b.pop(0)
delimiter
g1 = ((i, i + 1) for i in range(len(list1) - 1))
delimiter
[k]
delimiter
ser = serial.Serial(0)
delimiter
stream.map(model.MyClassifier.do_something).pprint()
delimiter
check_for_use(True)
delimiter
csv_reader = csv.reader(utf8_data, dialect=dialect, **kwargs)
delimiter
s.close()
delimiter
assert testlength == 1 or testlength == 2
delimiter
ranges.append(group[0])
delimiter
pyplot.axis(ex2)
delimiter
deleteself.__dict__[name]
delimiter
df.join(cs)
delimiter
self.__dict__.update(kw)
delimiter
setattr(cls._meta.get_field(field), prop, val)
delimiter
axes = all_data[ASK_PRICE].plot(figsize=(16, 12))
delimiter
escapesequence = matchobj.group(0)
delimiter
print(buffer(s, i, j - i))
delimiter
A = np.zeros(p)
delimiter
i = len(string) - 1
delimiter
start = time.clock()
delimiter
error()
delimiter
m = A.mean(axis=1)
delimiter
pp(expr)
delimiter
pandas.concat(ret_list)
delimiter
install_python_dependencies
delimiter
app = QApplication([])
delimiter
self.session_store.save_sessions(self.response)
delimiter
df
delimiter
self.clients.remove(client)
delimiter
studentname = name
delimiter
random.random()
delimiter
A = [[1, 0, 1, 1], [0, 1, 1, 0], [0, 1, 0, 1]]
delimiter
print(repr(0.1))
delimiter
user = models.ForeignKey(User)
delimiter
self.inner_sizer = wx.BoxSizer(wx.HORIZONTAL)
delimiter
self.cells.append(Cell(self, i))
delimiter
a = np.array([2, 4, 6, 8])
delimiter
numloss
delimiter
df8 = df.ix[:, 84:96]
delimiter
x1, y1, z1, w1 = np.rollaxis(quaternion1, -1, 0)
delimiter
wx.App()
delimiter
x.add(j)
delimiter
[0.5, -1.0, 0.5, 0.0],
delimiter
A = np.zeros((2 * (n - 1), 2 * (n - 1)))
delimiter
req
delimiter
print(data)
delimiter
x == y
delimiter
someday = datetime.date(2008, 12, 25)
delimiter
addChild(image2)
delimiter
S = np.cumsum(c[1:] ** 2)
delimiter
x += y
delimiter
print(self.foo)
delimiter
hande_file(file)
delimiter
changed = [(k, v) for k, v in list(self.byName.items()) if id(person) == id(v)]
delimiter
df
delimiter
plt.show()
delimiter
l = [(0) for i in range(n)]
delimiter
fig, ax = plt.subplots()
delimiter
x = mu + sigma * np.random.randn(10000)
delimiter
print(new_text)
delimiter
parts.append(path)
delimiter
departments = Department.objects.all()
delimiter
self.p.stdin.write(image.tostring())
delimiter
print(normalized(A, 1))
delimiter
p1out, p1err = p1.communicate()
delimiter
sys.stdout.flush()
delimiter
Gtk.main()
delimiter
f.write(t)
delimiter
x = T.dmatrix()
delimiter
serializer = MyPhotoSerializer(data=request.data)
delimiter
self.items
delimiter
mpl.ticker.ScalarFormatter.__call__(self, value, pos)
delimiter
grammar.load()
delimiter
data = fh.read()
delimiter
msg = MIMEText(content, text_subtype)
delimiter
self.wfile.close()
delimiter
time.sleep(1)
delimiter
ei = sys.exc_info()
delimiter
ip
delimiter
19921.8126944154,
delimiter
flush_transaction()
delimiter
my_record = MyModel.objects.get(id=XXX)
delimiter
destination.write(chunk)
delimiter
Base.metadata.create_all(engine)
delimiter
name = models.CharField(max_length=80)
delimiter
tmr.stop()
delimiter
setattr_func(self, attr, value)
delimiter
image = Image.open(path)
delimiter
len(ln) - list(reversed(ln)).index(1) - 1
delimiter
type(parsed_tree)
delimiter
v = np.array([10.0, 11, np.nan])
delimiter
args = parser.parse_args()
delimiter
pp.savefig(plot2)
delimiter
mlab.axes()
delimiter
f.write(source)
delimiter
pa - p0, pb - p0, pc - p0
delimiter
fs1, y1 = scipy.io.wavfile.read(filename)
delimiter
a = Question.objects.create()
delimiter
print(fcst_serie)
delimiter
a = np.array(a)
delimiter
transmission_array = []
delimiter
self._format(object, self._stream, 0, 0, {}, 0)
delimiter
type = models.ForeignKey(ContentType, editable=False)
delimiter
driver.switchTo().window(curWindow)
delimiter
command = os.path.normpath(command)
delimiter
ax = plt.subplot(111)
delimiter
f.write(text)
delimiter
type(self)(self + val)
delimiter
x = np.zeros((200, 2000), float)
delimiter
type(obj) in (type, type)
delimiter
listening_sockets.append(listening_socket)
delimiter
response
delimiter
b = tf.Variable(tf.zeros([1]))
delimiter
angle = 2 * math.pi / s
delimiter
mylist = [a, b, c]
delimiter
os.nonexisting()
delimiter
print(h.getresponse().read())
delimiter
picture.pictureClicked.connect(self.anotherSlot)
delimiter
display(self.fig)
delimiter
instance = object.__new__(cls, *args, **kwargs)
delimiter
data = urllib.request.urlopen(url).read()
delimiter
self.lines.append(self.addLine(0, yc, width, yc, pen))
delimiter
client.load_system_host_keys()
delimiter
idx = np.random.randint(0, 10, (yt, xt))
delimiter
print(hash(foo))
delimiter
inc2 = functools.partial(add, 2)
delimiter
f = urllib.request.urlopen(req)
delimiter
chainCalling(funcs[0](arg), funcs[1:])
delimiter
lock.acquire()
delimiter
residuals(p_guess, x, y)
delimiter
packetcount = packetcount + 1
delimiter
dict((k, sorted(v)) for k, v in list(result.items()))
delimiter
main()
delimiter
data = {}
delimiter
lock.acquire()
delimiter
print((MyEnum.a, MyEnum.b))
delimiter
test()
delimiter
formatqn.allow_tags = True
delimiter
a.append(x)
delimiter
admin.site.unregister(User)
delimiter
y = x ^ 1 << j - 1
delimiter
sys.stderr.write(message % self.pidfile)
delimiter
get_model(app_label, model_name, seed_cache=False).objects.count()
delimiter
self._odict.__repr__()
delimiter
lrx, lry = latlontopixels(lrlat, lrlon, zoom)
delimiter
session = cluster.connect()
delimiter
total = total + int(n)
delimiter
True
delimiter
autovivify = lambda : defaultdict(autovivify)
delimiter
insert_many(l)
delimiter
df
delimiter
grid = mlab.pipeline.scalar_field(xi, yi, zi, density)
delimiter
m = mmap.mmap(fh.fileno(), 0, access=mmap.ACCESS_READ)
delimiter
os.remove(sockfile)
delimiter
created = db.Column(db.DateTime)
delimiter
print(text)
delimiter
content = f.read()
delimiter
result = ws.recv()
delimiter
exit_codes = [p.wait() for p in (p1, p2)]
delimiter
self.request_roster()
delimiter
self.itemChanged.connect(self.changeBG)
delimiter
btree_container.setdefault(Gnodes, []).append([Hnodes, score, -1])
delimiter
delattr(self, name)
delimiter
matcher = re.compile(myExpression, re.IGNORECASE)
delimiter
s += element.tail
delimiter
x1, y1 = np.random.random((2, 10))
delimiter
rng = arr.max() - arr.min()
delimiter
combined = list(zip(a, b))
delimiter
David
delimiter
alnPDBseq = aln[0]
delimiter
s += a
delimiter
df
delimiter
print(x)
delimiter
plt.show()
delimiter
rospy.spin()
delimiter
self.spider = MySpider()
delimiter
value = int(eval(input(prompt)))
delimiter
lock.release()
delimiter
words = s.split()
delimiter
fig = plt.figure()
delimiter
f
delimiter
2 == True
delimiter
api = tweepy.API(auth)
delimiter
a = i & 1
delimiter
print(result)
delimiter
results.append(row)
delimiter
df = pd.read_sql_query(sql, con)
delimiter
uple1[1][0]
delimiter
deletesys.argv[1]
delimiter
skip = int(1.0 * total / surplus + 0.5)
delimiter
s.bind((HOST, 0))
delimiter
ax.fill_between(x, low, high, alpha=0.2, color=palette.pop(0))
delimiter
f = io.StringIO()
delimiter
print(i + ++i)
delimiter
a = asarray(a)
delimiter
updated_on = models.DateTimeField()
delimiter
x(r)
delimiter
fig, ax = plt.subplots()
delimiter
partslist = good_histograms(nballs, nboxes, minballs, maxballs)
delimiter
columns = zip(*original_rows)
delimiter
print(ceil(lgamma(100000 + 1) / log(10)))
delimiter
root.clear()
delimiter
nosetest
delimiter
cache[args] = obj(*args, **kwargs)
delimiter
dmesg = dmesgProcess.communicate()[0]
delimiter
mat[list(range(n)), list(range(n))] = list(range(n))
delimiter
rounding_swig / testrounding.py
delimiter
data = conn.recv(1024)
delimiter
ax1.plot(yp, np.linspace(0, len(yp), len(yp)))
delimiter
r, g, b = im.split()
delimiter
map = dict(list(token.tok_name.items()) + list(symbol.sym_name.items()))
delimiter
datetime.datetime(**values), tz
delimiter
print(i)
delimiter
i.start()
delimiter
inmap(lambda x: x ** 2, a)
delimiter
all(any(c == ch for c in it) for ch in x)
delimiter
result[element] = result.get(element, 0) + 1
delimiter
obj.isoformat()
delimiter
x = A
delimiter
self.window.setCentralWidget(QtGui.QTextEdit(self.window))
delimiter
sshcon = paramiko.SSHClient()
delimiter
gevent.spawn(self.counter_loop)
delimiter
db.init_app(app)
delimiter
x[i] = i
delimiter
out[0] = X[0] ** 2 - X[1] ** 2 + params[0] * X[0] + params[1] * X[1]
delimiter
temp = sorted(list_of_medals, key=itemgetter(0))
delimiter
print(cache.value.groups())
delimiter
distances = pdist(X, wminkowski, 2, [1, 1, 1, 10])
delimiter
mask = np.ones((rows,), dtype=np.bool)
delimiter
s2.difference(s1)
delimiter
self.process.terminate()
delimiter
x, y = arr.shape[0], arr.shape[1]
delimiter
1
delimiter
json.dumps(value)
delimiter
i += 1
delimiter
list(data.keys())
delimiter
app.run(ssl_context=context, **kwargs)
delimiter
lut = []
delimiter
print(re.sub(expr, replace_by, mystr2))
delimiter
print(myDict)
delimiter
w = numpy.random.random(ndims)
delimiter
top = random.randrange(0, y1)
delimiter
i += 1
delimiter
print(a)
delimiter
x = np.linspace(0, np.pi, nx)
delimiter
file.readinto(buff)
delimiter
kth_order_statistic2(r, k - len(l) - len(m))
delimiter
greeter.greet()
delimiter
self.start()
delimiter
r.clipboard_clear()
delimiter
data = np.sqrt((x - s / 2) ** 2 + (y - s / 2) ** 2 + (2 * z - s / 2) ** 2)
delimiter
age = FloatField()
delimiter
np.random.seed(1)
delimiter
new_list_1, new_list_2 = zip(*_zips)
delimiter
INVENV = 1
delimiter
result
delimiter
ps = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)
delimiter
conf.check_python_version((2, 4, 2))
delimiter
[[counter[feat] for feat in all_features] for counter in counters]
delimiter
caller = inspect.currentframe().f_back
delimiter
root = Tk()
delimiter
L = np.array([1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1])
delimiter
offset = time.clock()
delimiter
d = AtomicDict()
delimiter
AbortSavepoint(self, transaction.get())
delimiter
1, 4, 5, 6, 12
delimiter
t = np.arange(25, dtype=np.float64)
delimiter
df[0] = list(range(15))
delimiter
metadata = MetaData()
delimiter
bar1.__class__.num
delimiter
-dtrflow - mdmbuf
delimiter
A = np.asmatrix(np.arange(N)).T
delimiter
self.show()
delimiter
time.sleep(10)
delimiter
df.to_dict()
delimiter
ax = plt.subplot(111)
delimiter
q.set_callback(cb)
delimiter
pinot_noir
delimiter
help(ContextManager)
delimiter
args, extras = parser.parse_known_args()
delimiter
hsh.set_http_debuglevel(1)
delimiter
s.mode()[0]
delimiter
line.set_xdata(x1)
delimiter
self.x = x
delimiter
input_as_vector = tf.reshape(input, [-1])
delimiter
self
delimiter
Foo.bar()
delimiter
literal_eval(i)
delimiter
Serial.println()
delimiter
g = df.groupby(lambda x: x / 60)
delimiter
FORMAT = pyaudio.paInt16
delimiter
plt.xticks([]), plt.yticks([])
delimiter
self = int.__new__(cls, *args, **kwargs)
delimiter
clientSocket.send(subject.encode())
delimiter
L1_unique_values = set(L1) - unwanted
delimiter
myfilter.is_safe = True
delimiter
eval(input())
delimiter
print(get_ax_size(ax2))
delimiter
int(str(num)[::-1])
delimiter
self.timer = wx.Timer(self)
delimiter
query
delimiter
w = UICPS()
delimiter
quad(f, 0, 1, args=(T,))[0]
delimiter
time.sleep(i)
delimiter
raise MemoryError()
delimiter
print(e.args[0])
delimiter
(X - xmin) / (X.max(axis=0) - xmin)
delimiter
result = result.filter(or_(*_filters))
delimiter
self.server = Flask(__name__)
delimiter
object.__new__(cls)
delimiter
plt.subplot(212)
delimiter
[account2]
delimiter
im_hsv = cv2.dilate(im_hsv, element)
delimiter
site = request.context
delimiter
ignore_list.append(file)
delimiter
isinstance(other, cls)
delimiter
json.dump(self.object, file)
delimiter
cb()
delimiter
self._value
delimiter
self.data[item]
delimiter
print(item)
delimiter
string = repr(lst)
delimiter
lst = anything
delimiter
idx = np.zeros(len(m), dtype=np.int)
delimiter
A.func = classmethod(func)
delimiter
logger = logging.getLogger()
delimiter
obj.timestamp = current_time()
delimiter
r = s.get(URL)
delimiter
writer.save()
delimiter
logger.addHandler(sh)
delimiter
sm.ReadConfig(Filename=sys.argv[1])
delimiter
self._c.public()
delimiter
renL.AddActor(actor)
delimiter
thread = Thread(target=handler, args=(result,))
delimiter
print(a.text)
delimiter
cursor
delimiter
new_list = []
delimiter
assets = Environment(app)
delimiter
deque(enumerate(itertools.accumulate(x), 1), maxlen=1)
delimiter
pprint(mydict)
delimiter
y = random.choice([top, bottom])
delimiter
sys.settrace(tracefunc)
delimiter
evnt.ignore()
delimiter
bin8(6)
delimiter
self.fed.append(d)
delimiter
neighbors.remove(parent)
delimiter
2
delimiter
lst = []
delimiter
showpageno = True
delimiter
data = np.random.randint(1, 5, 20).reshape(10, 2)
delimiter
c[:] = a + b
delimiter
time.sleep(5)
delimiter
print(df)
delimiter
df
delimiter
date_ceased_to_act = models.DateField(blank=True, null=True)
delimiter
1, 0, 1
delimiter
conn.read()
delimiter
loss = tf.reduce_mean(tf.square(y_ - y))
delimiter
axs[0].xaxis.set_minor_locator(x_minor_lct)
delimiter
b = np.array([9, 8])
delimiter
QCoreApplication.processEvents()
delimiter
raise ValueError
delimiter
cursor = connection.cursor()
delimiter
self.yaxis.set_zorder(0.5)
delimiter
s.sort()
delimiter
L.reverse()
delimiter
chunk = bytes_to_int(f.read(2))
delimiter
last_name = models.CharField(max_length=40)
delimiter
ora_conn.close()
delimiter
sm = plt.cm.ScalarMappable(cmap=my_cmap, norm=plt.normalize(min=0, max=1))
delimiter
soup = bs(r.text)
delimiter
out_dict[row[0]] = float(row[1]), float(row[2])
delimiter
print(e)
delimiter
b = a.ravel().view(dt)
delimiter
any(elem in test for elem in string)
delimiter
print(types.IntType())
delimiter
print(circle.popleft())
delimiter
statv = os.statvfs(rootfolder)
delimiter
s = sub.stdout.readline()
delimiter
PyObject * a
delimiter
temp = tempfile.NamedTemporaryFile(delete=False)
delimiter
cls.x
delimiter
root = tk.Tk()
delimiter
menu = QtGui.QMenu()
delimiter
True
delimiter
out = np.concatenate(np.take(a, uind))
delimiter
print(i.leaves()[-1])
delimiter
Msg.Attachments.Add(attachment2)
delimiter
omega = det(dstack([a, b, c]))
delimiter
x += a
delimiter
signal.alarm(timeout)
delimiter
pd.options.display.max_colwidth = 100
delimiter
result = []
delimiter
sys.getrefcount(i)
delimiter
firefox_profile = webdriver.FirefoxProfile()
delimiter
indices = scores.argmax(axis=1)
delimiter
neighbours.remove((i, j))
delimiter
g * u + h * v + i * w + g * x + h * y + i * z
delimiter
s = m.group()
delimiter
np.sum(na, axis=0)
delimiter
next((start, end) for start, end in regions if start < x < end)
delimiter
len(context.products) == length
delimiter
index += 1
delimiter
full_path = os.path.join(dirname, fname)
delimiter
x += 1
delimiter
itertools.permutations(stuff, 4)
delimiter
buffer.append(duo)
delimiter
ax.add_artist(ab)
delimiter
func_new(a)
delimiter
divide(2, 7, 70, True)
delimiter
X, y = datasets.make_circles(n_samples=200, factor=0.5, noise=0.05)
delimiter
c = Constants()
delimiter
df.power200c[7]
delimiter
tempFileObj.seek(0, 0)
delimiter
source[PATH_TO_YOUR_ENVIRONMENT] / bin / activate
delimiter
Decimal(1).exp()
delimiter
len(self.data)
delimiter
cur = conn.cursor()
delimiter
x = np.random.rand(N)
delimiter
result += text.upper()
delimiter
pyfiles
delimiter
founds = []
delimiter
sys.stdout = sys.stderr
delimiter
a2 = np.array([[2, 2, 2], [2, 2, 2], [2, 2, 2]])
delimiter
print(word)
delimiter
collect()(0).getInt(0)
delimiter
print(next(test))
delimiter
self.indexdict = {}
delimiter
feet_entry.grid(column=2, row=1, sticky=(W, E))
delimiter
actualstdout = sys.stdout
delimiter
True
delimiter
fs = fluidsynth.Synth()
delimiter
result.append(s_copy[:index])
delimiter
self.values = []
delimiter
f.seek(random.randint(0, int(unc_size[0])))
delimiter
a[len(a) // 5 * 5:][1:4] = 100
delimiter
(4, [2, 2]),
delimiter
resp = make_response(f(*args, **kwargs))
delimiter
df = df[col_list]
delimiter
pool.apply_async(func=worker, args=(i,), callback=callback)
delimiter
self.then_client_receives_connection_refused_error()
delimiter
a.data /= np.repeat(norm_rows, nnz_per_row)
delimiter
result = f()
delimiter
filetered = any(i in line for i in black_list_2)
delimiter
ipy
delimiter
x * y
delimiter
1 / Fraction.from_float(2.54)
delimiter
p = Process(target=myfunc, args=(child_conn, commands))
delimiter
sess.put(url, data=xmlfile, headers=headers)
delimiter
x_test = np.random.normal(0, 1, [50, 10])
delimiter
output_list
delimiter
m.logout()
delimiter
l.sort()
delimiter
ts.tm_sec
delimiter
matching_solutions = []
delimiter
file.write(line1)
delimiter
data = self.cleaned_data
delimiter
self.stackVals.pop()
delimiter
self
delimiter
start = datetime.strptime(start_date, date_format)
delimiter
df.loc[(df.val1.shift(1) != df.val1) | (df.val2.shift(1) != df.val2)]
delimiter
myiter = iter(list(range(0, 10)))
delimiter
ret = df.loc[start:end]
delimiter
start_time = Column(Integer)
delimiter
[a0[start[i]:stop[i]] for i in range(len(start))]
delimiter
output_lambda = df.apply(ratio).to_dict()
delimiter
soup = bs(urlopen(url))
delimiter
n > 0 and n & -n == n
delimiter
target = np.array([-2, 100.0, 2.0, 2.4, 2.5, 2.6])
delimiter
i = arange(len(a)).repeat(a)
delimiter
plt.close(plt.gcf())
delimiter
s = string[0:i]
delimiter
pdf = file.read()
delimiter
worksheet = workbook.add_worksheet()
delimiter
ax = fig.add_subplot(111)
delimiter
vc = cv2.VideoCapture(0)
delimiter
{}
delimiter
A = zeros(D.shape)
delimiter
print(u.screen_name)
delimiter
stamp = os.stat(self.filename).st_mtime
delimiter
median = np.median(points, axis=0)
delimiter
ser = ser.sort_values()
delimiter
list(d.values())
delimiter
distance = np.sqrt((ix - center_x) ** 2 + (iy - center_y) ** 2)
delimiter
n * n
delimiter
data[slcs2][repmask] = data[slcs1][repmask]
delimiter
data[slcs1][repmask] = data[slcs2][repmask]
delimiter
start, stop = np.flatnonzero(x[:-1] != x[1:])
delimiter
dt = a.dtype
delimiter
reader = csv.reader(hosts)
delimiter
print(str(tab.render()))
delimiter
menu.append(menu_item)
delimiter
final.append(word if word in exceptions else word.capitalize())
delimiter
x = np.random.normal(i, 0.04, size=len(y))
delimiter
sys.stdout = sys.__stdout__
delimiter
users = group.user_set.all()
delimiter
t = np.linspace(0, len(x), M)
delimiter
ctx.text_extents(text)
delimiter
json.dumps(mydict, cls=DjangoJSONEncoder)
delimiter
D = sparse.csc_matrix(np.diff(np.eye(L), 2))
delimiter
x, y = 1, 1
delimiter
c = randint(0, 10)
delimiter
sys.exit(app.exec_())
delimiter
len(data)
delimiter
result += str[start:]
delimiter
logging.Formatter.__init__(self, msg)
delimiter
x = np.array([random() for x in range(100)])
delimiter
fs, data = wavfile.read(filename)
delimiter
candidates_indexes[index] += 1
delimiter
(2 << n - 1) - 1
delimiter
cls_attr = cls.__dict__
delimiter
rlist, wlist, xlist = select.select([p1.stdout, p2.stdout], [], [])
delimiter
add_timeout(deadline, callback)
delimiter
p.wedge(x=0, y=0, radius=1, start_angle=starts, end_angle=ends, color=colors)
delimiter
count.most_common()[0]
delimiter
model = Item
delimiter
print(out)
delimiter
self.clear()
delimiter
d.update(child.dictify())
delimiter
print(date)
delimiter
mod = sys.modules[module]
delimiter
lines = i.readlines()
delimiter
ans = [random.choice(c) for c in constraints]
delimiter
output_file.close()
delimiter
lcl = zzz()
delimiter
row = [item.decode(encoding) for item in row]
delimiter
self.parse_response(connection, command_name, **options)
delimiter
a = test(a)
delimiter
dtypedict.update({i: sqlalchemy.types.DateTime()})
delimiter
out.truncate(1024 * 1024 * 1024)
delimiter
v
delimiter
plt.xticks(ind, a)
delimiter
t.render(c)
delimiter
df
delimiter
a[index] = item + 1
delimiter
mats.append(sps.lil_matrix(np.array(df2)))
delimiter
matches.extend(filenames)
delimiter
y = list(range(100))
delimiter
pool = mp.Pool()
delimiter
output, unused_err = process.communicate()
delimiter
aClk.start(), c[:, :] * c[:, :], aClk.stop()
delimiter
cb = functools.partial(self.resp, items, iteration)
delimiter
r = a + b
delimiter
ax1 = fig1.add_subplot(111)
delimiter
1 - ab_sum / sqrt(a_sum * b_sum)
delimiter
some_object.save()
delimiter
i, j = np.unravel_index(a.argmax(), a.shape)
delimiter
double_to_hex(17.5)
delimiter
quote_swap(json.dumps(quote_swap(s)))
delimiter
dataBitMap.SaveBitmapFile(cDC, bmpfilenamename)
delimiter
vector_b = array([1, 1, 1, 1])
delimiter
x[f:] + x[:L + 1]
delimiter
django.setup()
delimiter
a = 1
delimiter
t5 = MyObject()
delimiter
id(a[0])
delimiter
ax.add_collection(p)
delimiter
nones = df == n
delimiter
e2.pack()
delimiter
now = datetime.now()
delimiter
print(jvdata)
delimiter
browser.webframe.load(req, QNetworkAccessManager.PostOperation, data)
delimiter
desc = [d[0] for d in curs.description]
delimiter
print(last_index)
delimiter
len1 = math.hypot(x1, y1)
delimiter
current_permissions = stat.S_IMODE(os.lstat(path).st_mode)
delimiter
bar
delimiter
f.close()
delimiter
file = models.ImageField(upload_to=settings.FILE_PATH)
delimiter
queryset
delimiter
url = request.url
delimiter
indices, data = zip(*data_items)
delimiter
SHAhash.hexdigest()
delimiter
a.data.nbytes
delimiter
listOfElements[:] = [el for el in listOfElements if el.MeetsCriteria()]
delimiter
matches.append(st.find(needle, i, i + len(needle)))
delimiter
stack[-1].append(x)
delimiter
result = list(camel.word_emitter(text))
delimiter
os.chown(filepath, uid, gid)
delimiter
layout = QVBoxLayout(self)
delimiter
50, 0.057658, 0.114725
delimiter
sys.stderr = LoggerWriter(log.warning)
delimiter
t -= p * (a - an) * (a - an)
delimiter
tokenizer.tokenize(txt)
delimiter
x[:100, :100] = np.random.random(size=(100, 100))
delimiter
red = pygame.Surface((200, 100))
delimiter
print(x)
delimiter
parser.disable_interspersed_args()
delimiter
Feed.drop_collection()
delimiter
print(b)
delimiter
min_x = image_src.shape[1]
delimiter
A.Multiply(False, V, B)
delimiter
svalue = Column(String)
delimiter
d[key]
delimiter
f(x=0)
delimiter
cc = Counter(l)
delimiter
deletes[-10:]
delimiter
job = models.ForeignKey(Job)
delimiter
bisect.insort(r, i)
delimiter
np.fill_diagonal(a, -np.inf)
delimiter
print(reverse_pat.format(**matches.groupdict()))
delimiter
12954124
delimiter
my_bigdict.lookup()
delimiter
newclass
delimiter
fig, ax = plt.subplots()
delimiter
LR.fit(X1[:half], y1[:half])
delimiter
f(20, b=10)
delimiter
self.server_id = server_id
delimiter
(df.a < bval).sum() / len(df.a)
delimiter
sys.meta_path[-1]._suffix = sys.meta_path[-1]._c_ext_tuple[0]
delimiter
conn.close()
delimiter
rotatedRect = [(minX, minY), (minX, maxY), (maxX, maxY), (maxX, minY)]
delimiter
self._values[self._key_to_index[key]]
delimiter
self.assertEqual(actual_output, expected_output)
delimiter
conn = psycopg2.connect(conn_string)
delimiter
list_x_set = set(list_x)
delimiter
l_i = l[i]
delimiter
clean_users.close()
delimiter
do_stuff(line)
delimiter
w2n, n2w
delimiter
pd.Series(x).rank(pct=True).values[-1]
delimiter
result = []
delimiter
a * b
delimiter
lst2 = line.strip()
delimiter
odo(df, db.myCollection)
delimiter
found.append(name)
delimiter
plt.plot(x, y, out[0], out[1])
delimiter
img1 = numpy.asarray(img1)
delimiter
filepath = os.path.join(dirpath, filename)
delimiter
X = ma.mask_rowcols(X)
delimiter
print(r.headers)
delimiter
string.lowercase[:14]
delimiter
out2D = squareform(out)
delimiter
print(list(the_subset))
delimiter
self._waitready.add(sender)
delimiter
CC1b = np.zeros((n1, n1))
delimiter
time.sleep(0.5)
delimiter
main()
delimiter
name = Column(String)
delimiter
self.initialize(request, response)
delimiter
vals_array = np.empty(lat_vals.shape + lon_vals.shape)
delimiter
math.atan2(-0.0, 0.0)
delimiter
nones = []
delimiter
t = threading.Thread(target=dummy)
delimiter
remove_your_temp_file(temp_file)
delimiter
print(guess_seq_len(list_b))
delimiter
Handler = SimpleHTTPServer.SimpleHTTPRequestHandler
delimiter
d[j] = j
delimiter
ax.plot(x, y, color=color, **kwargs)
delimiter
self.Refresh()
delimiter
random.choice(self.possible_strings)
delimiter
original_string.replaceWith(BeautifulSoup(text))
delimiter
result.append(self.format_option_help(formatter))
delimiter
arr -= arr.min()
delimiter
self.path = path
delimiter
c.acquire()
delimiter
[num, num]
delimiter
v1 = {x2 - x1, y2 - y1}
delimiter
ax.broken_barh([(midpoint - 0.1, 0.2)], (perc[4], perc[5] - perc[4]))
delimiter
self.thread.start()
delimiter
wf.setframerate(RATE)
delimiter
all_potions = {}
delimiter
self.root = Node(element)
delimiter
utc_dt = pytz.utc.localize(datetime.utcnow())
delimiter
d_time = datetime.date(2010, 11, 12)
delimiter
opt = parser.parse_args()
delimiter
winsound.PlaySound(memory_file.getvalue(), winsound.SND_MEMORY)
delimiter
start
delimiter
popped = {key: self[key]}
delimiter
body = response.body
delimiter
x = (x + apositiveint // x) // 2
delimiter
PyObject_Print(obj_ptr, stdout, 0)
delimiter
print(map(lambda x: x ** 2, [x for x in lst if x % 2 == 0]))
delimiter
x * 100 + y
delimiter
all(n % j > 0 for j in range(2, n))
delimiter
im.putalpha(mask)
delimiter
ax.yaxis.labelpad = 50
delimiter
(2)(1)
delimiter
print(result)
delimiter
vline = ax.axvline(1)
delimiter
k, v = next(iter(list(d.items())))
delimiter
im = im.crop(0, 0, int(height_count * width / width_count), height)
delimiter
dirs.remove(d)
delimiter
print(x)
delimiter
shutil.copyfileobj(f1, f2)
delimiter
modules = map(__import__, moduleNames)
delimiter
print(line)
delimiter
sys.argv.remove(args[0])
delimiter
self.subplot = self.figure.add_subplot(111)
delimiter
d = OrderedDict()
delimiter
rand_x_digit_num(5)
delimiter
sess.run(init)
delimiter
timing = dict()
delimiter
main()
delimiter
res[0] = 1.0
delimiter
data_in_group = np.zeros_like(data_stack)
delimiter
match.b
delimiter
interleave(s, t, res + s[i], i + 1, j, lis)
delimiter
result = []
delimiter
order = np.argsort(groups)
delimiter
any()
delimiter
process(newfiles)
delimiter
Y = np.zeros(1000)
delimiter
a.first()
delimiter
assert numpy.all((R - R_) ** 2 < 1e-16)
delimiter
b[0] = 0
delimiter
output.write(new)
delimiter
new_li = [item[1:] for item in x]
delimiter
start = time.clock()
delimiter
output
delimiter
raise AttributeError(attr)
delimiter
self.__dict__[key] = item
delimiter
memory_file.close()
delimiter
[as_row(v) for v in obj]
delimiter
print(i)
delimiter
idx = np.array([True, False, False, True])
delimiter
[]
delimiter
r = urllib.addinfourl(fp, hdrs, req.get_full_url())
delimiter
myHist = ax.hist(data, 100, normed=True)
delimiter
x, y, z = d[key]
delimiter
builder = Gtk.Builder()
delimiter
y = np.linspace(-10, 10, npts)
delimiter
webelement.text()
delimiter
index = -1
delimiter
next(I2)
delimiter
curl.setopt(pycurl.PROXYPORT, SOCKS_PORT)
delimiter
r = csv.reader(file_obj)
delimiter
epoch = int(time.mktime(time.strptime(d, p)))
delimiter
self.loader = gtk.gdk.PixbufLoader()
delimiter
y = np.random.rand(N)
delimiter
cj = CookieJar()
delimiter
o[-1].append(x)
delimiter
response = requests.get(token_url).content
delimiter
result = []
delimiter
N = data.shape[1]
delimiter
result = c.fetchall()
delimiter
doctest.testmod()
delimiter
myArray = []
delimiter
formatdate(time.time())
delimiter
time.sleep(10)
delimiter
im[i, j] = im[i, j] + 1
delimiter
x, y = generalizedEuclidianAlgorithm(b, a % b)
delimiter
pix = Pix.from_rgba(image)
delimiter
Serial.println(value)
delimiter
data -= np.mean(data, axis=0)
delimiter
pdf_contents.file.write(pdf)
delimiter
(array(mat) for mat in combinations(nvectors(n), m))
delimiter
i += 1
delimiter
unpack_list(*list(range(100)))
delimiter
fb_[i] = zeta[i] / (np.exp(zeta[i]) - 1.0)
delimiter
str(d)
delimiter
start_dict = {item[0]: item for item in tpl}
delimiter
l[i + 1] = l[i] + n // 2
delimiter
sizeY = sizeX
delimiter
s = socket(AF_INET, SOCK_DGRAM)
delimiter
print(df)
delimiter
keys = tuple(data)
delimiter
cols = np.isnan(g).all(axis=0)
delimiter
df = pd.DataFrame([1])
delimiter
foo2 = Foo()
delimiter
h2.encode()
delimiter
latest = MyObject.latest()
delimiter
self.setCentralWidget(self.table)
delimiter
iter.open()
delimiter
prefix_match(s, taglist)
delimiter
self.__ParseString(rawdata)
delimiter
r = fileobj.read_into(buf)
delimiter
self.crawler = CrawlerProcess(settings)
delimiter
window.show()
delimiter
q.submit()
delimiter
self.logger.log(self.level, message)
delimiter
main()
delimiter
fig.add_subplot(ax)
delimiter
client = Client.objects.get(pk=1)
delimiter
x_range = np.linspace(-10, 10, 100)
delimiter
x_range = list(range(-5, 6))
delimiter
s = b.total_seconds()
delimiter
new_lis1 = deepcopy(lis)
delimiter
list(_)
delimiter
a[tuple(l.T)] = b
delimiter
inner()
delimiter
wb = Workbook()
delimiter
m, se = np.mean(a), scipy.stats.sem(a)
delimiter
self.width, self.height = width, height
delimiter
self.__dict__.update(attrDict)
delimiter
print(S1, S2)
delimiter
up = upform.save(commit=False)
delimiter
print(patient_element.tag)
delimiter
dyn.put()
delimiter
request.response.status = 400
delimiter
y = reversed(x)
delimiter
print(df)
delimiter
print(x.get())
delimiter
str1 = str(dict1)
delimiter
False
delimiter
self.stream.write(data)
delimiter
plt.yticks([])
delimiter
1, 0, 0
delimiter
exit = Quitter()
delimiter
mask = np.random.choice([True, False], size=df.shape, p=[0.2, 0.8])
delimiter
fig = plt.figure()
delimiter
dout = pd.concat([pd.get_dummies(df), dl, dr], axis=1)
delimiter
plt.imshow(train_x[0].reshape((28, 28)), cmap=cm.Greys_r)
delimiter
line = f.readline()
delimiter
self.clients = []
delimiter
A = np.arange(n).reshape(n // 4, 4)
delimiter
HTTPServer.serve_forever(self)
delimiter
last_element = dd.pop()
delimiter
p[np.diag_indices(p.shape[0])] = np.ones(p.shape[0])
delimiter
djangofile = File(local_file)
delimiter
self.data[0:key[1] + 1] + list(key[0].indices(key[1]))
delimiter
self._content.seek(i)
delimiter
+i
delimiter
self.delta
delimiter
my_list[0]()
delimiter
Wizard.Minimize()
delimiter
n + u
delimiter
fd.close()
delimiter
ftype = 0
delimiter
newlst = []
delimiter
data = ff.read(4)
delimiter
piecew(np.asarray([2.1]))
delimiter
print(p.wait())
delimiter
[list(group) for is_key, group in itertools.groupby(l, key) if not is_key]
delimiter
df.date_time
delimiter
foo(1, 11)
delimiter
df.dtypes
delimiter
print(WEEKDAYS.fri)
delimiter
lglobals = sys.modules[lmoduleName].__dict__
delimiter
l = list(s)
delimiter
conn = engine.connect()
delimiter
client = socket.socket()
delimiter
flt = [[x, 0] for x in sorted(keys, key=len, reverse=True)]
delimiter
list(set(first + second))
delimiter
x = np.random.normal(mu, sigma, 10000)
delimiter
train_data = tf.Variable(999)
delimiter
xmlfile.close()
delimiter
logging.config.dictConfig(logging_config)
delimiter
image = pygame.image.load(name)
delimiter
grid_x, grid_y = np.mgrid[0:1:100j, 0:1:200j]
delimiter
n += 1
delimiter
self.aws.receive()
delimiter
store.append(key, df)
delimiter
np.mean(arr)
delimiter
hxs = HtmlXPathSelector(response)
delimiter
self._reqId += 1
delimiter
print(data)
delimiter
temp_dict[values[1]] = temp_dict[values[1]] + 1
delimiter
ext = os.path.splitext(f)[1]
delimiter
ax.legend()
delimiter
(1, 1)(1, 1)
delimiter
window_width = int(img.shape[1] * scale)
delimiter
d.setdefault(j, []).append(i)
delimiter
df2[i] = 0
delimiter
print(a_new)
delimiter
self.tiles = tiles[:4] + tiles[5:]
delimiter
members = []
delimiter
0.0
delimiter
[L[i] for i in slice_indices(len(L), start, stop, step)]
delimiter
self.ref_object.method()
delimiter
print(lst[f])
delimiter
all_items(get_location(get_creators(get_surrounding_cities(printer()))))
delimiter
word_counter[word] += 1
delimiter
step(dates, counts)
delimiter
print(type.text)
delimiter
rdtype = np.rec.fromrecords(arrs[:1, ::-1]).dtype
delimiter
url = urllib.request.build_opener(HTTPSClientAuthHandler(self.key, self.cert))
delimiter
deletes = [(a + b[1:]) for a, b in splits if b]
delimiter
self.name = name
delimiter
x[a.argmin(0), np.arange(a.shape[1])]
delimiter
s = str(n)
delimiter
ax2 = ax1.twinx()
delimiter
data = [random.choice((0, 1)) for _ in range(2500)]
delimiter
instance.user = request.user
delimiter
wrapped_mod = pickle.loads(p)
delimiter
b = np.sqrt(e)
delimiter
list(compress(arr, mask))
delimiter
m2.save()
delimiter
x = patricia()
delimiter
yaml.add_representer(str, represent_str)
delimiter
self.memory[key].append(value)
delimiter
counts = [0] * n
delimiter
set_color(b, initcolor)
delimiter
fig = plt.figure(figsize=(2, 2))
delimiter
yaxis = np.linspace(-1, 1, 20)
delimiter
x + y
delimiter
i = iter(list(d.items()))
delimiter
images = mat2cell(im, size(im, 1), split_point * ones(5, 1))
delimiter
print(next(g))
delimiter
phone_book[name].append(number)
delimiter
np.random.seed(101)
delimiter
max_time = max(data[1])
delimiter
jsonpickle.encode(Goal(), unpicklable=False)
delimiter
plot.append(axMiu)
delimiter
chunk = tuple(itertools.islice(it, size))
delimiter
struct.unpack(format, buffer)
delimiter
print([i for i in df])
delimiter
s & 1 << x
delimiter
density = gaussian_kde(data)
delimiter
element, = myset
delimiter
print(a, b, c)
delimiter
np.clip(out, 0, 255)
delimiter
df[good]
delimiter
result.append(element)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
x = linspace(-1, 1, n)
delimiter
print(field.name)
delimiter
row_idx = np.array([1, 2])
delimiter
2868466484
delimiter
1649599747
delimiter
2670642822
delimiter
1476291629
delimiter
self.get_solr_results(solr_sort)
delimiter
y.remove(item)
delimiter
output.close()
delimiter
rows, cols = arr.shape
delimiter
theText = f.read()
delimiter
self._devnull = os.open(os.devnull, os.O_WRONLY)
delimiter
adjs.append(tok)
delimiter
data = json.dumps(options.__dict__)
delimiter
i = 0
delimiter
fh.setFormatter(f)
delimiter
now = time.time()
delimiter
self
delimiter
new.append(new[i - 1] * df.A.values[i] + df.B.values[i])
delimiter
wins[name] += 1
delimiter
walls = [True, True, True, False]
delimiter
a = np.vstack(([im], [im.T])).T
delimiter
print(tab.draw())
delimiter
l1 = [0, 1, 0, 0, 1]
delimiter
dims = np.append(maxlen[::-1][:-1].cumprod()[::-1], 1)
delimiter
total += 1
delimiter
[start] + maxchain
delimiter
self.__dict__[key] = value
delimiter
self.sqsregion = sqsregion or SQSREGION
delimiter
list_of_numbers.reverse()
delimiter
[]
delimiter
transmission_array.extend([rand_num] * 400 * duration)
delimiter
crawler.crawl(domain_pk)
delimiter
vectors = np.array([[0, 1], [0, -1], [1, 0], [-1, 0]])
delimiter
i = np.arange(M)[:, (np.newaxis)]
delimiter
Digit = OrderedDict(Digit)
delimiter
coords[:, 1::2, :] = coords[:, 1::2, ::-1]
delimiter
soup = Soup(xml)
delimiter
ydata = list(range(10))
delimiter
d += 1
delimiter
16 ** (1.0 / 2)
delimiter
u = np.sin(np.pi * x) * np.cos(np.pi * y) * np.cos(np.pi * z)
delimiter
row += 1
delimiter
tree = dict(name=os.path.basename(path), children=[])
delimiter
True
delimiter
row.append(SchemaTable.Rows[i][j])
delimiter
api / views.py
delimiter
data = np.zeros((len(ax1), len(ax2)))
delimiter
day_idx = (date.weekday() + 1) % 7
delimiter
result = self.a + self.b + self.c
delimiter
p.connections()
delimiter
print(better_uc_hex)
delimiter
k = inkey()
delimiter
(np.inner(a, a) - n) // 2
delimiter
wtr = csv.writer(result)
delimiter
p = ThreadPool(1)
delimiter
s.__dict__
delimiter
args[0]
delimiter
print(df)
delimiter
newText[:-1]
delimiter
a and b
delimiter
ends.reset_index(drop=True, inplace=True)
delimiter
IFAIsFifo = 0
delimiter
results = np.empty((4, 5), int)
delimiter
tmp = np.append(b, [[clipping_value], [clipping_value]], axis=1)
delimiter
b = s.post(url, data=payload, headers=headers, allow_redirects=1)
delimiter
dt = datetime.now()
delimiter
0
delimiter
appList.add(line)
delimiter
total_cost += self.session.run((self.cost, self.train_step), feed_dict)[0]
delimiter
toc()
delimiter
r.url
delimiter
name = Column(String)
delimiter
BASE_DIR = os.path.dirname(os.path.dirname(__file__))
delimiter
sidx = np.argsort(searchvals)
delimiter
[11, 5, -12]
delimiter
merge(r1, r2, lambda a, b: a != b)
delimiter
self.showNormal()
delimiter
r = [s for s in sentence if s.lower() not in hello_dic]
delimiter
line = sys.stdin.readline()
delimiter
print(traceback.format_exception(type, value, tb))
delimiter
41149
delimiter
filename = sys.argv[1]
delimiter
self.f.close()
delimiter
dates = matplotlib.dates.date2num(list_of_datetimes)
delimiter
+__init__.py
delimiter
L.reverse()
delimiter
myFile.close()
delimiter
type(x[()])
delimiter
bool(i)
delimiter
tabulate(grouplist(list(range(1, 11)), 4, 2))
delimiter
MyClass().ff[0]
delimiter
net.addModule(output)
delimiter
result = im.copy()
delimiter
s = json.dumps(u, default=json_util.default)
delimiter
ctx = krbV.default_context()
delimiter
redirect(to, *args, **kwargs)
delimiter
self.sleep_time = value
delimiter
m = mmap.mmap(f.fileno(), 0, prot=mmap.PROT_READ)
delimiter
func()
delimiter
b = Decimal(str(b))
delimiter
plt.plot(time, signal)
delimiter
mkwargs = [x.__repr__() for x in list(kwargs.values())]
delimiter
terminator.start()
delimiter
c = ntplib.NTPClient()
delimiter
threads.append(threading.Thread(target=play_audio))
delimiter
funcs.append(lambda x=x: x)
delimiter
0
delimiter
point_symbolizer = mapnik.MarkersSymbolizer()
delimiter
ax.set_ylim(0, 7)
delimiter
gr.add_edges_from(edges)
delimiter
print(line)
delimiter
print(args)
delimiter
myFile.writerows(rows)
delimiter
self.stopped = True
delimiter
current = []
delimiter
instance.register_signals()
delimiter
result = (a - p) * (b - p) % p
delimiter
testauthor = session.query(Users).filter_by(id=test.author_id).first()
delimiter
all_pixels.append(bw_value)
delimiter
Member.objects.in_group(one_group).not_in_group(another_group)
delimiter
values[~valid_mask] = np.min(values) - 1.0
delimiter
func(np.array([1, 2]))
delimiter
self.help
delimiter
self.i == other.i
delimiter
s.write(urllib.request.urlopen(self.creative_url).read())
delimiter
res = [value] * (2 * len(seq) - 1)
delimiter
self.matplotlibWidget.axis.clear()
delimiter
preprocessed = process.read()
delimiter
root = Tk()
delimiter
idx = np.searchsorted(sw, sCut)
delimiter
b = np.ma.masked_array(a, mask=mask)
delimiter
x[0] += 1
delimiter
metadata2 = MetaData()
delimiter
metadata4 = MetaData()
delimiter
a[s]
delimiter
print(result)
delimiter
NULL
delimiter
print(xml)
delimiter
fig = plt.figure()
delimiter
n
delimiter
g._productions[-1]
delimiter
window = pygame.display.set_mode((800, 600))
delimiter
LIN[:, :d], e_values, e_vectors
delimiter
data.seek(0)
delimiter
ag012456789
delimiter
next(iterator)
delimiter
m[0] is m[1] is m[2]
delimiter
cumulative = [0] * (len(l) + 1)
delimiter
norm = tf.sqrt(tf.reduce_sum(tf.square(x), 1, keep_dims=True))
delimiter
setattr(self, column.name, column.default.arg)
delimiter
lst.sort()
delimiter
context = self.get_serializer_context()
delimiter
a = list(chain.from_iterable(npa))
delimiter
print(arr[(5), :])
delimiter
self.it = iter(it)
delimiter
Point(midx, midy)
delimiter
J.sum(axis=0) * mat
delimiter
self.stream.close()
delimiter
plt.title(cat)
delimiter
alphabet[0]
delimiter
app = QApplication(sys.argv)
delimiter
main()
delimiter
print(MySpider.start_urls)
delimiter
evenmorestuff
delimiter
print(df)
delimiter
frame.pack()
delimiter
a.intersection(b)
delimiter
theQ = Queue.Queue()
delimiter
self.user.save()
delimiter
changelist = p4out.readline().split()[1]
delimiter
word = matchobj.group(0)
delimiter
result = []
delimiter
wrapper
delimiter
p = Pool(processes=2)
delimiter
input = PdfFileReader(f)
delimiter
gm.setLevel(logging.ERROR)
delimiter
self.q.put(new_item, *args, **kwargs)
delimiter
self.finish()
delimiter
result.extend(replace_with)
delimiter
self._replace(x=self.y, y=self.x)
delimiter
self.instance(*args, **kwargs)
delimiter
self.days = days + 7 * weeks + self.seconds // 86400
delimiter
s.iloc[first_valid:]
delimiter
url = url.strip()
delimiter
plt.hist(a, 9, weights=b)
delimiter
driver.close()
delimiter
threadB = Thread(target=loobB)
delimiter
np.__version__
delimiter
email = db.Column(db.String(120), unique=True)
delimiter
self.assertTrue(mock_warnings.called)
delimiter
a == b
delimiter
h1, w1 = img1.shape[:2]
delimiter
msg = email.message_from_string(j)
delimiter
rand = [mylist[i] for i in randIndex]
delimiter
self._attr_value_to_obj_set.pop(attr_value)
delimiter
print(replchars.sub(replchars_to_hex, inputtext))
delimiter
ohandle.close()
delimiter
addr = ctypes.addressof(c.contents)
delimiter
library(sunburstR)
delimiter
loop = asyncio.get_event_loop()
delimiter
result = dict(dol1, **dol2)
delimiter
print(data)
delimiter
A.a()
delimiter
now_epoch = calendar.timegm(now_tz.utctimetuple())
delimiter
stdev = sqrt(sum_x2 / n - mean * mean)
delimiter
name = Column(String)
delimiter
print((pp + 1).year, (pp + 1).month)
delimiter
100000010000
delimiter
d[1] = 5
delimiter
print(line.strip())
delimiter
pprinttable([data])
delimiter
ax1.view_init(-10, 45)
delimiter
doc = docfile.read()
delimiter
f = lambda x: Decimal(np.mean(x))
delimiter
numpy.random.shuffle(shuffled_points)
delimiter
df2.index = df2.index.map(lambda x: get_closest_match(x, df1.index))
delimiter
P = mp.Pool()
delimiter
do_stuff()
delimiter
True
delimiter
words = sentence.split()
delimiter
self.id = self.num
delimiter
settings.setAttribute(QWebSettings.PluginsEnabled, True)
delimiter
index.append([keyword, url])
delimiter
signal.connect_via(app)(listener)
delimiter
print(distance(ListOfCoordinates[0], ListOfCoordinates[i]))
delimiter
window.show()
delimiter
threads.remove(thread)
delimiter
[]
delimiter
transport.open()
delimiter
obj.bar = obj.foo
delimiter
total_distance = sum(distances)
delimiter
old = sys.stdout
delimiter
year += 1
delimiter
trees = self.get_dump(fmap)
delimiter
self.pack_start(gtksink.props.widget, True, True, 0)
delimiter
bar().baz()
delimiter
print(row.rstrip(), repr(row))
delimiter
array(array(1))
delimiter
a(4)
delimiter
print(eval(input()))
delimiter
recipe = Recipe.objects.create(**validated_data)
delimiter
utc_dt = datetime.now(timezone.utc)
delimiter
fig.append_trace(trace2, 2, 1)
delimiter
ax = [plt.subplot(g) for g in gs]
delimiter
iren.start()
delimiter
coocc = df_asint.T.dot(df_asint)
delimiter
new_pol = ops.cascaded_union(pols)
delimiter
U.fromstring(B)
delimiter
a.coeffs()
delimiter
root = tk.Tk()
delimiter
b.A
delimiter
get_absolute_url = permalink(get_absolute_url)
delimiter
letters += 1
delimiter
self.sizer.Add(self.result, (0, 1))
delimiter
map(d.update, extras)
delimiter
st = np.mgrid[1:101, 1:101]
delimiter
df
delimiter
self.d[k]
delimiter
D().f()
delimiter
thread.start_new_thread(flaskThread, ())
delimiter
values = numpy.array([0, 1, 1, 0, 0])
delimiter
table = [int(x) for x in table_[1::2]]
delimiter
plt.plot(b, a)
delimiter
results.set_value(i, j, v)
delimiter
self.result = re.search(pattern, text)
delimiter
g = nx.DiGraph()
delimiter
dst = tk.PhotoImage()
delimiter
coll = db.dataset
delimiter
self.f.write(e.strip())
delimiter
cursor = connection.cursor()
delimiter
((key, locs) for key, locs in list(tally.items()) if len(locs) > 1)
delimiter
self.f = f
delimiter
data._get_numeric_data()
delimiter
cache[n]
delimiter
c = b.upper()
delimiter
n.bit_length()
delimiter
subplots_adjust(bottom=0.14)
delimiter
print(type(data_for_browser_retrieverd.json))
delimiter
foo = args.one
delimiter
a * np.sin(2.0 * np.pi * f * t + p)
delimiter
region_el = [x[0] for x in remaining]
delimiter
multiprocessing.Process(target=uploader, args=(filenames,)).start()
delimiter
rotations = rotations.reshape((-1, 2, 2))
delimiter
print(row[1:12])
delimiter
headers = [col.text for col in next(rows)]
delimiter
keys = [k for k in list(self.keys()) if value in k]
delimiter
self.func = func
delimiter
freq = Counter(tuple(s[i:i + n]) for i in range(len(s)))
delimiter
sys.stdout = self._stringio = StringIO()
delimiter
np.sum(A, axis=0)
delimiter
tmp = [a] * len(a) + [b] * len(b)
delimiter
winsound.Beep(FREQ, DUR)
delimiter
filtered2 = []
delimiter
date
delimiter
print(list_2)
delimiter
type.__new__(cls, clsname, bases, dct)
delimiter
c = Counter(words)
delimiter
parts = urlparse(url)
delimiter
print(last_wednesday)
delimiter
M[0, 0]
delimiter
newfunc = globs[func.__name__]
delimiter
a = {}
delimiter
text.set_font_properties(font)
delimiter
int(self.selenium.is_element_present(xpath1))
delimiter
img.close()
delimiter
HOME / anaconda / bin
delimiter
p.join(DURATION - time_waited)
delimiter
tv.set_rules_hint(False)
delimiter
new_list
delimiter
getattr(module, className)
delimiter
height = GetSystemMetrics[1]
delimiter
print(line)
delimiter
t1 + pd.DateOffset(months=k)
delimiter
pixel_at(25, 5)
delimiter
self.lists[row].append(value)
delimiter
sys.stdout = actualstdout
delimiter
strobj2 == strobj
delimiter
[p for p in database if p.y == 2]
delimiter
doWalk(where, why)
delimiter
foo_view(request)
delimiter
new_list = [item.lower() for item in old_list]
delimiter
self.name = name
delimiter
(listScore == listScore[ind]).all(1).sum()
delimiter
b[1:2, 1:2] = False
delimiter
arr[0:2] += someVector
delimiter
set_alpha_color(alpha_max)
delimiter
g = parser.add_mutually_exclusive_group()
delimiter
x = np.random.randn(100, 200)
delimiter
os.dup2(devnull.fileno(), 1)
delimiter
matches = [(t, p) for t, p in product(targets, prefixes) if t.startswith(p)]
delimiter
1
delimiter
a.min()
delimiter
glLoadIdentity()
delimiter
parsed = pool.apply_async(Process1, [largefile])
delimiter
x0 = np.array([-0.72, -0.64])
delimiter
A = NP.random.randint(0, 10, 100)
delimiter
print(str_repr)
delimiter
abc = lambda : myFunction()
delimiter
user = models.OneToOneField(settings.AUTH_USER_MODEL)
delimiter
ss.communicate()
delimiter
pir(df.x.values)
delimiter
Qt / __init__.py
delimiter
item
delimiter
some_template_functor < double > some_template_functor_double
delimiter
values
delimiter
a = [partial(lambda x: x, i) for i in range(5)]
delimiter
MessageBox.Show(str(self.value.value))
delimiter
ps = pandas.Series([tuple(i) for i in x])
delimiter
a, b, c
delimiter
f.write(string_to_write)
delimiter
root = tk.Tk()
delimiter
self.recent.append(mod)
delimiter
funny_stuff()
delimiter
temp.extend(m)
delimiter
l = [(x[0], list(x[1])) for x in g if x[0] == 9]
delimiter
x.reshape(x.shape[0] / 5, 5)[:, :2]
delimiter
q.put(random.sample(points, 1)[0])
delimiter
print(len(test.vec()))
delimiter
print((index, second))
delimiter
self._thread.start()
delimiter
request.args[key]
delimiter
csvwrite.writerow(row)
delimiter
urls = []
delimiter
loop = asyncio.get_event_loop()
delimiter
self.x = x
delimiter
{{team.name | e}}
delimiter
WSGIRequestHandler.log_request(*args, **kw)
delimiter
self.append(next(self.gen))
delimiter
screen = pg.display.set_mode(SIZE, HWSURFACE | DOUBLEBUF)
delimiter
p = Popen(cmd, stdout=PIPE, stderr=PIPE)
delimiter
curses.curs_set(0)
delimiter
s = json.dumps(arr.tolist())
delimiter
custers = scipy.ndimage.find_objects(labels)
delimiter
x += 1
delimiter
last_state = tf.nn.embedding_lookup(output_rs, last_index)
delimiter
nges_uneval
delimiter
threadLimiter.release()
delimiter
l.append(2)
delimiter
ax.set_xlim(xmin=-0.5)
delimiter
os.waitpid(pid, 0)
delimiter
self.parent._fsb_controllers.remove(self)
delimiter
print(sum([(x ** 2) for x in lst if x % 2 == 0]))
delimiter
data = yaml.load(text)
delimiter
thumb_io = StringIO.StringIO()
delimiter
zlib.decompress(unknown_compressed_data)
delimiter
result
delimiter
x = numpy.array([[9.5, 7.5], [10.2, 19.1], [9.7, 10.2]])
delimiter
duplicates = [i for i in c if c[i] > 1]
delimiter
iter(M)
delimiter
print(fsolve(func, guess, args=(a, b, c, n)))
delimiter
Grid.columnconfigure(frame, x, weight=1)
delimiter
self.wfile.write(line)
delimiter
toc()
delimiter
curr_value = SomeModel.objects.get(pk=obj.id)
delimiter
python_script = sys.argv.pop(0)
delimiter
i += 1
delimiter
self.__dict__ = original.__dict__
delimiter
results[i] = []
delimiter
sim = np.sqrt(0.5 * ((np.sqrt(dense1) - np.sqrt(dense2)) ** 2).sum())
delimiter
print(b.x, b.y)
delimiter
stream.filter(locations=GEOBOX_GERMANY)
delimiter
p4.connect()
delimiter
output.write(outputStream)
delimiter
t1 = time.time()
delimiter
True
delimiter
html = url.urlopen(s.url).read()
delimiter
actions.perform()
delimiter
print(line, name)
delimiter
raise AssertionError(message)
delimiter
some_date.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
delimiter
df.count()
delimiter
max = numpy.max(numpy.abs(T))
delimiter
np.sum(tmp[:, i::col_sp] for i in range(col_sp))
delimiter
Forename = Paul
delimiter
show(p)
delimiter
self._x
delimiter
self.canvas.widgetlock.release(self.lasso)
delimiter
ind = ind[second_mask]
delimiter
main()
delimiter
add_method(e, bark)
delimiter
fig = plt.figure()
delimiter
a, b = c[:, (0)], c[:, (1)]
delimiter
form.submit()
delimiter
object_list = list(list(Content.objects.filter(foo=bar).values())[:100])
delimiter
write_file(data)
delimiter
int(n)
delimiter
Y = np.fft.fft(y) / n
delimiter
i += 1
delimiter
bus = dbus.SystemBus()
delimiter
set(random.randint(0, 100))
delimiter
[5, 6, 1, 17, 9, 18, 1, 16, 17, 10]
delimiter
df
delimiter
value = getattr(struct, field)
delimiter
list1 = [2, 7, 8, 5]
delimiter
sys.exit(main())
delimiter
val = int(userInput)
delimiter
food = OrderedDict((v[0], (v[1], i)) for i, v in enumerate(foods))
delimiter
len(s) != l
delimiter
duos.append(duo)
delimiter
list(range(len(iterable)))
delimiter
self.b = 2
delimiter
toAdd = xyzCoord[i][:]
delimiter
format_to_year_to_value_dict[format_str][year] = value
delimiter
a.attr2
delimiter
Models.my_model.MyClassName
delimiter
order = models.IntegerField()
delimiter
csvwrite.writeheader()
delimiter
result[offset].append(name)
delimiter
Hlow = ifftshift(Hlow)
delimiter
ucd.name(u2[1])
delimiter
denom = sum([(x ** 2) for x in list(rec.values())]) ** 0.5
delimiter
proc.kill()
delimiter
data = df.values
delimiter
ax = plt.subplot(gs[x, y])
delimiter
print(file.line_count())
delimiter
pickled_object = pickle.dumps(obj)
delimiter
tornado.options.parse_command_line()
delimiter
(10 ** 0.5) ** 2 == 10
delimiter
dis.dis(fun)
delimiter
test_n(n)
delimiter
m = sparse.lil_matrix((100, 100))
delimiter
self.updater.setSingleShot(True)
delimiter
abort(401)
delimiter
Xfit_mono = zeros(Xfit.size)
delimiter
assert parrot(inp) == expected
delimiter
fmt.format(msg, lineno, colno, pos)
delimiter
test(regex)
delimiter
time.sleep(60 * 5)
delimiter
self.fp.__exit__()
delimiter
imp.acquire_lock()
delimiter
a = np.arange(1, 10, 0.5)
delimiter
point(self.x + oth.x, self.y + oth.y)
delimiter
x
delimiter
c.append([])
delimiter
filecols = [readcol5(f) for f in files]
delimiter
savout = os.dup(1)
delimiter
groups = df.groupby(df.L)
delimiter
list(filter(operator.isNumberType, list_1))
delimiter
self.ui.gridLayout.removeWidget(self.ui.dragDataEdit)
delimiter
print(output)
delimiter
(s.map(type) != str).any()
delimiter
ufmt_str.format(**kwargs)
delimiter
line = input()
delimiter
widget = event.GetEventObject()
delimiter
os.remove(tempfile)
delimiter
base.metadata.create_all(engine)
delimiter
b = partial(a)
delimiter
self.app = Flask()
delimiter
cbar = fig.colorbar(mappable=plotted)
delimiter
xdelta2, ydelta2 = xin - xlim[0], yin - ylim[0]
delimiter
band = ds.GetRasterBand(1)
delimiter
self.forest.append(tree)
delimiter
mymodule.foobar2
delimiter
masterReader = csv.DictReader(f1)
delimiter
x = np.arange(-5, 5, 0.25)
delimiter
dispatcher.connect(self.spider_error, signal=signals.spider_error)
delimiter
my_own_magic(foo)
delimiter
pycallgraph.stop_trace()
delimiter
df.show()
delimiter
hf = plt.figure()
delimiter
a = np.array([[1, 0], [0, 1], [-1, 1]])
delimiter
vals[i] = abs(np.dot(u, m2))
delimiter
plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
delimiter
curl.setopt(pycurl.SSL_VERIFYPEER, 1)
delimiter
ordered.ordered_fields
delimiter
False
delimiter
g.LgRnk.rank(pct=True)
delimiter
[0]
delimiter
output = p.stdout.read()
delimiter
main()
delimiter
f.write(data)
delimiter
diff = abs(results[i] - value)
delimiter
valuesCopy.update({state: convergedValue})
delimiter
H, X1 = np.histogram(Z, bins=10, normed=True)
delimiter
res = urllib.request.urlopen(starturl)
delimiter
self.fp.close()
delimiter
pdb.gimp_file_save(image, drawable, file, file)
delimiter
arr = np.asarray(bytearray(req.read()), dtype=np.uint8)
delimiter
child = models.ForeignKey(Child)
delimiter
fig = plt.figure()
delimiter
t2.__sizeof__()
delimiter
df = pd.DataFrame(data)
delimiter
muX = X.mean(0)
delimiter
trimesh = refiner.refine_triangulation(subdiv=4)
delimiter
print(type(1))
delimiter
child = pexpect.spawn(cmd)
delimiter
temp.append(k)
delimiter
o.two()
delimiter
print(t)
delimiter
self.date_start_processing = timezone.now()
delimiter
result
delimiter
data = csock.recv(1024)
delimiter
string_size = len(string)
delimiter
post_save.connect(create_user_account, sender=User)
delimiter
cwd = os.getcwd()
delimiter
hash_md5 = hashlib.md5()
delimiter
require(selectr)
delimiter
main()
delimiter
PyErr_Print()
delimiter
exec(c, m.__dict__)
delimiter
next(fo)
delimiter
ipdb.set_trace()
delimiter
scatter(X, Y, c=Z, **scatter_kwargs)
delimiter
print(A().a1())
delimiter
outputList.append(os.path.join(root, f))
delimiter
im2 = im.crop(im.getbbox())
delimiter
handles.append(mpatches.Patch(color=c, label=labels[i - 1]))
delimiter
pts = [(np.linalg.norm([x - w, y - v]) - r) for x, y in zip(X, Y)]
delimiter
print(np.sum(primes, dtype=np.int64))
delimiter
self.points = [Point(i, self.coords) for i in range(numpoints)]
delimiter
count += 1
delimiter
hash.update(block)
delimiter
w.pack()
delimiter
self.user_id = user.id
delimiter
sheet1 = book1.get_active_sheet()
delimiter
print(row)
delimiter
reader = csv.DictReader(theFile)
delimiter
result = connection.getresponse()
delimiter
self._metadata.reflect(bind=self._conn)
delimiter
insp = sa.inspect(engine)
delimiter
new_btn.pack()
delimiter
raw = f.read()
delimiter
__import__(module_name)
delimiter
br = mechanize.Browser()
delimiter
search_set = ancestors_descendents & descendents_ancestors
delimiter
input = sys.stdin.read(1024)
delimiter
grid = scipy.sparse.coo_matrix((weights, xyi), shape=(nx, ny)).toarray()
delimiter
self.do_stuff()
delimiter
timeout = time.time() + 60 * 5
delimiter
print(cmd())
delimiter
d = defaultdict(int)
delimiter
loss = tf.square(x - y)
delimiter
summation += int(letter)
delimiter
lambda x: exp(x)
delimiter
sct.norm.cdf(x=50, loc=60, scale=40)
delimiter
m.captures(1)
delimiter
img_grand.readMetadata()
delimiter
ss.listen(2)
delimiter
is_sum_of_numbers(5, numbers)
delimiter
posts.insert(post)
delimiter
f.close()
delimiter
X = np.arange(200) - 100.0
delimiter
connect_signal1_to_slot1()
delimiter
print(res)
delimiter
os.execl(python, python, *sys.argv)
delimiter
L = [1] * 5
delimiter
layout.addWidget(ipyConsole)
delimiter
pool.close()
delimiter
devnull = open(os.devnull)
delimiter
outFile.close()
delimiter
a = np.random.random((20, 22))
delimiter
count += len(mapping[y])
delimiter
--docstrings
delimiter
rows = []
delimiter
self.session.Logon()
delimiter
np.ones(10 ** 9, dtype=np.bool)
delimiter
objects = models.Manager()
delimiter
message = mailer.Message()
delimiter
B = np.where(A < 0.1, A, 0).astype(float)
delimiter
gs = goslate.Goslate()
delimiter
d.setdefault(word, []).append(i)
delimiter
loop.run_until_complete(main())
delimiter
i += 1
delimiter
tb.activate()
delimiter
c = [(lambda i=i: i) for i in range(10)]
delimiter
os.remove(batch_filename)
delimiter
elem.send_keys(ARROW_DOWN)
delimiter
foo = Foo(list(range(10)))
delimiter
points.append((-1, -0.5))
delimiter
print(a)
delimiter
b = a[4]
delimiter
startupinfo = subprocess.STARTUPINFO()
delimiter
df.info()
delimiter
line = handle.readline()
delimiter
out = timeobj.astimezone(pytz.utc)
delimiter
index += 1
delimiter
frame.pack()
delimiter
city_name = city.name
delimiter
loop = asyncio.get_event_loop()
delimiter
love_ctx = Graph(conj.store, NS_CTX.love)
delimiter
print(sympy.__version__)
delimiter
self.handleError(record)
delimiter
pl.plot(x, dist.pdf(x))
delimiter
my_hash = self.md5.digest()
delimiter
0.0, 0.0, 0.0, 0.0, 0.0
delimiter
keys[key[0]] = keys[key[0]] + d[key]
delimiter
count[s] += 1
delimiter
client = paramiko.SSHClient()
delimiter
row.extend(sixplus(previous_row))
delimiter
x = np.linspace(0, 10, 100)
delimiter
user_registered.connect(user_registered_callback)
delimiter
iter.destroy()
delimiter
worker.moveToThread(self.thread)
delimiter
print(f)
delimiter
{{i}},
delimiter
Xs = np.average(Xi)
delimiter
True == 1
delimiter
mtime = os.stat(filename).st_mtime
delimiter
(x + y).subs(reps)
delimiter
imagem = 255 - imagem
delimiter
ts2 = ts[datetime(2011, 1, 8):]
delimiter
print(id(Point(1, 2)))
delimiter
key1 = models.IntegerField()
delimiter
atok = asttokens.ASTTokens(line, parse=True)
delimiter
fs.program_select(0, sfid, 0, 0)
delimiter
p = Pool(5)
delimiter
obj_dict = pickle.load(output)
delimiter
res.append((s[i], j - i))
delimiter
fig = plt.figure()
delimiter
tn = telnetlib.Telnet(HOST, PORT)
delimiter
df
delimiter
hash(self._key())
delimiter
j += self.shape[1]
delimiter
Py_Initialize()
delimiter
main_program.py
delimiter
alist = [arr[(0), :-1], arr[:-1, (-1)], arr[(-1), ::-1], arr[-2:0:-1, (0)]]
delimiter
intersections
delimiter
print(df1)
delimiter
filtered_primes = map(int, primes)
delimiter
dx, dy = NORTH
delimiter
df
delimiter
elem = ElementTree.parse(file)
delimiter
data = list(tuple(i) for i in data)
delimiter
int(builtins.round(number))
delimiter
b = itertools.zip_longest(*a)
delimiter
t = np.linspace(0, 4 * np.pi, 100)
delimiter
d[v] = [i]
delimiter
cap = cv2.VideoCapture(fn)
delimiter
self.do_open(self.http_class, req)
delimiter
True
delimiter
attrs.update(list(get_choices(attrs)))
delimiter
__init__
delimiter
self.setFlags(QGraphicsItem.ItemIsSelectable | QGraphicsItem.ItemIsMovable)
delimiter
X = np.linspace(0, 10, 100)
delimiter
res.asList()
delimiter
pool = Pool(pool_size)
delimiter
gona[0:2, (0)]
delimiter
jobs.append(job)
delimiter
x = min(x, 1)
delimiter
print(read_pipe())
delimiter
sqrt(6 * s)
delimiter
first.nonzero()
delimiter
openers.append(opener)
delimiter
name = models.CharField(max_length=100)
delimiter
plt.legend()
delimiter
d[int(key)] = val
delimiter
output = [x.reshape(s0[:i] + (-1,) + s0[i + 1::]) for i, x in enumerate(args)]
delimiter
mtime = os.path.getmtime(name)
delimiter
g.series((x, y), (0, 0))
delimiter
ret, im_thresh = cv2.threshold(im, 128, 255, cv2.THRESH_BINARY)
delimiter
fs.release()
delimiter
bounding_boxes.append((center, (x, y, w, h)))
delimiter
mpl.rcParams.update(mpl.rcParamsDefault)
delimiter
profile = user.get_profile()
delimiter
i += 1
delimiter
print(sli)
delimiter
list(g(arr, 8))
delimiter
b = np.arange(0, 25, 1).reshape((5, 5))
delimiter
layer1[:] = layer2
delimiter
lines = f.read_lines()
delimiter
print({elem: get_linked_list(elem, d, [])[1:] for elem in list(d.keys())})
delimiter
spampwriter.writerrow((s1, item, i, list1[item - 1], er1))
delimiter
df
delimiter
HTT += HTTflips
delimiter
print(df)
delimiter
n = mat.shape[0]
delimiter
count = collections.Counter()
delimiter
ax.broken_barh(xranges, yrange, facecolors=facecolors, alpha=1.0)
delimiter
request_object = urllib.request.Request(url, post_data, http_headers)
delimiter
foo = Foo()
delimiter
Lv = []
delimiter
result = [[]]
delimiter
polygon = mplpl.Polygon([(x1, y1), (x2, y2), (x2, 0), (x1, 0)], color=c)
delimiter
xlmodule = objworkbook.VBProject.VBComponents.Add(1)
delimiter
center = xy.mean(axis=-1)
delimiter
list(b.values())
delimiter
row, col = im.shape[:2]
delimiter
r = s.get(url)
delimiter
numpy.dot(a, a)
delimiter
result = np.sum(corr_time2(t_output, JM1, JM2), axis=(1, 2))
delimiter
encoded = json.dumps(obj)
delimiter
method()
delimiter
HttpResponseRedirect(secure_url)
delimiter
results = DataFrame(results, index=df.columns, columns=df.columns)
delimiter
assert self.test_user.get_short_name() == self.email
delimiter
self.omega = omega
delimiter
os.chdir(curdir)
delimiter
f.write(chunk)
delimiter
dx = POINT2[0] - POINT1[0]
delimiter
arr = [bitarray(50) for i in range(10)]
delimiter
I = np.nonzero(np.in1d(abc, c))[0]
delimiter
type(100)
delimiter
print(repr(test.read()))
delimiter
print(item)
delimiter
print(ascend_list)
delimiter
d = df.column1.diff()
delimiter
count = (cdist(listScore, np.atleast_2d([2, 0])) == 0).sum()
delimiter
self.setParams(**kwargs)
delimiter
print(x)
delimiter
s = stdscr.getstr(0, 0, 15)
delimiter
sys.path.append(basepath)
delimiter
new_dict = defaultdict(list)
delimiter
themsg.attach(msg)
delimiter
proxy_handler = urllib.request.ProxyHandler({proxyscheme: proxyurl})
delimiter
cur_line = f.readline()
delimiter
eval(command)
delimiter
s.add(Math.abs(n))
delimiter
Py_DECREF(pName)
delimiter
False
delimiter
data = json.loads(response)
delimiter
7.12802865169
delimiter
print(a.MY_CONSTANT)
delimiter
grades[i]
delimiter
utc = utc.replace(tzinfo=from_zone)
delimiter
math.sqrt(2) * erfi(2 * p - 1)
delimiter
easy_install - -always - unzip
delimiter
ws.set_remove_splits(True)
delimiter
self.session.startRunning()
delimiter
print(response.status_code)
delimiter
cur.rowcount
delimiter
plt.subplot(2, 2, 1)
delimiter
print(item)
delimiter
self._whatever = whatever
delimiter
y_a = np.sin(x_a)
delimiter
endpoint(*args, **kwargs)
delimiter
Simbad.reset_votable_fields()
delimiter
cv2.waitKey()
delimiter
x = x + 5
delimiter
y * y
delimiter
d[k] = round(v)
delimiter
logger = logging.getLogger(__name__)
delimiter
self.start()
delimiter
ax.set_yticklabels(yticklabels, minor=False)
delimiter
assert_equal(foo, 10)
delimiter
maxindex = a.argmax()
delimiter
incsv.read()
delimiter
ax = fig.add_subplot(224)
delimiter
preliminary = stage1.search(text).group(1)
delimiter
p.map(mp_worker, data)
delimiter
fig = plt.figure()
delimiter
my_user = User.objects.get(pk=1)
delimiter
psutil.wait_procs(children, timeout=5)
delimiter
pl.plot(x, blue)
delimiter
df = pd.DataFrame(y, index=x)
delimiter
self.webview.getSettings().setJavaScriptEnabled(True)
delimiter
math.degrees(math.atan(x))
delimiter
sys.getrefcount(sys)
delimiter
print((name, score))
delimiter
result[..., (0)] = np.clip(im[..., (0)], 0, threshold)
delimiter
df = pd.DataFrame(arr)
delimiter
vault.set_vault_notifications(vault, notification_config)
delimiter
trel = [(t / tabs[0]) for t in tabs]
delimiter
[11, 14, 15, 16, 17, 18]
delimiter
self.setAcceptDrops(True)
delimiter
a = np.empty(10)
delimiter
6, [False, False, True, False]
delimiter
lum_img = np.flipud(img[:, :, (0)])
delimiter
get_conf = lambda : model_name.objects.get()
delimiter
arr = arr[~mask]
delimiter
pyaudio.pa.__file__
delimiter
n
delimiter
data[:] = [data[i:i + 50] for i in range(0, 2500, 50)]
delimiter
cython.float
delimiter
days, hours, minutes = map(int, (days, hours, minutes))
delimiter
peaks = freq[mask]
delimiter
print(x, y)
delimiter
pickled_state[0], pickled_state[1], new_state
delimiter
d[i] = l[s:s + i]
delimiter
shape = len(arrays) * a.shape[0], a.shape[1]
delimiter
print(type(first_arg))
delimiter
DEBUG = True
delimiter
img2 = converter.enhance(0.5)
delimiter
a[2, 4] = 1
delimiter
mat.move(-7, -2, 0, r=True)
delimiter
k = np.random.rand(1000)
delimiter
lst.append(1)
delimiter
print(output)
delimiter
qs = self.get_filtered_queryset(qs)
delimiter
list2 = [2, 2, 2, 2, 2]
delimiter
{{form}}
delimiter
matrix = np.random.randint(0, 10, (5, 5))
delimiter
groups = dict()
delimiter
fields.append((name, field.clone()))
delimiter
parser.read([filename])
delimiter
x = np.cos(u) * np.sin(v)
delimiter
sorted(list(s1)) == sorted(list(s2))
delimiter
counter += 1
delimiter
avg_time = sum(data[1]) / len(data[1])
delimiter
next(generator)
delimiter
module_name = inspect.getmodule(f).__name__
delimiter
mapper.SetColorModeToDefault()
delimiter
self.port = port
delimiter
idx_c = (colorjh > 0) & (colorjh < 1)
delimiter
[([x] + []) for x in seqs[0]]
delimiter
data = bytearray(os.path.getsize(FILENAME))
delimiter
ur = np.array([bx2, by2])
delimiter
subcheckio(stones, 0, 0)
delimiter
lock.release()
delimiter
results.extend(result)
delimiter
self.assertEqual(delta(9, 7), 2)
delimiter
self.initfunc = initfunc
delimiter
img.autoscale()
delimiter
print(url)
delimiter
this_array
delimiter
exit(1)
delimiter
np.clip(X, self.loclip, self.hiclip, out=X)
delimiter
book.unload_sheet(name)
delimiter
a = A()
delimiter
random.shuffle(unfrozen_indices)
delimiter
(128, 0, 0), (0, 128, 128), (0, 0, 255), (0, 204, 255), (204, 255, 255)
delimiter
streamHandler.setFormatter(formatter)
delimiter
n = int(math.ceil(math.log(abs(x2 - x1) / epsilon) / math.log(2.0)))
delimiter
p = pyaudio.PyAudio()
delimiter
mu, sigma = norm.fit(datos)
delimiter
pool = Pool(CONCURRENCY)
delimiter
Node.tree.filter(q)
delimiter
x = 0
delimiter
ret[np.diff(csr_mat.indptr) == 0] = 0
delimiter
form = CostForm()
delimiter
self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
delimiter
data = self.page.mainFrame().toHtml()
delimiter
self._data.columns.size
delimiter
out[..., :outlen].copy()
delimiter
idx_end = A.indptr[i + 1]
delimiter
generator_code = inspect.getblock(sourcecode[gline - 1:])
delimiter
print(df)
delimiter
os.unlink(filename_larry)
delimiter
fig, ax = plt.subplots()
delimiter
self.filter(is_public=True)
delimiter
t = threading.Thread(target=IOLoop.instance().start)
delimiter
self.setBrush(Qt.green)
delimiter
print(client.fetchAll())
delimiter
w.pack()
delimiter
result2 = pool.apply_async(solve2, [B])
delimiter
words = [pair[0] for pair in v]
delimiter
A = A[1:][::-1].T
delimiter
title = models.CharField(max_length=255)
delimiter
h[i] = h[-1]
delimiter
mu = np.array([0.0, 0.0])
delimiter
print(CatalanNumbers(511))
delimiter
image = Image.open(filePath)
delimiter
rec.levelname
delimiter
min_key = k
delimiter
v = np.linspace(0, np.pi, 100)
delimiter
low, pivot, high
delimiter
print(Foo.foo_string)
delimiter
replaced.append(text[pos:])
delimiter
first_row = np.where(rows == False)[0][0]
delimiter
nodeMap = dict()
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
bets = 2 ** np.cumsum(toss2)
delimiter
myResponse.raise_for_status()
delimiter
self.main = MainWindow()
delimiter
im.set_data(tmp)
delimiter
[(-value) for value, key in smallest]
delimiter
[coslat * math.cos(lon), coslat * math.sin(lon), math.sin(lat)]
delimiter
print(line)
delimiter
power(lambda x: x * 2, 1)(9)
delimiter
context.update(extra_context or {})
delimiter
start_response(status, response_headers)
delimiter
result[1:4] = np.floor(result[1:4])
delimiter
artist.add_reviews(review_id)
delimiter
out = []
delimiter
print(F[1])
delimiter
y_fit2 = func1(x, *popt2)
delimiter
bins = NP.array([0.0, 20.0, 40.0, 60.0, 80.0, 100.0])
delimiter
row.pop(5)
delimiter
lengths = map(len, lists)
delimiter
sheet = doc.sheets[0]
delimiter
transactions.sort(key=lambda date_data: date_data[0])
delimiter
f = urllib.request.urlopen(req)
delimiter
l1 = []
delimiter
layout.set_font_description(font)
delimiter
process.join()
delimiter
ids = [row[0] for row in cursor.fetchall()]
delimiter
food
delimiter
d = {}
delimiter
insanelib.xyz = myxyz
delimiter
object2 = ClassB()
delimiter
self.queryset = queryset
delimiter
x, y, z = observation_points
delimiter
X = 2 * X
delimiter
b[0] = 97
delimiter
ax.add_patch(p)
delimiter
pl.xticks(x, xticks)
delimiter
ret.reshape(self.shape)
delimiter
roles = models.ManyToManyField(Role)
delimiter
print(b.shape)
delimiter
[(i if t else v) for i, (t, v) in enumerate(each)]
delimiter
L.append(np.log(gev.pdf(data, *fit)).sum())
delimiter
deps.func()
delimiter
print(line)
delimiter
fileHandler.setFormatter(formatter)
delimiter
kicks = [0, -5 * noise, 5 * noise]
delimiter
copy[i], copy[j] = copy[j], copy[i]
delimiter
qproc.start()
delimiter
rank = list(p.values())
delimiter
line = line.strip(os.linesep)
delimiter
test()
delimiter
self.x = x
delimiter
s.send(CONNECT)
delimiter
total += num
delimiter
assert np.all(self.d[:-1] >= self.d[1:])
delimiter
layer.paste(mark, ((im.size[0] - w) / 2, (im.size[1] - h) / 2))
delimiter
a, b = tee(iterable)
delimiter
a = A()
delimiter
count = 0
delimiter
val += int(w)
delimiter
samples = np.random.lognormal(mean=1, sigma=0.4, size=10000)
delimiter
v = np.exp(2 * mu + sigma ** 2) * (np.exp(sigma ** 2) - 1)
delimiter
random.seed(0)
delimiter
startTime = time.time()
delimiter
print(tags.tag, tags.text)
delimiter
b = np.corrcoef(a)
delimiter
print(n[-1])
delimiter
classdecorator
delimiter
result[i] = foo(data[i])
delimiter
tmap = []
delimiter
deletez[2:-1]
delimiter
channel.shutdown_read()
delimiter
doc = etree.ElementTree(page)
delimiter
nltk.data.path
delimiter
result = self._result_queue.get()
delimiter
profiler.stop()
delimiter
pprint.pprint(solution)
delimiter
p /= numpy.sum(p)
delimiter
print(values[ind])
delimiter
x = 0
delimiter
fig = plt.figure()
delimiter
posts = FacebookFeed.get_posts(user=user)
delimiter
o.write(line)
delimiter
d = {x: [] for x in l1}
delimiter
self._x
delimiter
rgb = io.imread(filename)
delimiter
best = [(0, []) for _ in range(n + 1)]
delimiter
line = canvas.create_line(0, 10, width, 10, width=4)
delimiter
f(arg_a=0)
delimiter
bool(collections.Counter())
delimiter
graph.html(data)
delimiter
test(B())
delimiter
pix = im.load()
delimiter
[-5, -5]
delimiter
pdb.Pdb().set_trace(frame)
delimiter
print(threading.currentThread().getName(), self.receive_messages)
delimiter
setattr(args, self.dest, [strategy, path])
delimiter
my_list.append(key)
delimiter
print(info.st_mtime)
delimiter
my_dict = defaultdict(dict)
delimiter
key, valuelist = oldDict.popitem()
delimiter
print(f(X, Y))
delimiter
color + vector * percent
delimiter
target = random.uniform(0, total)
delimiter
pyplot.legend(newHandles, newLabels)
delimiter
setattr(self, self._attr_name, value)
delimiter
first_arg_unicode = first_arg.decode(sys.getfilesystemencoding())
delimiter
A[0, 1] * 0.5
delimiter
df.values[[np.arange(5)] * 2] = 0
delimiter
M[num_nonzeros != 0]
delimiter
process_byte(b)
delimiter
vd = dict((v[1], v[0]) for v in my_list)
delimiter
hash(self.name)
delimiter
bins = algos.quantile(np.unique(ser), np.linspace(0, 1, 11))
delimiter
jsonify(count=counter.value)
delimiter
list_of_all_primes(start, end)
delimiter
context = etree.iterwalk(root)
delimiter
print(timeit.timeit(lambda : split(TEST, SEPS)))
delimiter
d = yaml.load(s)
delimiter
tt = dt.timetuple()
delimiter
sys.settrace(self.func)
delimiter
assert [str(n) for n in node_depth_first_iter(tree)] == expected
delimiter
pp.imshow(paw)
delimiter
k2 = sorted(dict2, key=dict2.get)
delimiter
self.context = context
delimiter
print(len(holes))
delimiter
data[k] = int(v)
delimiter
min_y = image_src.shape[0]
delimiter
edges = cv2.Canny(gray, CANNY_THRESH_1, CANNY_THRESH_2)
delimiter
data + (chr(length) * length).encode()
delimiter
zorder_images.sort(key=lambda x: x[0])
delimiter
username
delimiter
writer.writerow(window.popleft())
delimiter
string
delimiter
print(l)
delimiter
out += arr[:-2, 1:-1]
delimiter
oldget(key)
delimiter
d.callback(0)
delimiter
out = np.nanmax(grouped_2Darray, 1)
delimiter
u_idx_x = np.argsort(x)
delimiter
org = Column(Boolean, default=False, nullable=False)
delimiter
self.queue = Queue()
delimiter
self.regenTree()
delimiter
x + y + z
delimiter
solutions = matching_solutions
delimiter
cax = ax.contourf(theta_mid, r_mid, H.T, 10, cmap=plt.cm.Spectral)
delimiter
a.append(1)
delimiter
da.destroy()
delimiter
dupe_rows = dupe_rows.apply(lambda row: row.duplicated().any(), axis=1)
delimiter
mat = IndexedRowMatrix(traindf.map(lambda row: IndexedRow(*row)))
delimiter
blahblah
delimiter
top[0].reshape()
delimiter
origlist = list()
delimiter
B.func()
delimiter
filt = resonator.poles_exp(freq=freq * Hz, bandwidth=bw * Hz)
delimiter
d.wup_similarity(g)
delimiter
print(df)
delimiter
node_data.append(node[key])
delimiter
_sounds = {c: str(i) for i, code in enumerate(_codes, 1) for c in code}
delimiter
self[key]
delimiter
axs[1].plot(clust_data[:, (0)], clust_data[:, (1)])
delimiter
548, 410
delimiter
566, 424
delimiter
print(sess.run(x_max))
delimiter
ex.args = (msg,) + ex.args[1:]
delimiter
0.000158164
delimiter
x + 1
delimiter
data = list()
delimiter
app.py
delimiter
M.add_edge(1, 2, weight=19)
delimiter
self.a = a
delimiter
mp = MultiPolygon(list(polygonize(mls)))
delimiter
diffs = map(ptdiff, zip(pts, pts[1:]))
delimiter
result
delimiter
f.write(response.content)
delimiter
newImage.save(new_image_path)
delimiter
r = R * cuberoot(u)
delimiter
name = ndb.StringProperty()
delimiter
print(timeit(lambda : pool.map(mmul, matrices), number=20))
delimiter
opener = urllib.request.build_opener()
delimiter
form = ClientForm(request.POST, instance=client)
delimiter
len(host_bytes) == 4 and len(valid) == 4
delimiter
image = image.convert()
delimiter
plt.plot(np.arange(10) + i)
delimiter
self._stream.write(text)
delimiter
parser = nltk.RecursiveDescentParser(lgrammar)
delimiter
ds = audiere.open_device()
delimiter
nx.__version__
delimiter
P(func)
delimiter
m = a.reshape((a.shape[0], -1))
delimiter
plt.figure()
delimiter
guess_type(filename)[0]
delimiter
list2.append(t)
delimiter
close()
delimiter
G.add_path([10, 11, 12])
delimiter
-1
delimiter
cv2.cvtColor(self.cvImage, cv2.COLOR_BGR2RGB, self.cvImage)
delimiter
print(synset.lemmas[0].name)
delimiter
item.created.year, item.created.month
delimiter
f.close()
delimiter
two.py
delimiter
root = ET.fromstring(data)
delimiter
[2011, 5, 8]
delimiter
a[np.isneginf(a)] = inf
delimiter
sys.stdout = buffer
delimiter
blah()
delimiter
print(root.filename)
delimiter
print(e.__context__)
delimiter
writer = csv.writer(output_file)
delimiter
name = name.lower()
delimiter
pseudocolor(20, 0, 100)
delimiter
[6, 7, 8],
delimiter
old_value = getattr(cls, name)
delimiter
converted = df.apply(lambda f: to_number(f[0]), axis=1)
delimiter
Parent.__init__(self, args[0].x, args[0].y, args[0].z)
delimiter
archive.close()
delimiter
print(pos[vertex])
delimiter
client = oauth.Client(consumer)
delimiter
MAJ = np.argmax(axes)
delimiter
fp.close()
delimiter
self.data = data
delimiter
result
delimiter
foo.foo()
delimiter
image = image.resize((tw, nh), Image.ANTIALIAS)
delimiter
sys.getsizeof(anIntOBJECT)
delimiter
pygame.quit()
delimiter
ax2 = fig.add_axes([left, bottom, width, height])
delimiter
query = parse_qs(str[1:])
delimiter
zip(a, b)
delimiter
first_pair, pair_freq = list(d2.items())[0]
delimiter
print(get_diagonal(m, 1, 4, -1))
delimiter
q.urlencode()
delimiter
raise KeyError(key)
delimiter
translation.activate(self.old_lang)
delimiter
m = np.array([([i] * 4) for i in range(4)])
delimiter
chars.extend([digit, next(symbols)])
delimiter
result = []
delimiter
print(et.tostring(r.getroot()))
delimiter
fullname = os.path.join(root, f)
delimiter
lambda *a: cls(method(*a))
delimiter
r = s[-1::-1]
delimiter
pylab.show()
delimiter
h2 = logging.StreamHandler()
delimiter
deletelines[i]
delimiter
print(link)
delimiter
popt, pcov = curve_fit(func, x, y)
delimiter
cbar = plt.colorbar()
delimiter
xv = numpy.linspace(0, 100, 200)
delimiter
sector_count = collections.Counter(item.sector for item in a)
delimiter
ninja = create_or_update_and_get(NinjaData, data)
delimiter
t.start()
delimiter
extruded[list(range(N)), cords[:, (2)], cords[:, (0)]] = 1
delimiter
print(x)
delimiter
self.webview.clearCache(True)
delimiter
Py_Initialize()
delimiter
calendar.day_name[0]
delimiter
start += len(sub)
delimiter
xs.sort()
delimiter
fill_array(arr, my_list)
delimiter
content_type = models.ForeignKey(ContentType)
delimiter
(i for i, _ in enumerate(seq, start=start))
delimiter
data
delimiter
f = Foo()
delimiter
a = 2
delimiter
nf = [x for x in data1 if x in data2]
delimiter
fig = plt.figure()
delimiter
value
delimiter
doc = lxml.html.parse(s)
delimiter
Qux.java
delimiter
f(x=1)
delimiter
py_string = PyString_FromStringAndSize(c_string, 1)
delimiter
template = self._lookup.get_template(self.template())
delimiter
datab = numpy.empty_like(image_data)
delimiter
(dates - dateshift).fillna(0).dt.days.cumsum()
delimiter
np.fromiter(x, int)
delimiter
False
delimiter
extent = [xedges[0], xedges[-1], yedges[0], yedges[-1]]
delimiter
item = heapq.heappop(items)
delimiter
a = (10 * np.random.randn(200, 200) + 127).astype(np.uint8)
delimiter
aa.indices[aa.indptr[0]:aa.indptr[1]]
delimiter
print(jo.key1)
delimiter
Python - execnet
delimiter
zeros_and_ones[x, y] = 1
delimiter
s = StringIO.StringIO()
delimiter
s = np.sin(x_axis_rotations)
delimiter
random.randint(1, self.sides)
delimiter
np.multiply(ray_point, 0)
delimiter
x[r] = x[s]
delimiter
merged = {}
delimiter
d = dict(a=a)
delimiter
dir(li)
delimiter
pkt = pkt[IP]
delimiter
search(parser.ast2list(st))
delimiter
imap_utf7.decode(imap_utf7.encode(x))
delimiter
array = np.asarray(array)
delimiter
func1()
delimiter
print(s)
delimiter
sf_client = beatbox.PythonClient()
delimiter
b = klass()
delimiter
rects = faces[0]
delimiter
sum(answer) / 2
delimiter
window = Tk()
delimiter
mainloop.run()
delimiter
show()
delimiter
self.app = app
delimiter
request_parameters = json.dumps(request_dict)
delimiter
q.set_message_class(RawMessage)
delimiter
f = NamedTemporaryFile(delete=False)
delimiter
bunch = BunchOFiles(*sys.argv[1:])
delimiter
eventlet.monkey_patch()
delimiter
form = TestForm()
delimiter
delta = A[nhb] - A[x]
delimiter
testName = testName.lower()
delimiter
n = sparkdf.rdd.getNumPartitions()
delimiter
b_thread = threading.Thread(target=get_b)
delimiter
turtle.update()
delimiter
p = x.ctypes.data_as(ctypes.POINTER(ctypes.c_double))
delimiter
schema = f.read()
delimiter
pool = Pool()
delimiter
interact(set_cursor, x=(1, 9, 0.01), y=(0, 5, 0.01))
delimiter
pyximport.install()
delimiter
deserialized_a = pickle.loads(serialized)
delimiter
np.int8(128)
delimiter
floor(0, 1)
delimiter
raise suppress_context(TheErrorClass())
delimiter
ax = plt.gca()
delimiter
print(a, b)
delimiter
ciphertext = cipher.encrypt(plaintext + (16 - len % 16) * PADDING_BYTE)
delimiter
res.sort()
delimiter
other[0][0] = True
delimiter
window = Window(root)
delimiter
hold_lines.append(row)
delimiter
p = np.asarray(prior)
delimiter
newDate = datetime.datetime(2008, 11, 42)
delimiter
row = []
delimiter
ids = [row[0] for row in cursor.fetchall()]
delimiter
json_dict = json.loads(json)
delimiter
self.instance = MyAbcClass()
delimiter
fig, axes = plt.subplots(nrows, 2)
delimiter
self.ren.GetRenderWindow().Render()
delimiter
pp.savefig(plot1)
delimiter
sum(1 / k ** 2 for k in range(1, n + 1))
delimiter
args = [iter(iterable)] * n
delimiter
tasks.register(PowersOfTwo)
delimiter
len(left), len(sep) + len(right)
delimiter
l = LineString([(0, 0), (10, 10)])
delimiter
float(sum) / n
delimiter
zip(*results)
delimiter
i.close()
delimiter
chunk = stringio.read(256)
delimiter
print([i for i in generator_overlap_split_list(l, s)])
delimiter
df = df.astype(int)
delimiter
1, 1, 0
delimiter
d[key1] = sheet.cell_value(row_index, column_index)
delimiter
sorted.__text_signature__
delimiter
db.fleas.truncate()
delimiter
z = numpy.arange(4 * 4).reshape(4, 4)
delimiter
print([next(iters[i]) for i in dx_combo])
delimiter
y[1, 1, 2]
delimiter
arr = np.arange(5)
delimiter
plt.sca(axes[1, 1])
delimiter
x[:, ([2, 1])] = x[:, ([1, 2])]
delimiter
result.append(result[-1] + 1)
delimiter
print(traverse(re.sre_parse.parse(regex).data))
delimiter
leng.count += 1
delimiter
-Xms128m
delimiter
self.dropbox_fn(filename)
delimiter
lid = np.ravel_multi_index(x.T, x.max(0) + 1)
delimiter
dir(newImg1)
delimiter
ipdb.set_trace()
delimiter
dis.dis(swap_xy)
delimiter
df = df.reset_index()
delimiter
repr(eval(self.expression))
delimiter
global_list.append(x)
delimiter
self.button.clicked.connect(self.reset_counter)
delimiter
Electronics | Computers | Laptops
delimiter
b = [2, 5, 6]
delimiter
time.sleep(i * 10)
delimiter
print(i.geoms[0].coords[0])
delimiter
root.iconbitmap(default=datafile)
delimiter
(d.day - 1) // 7 + 1
delimiter
d = MyDict(a=1)
delimiter
self.assertTrue(mock_subproc_popen.called)
delimiter
a = []
delimiter
fig = plt.figure()
delimiter
self.template = template
delimiter
[(k, OrderedDict.__getitem__(self, k)) for k in self]
delimiter
wrapper
delimiter
print(numpy.linalg.norm(y - clf2.predict(X)))
delimiter
print(xl.__module__)
delimiter
urlparse.urlsplit(url)
delimiter
h[0]
delimiter
c = a_type(b)
delimiter
output = printme.format(user=x, date=y, User=x.capitalize())
delimiter
help(numpy.sin)
delimiter
self._b = b
delimiter
self.button.setIcon(self._icon)
delimiter
json.dump(data, outfile)
delimiter
login_manager.unauthorized()
delimiter
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
data = self._fp.read(size)
delimiter
l = logging.getLogger(logger_name)
delimiter
x.sort()
delimiter
soup = BeautifulSoup(res)
delimiter
number_of_tries += 1
delimiter
BOOST_PYTHON_MODULE(example)
delimiter
array.append([])
delimiter
head, rest = split_list(my_func())
delimiter
baz.func()
delimiter
print(counter.value)
delimiter
print(list(unpack(data, 11)))
delimiter
col_i += 1
delimiter
n -= 1
delimiter
response.text
delimiter
draw()
delimiter
ListenStream = 55556
delimiter
filename = db.StringProperty()
delimiter
[f.name for f in self.model._meta.fields]
delimiter
cor.loc[:, :] = np.tril(cor, k=-1)
delimiter
foo.func(bar)
delimiter
cr = func(*args, **kwargs)
delimiter
reshaped2 = sqlContext.createDataFrame(grouped.map(make_row))
delimiter
libc.prctl(15, byref(buff), 0, 0, 0)
delimiter
s += 1
delimiter
fout.writelines(g)
delimiter
print(table_name)
delimiter
print(longest_sum([1, 2, 7, 8, 11, 12, 14, 15], [], 10))
delimiter
help(setattr)
delimiter
ax = plt.gca()
delimiter
dt[(hr >= 10) & (hr <= 16)]
delimiter
process.crawl(MySpider)
delimiter
setA = frozenset([frozenset(element) for element in listA])
delimiter
self.input.GetValue()
delimiter
sess.run(init_op)
delimiter
a.method2()
delimiter
g[:] = (elem[:2] for elem in g)
delimiter
os.chdir(app_root)
delimiter
_features[name]()
delimiter
ret.append(link[0])
delimiter
System.Security.AccessControl
delimiter
C().f()
delimiter
b = object_array(a, a, a)
delimiter
print(df)
delimiter
x = np.random.randn(5)
delimiter
order_cheese()
delimiter
max_idx, max_val
delimiter
sku_dict[color_id].append(sku)
delimiter
n = len(df[mask])
delimiter
app = Flask(__name__)
delimiter
log_file.write(s)
delimiter
a + b == c
delimiter
sys_ss = scipy.signal.tf2ss([1], [1, 2])
delimiter
self.layers = [NeuronLayer(self.n_outputs, self.n_inputs)]
delimiter
conn = MySQLdb.connect(**db_params)
delimiter
x
delimiter
self.parser = ArgumentParser()
delimiter
miny, maxy = ax2.get_ylim()
delimiter
can.create_image((x_coordinate, y_coordinate), img)
delimiter
diam_out = np.maximum.reduceat(dists, shift_idx)
delimiter
l.sort()
delimiter
raise Exception(stdout)
delimiter
best, n1, n2 = a[i] * b[j], a[i], b[j]
delimiter
rows = cursor.fetchall()
delimiter
data2 = pickle.load(pkl_file)
delimiter
print(cell.value)
delimiter
d = datetime.date(tgtdate.year, tgtdate.month, i)
delimiter
print(list(ip_to_datum_map.values()))
delimiter
pt2.getX() == pt1.getX()
delimiter
print(sums(listgen(), 20000))
delimiter
self._x = a._x
delimiter
new_self = self.__class__.objects.get(pk=self.pk)
delimiter
my_cls = MyClass()
delimiter
a.__private()
delimiter
wrapper
delimiter
txt = txt.replace(k, v)
delimiter
results.append((i, li[i], j - i))
delimiter
self.delays[type] = self.manager.dict()
delimiter
X_reduced_train = pca.fit_transform(X_train)
delimiter
rng1 = reikna_norm_rng(0, 100, 10000, 0, 1)
delimiter
ax.add_patch(circ)
delimiter
inp = alsaaudio.PCM(alsaaudio.PCM_CAPTURE, alsaaudio.PCM_NONBLOCK)
delimiter
self.app(environ, start_response)
delimiter
qs.none()
delimiter
self.data = self.request.recv(1024).strip()
delimiter
pixel_position = point[0] + point[1] * w
delimiter
get_language()
delimiter
save_uploadfile_to_disk(a_path, file)
delimiter
s.bind(i[4])
delimiter
b.attr
delimiter
download_thread.start()
delimiter
Total = Total + int(number)
delimiter
imap.logout()
delimiter
image *= 255.0 / image.max()
delimiter
db_session.add(parent)
delimiter
fig = plt.figure()
delimiter
[pri, sec, tot]
delimiter
Gtk.init([])
delimiter
rv = self.next_chunk
delimiter
server.mail(fromaddr)
delimiter
f2 = partial(f, 42.0)
delimiter
ii = np.argsort(maxvi[:, (-1)])
delimiter
self._attr
delimiter
start_response(status, response_headers)
delimiter
newlist = []
delimiter
handles, labels = ax.get_legend_handles_labels()
delimiter
i += timedelta(1)
delimiter
fig, ax1 = plt.subplots()
delimiter
eq_(0, len(instances))
delimiter
new_array = np.empty((len(uinqPos), 4))
delimiter
print(fp.read())
delimiter
colortype = 0
delimiter
df = pd.read_fwf(data_file)
delimiter
writer = csv.writer(results)
delimiter
self[key]
delimiter
d[year].append(month)
delimiter
style = ttk.Style()
delimiter
original(*args, **kwargs)
delimiter
msg = MIMEMultipart()
delimiter
pool = Pool(processes=4)
delimiter
set_color(w, newc)
delimiter
file = sys.argv[0]
delimiter
surface = pygame.surfarray.make_surface(base)
delimiter
self.src[-1].extend(items[:remainder])
delimiter
a.a
delimiter
d = json.loads(response.get_data())
delimiter
self._data.columns[col]
delimiter
chunked.append(word_pos)
delimiter
self.spawn(self.listener, get_your_channel_label(message))
delimiter
self.request.close()
delimiter
print(numpy.argwhere(a == 4.0))
delimiter
logging.root.addHandler = tracer(old_addHandler)
delimiter
x.stdout.close()
delimiter
fig = plt.figure()
delimiter
response_body = str(int(request_body) ** 2)
delimiter
QtCore.QEvent.__init__(self, InvokeEvent.EVENT_TYPE)
delimiter
mGui.mainloop()
delimiter
optionmenu.config(width=width)
delimiter
cv2.line(frame, pred[i], pred[i + 1], (0, 0, 200))
delimiter
fig, ax = plt.subplots()
delimiter
smbus_read_byte.argtypes = [c_void_p, POINTER(SMB_REQUEST)]
delimiter
lens = [len(list(g)) for k, g in groupby(sorted(l1, key=key), key=key)]
delimiter
results[i, ind] = val
delimiter
response
delimiter
a = [1, 4, 8]
delimiter
printRecur(root)
delimiter
plot([0, 1, 5, 2, 9])
delimiter
dictionary = dict(zip(*([iter(List)] * 2)))
delimiter
parser.feed(buffer)
delimiter
plt.plot(xs)
delimiter
arr = np.asarray(points)
delimiter
result += 1
delimiter
[n][n - 1][n - 1]
delimiter
current_dict = current_dict[letter]
delimiter
self.omega.append((int(round(event.ydata)), int(round(event.xdata))))
delimiter
cpid = os.fork()
delimiter
A.shape
delimiter
df
delimiter
theta = np.concatenate((theta1, theta2))
delimiter
fn = os.path.join(base, file)
delimiter
pygame.quit()
delimiter
curve = plot.plot(list(xdict.keys()), y)
delimiter
dt.timestamp()
delimiter
t = cv2.cvtColor(cam.read()[1], cv2.COLOR_RGB2GRAY)
delimiter
raise KeyError(key)
delimiter
res = c.fetchall()
delimiter
count[0]
delimiter
NULL
delimiter
x = a[1] * b[2] - a[2] * b[1]
delimiter
i = 0
delimiter
y = func(x)
delimiter
seen = set()
delimiter
article = models.ForeignKey(Article)
delimiter
count[1:] = count[1:] - count[:-1]
delimiter
print(key, value)
delimiter
dt = datetime.datetime(year=2014, month=5, day=2)
delimiter
deleter(root)
delimiter
plt.show()
delimiter
result = {}
delimiter
[i for i in original if i > lower and i <= upper]
delimiter
datetime.utcnow() + timedelta(days=1)
delimiter
fig = plt.figure()
delimiter
print(sp.width, sp.height)
delimiter
values[1:] = values[1:] - values[:-1]
delimiter
yaml.add_constructor(_mapping_tag, dict_constructor)
delimiter
L = []
delimiter
list(mem.keys())
delimiter
f = 440.0
delimiter
r = requests.post(url, data=postdata)
delimiter
q = Queue(maxsize=1)
delimiter
t = set([7, 8, 9])
delimiter
gtk.rc_parse_string(_gtk_styles)
delimiter
Function(lambda x: self(x) / other)
delimiter
widget.clear()
delimiter
col.append(np.array(num_rows * [i]))
delimiter
main()
delimiter
start = time.time()
delimiter
resp.group()
delimiter
transformed = assembler.transform(parsedData)
delimiter
results = multiprocessing.Pool(number_of_processes).map(createpdf, data)
delimiter
self.form.save.assert_called_once_with(owner=self.request.user)
delimiter
upper_white = np.array([180, sensitivity, 255])
delimiter
Languages | LANGUAGES
delimiter
groups = [data[strt:stop] for strt, stop in zip(strts, stops)]
delimiter
plt.plot(x, c)
delimiter
sys.exit(a.exec_())
delimiter
text = node.text.encode(encoding)
delimiter
user = models.ForeignKey(settings.AUTH_USER_MODEL)
delimiter
width, height = fig.canvas.get_width_height()
delimiter
defaultdict(type)
delimiter
self.it, self.nextit = itertools.tee(iter(it))
delimiter
raise AttributeError
delimiter
self.app.exec_()
delimiter
0, 2, 1
delimiter
tk.Frame.pack(self)
delimiter
application = Cling(get_wsgi_application())
delimiter
cursor = connection.cursor().execute(sql)
delimiter
grid = np.arange(100).reshape((10, 10))
delimiter
assert p(f.read(2)) == 5
delimiter
total += (i / j).sum()
delimiter
handle.read()
delimiter
tree = html.parse(url)
delimiter
yy = np.hstack([-1 * y[::-1], y])
delimiter
firstDigit = x[0]
delimiter
words = list(map(process_group, groups))
delimiter
pic = cStringIO.StringIO()
delimiter
data1 = pickle.load(pkl_file)
delimiter
zip_ok = 0
delimiter
print(StudentTCI(1, 2, 10))
delimiter
X, X().foo()
delimiter
deferred.defer(count_colors)
delimiter
self.upper()
delimiter
x_test = np.array([i[1::] for i in test_data])
delimiter
sess = tf.Session()
delimiter
d = pd.to_datetime(df.last_updated)
delimiter
emit(doc.location, [meta.id, doc.location])
delimiter
print(i.geoms[1].coords[0])
delimiter
self.i = 0
delimiter
self.zipfile.extractall(tmp_dir)
delimiter
plt.colorbar(myplot, format=ticker.FuncFormatter(fmt))
delimiter
p.join()
delimiter
img_list = os.listdir(path)
delimiter
imp.reload(module)
delimiter
M[sorter[index]]
delimiter
print(cur.getDatabases())
delimiter
ascii_counts[ord(c)] += 1
delimiter
cur.close()
delimiter
self.theWholeList.append(x)
delimiter
np.maximum.reduceat(dists, shift_idx)
delimiter
a.difference(b)
delimiter
t = threading.Thread(target=target)
delimiter
data = np.random.randn(100, 10)
delimiter
np.mean(values_sorted[[median_index, next_median_index]])
delimiter
c = Console.getconsole()
delimiter
print(respose.headers)
delimiter
self.baseDict = baseDict
delimiter
unique_word_count = len(set(words))
delimiter
big_df = big_df.append(df)
delimiter
smean.on_changed(update)
delimiter
print(h.unescape(s))
delimiter
eltsize = ctypes.sizeof(typ)
delimiter
popt, pcov = scipy.optimize.curve_fit(vcurve, xdata, ydata, p0=[2.0])
delimiter
test1.timestamp = datetime.datetime.now() - datetime.timedelta(hours=2)
delimiter
last_name = models.CharField(max_length=80, blank=False, null=False)
delimiter
dy_dt = np.gradient(a[:, (1)])
delimiter
f.headers.headers
delimiter
canvas.delete(ALL)
delimiter
bg_img.composite(fg_img, left=100, top=100)
delimiter
answer.append(flatResults.pop(0))
delimiter
A_exact = 20 * numpy.random.random((n_samples, n_inputs))
delimiter
result = result.intersection(s)
delimiter
prevday = theday - datetime.timedelta(days=1)
delimiter
bw2 = thinning(bw2)
delimiter
ax = subplot(111)
delimiter
cx1 = self._gen.random_integers(0, self.N - 2)
delimiter
self.menu.addItem_(menuitem)
delimiter
col_size[i] = max(col_size.get(i, 0), len(col))
delimiter
width, height = im.size
delimiter
logger.addHandler(fh)
delimiter
x_min = tf.reduce_min(weights)
delimiter
c = np.dot(a, b)
delimiter
now = datetime.datetime.now()
delimiter
process = subprocess.Popen(command, stdout=writer)
delimiter
mlab.close(fig)
delimiter
form = ContactForm(request.params)
delimiter
Xd = manifold.LocallyLinearEmbedding().fit_transform(X)
delimiter
x * x
delimiter
a2 = np.empty((M, 2, 2))
delimiter
cnt[word] += 1
delimiter
h1, l1 = ax1.get_legend_handles_labels()
delimiter
sniff_on_connection_fail = True
delimiter
x = np.random.rand(1000) * 10
delimiter
Vprods = np.multiply.reduceat(values, group_changes)
delimiter
o = json.loads(s, object_hook=as_person)
delimiter
arr = np.vstack(values)
delimiter
d == 1
delimiter
first_shaders_dict = {}
delimiter
z_itp = r * np.outer(np.cos(theta_itp), np.ones_like(phi_itp))
delimiter
fields = [val for val in form._fields]
delimiter
xfiltered
delimiter
opener = urllib.request.build_opener()
delimiter
poly = np.polynomial.polynomial.Polynomial(poly_coeff)
delimiter
df.columns
delimiter
newMtx = Mtx[:, ((s.A > 0)[0])]
delimiter
image.set_from_pixbuf(pixbuf)
delimiter
args = parser.parse_args()
delimiter
test2 = Test()
delimiter
handler = MyHandler
delimiter
cls.from_buffer(a, aligned - addr)
delimiter
font_args = [cairo.FONT_SLANT_NORMAL]
delimiter
tabWidget.load(QtCore.QUrl(url))
delimiter
Frame.__init__(self, master)
delimiter
sm_obj.set_x509_stack(sk)
delimiter
assert x.dtype == y.dtype
delimiter
print(one_array, two_array)
delimiter
unixtime = dt - datetime.datetime(1970, 1, 1)
delimiter
a1 = A[..., (1)]
delimiter
foo.__code__.co_argcount
delimiter
idx[0] -= 1
delimiter
self.base = Base()
delimiter
op = s.pop()
delimiter
1
delimiter
cols.insert(0, x)
delimiter
print(combination)
delimiter
self.thisptr.calculate(a)
delimiter
isanimated = True
delimiter
c = [(i[1] - i[0]) for i in zip(a[:-1], b)]
delimiter
Child().access_eclipsed()
delimiter
wait = WebDriverWait(driver, 10)
delimiter
mh11 = mh10 - h1 / 20 + h21 / 20
delimiter
reader = csv.DictReader(inf)
delimiter
z = a[0] * b[1] - a[1] * b[0]
delimiter
fd.close()
delimiter
s.send(pickleData)
delimiter
pixels = []
delimiter
a = [4, 5, 0, 0, 6, 7, 0, 1, 0, 5] * 1000000
delimiter
column_names = []
delimiter
do_something_else_2()
delimiter
assert 0.0 + nextafter(0, 1) > 0.0
delimiter
is_canceled = Column(Boolean, default=False)
delimiter
hashtags.append(name)
delimiter
ndarray = np.array(array_wrapper, copy=False)
delimiter
matriz = np.random.randn(10, 10)
delimiter
l[t] = something
delimiter
filechecker()
delimiter
page = response.read()
delimiter
data = StringIO.StringIO(data)
delimiter
temp_list.append(a)
delimiter
main()
delimiter
d.append(new_row)
delimiter
individuals.append(individuals.loc[1]).dtypes
delimiter
plt.plot(*p.linspace())
delimiter
rows, cols = np.nonzero(img)
delimiter
_f = sc._jvm.com.blu.bla.MySum().apply
delimiter
f.close()
delimiter
nll = -lg[mask].sum()
delimiter
instance.is_initialized = False
delimiter
print(row)
delimiter
request.write(values)
delimiter
f = lambda x: 2 * x
delimiter
res.append(func(*args))
delimiter
str1_list = list(str1)
delimiter
chromeOptions = webdriver.ChromeOptions()
delimiter
print(lt.tm_gmtoff / (60 * 60) - (1 if lt.tm_isdst == 1 else 0))
delimiter
d = json.load(json_data)
delimiter
time.sleep(60)
delimiter
tree = etree.parse(data)
delimiter
self.setWindowFlags(Qt.Popup)
delimiter
im = Image.open(buf)
delimiter
[item for sublist in lst for item in sublist]
delimiter
q += 1
delimiter
n = n - 1
delimiter
new_list = [x for x in filled_list(src_list, 100)]
delimiter
assert isinstance(value, datetime.datetime)
delimiter
text = sys.argv[1]
delimiter
item += [1]
delimiter
self.db[self.collection_name].insert(dict(item))
delimiter
print([x for x in roundrobin(*list(group.values()))])
delimiter
G = nx.MultiGraph()
delimiter
result.append(next(g))
delimiter
cnx._open_connection()
delimiter
b = np.array([line for line in a[:, (0)]])
delimiter
the_dict
delimiter
email = models.EmailField(max_length=50)
delimiter
father.appendChild(tag)
delimiter
stdout.write(choice(ascii_lowercase))
delimiter
len(self.object_list)
delimiter
traceback.print_exception(type(cause), cause, cause.__traceback__)
delimiter
streak = 0
delimiter
flag.Parse()
delimiter
image = cv.CreateImageHeader(tiff.size, cv.IPL_DEPTH_8U, 1)
delimiter
newdf = df.select_dtypes(include=numerics)
delimiter
rows = np.array([1, 100, 1000])
delimiter
perf_func(child, func, level + 1)
delimiter
w = 2 * np.pi * r
delimiter
cbar4 = plt.colorbar(im4, cax=cax4)
delimiter
flooded = img.copy()
delimiter
sin(x) + cos(x)
delimiter
d = datetime.date(2011, 7, 2)
delimiter
z = np.array([[0.0 + 0j, 2.0 + 1j, -1.0 + 4j]])
delimiter
app = Flask(__name__)
delimiter
pilImage = Image.open(inputImage)
delimiter
a[a > 0] = 255
delimiter
Counter(pop_flat).most_common()
delimiter
list(helper(parts))
delimiter
shape = np.sqrt(np.log(sol))
delimiter
getattr(handler.request, method).add()
delimiter
np.clip(dat, 0, 1, out=dat)
delimiter
B.ham == A.ham
delimiter
print(x)
delimiter
cherrypy.quickstart(HelloWorld(), config=conf)
delimiter
data = json.loads(response.body)
delimiter
found = set([])
delimiter
my_func_called_inside_a_task(celery_callback=True)
delimiter
print(data)
delimiter
args = docopt(__doc__)
delimiter
self.comboBox.currentIndexChanged.connect(slotLambda)
delimiter
ax.add_artist(plt.Circle((xvals[q], yvals[q]), rvals[q], color=[0, 0, 0]))
delimiter
sequence = [seq2.index(element) for element in seq]
delimiter
ret = ipcap.geterror()
delimiter
indices = np.arange(y.shape[0])
delimiter
self.children = []
delimiter
dom = minidom.parseString(xml)
delimiter
string.Template(tem).substitute(m)
delimiter
self.axes = fig.add_subplot(111)
delimiter
Tk.after(parent, 1000, change)
delimiter
t1.join()
delimiter
pool.apply(func=update, args=(counter, i))
delimiter
data[i - window:i + window + 1].mean()
delimiter
-1
delimiter
cls._metadata = get_class_metadata(cls)
delimiter
log.addHandler(txt_handler)
delimiter
driver.find_element_by_id(id).click()
delimiter
assets = []
delimiter
fig, (ax1, ax2) = plt.subplots(nrows=2)
delimiter
s.any() == 1
delimiter
z = map(float, z)
delimiter
Result = map(tuple, list(d.items()))
delimiter
olApp = gencache.EnsureDispatch(clsid)
delimiter
s[:2]
delimiter
print(key, value, d2[key])
delimiter
db = _get_db()
delimiter
fig = plt.gcf()
delimiter
recv2 = clientSocket.recv(1024)
delimiter
recv4 = clientSocket.recv(1024)
delimiter
recv5 = clientSocket.recv(1024)
delimiter
lst
delimiter
soup = BeautifulSoup(response)
delimiter
self.dependency.__exit__(exc_type, exc_val, exc_tb)
delimiter
pg.QtGui.QGraphicsPathItem.__init__(self, self.path)
delimiter
n = _nbits[c].sum()
delimiter
ch = logging.StreamHandler(sys.stdout)
delimiter
p(2) / 2 + p(2) / 2 + p(4) / 2
delimiter
appName = NSProcessInfo.processInfo().processName()
delimiter
self.data = list(data)
delimiter
wlist.append(proc.stdin)
delimiter
raise KeyError(key)
delimiter
exitstatus, signum = os.WEXITSTATUS(status), os.WTERMSIG(status)
delimiter
a = C()
delimiter
t.set_visible(False)
delimiter
my_set = set(first_list)
delimiter
shared_items = set(x.items()) & set(y.items())
delimiter
print(StringIO(file2.read()).getvalue())
delimiter
first, rest = unpack(*seq)
delimiter
d = {(0): l}
delimiter
weighted_sum = np.apply_along_axis(exp_func, 0, clipped_background)
delimiter
db_engine = create_engine(DATABASE_CONNECTION_INFO, echo=False)
delimiter
mybasemodel_set = MyBaseModelField(many=True)
delimiter
geo = Geometry(0, 0, 1, 1)
delimiter
json.dumps(d)
delimiter
ax5 = plt.subplot2grid((6, 1), (4, 0), rowspan=2)
delimiter
age = db.StringProperty()
delimiter
hub.wait(watcher)
delimiter
std = np.sqrt(sy2 / n - mean * mean)
delimiter
b += [c]
delimiter
abs(n - m)
delimiter
translater.install(str=True)
delimiter
user = User.objects.get(pk=user_id)
delimiter
SubClassWithoutDocstring().__doc__
delimiter
fly.rect.bottom = hit.rect.top
delimiter
levels = np.linspace(vmin, vmax, 200, endpoint=True)
delimiter
data
delimiter
datetime.min + (q + 1) * delta if r else dt
delimiter
pumpedThread = threading.Thread(target=pumpWx, args=())
delimiter
final_ensemble
delimiter
results.append(left[0])
delimiter
df
delimiter
-1 // 2
delimiter
datetime.min + math.ceil((dt - datetime.min) / delta) * delta
delimiter
plt.scatter(xc, yc, c=cols, label=cla)
delimiter
fout.write(line)
delimiter
a[:len(b)] = b
delimiter
self.queue.put(event)
delimiter
print(foo)
delimiter
foo1()
delimiter
print(repr(path), (newpath, tail))
delimiter
img_grand = pyexiv2.Image(grand)
delimiter
print(canonical_form([1, 1, 1, 0, 0, 2, 6]))
delimiter
fig, ax = plt.subplots()
delimiter
accum0 = []
delimiter
(x + (n,) for x in seq for n in f(x[-1]))
delimiter
socket = pyudt.pyudt_socket()
delimiter
others = l[:index] + l[index + 1:]
delimiter
item = Item()
delimiter
a = A()
delimiter
print(a.current)
delimiter
writer = csv.writer(output_file_handle)
delimiter
lines.append(string[i:i + every])
delimiter
tid
delimiter
ser = pd.Series([-1, 1, np.nan])
delimiter
f.__name__
delimiter
x = np.linspace(-5, 5, 101)
delimiter
_f
delimiter
systems.append(system)
delimiter
x + 1
delimiter
CrawlSpider.__init__(self)
delimiter
print(arrayT(data[0], [0.29, 4.5]))
delimiter
raise ConcurrentModificationError(cls.__name__, self.pk)
delimiter
df
delimiter
in_first = set(first_list)
delimiter
ctx.select_font_face(font, *font_args)
delimiter
plt.fill_between(x, 0, s)
delimiter
self.Gender = Gender
delimiter
str(attribute)
delimiter
print(getmembers(clf.tree_))
delimiter
deleter(data)
delimiter
DEBUG = True
delimiter
file
delimiter
df = df.stack()
delimiter
reps = []
delimiter
ABCD = numpy.concatenate([AB, CD], 0)
delimiter
Expression(body=BinOp(left=Num(n=2), op=Add(), right=Num(n=2)))
delimiter
s = set([0, 1])
delimiter
_[0]
delimiter
two[0, 0, 0] = np.array([[2, 2]])
delimiter
arr = np.asarray(str_bytes)
delimiter
g, x, y = egcd(a, m)
delimiter
points = data[:, 2:4]
delimiter
query = users.select().order_by(users.c.id.desc())[-5:]
delimiter
new_array[i, Y[i]] = 1
delimiter
0
delimiter
thread.start_new_thread(do_it, ())
delimiter
a = [1] * 50
delimiter
resultlist = []
delimiter
datasets[-1].append(stripped_line)
delimiter
x = y
delimiter
crawler.crawl(RaEventSpider())
delimiter
norm = matplotlib.colors.Normalize(vmin=np.min(Z), vmax=np.max(Z), clip=False)
delimiter
print(result)
delimiter
w = pyglet.window.Window()
delimiter
d[j].append(i)
delimiter
Py_Initialize()
delimiter
spam_lite.update()
delimiter
self.__dict__.pop(k, d)
delimiter
fly.rect.top = hit.rect.bottom
delimiter
raise
delimiter
g.logout()
delimiter
sizer = wx.BoxSizer(wx.VERTICAL)
delimiter
self._protected()
delimiter
C1.__init__
delimiter
M[(1), :] *= 2
delimiter
print(globals() is locals())
delimiter
d = {}
delimiter
mailserver.ehlo()
delimiter
LHS, RHS = [0, 1], [-LHS[0] / LHS[1]]
delimiter
person = Person()
delimiter
__init__.py
delimiter
cls._registry.append(cls)
delimiter
centroids[i][m] += row[m] / len_best
delimiter
application = app
delimiter
my_dict = dict(string)
delimiter
time.sleep(0.1)
delimiter
int(s)
delimiter
array[0]
delimiter
self.pipereadstreams.append(readStream)
delimiter
a = [[]] * 10
delimiter
socket.setdefaulttimeout(new_timeout)
delimiter
app = Flask(__name__)
delimiter
outFile.write(buf)
delimiter
MyModel.timestamp._auto_now = False
delimiter
random.shuffle(pool)
delimiter
print(resource_path)
delimiter
item.firstChild.replaceWholeText(data[name])
delimiter
print(df)
delimiter
print(config_root.server.name)
delimiter
indicies_nonzero.append(index)
delimiter
print(df)
delimiter
self.canv.restoreState()
delimiter
o.write(line + plat[platform])
delimiter
files = os.listdir(directory)
delimiter
assert numpy.all((R1 - R1_) ** 2 < 1e-16)
delimiter
source_list = inspect.getsourcelines(my_module)
delimiter
print(df.reindex(cum.index))
delimiter
dset_y.append(y_chunk)
delimiter
row = df.iloc[0]
delimiter
p[0]
delimiter
self.create_response(request, game.start())
delimiter
plt.matshow(plot_matrix, cmap=colormap)
delimiter
predictions = model.predict(gaussianKernelGramMatrix(Xval, X))
delimiter
message.attachments = [(attachment_name, attachment.value)]
delimiter
process_handle = OpenProcess(SYNCHRONIZE, False, pid)
delimiter
out = os.read(proc.stdout.fileno(), 10)
delimiter
data_md5 = hashlib.md5(bencode.bencode(data)).hexdigest()
delimiter
df2[column] = list(map(diff, df[column], ref[column]))
delimiter
fig, ax = plt.subplots()
delimiter
dstname = os.path.join(dst, name)
delimiter
print(property.name)
delimiter
print(addsf1)
delimiter
print(str(datetime.datetime.now()))
delimiter
new_time = time.time()
delimiter
queue.write(json.loads(line.strip()))
delimiter
self.saturated()
delimiter
see(x)
delimiter
data * 2
delimiter
driver.get(target_url)
delimiter
bmp = wx.EmptyBitmap(size[0], size[1])
delimiter
True
delimiter
zeros_and_ones = numpy.zeros([width, height])
delimiter
X, Y = NP.meshgrid(x, y)
delimiter
newI()
delimiter
page.close()
delimiter
other[0][0] = False
delimiter
1024.0
delimiter
print(row)
delimiter
arr[0, -1] = 100
delimiter
interpolator(x)
delimiter
Ml = mat.tolil()
delimiter
a.sort()
delimiter
result += letters[index - shift]
delimiter
type(my_pandas_frame[100])
delimiter
pointCloud.addPoint([0, 0, 0])
delimiter
plt.xticks(np.arange(min(bins) + bin_w / 2, max(bins), bin_w), bins, **kwargs)
delimiter
self.song1.setVolume(1 - fadevalue)
delimiter
any(value in x for x in self.sets)
delimiter
crawler.queue.append_spider(another_spider)
delimiter
probabilities = numpy.random.multinomial(n, zip(*pairs)[0])
delimiter
arr = np.split(arr, indc, axis=1)
delimiter
j += 1
delimiter
result = copy(dateList)
delimiter
results = sorted(results_dict.items())
delimiter
Z = X * Y.T
delimiter
event_date = models.DateField()
delimiter
singles.append(p)
delimiter
self.file, self.filename
delimiter
mvv_array = [int(i.mvv) for i in mvv_list.collect()]
delimiter
sprites.append(sprite)
delimiter
QApplication.clipboard().setImage(QImage.fromData(buf.getvalue()))
delimiter
Y = EY + np.random.normal(size=n) * np.sqrt(20)
delimiter
x, y = line.split()
delimiter
processes[i] = multiprocessing.Process(target=child_process.run, args=(i,))
delimiter
u = np.empty(n, dtype=np.int64)
delimiter
self._queue = q
delimiter
df = pandas.DataFrame(df, dtype=str)
delimiter
self.alist.extend(args)
delimiter
err_ys.append((y - yerr, y + yerr))
delimiter
denominator = df.sum(0).sum(0)
delimiter
profile = Profile.objects.create(user=user, **profile_data)
delimiter
update.alters_data = True
delimiter
crawler.configure()
delimiter
--report_task.py
delimiter
l
delimiter
pr.enable()
delimiter
supported_file_types = fcb.get_supported_filetypes()
delimiter
new_path = list(path)
delimiter
c // (n + 1)
delimiter
i += 1
delimiter
Clock.schedule_interval(self.add_string, 0.5)
delimiter
print(outQ.get_nowait())
delimiter
conn.sendto(some_data, MY_SERVER)
delimiter
cron.write()
delimiter
new_jk = numpy.random.multinomial(1, numpy.reshape(p, T * S)).argmax()
delimiter
df.Date = pd.to_datetime(df.Date)
delimiter
{song.album for song in self.allSongs}
delimiter
hstack((B2, D))
delimiter
flask.jsonify(error=404, text=str(e)), 404
delimiter
getattr(self, method)()
delimiter
tokens = deque(f.read().split())
delimiter
update_object(form_class=FooForm, object_id=object_id)
delimiter
get_stems_recursive(list(all_stems.items()), list(), result)
delimiter
transferData.upload_file(file_from, file_to)
delimiter
Book.objects.filter(**filters)[:limit]
delimiter
self.goal.field.add(new_field)
delimiter
is_word.words = {word.strip() for word in f}
delimiter
output.flush()
delimiter
a[l[i][0]][l[i][1]] = b[i]
delimiter
cal = France()
delimiter
pygame.init()
delimiter
print(len(parts))
delimiter
ratio = float(len(a)) / float(len(a) + len(b))
delimiter
print(MyClassFactory.theWholeList)
delimiter
plt.figure()
delimiter
self.ready.notify_all()
delimiter
M.ix[0]
delimiter
tf.concat(0, data)
delimiter
test()
delimiter
r.delete(key)
delimiter
doc.build(text)
delimiter
output.write(string_fin)
delimiter
a = A()
delimiter
tplsum = np.array([tpl[:, :, (i)].sum() for i in range(D)])
delimiter
[(ay + be) for ay, be in zip(a, b)]
delimiter
print(maximal_sum(M))
delimiter
main_parser.parse_args(replace_dashes_from_args(sys.argv[1:]))
delimiter
time.sleep(wait)
delimiter
owner.what = owner.what.__iadd__(2)
delimiter
dict_writer = csv.DictWriter(fou, fieldnames=fieldnames)
delimiter
any(isinstance(e, int) and e > 0 for e in [0, 0, 1])
delimiter
Wizard.NextButton.Click()
delimiter
[np.arange(s, e) for s, e in zip(start, end)]
delimiter
res
delimiter
gevent.sleep(0.1)
delimiter
cols = list(set(result.dtype.names).intersection(a.dtype.names))
delimiter
foo[0] is boo
delimiter
PyEval_RestoreThread(mainThreadState)
delimiter
self.__dict__.update(decoratee.__dict__)
delimiter
DataFrame
delimiter
s.blit(alpha_img, (0, 0), special_flags=pygame.BLEND_RGBA_MULT)
delimiter
[1, 24, 4, 5] in a
delimiter
gb = df2.swaplevel(0, 1, 1).sort_index(1).groupby(level=0, axis=1)
delimiter
prefix = decPrefixes[-1]
delimiter
root.mainloop()
delimiter
self.sender.disconnect(self.handle)
delimiter
plt.colorbar()
delimiter
do_something(my_value)
delimiter
n / 1 << n.bit_length() - 1
delimiter
mask1[idx1], mask2[idx2]
delimiter
counter += 1
delimiter
print(a)
delimiter
tmp = a2[:x].copy()
delimiter
string[0]
delimiter
rmin, rmax = np.where(rows)[0][[0, -1]]
delimiter
d = OrderedDict()
delimiter
dill.detect.trace(False)
delimiter
parsed_result[name].append(value)
delimiter
self.connected = False
delimiter
d_time2t_stamp = pd.to_datetime(d_time)
delimiter
cookies = cherrypy.response.cookie
delimiter
print(results.get())
delimiter
int(21 / 5) + (21 % 5 > 0)
delimiter
True
delimiter
list(fields_660.keys())
delimiter
years = collections.defaultdict(list)
delimiter
s = io.BytesIO()
delimiter
new_shape = rows / 2, cols / 2
delimiter
tk = tkinter.Tk()
delimiter
clientSocket.close()
delimiter
foo = d[x]
delimiter
not all(row)
delimiter
gst.element_link_many(self.source, self.scaler, self.fvidscale_cap, self.sink)
delimiter
keep.append(item)
delimiter
m[1][0] = 99
delimiter
df = pd.read_csv(StringIO(txt1))
delimiter
seq.append(next(it))
delimiter
setattr(cls, name, decorator(m))
delimiter
entity.after_put()
delimiter
a = numpy.random.random((10, 10))
delimiter
print(add5(10))
delimiter
file_handler.setFormatter(formatter)
delimiter
ctx.restore()
delimiter
selected.append(perm)
delimiter
r = requests.put(post_url, auth=auth, headers=headers, data=json.dumps(doc))
delimiter
self.wv.webview.getUrl()
delimiter
badset = set(badlist)
delimiter
tag.replaceWith(s)
delimiter
n, bins = np.histogram(samples, bins=int(np.sqrt(N)), density=True)
delimiter
data = [float(v) for v in line.split() for line in file]
delimiter
[s]
delimiter
pprint.pprint(d)
delimiter
m_to_M[1:, (0)] = -nrange[1:-1].reshape((n - 2, 1))
delimiter
proc.start()
delimiter
self.data = data
delimiter
d = datetime.date(2011, 9, 28)
delimiter
print(list(k))
delimiter
y[0] = 5
delimiter
a + b
delimiter
self.__class__(**arguments)
delimiter
s.update(list(range(4)))
delimiter
source = s.get_source()
delimiter
start = time.time()
delimiter
d = date(year, 1, 4)
delimiter
Base = declarative_base()
delimiter
fig.add_axes(ax)
delimiter
formset = QuoteFormSet(request.POST, request.FILES)
delimiter
x = 1
delimiter
[2, 1]
delimiter
a[idx]
delimiter
X_ = X - X.mean(0)
delimiter
type(True)
delimiter
x2 = np.interp(width_S, S_values_2[-1:idx - 1:-1], F_values_2[-1:idx - 1:-1])
delimiter
addChild(image)
delimiter
a, b = tee(iterable)
delimiter
providers = Provider.objects.all()
delimiter
tree = etree.fromstring(XML)
delimiter
self.client = redis.Redis(connection_pool=self.connection_pool)
delimiter
new_lists.append([])
delimiter
print(content.readlines())
delimiter
opener = urllib.request.build_opener()
delimiter
False
delimiter
np.allclose(cdist_split(pairs, positions), XYZ_merged(pairs, positions))
delimiter
b = a + b
delimiter
mask[y:y + h, x:x + w] = 255
delimiter
fig = figure(width=500, plot_height=500)
delimiter
dates = [20020514, 20020515, 20020516, 20020517, 20020520]
delimiter
print(a[(1), :])
delimiter
overlaps < -int_overlaps(int[index[1,]], int[index[2,]])
delimiter
ob.stackoverflow()
delimiter
webcode.html
delimiter
a = foo()
delimiter
fig = plt.figure()
delimiter
cursor.batch_size(1000)
delimiter
output = StringIO()
delimiter
data = globalsfiltered()
delimiter
proc.terminate()
delimiter
include_dirs.append(arg[2:])
delimiter
pos = nx.spring_layout(Gcc)
delimiter
safe_matches = [re.escape(m) for m in matches]
delimiter
mystrategy.example()
delimiter
w = wave.open(wave_file)
delimiter
num = 1
delimiter
setattr(self.instance, name, value)
delimiter
i += 2
delimiter
days, hours = divmod(hours, 24)
delimiter
self.totalsize
delimiter
len(self.data)
delimiter
raise AttributeError()
delimiter
a = b[:, (0)].copy()
delimiter
len(sys.argv) > 1 and scan(sys.argv[1])
delimiter
print(ws.cell(rx, cx).value, ws.cell(rx, cx).ctype)
delimiter
print(count_common(l1, l2))
delimiter
raise AttributeError(attr_name)
delimiter
df = pd.DataFrame(d.T)
delimiter
print(myList)
delimiter
m = multiprocessing.Manager()
delimiter
content = urllib.request.urlopen(base_url + symbol).read()
delimiter
a = [(float(val) / pow(2, 15)) for val in a]
delimiter
name = models.CharField(max_length=255, blank=False, null=False)
delimiter
s.describe()
delimiter
line.replace(self.ind, self.outd)
delimiter
print(the_matrix[0])
delimiter
a = np.arange(24)
delimiter
test_module1.py
delimiter
a.name, b.name = b.name, a.name
delimiter
hanoi(n - 1, start, target, aux)
delimiter
key.make_public()
delimiter
master_writer.save()
delimiter
transaction.savepoint_commit(sid)
delimiter
tag, body = next(iter(list(d.items())))
delimiter
mask = x ** 2 + y ** 2 <= radius ** 2
delimiter
self.lop._getsymbols() + self.rop._getsymbols()
delimiter
t
delimiter
1
delimiter
enc = base64.b64encode(base64.b64decode(s)).strip()
delimiter
b.values.argmax(1)
delimiter
unpickler = cPickle.Unpickler(f)
delimiter
protocol = QNetworkProxy.HttpProxy
delimiter
d = collections.defaultdict(int)
delimiter
tcl = Tcl()
delimiter
out = np.zeros((A.shape[0] + len(cut_idx), 2), dtype=A.dtype)
delimiter
v[:] = [0, 0, 0]
delimiter
combos = it.product(*list(by_parent.values()))
delimiter
x = f.read()
delimiter
bin_array.append(int(byte, 2))
delimiter
re.split(regexPattern, example)
delimiter
a = np.ndarray(shape=(N, 0))
delimiter
themodule_foo(PyObject * self, PyObject * args, PyObject * keywds)
delimiter
mylog = logging.getLogger(logname)
delimiter
print(eastern.localize(test2))
delimiter
p.wait()
delimiter
im.axes.figure.colorbar(im, cax=cax, **kwargs)
delimiter
self.sock.connect(self.host)
delimiter
seen.update(rn)
delimiter
P.drawOn(canvas, doc.leftMargin, 10)
delimiter
y16 = []
delimiter
np.save(f, c)
delimiter
stats.binom_test(500, 10000)
delimiter
self.song2 = song2
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
context = {}
delimiter
split[-1][-1].append(r)
delimiter
idx = np.flatnonzero(flags)
delimiter
print(val)
delimiter
username = user.username
delimiter
text = subprocess.check_output(command)
delimiter
pythons_psutil = []
delimiter
a.apples()
delimiter
False
delimiter
results.append(string[last_stop:start])
delimiter
attr_name_to_attr[attr_name].set(attr_value)
delimiter
boston = load_boston()
delimiter
res1 = np.dot(A, B)
delimiter
dictpsl[key] = []
delimiter
obj = np.asarray(input_array).view(cls)
delimiter
first_a.test()
delimiter
dataframe = pd.DataFrame(data=mat.astype(float))
delimiter
self.foriterator(self.start, self.stop, self.step)
delimiter
res[i, j] = dot_product(Aview[i], Aview[j], A.shape[1])
delimiter
print(df)
delimiter
foo.bar = partialmethod(foo.bar, qux=1)
delimiter
result[0], result[-1]
delimiter
username = models.CharField(max_length=256, null=True)
delimiter
stretch_unpooling_out = neibs2images(stacked_conv_neibs, self.pl, self.x.shape)
delimiter
df = pd.io.json.json_normalize(d)
delimiter
ordered = OrderedDict(pairs)
delimiter
seconds = dhms_to_seconds(*convert_timedelta(duration))
delimiter
os._exit()
delimiter
a.sort()
delimiter
a, b, c, d
delimiter
u.load()
delimiter
print((x, len(seen)))
delimiter
nextone = min((current // a + 1) * a, (current // b + 1) * b)
delimiter
fig = plt.figure()
delimiter
print(key, count[key])
delimiter
year_range = np.arange(min_year, max_year + 1)
delimiter
lock.acquire()
delimiter
id(a) == id(b)
delimiter
[], 1
delimiter
xx, yy = np.meshgrid(list(range(-1, 1)), list(range(-1, 1)))
delimiter
msvcrt.fflush(msvcrt.stdout)
delimiter
out = []
delimiter
util1.py
delimiter
data = np.arange(k ** n).reshape((k,) * n)
delimiter
x1 = np.random.normal(size=N)
delimiter
pylab.show()
delimiter
path = self.in_queue.get()
delimiter
print(list(l))
delimiter
new_matrix
delimiter
x, y, w, h = win.get_allocation()
delimiter
blob_info = blobstore.BlobInfo.get(resource)
delimiter
treeselection = treeview.get_selection()
delimiter
res
delimiter
fig = plt.figure(figsize=(ypixels / dpi, xpixels / dpi), dpi=dpi)
delimiter
print(avg)
delimiter
ind = np.arange(len(data)) + window
delimiter
arrays[0].__array_wrap__(numpy.hstack(arrays))
delimiter
v = numpy.linspace(-1 * numpy.pi / 2, numpy.pi / 2, 100)
delimiter
b = c_ulong(2)
delimiter
print(a)
delimiter
ABSTRACT_FACTORY = True
delimiter
solution1 = (-b - cmath.sqrt(d)) / (2 * a)
delimiter
print(combineArs(dict1[dimmKey], dict2[pwfs2Key]))
delimiter
json.dumps(self)
delimiter
scipy.misc.imshow(extracted_filter)
delimiter
22.152261
delimiter
0.284024
delimiter
7.580967
delimiter
Bar(income_df, notebook=True).show()
delimiter
print(x * 10)
delimiter
plt.legend()
delimiter
a = binascii.hexlify(bytes([1, 10, 15, 16, 255]))
delimiter
tr = tender_data.values[:, 5:]
delimiter
ax.scatter(data.Lon, data.Lat, c=data.Z, s=100, vmin=zi.min(), vmax=zi.max())
delimiter
a = a + 10
delimiter
print(df2)
delimiter
portfolio.append(entry)
delimiter
lock = threading.Lock()
delimiter
recurse()
delimiter
df.index.inferred_freq
delimiter
time.sleep(15)
delimiter
str(dict(self))
delimiter
green = pygame.Surface((100, 100), 0)
delimiter
test_updates(my_dict)
delimiter
plt.imshow(pic)
delimiter
root = tk.Tk()
delimiter
encoded = ohe.fit_transform(orig.reshape(-1, 1))
delimiter
l, d = foo()
delimiter
tmp = np.zeros((n + 1, n + 1), bool)
delimiter
portfolios = list(p for p in cp if sum(p) == 100)
delimiter
read = p.stderr.readline()
delimiter
l = [8, 10, 4, 5, 7]
delimiter
print(date.toordinal(date(1970, 1, 1)))
delimiter
curr = curr[1:] + (x,)
delimiter
t, p = f_oneway(*list(data.values()))
delimiter
myobj = MyClass()
delimiter
d = NP.digitize(A, bins)
delimiter
crossing = [math.copysign(1.0, s) for s in signal]
delimiter
print(merge([L1, L2]))
delimiter
data = np.abs(data)
delimiter
A = A[1:].T[::-1]
delimiter
cimage.seek(0)
delimiter
c()
delimiter
procd = [c for c in string]
delimiter
y = np.asanyarray(y)
delimiter
heapify(i, 0)
delimiter
__all__.append(name)
delimiter
total = np.sum(values[mask])
delimiter
im = Image.open(fn)
delimiter
req = requests.post(url, data=my_json_data)
delimiter
collections.OrderedDict.__init__(self)
delimiter
xy = np.random.random((2, num)) + 0.01 * np.arange(num)
delimiter
print(i)
delimiter
out, err = p.communicate()
delimiter
window_height = int(img.shape[0] * scale)
delimiter
dx, dy = dy, dx
delimiter
b = copy.copy(a)
delimiter
script_path = os.path.realpath(__file__)
delimiter
print(msg.SentOn)
delimiter
df[col] = df[col].ffill()
delimiter
crypt.mksalt(crypt.METHOD_SHA512)
delimiter
y
delimiter
tpool.execute(m)
delimiter
False
delimiter
IPython.embed()
delimiter
p.join()
delimiter
self.stream.send(p)
delimiter
Thread(target=volume_switcher).start()
delimiter
child_midpoints = []
delimiter
print(mode(data, axis=0))
delimiter
client_cmd = client.invoke_shell()
delimiter
df.FREQ = pd.cut(df.FREQ, bins=bins, labels=labels)
delimiter
f_inrange
delimiter
raise
delimiter
x, y
delimiter
array([7, 11])
delimiter
Q_UNUSED(parent)
delimiter
Spam.update(self)
delimiter
x[0] = 10
delimiter
increments_sum += increments[i]
delimiter
newfunc.func = func
delimiter
shared_str.value
delimiter
client_to_server(messag, host, port, size)
delimiter
cThread = Thread(target=c.run, args=())
delimiter
font.configure(size=max(size, 8))
delimiter
server_B_thread = threading.Thread(target=server_B.serve_forever)
delimiter
app.run()
delimiter
root = tk.Tk()
delimiter
b = 2
delimiter
clb = plt.colorbar()
delimiter
self.vtkDepth.Modified()
delimiter
bitlist = [1, 0, 0, 0, 0, 0, 0, 0]
delimiter
[5, 0],
delimiter
xnew = np.linspace(x.min(), x.max(), num=41, endpoint=False)
delimiter
mask_inv = cv2.bitwise_not(mask)
delimiter
a = my_class()
delimiter
i += 1
delimiter
y = np.random.normal(0, 1.0, 100)
delimiter
df.loc[:, (cols)] = df[cols].where(df[cols].ge(0), np.nan)
delimiter
sh1 = wb.sheet_by_index(0)
delimiter
0
delimiter
Base = declarative_base()
delimiter
doc.build(text)
delimiter
plt.plot(x, val, alpha=0.05)
delimiter
stopx = img2x - img1x + 1
delimiter
termios.tcsetattr(fd, termios.TCSAFLUSH, attrs_save)
delimiter
print(date)
delimiter
cnt.send_msg(data)
delimiter
stud = session.query(Student).first()
delimiter
print(v.data)
delimiter
correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))
delimiter
description = Column(Text)
delimiter
opts = parser.parse_known_args()
delimiter
n * factorial(n - 1)
delimiter
deletetokens[-1]
delimiter
json_object = json.load(response)
delimiter
num2 = int(argv[2])
delimiter
value = root.A[0].B[0].C[0]
delimiter
parsed_url = list(urlparse(url))
delimiter
obj.__reduce__()[1]
delimiter
julia > pytype_query(x)
delimiter
rectangle(maskRoi, roi, Scalar(255), CV_FILLED)
delimiter
ax.legend_.remove()
delimiter
cmap = {(1): (255, 255, 255), (0): (0, 0, 0)}
delimiter
pre_save.connect(pre_save_callback, sender=models.MyModel)
delimiter
plotter()
delimiter
key in self._info_axis
delimiter
result.append([v])
delimiter
m.shape
delimiter
arr1 = np.arange(10000).reshape(20, 10, 50)
delimiter
a + b + c
delimiter
index = items.index(item)
delimiter
self.edit.setText(text)
delimiter
procs.append(subprocess.Popen(ARGS_GO_HERE))
delimiter
fig.set_size_inches(6.4, 5.12)
delimiter
self.queue.put(item)
delimiter
Response(e.message, status=400)
delimiter
Fraction(1, int(yc) + 1)
delimiter
int(aString, 16)
delimiter
id_arr.cumsum()
delimiter
print(type(domain))
delimiter
seen = set()
delimiter
X, Y = np.meshgrid(x, y)
delimiter
DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)
delimiter
i += 1
delimiter
by_bins.get(True, ()), by_bins.get(False, ())
delimiter
r.mainloop()
delimiter
my_worker.moveToThread(my_thread)
delimiter
fig = matplotlib.pyplot.figure()
delimiter
suite.addTest(unittest.makeSuite(Class1))
delimiter
_f
delimiter
a = np.random.rand(N, N)
delimiter
b = datetime(2010, 12, 7)
delimiter
A1 = Al.tobsr()
delimiter
print(list(o))
delimiter
c += 1
delimiter
redirect(list_)
delimiter
defaultdict(nested)
delimiter
self.spider = spider
delimiter
path = os.path.dirname(path)
delimiter
randomword(10)
delimiter
os.mkdir(path)
delimiter
i, i + len(small)
delimiter
sys.stdout.write = inner
delimiter
seen = set()
delimiter
d = {}
delimiter
output = ctypes.c_int()
delimiter
curr_num = int(temp_fh.readline().strip())
delimiter
self.data = data
delimiter
try_one(downloader, 15)
delimiter
[item for item in vqs]
delimiter
log.setLevel(logging.ERROR)
delimiter
g.ax_marg_x.set_axis_off()
delimiter
s = list(iterable)
delimiter
it = iter(iterable)
delimiter
print(result[1])
delimiter
s.run()
delimiter
data = file.read()
delimiter
np.cumsum(inds, out=inds)
delimiter
self._content.seek(0)
delimiter
str
delimiter
l1 = [1, 1, 1]
delimiter
print(len(retval))
delimiter
Queue.get(self, False)
delimiter
mantissas *= 10.0
delimiter
print(basis[0](1))
delimiter
i - len(list2)
delimiter
find_leading_zeros(14)
delimiter
new_result
delimiter
glMatrixMode(GL_MODELVIEW)
delimiter
wr.writerow(RESULT)
delimiter
print(valchange(a, b))
delimiter
print(platform.python_implementation())
delimiter
d = lambda a, b: map(list, zip(a, b))
delimiter
x[ix_i, ix_j]
delimiter
output.addPage(cover_pdf.getPage(0))
delimiter
y_score = np.array(output)[:, (1)]
delimiter
min_z, max_z = z_surface.min(), z_surface.max()
delimiter
cls.instances.add(instance)
delimiter
parsed_result
delimiter
MyModel.BLAH_FOODALLY_BOOGALY
delimiter
b = [4, 5, 6]
delimiter
z = np.zeros(700)
delimiter
e.set_sensitive(False)
delimiter
opcodes = [op[0] for op in list_of_all]
delimiter
ei = (1 - math.pow(1 - e * e, 1 / 2.0)) / (1 + math.pow(1 - e * e, 1 / 2.0))
delimiter
Y_test = lb.fit_transform(y_test_text)
delimiter
val = label_map[int(x)]
delimiter
dict(name=self.name, firstname=self.first, address=self.addr)
delimiter
self.fields.update(fields_for_model(User, _fields))
delimiter
ser.isOpen()
delimiter
print(Sentence.translate(rep_dic))
delimiter
my_items = models.ForeignKey(MyModel)
delimiter
x_series.append(int(x))
delimiter
Worker(request_queue).start()
delimiter
list(range(max(a.start, b.start), min(a.stop, b.stop), 1))
delimiter
a = np.arange(4)
delimiter
fd.close()
delimiter
x, y = np.meshgrid(np.arange(nx), np.arange(ny))
delimiter
_, image_summary = sess.run([train_op, image_summary_t])
delimiter
last_index = word.index(letter, last_index + 1)
delimiter
here = os.path.dirname(__file__)
delimiter
db.session.commit()
delimiter
words = string.split()
delimiter
city = db.StringProperty()
delimiter
words[i] = word_list[words[i]]
delimiter
start = np.where(A == T1)[0]
delimiter
h = plt.plot(x, rv.pdf(x), lw=2)
delimiter
[tuple(g) for k, g in groupby(init, delimiter.__eq__) if not k]
delimiter
zip(*([chain(iterable, repeat(padvalue, n - 1))] * n))
delimiter
{members}
delimiter
the_indices = [2, 5, 7]
delimiter
cell_value = worksheet.cell_value(row - 1, i)
delimiter
self.wtree.start()
delimiter
print(result)
delimiter
sC.on_changed(update)
delimiter
cw = boto.cloudwatch.connect_to_region(Region)
delimiter
t.join()
delimiter
D = np.prod(C[..., 1:], axis=-1)
delimiter
os.chdir(cwd)
delimiter
b = str(a)
delimiter
merge(list1, 0, 1)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
abcde
delimiter
HhighShift = scipy.fftpack.ifftshift(Hhigh.copy())
delimiter
arr
delimiter
1
delimiter
pool.imap(func, images)
delimiter
b = [a]
delimiter
data = client_socket.recv(1024)
delimiter
lst.remove(what)
delimiter
pygame.display.update()
delimiter
slots[s] = next(it_B)
delimiter
old_val = [1, 2]
delimiter
timer = QTimer()
delimiter
q = queue.Queue()
delimiter
first_type = type(next(iseq))
delimiter
wrap(text, 16)
delimiter
dflist = [df1, df2]
delimiter
print(output)
delimiter
print(result)
delimiter
len(read_file(filename).splitlines())
delimiter
values = pd.Series(df.values, index=index)
delimiter
a.update([1])
delimiter
new.append(a[j])
delimiter
array[index].append(int(item))
delimiter
parser = argparse.ArgumentParser()
delimiter
patches[2]
delimiter
sys.exit(0)
delimiter
b = np.arange(10, 20).reshape(2, 5)
delimiter
n = len(l)
delimiter
[0, 0, 0, 1, 1],
delimiter
c = ws.cell(row=5, column=5)
delimiter
ssc.stop()
delimiter
worker.dowork(lock, processes)
delimiter
-1 * p(x)
delimiter
x
delimiter
defaults.update(kwargs)
delimiter
numbers = input[2:]
delimiter
main.py
delimiter
factors = list(factorGenerator(n))
delimiter
get_user_model().objects.all()
delimiter
x = ET.fromstring(a)
delimiter
turtle.penup()
delimiter
assert len(population) == len(weights) > 0
delimiter
children = [n for n in nodes if n.parent == parent]
delimiter
dx = r * np.cos(angle)
delimiter
indx = np.ravel([np.where(x == i) for i in r])
delimiter
wxbmp = wx.BitmapFromBuffer(w, h, img)
delimiter
result.pop()
delimiter
p = json.loads(x)
delimiter
print_ephemeris_for_date(datetuple, bodies)
delimiter
axes[0].append(string1.index(i))
delimiter
saver.restore(sess, fileName)
delimiter
show_views_channel[1]
delimiter
worksheet.write_string(r, c, col)
delimiter
self.close()
delimiter
nums[-1]
delimiter
l[index] = item.strip()
delimiter
allowed_domains.append(hostname)
delimiter
ret[key].append(item)
delimiter
powerpoint.Visible = 1
delimiter
print(output)
delimiter
df2 = df.copy()
delimiter
bits_generator = (set(x) for x in itertools.combinations(list(range(n)), k))
delimiter
stats = pstats.Stats(profile, stream=stream)
delimiter
do_something_further_image_processing_to_decrease_size
delimiter
d[partial_key] = dict()
delimiter
answer = []
delimiter
self.not_full.notify_all()
delimiter
d[x.tag] = x
delimiter
print(self.id)
delimiter
seps = []
delimiter
print ()
delimiter
security.tokens.append(userNameToken)
delimiter
thedata = r.content
delimiter
test_string = test_string.lower()
delimiter
final_values = [n[i] for i in max_indices]
delimiter
output = p2.communicate()[0]
delimiter
i = 1
delimiter
ax = fig.add_subplot(111)
delimiter
computed[n] = fib(n - 1, computed) + fib(n - 2, computed)
delimiter
stack.extend(iter(v.items()))
delimiter
prob_matrix = prob_weights / prob_weights.sum(axis=0, keepdims=True)
delimiter
x()
delimiter
cap.release()
delimiter
lst.append(0)
delimiter
actions.move_by_offset(x_from, y_from)
delimiter
{key: self.schema[key] for key in fields}
delimiter
tcpCliSock.send(buff[i])
delimiter
conn.close()
delimiter
l = {}
delimiter
entries_of_interest.choose(a.T)
delimiter
p = np.poly1d([1, -1, 0, 0, -(stddev / mode) ** 2])
delimiter
ax.set_xticklabels(xticks)
delimiter
y = py_func(x)
delimiter
ogl.CGLSetParameter(context, 222, ctypes.pointer(v))
delimiter
f4 = [2.0, 2.0, 2.0]
delimiter
main()
delimiter
print(args[0], args[1])
delimiter
a = df.append(pd.DataFrame(mydict, index=[0]))
delimiter
search_form = UserSearchForm(request.POST)
delimiter
globals()[funcname] = func
delimiter
data = np.zeros(num, dtype=dtype)
delimiter
sys.stdin = s
delimiter
print((step, sess.run(W)))
delimiter
df.iloc[4:6, (1)] = np.nan
delimiter
logfile.write(f.read())
delimiter
np.random.seed(2015)
delimiter
thelist = [(key, genreOptions[key]) for key in genreOptions]
delimiter
model = mc.MCMC([mean, std_dev, custom_stochastic])
delimiter
CELERY_IMPORTS = detect_tasks(project_root)
delimiter
t = threading.Thread(target=workon, args=(h,))
delimiter
checktime = datetime.datetime.today() - datetime.timedelta(days=int(2))
delimiter
self.array[arr.mylog2(index + 1)]
delimiter
pylab.plot(x)
delimiter
repr(1)
delimiter
(0.01).hex()
delimiter
fulldata = np.append(fulldata, audio_data)
delimiter
matrices[:, (0), (0)] = 1
delimiter
cursor = con.cursor()
delimiter
df.index = [[i] for i in tup]
delimiter
User.objects.get(pk=user_id)
delimiter
x0, y0, z0, w0 = np.split(quaternion0, 4, axis=-1)
delimiter
current_set = set()
delimiter
stat2 = defaultdict(list)
delimiter
cjson.decode(obj)
delimiter
t = Thread(target=enqueue_output, args=(p.stdout, q))
delimiter
sys.exit()
delimiter
s = df.a[:5]
delimiter
strab = str(ab)
delimiter
False
delimiter
print(tone1)
delimiter
click(10, 10)
delimiter
s
delimiter
print(all_steps(pathList))
delimiter
instance.method()
delimiter
dests = [dest[1] for dest in list_of_all]
delimiter
visited.add(node)
delimiter
Thread.sleep(500)
delimiter
root = ET.parse(urllib.request.urlopen(requestURL)).getroot()
delimiter
path = os.path.normpath(path)
delimiter
c = np.tensordot(A, B.T, 1)
delimiter
map(chars.extend, fd)
delimiter
o = RelatingModel.objects.create()
delimiter
begin = time.time()
delimiter
d1 = date(2008, 8, 15)
delimiter
barbar
delimiter
self.GetEventHandler().ProcessEvent(event)
delimiter
month = calendar.monthcalendar(2010, 7)
delimiter
print(repr(obj), obj.__dict__)
delimiter
np.put(s, p, i)
delimiter
cr.fill()
delimiter
p1.poll()
delimiter
request.user = user
delimiter
secrets.randbelow(n)
delimiter
lines_after_17 = f.readlines()[17:]
delimiter
self.body
delimiter
print(names[idx])
delimiter
dll.myfunc(ca_array, len(ca_array))
delimiter
index += 1
delimiter
p.join()
delimiter
exiting
delimiter
prefix = commonprefix((a, b))
delimiter
print((left, right))
delimiter
country = models.CharField(max_length=50)
delimiter
arclength = scipy.integrate.cumtrapz(sqrt(dydx ** 2 + dxdx ** 2), x, initial=0)
delimiter
l = []
delimiter
lang.install()
delimiter
choice
delimiter
axes[0].imshow(img)
delimiter
s.sendto(NTP_QUERY, (host, port))
delimiter
area1 = 0.5 * sides[0] * sides[1] * math.sin(math.radians(angles[1]))
delimiter
output.append((first, last))
delimiter
http_server.listen(options.port)
delimiter
draw_line(event.xdata, event.ydata)
delimiter
col = np.array([7])
delimiter
parent = Tkinter.Tk()
delimiter
l = s.split()
delimiter
replacement.seek(0)
delimiter
print(sample_dict)
delimiter
subparsers = parser.add_subparsers()
delimiter
df.show(5)
delimiter
L.append(chr(i))
delimiter
result = output.getvalue()
delimiter
ax.set_xlim(-1, 11)
delimiter
o = urlparse.urlparse(self.path)
delimiter
obj_list = []
delimiter
WLAN_AVAILABLE_NETWORK_INCLUDE_ALL_MANUAL_HIDDEN_PROFILES = 2
delimiter
k = np.arange(n)
delimiter
print(z, x, c, v)
delimiter
chain.from_iterable(combinations(s, r) for r in range(1, len(s) + 1))
delimiter
WLAN_AVAILABLE_NETWORK_INCLUDE_ALL_ADHOC_PROFILES = 1
delimiter
user = ReferenceField(User)
delimiter
print(b)
delimiter
a[a == 0] = -1
delimiter
c = congruent.columns.to_series().map(lkp).values
delimiter
bool_arr = [True, True, False]
delimiter
np.linalg.norm(np.asfarray(p1) - np.asfarray(p2))
delimiter
loop = asyncio.get_event_loop()
delimiter
fig.clear()
delimiter
np.nan == np.nan
delimiter
True
delimiter
print(cmd.group())
delimiter
cookies = driver.get_cookies()
delimiter
response_data = {}
delimiter
self._d = d
delimiter
main.show()
delimiter
complex(x, y)
delimiter
u, s = n, n + 1
delimiter
s1.difference(s2)
delimiter
print(self.state)
delimiter
d = deque(s)
delimiter
ax.legend()
delimiter
y = list(range(200))
delimiter
os.close(devnull)
delimiter
foo = Foo()
delimiter
stream.write(data)
delimiter
my_string
delimiter
diff = dict((k, n - k2.index(k)) for n, k in enumerate(k1))
delimiter
d = dict(a=1, b=2)
delimiter
my_types = [str, int, float, MyClass]
delimiter
lookup = iD - iB - iC + iA
delimiter
container = np.zeros((N, 2))
delimiter
output.append(item)
delimiter
plt.imshow(img2)
delimiter
result = method(self, *args, **kwargs)
delimiter
p.process()
delimiter
deallocate()
delimiter
foomodule.alist.append(1)
delimiter
soup = BeautifulSoup(txt)
delimiter
res
delimiter
ax = plt.subplot(grid[0, 0])
delimiter
conn = l.accept()
delimiter
self.send_response(200)
delimiter
self.quit_button.clicked.connect(self.capture.quitCapture)
delimiter
dic
delimiter
jj = [ii[i] for i in range(1, len(ii)) if dd[i - 1] > 2]
delimiter
animal.save()
delimiter
assert b.x == 0
delimiter
self.errorcount += 1
delimiter
print(c)
delimiter
x, y
delimiter
a = df.values
delimiter
a[(2), :2, 2:]
delimiter
gc.get_referents(some_list)
delimiter
n2w[narrow].add(wide)
delimiter
soup = BeautifulSoup(html)
delimiter
SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET(self)
delimiter
iter.close()
delimiter
df = pd.DataFrame(M).convert_objects(convert_numeric=True)
delimiter
res[accmap[i]] += a[i]
delimiter
[string for string in string_list if len([x for x in string_list if string in x]) == 1]
delimiter
filtered = MyObject.objects.all()[start_point:inc]
delimiter
opts = dict(page=context)
delimiter
{}
delimiter
plt.plot(x, y_fft)
delimiter
callers_namespace = inspect.currentframe().f_back.f_locals
delimiter
col_index = {j: cell.value for j, cell in enumerate(row)}
delimiter
opener = urllib.request.build_opener(cert_handler)
delimiter
pts = [(1, 1), (1, lim), (lim, lim), (lim, 1), (1, 1)]
delimiter
shutil.rmtree(name)
delimiter
L
delimiter
unconverged[unconverged] = new_unconverged
delimiter
data = np.random.randn(10, 10)
delimiter
m_to = db.ReferenceProperty(reference_class=UserModel)
delimiter
sys.stderr = mystdout
delimiter
Thread(target=reader, args=[process.stdout, q]).start()
delimiter
set()
delimiter
chunk = response.read(CHUNK)
delimiter
self.ax = plt.gca()
delimiter
some_bad_code()
delimiter
values = [col.text for col in row]
delimiter
b[1, 2] = 999999.0
delimiter
self._a = a
delimiter
result[i].append(e)
delimiter
betweenness_centrality(G, k=k)
delimiter
self.b
delimiter
tms = [(v[0], v[1]) for v in values]
delimiter
kwargs = {}
delimiter
rv = self.jinja2.render_template(_template, **context)
delimiter
ax.ticklabel_format(useOffset=False)
delimiter
shape = []
delimiter
df.info()
delimiter
raise StopIteration()
delimiter
f.truncate()
delimiter
s1.values.append(1)
delimiter
countries = Country.objects.all()
delimiter
root = tk.Tk()
delimiter
plt.show()
delimiter
print(foo_q.__str__())
delimiter
1 if text[i] == char else 0
delimiter
writer = csv.writer(fout)
delimiter
right = other.reindex(index=common, copy=False)
delimiter
print(c.Bread)
delimiter
credentials = GoogleCredentials.get_application_default()
delimiter
t1 = timeit.timeit(closure, number=10 ** 4)
delimiter
serial_out = listener.read(size=1)
delimiter
lettered = []
delimiter
figure(figsize=(10, 10))
delimiter
files = glob.glob(fullpath)
delimiter
print(s.before)
delimiter
c.setopt(pycurl.SSL_VERIFYPEER, 0)
delimiter
self.id < other.id
delimiter
print(point.x, point.y)
delimiter
copy.copy(self.pred)
delimiter
self.X == other.X and self.Y == other.Y
delimiter
console = logging.StreamHandler()
delimiter
QNetworkAccessManager.createRequest(self, op, request, device)
delimiter
ax = plt.axes()
delimiter
print(isinstance(b, B))
delimiter
BASE_DIR = os.path.dirname(os.path.dirname(__file__))
delimiter
test.debug()
delimiter
array1.tolist()
delimiter
r = conn.getresponse()
delimiter
c1.acceptor_id = c2.donor_id
delimiter
self.update(n=starting, b=birthrate, i=imrate, e=emrate, d=deathrate)
delimiter
c1.acceptor_id = c2.acceptor_id
delimiter
m = np.random.normal(0, 1, size=(5, 2))
delimiter
True
delimiter
getattr(mod, kls_name)
delimiter
fileobj = cStringIO.StringIO(strobj)
delimiter
a[index] = float(value)
delimiter
kde = stats.gaussian_kde(values)
delimiter
color_segment(polygon_coordinates)
delimiter
print(dir(p))
delimiter
deleteself.indexdict[index]
delimiter
to_sequence(range(5))
delimiter
x = 0.0
delimiter
sj.load(f)
delimiter
pos_a, pos_b, size = s.find_longest_match(0, len(s1), 0, len(s2))
delimiter
subprocess.Popen(console + cmd)
delimiter
print(roundPartial(9.74, 0.1))
delimiter
GeeElem(self.doc.getroot())
delimiter
print(next(results))
delimiter
True
delimiter
gunicorn == 18.0
delimiter
C = np.outer(A, B)
delimiter
print(v)
delimiter
self.memoized = {}
delimiter
tuple(i / inch for i in tupl[0])
delimiter
fig.clf()
delimiter
total_seconds = turnaround.seconds + turnaround.days * 24 * 60 * 60
delimiter
cut_idx = np.where(np.diff(A[:, (1)]) > 15)[0]
delimiter
sct.norm.isf(q=0.05, loc=60, scale=40)
delimiter
print(common_dict(json1, json2))
delimiter
qmessage
delimiter
resp = conn.getresponse()
delimiter
doSomething(value)
delimiter
x_itp = r * np.outer(np.sin(theta_itp), np.cos(phi_itp))
delimiter
min_val = min(d.values())
delimiter
self.period, frozenset(list(self.dimensions.keys()))
delimiter
start, end = match.span()
delimiter
merge(main, 0, 1)
delimiter
key
delimiter
filepath = os.path.join(root, name)
delimiter
cap.destroyAllWindows()
delimiter
start = time.time()
delimiter
bar = request.args.to_dict()
delimiter
self._results = []
delimiter
a = [5, 8, 9]
delimiter
out[i] *= 2
delimiter
args = parser.parse_args()
delimiter
word = models.CharField(max_length=255, unique=True)
delimiter
pdb.post_mortem(traceback)
delimiter
val = d2.get(k, 0)
delimiter
salt = models.CharField(max_length=40)
delimiter
print(start.dt)
delimiter
res = collections.defaultdict(lambda : 0)
delimiter
cd / System / Library / Frameworks / Python.framework / Versions
delimiter
filtered_array[area_mask[id_regions]] = 0
delimiter
d[s]
delimiter
rows[i].pop(pos)
delimiter
expr = Word(ch).setParseAction(lambda tokens: [ch, len(tokens[0])])
delimiter
printTree(tree, child, nodeMap)
delimiter
sleep_for_a_bit()
delimiter
print(self.name)
delimiter
do_something_with(database)
delimiter
pyobj = ctypes.py_object(obj)
delimiter
x = np.linspace(0, 4 * np.pi, 100)
delimiter
(1)(1, 40020)
delimiter
serializer = UserSerializer(queryset, many=True)
delimiter
intersected = set(lists[0]).intersection(*lists)
delimiter
p = random_derangement(N)
delimiter
ret.append(result)
delimiter
serializer_class = PurchaseSerializer
delimiter
XGBClassifier(max_depth=10)
delimiter
print(in_[0][i], out[0][i])
delimiter
observer.join()
delimiter
print(k, tally[k])
delimiter
plt.figure().show()
delimiter
fit2 = sm.tsa.ARIMA(df, (0, 0, 0), exog=exogx).fit()
delimiter
p = Pool(12)
delimiter
polynoms = [polyGen(i) for i in range(5)]
delimiter
not len(unique_list) == len(set(unique_list))
delimiter
d[t] = [next(iterator) for _ in range(n)]
delimiter
MyModel(number=i).save()
delimiter
df = pd.DataFrame(l, columns=l[0]._fields)
delimiter
self.celery.wait()
delimiter
a[:, (0)]
delimiter
p2y = -tx2 * sinang + ty2 * cosang + cy
delimiter
minm = np.append(minm, i)
delimiter
df
delimiter
df
delimiter
x % m
delimiter
min(list_date, key=func)
delimiter
categories = [d for d in os.listdir(root) if isdir(join(root, d))]
delimiter
model = db.StringProperty()
delimiter
generator_fn.__code__.co_flags
delimiter
print(row)
delimiter
gevent.spawn(read_stream, p2.stdout)
delimiter
df = pd.DataFrame(dict(A=np.arange(len(tidx))), tidx)
delimiter
legline.set_transform(trans)
delimiter
pywintypes27.dll
delimiter
total = sum(amounts)
delimiter
count += 1
delimiter
sess = tf.Session()
delimiter
d[k] = v
delimiter
names = os.listdir(src)
delimiter
x[x < -1000] = np.nan
delimiter
self.pargs = pargs
delimiter
mults = []
delimiter
messages = inbox.Items
delimiter
task = getattr(self, next_task_name)
delimiter
print(columns[0])
delimiter
es_tracer.setLevel(logging.DEBUG)
delimiter
set.union(*l)
delimiter
users.insert(1, users.pop())
delimiter
d = defaultdict(list)
delimiter
curses.use_default_colors()
delimiter
g = lambda x: x + 5
delimiter
do_something_with(start_date, list(group))
delimiter
values = np.asarray(values)
delimiter
args
delimiter
point = [xF, yF, zF]
delimiter
setofcols = set(tuple(x) for x in product.T.tolist())
delimiter
l[i]
delimiter
a = []
delimiter
print ()
delimiter
root = Tk()
delimiter
file.write(b)
delimiter
res = urllib.request.urlopen(req)
delimiter
ax.barh(arange(len(x)), x, 1)
delimiter
arithmetic_progression = itertools.count(start, step)
delimiter
f.seek(pos)
delimiter
old = np.concatenate([x[b:e] for b, e in zip(start, stop)])
delimiter
math.sqrt(dot(v, v))
delimiter
server_socket = socket.socket()
delimiter
a ^ b
delimiter
name = MyClass.__DefaultName
delimiter
A += F[i, j] * V[(i), :] * V[(j), :]
delimiter
print(df)
delimiter
root_tree = {}
delimiter
False
delimiter
lengthB *= unitPpix[0, 0]
delimiter
out[nr - 1:] = col2_2D
delimiter
pool.close()
delimiter
print(d.get(42, default))
delimiter
contributions = user_profile.contributions_chosen.filter(**query_args)
delimiter
outF.write(inF.read())
delimiter
context = inspect.currentframe().f_back.f_locals
delimiter
random.seed(4)
delimiter
x[-9]
delimiter
Y, X = np.mgrid[y.min():y.max():20j, x.min():x.max():20j]
delimiter
locale.setlocale(locale.LC_TIME, lc)
delimiter
next_run_date = d + timedelta(days=n)
delimiter
num = abs(num)
delimiter
A = np.arange(N)
delimiter
instance = form.save()
delimiter
stream_handler.setLevel(logging.INFO)
delimiter
ftp = ftplib.FTP()
delimiter
ctx = cairo.Context(surface)
delimiter
ax.cla()
delimiter
idx = np.argsort(r)
delimiter
y = int(line.strip()) + int(line.strip())
delimiter
print(s.model())
delimiter
t = name,
delimiter
ax.add_line(self)
delimiter
str.upper(m.group(0))
delimiter
active_window = GetWindowText(GetForegroundWindow())
delimiter
server.start()
delimiter
print(json_files)
delimiter
assert response.status == 200
delimiter
print(somelist[start:stop])
delimiter
np.allclose(a[:, :, :, :, (0)].ravel(), collapse_dims(a)[:, :, :200].ravel())
delimiter
solve([Eq(int_fx, m), Eq(int_gx, m)], (a, b))
delimiter
print(myunique(a))
delimiter
wrapper
delimiter
PyUnicode_IS_COMPACT(op)
delimiter
rot_matrices = np.empty((angles.shape[0], 2, 2))
delimiter
sm.stats.normal_ad(x)
delimiter
doc = libxml2.parseMemory(content, len(content))
delimiter
x = np.linspace(0, 20, 100)
delimiter
second = itemgetter(1)
delimiter
df
delimiter
curline += 1
delimiter
print(obj.value.T)
delimiter
np.clip(out, 0, 255)
delimiter
product_obj = products.all()[0]
delimiter
hash(str(self))
delimiter
timer = threading.Timer(timeout, thread.interrupt_main)
delimiter
C.__mro__
delimiter
self._setup_queues()
delimiter
result = []
delimiter
ranks2 = dict(map(reversed, enumerate(sorted(dict2, key=dict2.get))))
delimiter
BY = np.take(B, y + 1)
delimiter
self._list[index]
delimiter
treeaslist.extend(self.makeList(aNode.lChild))
delimiter
wrapper.__dict__ = func.__dict__
delimiter
my_namedtuple(final, first_step, second_step)
delimiter
print(sorted(permutations(L), key=space_sum, reverse=True)[:100])
delimiter
print(line)
delimiter
x0 = self.canvas.canvasx(0)
delimiter
c + 1
delimiter
reset_index = np.cumsum(counts1)
delimiter
d.a[i:i + k]
delimiter
field2 = forms.IntegerField(required=False)
delimiter
s.f2()
delimiter
result.clear()
delimiter
FACTORY_FOR = User
delimiter
print(data)
delimiter
df.loc[index_list]
delimiter
-W900 - -ignore < catalina.log
delimiter
alns_list.append(aln)
delimiter
print(item)
delimiter
tabin = [ord(char) for char in tabin]
delimiter
raise KeyError(key)
delimiter
print(first_user.name)
delimiter
self._log.close()
delimiter
v1_api.register(UserResource())
delimiter
desired_capabilities.update(options.to_capabilities())
delimiter
c = csv.writer(f)
delimiter
scenario.skip(require_not_executed=True)
delimiter
test_suite.addTest(unittest.makeSuite(UserServiceTest))
delimiter
app = wx.App()
delimiter
print(enu.count)
delimiter
Thread.__init__(self, group, target, name, args, kwargs, Verbose)
delimiter
testit
delimiter
print(wx.GetDisplaySize())
delimiter
Output = np.vstack((Output, data))
delimiter
os.umask(0)
delimiter
do_some_other_thing()
delimiter
p.data = np.random.choice(np.arange(20) - 10, len(p.data)) / 10
delimiter
print(b.shape)
delimiter
fh.setLevel(logging.DEBUG)
delimiter
x = np.random.random(100)
delimiter
gg.plot(graph.data.values(x=dt, y=xcorr), plotstyles)
delimiter
self.assertEqual(testuser, user.username)
delimiter
NotImplemented
delimiter
[comment.extract() for comment in comments]
delimiter
pool = Pool(4)
delimiter
df = s.groupby([s.index.weekday_name, s.index.hour]).sum().reset_index()
delimiter
idx = np.arange(m.shape[1])
delimiter
ignore[np.ma.maximum(x11, x12) < np.ma.minimum(x21, x22)] = True
delimiter
USE_TZ = True
delimiter
(df.location != df.location.shift()).cumsum()
delimiter
post_save.connect(invalidate_portfolio_index, sender=Entry)
delimiter
func(*args, **kwargs)
delimiter
print(l)
delimiter
self.name
delimiter
even, odd = w[::2], w[1::2]
delimiter
tOut = result[0].time()
delimiter
print(df)
delimiter
engine.block()
delimiter
f = plt.figure()
delimiter
y = (x + n // x) // 2
delimiter
json_data = json.dumps(model_to_dict(user_obj))
delimiter
WSGIScriptAlias / sauron / home / galdosd / finalsauronweb / django - root / apache / django.wsgi
delimiter
temp = []
delimiter
cipher = AES.new(self.key, AES.MODE_CBC, iv)
delimiter
smtp_conn.starttls()
delimiter
all(sympy.Eq(sympy.diff(expr, *t), 0) for t in combs)
delimiter
lst = [0] * (r + b)
delimiter
active_window = screen.get_active_window()
delimiter
index = dict((tuple([n]), i) for i, n in enumerate(leaves))
delimiter
Testing(8 / 8)
delimiter
df.describe()
delimiter
f = tar.extractfile(member)
delimiter
lines = []
delimiter
s.quit()
delimiter
print(s)
delimiter
sixgrams = ngrams(sentence.split(), n)
delimiter
it = iter(list(range(4)))
delimiter
array = np.empty(shape=(2, len(result)), dtype=float)
delimiter
self.bind(b=self.set_c)
delimiter
B = Y.imag
delimiter
f(arg_b=0)
delimiter
X, Y = np.meshgrid(xs, ys)
delimiter
newcardID = card.id
delimiter
kwargs[field_name] = getattr(model_instance, field_name)
delimiter
print(list_bars[int(i) - 1])
delimiter
self.comboBox = QtGui.QComboBox(self)
delimiter
lines = iter(lines)
delimiter
next(infile)
delimiter
t.amount += 1
delimiter
type(os.urandom(10))
delimiter
bSizer.Add(button4, 0, wx.ALL, 5)
delimiter
self.projectiles = []
delimiter
roundup(100)
delimiter
cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2)
delimiter
x = np.arange(0, 1000)
delimiter
self.old_headers = self.br.addheaders
delimiter
dic = {}
delimiter
string[n]
delimiter
args = inspect.getargspec(f)
delimiter
np.set_printoptions(1, threshold=100, suppress=True)
delimiter
self
delimiter
trav(listD)
delimiter
ax.set_ylim(-1, 9)
delimiter
self.data = self.request.recv(1024)
delimiter
p.search(s)
delimiter
False
delimiter
result = np.cumsum(some_array)
delimiter
print(self.some_param)
delimiter
fig = plt.figure(figsize=(11, 11))
delimiter
q = Queue()
delimiter
len(word) > 5
delimiter
repeatlist(B, len(A))
delimiter
data = []
delimiter
greater.append(x)
delimiter
foo.bars.add(bar2)
delimiter
self.items.extend(other.items)
delimiter
df1.join(df2)
delimiter
self.linkHovered.emit(anchor)
delimiter
seen.add(n)
delimiter
dom = parseString(data)
delimiter
conn.endheaders()
delimiter
form = SQLFORM(db.foo)
delimiter
plot(time, y2)
delimiter
length = int(s)
delimiter
outfile.write(out)
delimiter
name = models.CharField(max_length=64)
delimiter
buf = f.read(8192)
delimiter
self.turnnow,
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
self._host = host
delimiter
distance_vectors = [x[0][0] for x in distance_vectors]
delimiter
func(a=2, b=6, c=8)
delimiter
X = iris.data[(iris.target == 0) | (iris.target == 1)]
delimiter
app = Flask(__name__)
delimiter
handler = logging.StreamHandler()
delimiter
seqlen = len(seq)
delimiter
canvas.print_png(png_output)
delimiter
plt.loglog(x, y, basex=np.e, basey=np.e)
delimiter
df = pandas.DataFrame(data=numpy.random.random((m, n)))
delimiter
print(df)
delimiter
self.value = value
delimiter
print(a + 2)
delimiter
tk.Frame.__init__(self, master)
delimiter
output[0].lower() + output[1:]
delimiter
c1 = csv.reader(f1)
delimiter
print((a,))
delimiter
d = defaultdict(bool)
delimiter
conn.send(result)
delimiter
df = pandas.DataFrame(a).groupby([0])
delimiter
list({song.album for song in self.allSongs})
delimiter
x = np.sort(x)
delimiter
movie_dict[actor] = [key]
delimiter
sample_size = 0
delimiter
print(mkl_get_max_threads())
delimiter
print(etc.__file__)
delimiter
values = np.atleast_2d(func(points))
delimiter
b = [(binsize * k) for k in range(imin, imax + 1)]
delimiter
entries = [list(entry) for entry in entries]
delimiter
(2009, 1, 1), datetime.date(2009, 1, 19), datetime.date(2009, 2, 16)
delimiter
koch_fractal(yertle, 2, 100)
delimiter
str(self.matrix)
delimiter
pool.close()
delimiter
df2[df2.mi.isin(df2.mi.value_counts() > 2)]
delimiter
arrays = np.split(x, np.where(x == -1)[0])
delimiter
[10, 9, 8, 9, 10, 11, 10, 9],
delimiter
result.append(self.visit(z))
delimiter
data = yaml.load(txt, yaml.SafeLoader)
delimiter
r = f.read()
delimiter
termf = Frame(root, height=400, width=500)
delimiter
y.remove(i)
delimiter
self.children.count()
delimiter
l1[0:1] = l2
delimiter
item[0], int(item[1][1:] or 0)
delimiter
conn.login(account)
delimiter
list(dic1.keys()) | dic2
delimiter
df5.head(10)
delimiter
s.a.b.c.d
delimiter
sys.stderr = _LogWriter()
delimiter
self.remove_unpickleable_attributes()
delimiter
mahotas.polygon.fill_polygon(pts, canvas)
delimiter
str(self.__dict__)
delimiter
myhelp = buffer.getvalue()
delimiter
id = models.AutoField(primary_key=True)
delimiter
self.memo[str] = self.fn(*args, **kwds)
delimiter
ylim([-4.5, 4.5])
delimiter
method
delimiter
1 < {}
delimiter
pure = np.linspace(-1, 1, 100)
delimiter
ax = fig.add_subplot(111)
delimiter
l2_copy.remove(i)
delimiter
y = np.sin(x) + np.random.random(N) * 0.2
delimiter
bufsize = 0
delimiter
cert = ssl.PEM_cert_to_DER_cert(cert)
delimiter
print(template.format(*map(str, l)))
delimiter
nonoverlapping = (ranges[1:, (0)] - ranges[:-1, (1)] > 1).nonzero()[0]
delimiter
binsm = (bins[1:] + bins[:-1]) / 2
delimiter
s.prompt()
delimiter
self.remove_fields_from_representation(representation, remove_fields)
delimiter
signal.signal(signal.SIGALRM, alarmHandler)
delimiter
{{login_form}}
delimiter
parser = HTMLParser(recover=True)
delimiter
new_save
delimiter
cursor.execute(stmt)
delimiter
name = models.CharField(max_length=255)
delimiter
Decimal(0.1)
delimiter
self.weights = []
delimiter
dict(list(kwargs.items()) + zip(spec, args))
delimiter
starts = np.hstack(([0], nonoverlapping + 1))
delimiter
process = subprocess.Popen(command.split())
delimiter
app.exec_()
delimiter
loop = asyncio.get_event_loop()
delimiter
result = {t: [p for p in prefixes if t.startswith(p)] for t in targets}
delimiter
globs = frame.f_globals
delimiter
new_value = f([getattr(base, name) for base in cls.__bases__], old_value)
delimiter
fig = pylab.figure()
delimiter
colors = cmap(np.linspace(0, 1.0, len(kinds)))
delimiter
x, y, z
delimiter
ModelName = Column(Unicode(255), nullable=True, index=True)
delimiter
x = np.linspace(0, 1, 1000)
delimiter
width = int(cap.get(cv2.cv.CV_CAP_PROP_FRAME_WIDTH))
delimiter
app_api = Api(self.app)
delimiter
colb[n] = 0
delimiter
result = map(_fuc1, samplez)
delimiter
(b.A == 2) & (b.B == 2) & (b.C == 2)
delimiter
self.wealth = 1.0
delimiter
df.index.freq
delimiter
sorted((c for c in nx.simple_cycles(DG) if node in c), key=len)[0]
delimiter
result.append(self.indent(s))
delimiter
tf.reduce_sum(tf.mul(tensor, identity_matrix(n)), [0])
delimiter
aaaa
delimiter
mvMatrix = glutils.lookAt([0.0, 0.0, -2.0], [0.0, 0.0, 0.0], [0.0, 1.0, 0.0])
delimiter
self.stream.parse(data)
delimiter
BEGIN
delimiter
print(match)
delimiter
sportDict[ransport].append(name)
delimiter
person.items.update(other.items)
delimiter
transaction.enter_transaction_management(using=self.db)
delimiter
yaml.add_representer(np.ndarray, opencv_matrix_representer)
delimiter
self.serialc.quit()
delimiter
print(df)
delimiter
y = np.mean(X, 0)
delimiter
binary_insert(r, Node(5))
delimiter
l[i]
delimiter
print(os.name)
delimiter
self.cursor.execute(sql, args)
delimiter
repo.remotes.origin.pull()
delimiter
acc_test = accuracy_score(y_test, y_pred)
delimiter
df6 = df.ix[:, 60:72]
delimiter
main()
delimiter
x = np.linspace(1, 5, 10000)
delimiter
test_func()
delimiter
records.append(record2)
delimiter
stdout = sys.stdout
delimiter
map(chr, list(range(65, 91)))
delimiter
d[k] = int(v)
delimiter
scene.camera.location.y = ty
delimiter
q = q.filter(or_(*conditions))
delimiter
sys.setrecursionlimit(maxint)
delimiter
print(new_dict)
delimiter
sps_acc = sps_acc + sps.coo_matrix((d, (r, c)), shape=(rows, cols))
delimiter
b = 2
delimiter
df = tempDF
delimiter
print(d1 + td(days=i))
delimiter
sibling = page.find_next_sibling()
delimiter
myarray[(myarray >= 2) & (myarray < 5)] = 100
delimiter
os.getcwd()
delimiter
show()
delimiter
print(guess_seq_len(list_a))
delimiter
c = count_events(e)
delimiter
[self.combine(x) for x in X]
delimiter
main()
delimiter
[server - symlinks]
delimiter
page_sanitized = json.loads(json_util.dumps(page))
delimiter
indices = np.vstack(np.unravel_index(np.arange(x * y), (y, x))).T
delimiter
self.a = a
delimiter
temp = [item for sublist in listD for item in sublist]
delimiter
print(t)
delimiter
moreVerbs.extend(getVerbsFromConjunctions(moreVerbs))
delimiter
ax.plot(x, y)
delimiter
popt_pl, pcov = curve_fit(pl, x, y, p0=[0, 0, 0, 0])
delimiter
self_dict[attr]
delimiter
resid.flatten()
delimiter
ftp_handle.cwd(original_cwd)
delimiter
platform.uname()
delimiter
output.put((pos, rand_str))
delimiter
time_in_seconds = int(time())
delimiter
c.append(itemgetter(i)(a))
delimiter
getsizeof(dict((n, 0) for n in range(5461))) / 5461.0
delimiter
(np.convolve(np.convolve(A, K) >= WSZ, K)[L:-L] > 0).astype(int)
delimiter
a = X()
delimiter
length = ctypes.c_ulong(0)
delimiter
ndb.put_multi(users)
delimiter
process(line)
delimiter
page = paginator.page(1)
delimiter
outputdict = sqlcol(df)
delimiter
serializer_class = UserSerializer
delimiter
filters.append(Q(is_default=False))
delimiter
InteractiveConsole.__init__(self)
delimiter
y = sum(x > i for i in x)
delimiter
self.limit = 10
delimiter
list(seen_twice)
delimiter
arr = sparse.coo_matrix((data_f, (rows_f, cols_f)), df.shape, dtype=np.float64)
delimiter
print(sys.getrefcount(X))
delimiter
html = Template(fp.read())
delimiter
writer.writerow(row + [to_append])
delimiter
yertle.begin_poly()
delimiter
t.show()
delimiter
diag = np.ones(n - 1)
delimiter
t.start()
delimiter
x, y
delimiter
b = datetime.now()
delimiter
reader.Close()
delimiter
wb = Workbook()
delimiter
asc.append(i)
delimiter
dt - timedelta(seconds=time_tuple[-1])
delimiter
TYPES[type_name].from_dict(value)
delimiter
dis.dis(my_fun)
delimiter
print(filename, lineno, strrepr)
delimiter
os.setgroups([])
delimiter
print(df.star_name)
delimiter
df_list = []
delimiter
instance = reservation.instances[0]
delimiter
rate = lambda t: 200 * exp(-t) if t > 200 else 400 * exp(-t)
delimiter
form = DjForm(data=data)
delimiter
document.exitFullscreen()
delimiter
a = f()[0]
delimiter
bar.close()
delimiter
idx = np.ravel_multi_index(arr, arr.max(1) + 1)
delimiter
False
delimiter
type(d)
delimiter
session = sessionmaker(bind=engine)()
delimiter
cap0.set(4, 120)
delimiter
ax = fig.add_subplot(111)
delimiter
print(sum(2, 4))
delimiter
candidates = [base for base in bases]
delimiter
print ()
delimiter
print(a)
delimiter
f.write(content)
delimiter
st = time.time()
delimiter
serial.flushOutput()
delimiter
True
delimiter
marshal.dumps(code)
delimiter
new_map = [[x, y] for x, y in a_map if not (x < 0 or y < 0)]
delimiter
DOT11_CIPHER_ALGO_WPA_USE_GROUP = 256
delimiter
HTML(style + df_html)
delimiter
a[0]
delimiter
news = News.objects.filter(pk=news_id)
delimiter
crontab - e
delimiter
self.q.put((True, msg.errorCode, msg.errorMsg))
delimiter
result.append(dictionary[last_match])
delimiter
setattr(targetCls, name, wrap(name, func))
delimiter
t = d.unique()
delimiter
_install_lib.run(self)
delimiter
self[key] = kwargs[key]
delimiter
print(T(data[0], 0.29, 4.5))
delimiter
fr.close()
delimiter
type = models.CharField(max_length=255)
delimiter
timezone.make_aware(d, timezone.utc)
delimiter
tocopy_wb.Sheets(1).Cells.Copy()
delimiter
framenp = np.fromstring(framestr, dtype=np.uint16).reshape((1024, 1280))
delimiter
MyArray([(k, self.data[k]) for k in key])
delimiter
length = np.random.random(10)
delimiter
type(foo1)
delimiter
self.module = importlib.import_module(module_name)
delimiter
print ()
delimiter
self.data[self.size] = x
delimiter
self.data[idx] = item
delimiter
y = time.time()
delimiter
sub_compunds.extend(generate_sub_compound(tok))
delimiter
data = file.read(1024)
delimiter
input = request.json
delimiter
newlist = [temp[0]] + [([0] + i) for i in temp[1:]]
delimiter
s.close()
delimiter
f()
delimiter
serverEndpoint.listen(factory)
delimiter
[str.upper() for str in args]
delimiter
print(metrics.confusion_matrix(y_test, y_predicted))
delimiter
Base = declarative_base()
delimiter
comment.replace_with(tag)
delimiter
self.master.wait_window(self.w.top)
delimiter
high = len(input) - 1
delimiter
f(d, name)
delimiter
list_of_lists = []
delimiter
b = np.arange(0, 5)
delimiter
g += b
delimiter
print(sorted(values.items()), expr.subs(values))
delimiter
foo.bar
delimiter
instance
delimiter
sum(max(die().roll_until(6) for i in range(6)) for i in range(n)) / float(n)
delimiter
self.cs = LockableCursor(self.connection.cursor())
delimiter
block_list.append(y)
delimiter
out.stop()
delimiter
current_command = random.choice(commands)
delimiter
self.filter(owner=owner)
delimiter
head(d, 10)
delimiter
pairs_by_number_and_list = collections.defaultdict(list)
delimiter
mylist = mymethod()
delimiter
ax.hold(True)
delimiter
B = np.vectorize(inds.get)(A)
delimiter
foo_dir = os.path.dirname(os.path.join(os.getcwd(), __file__))
delimiter
self[:1] = []
delimiter
a[np.arange(a.shape[1])[:] > a[:, (0), (np.newaxis)]] = 0
delimiter
getattr(p, s)
delimiter
x_a = points[..., :-1][..., (mask)]
delimiter
a.shape
delimiter
name = models.CharField(max_length=50, null=False, blank=False)
delimiter
replacements[mo.group()]
delimiter
m.show()
delimiter
data = os.read(STDIN, 1024)
delimiter
profile = pform.save(commit=False)
delimiter
np.random.seed(0)
delimiter
older_books.append(books.title)
delimiter
x = np.linspace(0, 20, 500)
delimiter
f.__dict__
delimiter
dis.dis(lambda : Foo.bar.add(1, 2))
delimiter
indexes.append(int(index))
delimiter
data = s.readframes(nf)
delimiter
print(args_dict)
delimiter
partial(operator.mod, b=i)
delimiter
createdate = subprocess.check_output(args)
delimiter
np.conj(x, x)
delimiter
fig, ax = plt.subplots()
delimiter
urlparse.urljoin(response.url, extractedLink.strip())
delimiter
next(it2)
delimiter
__DBNAME__ = name
delimiter
ax.stem(x, y)
delimiter
result
delimiter
locale.getdefaultlocale()
delimiter
self.close_button.pack()
delimiter
turtle.pendown()
delimiter
result = dict(curs.fetchall())
delimiter
date_ = date.today()
delimiter
cooMatrix = sparse.coo_matrix((ones, (edges[:, (0)], edges[:, (1)])))
delimiter
df = df.swaplevel(0, 1, axis=1)
delimiter
map(eq, a, b).index(False)
delimiter
self.parent.vLayout.insertWidget(1, self)
delimiter
quit = True
delimiter
self.layout.addWidget(self.btn_run)
delimiter
cursor.close()
delimiter
wx.Panel.__init__(self, *args, **kwargs)
delimiter
self.sock.sendall(data)
delimiter
Kiwi
delimiter
run.py
delimiter
res
delimiter
layout = QHBoxLayout(self)
delimiter
df + 2
delimiter
compose1(f1, f2)
delimiter
res.fill(np.nan)
delimiter
start = datetime.datetime.combine(today, start)
delimiter
pdf.closed
delimiter
u = User.query.get(id)
delimiter
article = get_objects_or_404(Article, pk=id)
delimiter
dsqrd = (y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1)
delimiter
l[:n] + [0] * (n - len(l))
delimiter
series.fillna(0)
delimiter
translation.deactivate_all()
delimiter
a = np.arange(20).reshape((4, 5))
delimiter
my_data = np.random.random((210, 8))
delimiter
print(string1[match.a:match.a + match.size])
delimiter
angles = np.linspace(0, 2 * math.pi, n_angles, endpoint=False)
delimiter
x, w = leggauss(deg)
delimiter
plt.legend()
delimiter
print(enclosing_class())
delimiter
texter.show()
delimiter
df = pd.read_csv(fo)
delimiter
sieve()
delimiter
fun = self.weak_fun()
delimiter
bins_labels(bins, fontsize=20)
delimiter
self._picked_indices.append(index)
delimiter
getattr(value, arg)
delimiter
result = list(queryset_1) + list(queryset_2)
delimiter
icS = scipy.linalg.inv(cS)
delimiter
c = get_redis_connection()
delimiter
s.add_dependency(tasks[p[0]], tasks[p[1]])
delimiter
ba = bytearray(c)
delimiter
handler = logging.StreamHandler()
delimiter
assert n > 0
delimiter
groups = []
delimiter
list_of_files.push(file)
delimiter
file.close()
delimiter
print(x, y)
delimiter
bar_id = Column(Integer, ForeignKey(Bar.id))
delimiter
n1 += 1
delimiter
replchars = list(replstr)
delimiter
response
delimiter
self.resize(600, 400)
delimiter
price_series.pct_change()
delimiter
self.filename = tkFileDialog.askopenfilename()
delimiter
results if len(results) != 1 else results[0]
delimiter
f2.print_world()
delimiter
img.save(js.framebuffer)
delimiter
url_queue.put(1)
delimiter
y = NP.row_stack((fnx(), fnx(), fnx()))
delimiter
y = y[indices]
delimiter
model.add(e)
delimiter
unique_a.view(a.dtype).reshape((unique_a.shape[0], a.shape[1]))
delimiter
globals()[func_name] = getattr(m, func_name)
delimiter
fig = pyplot.figure()
delimiter
hist = np.histogram(A, bins=bin_count)
delimiter
results = service.files().list(maxResults=10).execute()
delimiter
masked_array = np.ma.array(a, mask=np.isnan(a))
delimiter
print(a, b, c)
delimiter
tt.Index(1).Set(eb)
delimiter
result
delimiter
axis = PlotAxis(tick_generator=tick_gen)
delimiter
v = np.arange(100).reshape(10, 10)
delimiter
self.d[k] = v
delimiter
tar = tarfile.open(fileobj=file_like_object)
delimiter
logger.info(result.get())
delimiter
result.append(dictionary[match_parts[i]])
delimiter
np.frombuffer(mp_arr.get_obj())
delimiter
city_type = db.StringProperty()
delimiter
plt.xlim(50, 70)
delimiter
big_df = df.copy()
delimiter
self.cdfunc = cdfunc
delimiter
pl, u = lu(a, permute_l=True)
delimiter
s = len(l)
delimiter
result = np.array([np.sum(corr_time1(t, JM1, JM2)) for t in t_output])
delimiter
cls
delimiter
print(intdate2date(20160618))
delimiter
DD, EE, FF
delimiter
f1.close()
delimiter
xs = ys = np.arange(0, 1.01, 0.01)
delimiter
len(l)
delimiter
G = nx.complete_graph(20)
delimiter
b.close()
delimiter
zipdata.write(get_zip_data())
delimiter
2, 2, 5
delimiter
sherr = []
delimiter
combs += combinations(remove(e, elems), m - 1)
delimiter
n += 1
delimiter
print(dis.dis(f))
delimiter
ch = screen.getch()
delimiter
print(name)
delimiter
pst_dt.strftime(fmt)
delimiter
a = 20
delimiter
value = value.strip()
delimiter
getattr(self._queue, name)
delimiter
result
delimiter
axs[1].xaxis.set_minor_locator(x_minor_lct)
delimiter
y = np.empty(s.size, dtype=np.int64)
delimiter
[queue.get() for queue in queues]
delimiter
self.name = zipinfo.filename
delimiter
value = datetime.date(1, 1, 1)
delimiter
F = list(S1)
delimiter
pyperclip.paste()
delimiter
new_d[key.upper()] += val
delimiter
field = self.fields[field_name]
delimiter
_build_ext.finalize_options(self)
delimiter
df
delimiter
lines.append(line)
delimiter
ipx
delimiter
myList = []
delimiter
print(e.inserted_primary_key)
delimiter
max_value = value
delimiter
1 / 1024.0
delimiter
random.choice(list(self.__cache.values()))
delimiter
all_keys.add(k)
delimiter
headers.customContextMenuRequested.connect(self.header_popup)
delimiter
self.val += 1
delimiter
liPos = [(a, b + 1) for a, b in liPos]
delimiter
x = 2
delimiter
self.x, self.y = x, y
delimiter
ax.plot(1 / u * cos(phi), 1 / u * sin(phi))
delimiter
Include / etc / apache2 / conf.d / phppgadmin
delimiter
res = OrderedDict()
delimiter
new_soup = bs4.BeautifulSoup(new_html)
delimiter
n = -1
delimiter
GMax_idx = np.where(neg_y_grad == GMaxI)[0][0]
delimiter
merge_dict(v1, v2)
delimiter
response
delimiter
p_file = frame.f_back.f_code.co_filename
delimiter
tuples_in_nxn = [divmod(x, n) for x in numbers_in_nxn]
delimiter
width
delimiter
self.button = QtGui.QPushButton(self)
delimiter
divs[j][1] += divs[i][0]
delimiter
c = db.cursor()
delimiter
fields = []
delimiter
print(test[0])
delimiter
im2 = Image.fromarray(data)
delimiter
retval += chr(node[1][0][1])
delimiter
list(range(item.start, item.stop))
delimiter
frame = inspect.currentframe()
delimiter
args = parser.parse_args()
delimiter
rows = cur.fetchall()
delimiter
df = areas.apply(multiply_by_demand).unstack(0)
delimiter
value = mc.get(key)
delimiter
word_len = _len(word)
delimiter
print(tests.test_002)
delimiter
button.click()
delimiter
hist, _ = np.histogram(values, bins=[1, 4, 7, 10], weights=freqs)
delimiter
print(x)
delimiter
y = np.array([1, 2])
delimiter
body = []
delimiter
d = defaultdict(list)
delimiter
decoder.process_raw(buf, False, False)
delimiter
B = np.zeros_like(A)
delimiter
assert sides[0] + sides[1] >= sides[2]
delimiter
urllib.request.HTTPSHandler.__init__(self)
delimiter
df
delimiter
df
delimiter
df
delimiter
result
delimiter
base_d = datetime.strptime(base_date, fmt)
delimiter
File.Delete(FilePath)
delimiter
type([]) is list
delimiter
df_new
delimiter
normal = [sin(tF) * cos(pF), sin(tF) * sin(pF), cos(tF)]
delimiter
df.iloc[-6:-1, (2)].values
delimiter
self.button.bind(on_release=self.button_click)
delimiter
help(scipy.special.erf)
delimiter
sorted_objs = sorted(list(dic.values()), key=signature)
delimiter
loop.run_until_complete(low_level())
delimiter
execute_sql(s)
delimiter
np.diff(np.hstack((0, run_ends, nums.size))).max()
delimiter
ndX = PyArray_NDIM(X)
delimiter
a[0, 0, 1] = [0, 0, 5]
delimiter
top = min(len(a1) - 1, len(a2) - 1)
delimiter
cosine(pink, car)
delimiter
a.bar
delimiter
comma_ending_prettyprint(row, stream=outfile)
delimiter
s.get_available_ranges()
delimiter
df = pd.read_csv(filename)
delimiter
do_something(val)
delimiter
imshow(resultScaled.astype(uint8))
delimiter
object_serializer_class = MyModelSerializer
delimiter
index_type()
delimiter
nxt = _st + timedelta(days=1)
delimiter
queryset = User.objects.all()
delimiter
driver = webdriver.Chrome(chromedriver)
delimiter
l = list(range(100))
delimiter
sys.stdout.write(session.recv(4096))
delimiter
print((count, p))
delimiter
app().mainloop()
delimiter
API_ERROR = 1
delimiter
power(lambda x: x * 2, 2)(9)
delimiter
clf.fit(iris.data, iris.target)
delimiter
pd.Series(factors, df.index).apply(np.binary_repr, width=width)
delimiter
cur_set.append(A[index])
delimiter
start = time.time()
delimiter
lft = [([0] * i) for i in range(n_rows)]
delimiter
map(word_tokenize, texts)
delimiter
someSignal = QtCore.pyqtSignal(int, QtGui.QWidget)
delimiter
Point(self.x - point.x, self.y - point.y)
delimiter
ts = np.concatenate(ts)
delimiter
d[k] = v
delimiter
p.is_running()
delimiter
x, y, w, h = cv2.boundingRect(cnt)
delimiter
oAccess.Quit()
delimiter
gg.plot()
delimiter
n_points = len(points)
delimiter
L = [0] * 10
delimiter
os.mkfifo(logfilepipe)
delimiter
lvls = np.concatenate((lvls[:-1], np.linspace(1000, 10000, 5)))
delimiter
orders = models.ManyToManyField(Order)
delimiter
statement = query.statement
delimiter
print(nonsub)
delimiter
self.environment.handle_exception(exc_info, True)
delimiter
value[0] += 1
delimiter
merge(value, node)
delimiter
dis.dis(lis[1])
delimiter
len2 = math.hypot(x2, y2)
delimiter
person = models.ForeignKey(Person)
delimiter
r.append(-1)
delimiter
{(8): 8, (6): 6, (7): 7}
delimiter
stdout, stderr = proc.communicate()
delimiter
ax1 = fig1.add_subplot(221)
delimiter
numloss += 1
delimiter
a
delimiter
slice(0, 0, step)
delimiter
popd
delimiter
self._classes[cls.__module__, cls.__name__] = cls
delimiter
y = [0] * n
delimiter
salt = bcrypt.gensalt()
delimiter
t = datetime.now()
delimiter
soup = BeautifulSoup(text)
delimiter
count += 1
delimiter
self._fig = Figure()
delimiter
print(regex.findall(test))
delimiter
x = 0
delimiter
repr(0.01)
delimiter
sns.distplot(x, ax=ax, rug=True, hist=False)
delimiter
edges = zip(rows.tolist(), cols.tolist())
delimiter
asdas
delimiter
cluster_lookup = dict((node, i) for i, node in enumerate(graph.nodes))
delimiter
shom_im(cir)
delimiter
res_list.append(res)
delimiter
tz_aware_dt = dt.replace(tzinfo=UTC)
delimiter
isitIn(char, aStr)
delimiter
root = tk.Tk()
delimiter
count += countnodes(ele.left, 0)
delimiter
BEHI
delimiter
CFHJ
delimiter
AC
delimiter
thread.start()
delimiter
output = [(first, second) for first, (second, count) in list(d_max.items())]
delimiter
best_merit_yet = merit2
delimiter
f.close()
delimiter
print(repr(x), ucd.category(x), ucd.name(x))
delimiter
lists = list(filter(len, lists))
delimiter
idx = np.floor(input).astype(np.int)
delimiter
duplicates = [keys for key_str, keys in reverse_d.items() if len(keys) > 1]
delimiter
x[-44]
delimiter
decorator
delimiter
input_from_xpath = driver.find_element_by_xpath(path)
delimiter
category = models.ForeignKey(Category)
delimiter
a.insert_node(a.root, 2)
delimiter
bar = Bar()
delimiter
QtGui.QDirModel.flags(self, index) | QtCore.Qt.ItemIsUserCheckable
delimiter
dat = gauss(x, amp, cen, sig) + np.random.normal(size=len(x), scale=0.1)
delimiter
w.grid()
delimiter
print(parser.prog)
delimiter
self.im.putpalettealpha(i, a)
delimiter
counts = Counter(seq)
delimiter
np.random.seed(0)
delimiter
ip = get_ipython()
delimiter
loop = asyncio.get_event_loop()
delimiter
res = []
delimiter
suite.addTest(unittest.defaultTestLoader.loadTestsFromName(t))
delimiter
HTH += HTHflips
delimiter
info = json.loads(details)
delimiter
newArray = copy(theArray)
delimiter
print(log.text)
delimiter
repr(self.tokens[0])
delimiter
indices[indices >= arr.shape] = clipping_value
delimiter
do_staging_stuff()
delimiter
serializer_class = MyModelSerializer
delimiter
()(())
delimiter
self.__dict__.update(kwargs)
delimiter
config = ruamel.yaml.load(open(file_name), ruamel.yaml.RoundTripLoader)
delimiter
inner
delimiter
self.waiters.append(new_lock)
delimiter
MooBase.metadata.create_all(engine)
delimiter
[5, 17, 8, 7]
delimiter
pylab.show()
delimiter
value = json.loads(jsonValue)
delimiter
app = wx.PySimpleApp()
delimiter
spreadsheet = client.open_by_key(docid)
delimiter
c = x = x + 1
delimiter
total = sum(g[1] for g in group)
delimiter
net.sortModules()
delimiter
n = [(1.1, 5), (2.4, 7), (5.4, 6), (9.8, 14), (10, 4)]
delimiter
pix = pixl.get_pixbuf()
delimiter
groups = result.groups()
delimiter
print(f())
delimiter
y = numpy.zeros(x.shape)
delimiter
arr = shm.zeros(N, dtype=np.uint8)
delimiter
user_input.append(entered_text)
delimiter
deferred.addBoth(callback)
delimiter
new_x, new_y = x + new_dx, y + new_dy
delimiter
print(mydata)
delimiter
ok = True
delimiter
print(soup)
delimiter
B = A[::-1, :]
delimiter
self.addCleanup(patcher.stop)
delimiter
l.insert(0, y_axis[i])
delimiter
f(x[:, (t - 1)], params, x[:, (t)])
delimiter
infinitedict = lambda : defaultdict(infinitedict)
delimiter
alist.append(1)
delimiter
print(insp.get_table_names())
delimiter
plt.show()
delimiter
readRequest += chr(self.transactionID / 256)
delimiter
sys.stdout.write(c)
delimiter
self.line = line
delimiter
image_db.close()
delimiter
Color(*[r, g, b])
delimiter
B.shape
delimiter
json.dumps(f(*a, **k))
delimiter
fig = plt.figure()
delimiter
data = numpy.fromiter(points, float)
delimiter
dowrap
delimiter
REDIS_CONNECT_RETRY = True
delimiter
bar()
delimiter
two = np.empty(three.shape, dtype=object)
delimiter
roots = np.polynomial.polynomial.polyroots(poly_coeff - [99, -1, 0])
delimiter
elem.clear()
delimiter
df = pd.read_csv(fo)
delimiter
z = {}
delimiter
indices = np.array(list(range(len(a))))[inter]
delimiter
print(qr.data)
delimiter
a.dtype = newtype
delimiter
main()
delimiter
key = bucket.new_key(filename)
delimiter
print(repr(binary_split_array[0]))
delimiter
out_put.append(participation_details)
delimiter
idx = np.unique(idx)
delimiter
r[:, (0)]
delimiter
self.obj.my_attr == other.obj.my_attr
delimiter
(0)(1, 40020)
delimiter
ax
delimiter
print(dumps(bob))
delimiter
body = s.to_dict()
delimiter
data.shape
delimiter
ax2 = ax.twinx()
delimiter
smtp = smtplib.SMTP()
delimiter
output = cmd.communicate()[0]
delimiter
logger = logging.getLogger(__name__)
delimiter
words = f.readlines()
delimiter
connections.append(connection)
delimiter
out = np.zeros((a.shape[0], a.shape[0]))
delimiter
main()
delimiter
cursor = conn.cursor()
delimiter
queue = Queue.Queue()
delimiter
total = 0
delimiter
bytesPerSector = ctypes.c_ulonglong(0)
delimiter
x0, y0, z0, w0 = np.split(quaternion0, 4, axis=-1)
delimiter
subprocess.Popen(args0)
delimiter
i += 1
delimiter
G, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0
delimiter
sub(a)[:] = np.ones((2, 2))
delimiter
sentencecount = 0
delimiter
self.sum
delimiter
find(resolved)
delimiter
conn.close()
delimiter
path = Column(ARRAY(Integer))
delimiter
response
delimiter
m = [([0] * n_classes) for i in range(n_classes)]
delimiter
pprint(d)
delimiter
self.update(*args, **kwargs)
delimiter
obj.my_custom_method()
delimiter
print(totals[totals.argsort()])
delimiter
map(double, list_[1::2])
delimiter
fetch(r)
delimiter
Mx = np.zeros((n, n))
delimiter
list2 = [x for x in list1 if x]
delimiter
outputlist = []
delimiter
source = ColumnDataSource(data=dict(x=[0, 1], y=[0, 1]))
delimiter
ax1.imshow(bw, cmap=plt.cm.gray)
delimiter
ibm_db.execute(query_stmt)
delimiter
MyIterator(list, random.sample(list(range(n)), k))
delimiter
lens = np.array([len(item) for item in v])
delimiter
next(self)
delimiter
canvas.Canvas.showPage(self)
delimiter
self.assertEqual(result, (self.v.version, self.v.prerelease))
delimiter
b[c]
delimiter
ax = fig.gca()
delimiter
field
delimiter
notes = Notification.objects.filter(user=self.user)[:4]
delimiter
y = pow(x, p - 2, p)
delimiter
(True != False) != False
delimiter
indices.append(index)
delimiter
saver = tf.train.Saver()
delimiter
print(self.server.conn)
delimiter
Date(date.year, date.month, date.day)
delimiter
autostart = true
delimiter
_mydecor if clams else _myclassdecor
delimiter
hm.start()
delimiter
a, b = [float(s) for s in line.split()]
delimiter
foo_on_scalars(x)
delimiter
num = 0
delimiter
HTMLParser.feed(self, data)
delimiter
x.isupper()
delimiter
print(contents)
delimiter
arr = np.sum(np.exp(-4 * abs(val - val.reshape(len(df.index), -1))), axis=0)
delimiter
counts, sums = Fenwick(len(a)), Fenwick(len(a))
delimiter
myseries_two.loc[0]
delimiter
g(arr, numbers, i + 1)
delimiter
cls
delimiter
USE_X_FORWARDED_HOST = True
delimiter
numsum = sum(list(numbers))
delimiter
box = ax.get_position()
delimiter
model = QFileSystemModel()
delimiter
new_func.__code__ = code
delimiter
result = tuple(islice(it, n))
delimiter
mask[np.triu_indices(len(df))] = False
delimiter
print(nextfetch)
delimiter
foo.bar - foo.baz
delimiter
data = np.random.random((1000, 10))
delimiter
s = list(iterable)
delimiter
a = [(lambda y: lambda x: y * x)(i) for i in (1, 2)]
delimiter
c = Counter(words_to_count)
delimiter
root.remove(element)
delimiter
False
delimiter
print(optimize.fixed_point(func, 0))
delimiter
datam = np.zeros_like(data)
delimiter
lines_seen = set()
delimiter
stophttp = threading.Thread(target=httpd.shutdown)
delimiter
dump(outdata, 5, 6)
delimiter
time.sleep(0.01)
delimiter
print(s)
delimiter
self._foo = val
delimiter
dt = aware_utc_dt.astimezone(tz)
delimiter
y = x.__add__(x)
delimiter
le.transform([1, 1, 2, 6])
delimiter
answer.append((L1[tuple(row)], i))
delimiter
result = comment.upper()
delimiter
func2()
delimiter
hamming_sets[0].add(l[0] + l[1])
delimiter
image.data = f.read()
delimiter
doSomething()
delimiter
True
delimiter
bnds = tuple((0, 1) for x in start_pos)
delimiter
globals().update(load_dictionary(fpath)[0])
delimiter
o4 = int(ipnum) % 256
delimiter
x + x
delimiter
exifdict = im._getexif()
delimiter
df
delimiter
randint(range_start, range_end)
delimiter
np.vstack((np.zeros(shape), data))
delimiter
{4, 5, 6},
delimiter
list(map(set, out))
delimiter
show(p)
delimiter
y = foo()
delimiter
d[key_list[-1]] = params[key]
delimiter
self._locked
delimiter
draw = ImageDraw.Draw(img2)
delimiter
fin.seek(start_index)
delimiter
b = [6, 7, 8, 9, 0]
delimiter
list(islice((x for itr in (l, repeat(0)) for x in itr), n))
delimiter
bar.set_hatch(hatch)
delimiter
a = numpy.array([0.0, 0.25, 0.75, 1.0])
delimiter
queryset.get(slug=self.slug)
delimiter
[MyObject(), MyObject()]
delimiter
x, y = data.T
delimiter
print(int_array)
delimiter
df.C
delimiter
just_object_result = array_result[1:-1]
delimiter
diff_as_html = ghdiff.diff(markdown1, markdown2)
delimiter
print(dict_mul(dict1, dict2))
delimiter
handle_results(proc.stdout)
delimiter
current_string_split[-1] += s[j]
delimiter
weights = numpy.array([0.5, -1])
delimiter
assert e.errno == errno.WSAECONNREFUSED
delimiter
np.array([inner(row, *args, **kwargs) for row in vec])
delimiter
prevnode.left == node.right
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
first.append(ele)
delimiter
list(foo() for x in range(10))
delimiter
startpos = text.rfind(alpha, 0, endpos - len(alpha)) + len(alpha)
delimiter
L.append(x * k)
delimiter
primes = [p for p in table if p][1:]
delimiter
pymysql.install_as_MySQLdb()
delimiter
found = True
delimiter
data = json.loads(ninja_json)
delimiter
q.join()
delimiter
Y += 0.1 * np.random.random(N)
delimiter
k = int(round(n * (float(percent) / 100) / 2))
delimiter
a[something]
delimiter
x[(0), 48:52]
delimiter
j = json.loads(data)
delimiter
form
delimiter
app.MainLoop()
delimiter
a = 1
delimiter
socket.send(args.bar)
delimiter
config.write(fp)
delimiter
self.q.task_done()
delimiter
show_error()
delimiter
set(chain.from_iterable(periodic_gs[key].nodes() for key in periodic_gs))
delimiter
rest = list(it)
delimiter
Y.append(y)
delimiter
type(sys.maxsize + 1)
delimiter
exitonclick()
delimiter
response = requests.post(searchUrl, files=multipart, allow_redirects=False)
delimiter
NULL
delimiter
y.sort()
delimiter
serializer_class = UserSerializer
delimiter
a = [5, 8, 9]
delimiter
d = OrderedDict()
delimiter
type(d)
delimiter
form.category_select.choices = [(key, categories[key]) for key in categories]
delimiter
args = []
delimiter
A = matrix([[0, 0, 0, 1], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0]])
delimiter
t.print_exc()
delimiter
result.add(word)
delimiter
result.add(item)
delimiter
print(df.dtypes)
delimiter
result.append(next(g))
delimiter
thread.join()
delimiter
serializer_class = UserSerializer
delimiter
self._current_message = qmessage
delimiter
self.children = []
delimiter
price = forms.DecimalField(required=False, max_digits=6, min_value=0)
delimiter
ax.plot(arange(10), rand(10))
delimiter
print(x)
delimiter
sum(val * self.weights[i] for i, val in enumerate(inputs))
delimiter
result = cache.get(key)
delimiter
newDict = []
delimiter
logging.basicConfig(format=FORMAT)
delimiter
159575276
delimiter
m = alen(t)
delimiter
countec = [0] * len(ec2j)
delimiter
m = MyModel(**data_dict)
delimiter
entity.after_delete()
delimiter
extractedData = data[:, (idx_IN_columns)]
delimiter
distancesDF = pd.DataFrame(distances)
delimiter
root.after(0, download_chunk, readsofar + len(data), chunksize)
delimiter
print(data)
delimiter
self.SetTopWindow(frame)
delimiter
(0, 10) == 0, 10
delimiter
result = pool.apply_async(f, [10])
delimiter
row = rows[0]
delimiter
as_list = list(eval(args))
delimiter
offset = lst.index(element, offset + 1)
delimiter
mypad.scrollok(True)
delimiter
__import__(modname)
delimiter
result[last].append(obj)
delimiter
print(one, two, three)
delimiter
result |= Counter(d)
delimiter
int(hex(200 - (1 << 16))[-4:-2], 16)
delimiter
print(f(1.0, a=-1.0, b=1.0, n=4))
delimiter
recall_accumulator.append(recall_score(y_true, y_pred, **kwargs))
delimiter
reactor.connectTCP(host, PORT, BlastFactory())
delimiter
hover.perform()
delimiter
x1, y1, x2, y2 = lines[i][0]
delimiter
raise AttributeError
delimiter
hfile.seek(-bsize, os.SEEK_CUR)
delimiter
X = np.asmatrix(np.arange(N * N).reshape(N, N))
delimiter
self.delegate = delegate
delimiter
print(a)
delimiter
attributes = inspect.getmembers(MyClass, lambda a: not inspect.isroutine(a))
delimiter
self.run_console_command(line)
delimiter
cmap_lin = cm.jet
delimiter
f.close()
delimiter
count = 0
delimiter
plt.scatter(x, y, c=color, s=90, alpha=alpha)
delimiter
ret0, frame0 = cap0.read()
delimiter
Lv.append(last)
delimiter
i += n + 1
delimiter
grouped_df = df.groupby(group_id)
delimiter
print(z.namelist())
delimiter
labels2 = plt.clabel(CS, inline=1, fontsize=12)
delimiter
self.name = name
delimiter
jobs = multiprocessing.Queue()
delimiter
asyncio.set_event_loop(eventloop)
delimiter
f.add_done_callback(set_if_success)
delimiter
_repr(o)
delimiter
print(np.shape(c))
delimiter
result = func(*args, **kwargs)
delimiter
a.update(b)
delimiter
self.loadFinished.connect(self._result_available)
delimiter
do_once = {t: False for t in output_file_names}
delimiter
isinstance(inst, self._decorated)
delimiter
iter(x)
delimiter
arr[i:size + i]
delimiter
0
delimiter
is_active = models.BooleanField(default=False)
delimiter
parliament = models.CharField(max_length=128)
delimiter
shutil.rmtree(self.__str__(), onerror=delete_dir_handler)
delimiter
reader.close()
delimiter
my_global_fun(data)
delimiter
start = time.time()
delimiter
C = np.empty(N, dtype=int)
delimiter
funcList.append(factory(m))
delimiter
0
delimiter
heapq._siftdown_max(heap, 0, len(heap) - 1)
delimiter
datalines_str.info()
delimiter
pool.map(func, input_sequence)
delimiter
~array
delimiter
counter = Counter(line.split()[0] for line in fp)
delimiter
k, v = next(iterator)
delimiter
serializer = self.get_serializer(queryset, many=True)
delimiter
self.__dict__[key] = item
delimiter
df.date1 = pd.to_datetime(df.date1)
delimiter
x
delimiter
loop = asyncio.get_event_loop()
delimiter
IOLoop.instance().add_timeout(time.time() + 5, self._process)
delimiter
self.height = self.winfo_reqheight()
delimiter
first_day_of_month = datetime(now.year, now.month, 1)
delimiter
theta = np.deg2rad(angle)
delimiter
z.close()
delimiter
match = pattern.search(lines)
delimiter
print(client.wsdl)
delimiter
df
delimiter
visited.append(i)
delimiter
list2.insert(i, x)
delimiter
time.sleep(0.45)
delimiter
ipython - -matplotlib
delimiter
no_background.append(orig[:, (i)] - np.median(orig, 1))
delimiter
data = [tuple([d[0], dict(size=int(d[1]))]) for d in data]
delimiter
print((a, args[a]))
delimiter
self.panel = wx.Panel(self)
delimiter
it = iter(numbers)
delimiter
Blob.__init__(self, width, height, color, emphasis, highlight)
delimiter
percentageDifference = 100 * float(difference) / len(a)
delimiter
z.close()
delimiter
l2 = []
delimiter
self.grid(sticky=W + E + N + S)
delimiter
numpy_surface = numpy.frombuffer(surface.get_buffer())
delimiter
amount_to_pad = self.block_size
delimiter
deleten_lst[-1]
delimiter
response
delimiter
df = DF[DF.isin([eq]).any(1)].reset_index(drop=True)
delimiter
projected_data = np.dot(data, eigenvectors)
delimiter
plt.xlim(xmax=2)
delimiter
func(*args, **kwargs)
delimiter
newobj
delimiter
sts = os.waitpid(p.pid, 0)
delimiter
a[0]
delimiter
siftDown(A, start, len(A) - 1)
delimiter
cur = conn.cursor()
delimiter
print(dt)
delimiter
d.func1(name)
delimiter
count[w] += 1
delimiter
i += 1
delimiter
dot_product = np.dot(normal, unit_ray)
delimiter
np.random.seed(0)
delimiter
extractor.runInParallel(numProcesses=2, numThreads=4)
delimiter
self.cntrlPanel.Show()
delimiter
file.seek(sequence_start, 0)
delimiter
print(norm.ppf(y))
delimiter
sum(opt(value) for opt, value in zip(ops, lst))
delimiter
permutations[tuple(sorteditems.index(item) for item in items)] += 1
delimiter
a, b = tee(iterable)
delimiter
print(group)
delimiter
value
delimiter
A = np.random.rand(N, N, N)
delimiter
min(scores)
delimiter
self.__c
delimiter
active_required(my_view)
delimiter
days[index:] + days[:index]
delimiter
maxsentences = random.randrange(1, 5)
delimiter
d = {}
delimiter
lst = [5, 20, 15]
delimiter
df_bad_idea.sum()
delimiter
firstLine = infile.readline()
delimiter
fd, filename = tempfile.mkstemp()
delimiter
x = np.linspace(0, 10, 20)
delimiter
all_data = all_data.append(df, ignore_index=True)
delimiter
z.write(os.path.join(absdir, f), os.path.join(zip_dir, f))
delimiter
result = []
delimiter
self._value + n
delimiter
self.assertEqual(200, res.code)
delimiter
mean_of_distribution = numpy.mean(data)
delimiter
sio.seek(0)
delimiter
g.head(2)
delimiter
PorterStemmer().stem_word(word)
delimiter
vecData.columns = vec.get_feature_names()
delimiter
list(range(5))
delimiter
self.notifyObservers(old, self.value)
delimiter
f = tempfile.TemporaryFile()
delimiter
data = urlfile.read(chunk)
delimiter
response = service_request.execute()
delimiter
d = {printer(i): printer(j) for i, j in t}
delimiter
Add()
delimiter
self.ses.post(url_auth, data=my_dict)
delimiter
res = {}
delimiter
d = {}
delimiter
out[-1].append(ele)
delimiter
lilfoo = Foo()
delimiter
out = StringIO.StringIO()
delimiter
self.name
delimiter
self.my_float_layout.add_widget(self.button)
delimiter
a = []
delimiter
p1 = figure(plot_width=900, plot_height=500, y_range=[8, 10.5], tools=TOOLS)
delimiter
module_obj = __import__(module)
delimiter
self.timeout.reset(_timeout)
delimiter
file.close()
delimiter
d = {(1): 2}
delimiter
self.int2base(self.current - 1, self.base)
delimiter
display.start()
delimiter
a, b, c
delimiter
datadex[x] + 1
delimiter
val = np.fromiter(list(d.values()), int)
delimiter
op = s.pop()
delimiter
foo = MyClass()
delimiter
f_set = f[(f.year >= 2002) & (f.year < 2010)]
delimiter
(2 < arr) ^ (arr < 6)
delimiter
funct(*args, **kwargs)
delimiter
cat.save()
delimiter
ax.hold(True)
delimiter
timer.timeout.connect(tick)
delimiter
settings.py
delimiter
est = stats.pareto.fit_fr(rvs, 1.0, frozen=[np.nan, locest, np.nan])
delimiter
plot(t, s2)
delimiter
obj = C()
delimiter
self.closefd = closefd
delimiter
te = time.time()
delimiter
1
delimiter
proj_path = os.path.dirname(script_path)
delimiter
issubclass(bool, int)
delimiter
x
delimiter
request = HttpRequest()
delimiter
args = parser.parse_args()
delimiter
dothis(item)
delimiter
print(form)
delimiter
ch.setLevel(logging.INFO)
delimiter
a + b + c
delimiter
val = [len(list(g)) for _, g in groupby(l)][-1]
delimiter
n_component = np.array([curvature * ds_dt * ds_dt] * 2).transpose()
delimiter
a, c
delimiter
tokens = astr.split()
delimiter
setup(**configuration)
delimiter
check_thread.start()
delimiter
ax.scatter(xs, ys, zs)
delimiter
b = Swallow()
delimiter
[]
delimiter
result = remove_rows(df)
delimiter
cax = fig.add_axes([0.27, 0.8, 0.5, 0.05])
delimiter
os.kill(pid, SIGTERM)
delimiter
csvdata.set_index(mergecols, inplace=True, drop=False)
delimiter
cPickle.dumps(d, -1)
delimiter
complements.append(2 ** (depth + 2) + 1)
delimiter
fhd.close()
delimiter
edgePoint.y += self.bounds.size.height / 2.0 - self.center.y
delimiter
file_name = part.get_filename()
delimiter
c = get_config()
delimiter
x, y = [], []
delimiter
parser.print_help()
delimiter
ratings_rdd = transformed.map(lambda r: Rating(r.user_id, r.item_id, r.rating))
delimiter
c = [comb for i in range(n) for comb in combinations(x, i + 1)]
delimiter
searchbox.clear()
delimiter
a = np.arange(N)
delimiter
points.append((1, 0))
delimiter
self.k = min(k, len(train_data))
delimiter
hour, minute = divmod(int(hhmm), 100)
delimiter
seen = set()
delimiter
GLX.glXMakeContextCurrent(d, w, w, context)
delimiter
scnt += 1
delimiter
fig = figure()
delimiter
print(datetime.datetime.now() - now)
delimiter
then = time.time()
delimiter
arr2 = np.zeros((arr.shape[0], arr.shape[1] + column_pad))
delimiter
obj = {}
delimiter
fig = plt.gcf()
delimiter
print(format % tuple(row))
delimiter
frame1 = cv.QueryFrame(video1)
delimiter
print(sum(l, ()))
delimiter
domain = splitting[1]
delimiter
pen = QtGui.QPen(QtCore.Qt.red)
delimiter
new_solution.append(data.pop())
delimiter
c = pycurl.Curl()
delimiter
virt - install
delimiter
browser = webdriver.Firefox(profile)
delimiter
df.loc[1]
delimiter
reverse_d[key_str].append(key)
delimiter
dotted_notation.setParseAction(name_notation_type)
delimiter
print(b.build_lib)
delimiter
im = im.crop((left, upper, right, lower))
delimiter
tidx = pd.to_datetime(tidx).sort_values()
delimiter
rcode = response.rcode()
delimiter
result = datetime.strptime(date, format)
delimiter
db.connect()
delimiter
dol[k].append(d)
delimiter
cv_im = cv.CreateImageHeader(pil_im.size, cv.IPL_DEPTH_8U, 1)
delimiter
stemmer = PorterStemmer()
delimiter
subset = table[np.in1d(table.IDs, id_list)]
delimiter
antigravity
delimiter
int.__init__(self, *arg, **kwarg)
delimiter
t[n - 1]
delimiter
test_module_1.py
delimiter
instance
delimiter
process(path)
delimiter
print(richard)
delimiter
assert_frame_equal(df1.sort(axis=1), df2.sort(axis=1), check_names=True)
delimiter
c = C(0, 1, 2)
delimiter
[x[1] for x in links if x[0] == node]
delimiter
ax.plot([-1, 0, 1, 2], list(range(4)))
delimiter
NUM_REPEATS = int(sys.argv[2])
delimiter
(s.index[0] - s.name).total_seconds()
delimiter
COMMIT
delimiter
tf.write(sf.read())
delimiter
False
delimiter
[ChildClass(stream) for i in range(stream.read_ui16())]
delimiter
GuiMixin_FunctionalityB.__init__(self)
delimiter
a = a.__get__(C)
delimiter
pacific_now.utcoffset().total_seconds() / 60 / 60
delimiter
np.lib.stride_tricks.as_strided(arr, new_shape, new_strides)
delimiter
d = dict()
delimiter
print(answer)
delimiter
data.append(val)
delimiter
driver.init()
delimiter
combined = defaultdict(list)
delimiter
idict[sub_name] = new_dict
delimiter
Potato(**validated_data)
delimiter
GL.glShadeModel(GL.GL_FLAT)
delimiter
source.close()
delimiter
a = numpy.array([(n + datetime.timedelta(minutes=i)) for i in m])
delimiter
[FreeTDS]
delimiter
reimport(module)
delimiter
A[:, (~drops)], drops
delimiter
m.hexdigest()
delimiter
ActionChains(context.browser).send_keys(Keys.ARROW_UP).perform()
delimiter
params
delimiter
self.factory.broadcastMessage(message)
delimiter
y = pattern.match(x).groups()
delimiter
pool._processes
delimiter
True
delimiter
print(sorted(list(func(n))))
delimiter
h = ax.plot(x, rv.pdf(x), lw=2)
delimiter
m_to_N[:, (0)] = -nrange[1:].reshape((n - 1, 1))
delimiter
column_align = gtk.Alignment(0, 0, 0, 0)
delimiter
df.index = df.index.map(str)
delimiter
traingraph = tf.Graph()
delimiter
f.write(libtorrent.bencode(torfile.generate()))
delimiter
links[word].push_back(word.c_str())
delimiter
n, [n]
delimiter
datetime.datetime(2012, 10, 4, 1, 0, 51, 759000)
delimiter
[1, 2] == [2, 1]
delimiter
soup = BeatifulSoup.BeautifulSoup(data)
delimiter
is_ok[idx] = np.logical_or(is_ok[idx], val)
delimiter
BaseObject.initialized, ObjectOne.initialized, ObjectOne.x, ObjectTwo.initialized, ObjectTwo.x
delimiter
a += 1
delimiter
self.obj = obj
delimiter
maxIntEl = max(int(element[0]) for element in elements)
delimiter
deleteself.mapping[key]
delimiter
tmr.start()
delimiter
n = len(points)
delimiter
nodes.append(key)
delimiter
(tuple(seq[pos:pos + size]) for pos in range(0, len(seq), size))
delimiter
smtp = smtplib.SMTP()
delimiter
end_time = Column(Integer)
delimiter
print(l)
delimiter
df.corr()
delimiter
total
delimiter
self.total += 1
delimiter
print(a.shape)
delimiter
plt.bar(X[:-1], Y, color=C, width=X[1] - X[0])
delimiter
m.p
delimiter
A = sps.coo_matrix((v, (i, j)))
delimiter
print(list(missing_elements(L, 0, len(L) - 1)))
delimiter
D1, D2 = A.shape
delimiter
n_tr_1 = (y_train != 0).sum()
delimiter
r = int(max(0, 255 * (ratio - 1)))
delimiter
print(first_fifty_results[0].media_url)
delimiter
name = Column(String)
delimiter
username = NullColumn(db.String(80))
delimiter
self.electric_conductivity = electric_conductivity
delimiter
y_sorted
delimiter
self._queue = Queue(maxsize=1)
delimiter
blocks.append(f.read(BLOCK_SIZE))
delimiter
a = np.array([9, 9, 9, 9, 9, 9, 9, 9, 9, 9])
delimiter
ax_axis.offsetText.set_visible(False)
delimiter
word = word.rstrip()
delimiter
b = c = a[10:40:4]
delimiter
__builtin__.__import__ = newimp
delimiter
pcolor(data, cmap=new_map)
delimiter
len1 = len(s)
delimiter
DEVELOPMENT = True
delimiter
f = np.vectorize(f)
delimiter
print(s)
delimiter
runrec(srcname)
delimiter
current_list.append((header_id, header.string))
delimiter
u_x.append(len(s) - 1)
delimiter
options.parse_command_line()
delimiter
code = marshal.load(f)
delimiter
print(results.get())
delimiter
ar[0:0]
delimiter
u_y.append(s[-1])
delimiter
do_other_stuff_to_header(line)
delimiter
data = get_image_data(infile)
delimiter
s[-amount:]
delimiter
y[:] = np.where(mask, np.nan, r * np.sin(t))
delimiter
self.__parser.add_section(attr)
delimiter
formatfunc(thing)
delimiter
r2 = (x - cx) * (x - cx) + (y - cy) * (y - cy)
delimiter
r = re.search(pat, txt)
delimiter
mysum += (a - b) ** 2
delimiter
py_version = sys.version_info[:2]
delimiter
app.route(*args, **kwargs)(view_func)
delimiter
df2
delimiter
diag = [-1] * n + [1] * 2
delimiter
dict.__delitem__(self, key)
delimiter
self.m[r][c]
delimiter
total = 0.0
delimiter
print(i)
delimiter
math.factorial(6)
delimiter
cls(name=name, email=email)
delimiter
array = np.empty(len(args), dtype=np.object)
delimiter
print(user_input)
delimiter
df[cat_columns] = df[cat_columns].apply(lambda x: x.cat.codes)
delimiter
sql = f.read() % params
delimiter
pil_im
delimiter
(-9, -5)[-9, -8, -7, -6]
delimiter
ax = s.cumprod().plot()
delimiter
result2.add(k + 1)
delimiter
hash - r
delimiter
a.append(a_t)
delimiter
print(i)
delimiter
authed = g.get_user()
delimiter
self.loop = asyncio.new_event_loop()
delimiter
post_install()
delimiter
ufmt_str.format(*args)
delimiter
b = a[s]
delimiter
q |= Q(name__icontains=merchant)
delimiter
children = list(_get_ordered_child_nodes(node))
delimiter
middle_min = df.iloc[first_row + 1:last_row].min().min()
delimiter
metadata = MetaData()
delimiter
value = models.IntegerField()
delimiter
number = m.group(1)
delimiter
imgf = ndimage.gaussian_filter(img, blur_radius)
delimiter
x = abs(x)
delimiter
df = psql.frame_query(sql, cnxn)
delimiter
difference = end_date - start_date.replace(end_date.year)
delimiter
sys.float_info.max
delimiter
td, tdend, keytd = map(Suppress, (td, tdend, keytd))
delimiter
print(sess.run(y))
delimiter
d[v] += 1
delimiter
X_neg = X[y_neg]
delimiter
location = forms.ModelChoiceField(queryset=Location.objects.all())
delimiter
getattr(self._original, key, value)
delimiter
r, c = np.triu_indices(tot_vec, 1)
delimiter
t[0]
delimiter
q.put(2)
delimiter
self.some_method = self.some_method
delimiter
a[0:1] = [4]
delimiter
next(g)
delimiter
parsed = ET.parse(url_link)
delimiter
my_list
delimiter
handler = urllib.request.HTTPHandler()
delimiter
join(idx, n)
delimiter
print(uploaded_files)
delimiter
self.testdata = open(TESTDATA_FILENAME).read()
delimiter
y[s] = np.arange(s.size)
delimiter
random.randint(0, 10000)
delimiter
labels = [0, 1, 1, 2]
delimiter
y[nans] = np.interp(x(nans), x(~nans), y[~nans])
delimiter
app = Flask()
delimiter
seconds = float(milliseconds) / 1000
delimiter
x = np.empty(5)
delimiter
f = Foo()
delimiter
console = logging.StreamHandler()
delimiter
newSingle.getHeader().setField(transacttime)
delimiter
do_something(chunk)
delimiter
today = datetime.datetime.today()
delimiter
children.add(v)
delimiter
myobject.__acl__ = load_acls(myobject)
delimiter
data = json.loads(document)
delimiter
print(last_array[211147, 9])
delimiter
l.sort(key=alphanum_key)
delimiter
clf.estimators_[0]
delimiter
ttaken = time.time() - ttaken
delimiter
self.initfunc()
delimiter
payload_hash = hashlib.sha256(request_parameters).hexdigest()
delimiter
difference_in_years = date_as_float(end_time) - date_as_float(start_time)
delimiter
self.dot.set_offsets((x, y))
delimiter
delattr(cls, name)
delimiter
np.array([100 - x, x + y, 100 - y])
delimiter
enddef
delimiter
channel.settimeout(2)
delimiter
sftp = s.open_sftp()
delimiter
Base = declarative_base()
delimiter
yedges = np.linspace(0, N, nbin)
delimiter
person = Person.query.get_or_404(id)
delimiter
my_instance.a()
delimiter
pairs = list(itertools.product(l1, l2))
delimiter
destination.save()
delimiter
output = sys.argv[2]
delimiter
string, stream[pos + 1 + length:]
delimiter
len(block)
delimiter
itrange = list(range(100))
delimiter
local_datetime = datetime.now(local_tz)
delimiter
d[x] += 1
delimiter
d = datetime.date(2012, 2, 7)
delimiter
print(x)
delimiter
sorted(coursesList, key=len)
delimiter
image.write(chunk)
delimiter
[node.aspython() for node in nodelist]
delimiter
Architecture
delimiter
Management
delimiter
{word for word, times in list(anagrams.items()) if times > 1}
delimiter
C[A.nonzero()] = A[A.nonzero()]
delimiter
titles = []
delimiter
rows, cols = matrix.shape[0], matrix.shape[1]
delimiter
data[n] = line.rstrip()
delimiter
jsonText = json.dumps(arr)
delimiter
encryptionKey = {s[i]: s[i + 5] for i in range(len(s) - 5)}
delimiter
dict_str = json.dumps(my_dict)
delimiter
setattr(self, unit, value)
delimiter
False
delimiter
show()
delimiter
a = float(x)
delimiter
dis.dis(foo)
delimiter
test = sum(tests)
delimiter
x = np.arange(Norig * Norig).reshape((Norig, Norig))
delimiter
plt.setp(patches, linewidth=0)
delimiter
self.scene.addPolygon(QtGui.QPolygonF(self.click_positions), pen)
delimiter
threads.remove(thread)
delimiter
all(value in x for x in self.sets)
delimiter
self.value = value
delimiter
__rxor__ = __xor__
delimiter
Foo.bar.__self__ is Foo
delimiter
parser.print_help()
delimiter
cur.connection.autocommit(True)
delimiter
self.val -= 1
delimiter
thequickbrownfoxjumpsoverthelazydog
delimiter
self.send_response(200)
delimiter
b.compute(date, date)
delimiter
os.remove(temp_file_name)
delimiter
ws.write(row, 1, row)
delimiter
do_totally_different_thing()
delimiter
db.foo.remove({})
delimiter
self._s.sendto(str(data), self._server)
delimiter
weights[k] = 0.0
delimiter
file_A.do_A_stuff
delimiter
self.mc = wx.media.MediaCtrl(self, szBackend=wx.media.MEDIABACKEND_WMP10)
delimiter
session.modified = True
delimiter
col_sums[:, (j)] = col_sums[:, (j - 1)] + row_sums[:, (j)]
delimiter
ar[np.bitwise_or.accumulate(~ar[::-1])[::-1]]
delimiter
answer_for_first_set = list(filter_bits)
delimiter
ipdb > X[k, k].shape
delimiter
b = pandas.get_dummies(a)
delimiter
tmp2 = np.sqrt((scalar1 - a[:, :, (1)]) ** 2 + (scalar2 - a[:, :, (2)]) ** 2)
delimiter
p = Process(target=worker)
delimiter
mod
delimiter
attachment = MIMEText(fp.read(), _subtype=subtype)
delimiter
new_result = np.zeros(im.shape)
delimiter
self[i - 1][j - 1] == 1
delimiter
peasant.knock_over()
delimiter
self._s.sendto(str(data), self._addr)
delimiter
keyfunc
delimiter
QtCore.QTimer.singleShot(5000, self.showChildWindow)
delimiter
id(df._data)
delimiter
plt.subplot(2, 2, 2)
delimiter
j = np.random.randint(0, ncols - 1, numdense)
delimiter
arr = np.random.random((1000, 1500))
delimiter
self.est = est
delimiter
sent = np.zeros((len(vocab), len(text_idx)))
delimiter
len(self._data.values)
delimiter
pp.close()
delimiter
print(obj.__class__)
delimiter
twitter = Twython(APP_KEY, APP_SECRET, OAUTH_TOKEN, OAUTH_TOKEN_SECRET)
delimiter
diff.sort()
delimiter
a.dtype
delimiter
mask = np.where((array >= x) & (array <= y), True, False)
delimiter
fig = plt.figure()
delimiter
combinedRDD = combinedRDD.map(convert)
delimiter
boto.storage_uri()
delimiter
a_list
delimiter
sum((a - b) ** 2 for a, b in zip(u, v))
delimiter
doSomethingWith({{user.username | tojson | safe}})
delimiter
eff = 50 - 10j
delimiter
df
delimiter
value
delimiter
singlet_list = [2]
delimiter
udf(lambda c: label_maker_topic(c, topic_words))
delimiter
do_whatever()
delimiter
self.assertEqual(captcha_count, 0)
delimiter
self.openfile()
delimiter
x % 2 == 0
delimiter
ans = np.take(myarray, sorted(set(ind) - set(rm)))
delimiter
a - a
delimiter
t = threading.Thread(target=test)
delimiter
f.close()
delimiter
msg_decorator
delimiter
tmp_file.flush()
delimiter
found = False
delimiter
GL.glClear(GL.GL_COLOR_BUFFER_BIT)
delimiter
-math.log(theta * beta)
delimiter
time.sleep(max(requiredDuration - connectionDuration, self._latency))
delimiter
current.append(label2index[label])
delimiter
cur = con.cursor()
delimiter
words.update(test.split())
delimiter
last_result
delimiter
print(x)
delimiter
print(value)
delimiter
allUuids = []
delimiter
print(args.c)
delimiter
print(qs)
delimiter
wset.add(narrow)
delimiter
A[0] = previous_A[1]
delimiter
_multigen
delimiter
print(pat.search(content).group())
delimiter
get_page_labels(pdf)
delimiter
a = Vector(1, 2)
delimiter
number = 0
delimiter
np.multiply(arr1[i], arr2, out=out[i].reshape((1, arr2.size)))
delimiter
a.copyApply(A.foo)
delimiter
logging.INFO
delimiter
toimage(data).show()
delimiter
assert app2.tasks[test.name]
delimiter
d[nan2]
delimiter
set([x for x in list(storage.values()) if list(storage.values()).count(x) > 1])
delimiter
foo()
delimiter
f.close()
delimiter
print((w, follows(w)))
delimiter
print(next(self.fibo))
delimiter
fid.close()
delimiter
print(max_number(1000))
delimiter
self.x, self.y
delimiter
id(b)
delimiter
blockwise_times = []
delimiter
lambda func=self.test: func()
delimiter
login(self.request, form.user)
delimiter
filters.pop()
delimiter
web.setPage(downloader.page)
delimiter
content = db.Column(db.String(255))
delimiter
print(content)
delimiter
abc = myFunction
delimiter
True
delimiter
output = PdfFileWriter()
delimiter
uglybuf = src.read(1)
delimiter
map(lambda x: x.extend([0] * (inner_max_len - len(x))), lst)
delimiter
p.show()
delimiter
r = urllib.request.urlopen(datasrc)
delimiter
ax = fig.add_subplot(2, 1, 1)
delimiter
self.file.flush()
delimiter
indexes = np.zeros_like(data, dtype=int)
delimiter
u[s] = np.arange(n)
delimiter
HttpResponseRedirect(self.get_success_url())
delimiter
[]
delimiter
print(a[(idx == 0), :])
delimiter
Z = np.zeros((2, 2))
delimiter
RED, GREEN, BLUE = (255, 0, 0), (0, 255, 0), (0, 0, 255)
delimiter
nNew = np.random.random_integers(low=1, high=100, size=1)
delimiter
sts = os.waitpid(p.pid, 0)
delimiter
index.append(start)
delimiter
url = sys.argv[1]
delimiter
res1[:, (k)] = U[:, :, (k)].dot(V[:, (k)])
delimiter
r = []
delimiter
print(line)
delimiter
random.randrange(start * f, stop * f, step * f) / f
delimiter
expatparser.Parse(xml)
delimiter
title = db.StringProperty()
delimiter
jsonobject = fromJSON(jsonstring)
delimiter
pid = os.fork()
delimiter
cv.Rectangle(image, pt1, pt2, cv.RGB(255, 0, 0), 5, 8, 0)
delimiter
number // 2
delimiter
print(x)
delimiter
running = True
delimiter
count(5)
delimiter
link = soup.link.nextSibling
delimiter
lb = tk.Listbox(root, width=50, height=20, yscrollcommand=scrollbar.set)
delimiter
t.push(s.pop())
delimiter
ttaken = time.time()
delimiter
repo.remotes.origin.push()
delimiter
qs = Room.objects.filter(name=self.name)
delimiter
response = urllib.request.urlopen(sampleRequest)
delimiter
__initialized = False
delimiter
w, h = im.size
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
url += urllib.parse.urlencode(self.params)
delimiter
main()
delimiter
data = f.read()
delimiter
print(query)
delimiter
t1.start()
delimiter
print(ast.literal_eval(assignments_removed))
delimiter
self.sendHello()
delimiter
df
delimiter
model = treeview.get_model()
delimiter
bitstring.BitString(uint=i, length=(i.bit_length() + 7) / 8 * 8).bytes
delimiter
newshuffle(l)
delimiter
print(chunk.values)
delimiter
{{companyForm.locations()}}
delimiter
fmt_values = [formatter(x) for x in self.values]
delimiter
-a.py
delimiter
Alfa = list(modules.keys())
delimiter
worker_process.start()
delimiter
app.exit(1)
delimiter
window = Gtk.Window()
delimiter
print(ndimage.map_coordinates(data, [zi, yi, xi]))
delimiter
print(self.server.arg1)
delimiter
int(number + 0.5)
delimiter
data = json.dumps([r for r in csv_reader])
delimiter
nonRepetitive_x.insert(0, x[0] - 1)
delimiter
key = min(iter(self.keys()), key=lambda x: abs(x - key))
delimiter
Chainable(self.data, method)
delimiter
nx.path.bidirectional_dijkstra(G, 1, 2)
delimiter
cols = []
delimiter
scroll = gtk.ScrolledWindow()
delimiter
self._task = asyncio.ensure_future(self._run())
delimiter
generations[-1]
delimiter
result = [(i > maximum / 2) for i in diffs]
delimiter
Audio(url=sound_file, autoplay=True)
delimiter
app.logger.setLevel(debug)
delimiter
self.factory = RequestFactory()
delimiter
curl.setopt(pycurl.FOLLOWLOCATION, 1)
delimiter
x[[0, 2], [1, 4]] = np.nan
delimiter
print(a, b, file2freq[a, b])
delimiter
self._cache.append(next(self._g))
delimiter
h.Send()
delimiter
eyecols = np.tile(I, n).T
delimiter
grouped = s.groupby(level=0)
delimiter
pool.join()
delimiter
file = matplotlib.font_manager.findfont(font)
delimiter
plot(s[:, (0)], s[:, (1)], color=dark2[c])
delimiter
col_paddings = [get_max_col_w(table, i) for i in range(len(table[0]))]
delimiter
frame.worker.join()
delimiter
xi, yi = np.meshgrid(new_row, new_row)
delimiter
daemon.start()
delimiter
y_series.append(int(z))
delimiter
HttpResponseRedirect(url)
delimiter
x = numpy.arange(0.0, 8, 0.1)
delimiter
form = ArticleForm(instance=article)
delimiter
print(arreq_in_list(myarr0, mylistarr))
delimiter
s1 = set((0, 1))
delimiter
print(dest_path + filename)
delimiter
blosum.update(((b, a), val) for (a, b), val in list(blosum.items()))
delimiter
sys.argv = [str(num)]
delimiter
np.put(a, np.where(a > 1.0)[0], 1.0)
delimiter
t.join()
delimiter
self.webSocket.broadcastMessage(request.content.read())
delimiter
wr = csv.writer(your_csv_file, quoting=csv.QUOTE_ALL)
delimiter
timeit[Model.objects.filter(date_created__startswith=today)]
delimiter
ewma = pandas.stats.moments.ewma
delimiter
X.mean()
delimiter
here_using_my_module.py
delimiter
print(s2)
delimiter
dict_df
delimiter
tempset.update(x)
delimiter
client = requests.Session()
delimiter
sum(matrix[(row), :])
delimiter
deleteself.data[index]
delimiter
self.attr2 = attr2
delimiter
[item[i] for i in self.columns]
delimiter
print(img.getpixel((0, 0)))
delimiter
score = pickle.load(file)
delimiter
trainY = np.array([i for j in trainY for i in j])
delimiter
socketIO.wait_for_callbacks(seconds=1)
delimiter
do_stuff(chunk)
delimiter
myhtml = lxml.html.document_fromstring(string)
delimiter
assert a.shape == b.shape
delimiter
bool(set(array1) & set(array2))
delimiter
g()
delimiter
sys.exit(not result.wasSuccessful())
delimiter
self.tables.append(self.rows)
delimiter
datetime.utcfromtimestamp(ts)
delimiter
result = Test.objects.filter(actions__contains=kwargs)
delimiter
fig.patch.set_alpha(0.0)
delimiter
x.f2()(1)
delimiter
bar_id = Column(Integer, ForeignKey(Bar.id))
delimiter
dur2 = 1
delimiter
end = datetime.strptime(end_date, date_format)
delimiter
self[attr] = value
delimiter
server.serve_forever()
delimiter
rozza = Person.objects.first()
delimiter
layout.addWidget(self.list_widget)
delimiter
len(s)
delimiter
value
delimiter
print(np.all(Z.A == np.maximum(X.A, Y.A)))
delimiter
region2 = thresh2 < gryim
delimiter
serialized_user = yaml.dump(user)
delimiter
size = icon.availableSizes()[0]
delimiter
add(10, 5)
delimiter
fig1.colorbar(im, ax=ax1)
delimiter
b = [9, 8, 7, 6, 5]
delimiter
p = QPixmap.grabWidget(widget)
delimiter
fullpath = os.path.join(root, f)
delimiter
self.log.Show()
delimiter
hello(a, b)
delimiter
zaxis = np.linspace(0, 1, 20)
delimiter
form = _get_link_form(request.POST)
delimiter
print(myFunct())
delimiter
df2
delimiter
length = len(encoded)
delimiter
node.left = Node()
delimiter
print(fn.match.groups())
delimiter
axes[1].append(string2.index(i))
delimiter
t = np.linspace(0, T, N)
delimiter
unsearched.task_done()
delimiter
0
delimiter
print(serv_resp_body)
delimiter
Animal.objects.all()
delimiter
mycode.my_func()
delimiter
deleteself.dict[item]
delimiter
print(id(string[-10:-5]))
delimiter
ax1.set_xlim(-4, 15)
delimiter
mult_fact = np.ones(shape, dtype=int)
delimiter
request = urllib.request.Request(sys.argv[1])
delimiter
df.to_csv(tmp, index=False)
delimiter
length = len(l1) + len(l2)
delimiter
cond = np.array([[False, True, True], [True, False, True]])
delimiter
self.loop.call_soon_threadsafe(self.loop.stop)
delimiter
s = StringIO.StringIO()
delimiter
increment_deal_count(dbconn, userID)
delimiter
df.groupby(idx2.astype(object)).sum()
delimiter
text = tk.StringVar()
delimiter
self.save()
delimiter
b_h = tf.Variable(tf.zeros([n_out]))
delimiter
logger.addHandler(console)
delimiter
lst1[0:1] + interleaveHelper(lst2, lst1[1:])
delimiter
order = list(range(len(some_list)))
delimiter
df_wide = df_indexed.unstack().fillna(0)
delimiter
print(type(b))
delimiter
tf = tempfile.NamedTemporaryFile()
delimiter
data = self.data[:self.size]
delimiter
isinstance(x, number.Number)
delimiter
Arr = np.random.standard_normal([500, 201, 2, 2])
delimiter
logger = get_task_logger(__name__)
delimiter
e = Element(qualifiedName, namespaceURI, prefix)
delimiter
b = np.sin(theta)
delimiter
parser.set_defaults(type=do_stdout)
delimiter
z = tf.matmul(x, y)
delimiter
d = defaultdict(int)
delimiter
not len(non_unique_list) == len(set(non_unique_list))
delimiter
output.append(x)
delimiter
img2 = np.uint8(np.random.randint(0, 255, (480, 640)))
delimiter
assert not sequence_in(c, a)
delimiter
index_li.append(idx)
delimiter
{{email}}
delimiter
zip_longest(fillvalue=fillvalue, *args)
delimiter
l = []
delimiter
print(row.text)
delimiter
-1
delimiter
sys.modules.update(old_modules)
delimiter
type(_)
delimiter
self.process()
delimiter
parent.remove(r)
delimiter
print(commaSeparatedList.parseString(s).asList())
delimiter
self.after(100 * i, change_name)
delimiter
model = PandasModel(your_pandas_data)
delimiter
isinstance(t, str)
delimiter
print(reversed(conn.execute(query).fetchall()))
delimiter
{}
delimiter
neisets = [set(g.neighbors(i)) for i in range(g.vcount())]
delimiter
rmdir(root)
delimiter
headers = {}
delimiter
math.degrees(math.atan(1))
delimiter
nparr = np.fromstring(img_str, np.uint8)
delimiter
message = inbox.Messages.GetFirst()
delimiter
print(emp.name, emp.title)
delimiter
self.root.addHandler(self.qh)
delimiter
b.__doc__
delimiter
rainbow_fill(X, Y)
delimiter
self.start_time = time.time()
delimiter
[tuple for tuple in tuples if term in tuple]
delimiter
self.__getitem__(k)
delimiter
fh.setLevel(logging.INFO)
delimiter
user.save()
delimiter
df
delimiter
headline = models.CharField(max_length=100)
delimiter
digits = escapesequence[2:]
delimiter
foo.close()
delimiter
z[list(np.indices(z.shape[:-1])) + [a]] = 1
delimiter
data = []
delimiter
myapp / somelibfile.py
delimiter
self.char_y += 10
delimiter
points = [random() for _ in range(1000 * 2)]
delimiter
monkey.patch_all()
delimiter
x = np.linspace(0, 10)
delimiter
p = Process(target=f)
delimiter
diff(nges_uneval, n[5])
delimiter
self.cookies = MyCookieJar()
delimiter
os.killpg(0, signal.SIGKILL)
delimiter
allocate(tmp(gridsize, gridsize, gridsize), work(gridsize))
delimiter
print(strc)
delimiter
list(d.keys())
delimiter
unpack.append(item)
delimiter
result
delimiter
new_list = []
delimiter
soup = BeautifulSoup(content)
delimiter
assert find_max([]) == 0
delimiter
print(find_skew(list(range(256))))
delimiter
session.close()
delimiter
Package - 1 / namespace / module1 / __init__.py
delimiter
print(True)
delimiter
parser = MyArgumentParser()
delimiter
compressor.write(chunk)
delimiter
felf = globals()[sys._getframe().f_code.co_name]
delimiter
is_admin = os.getuid() == 0
delimiter
True
delimiter
req.setUrl(url)
delimiter
fig = plt.figure()
delimiter
print(n)
delimiter
callable(elt.text)
delimiter
PyLong_AsByteArray(lnum, a, a.size, 0, 1)
delimiter
p = MyPickler(f)
delimiter
ps.image(box, im, dpi)
delimiter
np.random.shuffle(idx)
delimiter
email_message
delimiter
y[i][j] = x[i][j]
delimiter
print(today - BDay(4))
delimiter
key_result[name_key] = groups[0][name_key]
delimiter
the_list = numpy.array(list(range(0, 101, 10)))
delimiter
print(line1.buffer(EPS).intersects(LineString([pt, pr])))
delimiter
s = StringIO()
delimiter
y = T.dmatrix()
delimiter
birth_years = {nm: year[idx] for idx, nm in enumerate(name)}
delimiter
formattedJson = json.dumps(teams, indent=1, sort_keys=False)
delimiter
print(Animal.__bases__)
delimiter
f.__defaults__ = f,
delimiter
ax = fig.add_subplot(1, 2, 1)
delimiter
sinv = np.sin(x_axis_rotations)
delimiter
d = np.diff(x)
delimiter
fout.write(line)
delimiter
current_script = os.path.realpath(__file__)
delimiter
app = Flask(__name__)
delimiter
self.globals[key]
delimiter
cap = cv2.VideoCapture(0)
delimiter
max_occurrences = max(counter_list, key=itemgetter(1))[1]
delimiter
mlab.surf(subtract.outer(sin(xx), cos(xx)))
delimiter
d[6] = 1
delimiter
excel.Visible = False
delimiter
u = np.hstack([[0], u])
delimiter
path
delimiter
[lower_keys(v) for v in x]
delimiter
self.directory = os.listdir(*args)
delimiter
a, b = b, a + b
delimiter
b = Base()
delimiter
canvas.setPageSize((lHeight, lWidth))
delimiter
sphinx - apidoc - o / my / docs / live / here / my / source / lives / here
delimiter
a, b = tee(iterable)
delimiter
print(sortSparseMatrix(m))
delimiter
result = defaultdict(dict)
delimiter
c = b[:2]
delimiter
bad_data = data[(0), :][data[(0), :] == 0.0]
delimiter
b[a == k] = v
delimiter
HTTPRedirectHandler(), urllib.request.HTTPHandler(debuglevel=0)
delimiter
neighbors = G.neighbors(root)
delimiter
form = CategoryForm
delimiter
inputs.remove(s)
delimiter
self.assertEqual(t[0], str(NumberedVersion(*t)))
delimiter
list(lower[lower.index(strs[0]):lower.index(strs[-1]) + 1])
delimiter
copy_list = copy.deepcopy(org_list)
delimiter
limit += 1
delimiter
print(randomList)
delimiter
print(find_parent(D, class_set))
delimiter
np.PyArray_ITER_NEXT(itf)
delimiter
self.assertEqual(some_method(), False)
delimiter
fig.set_size_inches([8.0, 12.0])
delimiter
doit()
delimiter
a = Field()
delimiter
extra_compile_args.append(arg)
delimiter
parent_map[el].remove(el)
delimiter
p1.daemon = True
delimiter
self.fp.seek(offset, *args)
delimiter
a_set = set(a)
delimiter
visible = Column(Boolean, default=True)
delimiter
dirname = os.path.dirname
delimiter
shp = L[0].shape
delimiter
print(grids[0].dtype, grids[0].nbytes)
delimiter
data_con = bytes.fromhex(data)
delimiter
f.close()
delimiter
a.ravel()[5] = 99
delimiter
raise StopIteration
delimiter
plt.show()
delimiter
B.__init__(self, a, b)
delimiter
app = params.get(cls._APP_PARAM)
delimiter
plain_text = get_plain_text(soup)
delimiter
fig = plt.gcf()
delimiter
a = int(round(time.time() * 1000))
delimiter
local_beta = tf.identity(self.beta)
delimiter
self.checkBoxList.append(checkBox)
delimiter
content = models.TextField(max_length=250)
delimiter
b = np.array(b)
delimiter
pprint.pprint(obj)
delimiter
df.col1 = pd.to_datetime(df.col1)
delimiter
cache[args]
delimiter
rs = r1[(np.lexsort(r1.T)), :]
delimiter
statement = query.statement
delimiter
plt.ylabel(ax2_label)
delimiter
pc.append(Path.CLOSEPOLY)
delimiter
stuff.py
delimiter
cam.release()
delimiter
self.v = v
delimiter
count[c] += 1
delimiter
self.get_queryset().in_group(group)
delimiter
mask = np.cumsum(mask, out=mask, axis=1)
delimiter
self.index - 1
delimiter
df
delimiter
maks = max(flows, key=lambda k: len(flows[k]))
delimiter
name, val = s.split()
delimiter
x = len(self.right) // 2
delimiter
len(dir(anIntOBJECT))
delimiter
self.fingerprints.add(fp)
delimiter
list(df[df > df.quantile(0.8)].dropna().index)
delimiter
1 / 0
delimiter
url = request.build_absolute_uri(request.get_full_path())
delimiter
utf8[:i]
delimiter
dz = NP.random.randint(1, 5, 10)
delimiter
dev_sda1 = boto.ec2.blockdevicemapping.EBSBlockDeviceType()
delimiter
out.seek(0)
delimiter
s = np.array([20, 10000, 10000])
delimiter
shutil.rmtree(dir_name)
delimiter
Hvalue = someoperation(Hnodes)
delimiter
lenIter(s[1:])
delimiter
print(len(object_keys))
delimiter
result = dict(defaults)
delimiter
b = np.random.rand(N, 1)
delimiter
result = []
delimiter
newlist.append(word)
delimiter
a = np.random.rand(100 * 100).reshape((100, 100))
delimiter
print(stream.get(cv.CV_CAP_PROP_FRAME_COUNT))
delimiter
print(nums.std(axis=1))
delimiter
Py_DECREF(pyth_val)
delimiter
fmap[fid] += 1
delimiter
w = wcs.WCS(naxis=2)
delimiter
_NestedClassGetter(), (WidgetType, self.__class__.__name__)
delimiter
a.somefield = somevalue
delimiter
console_handler.setFormatter(log_formatter)
delimiter
gevent.joinall(jobs)
delimiter
child.setText(0, str(value))
delimiter
[-2, -1, 0, 1, 2],
delimiter
pymysql.install_as_MySQLdb()
delimiter
df
delimiter
curl.setopt(pycurl.SSL_VERIFYHOST, 2)
delimiter
layout.set_font_description(font)
delimiter
line_number = random.randint(0, total_num_lines)
delimiter
app = flask.Flask(__name__)
delimiter
ch.setLevel(logging.DEBUG)
delimiter
self.axes.plot(self.data[(0), :], self.data[(1), :], self.data[(2), :])
delimiter
plt.xticks(rotation=25)
delimiter
PassengerID, Survived, Pclass, Name, Sex
delimiter
df = pd.DataFrame(index=missing)
delimiter
c = wmi.WMI()
delimiter
show(p1)
delimiter
html = page.read()
delimiter
a = numpy.array([])
delimiter
print(df)
delimiter
someDict[num].append(line)
delimiter
a + b
delimiter
output = 4 * np.sum(integrand(a + h * np.arange(1, num, 2)), axis=1)
delimiter
loop = asyncio.new_event_loop()
delimiter
conn.close()
delimiter
cnts = df.sign.iloc[diffs.drop_duplicates().index].value_counts().to_dict()
delimiter
widget = InlineButtonWidget()
delimiter
myA[np.where(myA > val)[0][:n]] = 0
delimiter
plt.xlim([-1, 10])
delimiter
servicemanager.Initialize()
delimiter
__modpath__ = module_path(main)
delimiter
Foo.bar == foo
delimiter
stream.write(input_array)
delimiter
msg = MIMEMultipart()
delimiter
ls[1] = ls[1] - (ls[1] - ls[0]) / 2
delimiter
a = calc_a(d1, d2)
delimiter
x = np.array([[10, 0, 10, 0], [1, 1, 0, 0], [9, 9, 9, 0], [0, 10, 1, 0]])
delimiter
noay = word[:len(word) - 2]
delimiter
a1 + csr_matrix((x - a1[ind], ([0] * x.size, ind)), (1, a1.size)).toarray()
delimiter
outdir = os.path.dirname(outfilename)
delimiter
next(generator())
delimiter
print(resultMD5)
delimiter
a = a.reshape((-1, 1))
delimiter
os.close(self.pipe[0])
delimiter
logging.setLoggerClass(CustomLogger)
delimiter
rollback()
delimiter
count -= 1
delimiter
s.append(ALPHABET[r])
delimiter
assert END == pickle.loads(pickle.dumps(END))
delimiter
title = models.CharField(max_length=100)
delimiter
True
delimiter
m = mmap.mmap(f.fileno(), 0, prot=mmap.PROT_READ)
delimiter
deleteobj.__dict__[self._name]
delimiter
table = d.add_table(numrows, numcols)
delimiter
twodarray = np.array(map(lambda x: x.flatten(), threedarray))
delimiter
PyObject_Print(item, stdout, 0)
delimiter
len_part = int(math.ceil(len(data) / float(k)))
delimiter
print(etree.tostring(html))
delimiter
data = urllib.parse.urlencode(values)
delimiter
input_zip = ZipFile(input_zip)
delimiter
sleep(randint(10, 100))
delimiter
sublime.set_timeout(test_progress_bar, 100)
delimiter
df
delimiter
print(s)
delimiter
self.__class__.PARAM
delimiter
x1 = min(x_normalised) - 1
delimiter
client = self.get_current_client()
delimiter
daynum += 1
delimiter
start = get_start_input()
delimiter
zip(ii, y[ii])
delimiter
win.setCoords(0, 0, 10, 10)
delimiter
a % 10 + digit_sum(a / 10)
delimiter
url = urlparse.urljoin(url, match.groups()[0].strip())
delimiter
deletetime.sleep
delimiter
a = {}
delimiter
output = [((k,) + v) for k, v in list(output.items())]
delimiter
out, err = process.communicate()
delimiter
files = list(x for x in filePath.iterdir() if x.is_file())
delimiter
c(1)
delimiter
pairLambs[2]()
delimiter
Queue.put(self, (datetime.now(), item), False)
delimiter
tf.file.close()
delimiter
blocks[0][0]
delimiter
ax2 = fig.add_subplot(gs[1], sharey=ax1)
delimiter
True * 2
delimiter
color_bar.set_alpha(1)
delimiter
a = numpy.random.normal(size=10000)
delimiter
os.makedirs(dest_dir)
delimiter
seconds = tdelta.total_seconds()
delimiter
count = 0 if count == N else N + 1
delimiter
self.events.append(item)
delimiter
f = sympy.exp(x + y) - sympy.sqrt(z)
delimiter
A = numpy.array([[5.0, 5.0, 5.0], [8.0, 9.0, 9.0]])
delimiter
X = numpy.random.normal(size=(100, 10))
delimiter
print(clean_text)
delimiter
Session = sessionmaker()
delimiter
np.int(x)
delimiter
request = urllib.request.Request(BASE_URL, headers=HEADERS)
delimiter
codepoint = ord(c)
delimiter
async_list.append(action_item)
delimiter
len(done) == len(container)
delimiter
res = res * scaling_factor
delimiter
args = parser.parse_args()
delimiter
l = list(range(10))
delimiter
b[elem - 1].append(indx)
delimiter
stack.extend(item)
delimiter
vec = [random.randint(minval, maxval) for i in indices]
delimiter
(comp.string.encode(enc) % params).decode(enc)
delimiter
text += e.strip()
delimiter
self._reject(request, REASON_BAD_TOKEN)
delimiter
detA = np.linalg.det(A)
delimiter
print(parsed_values)
delimiter
merged_tuple = min(c_start, n_start), max(c_end, n_end)
delimiter
args = command.strip().split()
delimiter
print(sum(score_pairwise(seq1, seq2, blosum, -5, -1)))
delimiter
plt.plot(dates, values)
delimiter
end_date = datetime.datetime.today()
delimiter
http_server.listen(8888)
delimiter
c, addr = s.accept()
delimiter
deleteself._x
delimiter
l.append(number % base)
delimiter
p.pretty(key)
delimiter
result.append(copy(path))
delimiter
new_func = func
delimiter
fn(**arglist)
delimiter
assert mocks[mocked].call_count
delimiter
root = tk.Tk()
delimiter
queue.append(start)
delimiter
description = models.TextField(max_length=200)
delimiter
math.factorial(temp)
delimiter
app.debug = True
delimiter
lines.append(str(self.problem_mark))
delimiter
df.assign(z=df.x * df.y)
delimiter
pylab.grid()
delimiter
num += 1
delimiter
os.umask(oldmask)
delimiter
y = all_lists(negate(x))
delimiter
raise KeyError(key, val)
delimiter
event.widget.quit()
delimiter
F.X[:, (0)]
delimiter
unittest.main()
delimiter
plt.grid(True)
delimiter
print(df)
delimiter
mydict = pickle.load(output)
delimiter
out += str(serial.read(1))
delimiter
array[slices]
delimiter
y[::2]
delimiter
tmp = np.bincount(idx, w)
delimiter
p.close()
delimiter
cax.set_array(colorv)
delimiter
ns.c
delimiter
True
delimiter
keystone.roles.list()
delimiter
lstatout = str(ftp.lstat(i)).split()[0]
delimiter
now = datetime.datetime.now()
delimiter
print(convert(52))
delimiter
type(d.day)
delimiter
print(value)
delimiter
t = field.field.widget.__class__.__name__
delimiter
elem.tag = elem.tag[i + 1:]
delimiter
self.ui.gridLayout.addWidget(self.ui.dragDataEdit, 0, 0, 1, 1)
delimiter
i = np.arange(M)[:, (np.newaxis), (np.newaxis)]
delimiter
list(s.cookies.keys())
delimiter
draw = ImageDraw.Draw(img1)
delimiter
codecs.decode(s, originalencoding, errors), len(s)
delimiter
CM[bmask] = data[bmask]
delimiter
z = zipfile.ZipFile(StringIO.StringIO(r.content))
delimiter
a = t
delimiter
seen.add(field.data)
delimiter
receiver.interrupt()
delimiter
b = np.array([4, 5, 6])
delimiter
X, Y = numpy.meshgrid(x, y)
delimiter
x = uniq(0, [[[0]] * 5] * 5)
delimiter
buffer[loc] = line.strip()
delimiter
cls(len(a), a.ctypes.data_as(c_double_p))
delimiter
Story.append(p)
delimiter
event_box.show()
delimiter
ch = logging.StreamHandler()
delimiter
arr = df.a.values
delimiter
X = np.random.randint(0, 99, (6, 5))
delimiter
t = socket.htons(int(port))
delimiter
svos = []
delimiter
(okays if success_condition(r) else errors).append(r)
delimiter
fig.add_axes(ax)
delimiter
alters[0]
delimiter
p = c_char_p(s)
delimiter
foo = decorator(dec_args)(foo)
delimiter
row = cur.fetchall()
delimiter
main_loop = tornado.ioloop.IOLoop.instance()
delimiter
indices = np.arange(data.shape[0])
delimiter
new_queryset = new_queryset | obj.get_ancestors()
delimiter
self._x = value
delimiter
argsdict, unknownargs, execlist = prs.parse_args(cmdlineargs)
delimiter
p = Process(target=f)
delimiter
ax.contourf(xi, yi, zi, 5, cmap=plt.cm.Oranges)
delimiter
nested[outkey][inkey] = val
delimiter
sys._argv = sys.argv[:]
delimiter
db.session.add(stuff)
delimiter
y = map(str, x)
delimiter
a + step == b
delimiter
EmailMessage(subject, message, to=to, from_email=from_email).send()
delimiter
parsed = urlparse.urlsplit(url)
delimiter
elementwiseApply(add, [4, 0], 4)
delimiter
time.sleep(0.05)
delimiter
binvalues.read(file, num_lon * num_lat)
delimiter
d_sum[topkey][key] = dic1[topkey][key]
delimiter
self.button.move(250, 50)
delimiter
y = np.arange(10)
delimiter
array2 = np.array(zip(*list2))
delimiter
self._x
delimiter
self.val *= 2
delimiter
starts = np.where(xadf == 1)[0]
delimiter
self.lframe.pack(side=tk.TOP)
delimiter
associations = []
delimiter
helper(stack[:], [])
delimiter
num_words += len(words)
delimiter
a, b, c, d = [t(s) for t, s in zip((int, float, bool, str), input.split())]
delimiter
print(process_backspaces(process_shifts(test_string)))
delimiter
HTTPCACHE_EXPIRATION_SECS = 0
delimiter
socket = context.socket(zmq.REP)
delimiter
self.axes.zz_dataLim.intervalx
delimiter
{{field.errors}}
delimiter
s.enterabs(t0 + 10 + i, 0, f, (t0,))
delimiter
a = np.random.rand(100000, 2)
delimiter
y = tf.constant([[1.0, 1.0], [0.0, 1.0]])
delimiter
b = [True] * len(a)
delimiter
print((one, four, ten))
delimiter
fp = webdriver.FirefoxProfile()
delimiter
reading = ser.readline().decode()
delimiter
zip(a, a)
delimiter
pos += len(char)
delimiter
add.addtwo(4, 5)
delimiter
self.cool_dict[attr]
delimiter
f = interpolate.interp1d(theoryX, theoryY)
delimiter
doc.build(elements)
delimiter
it.chain.from_iterable(it.repeat(i, i) for i in range(1, n + 1))
delimiter
a = [1, 2]
delimiter
jpeg = buf.getvalue()
delimiter
A = np.random.sample((n, n))
delimiter
freqs[char] += 1
delimiter
res = []
delimiter
im = pl.contourf(data[(i), :, :])
delimiter
EARTH_RADIUS_KM * c
delimiter
textbox.pack()
delimiter
A = 10 * np.eye(10) + np.random.rand(100).reshape(10, 10)
delimiter
print(c.shape)
delimiter
is_sub_with_gap(b, a)
delimiter
D[i, j] = abs(x[i] - x[j])
delimiter
sort(less) + equal + sort(greater)
delimiter
tree = objectify.fromstring(your_xml)
delimiter
df
delimiter
c.perform()
delimiter
True
delimiter
f(x=5)
delimiter
review.save()
delimiter
print(x)
delimiter
df[date_col_name] = pd.DatetimeIndex(df.index)
delimiter
w, h = P.wrap(doc.width, doc.bottomMargin)
delimiter
bisect.insort_left(l, 8)
delimiter
web = QWebView()
delimiter
autoCov += (Xi[i + k] - Xs) * (Xi[i] - Xs)
delimiter
result += numbers[i:j]
delimiter
y = eval(x)
delimiter
tuples = itertools.zip_longest(*A)
delimiter
evens.append(i)
delimiter
filename = sys.argv[1]
delimiter
random.randint(1, 100)
delimiter
r = coo_matrix((data, (row, col)), shape=(M, N))
delimiter
pylab.ylim([0, 100000])
delimiter
ports_strs.append(str(port))
delimiter
local_ret = local_p.wait()
delimiter
elapsed = timeit.default_timer() - start_time
delimiter
[(k, v) for k, v in list(aliases.items()) if q in k or q in v]
delimiter
x, y = width // 2, height // 2
delimiter
task2.join()
delimiter
Thread(target=reader, args=[process.stderr, q]).start()
delimiter
result = []
delimiter
f(2, covered_list)
delimiter
square[np.logical_not(has_neighbor)] = 0
delimiter
False
delimiter
print(B.shape)
delimiter
aspect = ih / float(iw)
delimiter
second_axis.set_yticks([0.2, 0.4])
delimiter
DummyRequest.__init__(self, postpath, session)
delimiter
vals[idx]
delimiter
next(testcsv)
delimiter
print(a[0])
delimiter
some_module.hello_world()
delimiter
fig, ax = plt.subplots()
delimiter
SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET(self)
delimiter
self.lower() == other.lower()
delimiter
points = []
delimiter
filename, file_extension = os.path.splitext(original_file)
delimiter
1
delimiter
mofile
delimiter
a, b, c, d = argv
delimiter
result[0]
delimiter
reversel.append(orig.pop())
delimiter
self.K = self.P.dot(spsolve2(S.T, C).T)
delimiter
offset = datetime.fromtimestamp(epoch) - datetime.utcfromtimestamp(epoch)
delimiter
JM1, JM2 = precalc(jmat)
delimiter
results.append(right[0])
delimiter
arr = np.array(your_list, dtype=np.int16)
delimiter
result = []
delimiter
cache[key]
delimiter
self._index = dict()
delimiter
lst = df.A.values.tolist()
delimiter
print(paragraphsep)
delimiter
dir.append(d)
delimiter
p = lambda x: sum(phi(x) for phi in phis)
delimiter
sdl2.SDL_RenderDrawPoint(renderer, offset.x + x, offset.y - y)
delimiter
plt.pcolor(X, Y, v, cmap=cm)
delimiter
blogpost.tags = new_tags
delimiter
condition.notify()
delimiter
y = np.zeros(2 * len(bins), np.float)
delimiter
a()
delimiter
self.imgdir = fcb.get_filename()
delimiter
result = f.read()
delimiter
a.sort()
delimiter
value
delimiter
dict.__getitem__(self, key)
delimiter
kpt_data = h_r.reshape(-1, phase.shape[0]).dot(phase)
delimiter
a = np.random.random((16, 16))
delimiter
context
delimiter
chr(97)
delimiter
loop = asyncio.get_event_loop()
delimiter
i, j = np.ogrid[0:n, 0:m]
delimiter
self.__dict__
delimiter
diff_unique = [v1 for v1 in diff_list if v1 not in set(source_list)]
delimiter
manager = multiprocessing.Manager()
delimiter
x = op.inputs[0]
delimiter
os.dup2(desired_output_file.fileno(), sys.stdout)
delimiter
form = AnimalForm(request.POST, instance=animal)
delimiter
memset(a.data.as_voidptr, 0, len(a) * sizeof(int))
delimiter
handler.setLevel(level)
delimiter
firstJan = date.today().replace(day=1, month=1)
delimiter
it.starmap(func, it.repeat(args))
delimiter
ax = plt.subplot(111)
delimiter
traceback.print_exc()
delimiter
free(my_array)
delimiter
l.append(val)
delimiter
col.set_sort_column_id(0)
delimiter
result = Queue.Queue()
delimiter
bloc122[[0, 1, 2], [0, 1, 0], [0, 2, 2]] = 0
delimiter
te = time.time()
delimiter
x1, x2, y1, y2 = im.get_extent()
delimiter
root = lxml.html.fromstring(n)
delimiter
dpoints, dloops, dtime, bT, sT, hI, LI, tm = vals[:8]
delimiter
f.add_subplot(2, 1, n)
delimiter
a.append(1)
delimiter
a = [0] * (imax - imin + 1)
delimiter
print(data.dtypes)
delimiter
c.__doc__
delimiter
bananas(dingo)
delimiter
self.pid = pid
delimiter
fig = plt.figure()
delimiter
x = [[4], [6, 4, 9], [4, 6], [0], []]
delimiter
self.message = message
delimiter
self.allowed = self.funcB
delimiter
x, x + 1, x + 2
delimiter
print ()
delimiter
print([x.classId for x in uniqList])
delimiter
d.setdefault(i, []).append(j)
delimiter
setattr(namespace, k, v)
delimiter
installed_apps = [app.__name__ for app in apps.get_apps()]
delimiter
print(strong_tag.text, strong_tag.next_sibling)
delimiter
self.crawler.engine.pause()
delimiter
result = self.send(soapenv)
delimiter
tree = etree.fromstring(xml).getroottree()
delimiter
plt.subplot(212)
delimiter
value = int(field)
delimiter
event = wait_for_event()
delimiter
lis.append(lambda : 0)
delimiter
coal = Jewel()
delimiter
print(selectiveEscape)
delimiter
np.rad2deg(lat), np.rad2deg(lon)
delimiter
self.mapping[key]
delimiter
1, 4, False
delimiter
out = np.concatenate((pic, separator_str), axis=1).tostring()
delimiter
s = codeErr.getvalue()
delimiter
link.cwd(path)
delimiter
messages = list([_f for _f in messages if _f])
delimiter
l = [True, True, False, True]
delimiter
deletedict[k]
delimiter
sf.flush()
delimiter
{getattr(self, k): v for k, v in kwargs.items()}
delimiter
print(my_tz.normalize(my_tz.localize(dt) + delta))
delimiter
crypts
delimiter
p2 = np.array([[1, 1]])
delimiter
ax.set_ylim(min(y) - offset, max(y) + offset)
delimiter
a = np.array([True, True, True, False, False])
delimiter
saver.restore(sess, dir_path + ckpt_file)
delimiter
a = 5
delimiter
x = np.asarray(x)
delimiter
signal.signal(signal.SIGWINCH, update_terminal_width)
delimiter
Py_DECREF(v)
delimiter
now_timestamp = time.time()
delimiter
x = []
delimiter
HSV_tuples = [(x * 1.0 / N, 0.5, 0.5) for x in range(N)]
delimiter
df = DataFrame(table)
delimiter
data = data.decode(encoding, data).encode(new_coding)
delimiter
False
delimiter
body = Column(UnicodeText, nullable=False)
delimiter
logutils.set_up_only_once()
delimiter
out.append([ele])
delimiter
x = np.random.rand(1000)
delimiter
cur = con.cursor()
delimiter
print(err.args)
delimiter
data = f.read(length)
delimiter
int(newSave)
delimiter
app = wx.App(False)
delimiter
draw = ImageDraw.Draw(mask)
delimiter
clf = clf.fit(X[:50, :], y[:50])
delimiter
doStuffStart()
delimiter
start = datetime(2015, 1, 1)
delimiter
current.append(x)
delimiter
time.clock()
delimiter
result = [SQLRow(cursor, r) for r in cursor.fetchall()]
delimiter
r1, r2 = spline.roots()
delimiter
self.timer.timeout.connect(self.reply)
delimiter
d = collections.defaultdict(list)
delimiter
p1, _ = optimize.curve_fit(f, x, y, (0, 0, 0, 0, 0), sigma=sigma)
delimiter
r.content
delimiter
tmpsize = client_socket.recv(1)
delimiter
len(c)
delimiter
reduced.pop(key, 0)
delimiter
print(i)
delimiter
Py_DECREF(it)
delimiter
window = gtk.Window()
delimiter
dz = [5, 4, 7]
delimiter
js[key] = eval(value)
delimiter
x0, y0, z0 = 10, 10, 10
delimiter
match = max(d.get_matching_blocks(), key=lambda x: x[2])
delimiter
t.join(timeout)
delimiter
today = pd.datetime.today()
delimiter
x[1]
delimiter
True
delimiter
shost = self.le.text()
delimiter
plt.axes([0.45, 0.45, 0.45, 0.45])
delimiter
save_cookies_lwp(r.cookies, filename)
delimiter
zdd1 = rdd1.zipWithIndex().map(lambda v_k: (v_k[1], v_k[0]))
delimiter
x, y = np.meshgrid(np.linspace(-1, 1, 100), np.linspace(-1, 1, 100))
delimiter
my_dict[key] = new_value
delimiter
process_data(datum)
delimiter
coord = tf.train.Coordinator()
delimiter
prime_form(9, 1, 5)
delimiter
thread_.start()
delimiter
pcmat = PCA(trainX, n)
delimiter
print(f(v, 0, sum))
delimiter
exit()
delimiter
m.indices = (indices + 1) % m.shape[1]
delimiter
pl.set_line(line, [p1x, p2x], [p1y, p2y])
delimiter
app = QApplication([])
delimiter
screen = pygame.display.set_mode(SIZE, pygame.RESIZABLE)
delimiter
output.write(output_compressor.compress(chunk))
delimiter
out = []
delimiter
tmpfile.write(oldline)
delimiter
self.STDOUT_FILENO = sys.stdout.fileno()
delimiter
end_index = first_index + len(s1) - 1
delimiter
feed = feedparser.parse(content)
delimiter
Z = random.random((50, 50))
delimiter
df = drop_col_n(df, 2)
delimiter
m = adate.month - 1
delimiter
c = np.arange(24).reshape((4, 6))
delimiter
s[:p], s[p + 1:]
delimiter
idx0 = np.concatenate(I)
delimiter
img.save(path)
delimiter
fig, axes = plt.subplots(nrows=4, ncols=4, sharex=True, sharey=True)
delimiter
fig, ax = plt.subplots()
delimiter
map(word_to_action, w)
delimiter
sidebar_data_views.append(fn.__name__)
delimiter
df = pd.DataFrame.from_records(foo).T
delimiter
float.fromhex(new_hex_equiv)
delimiter
a = np.arange(15)
delimiter
print(o.x)
delimiter
groups = []
delimiter
next(it)
delimiter
Any()
delimiter
self.im.seek(j)
delimiter
a = np.arange(5, dtype=np.double)
delimiter
output = re.sub(regex, subst, output)
delimiter
dx = np.diff(np.sort(x))
delimiter
years, months = int(years), int(remainder // avgmonth)
delimiter
listLen = len(listA) / 2
delimiter
A = numpy.array(A)
delimiter
df
delimiter
df
delimiter
users = [User.load(db, uid) for uid in db]
delimiter
print(enc.encode(obj))
delimiter
CM = ax2.contourf(XC, YC, YC, levels=levls, norm=LogNorm())
delimiter
avg = avg - datetime.timedelta(microseconds=avg.microseconds)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
ctx.text_path(text)
delimiter
window = Gtk.Window()
delimiter
self.obj[frozenset(idx)]
delimiter
urlretrieve(urlparse.urlunparse(parsed), outpath)
delimiter
Map(*maps)
delimiter
d = {}
delimiter
pred = clf.predict(priv_fea[basic_feature_names])
delimiter
self.__missing__(key)
delimiter
column_align.show()
delimiter
a = Foo()
delimiter
x = list(range(1, 10))
delimiter
ret.time = self.time.__getitem__(item)
delimiter
temp = np.dot(datam[i:], datam[i].T)
delimiter
cmyk = []
delimiter
bins = np.linspace(0, 1, nbins + 1)
delimiter
ax = plt.gca()
delimiter
self
delimiter
printMetric()
delimiter
[5, 6]
delimiter
data = client.recv(size)
delimiter
ax.cla()
delimiter
fo.seek(0)
delimiter
x_idx, y_idx = np.unravel_index(idx_1d, a.shape)
delimiter
print(key)
delimiter
pool.close()
delimiter
G.remove_node(bad_minor[0])
delimiter
no_integers = list(filter(is_integer, mylist))
delimiter
float_str
delimiter
instance = reservation.instances[0]
delimiter
df
delimiter
s[-1]
delimiter
head.read()
delimiter
z.dtype.names
delimiter
files = [stack.enter_context(open(fname)) for fname in filenames]
delimiter
f()
delimiter
l.count(True) == 1
delimiter
A.__init__(self)
delimiter
clf1.fit(X, y)
delimiter
arr[x] = row
delimiter
reactor.listenTCP(8080, site)
delimiter
print(msg.CC)
delimiter
[s]
delimiter
result.append(word_map.get(w, 0))
delimiter
chain.from_iterable(islice(iterable, *i) for i in args)
delimiter
age = forms.IntegerField()
delimiter
worksheet = workbook.add_worksheet()
delimiter
pool.apply_async(mytask, (runlist[sendcounter], q))
delimiter
A[:] = [A[i] for i in new_order]
delimiter
self.serv = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
self.buf = cStringIO.StringIO()
delimiter
tlen = len(elidetxt)
delimiter
f.write(xmlstr)
delimiter
y = np.linspace(1.0, 2.0, 101)
delimiter
print(s.recv(65000))
delimiter
c = numpy.zeros((4, 2, 2))
delimiter
(x for _, x in nlargest(k, ((random.random(), x) for x in it)))
delimiter
groups = [list(g) for k, g in groupby(seq, lambda x: x != -1) if k]
delimiter
print(e, q)
delimiter
bins[i] += 1
delimiter
process(i for i, v in zip(generator(), counter))
delimiter
frame[~(b1 | b2)] = 0
delimiter
TestCase = decallmethods(login_testuser)(TestCase)
delimiter
a is a + tuple()
delimiter
sorted = numpy.sort(a)
delimiter
logging.config.dictConfig(LOGGING)
delimiter
cv2.floodFill(result2, maskborder, seed_pt, (0, 255, 0))
delimiter
t = pd.DataFrame(dict(val1=[1, 2, 0, 0], val2=[0, 0, 2, 1]), df1.columns)
delimiter
cookie = Cookie.SimpleCookie()
delimiter
idx = a.cumsum()
delimiter
copy_list = org_list[:]
delimiter
app = Flask(__name__)
delimiter
frame = pd.DataFrame(data)
delimiter
PyObject_Del(self)
delimiter
print(response.read())
delimiter
plugin_callable = entry_point.load()
delimiter
f = open(fn)
delimiter
list(menu_links.items())
delimiter
item, = [1, 2]
delimiter
f.seek(0, os.SEEK_END)
delimiter
round(a, 4)
delimiter
d = Image._getdecoder(self.mode, d, a, self.decoderconfig)
delimiter
print(d[..., (2)])
delimiter
i = bisect.bisect_left(float_list, 2.5)
delimiter
connection.close()
delimiter
0
delimiter
print(combine(a, b))
delimiter
item
delimiter
kp2 = detector.detect(img2)
delimiter
do_all_the_processing()
delimiter
frame.values.squeeze()
delimiter
test[5] = 6
delimiter
img = Image.open(BytesIO(img))
delimiter
round(x * 4) / 4.0
delimiter
current_group.extend(group)
delimiter
p = Popen(cmd.split(), stdout=PIPE, stdin=PIPE, stderr=STDOUT, bufsize=1)
delimiter
baz = blar()
delimiter
outer_sum += inner_sum * dk
delimiter
self.flush()
delimiter
self._y = self.y = y
delimiter
serializer_class = ExperimentSerializer
delimiter
student_detail = Student.objects.all()
delimiter
test.test_func()
delimiter
ax.patch.set_alpha(0.0)
delimiter
local_t = t.astimezone(Local)
delimiter
textobj.set_text(wrapped_text)
delimiter
self.cursor = self.conn.cursor()
delimiter
min_index = len(L)
delimiter
b, c = zip(*matches)
delimiter
enable()
delimiter
carx = Car.objects.all()
delimiter
len(listing), total
delimiter
a = C()
delimiter
res2 = slice_array(arr, 4)
delimiter
u = np.cumsum(dist)
delimiter
[1, 1, 1, 1, 0],
delimiter
loop()
delimiter
obj
delimiter
file_like_object = io.BytesIO(byte_array)
delimiter
now = datetime.now(local_tz)
delimiter
Foo.lock = threading.Lock()
delimiter
test1.put()
delimiter
p.waitFor()
delimiter
[i for text in myList for i in textwrap.wrap(text, 10)]
delimiter
painter = QPainter()
delimiter
fh = logging.FileHandler(filename)
delimiter
answer2 = result2.get(timeout=10)
delimiter
df = pd.DataFrame(dict(A=np.arange(len(tidx))), tidx).sort_index()
delimiter
out = np.zeros_like(x)
delimiter
print(link)
delimiter
instance = ModClass()
delimiter
loop = asyncio.get_event_loop()
delimiter
output = ImageOps.fit(im, mask.size, centering=(0.5, 0.5))
delimiter
one_array, two_array = [], []
delimiter
s1[:i]
delimiter
bound_method(*args)
delimiter
stream.stop_stream()
delimiter
temp_handle.write(command)
delimiter
type(0)
delimiter
df.Time = pd.to_timedelta(df.Time)
delimiter
web.Response(self.format_data(data))
delimiter
Orange.feature.Continuous(str(d.name), number_of_decimals=0)
delimiter
self.HTMLDATA.append(data)
delimiter
t.start()
delimiter
grandFather.appendChild(tag)
delimiter
im = cv2.imread(sys.argv[1])
delimiter
print(args_name)
delimiter
help(WebKit.WebView)
delimiter
topic.users.get(pk=1)
delimiter
print(e)
delimiter
last = value[1]
delimiter
left = randint(0, len(L))
delimiter
print(self.b)
delimiter
self.file.readline()
delimiter
bounds = [len(lst) for lst in lists]
delimiter
A[:] = D[slc]
delimiter
wedges, texts = ax.pie(np.abs(np.random.randn(5)))
delimiter
instances = [i for r in reservations for i in r.instances]
delimiter
word_list.append(k)
delimiter
plotx, ploty = np.mgrid[-4:4:100j, -4:4:100j]
delimiter
ploty, plotz = np.mgrid[-4:4:100j, -4:4:100j]
delimiter
row = xy[1]
delimiter
called.append(True)
delimiter
soup4.div
delimiter
particle.append()
delimiter
names = pd.DataFrame()
delimiter
obj = json.loads(chunk.group(2))
delimiter
json_data = json.loads(urlobj)
delimiter
len(data)
delimiter
self.fig = ax.figure
delimiter
Grid.columnconfigure(grid, x, weight=1)
delimiter
show()
delimiter
print(df1[mask])
delimiter
Clothing | Menswear | Pants | Shorts
delimiter
print(Xfit_mono_ind)
delimiter
header += file_handle.readline()
delimiter
p[np.triu_indices(p.shape[0], 1)] = pf
delimiter
f
delimiter
self.close()
delimiter
count_primes(10 ** 9)
delimiter
chained.extend(li.pop(0))
delimiter
b = np.average(a, axis=2)
delimiter
g = g.add_legend()
delimiter
pprint.pprint(list(gen))
delimiter
print(t)
delimiter
app = QtGui.QApplication([])
delimiter
recstack = np.r_[arrs[:, ::-1], arr1[:, ::-1]].view(rdtype).view(np.recarray)
delimiter
self.count > 0
delimiter
method_code = sys._getframe().f_code
delimiter
_crawled = []
delimiter
list(run(5, 5))
delimiter
np.transpose(np.matrix(data))
delimiter
a = np.arange(4).reshape(2, 2)
delimiter
form.show()
delimiter
{{page.title}}
delimiter
func_name = method.__func__.__name__
delimiter
x = x + b
delimiter
zmin, zmax = np.where(z)[0][[0, -1]]
delimiter
q.get(False)
delimiter
exec(sys.arg_set)
delimiter
files = os.listdir(dir)
delimiter
r.real = a.real * b.real - a.imag * b.imag
delimiter
print(ps.maybe_random_prime_from_range(4000, 4200))
delimiter
print(sorted_dict.iloc[2])
delimiter
y_min, y_max = min(y_data), max(y_data)
delimiter
self.parent.id
delimiter
_pix_write_implied_format(filename, self, quality, progessive)
delimiter
ipcounter += 1
delimiter
writer = csv.writer(new_a_buf)
delimiter
max_range = np.asarray(max_range, dtype=int)
delimiter
parsed_url = urlparse(url)
delimiter
pwd.len() < minlen
delimiter
MyClass.does_something()
delimiter
xfmt = ticker.FuncFormatter(xformatter)
delimiter
inited = False
delimiter
session = Session()
delimiter
dict(posts_page=_posts_page)
delimiter
self.method = method
delimiter
values = df.Prices * df.Amount
delimiter
url = urllib.parse.urlsplit(url)
delimiter
l1.append(i)
delimiter
value = get_value(value)
delimiter
ax = plt.axes(projection=ccrs.PlateCarree())
delimiter
fileobj = requests.get(url, stream=True)
delimiter
current_dict = current_dict.setdefault(letter, {})
delimiter
admin.site.register(MyGroup, MyGroupAdmin)
delimiter
a = np.arange(1, n + 1)[(np.newaxis), :]
delimiter
print(content)
delimiter
r_ndegen_tile = np.tile(r_ndegen.reshape(1000, 1), 10000)
delimiter
gc.is_tracked(d)
delimiter
show()
delimiter
xs.append(expr)
delimiter
self.finished.emit()
delimiter
cursor = conn.cursor()
delimiter
s.dt.components.hours
delimiter
df = pd.DataFrame(data_points)
delimiter
column_names = [d[0] for d in cur.description]
delimiter
parent = element.getparent()
delimiter
ints = list(filter(str.isdigit, line.split()))
delimiter
4, 5, 6, 7
delimiter
g = f.__globals__
delimiter
list = []
delimiter
self.token.join([str(s) for s in value])
delimiter
sys.exit(1)
delimiter
c.A7
delimiter
count_dict[base] += 1
delimiter
asset_alert_setting_id = Column(Integer, primary_key=True, autoincrement=True)
delimiter
array[array < 0] = 0
delimiter
skyscrapers[building_number] = BUILDING
delimiter
fig, ax = plt.subplots()
delimiter
meta.reflect(bind=someengine)
delimiter
table.setdefault((w1, w2), []).append(word)
delimiter
type(lst)
delimiter
raise StopIteration()
delimiter
allelts.add(u)
delimiter
self.swallow = swallow
delimiter
y = np.sin(x * 2) + np.sin(x + 1)
delimiter
C.__init__(self, a, c)
delimiter
print(results)
delimiter
print(row)
delimiter
serv_resp = urllib.request.urlopen(serv_req)
delimiter
print(name)
delimiter
print(draw.get_font_metrics(img, artext))
delimiter
glClearColor(0.5, 0.5, 0.5, 1.0)
delimiter
(0 * pq.degC).rescale(pq.degF)
delimiter
func
delimiter
self._array = array
delimiter
df
delimiter
d = {s: 1}
delimiter
tbsCertificate.decode(cert[0])
delimiter
thread.join()
delimiter
val + 1
delimiter
MyApplication()
delimiter
self.popup.show()
delimiter
print(name)
delimiter
menu = wx.Menu()
delimiter
maps = [dict(), dict(), dict()]
delimiter
hanoi(pegs, aux, target, n - 1)
delimiter
writer = csv.writer(f)
delimiter
print(line)
delimiter
print(req.text)
delimiter
print(filename)
delimiter
df
delimiter
self._end = end
delimiter
i = s.find(t)
delimiter
coords = np.column_stack(np.nonzero(img))
delimiter
Fin
delimiter
auth.redeem_refresh_token(service_info.service_resource_id)
delimiter
story.append(image)
delimiter
resp_dict = json.loads(resp_str)
delimiter
p.showPage()
delimiter
q = q_key.get()
delimiter
not any(chain.from_iterable(x))
delimiter
B = np.asmatrix(np.arange(N)).T
delimiter
y = extrapolator(dayswanted)
delimiter
sys.exit(1)
delimiter
print(root.nodes.node[0].PCDATA)
delimiter
ts = pd.Series(np.random.randn(len(rng)), index=rng)
delimiter
b_symm = (b + b.T) / 2
delimiter
tf.add_to_collection(collection, clip_weights)
delimiter
res = []
delimiter
root = tk.Tk()
delimiter
self(*args, **kwargs) + other(*args, **kwargs)
delimiter
stream.close()
delimiter
date = sheet.row_values(rownum)[0]
delimiter
p.print_help()
delimiter
dx, dy, dz = 1, 1, 2
delimiter
G.number_of_edges()
delimiter
outGroup = [e for e in items if not _filter(e)]
delimiter
cls(data)
delimiter
counter += 1
delimiter
img.write(artwork)
delimiter
assert isinstance(lambda m: m, LambdaType)
delimiter
pprint.pprint(A)
delimiter
image = numpy.array(image)
delimiter
pool = multiprocessing.Pool(initializer=init, initargs=(l,))
delimiter
print(set1 == set2)
delimiter
iexps = list(range(length_of_int, -1, -1))
delimiter
print(foo()[0])
delimiter
math.atan2(0.0, 0.0)
delimiter
dfr = dfr.fillna(dfr.max().fillna(0) + dfr.isnull().cumsum(axis=0))
delimiter
some_time_num = mpl.dates.date2num(some_time_dt)
delimiter
obj = Child()
delimiter
a1[i] ^= a2[i]
delimiter
print(type(my_time))
delimiter
dataFT = fft(data, axis=1)
delimiter
team = team_xpath(row)[0]
delimiter
console = logging.StreamHandler()
delimiter
keys = list(i.keys())
delimiter
set_qt_bindings(sys.argv[-1])
delimiter
fig = plt.figure()
delimiter
shootnum = int(shoot)
delimiter
a = [12, 4, 15, 11]
delimiter
print(i)
delimiter
self.list = TestListCtrl(self.panel, style=wx.LC_REPORT)
delimiter
d1 = pickle.load(fp)
delimiter
d[value].append(index)
delimiter
self.im = im
delimiter
result = itertools.chain(qs1, qs2)
delimiter
print(newurl)
delimiter
self.assertEqual(some_method(), True)
delimiter
print(colornames[color])
delimiter
result = []
delimiter
[0.0, 1.0, 0.0],
delimiter
received_socket = socket.fromfd(fd, socket.AF_INET, socket.SOCK_STREAM)
delimiter
pprint(lod)
delimiter
df
delimiter
data = list(input_file)
delimiter
theta = random.uniform(0.0, 2.0 * math.pi)
delimiter
bins = np.linspace(0, 1, nbins + 1)
delimiter
sol = r[(r.imag == 0) & (r.real > 0)].real
delimiter
lst.append(1)
delimiter
atexit.register(readline.write_history_file, histfile)
delimiter
f.write(json.dumps(settings))
delimiter
count += 1
delimiter
self.visit(node.value)
delimiter
new_lst.append(int_i)
delimiter
os.close(0)
delimiter
a_list = [(randint(0, 100), randint(0, 100)) for _ in range(N_ITEMS)]
delimiter
reps
delimiter
parser.close()
delimiter
Matrix(M)
delimiter
data_from_django = {{my_data}}
delimiter
localFile.write(packet)
delimiter
angles = [90, 95, 75, 100]
delimiter
print(line)
delimiter
print(matplotlib.__version__)
delimiter
next(cr)
delimiter
word_length = len(x)
delimiter
application.listen(9999)
delimiter
simplex = tri.find_simplex(uvw)
delimiter
print(value.i)
delimiter
selflink.allow_tags = True
delimiter
bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
delimiter
l = [1, 2]
delimiter
perm1_map = dict((v, i) for i, v in enumerate(perm1))
delimiter
print(lines)
delimiter
matches = [m for m in pattern.finditer(target)]
delimiter
print(d)
delimiter
d = dict()
delimiter
numbers = remove_indices(numbers, indices)
delimiter
no_digits.append(i)
delimiter
print(x)
delimiter
print(custom.vformat(templatestring, [], valuedict))
delimiter
fd.read()
delimiter
lines, _ = ax.get_legend_handles_labels()
delimiter
l.append(x + 1)
delimiter
xx = np.random.randint(0, 5, 1000000)
delimiter
arr.shape
delimiter
fig = plt.figure()
delimiter
self.high = range_list[-1]
delimiter
res.append(dic)
delimiter
insert(d, keyList2, value2)
delimiter
bts = pytesseract.image_to_string(img)
delimiter
z = np.diff(np.append(-1, i))
delimiter
numbers = {int(line) for line in integers}
delimiter
EMAIL_USE_TLS = False
delimiter
mylist[i] = item ** 2
delimiter
db.session.add(user2_from_factory)
delimiter
cursor.append(dict(zip(fieldnames, values)))
delimiter
qimg = QtGui.QImage.fromData(image_data)
delimiter
m = ma.masked_where([True, False] * 5, arange(10))
delimiter
main(args)
delimiter
outer_sum
delimiter
[1]
delimiter
self.load()
delimiter
nArray[nArray == 10] = 9999
delimiter
a = (zfront + zback) / (zfront - zback)
delimiter
rows, cols = a.shape
delimiter
patches.append(self.fill(x, y, closed=False, edgecolor=c, fill=False))
delimiter
event = Event.objects.get(content_type__pk=ctype.id, object_id=self.id)
delimiter
a = np.linspace(-1, 1, 4) ** 2
delimiter
li.sort()
delimiter
first_name = CharField()
delimiter
print(countOccurencesAtTheEndOfTheList([1, 2, 1, 1, 1]))
delimiter
keys = bucket.get_all_keys(prefix=key_prefix)
delimiter
scrapy / linkextractors / lxmlhtml.py
delimiter
2 + value
delimiter
popen = subprocess.Popen(args, stdout=subprocess.PIPE)
delimiter
sched.start()
delimiter
print(instance.public_dns_name)
delimiter
self.hline.set_ydata((y, y))
delimiter
1558 < [1]
delimiter
fig = pylab.figure()
delimiter
min_score, min_player = min((min(a, b), player) for player, a, b in players)
delimiter
logging.basicConfig()
delimiter
size = len(f.read())
delimiter
endings = numpy.where(diffs == -1)
delimiter
app.py
delimiter
self.text = text
delimiter
print(arr[:])
delimiter
kclass
delimiter
result
delimiter
deg, mnt = divmod(mnt, 60)
delimiter
arr1[k] = 2
delimiter
positions1D = np.dot(positions, dims)
delimiter
bsi = 4
delimiter
result = model.objects.get(**kwargs)
delimiter
s[end + 1 - best:end + 1]
delimiter
c.setopt(pycurl.WRITEFUNCTION, txtcurl.write)
delimiter
Index = list(set(list(df1.index) + list(df2.index)))
delimiter
print(node.toxml())
delimiter
printable_string = [x for x in your_string if x in string.printable]
delimiter
page = urllib.request.urlopen(url)
delimiter
s1.values.append(2)
delimiter
a = A()
delimiter
cls(name, bases, dct)
delimiter
app = wx.PySimpleApp()
delimiter
shutil.rmtree(tmpdir)
delimiter
sample_data_rdd = file_sample_rdd.repartition(160)
delimiter
output.paste(0, mask=mask)
delimiter
result = func(x, y)
delimiter
subsequences.append([data[-1]])
delimiter
list.append(Food(4))
delimiter
opener = urllib.request.build_opener(handler)
delimiter
g.__call__
delimiter
dir(Bar)
delimiter
y11, y21 = np.meshgrid(A[:-1, (1)], B[:-1, (1)])
delimiter
min_x, max_x, min_y, max_y = minmaxes(alist)
delimiter
m = p.match(line)
delimiter
func(context, *args, **kwargs)
delimiter
x ** 2 + y ** 2 + z ** 2 <= 1
delimiter
soup
delimiter
frame = pylab.gca()
delimiter
fridays = third_fridays(date.today(), 2)
delimiter
self.server = make_server(self.host, self.port, handler, **self.options)
delimiter
num_rejects = 0
delimiter
set_trace()
delimiter
x < -1000
delimiter
matrix = []
delimiter
print(sys.prefix)
delimiter
print(colnum_string(28))
delimiter
zipped.close()
delimiter
__builtin__.object
delimiter
b = a - numpy.fix(a)
delimiter
False
delimiter
s = Session()
delimiter
L.extend([4] * 10)
delimiter
sourcelines = inspect.getsourcelines(func)[0]
delimiter
self.v = v
delimiter
sfile.close()
delimiter
4805
delimiter
tempCS1 = plt.imshow(frame, cmap=plt.cm.gray)
delimiter
n, d = int(n_d[0]), int(n_d[1])
delimiter
ts.tm_hour
delimiter
ignore[np.ma.minimum(x11, x12) > np.ma.maximum(x21, x22)] = True
delimiter
key = get_cache_key(request, key_prefix=key_prefix)
delimiter
x.Foo()
delimiter
bins = numpy.linspace(-10, 10, 100)
delimiter
rv = func(*args, **kwargs)
delimiter
0
delimiter
assert True
delimiter
subprocesses = {}
delimiter
doctest.testmod()
delimiter
miny, maxy = -miny, -maxy
delimiter
regexp - assemble
delimiter
count = 0
delimiter
xml = ET.tostring(root)
delimiter
ax.set(axisbelow=True, xticklabels=[])
delimiter
i = [0] + numpy.cumsum([len(i) for i in contribs]).tolist()[:-1]
delimiter
V[..., (0)] + V[..., (1)]
delimiter
data = np.random.random_sample((20, 10, 10))
delimiter
df
delimiter
df = pd.DataFrame(data)
delimiter
mat.numCols()
delimiter
curses.mousemask(curses.ALL_MOUSE_EVENTS)
delimiter
replacement if c[0] == n else match.group(0)
delimiter
log2int_fast = math.frexp(x)[1] - 1
delimiter
children = set()
delimiter
bytes = fcntl.ioctl(fd, _KDGETLED, bytes)
delimiter
cell.eventson
delimiter
splitList = match.group().split()
delimiter
dc.annotation.remove()
delimiter
print(num)
delimiter
dst.close()
delimiter
Fun.name
delimiter
len(m)
delimiter
xx = np.lib.stride_tricks.as_strided(xx, shape, strides)
delimiter
type(bytes)
delimiter
d = HashableDict(a=1, b=2)
delimiter
new_pos += 1
delimiter
a = map(str, a)
delimiter
self._y = self.y
delimiter
print(df)
delimiter
self.__class__(self.func.__get__(obj, type))
delimiter
self.tvcolumn0.pack_start(self.text, True)
delimiter
m.show()
delimiter
ws.Columns.AutoFit()
delimiter
file_in_memory.seek(0)
delimiter
show()
delimiter
attr_name_to_attr[attr_name].get()
delimiter
request.PUT = QueryDict(request.body).dict()
delimiter
utc_time = utc_time.replace(tzinfo=pytz.UTC)
delimiter
newR = np.array(newR)
delimiter
start + nones + end
delimiter
apply_vectorized(funcs, a)
delimiter
buf = f.read(4096)
delimiter
result = sum(map(mult, pairs))
delimiter
length_line = 0
delimiter
cond.wait(timeout - current_time + start_time)
delimiter
server.serve_forever()
delimiter
time_a_method(m, s)
delimiter
print(result)
delimiter
shifts = [1] * (len(pattern) + 1)
delimiter
year_start + datetime.timedelta(days=iso_day - 1, weeks=iso_week - 1)
delimiter
strided = as_strided(a, mask.shape, (0, a.strides[0]))
delimiter
f
delimiter
instance = TestClass()
delimiter
print(df)
delimiter
plt.sca(current_ax)
delimiter
filetime = time.localtime(filetimesecs)
delimiter
len(final_subnets)
delimiter
i = len(words) - 1
delimiter
599999900, 600000000
delimiter
x[1:] += x[:-1]
delimiter
d
delimiter
p = argparse.ArgumentParser()
delimiter
y = [(k, v) for k, v in x if max(d[v]) == k]
delimiter
o.write(p)
delimiter
idx = np.unique(index).tolist()
delimiter
np.clip(dat, 0, 1, out=dat)
delimiter
image = pyexiv2.Image(sys.argv[1])
delimiter
some_lib.do_something_with(SomeMockObject)
delimiter
math.sin(x)
delimiter
content = gzip.GzipFile(fileobj=some_file).read()
delimiter
remove = [k for k in mydict if k == val]
delimiter
print(root.attrib)
delimiter
self.arr[key]
delimiter
first_day_of_current_month = date.today().replace(day=1)
delimiter
bd = os.path.join(b, d)
delimiter
x = np.linspace(0, 4, 50)
delimiter
signals.post_save.connect(Revision.send_email, sender=Revision)
delimiter
towers = np.random.rand(n_towers, 2)
delimiter
ord(a), ord(b)
delimiter
g()
delimiter
response = Response(resp.content, resp.status_code, headers)
delimiter
xrat = width / float(MAXSIZEX)
delimiter
raise KeyError
delimiter
indentstack = [1]
delimiter
c = vs.mean(axis=0)
delimiter
data = numpy.arange(0.0, 16.0).reshape((4, 4))
delimiter
date = models.DateTimeField()
delimiter
a = list(range(5))
delimiter
panel.draw()
delimiter
n = 1
delimiter
resp.sendRedirect(userService.createLoginURL(req.getRequestURI()))
delimiter
b.append(6)
delimiter
char = msvcrt.getch()
delimiter
[15, 8, 9, 6],
delimiter
print(ms.group(1).strip())
delimiter
s = set()
delimiter
pyDT = from_excel_ordinal(excelDT)
delimiter
ids = avgDists.argsort()[::-1][:n]
delimiter
print(do_add(s, 4))
delimiter
print(link.string)
delimiter
self.start = start
delimiter
socket.inet_ntoa(unpacked)
delimiter
record = self.browse([NewId()])
delimiter
fp = os.path.join(root, f)
delimiter
main()
delimiter
que.put(a * b)
delimiter
JAVADOC_AUTOBRIEF = YES
delimiter
app.setWindowIcon(app_icon)
delimiter
decorator
delimiter
now_utc = datetime.utcnow().replace(tzinfo=pytz.utc)
delimiter
n = len(data)
delimiter
max(freqs)
delimiter
newlist = list(oldlist | addlist)
delimiter
spiral_ccw(np.arange(nrow * ncol).reshape(nrow, ncol))[::-1]
delimiter
print(f(4, 2))
delimiter
fp.write(part.get_payload(decode=True))
delimiter
a
delimiter
movie_dict[actor].append(key)
delimiter
t = app.jinja_env.get_template(template_name)
delimiter
loop.stop()
delimiter
book_author = BookAuthor.objects.get(author=georfe, book=great_american_novel)
delimiter
a = []
delimiter
self.wait_for_prompt()
delimiter
df2
delimiter
(ds1 + ds2).to_netcdf(new_file)
delimiter
sp = parser.add_subparsers()
delimiter
df
delimiter
x = random.random()
delimiter
functools.update_wrapper(wrapper, fn)
delimiter
excerpt = deferred(Column(Text))
delimiter
np.random.seed(1)
delimiter
grp1.append(s)
delimiter
buff.append(line)
delimiter
p = bk.figure()
delimiter
out.write(chunk)
delimiter
max(map(len, values))
delimiter
counts = list(enumerate(uniq_count(words), 1))
delimiter
self.assertEqual(captcha_count, 1)
delimiter
width, height = im.size
delimiter
(arr - amin) * 255 / rng
delimiter
output_iter = map(unwrap, heapq.merge(*input_iters))
delimiter
f = sys.exc_info()[2].tb_frame
delimiter
key = cv2.waitKey(20)
delimiter
cmdout, cmderr = cmdp.communicate()
delimiter
queryset
delimiter
print(item)
delimiter
average_values = np.bincount(ID, values[sortidx]) / np.bincount(ID)
delimiter
subVal[key]
delimiter
pos = (j - i for i, j in enumerate(lst))
delimiter
print(word)
delimiter
b.instance_a.save()
delimiter
a = a.reshape(a.shape[2:])
delimiter
x0, dx, dxdy, y0, dydx, dy = ds.GetGeoTransform()
delimiter
self.parent._fsb_controllers.append(self)
delimiter
parent_zip = zipfile.ZipFile(parent_zip_path)
delimiter
context = ogl.CGLGetCurrentContext()
delimiter
__old__getattr__(self, name)
delimiter
closedir(dir_p)
delimiter
counts = Counter()
delimiter
x = np.fromstring(np.random.bytes(n), np.uint8, n)
delimiter
c = np.dot(X.T, Y)
delimiter
next(r)
delimiter
factor = inversemodp(A[i, i], q)
delimiter
HTMLParser.reset(self)
delimiter
print(bar)
delimiter
interleave(s, t, res + t[j], i, j + 1, lis)
delimiter
assert isinstance(csv_line[i], str)
delimiter
series = models.CharField(max_length=50)
delimiter
post_serializer = PostSerializer(posts, many=True, context=context)
delimiter
gevent.spawn(read_stream, p2.stderr)
delimiter
OneOrMore(blockOfText).parseString(bigHonkingString)
delimiter
Base.metadata.create_all(engine, tables=[SaneTestModel.__table__])
delimiter
sys.getrefcount(empty)
delimiter
model = MyModel
delimiter
opts, args = parser.parse_args()
delimiter
df_c = df_a.reindex(df_a.index | df_b.index)
delimiter
plt.ylim(ymin=-1.1, ymax=1.1)
delimiter
time.time.__name__
delimiter
bodylist.remove(x)
delimiter
df = pd.DataFrame([1, 2, np.inf, -np.inf])
delimiter
mytask.apply_async(args, kwargs, connection=conn)
delimiter
blob_info = upload_files[0]
delimiter
stdscr.clear()
delimiter
permutes.append(list(permutations(values, subset)))
delimiter
print(res._size())
delimiter
op(A, B)
delimiter
status, result
delimiter
mask = x * x + y * y <= r * r
delimiter
self.update_prop(legline, orig_handle, legend)
delimiter
fig, axes = plt.subplots(ncols=2)
delimiter
N - (fmin + 1) * f2
delimiter
pygame.display.flip()
delimiter
hash(1)
delimiter
itertools.chain(self.vals, self._gen_iter())
delimiter
self.systemTrayIcon = QtGui.QSystemTrayIcon(self)
delimiter
tokenizer.transform(sentenceDataFrame).show()
delimiter
cls
delimiter
iren.Initialize()
delimiter
np.import_array()
delimiter
pickle.loads(pickle.dumps(e))
delimiter
x.pos[int(x.n)]
delimiter
pos = networkx.spring_layout(G)
delimiter
arr = np.ndarray((10, 4), dtype=object)
delimiter
aSrt = np.sort(a.flatten())
delimiter
2 * f
delimiter
start_urls = []
delimiter
floodfill(painted_map, POINT_STATE[k], 255 - color)
delimiter
f.close()
delimiter
self[key] = other[key]
delimiter
df = pd.lreshape(df, d)
delimiter
ff.seek(0)
delimiter
A.__init__(self, name)
delimiter
zf.write(fpath, zip_path)
delimiter
np.uint8(np.abs(np.int16(img1) - img2))
delimiter
x = np.random.normal(size=1000)
delimiter
y = negate(x)
delimiter
registered = models.DateField()
delimiter
start = numpy.array([1, 5, 7], numpy.int16)
delimiter
b = make_chess_board()
delimiter
Ay = np.arange(Aymin, Aymax + dy, dy)
delimiter
node = jinja2.Markup(html)
delimiter
food_ctx.add((alice, dislikes, pizza))
delimiter
modules_to_reload.add(name)
delimiter
reader = csv.reader(afile, dialect=snift)
delimiter
value
delimiter
reactor.listenTCP(1025, factory)
delimiter
False
delimiter
e.args
delimiter
m(1)
delimiter
a = a[~np.isnan(a)].astype(int)
delimiter
rconsole
delimiter
stat_queue.task_done()
delimiter
fields[key]()
delimiter
fn
delimiter
s.add(4)
delimiter
table.show()
delimiter
o2 = np.argsort(arr2)
delimiter
production.py
delimiter
p.feed(s)
delimiter
cv2.imshow(win, vis)
delimiter
n = len(matrix)
delimiter
t.join()
delimiter
ym_start = 12 * start_year + start_month - 1
delimiter
weights = faces[2]
delimiter
data = f.read()
delimiter
foo = Foo(1, 2)
delimiter
valid_strings[start] = tuple(seq[start:start + length])
delimiter
myList, myTuple = list(range(10)), tuple(range(10))
delimiter
OrderForm(tickets=available_tickets)
delimiter
[testenv]
delimiter
self.__dict__
delimiter
self
delimiter
it = iter(it)
delimiter
cb = plt.colorbar(im)
delimiter
e = etree.fromstring(s)
delimiter
threading.Thread.__init__(self)
delimiter
r.withdraw()
delimiter
self.name = name
delimiter
resource.setrlimit(resource.RLIMIT_STACK, (2 ** 29, -1))
delimiter
getline(cin, input_line)
delimiter
a.__add__(b)
delimiter
count1 += 1
delimiter
fig.show()
delimiter
l[:2]
delimiter
setattr(TestCase, name, login_testuser(obj))
delimiter
obj = getattr(obj, attr)
delimiter
imgdata = urllib.request.urlopen(href)
delimiter
buf.bind()
delimiter
ax = pylab.subplot(111)
delimiter
register = template.Library()
delimiter
print(countOccurencesAtTheEndOfTheList([1, 1, 2, 2, 2, 2]))
delimiter
mask = np.ones([len(x_2) - 1], dtype=bool)
delimiter
help(foo.bar)
delimiter
print(result)
delimiter
self.density_water = 0.001
delimiter
bounds = [(low, high) for low, high in zip(xmin, xmax)]
delimiter
result = getattr(im, method)
delimiter
test.paths()
delimiter
print(string_list)
delimiter
__main()
delimiter
convert(f, 2)
delimiter
a = [1, 2]
delimiter
env = Environment()
delimiter
print(test.param1)
delimiter
self._db_recycles += 1
delimiter
[node for node, length in path_lengths.items() if length == n]
delimiter
ns = {}
delimiter
pool.map(process_all, pathfile, 1)
delimiter
str(self())
delimiter
self.tree = [0] * (n + 1)
delimiter
self.name = name
delimiter
self.members = set()
delimiter
g = coo_matrix((ares, (col, row)), shape=(2, 2))
delimiter
event_date = models.DateField()
delimiter
device = TextConverter(rsrcmgr, retstr, codec=codec, laparams=laparams)
delimiter
print(line)
delimiter
s.add(x)
delimiter
temp = dict()
delimiter
i = a.tolist().index(2)
delimiter
an_image.point_data.scalars.from_array(colors)
delimiter
yet = False
delimiter
exit(1)
delimiter
isinstance([], collections.Sequence)
delimiter
ax.add_patch(rect)
delimiter
set_x = frozenset(x)
delimiter
widget.init(data_from_django)
delimiter
result.result()
delimiter
x, y = pts.T
delimiter
data = urllib.parse.urlencode(values)
delimiter
dt = tz.localize(datetime.datetime(2011, 6, 20, 0, 0, 0, 0))
delimiter
self.selenium[browser].quit()
delimiter
print((a, b))
delimiter
print(conn.list())
delimiter
sequence[0]
delimiter
self.__class__.PARAM
delimiter
floor(2 * (N - i - 1), 1 + 4 * i)
delimiter
y = x * f(x)
delimiter
s = list(s)
delimiter
ims.append([im])
delimiter
f.read(6)
delimiter
handler2.addFilter(MyFilter(logging.ERROR))
delimiter
querylist.union(wordlists[wordno])
delimiter
sum(1 for v in seq if pred(v))
delimiter
[seq[i:i + length] for i in range(0, len(seq), length)]
delimiter
b1 = tf.Variable(tf.zeros([256]))
delimiter
keepers[key] = i, row[2]
delimiter
Tprime.sum(-1).sum(-1).sum(-1).sum(-1)
delimiter
X_test = X[test_indices]
delimiter
list(dic1.keys()) - dic2
delimiter
result = []
delimiter
image_samples.append(im.crop(box))
delimiter
opts
delimiter
authenticate(bytearray(creds))
delimiter
coursesList.sort()
delimiter
blob_info = upload_files[0]
delimiter
merge(list1, 0, 2)
delimiter
x = np.zeros(n)
delimiter
response = urllib.request.urlopen(url)
delimiter
combis.append(guess)
delimiter
fig = p.figure()
delimiter
result
delimiter
print(total)
delimiter
ssplit = string.split()
delimiter
True
delimiter
ret, frame = cap.read()
delimiter
print(a.add(1, 2))
delimiter
value_to_key = collections.defaultdict(list)
delimiter
lfilter(num, den, a, axis=0)
delimiter
foo = Foo()
delimiter
results[parent(u, mapping)].add(u)
delimiter
myTurtle.right(50)
delimiter
description = models.TextField()
delimiter
response
delimiter
718.7747248407644,
delimiter
logger.addHandler(log_handler)
delimiter
Ol = list(Os)
delimiter
df[ops[op](df[col], val)]
delimiter
loc_dt = eastern.localize(datetime(2002, 10, 27, 6, 0, 0))
delimiter
S1 += len(set(ids))
delimiter
metainfo = bencode.bdecode(torrent_file.read())
delimiter
soup = BeautifulSoup(browser.page_source)
delimiter
server.daemon = True
delimiter
top = tkinter.Tk()
delimiter
p.start()
delimiter
parser = argparse.ArgumentParser()
delimiter
b = np.copy(identity)
delimiter
entity = json.loads(data)
delimiter
print(blah2)
delimiter
p = Process(target=crawler, args=(domain,))
delimiter
result = dict((key, len(list(group))) for key, group in groupby(sorted(words)))
delimiter
now = datetime.datetime.now()
delimiter
cfg = dev.get_active_configuration()
delimiter
print(date)
delimiter
username = db.Column(db.String(20))
delimiter
p = argparse.ArgumentParser()
delimiter
t = time.time()
delimiter
parser = optparse.OptionParser()
delimiter
lines.append(self.note)
delimiter
s
delimiter
bmp.CreateCompatibleBitmap(srcdc, width, height)
delimiter
encoding_pipeline.fit_transform(fruit_data)
delimiter
bits = bin(ord(c))[2:]
delimiter
repr(self.data)
delimiter
gc.set_debug(gc.DEBUG_SAVEALL)
delimiter
l[0]
delimiter
b = np.random.rand(100 * 100).reshape((100, 100))
delimiter
node_data
delimiter
self.form = Mock()
delimiter
EMAIL_PORT = 587
delimiter
period += 1
delimiter
mydict = {}
delimiter
w, h = im.size
delimiter
counter2 = Counter({k: (v / 2) for k, v in list(counter.items())})
delimiter
type(t[:1])
delimiter
table[i][W - 1] = knapsack(i - 1, W)
delimiter
ff.read()
delimiter
ax2 = ax1.twinx()
delimiter
font = cv2.FONT_HERSHEY_SIMPLEX
delimiter
db.create_all()
delimiter
root = Tk()
delimiter
form = Product(request.form, category=2)
delimiter
res = c.spelling
delimiter
c = df.columns.values
delimiter
basename = os.path.basename(name)
delimiter
ret, gray = cv2.threshold(roi_gray, 250, 255, 0)
delimiter
ClergySerializer(instance=instance).data
delimiter
mkl.set_num_threads(2)
delimiter
PyList_SET_ITEM(p, i, item)
delimiter
d[k] = v
delimiter
old_stderr_fileno = sys.stderr.fileno()
delimiter
last, lastG = 0, 0
delimiter
subparsers = parser.add_subparsers()
delimiter
assert len(target) == 1
delimiter
word = line.strip().lower()
delimiter
d1 = date(2001, 5, 1)
delimiter
p = subprocess.Popen(cmd, stderr=outputfile, stdout=outputfile)
delimiter
msg = server.recv()
delimiter
folder = client.GetResources(q=q).entry[0]
delimiter
reshaped = [x.reshape(y) for x, y in zip(vs, newshapes)]
delimiter
diff_calendar_days = pd.date_range(a, b).size
delimiter
parse(matches.group(0))
delimiter
arr.size()
delimiter
optionmenu.grid(column=column, row=row)
delimiter
newlist = []
delimiter
end = len(ranges) - 1
delimiter
Z = np.sqrt(X ** 2 + Y ** 2) + np.cos(Y)
delimiter
count += 1
delimiter
points = np.random.rand(1000, 2)
delimiter
logits = tf.matmul(hidden, W_logits) + b_logits
delimiter
print(counter[input_char])
delimiter
print(bybuf())
delimiter
print(byline())
delimiter
print(a, b, c)
delimiter
audio_fft = np.fft.fft(a, bestFFTlength(len(a)))
delimiter
digest = hashlib.sha256(pubkey).hexdigest()
delimiter
my_list = my_list.insert(0, my_string)
delimiter
A().f2()
delimiter
QuerySet._filter_or_exclude = _filter_or_exclude
delimiter
print(df)
delimiter
replchars.sub(replchars_to_hex, inputtext)
delimiter
type(b)
delimiter
pub_date = date.today()
delimiter
keyed_dict = defaultdict(list)
delimiter
dept_id = models.CharField(max_length=255)
delimiter
bin((1 << 8 | 2) << 8)
delimiter
date.month
delimiter
result.join()
delimiter
ax.scatter(args, color=next(palette))
delimiter
new_pdf = PdfFileReader(packet)
delimiter
od = defaultdict(list)
delimiter
print(sum(df_subset.C * df_subset.E))
delimiter
cen = -0.2 + 1.2 * np.random.rand()
delimiter
syncdb.Command().execute(noinput=True)
delimiter
bool(set(fruits).intersection(fruit_dict2))
delimiter
ranges = np.concatenate([np.arange(count) for count in counts])
delimiter
print_set(email.get())
delimiter
database = db
delimiter
signal.signal(signal.SIGALRM, handler)
delimiter
_recursivePop(tree, nodes)
delimiter
tmpfile.close()
delimiter
True == 1
delimiter
img.close()
delimiter
c = img.layers[0]
delimiter
type(x)
delimiter
print(row.name, np.mean(df2))
delimiter
df
delimiter
as_strided(b, (n - 1, n + 1), (b.itemsize * (n + 1), b.itemsize))
delimiter
a = sorted(a, reverse=True)
delimiter
controllers
delimiter
helpers
delimiter
queryset = Bloop.objects.all()
delimiter
main()
delimiter
method(self, *args, **kwargs)
delimiter
a = np.array(a)
delimiter
M = NP.empty(shape=(10, 5), dtype=float)
delimiter
changed = [(k, v) for k, v in list(self.byEmail.items()) if id(person) == id(v)]
delimiter
reversed_dict = defaultdict(list)
delimiter
print(df2[mask])
delimiter
R = array.shape[0]
delimiter
self.items.append(item)
delimiter
db.put(entities)
delimiter
msg = clientsocket.recv(1024)
delimiter
entries = re.split(regex, allLines)
delimiter
arr[:, (0)] = int(10)
delimiter
print(difft(time(20, 40, 0), time(22, 41, 0)))
delimiter
map(numpy.random.shuffle, array)
delimiter
print(foo.getI())
delimiter
object_list = object_list.filter(user__in=request.user.patients.all())
delimiter
result = cursor.fetchone()
delimiter
self.__refs__[self.__class__].append(weakref.ref(self))
delimiter
True
delimiter
df
delimiter
admin.site.unregister(Group)
delimiter
DBSession = scoped_session(sessionmaker(extension=ZopeTransactionExtension))
delimiter
entity = models.ForeignKey(CancellationEntity)
delimiter
sqldf(q, globals())
delimiter
test.open()
delimiter
dispatcher.connect(reactor.stop, signals.spider_closed)
delimiter
b = numpy.array([(n + datetime.timedelta(minutes=i)) for i in m])
delimiter
info = response.info()
delimiter
doc.remove(tag)
delimiter
sunday = date - datetime.timedelta(days=day_idx)
delimiter
diam = np.zeros(len(seed))
delimiter
glViewport(0, 0, self.width, self.height)
delimiter
result = urllib.request.urlretrieve(self.url)
delimiter
l[0] = 0
delimiter
x = df.ix[(0), 5:]
delimiter
startTs = time.time()
delimiter
something_useful()
delimiter
http = credentials.authorize(http)
delimiter
n_values = np.max(X, axis=0) + 1
delimiter
y, x = np.mgrid[:nrows, :ncols]
delimiter
print(cl.run())
delimiter
res += YIELD
delimiter
print(f(11))
delimiter
ipdb.set_trace()
delimiter
self.users = self.session.query(User).all()
delimiter
-1
delimiter
r = np.array([random.randrange(1, 1000) for _ in range(0, 1000)])
delimiter
Model.objects.count()
delimiter
x, y = event.x, event.y
delimiter
b = 2
delimiter
ws = book.worksheets[0]
delimiter
__metaclass__ = ModelBase
delimiter
m[j - 1, i - 1] = 1
delimiter
new_tuples
delimiter
estimator.fit(X_digits, y_digits)
delimiter
meter_row = sel_cur.fetchone()
delimiter
cmd.Cmd.default(self, line)
delimiter
inner_result = pool.apply_async(setinner, (Q, G, n))
delimiter
seq = difflib.SequenceMatcher(a=a.lower(), b=b.lower())
delimiter
links = sorted(links, key=lambda x: x.popularity, reverse=True)
delimiter
d[get_key(f)].append(f)
delimiter
print(df)
delimiter
b = []
delimiter
counts = {}
delimiter
self.print_stats(stats)
delimiter
reactor.stop()
delimiter
list(proxy.keys())
delimiter
app.MainLoop()
delimiter
dane = c.fetchall()
delimiter
y.diff(x)
delimiter
app = wx.App(False)
delimiter
my_diag = numpy.zeroes((2, 2))
delimiter
con.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
delimiter
params.sort(key=lambda k_v: len(str(k_v[0])), reverse=True)
delimiter
self.frame.Raise()
delimiter
self.user = user
delimiter
myMap[n] = 1
delimiter
profile_link.allow_tags = True
delimiter
filename = part.get_filename()
delimiter
False
delimiter
psutil.swap_memory()
delimiter
register.filter(hash)
delimiter
A = np.vstack((x, np.ones(n))).T
delimiter
layout.addWidget(self.datetime)
delimiter
name = os.path.splitext(os.path.basename(sys.argv[0]))[0]
delimiter
values = np.array((0, 0, 0, 0, 0))
delimiter
p = [4, 10, 5]
delimiter
b = form.save(commit=False)
delimiter
print(s)
delimiter
l += t + t2
delimiter
Ht = array([[1, 0, t[0]], [0, 1, t[1]], [0, 0, 1]])
delimiter
print(xi, yi, value, color)
delimiter
minsum = min([iter(entry.values()).next()[1] for entry in groupvallist])
delimiter
c = a[:]
delimiter
test > 1
delimiter
result_strings = (s for s in http_strings if not any(e in s for e in exclude))
delimiter
i1, i2 = p1[0], p2[0]
delimiter
root.children.append(t(1))
delimiter
print(df2)
delimiter
a = np.linspace(0, 2 * np.pi, 500)
delimiter
client.do_handshake()
delimiter
xmax = logdata.max()
delimiter
scipy.version.short_version
delimiter
v = df.stack().unique()
delimiter
f(phases)
delimiter
s = f.read()
delimiter
patch.stopall()
delimiter
f.__setitem__(0, 1)
delimiter
stats.strip_dirs()
delimiter
data = np.random.randint(1, 10, N)
delimiter
stopy = bigary - hereary + 1
delimiter
d[k] = myfun(v)
delimiter
item = items.popleft()
delimiter
df
delimiter
p1p2_chessboard = max(abs(p1[0] - p2[0]), abs(p1[1] - p2[1]))
delimiter
bad_os()
delimiter
two = Decimal(2)
delimiter
protest, 1
delimiter
dist_lower = distance([triplets[iT][0], listB[iB]])
delimiter
thirdpartymodule_a.SomeClass.__init__ = new_init
delimiter
slices.append(slice(r, r + np.random.randint(1000)))
delimiter
print(-np.sort(-a))
delimiter
print(MySubClass().a_property)
delimiter
df
delimiter
l = sc.recv(1024)
delimiter
GenPasswd2(8, string.digits) + GenPasswd2(15, string.ascii_letters)
delimiter
print(schema)
delimiter
p = np.arange(256, dtype=int)
delimiter
data2.to_csv(filename)
delimiter
pool.join()
delimiter
s = ctypes.cast(s, ctypes.c_char_p)
delimiter
xlim(0, 5.5)
delimiter
publication = get_something_from_db()
delimiter
module = inspect.getmodule(inspect.currentframe().f_back)
delimiter
x = np.linspace(0, 2 * np.pi, 100)
delimiter
pympler.asizeof.asizeof(abr)
delimiter
self.min_set[self.store[key]].remove(key)
delimiter
[0.68800002, 0.62400001]
delimiter
matplotlib.rcsetup.all_backends
delimiter
v = np.array([1, 2])
delimiter
self.orig_method = getattr(self.obj, self.method)
delimiter
help(so27.myfunc)
delimiter
R = np.empty(N, dtype=int)
delimiter
func = cls.__dict__[func_name]
delimiter
socket.fromshare(share)
delimiter
mydict = {a: 1}
delimiter
past = datetime.now()
delimiter
logger
delimiter
self._check_setup()
delimiter
print(root.Document.Placemark.Point.coordinates)
delimiter
groups = [funA, funB, funC]
delimiter
result_list
delimiter
srcBB = ax1.get_position()
delimiter
_testee = Testee()
delimiter
message = MessageForm(request.POST)
delimiter
result[1, 0, 0, 0, 0]
delimiter
array = np.array(array)
delimiter
ax.grid(False)
delimiter
print(sqc)
delimiter
n = sum(1 for line in open(filename))
delimiter
WEIGHTS = np.array([0.4, 0.4, 0.2])
delimiter
pool.spawn(time.sleep, 1)
delimiter
self._expensive_operation
delimiter
str(self._data.values[index.row()][index.column()])
delimiter
myseries_three.loc[0]
delimiter
print(data_value.text)
delimiter
newick = getNewick(node.get_left(), newick, node.dist, leaf_names)
delimiter
[pep8]
delimiter
p.memory_percent()
delimiter
info_data = info.unpack(input.read(info.size))
delimiter
a[:]
delimiter
MSWord.Documents.Open(filename)
delimiter
fcntl.lockf(file_handle, fcntl.LOCK_EX | fcntl.LOCK_NB)
delimiter
lines = f_in.readlines()
delimiter
i = 0
delimiter
m_to_N = np.zeros((n - 1, n - 1))
delimiter
xy_pixels = ax.transData.transform(np.vstack([x, y]).T)
delimiter
self.loadFinished.connect(self._result_available)
delimiter
ax2.set_xticks([])
delimiter
cam = AVTCamera()
delimiter
fig.colorbar(surf, shrink=0.5, aspect=5)
delimiter
spark.createDataFrame([row]).dtypes
delimiter
print(a.a)
delimiter
img = images.Image(blob_key=str(profile.avatar.key()))
delimiter
id = np.where(fdata[1] == fdata[1].min())[0][0]
delimiter
response = gss_client.session.get(full_feed_url)
delimiter
G.remove_edge(keys[1], b[keys[1]])
delimiter
print(m.groups())
delimiter
logsum += log(p)
delimiter
p.start()
delimiter
numpy.finfo(numpy.float64).max
delimiter
list1 = map(itemgetter(0), origlist)
delimiter
sys.exit(make_main(sys.argv))
delimiter
print(groups.mean().b)
delimiter
offset += size1 * byte_size
delimiter
print(df)
delimiter
a += [i]
delimiter
cr = func(*args, **kwargs)
delimiter
q.put(url)
delimiter
plot2 = plt.plot(x, mlab.normpdf(x, m2, std2))
delimiter
c.my_stuff
delimiter
RFPDupeFilter.__init__(self, path)
delimiter
col_mean = np.nanmean(a, axis=0)
delimiter
python - Qnew
delimiter
ecdf = np.cumsum(counts).astype(np.float64)
delimiter
X = dataset[:, :60].astype(float)
delimiter
Sxx = Sxx + x * x
delimiter
all = list(range(1, 7))
delimiter
self.file = zipextfile
delimiter
print(get_file_names_from_file_number(fds))
delimiter
File(file_obj, name=name)
delimiter
a * np.cos(2.0 * np.pi * f * t + p)
delimiter
iso8601.parse_date(mydate)
delimiter
print(sdk)
delimiter
numpy.logaddexp(0, logB - logA) + logA
delimiter
int(str)
delimiter
d = defaultdict(int)
delimiter
fflush(stdout)
delimiter
curses.init_pair(i, i, -1)
delimiter
response.status_code
delimiter
s.update(list2)
delimiter
df_br = df_b.reindex(df_a.index | df_b.index)
delimiter
height, width, channels = scipy.ndimage.imread(filepath).shape
delimiter
process(cl)
delimiter
INS = lambda x: 72.0 * x
delimiter
NULL
delimiter
plt.show()
delimiter
self.events.append(datetime.now())
delimiter
recipient = User.objects.get()
delimiter
std1 = 1.0
delimiter
self.__class__.instances.append(weakref.proxy(self))
delimiter
l = max(l, max(longest(elem) for elem in list1))
delimiter
app = Flask(__name__)
delimiter
csock, addr = sock.accept()
delimiter
hash(tuple(sorted(self.items())))
delimiter
x
delimiter
self.fields[key].required = False
delimiter
currentMatch = pattern.search(remainingStr)
delimiter
input = np.array([1.0, 1.0])
delimiter
my_instance.b()
delimiter
a.b_list.append(B())
delimiter
filemenu = tkinter.Menu(menubar, tearoff=0)
delimiter
output = mp.Queue()
delimiter
loci = loci[1:]
delimiter
exit()
delimiter
resolutin = 250.25
delimiter
setattr(self, attr, getattr(other, attr))
delimiter
session.flush()
delimiter
x = np.linspace(0, 2 * np.pi, 400)
delimiter
http_server2.listen(8081)
delimiter
self.timestamp = time.time()
delimiter
raw = f.read(4)
delimiter
recvall(sock, msglen)
delimiter
g.user = current_user.get_id()
delimiter
result = _SHGetFolderPath(0, CSIDL_COMMON_APPDATA, 0, 0, path_buf)
delimiter
controller.authenticate()
delimiter
filtered = scipy.signal.lfilter(b, a, data)
delimiter
l2 = [TrackedObject(x, index) for index, x in enumerate(l1)]
delimiter
v.discard(k)
delimiter
set(t[0])
delimiter
violations1 = [k for k, v in list(collections.Counter(df[0]).items()) if v > 1]
delimiter
lightened25 = lerp(my_color, white, 0.25)
delimiter
pred = sess.run([prediction], feed_dict=feed_dict)
delimiter
dY = np.abs(YY - YY.T).reshape((1, Y.size ** 2))
delimiter
data = np.ones(y.size, dtype=dtype)
delimiter
print(bytes)
delimiter
tri[np.triu_indices(67, 1)] = dm
delimiter
bad_lines.append(j)
delimiter
d = {}
delimiter
self.arg1 = arg1
delimiter
display_name = models.CharField(max_length=255, blank=True, null=True)
delimiter
out[k:k + cnt] = np.arange(cnt)
delimiter
t = Timer(20 * 60, timeout)
delimiter
x509.parse(s)
delimiter
print(f.name)
delimiter
value
delimiter
stokes_list[i] = stokes_line
delimiter
labels = cls.fit_predict(X_hat)
delimiter
print(df)
delimiter
opener = urllib.request.build_opener(cookie)
delimiter
args[i] = args[i] * args[i]
delimiter
content_type = models.ForeignKey(ContentType)
delimiter
filename = args.output.name
delimiter
serialized.save()
delimiter
post_save.connect(signals.do_some_stuff_with_mymodel, sender=MyModel)
delimiter
print(model_admin.search_fields)
delimiter
main()
delimiter
b = pd.Series([49, 54, 62, 74], index=[2, 6, 4, 0])
delimiter
soup = BeautifulStoneSoup(xml_str)
delimiter
wf.setnchannels(CHANNELS)
delimiter
better_errs = model.get_error(betterdata, bettermodel)
delimiter
parse_object = urlparse(url)
delimiter
hash(key)
delimiter
f.write(c)
delimiter
print(dt)
delimiter
self.label.width(), self.label.height()
delimiter
locations = np.arange(0, 50, 1)
delimiter
b = int(max(0, 255 * (1 - ratio)))
delimiter
yajl.load(f)
delimiter
ujson.load(f)
delimiter
req = urllib.request.Request(url)
delimiter
self._namescallback[channel][0].append(d)
delimiter
self[k] = v
delimiter
self.z + x
delimiter
zipinmemory = io.BytesIO(remotezip.read())
delimiter
print(line)
delimiter
s = s.execute()
delimiter
[float(row_list[0]), int(row_list[1])]
delimiter
j = jinja2.Jinja2(app)
delimiter
print(dir(etc))
delimiter
doStuff()
delimiter
formset = BuyerInlineFormSet
delimiter
app = Flask(__name__)
delimiter
result = [x for x in A if x in B]
delimiter
g.get_group(0)
delimiter
long_string
delimiter
client = suds.client.Client(my_wsdl, transport=WellBehavedHttpTransport())
delimiter
print(nx.pagerank(D))
delimiter
jobs = []
delimiter
s.translate(translate_table)
delimiter
query = celery.events.state.tasks_by_type(your_task_name)
delimiter
head.append(i)
delimiter
assert isinstance(value, int)
delimiter
response = requests.get(url)
delimiter
print(x, x is y)
delimiter
dosomething(alist)
delimiter
win = curses.initscr()
delimiter
scipy.maximum.accumulate(x)
delimiter
dec
delimiter
settings = propfaid.get_cache()
delimiter
wallet
delimiter
main()
delimiter
self.response.write(w)
delimiter
sprite = sheet.subsurface(sheet.get_clip())
delimiter
ax2 = ax.twinx()
delimiter
signal.setitimer(signal.ITIMER_REAL, seconds)
delimiter
Py_Initialize()
delimiter
im = ax1.pcolormesh(t, r, c.T)
delimiter
id(1) == id(1)
delimiter
ans = np.array([map(float, mat.next().split()) for i in range(length)])
delimiter
repeated = np.broadcast_to(arr, (1000, arr.size))
delimiter
dt_aware = timezone.make_aware(dt_unaware, timezone.get_current_timezone())
delimiter
res[j] = numbers[f:b]
delimiter
cursor = conn.cursor()
delimiter
y_train = Y[train_indices]
delimiter
main()
delimiter
col = pd.MultiIndex.from_product([df.columns, [0, 1]])
delimiter
A().update()
delimiter
df
delimiter
exit_status = process.wait()
delimiter
print(a, b)
delimiter
database = myDB
delimiter
app = Flask(__name__)
delimiter
x = x.replace(k, v)
delimiter
inblock = 0
delimiter
scipy.stats.poisson.interval(0.95, data)
delimiter
mtime = os.stat(full_path).st_mtime
delimiter
writer.writerow([t, u, v, w, targets[t][u][v][w]])
delimiter
self.path = path
delimiter
_exhausted = object()
delimiter
obj.ds.append(d)
delimiter
df_list_of_list = map(f, row_list[:-1])
delimiter
deletelang_name[k]
delimiter
do_something_else_1()
delimiter
x, y
delimiter
vec = [(i - 1) for i in dim]
delimiter
list(s)
delimiter
fp.close()
delimiter
sys.exit(1)
delimiter
self.code_map[code] = {}
delimiter
axs.add_patch(rect)
delimiter
lst1 + [x for x in lst2 if x not in lst1]
delimiter
x + y + z
delimiter
ax = plt.gcf().gca()
delimiter
s = set(range(10))
delimiter
a = np.int64(np.random.random_integers(0, _BLOCK_MAX, blocks_per_flush))
delimiter
start, end, step = 0, len(out), 1
delimiter
args = parser.parse_args()
delimiter
python
delimiter
c.execute(schema)
delimiter
x = np.cos(u) * np.sin(v)
delimiter
s.close()
delimiter
eq_map.append((coeff, power))
delimiter
ranges = sum((list(t) for t in zip(nums, nums[1:]) if t[0] + 1 != t[1]), [])
delimiter
self
delimiter
client_socket = socket.socket()
delimiter
len1
delimiter
l = arr.shape[1] / m
delimiter
finfo64 = np.finfo(np.float64)
delimiter
test()
delimiter
x ** 2
delimiter
loader = unittest.TestLoader()
delimiter
cv.CvtColor(frame, frame, cv.CV_BGR2RGB)
delimiter
foo = choice(elements)
delimiter
v = self.cache[key] = f(*args, **kwargs), time.time()
delimiter
form = AuthorForm(request.POST)
delimiter
U = (np.arange(M * N) / (M * N)).reshape(M, N)
delimiter
lst.remove(choice)
delimiter
int(maybeLst)
delimiter
iqr = qhigh - qlow
delimiter
CJK_Radicals = 11904, 42191
delimiter
sys.exit(app.exec_())
delimiter
print(X_train.shape)
delimiter
[0, 0]
delimiter
b.sum()
delimiter
file2.close()
delimiter
inputoutput = ArrayType()
delimiter
print([co for co in c if not any(st.issubset(co) for st in sts)])
delimiter
self.params = dict(params or [])
delimiter
nil
delimiter
self.connection.shutdown(1)
delimiter
factorial(*[5, 6, 7])
delimiter
uvw = np.random.rand(n, d)
delimiter
print(item)
delimiter
glColorPointer(2, gl.GL_FLOAT, 0, vertices_gl)
delimiter
bynweekday, byweekday = (), ()
delimiter
table.rename(index=str)
delimiter
print(model_tunning.best_score_)
delimiter
self.obj = obj
delimiter
lines = [line.strip() for line in handle]
delimiter
grid.addWidget(text_edit)
delimiter
B = np.repeat(A[(np.newaxis), ...], 4, 0)
delimiter
bins = np.linspace(X.min(), X.max(), total_bins)
delimiter
fly.rect.left = hit.rect.right
delimiter
iter(obj)
delimiter
self.Bind(wx.EVT_LIST_COL_CLICK, self.OnColumn)
delimiter
lis[index[6] + 1]
delimiter
True
delimiter
int(x)
delimiter
a[:, (1)] = x
delimiter
sB = sparse.csr_matrix(B)
delimiter
self.client_address[0]
delimiter
X_sim = csr_matrix([[1, 1, 1, 1, 1, 1, 0]])
delimiter
result = [example[i:j] for i, j in pairs]
delimiter
d = dict(COUNTRIES)
delimiter
print(a)
delimiter
add.delay(4, 4)
delimiter
text = f.read()
delimiter
loop.run_until_complete(task)
delimiter
W.shape
delimiter
bool(st.st_mode & stat.S_IRGRP)
delimiter
r = requests.get(zip_file_url)
delimiter
homedir = shell.SHGetFolderPath(0, shellcon.CSIDL_APPDATA, 0, 0)
delimiter
cmap = mpl.cm.Blues
delimiter
r.findall(strs)[:-1]
delimiter
right = randint(left + 1, len(L))
delimiter
ax.add_patch(PolygonPatch(j, alpha=0.5))
delimiter
a.x = 1
delimiter
numbers = map(int, list(filter(str.isdigit, input_string)))
delimiter
print(list(reversed(numbers)))
delimiter
lol = [list(range(i)) for i in range(5)]
delimiter
print(latest_file)
delimiter
inc = incgen()
delimiter
stderr_queue = Queue.Queue()
delimiter
VARIABLE5
delimiter
VARIABLE6
delimiter
VARIABLE7
delimiter
VARIABLE8
delimiter
VARIABLE9
delimiter
VARIABLE10
delimiter
VARIABLE11
delimiter
VARIABLE12
delimiter
VARIABLE4
delimiter
print(matches.groupdict())
delimiter
fg.canvas.draw()
delimiter
setattr(self, attr, self.get_column(pyQueryRow, i))
delimiter
im = ax.contourf(xi, yi, zi)
delimiter
numbers[0]
delimiter
app.yaml
delimiter
print(str(s))
delimiter
df
delimiter
temp_rdd_dense.toDF().show()
delimiter
res = []
delimiter
dictionary[section][option] = config.get(section, option)
delimiter
i = cv2.imdecode(np.fromstring(jpg, dtype=np.uint8), cv2.CV_LOAD_IMAGE_COLOR)
delimiter
block = infile.read(BLOCKSIZE)
delimiter
True
delimiter
length = len(items)
delimiter
a.nbytes
delimiter
print(f.vals[0])
delimiter
tcks = nax.get_yticks()
delimiter
out = np.empty(sum(cnts))
delimiter
print(a, b, err)
delimiter
c.pop()
delimiter
cnt = MyObject.objects.count()
delimiter
img50_nd = scipy.ndimage.interpolation.zoom(img, (0.5, 0.5, 1))
delimiter
new_bigmat
delimiter
keys = [0.5, 1]
delimiter
angle *= 180 / math.pi
delimiter
dotime(func, int(argv[1]))
delimiter
self.view = QtWebKit.QWebView(self)
delimiter
db = SQLAlchemy(app)
delimiter
row_sums[(i), :] = row_sums[(i - 1), :] + img[(i), :]
delimiter
ind = np.arange(N)
delimiter
+yak.update(locals())
delimiter
ax = axes[i, j]
delimiter
assert x.foo == 1
delimiter
Xm = np.where(missing, np.nan, X)
delimiter
ys = np.arange(512)
delimiter
s = pickle.dumps(sys)
delimiter
x, y = [], []
delimiter
y + 5 * x
delimiter
df = pd.DataFrame(a)
delimiter
t0 = time.time()
delimiter
r
delimiter
time = json.loads(json.dumps(time))
delimiter
screen.force_update()
delimiter
self.pre_app(environ, start_response)
delimiter
s * 5
delimiter
[x for x in a]
delimiter
bed_info = {}
delimiter
g.append([])
delimiter
epochdt = datetime.datetime.fromtimestamp(epoch)
delimiter
1 / 0
delimiter
sys.stdout.flush()
delimiter
circles = np.uint16(np.around(circles))
delimiter
df.gdp = df.gdp.shift(-1)
delimiter
target = sys.stdin.readline().strip()
delimiter
layout = QHBoxLayout(self)
delimiter
days = dict(zip(day_list, list(range(len(day_list)))))
delimiter
result
delimiter
result = []
delimiter
next(myIterator)
delimiter
use(line)
delimiter
group = models.ForeignKey(Event)
delimiter
print(a - b)
delimiter
l2[4][1:]
delimiter
A = coo_matrix((data, (row, col)), shape=(4, 4))
delimiter
server.test(1, 2)
delimiter
(0)(a, b)
delimiter
print(next(a))
delimiter
q = lambda x: tuple(range(x, x + 4))
delimiter
p2 = os.path.join(relname, p)
delimiter
doSomethingElseWith(pos.x, pos.y, pos.z)
delimiter
self.q = queue.Queue()
delimiter
fig = plt.figure()
delimiter
c = 2 * atan2(sqrt(a), sqrt(1 - a))
delimiter
divider = make_axes_locatable(ax)
delimiter
key
delimiter
plt.plot(xdata, ydata)
delimiter
attrValue = attr[1]
delimiter
True
delimiter
parsed = urlparse.urlparse(url)
delimiter
pts.append(temp)
delimiter
parser = argparse.ArgumentParser()
delimiter
settings.INSTALLED_APPS.append(app)
delimiter
manager = mp.Manager()
delimiter
f = plt.figure(figsize=(10, 10))
delimiter
self.keyToId = {}
delimiter
print(y.x.i)
delimiter
total.update(sample)
delimiter
result = dict(source_dict)
delimiter
D12 = round(TOA12 * c, 2)
delimiter
self.pred(obj) and predicate(obj)
delimiter
fq[n].append(v)
delimiter
aa = np.load(f)
delimiter
X(X, b)
delimiter
zip(a, b)
delimiter
out[x] = multidict(*args[1:])
delimiter
count = 0
delimiter
UglyGen(x + 1, y, z), UglyGen(x, y + 1, z), UglyGen(x, y, z + 1)
delimiter
self.destroyed.fire(self)
delimiter
r = tf.reshape(r, [-1, 1])
delimiter
print(s)
delimiter
metadata = MetaData()
delimiter
chunk = min(bufsize, length)
delimiter
print(key)
delimiter
paths()
delimiter
sender._meta._field_name_cache.append(self)
delimiter
getattr(obj, self.private_name)
delimiter
z = [1, 2, 4, 5, 6]
delimiter
n += 1
delimiter
thread.start()
delimiter
z = chain(x, y)
delimiter
us2 = td2.microseconds + 1000000 * (td2.seconds + 86400 * td2.days)
delimiter
all_second_keys = set(key for value in d.values() for key in value)
delimiter
asdf.owner = request.user
delimiter
handle.write(arg.data)
delimiter
session_cookie = SimpleCookie()
delimiter
tmp = np.empty((4, sy, sz))
delimiter
gc.collect()
delimiter
b = complex(-1, 0)
delimiter
params = libtorrent.parse_magnet_uri(magnet_uri)
delimiter
event = screen.getch()
delimiter
[]
delimiter
n = len(ls)
delimiter
sys.exit(1)
delimiter
self.request = request
delimiter
table = table.fillna(0)
delimiter
nb = NB()
delimiter
map(lambda *z: list(z), *a)
delimiter
A(obj.get_num())
delimiter
s
delimiter
fig = plt.figure()
delimiter
d.extend(x)
delimiter
shutil.copyfileobj(r.raw, f)
delimiter
new_attrs = old_attrs[:]
delimiter
desktop = shell.SHGetDesktopFolder()
delimiter
pandas.__version__
delimiter
__library.terminate()
delimiter
list(map(attrgetter(*fields), listobj))
delimiter
(wrapper_unpickler, (factory, ParentClass, r[0]) + r[1][1:]) + r[2:]
delimiter
answer = []
delimiter
lines = [row.split() for row in lines]
delimiter
a + b * x[0] + c * x[1] + d * x[0] * x[1]
delimiter
encodings.insert(0, enc)
delimiter
k.append(mydict[item])
delimiter
logmod_rsquared = logmod.score(x, y)
delimiter
_write_record_to_csv(row[1:])
delimiter
self.wfile.write(value)
delimiter
str(self.recipe)
delimiter
key.send_file(f)
delimiter
dirname = sys.argv[2]
delimiter
stream.close()
delimiter
print(x, y, z)
delimiter
tup = fin.readlines()
delimiter
alias.save()
delimiter
print(cmp(test1, test2))
delimiter
getname(woohoo)
delimiter
traceback.print_exc(file=sys.stdout)
delimiter
new_row = row[:-1]
delimiter
number_of_pages = read_pdf.getNumPages()
delimiter
hamming_sets[0].add(l[1] + l[2])
delimiter
p2, _ = optimize.curve_fit(f, x, y, (0, 0, 0, 0, 0))
delimiter
now = datetime.now()
delimiter
method = getattr(builtins, name)
delimiter
k = min(n, k)
delimiter
print(convert_consolodate(ranges))
delimiter
y = [z.element for z in x if x.frobnizzle == 5]
delimiter
pprint(finalData)
delimiter
action()
delimiter
response = HttpResponse()
delimiter
client_socket.send(size)
delimiter
plt.grid(False)
delimiter
win.clear()
delimiter
Testing(6 / 6)
delimiter
res
delimiter
s.ehlo()
delimiter
obj_set.remove(obj)
delimiter
print(val)
delimiter
out = abs(z.T - z)
delimiter
b2 = [True, False, True, False]
delimiter
b = np.ascontiguousarray(my_array).view(dt)
delimiter
process_item_method(self, item, spider)
delimiter
b = dict(enumerate(a))
delimiter
[uwsgi]
delimiter
results = []
delimiter
print(list(r))
delimiter
max = self.trell[i][1][k][0]
delimiter
n_str = binascii.hexlify(n_bytes)
delimiter
input.read(128)
delimiter
s = re.search(search, fullstring)
delimiter
Command2
delimiter
-codeclimate - test - reporter - -file.coverage
delimiter
MSWord.Documents.Open(filename)
delimiter
body = self.rfile.read(content_length)
delimiter
K.set_value(opt.lr, 0.01)
delimiter
D[n, s, x] = sum(P(n - i * x, s - i, x - 1) for i in range(s))
delimiter
n = len(data)
delimiter
df_out
delimiter
x, y, z
delimiter
ex_type, ex, tb = sys.exc_info()
delimiter
s = Sound()
delimiter
print(np.array(foos))
delimiter
stderr_lines.append(eline)
delimiter
in_memory_blocks = a.view(np.uint64)
delimiter
-1
delimiter
count += 1
delimiter
xs.min()
delimiter
plt.title(title)
delimiter
pixbuf = pixbuf.get_from_drawable(rw, rw.get_colormap(), x, y, 0, 0, 1, 1)
delimiter
y = np.linspace(1, 10, 20)
delimiter
args[0], fun(*args[1])
delimiter
list_display.append(str(x))
delimiter
setattr(args, self.dest, values)
delimiter
req = urllib.request.Request(url, data)
delimiter
root = Tkinter.Tk()
delimiter
sha.hexdigest()
delimiter
Perimeter = cv2.arcLength(c, True)
delimiter
l = len(list1)
delimiter
a * x ** n + b * x - c
delimiter
Color(r, g, b)
delimiter
Installed / home / prologic / tmp / hello - py - c
delimiter
cur[list[0]] = {}
delimiter
foo = Foo()
delimiter
match = regex.search(content)
delimiter
y1 = np.random.normal(0, 7, 100000) / 10.0
delimiter
x.start()
delimiter
jenny = FamilyItem()
delimiter
fds = [p.stdout.fileno() for p in processes]
delimiter
data2 = np.ma.masked_equal(data2, 0)
delimiter
self
delimiter
self.assertEqual(BRConfig.WEBROOT, sel.get_location())
delimiter
file_contents = the_file.read()
delimiter
row_sums[(i), :] = img[(i), :]
delimiter
im = ax.imshow(np.arange(100).reshape((10, 10)))
delimiter
otherfile.txt
delimiter
dist = np.hypot(np.diff(x - x.min()), np.diff(y - y.min())).cumsum()
delimiter
jpal += 1
delimiter
[0, 2, 1, 1, 4]
delimiter
lpSystemTime = ctypes.pointer(SystemTime)
delimiter
print(getname(f.bar))
delimiter
packet = sock.recv(n - len(data))
delimiter
imshow(red)
delimiter
f.destroyedObjectListener(self)
delimiter
title = db.Column(db.String(64))
delimiter
sentRDD = messageRDD.mapPartitions(sendkafka)
delimiter
fig = plt.figure()
delimiter
l[n] = f(i)
delimiter
thread = threading.Thread(target=worker, args=(chunk,))
delimiter
a = np.arange(16).reshape(4, 4)
delimiter
salt
delimiter
fd.write(chunk)
delimiter
from_zone = tz.tzutc()
delimiter
lst.sort(key=str.lower)
delimiter
foo(d)
delimiter
Base = declarative_base()
delimiter
S[a] = m
delimiter
db_field.formfield(**kwargs)
delimiter
json_obj
delimiter
sum(map(sum_nested, astruct))
delimiter
module = make_module_from_file(module_name, program_filename)
delimiter
print(list(Example))
delimiter
count = 0
delimiter
False
delimiter
groups = GroupSerializer(many=True)
delimiter
x[index] = 1.0
delimiter
file
delimiter
id_arr = np.ones(idx.sum(), dtype=int)
delimiter
post_syncdb.connect(add_user_permissions, sender=auth_models)
delimiter
f = sp.sin(x) * sp.cos(y) * sp.sin(z)
delimiter
label_text_font_size, label_text_font_style, label_width
delimiter
[a for a in list2 if a not in set1]
delimiter
obj = A.__new__(args)
delimiter
c = np.cumsum(a)
delimiter
stdout, stderr = pipe.communicate()
delimiter
c.drawAlignedString(x, y, testo)
delimiter
a = tonumpyarray(data, size)
delimiter
x, y = event.pos
delimiter
seen = []
delimiter
df.value = df.value.astype(int)
delimiter
S.mean()
delimiter
op_func = ops[op_char]
delimiter
cblas_matrixproduct(typenum, ap1, ap2, out)
delimiter
x.close()
delimiter
stream.stop_stream()
delimiter
[Service]
delimiter
d.A > d.C
delimiter
ax1.set_ylim(10.0 * np.ceil(y.max() / 10.0), y.min())
delimiter
arr = np.ascontiguousarray(arr)
delimiter
foobar2
delimiter
self.x & other.x
delimiter
r.append(a)
delimiter
data = digits.images.reshape((len(digits.images), -1))
delimiter
print((test_item.p1, test_item.p2))
delimiter
trip_id, arrival_time, departure_time, stop_id, stop_sequence, stop_headsign, pickup_type, drop_off_type, shape_dist_traveled
delimiter
pdb.runcall(test.foo, 1, 2)
delimiter
c = PublicC()
delimiter
self.my_init()
delimiter
print(i)
delimiter
d.quantize(Decimal(10) ** -places, rounding=ROUND_DOWN)
delimiter
scale = mode * x
delimiter
print(UserCreateForm())
delimiter
{}
delimiter
Grid.rowconfigure(root, 0, weight=1)
delimiter
serializer_class = UserSerializer
delimiter
parser = OptionParser()
delimiter
data
delimiter
fig = plt.figure()
delimiter
oldtype = a.dtype
delimiter
pet_list.append(pet)
delimiter
a.append(2)
delimiter
deletepacket.chksum
delimiter
sel.start(True)
delimiter
old_label_image.destroy()
delimiter
i, j = self.maxI - 1, self.maxJ - 1
delimiter
print(id(c2))
delimiter
plt.ion()
delimiter
body.extend(rv)
delimiter
rpath
delimiter
print(decoded)
delimiter
self.ranges[k] += 1
delimiter
fig = plt.figure()
delimiter
result.setdefault(k, {})[property_str] = v
delimiter
start_server()
delimiter
DOT11_PHY_TYPE = c_uint
delimiter
print([(item, tri_tokens.count(item)) for item in sorted(set(tri_tokens))])
delimiter
t.start()
delimiter
y = data[:, (1)]
delimiter
session.remove()
delimiter
deleterenWin, iren
delimiter
arr = numpy.array(im)
delimiter
pairs += s[0], s[-1]
delimiter
rows = np.random.choice(df.index.values, 10)
delimiter
np.random.seed(42)
delimiter
plt1 = fig.add_subplot(2, 1, 1)
delimiter
data = []
delimiter
img.setPixel(0, 0, 5)
delimiter
value = vinterp(xcenter + r * np.sin(angle), ycenter + r * np.cos(angle))
delimiter
soup = BeautifulSoup(source)
delimiter
args = parser.parse_args()
delimiter
getattr(external, name)
delimiter
parameters = urllib.parse.urlencode(parameters)
delimiter
ax = fig.add_subplot(111)
delimiter
print(is_new_style(new_style))
delimiter
x if x > 100 and y < 50 else y
delimiter
x = random.gauss(100, 50)
delimiter
ranked = sx.expanding().agg(lambda x: rankdata(x)[-1] / len(x))
delimiter
ordered.append(heappop(heap))
delimiter
acceptable = []
delimiter
K.sort()
delimiter
args = parser.parse_args()
delimiter
print(sorted(d))
delimiter
88888888, 55555
delimiter
poly = np.polynomial.Polynomial(params)
delimiter
myapp.db.drop_all()
delimiter
m.login(user, pwd)
delimiter
len(self.datatable.index)
delimiter
count += 1
delimiter
errorcodes.lookup(e.pgcode)
delimiter
main()
delimiter
file_list = files_to_delete(rootfolder, extension)
delimiter
autolabel(rects1)
delimiter
True
delimiter
porter.stem(greater)
delimiter
response = urlopen(url)
delimiter
t1 = time.time()
delimiter
y = numpy.roll(x, 1)
delimiter
soup.body.append(wrapper)
delimiter
libc.fopen.restype = c_void_p
delimiter
ser.setDTR(level=0)
delimiter
1.0 / sigma * (y - func(x, *p))
delimiter
db.expire_all()
delimiter
b = np.ones((2, 2))
delimiter
self.assertEqual(1 + 1, 2)
delimiter
reversed_dict = collections.defaultdict(list)
delimiter
print(len(clf.feature_importances_))
delimiter
syncdict = manager.syncdict()
delimiter
arr = np.fromiter(iter(im.getdata()), np.uint8)
delimiter
DataFrame1.plot(legend=False)
delimiter
gs = gridspec.GridSpec(rows, cols)
delimiter
False
delimiter
combiner = lambda x, y: np.where(x.isnull(), y, x)
delimiter
1244489871.0
delimiter
hamming_sets[0].add(l[0] + l[2])
delimiter
collections.defaultdict(Tree)
delimiter
g.append(el)
delimiter
values.append(int(x))
delimiter
_HTTPConnection.connect(self)
delimiter
results[obj].append(size)
delimiter
n, seconds = divmod(t, 60)
delimiter
push((nextbasesquared, nextbase, 2))
delimiter
result = SomeResult()
delimiter
M = arange(10).reshape(2, 5)
delimiter
results.plot()
delimiter
self.signal.disconnect(self.receiver)
delimiter
1, 2
delimiter
f = urllib.request.urlopen(url)
delimiter
t = np.arange(0.01, 10.0, 0.01)
delimiter
root = etree.fromstring(xml)
delimiter
print(d.shape, len(k))
delimiter
data = Data()
delimiter
[self.x - 1, self.y - 1], [self.x + 1, self.y - 1]
delimiter
data = {}
delimiter
q, r = divmod(a, b)
delimiter
doc = html.fromstring(s)
delimiter
book = xlrd.open_workbook(sys.argv[1], formatting_info=1)
delimiter
file.open()
delimiter
G.add_edge(5, 17)
delimiter
l = line.split()
delimiter
print(next(generator))
delimiter
a = [random.randint(0, 1000000) for _ in range(100000)]
delimiter
xlim = ax.get_xlim()
delimiter
[sum_vectors(v, w) for w in ws]
delimiter
drw = ImageDraw.Draw(img)
delimiter
tuple(sorted(widget.items())) in widget_set
delimiter
zip(cycle(tup[0:1]), tup[1:])
delimiter
split = len(l) / 2
delimiter
instance_method_ref()
delimiter
x = i + 1
delimiter
z = r * cos(theta)
delimiter
i1 = [1, 2]
delimiter
fetcher = urllib.request.build_opener()
delimiter
print(z)
delimiter
print(find_gt(R, x))
delimiter
print(heapq.nlargest(10, numbers))
delimiter
l = [0, 1]
delimiter
my_dict[get_group_from_angle(a)].append(l)
delimiter
user_name = db.StringProperty()
delimiter
set(dir()) - set(dir(__builtins__))
delimiter
repos.git.add(submodule.path)
delimiter
l2 = [4, 5, 7]
delimiter
largest_area = sorted(contours, key=cv2.contourArea)[-1]
delimiter
self._items = dict(*args, **kwargs)
delimiter
sqlplus.communicate()
delimiter
input.sort(key=cmp_to_key(cmp_items))
delimiter
print((item, item * 2))
delimiter
out = [next(it)]
delimiter
win.clear()
delimiter
print(normalized(A, 0))
delimiter
imp.load_module(name, fh, abs_path, description)
delimiter
field1 = forms.IntegerField(required=False)
delimiter
y, x = np.ogrid[-a:nx - a, -b:ny - b]
delimiter
print(width, height)
delimiter
out = []
delimiter
x = data[:, (0)]
delimiter
ips.append(i)
delimiter
self.type = ContentType.objects.get_for_model(self.__class__)
delimiter
A = np.random.random(10)
delimiter
b * a(a, b - 1)
delimiter
regex = re.sub(define, lambda m: defines[m.group(1)], regex)
delimiter
cap = cv.CaptureFromFile(path)
delimiter
row.update(nominations)
delimiter
decorator
delimiter
self = tuple.__new__(cls, arc)
delimiter
k = item[:-1]
delimiter
self.device.send_command(CMD_BLINK, 100)
delimiter
ret.append((s, e))
delimiter
profile = webdriver.FirefoxProfile()
delimiter
b = np.arange(n + 1)[:, (np.newaxis)]
delimiter
req = urllib.request.Request(authurl)
delimiter
[1, 5, 21],
delimiter
a, b, c = 0, 1, 1
delimiter
shop = models.ForeignKey()
delimiter
feed.read()
delimiter
lSongs = []
delimiter
this_row.append(val)
delimiter
root.left = self.insert_node(root.left, element)
delimiter
assert divisibility_predicate(number) == n - 1 or number == 0 and n == 1
delimiter
os.stat(arg)
delimiter
bboxes = []
delimiter
y /= sum(y)
delimiter
len(self.__storage) == 0
delimiter
token, _ = Token.objects.get_or_create(user=original_request.user)
delimiter
results = expr.parseString(s)
delimiter
queryset = User.objects.all()
delimiter
all_idxs = numpy.arange(A_noisy.shape[0])
delimiter
points = np.asarray(points)
delimiter
print(df)
delimiter
plt.xticks(list(range(width)), alphabet[:width])
delimiter
input_keys = set(self.initial_data.keys())
delimiter
instance = cls()
delimiter
print(resp.info())
delimiter
new_peak = PyPeak()
delimiter
self.execute()
delimiter
times = []
delimiter
list(out)
delimiter
B = A[idx]
delimiter
pm = svm_parameter(kernel_type=RBF)
delimiter
df
delimiter
transform = ET.XSLT(xslt)
delimiter
new_cols.columns = list(string.ascii_uppercase)[:len(new_cols.columns)]
delimiter
t0 = time.time()
delimiter
print(link)
delimiter
aws_access_key_id = AxxxZ
delimiter
turtle.exitonclick()
delimiter
absdists = np.abs(dists)
delimiter
dir(p)
delimiter
lemmatizer = Lemmatizer()
delimiter
BaseServer.__init__(self, server_address, HandlerClass)
delimiter
n = self._sock.send(data)
delimiter
df = df[(df.StartTime <= df.Timestamp) & (df.EndTime >= df.Timestamp)]
delimiter
l = list(a)
delimiter
title = StringField()
delimiter
a, b = tee(iterable)
delimiter
base._subclasses.add(cls)
delimiter
listB = [(20 * random.random()) for i in range(20000)]
delimiter
page.setLayout(vbox1)
delimiter
draw.text((0, 100), txt2)
delimiter
set |= Set(form2.objects.filter(keyskills=i))
delimiter
parser = argparse.ArgumentParser()
delimiter
epoch_in.append(x)
delimiter
False
delimiter
a = np.random.random((10,))
delimiter
pid = os.fork()
delimiter
q.put(x)
delimiter
object2 = ClassB(object1)
delimiter
sshcon.connect(hostname, username=myuser, key_filename=mySSHK)
delimiter
d1 * Bo
delimiter
reactor.stop()
delimiter
name = models.CharField(max_length=128)
delimiter
renderer = fig.canvas.get_renderer()
delimiter
window = QWidget()
delimiter
simulations_to_run.put({})
delimiter
Ainv = np.matrix(identitymatrix(n), dtype=int)
delimiter
z = numpy.polyfit(x, y, 1)
delimiter
wn.wup_similarity(dog, cat)
delimiter
f = (x - d) / _diff[:, (index)]
delimiter
n = (alen - flen) / struct.calcsize(before_char) + 1
delimiter
deletemetadata[k]
delimiter
list(islice(c, i))
delimiter
keep.append(item)
delimiter
MOUSE_RIGHTUP = 16
delimiter
vals[i] += abs(np.dot(u, m[j]))
delimiter
data
delimiter
sieve = [False] * (limit + 1)
delimiter
x = np.arange(10)
delimiter
8, 1, 1, 8
delimiter
self.appendleft(value)
delimiter
print(dataframe)
delimiter
sys.exit(0)
delimiter
self.response.out.write(template.render(path, template_values))
delimiter
print([(coin / 100.0) for coin in coins])
delimiter
isnan(a)
delimiter
feature_names = np.array(iris.feature_names)
delimiter
method_to_decorate(self, *args, **kwargs)
delimiter
a = [random.choice(list(range(1, 7)))]
delimiter
pathjoin = os.path.join
delimiter
show()
delimiter
i = quaternion(0, 1, 0, 0)
delimiter
values = []
delimiter
popular_words = sorted(word_counter, key=word_counter.get, reverse=True)
delimiter
get_thread.start()
delimiter
out = dict(map(get_key_value, columns))
delimiter
x = np.empty(len(a))
delimiter
output = (lambda x=data[2]: x + x)()
delimiter
expr = Forward()
delimiter
self.lookup_tables[field][value].append(index)
delimiter
my_a = A(**params)
delimiter
result = {}
delimiter
plt.show(open_plot=True)
delimiter
print(caller.f_locals)
delimiter
type.__new__(mcs, name, bases, dct)
delimiter
self._x = 0
delimiter
pygame.display.update()
delimiter
dt_obj = datetime.fromtimestamp(timestamp)
delimiter
output_df = output_df.reset_index(drop=True)
delimiter
x
delimiter
hash(list())
delimiter
--ignore < catalina.log
delimiter
my_list[index] = new_item
delimiter
f.write(c)
delimiter
output.put(rand_str)
delimiter
reader = csv.reader(input_file_handle)
delimiter
max(keys, key=f)
delimiter
cx2 = self._gen.random_integers(cx1, self.N - 1)
delimiter
vectorized_array
delimiter
tree = find_dependent_modules()
delimiter
entries = (os.path.join(dirpath, fn) for fn in os.listdir(dirpath))
delimiter
self.queue.join()
delimiter
models.signals.post_init.connect(self.post_init, sender=cls)
delimiter
{{self.title()}} - example.com
delimiter
this_week.append(date)
delimiter
a = models.ForeignKey(Foo, null=True)
delimiter
fig.tight_layout()
delimiter
path.append(previous)
delimiter
r = random.random()
delimiter
11 - 2 + (11 - 10)
delimiter
p = np.linspace(0, 2 * np.pi, 50)
delimiter
result
delimiter
rest = map(lambda x: urllib.parse.quote(x), new_base)
delimiter
Console.WriteLine()
delimiter
name = cleanco(name).clean_name()
delimiter
plt.subplot(122)
delimiter
0
delimiter
flip_stack_helper(s, t)
delimiter
self.module
delimiter
np.stack([np.outer(A[:, (i)], B[(i), :]) for i in range(A.shape[1])])
delimiter
axdendro.set_yticks([])
delimiter
socket.__path__
delimiter
next(reader)
delimiter
np.random.seed(101)
delimiter
all_labels = np.array(all_labels)
delimiter
remainder = dict(remainder)
delimiter
self[i] = v
delimiter
pool.join()
delimiter
a, b = random.sample(indexes, 2)
delimiter
pform = UserProfileForm(data=request.POST)
delimiter
wrapper.__name__ = func.__name__
delimiter
threadA.run()
delimiter
hough_transform_p(img, templates[0], i)
delimiter
i += 1
delimiter
t.start()
delimiter
d
delimiter
image.SetMaskColour(255, 0, 255)
delimiter
split_at = [2, 4, 5, 8, 11]
delimiter
write_line(indiv, window, coverage, snp)
delimiter
print(df)
delimiter
out = np.column_stack((starts, stops))[valid_mask].tolist()
delimiter
r, g, b = img_file.getpixel((i, j))
delimiter
math.atan2(0.0, -0.0)
delimiter
print(id(a), id(b))
delimiter
m = s.model()
delimiter
text_cell = first_sheet.cell_value(row_idx, COL_IDX)
delimiter
myfunc()
delimiter
found = True
delimiter
C = splits[1]
delimiter
query = datamodel.User().all()
delimiter
points.append((xs[i], ys[j], v))
delimiter
prefixes = [line.strip() for line in words]
delimiter
mask = np.dstack([mask, mask, mask]) / 255
delimiter
test_m = np.concatenate((test_m, q.get()), axis=1)
delimiter
emp = Employee.objects.get(pk=emp_id)
delimiter
result_list.append(json2xml(sub_elem, line_padding))
delimiter
result = []
delimiter
thread.start()
delimiter
obj = MyClass()
delimiter
reactor.iterate()
delimiter
recursion(i + 1)
delimiter
new_x.append(x[i])
delimiter
main_loop = tornado.ioloop.IOLoop.instance()
delimiter
trainer.trainEpochs(epochs)
delimiter
plt.plot(dummy)
delimiter
result = rdd.groupByKey().collect()
delimiter
sum_array = np.array([compute(i) for i in range(n_points)])
delimiter
loss = tf.reduce_mean(tf.square(y - y_data))
delimiter
in1 = innertype(*list(range(10)))
delimiter
W = tf.Variable(tf.random_uniform([1], -1.0, 1.0))
delimiter
print(obj)
delimiter
w = gtk.gdk.get_default_root_window()
delimiter
False
delimiter
8, array([5, 6, 7]), array([9])
delimiter
1020068010
delimiter
end_months = (dt2.year - dt1.year) * 12 + dt2.month + 1
delimiter
print ()
delimiter
fig, ax = make_example_plot()
delimiter
now = datetime.now()
delimiter
qualname = qpid
delimiter
a = TC()
delimiter
test(0, 10)
delimiter
jobForm.cleaned_data
delimiter
print(sess.run(A_upper_triangular, feed_dict={mask: npmask}))
delimiter
logging.getLogger().setLevel(logging.DEBUG)
delimiter
lis.append(_)
delimiter
it = iter(it)
delimiter
wrapper
delimiter
print(myList[0])
delimiter
self.events.append(something)
delimiter
the_dict = {}
delimiter
ldict = locals()
delimiter
architecture / linux_host_architecture
delimiter
X, Y = fig.get_dpi() * fig.get_size_inches()
delimiter
print(foo.bar, foo.quux)
delimiter
shutil.copyfileobj(f, tf)
delimiter
plt.plot(self.dat)
delimiter
self.name = fn.__name__
delimiter
figure, imshow(label2rgb(ccompv), [])
delimiter
0
delimiter
im = ax.imshow(data)
delimiter
name = Column(String)
delimiter
func_wrapper
delimiter
max_item, max_size = L[0], key(L[0])
delimiter
(b.ffill() + b.bfill()) / 2
delimiter
print(df)
delimiter
expected = array[:, (cols)]
delimiter
f
delimiter
numpy_arr = np.asarray(view)
delimiter
my_norm = Normalize(vmin=0, vmax=5)
delimiter
contents.append(line)
delimiter
char * cstring
delimiter
s.append(a + b)
delimiter
addr = sys.argv[1]
delimiter
list_A.append(arr[current_set])
delimiter
shifts = np.zeros(A.size, dtype=int)
delimiter
b = Point(x + 1, y)
delimiter
res = [formula(a, b) for a, b in zip(listA, listB)]
delimiter
profiler.print_stats()
delimiter
geoms.append(intersect)
delimiter
c = [8, 9, 0, 1]
delimiter
self.plot = pg.PlotWidget()
delimiter
b[:, :, (1)] = 255
delimiter
pool.map(do_log, list(range(100)))
delimiter
df2 = df.copy()
delimiter
res1 = dict(zip(dicts[0], zip(*[list(d.values()) for d in dicts])))
delimiter
count = 0
delimiter
dtg0, dtg1 = itertools.tee(mdtimes)
delimiter
id0, id1 = l.split()[:2]
delimiter
shapeX = PyArray_SHAPE(X)
delimiter
self.matrix = []
delimiter
scrw.add(self.tview)
delimiter
image_tk = ImageTk.PhotoImage(image)
delimiter
bins = algos.quantile(arr[~mx.mask], np.linspace(0, 1, 11))
delimiter
df2 = df.loc[df.area == area]
delimiter
views / largemodel_view.py
delimiter
view.show()
delimiter
line, = plot(x, sin(x))
delimiter
A = np.ones((50000000,))
delimiter
out = np.empty_like(x)
delimiter
db.save(doc)
delimiter
a = lil_matrix((4, 4), dtype=int)
delimiter
print(b)
delimiter
pprint(list(values))
delimiter
name = db.Column(db.Unicode(50))
delimiter
print(tree.leaves())
delimiter
doTaskA()
delimiter
points = [(1, 1), (1, 10), (10, 10), (10, 1)]
delimiter
layout = QtGui.QHBoxLayout()
delimiter
data.append(df[col_name].values)
delimiter
print(compiled_code.co_consts)
delimiter
g.ra, g.az, g.dec
delimiter
parser = ElementTree.XMLParser()
delimiter
Recurse(y, number - 1)
delimiter
print((event, elem, float(f.tell()) / total_size))
delimiter
result_pic.close()
delimiter
uid = Column(String(80), primary_key=True)
delimiter
print(line12)
delimiter
_file = os.path.abspath(sys.argv[0])
delimiter
cpy_list = []
delimiter
p.register(r_fd, POLLIN)
delimiter
self.replay()
delimiter
dis.dis(foo)
delimiter
test()
delimiter
barwidth = 1
delimiter
colors = cm.rainbow(np.linspace(0, 1, len(ys)))
delimiter
Review.objects.filter(venue__pk=2)
delimiter
cregex_token_iterator(s.begin(), s.end(), r, -1),
delimiter
df = pd.DataFrame(data=int_matrix, columns=cats)
delimiter
self.root = Tk()
delimiter
t.start()
delimiter
tar = tarfile.open(args[0])
delimiter
p = multiprocessing.Process(target=f)
delimiter
time.sleep(int(the_time))
delimiter
result
delimiter
interp_i = np.linspace(pad, i.max() - pad + 1, 5 * (i.size - 2 * pad))
delimiter
self.add_widget(self.my_float_layout)
delimiter
listener.listen(1)
delimiter
self.run(statement)
delimiter
new_dict = {}
delimiter
banned_words = set(word.strip().lower() for word in wordbook)
delimiter
numpydata = numpy.hstack(frames)
delimiter
stiff = stiff.applyfunc(lambda x: together(expand(x)))
delimiter
np.min(2 * np.arcsin(np.minimum(np.sqrt(a), len(a)))) * radius
delimiter
data = json.loads(json_text)
delimiter
total_length / num_words
delimiter
jinja2.get_jinja2(factory=jinja2_factory)
delimiter
_get_dict(object).contents.value
delimiter
score += 1
delimiter
print(net)
delimiter
self.session = session
delimiter
vol = sum(volume[i + 1:j + 1])
delimiter
cardservice.connection.connect()
delimiter
print(stored_file.filename)
delimiter
print(selection_sort(ran))
delimiter
self.data = ctypes.cast(raw_seq, ctypes.c_void_p)
delimiter
print(heapq.nsmallest(10, numbers))
delimiter
lxc.aa_profile = unconfined
delimiter
pl.figure(f1.number)
delimiter
df = df[df > 0].apply(lambda x: x / x.max(), axis=1)
delimiter
fig, axs = plt.subplots(1, 2)
delimiter
a = b
delimiter
ToTSize = [sum(row) for row in testdata]
delimiter
histo = numpy.histogram(num_dates)
delimiter
asign[sz] = np.roll(asign, 1)[sz]
delimiter
X = np.random.rand(1, 20, 40, 50)
delimiter
idx = s1.loc[(s1 == -1) & (s1 != s1.shift(-1))].index
delimiter
lines = [line for line in spamreader]
delimiter
obj = str(obj)
delimiter
sz = w.get_size()
delimiter
self._doc + self.attributes_string()
delimiter
json_docs = []
delimiter
alias.update_points()
delimiter
ax12 = fig1.add_subplot(212)
delimiter
violations2 = [k for k, v in list(collections.Counter(df[1]).items()) if v > 1]
delimiter
arr = df.values
delimiter
print(l[2])
delimiter
n = 10
delimiter
client.get_string(key)
delimiter
sched.start()
delimiter
modul.func = newfunc
delimiter
data = np.load(f)
delimiter
b = temp_a + b
delimiter
mpb.pack()
delimiter
image.save(pic, image.format, quality=100)
delimiter
half * divmod(number, half)[0]
delimiter
sum(temp)
delimiter
i += 1
delimiter
weights = np.array(weights)
delimiter
start - stop - daemon
delimiter
raise
delimiter
self.deletes = set()
delimiter
data = np.histogram2d(Y, X, bins=[len(Yr), len(Xr)], weights=Z)
delimiter
islice(primes, 0, n)
delimiter
Response(g())
delimiter
data = stream.read(chunk)
delimiter
abababab
delimiter
aaabbbc
delimiter
abcabc
delimiter
alpha = im.split()[-1]
delimiter
fig = plt.figure()
delimiter
print(s.lower())
delimiter
t = Thread(target=f, args=(loop,))
delimiter
data = socket.gethostbyaddr(ip)
delimiter
pprint(d)
delimiter
s = pd.Series(np.random.normal(0, 100, 10000))
delimiter
foo = serializers.CharField()
delimiter
sum((replace_with if i == to_replace else [i] for i in lst), [])
delimiter
unittest_main()
delimiter
np.random.seed(42)
delimiter
np.asarray(res)
delimiter
cent2ori = np.eye(4)
delimiter
sys.getsizeof(fs1)
delimiter
stamp = mktime(now.timetuple())
delimiter
main()
delimiter
coord = np.random.normal(size=(1000, 1000, 1000))
delimiter
elements
delimiter
False
delimiter
assert a == b
delimiter
array_[:] = rint(multiplied)
delimiter
match = True
delimiter
dfs.append(df)
delimiter
mylst = Session.query(MyList).get(1)
delimiter
print(form.instance.my_field)
delimiter
new_string.remove(i)
delimiter
xml = ET.fromstring(contents)
delimiter
sys.stdout.write(string_type())
delimiter
self.client
delimiter
count, division = np.histogram(series)
delimiter
False
delimiter
conn.connect()
delimiter
yacc.parse(s)
delimiter
l2set = dict()
delimiter
print(sin_data)
delimiter
self.send_my_headers()
delimiter
replace(inputList, flat_results)
delimiter
app = config.make_wsgi_app()
delimiter
X = list(range(1, 100000, 1000))
delimiter
print(s)
delimiter
output = cStringIO.StringIO()
delimiter
x2 = next(y)
delimiter
allobjc = {}
delimiter
allatt = {}
delimiter
msg = self.format(record)
delimiter
b = np.random.random_integers(-2000, 2000, size=(N, N))
delimiter
obj = self.weak_obj()
delimiter
bin / gunicorn
delimiter
acts
delimiter
contentdiv = contentnav.getparent()
delimiter
print(message)
delimiter
b *= ~unified_mask[(np.newaxis), ...]
delimiter
dict.update(dict2)
delimiter
pvt = pvt.unstack(0)
delimiter
R.add(tuple(x))
delimiter
ax.set_xticklabels(xticklabels, minor=False)
delimiter
col = len(col_names) - 1
delimiter
c = con.cursor()
delimiter
pylab.figure()
delimiter
target_device.write(content)
delimiter
fileinput = fopen.read()
delimiter
prevList = Permute(string[1:len(string)])
delimiter
n = len(pattern)
delimiter
list1 = [int(x) for x in list1]
delimiter
print(sorted(((c, b) for b, c in count.items()), reverse=True))
delimiter
vertices = np.take(tri.simplices, simplex, axis=0)
delimiter
conn.close()
delimiter
False
delimiter
__builtin__.set
delimiter
A.B(1, 2)
delimiter
test(1)
delimiter
clock = pygame.time.Clock()
delimiter
args = parser.parse_args()
delimiter
reps = []
delimiter
df
delimiter
monkey.patch_all()
delimiter
print(sha.hexdigest())
delimiter
fig = plt.figure()
delimiter
assert isinstance(IntInfinity(), int)
delimiter
dir(MyClass)
delimiter
text = str(html)
delimiter
self.sum = 0
delimiter
words.inc(word.lower())
delimiter
cr.paint()
delimiter
foo.ModClass.class_method()
delimiter
ogl.CGLSetParameter.restype = ctypes.c_int
delimiter
out.show()
delimiter
print(df)
delimiter
I, M = im, np.zeros(im.shape, np.uint8)
delimiter
zip(bins, count)
delimiter
buffer = StringIO(urllib.request.urlopen(url).read())
delimiter
result = []
delimiter
fig = plt.figure()
delimiter
screen = pygame.display.set_mode(px.get_rect()[2:])
delimiter
bane.view(np.complex128)
delimiter
s[1] + s[0]
delimiter
x = 0
delimiter
ABC = AdaBoostClassifier(base_estimator=DTC)
delimiter
html
delimiter
b.a
delimiter
clusters = np.zeros(data.shape[0])
delimiter
type(converted.iloc[0])
delimiter
template.format(last=y, *x)
delimiter
pickle.dump(your_data, handle, protocol=pickle.HIGHEST_PROTOCOL)
delimiter
myapp = MainWindow()
delimiter
ax.view_init(45, 60)
delimiter
non_consecutive_combinator(list(range(1, n + 1)), r)
delimiter
SYNCHRONIZE = 1048576
delimiter
set(d2.items()).symmetric_difference(list(d.items()))
delimiter
args[i] = random.randint(1, 100)
delimiter
BAEtMAsGCWCGSAFlAwQBAjALBglghkgBZQMEAQUwBwYFKw4DAgcwCgYIKoZIhvcN
delimiter
Ac = np.triu(Ac)
delimiter
print(start, start.weekday(), prev, prev.weekday())
delimiter
NP.ediff1d(x)
delimiter
dialog = QtGui.QFileDialog(parent)
delimiter
print(x)
delimiter
print(request.url_root)
delimiter
D = Counter(words)
delimiter
match_values.append(_match(query, corpus[m:m - 1 + qlen]))
delimiter
time(hours, minutes, seconds)
delimiter
Base = declarative_base()
delimiter
shift_idx = np.append(0, np.nonzero(np.diff(data_sorted[:, (0)]))[0] + 1)
delimiter
net.load(model_path)
delimiter
PLT.show()
delimiter
plt.plot(xdata, ydata)
delimiter
list(filter(dct.get, dct))
delimiter
count += lin
delimiter
resized = cv2.resize(img, (250, 250))
delimiter
module = getattr(pkg, item)
delimiter
strided = np.lib.stride_tricks.as_strided
delimiter
idx = np.nanargmax(b, axis=0)
delimiter
result[x_offset:a.shape[0] + x_offset, y_offset:a.shape[1] + y_offset] = a
delimiter
reactor.listenTCP(8080, web)
delimiter
assert n <= len(array) and n % 2 == 0
delimiter
the_canvas.show_page()
delimiter
proxy.soapproxy.config.debug = 1
delimiter
self.bmp = wx.BitmapFromBuffer(width, height, frame)
delimiter
d = {}
delimiter
cm = 2.54
delimiter
print(a.max(1))
delimiter
M.ix[0, 0] = 1.0
delimiter
df.d = df.a + df.b
delimiter
[_f for _f in (f(char) for char in string) if _f]
delimiter
print(a, b, c)
delimiter
res = pd.concat([df] * repetitions)
delimiter
y = np.arange(0, 10, 0.1)
delimiter
print(b.base is a)
delimiter
show(vform(fig, select))
delimiter
a.append(1)
delimiter
vdisplay.start()
delimiter
maks_length, maks_key
delimiter
instance = constructor()
delimiter
records[k] = 0
delimiter
L.append(codes[int(num)])
delimiter
(vmax - vmin) * np.random.rand(n) + vmin
delimiter
codecs.latin_1_encode(x)[0]
delimiter
model.add(Dense(2, input_dim=2))
delimiter
assert n == sum(ks)
delimiter
checkinstance(not_allowedclass)
delimiter
foo.ModClass.static_method()
delimiter
G = nx.Graph()
delimiter
driver.service.process.send_signal(signal.SIGTERM)
delimiter
window = sublime.active_window()
delimiter
frame = Frame(master, width=200, height=200)
delimiter
plt.subplot(_subplots[name])
delimiter
text += get_deep_text(subelement)
delimiter
1 / (1 + z)
delimiter
mtrans.Transform.__init__(self)
delimiter
p = Process(target=grandchild, args=args)
delimiter
len(set(flattened)) == len(flattened)
delimiter
parent = tk.Tk()
delimiter
BUFSIZE = 10
delimiter
x, y, p, q = map(float, line.split())
delimiter
d = {}
delimiter
print(previous_line)
delimiter
strprime
delimiter
_CURRENT_YEAR = datetime.datetime.now().year
delimiter
a = Assignable()
delimiter
integer.setParseAction(lambda t: int(t[0]))
delimiter
json_dict = json.load(filein)
delimiter
pol_ext = LinearRing(poly.exterior.coords)
delimiter
result.close()
delimiter
mylist[i] = key
delimiter
self.x = 2
delimiter
a2.set_xticks([])
delimiter
order_check(result)
delimiter
df1.ne(df1.shift().bfill()).any(1).cumsum().add(1)
delimiter
a, b = b, a
delimiter
d_sum[topkey] = {}
delimiter
sys.stdout.write(data)
delimiter
iter(d.items())
delimiter
self.name
delimiter
print((TOS1, TOS))
delimiter
ax = subplot(1, 1, 1)
delimiter
list([p for p in arr if xmin < p[0] < xmax])
delimiter
r = requests.get(url)
delimiter
a = [numpy.arange(100000) for _ in range(10)]
delimiter
sys.stdout.write(p.stdout.read())
delimiter
raise SomeProblem(value)
delimiter
Orange.feature.Continuous(str(d.name))
delimiter
idx = df1.stack().index
delimiter
zip = zipfile.ZipFile(zipinmemory)
delimiter
a = numpy.arange(cols * cols).reshape((cols, cols))
delimiter
app.exec_()
delimiter
sys.stderr = Logger()
delimiter
forks = []
delimiter
res.append(e + 1)
delimiter
len(x)
delimiter
x * 2
delimiter
a = np.random.normal(size=1000)
delimiter
fig = plt.figure(frameon=False)
delimiter
new_func_name = my_func
delimiter
print(v)
delimiter
5 // -2
delimiter
hash.set(x, hash.get(target).concat(property))
delimiter
params
delimiter
{{micro_form.as_p}}
delimiter
convert(remain / current_base) + rest_digits[remain % current_base]
delimiter
type, value, tb = sys.exc_info()
delimiter
mp = numpy.arange(0, max(data) + 1)
delimiter
d[key] = sum(map(operator.itemgetter(1), group))
delimiter
tuple(res)
delimiter
current + min(distance_to_a, distance_to_b)
delimiter
qp.loadFromData(image_data)
delimiter
a = A()
delimiter
converter = PIL.ImageEnhance.Color(img)
delimiter
raise StopIteration()
delimiter
myTurtle.left(25)
delimiter
loop = aio.get_event_loop()
delimiter
print(s)
delimiter
self.remove_edge_by_id(edge)
delimiter
ax1 = fig.add_subplot(gs[0])
delimiter
ancestor = widget.get_parent()
delimiter
print(Al.A)
delimiter
gridx = np.linspace(-1, 1, 5)
delimiter
pdf = stats.lognorm.pdf(x, s, scale=scale)
delimiter
assert len(source) == 1
delimiter
z = sum((a[:, :, (np.newaxis)] - b) ** 2, 1)
delimiter
min_keys = [k for k in d if d[k] == min_val]
delimiter
tup[0] is a
delimiter
subs = [sample(sub_df, i) for i, (_, sub_df) in enumerate(gb)]
delimiter
ast.dump(_)
delimiter
p.terminate()
delimiter
print(x.shape)
delimiter
sys.stdin = UTF8Reader(sys.stdin)
delimiter
a = A()
delimiter
h = httplib.HTTPConnection(parsed.netloc)
delimiter
overlap(0, 50, 40, 45)
delimiter
hasher.hexdigest() if ashexstr else hasher.digest()
delimiter
addx = functools.partial(add, 2)
delimiter
print(counter[0])
delimiter
el1.extend([[]] * (len1 - len(el1)))
delimiter
data = numpy.array(values, dtype=dtype)
delimiter
test = record_log(self.logs)(test)
delimiter
newImage = Image.new(mode, (canvas_width, canvas_height), new_background)
delimiter
rot = im.rotate(angle, expand=1).resize(size)
delimiter
th[1:][th[:-1] & th[1:]] = False
delimiter
d = OrderedDict()
delimiter
fig = plt.figure()
delimiter
a = ma.masked_array(a, a == fill_value)
delimiter
print(e)
delimiter
sleep(5)
delimiter
diff_seconds = (mytime - since).total_seconds()
delimiter
print((num, data))
delimiter
self.close_connection()
delimiter
b = a[:len(b)]
delimiter
traverse(node.left)
delimiter
any(n % x for x in range(20, 1, -1))
delimiter
con.ping(True)
delimiter
sleep(2)
delimiter
set(a) & set(xyz)
delimiter
parser.set_document(doc)
delimiter
print(i)
delimiter
{}
delimiter
fig = matplotlib.pyplot.gcf()
delimiter
primes = (n for n in count(2) if all(n % d for d in range(2, n)))
delimiter
list(reversed(list(range(diamond - 1))))
delimiter
doc = fromstring(requests.get(url).content)
delimiter
x.normalize()
delimiter
self.foo(n=n)
delimiter
type(object)
delimiter
network_select.grid()
delimiter
self.timer.timeout.connect(self.readData)
delimiter
qry = qry.filter(Parent.child_count_ex(stime, etime) > 0)
delimiter
np.array([f0, f1])
delimiter
np.random.seed(10)
delimiter
df2.columns = cols
delimiter
show()
delimiter
messages[0].attributes
delimiter
os.chdir(tmp_a)
delimiter
print(df)
delimiter
show()
delimiter
links.append(link)
delimiter
print(config_root.server.host)
delimiter
not_all_zero = [any(x) for x in columns]
delimiter
obj = model_class.objects.get(name=model.name)
delimiter
counts = np.fromiter(counts_it, np.intp, nnz)
delimiter
X = [[1.0, -1.0, 2.0], [2.0, 0.0, 0.0], [0.0, 1.0, -1.0]]
delimiter
content = open(match).read()
delimiter
str(self) + other
delimiter
by_bins = dict((k, tuple(v)) for k, v in by_bins_iter)
delimiter
col = pd.MultiIndex.from_product([df.columns, [0, 1]])
delimiter
reverse_edge_list = [t[::-1] for t in edge_list]
delimiter
a.filled(0).sum(axis=axis) * 1.0 / counts
delimiter
sig = np.sin(2 * np.pi * f * t)
delimiter
urllib.request.urlopen(req)
delimiter
(name for name in names if re.match(glob2re(pat), name))
delimiter
chunk = request.read(handler.chunk_size)
delimiter
response
delimiter
self._popup = gtk.Window(gtk.WINDOW_POPUP)
delimiter
newtype = numpy.dtype(dtype)
delimiter
list.__init__(self, lst)
delimiter
plt.ylim(ymin=0)
delimiter
print(is_perfect_cube(64))
delimiter
print(dameraulevenshtein(gene_stringify(list1), gene_stringify(list2)))
delimiter
Py_Initialize()
delimiter
xyz = np.vstack([x, y, z])
delimiter
logging.debug(e)
delimiter
traceback.print_exc(sys.stderr)
delimiter
self.x, self.y = x, y
delimiter
btn = Button(frame)
delimiter
response = HttpResponse()
delimiter
stations = {}
delimiter
self.print_help()
delimiter
xy[1]
delimiter
mat.reshape(m, -1)[:, (np.eye(n, r, dtype=bool).ravel())] = np.nan
delimiter
b[0, 0]
delimiter
text = text.lower()
delimiter
starts[1:] = np.cumsum(counts[:-1])
delimiter
constructors = [int, float, str]
delimiter
(0.8, 0.6, 0.6),
delimiter
A = list(range(10))
delimiter
plt.plot(numpydata)
delimiter
mytime += timedelta(hours=6)
delimiter
print(getargspec(f))
delimiter
stdout, stderr = process.communicate()
delimiter
foosparse = scipy.sparse.lil_matrix((N, M))
delimiter
self.x = x
delimiter
result = client.read_input_registers(1, 1, unit=1)
delimiter
self.__fill_right()
delimiter
config = ConfigParser.RawConfigParser()
delimiter
values = json.load(f)
delimiter
TempLake = np.zeros((N + 1, Nlayers))
delimiter
ax.set_title(t)
delimiter
new_page
delimiter
self.subplot.clear()
delimiter
self._data[key]
delimiter
plt.matshow(image)
delimiter
self.seek(0)
delimiter
array([Y[1], a * Y[0] + b * Y[1]])
delimiter
mysql.commit()
delimiter
a = np.arange(24).reshape(4, 6)
delimiter
xa = np.hstack([[0], x, [0]])
delimiter
im0 = Image.open(tilefilename)
delimiter
mprev = exists_re.search(currline)
delimiter
fq[w] += 1
delimiter
bar
delimiter
self.num_gears = len(self.gears)
delimiter
print(f.tail(5))
delimiter
signal.alarm(timeout)
delimiter
parent.list_child_properties()
delimiter
a[i, j] = random.random()
delimiter
(0, 1)[True]
delimiter
Dummy()
delimiter
s1 = Singleton()
delimiter
gps_epoch = datetime(1980, 1, 6, 0, 0, 0)
delimiter
bins = numpy.arange(-1, 11)
delimiter
subprocess.Popen(args)
delimiter
True
delimiter
arr1 = array[:i + 1]
delimiter
sys.exit()
delimiter
last_monday = datetime.date.today() + rd.relativedelta(weekday=rd.MO(-1))
delimiter
django.core.management.setup_environ(settings)
delimiter
fcntl.ioctl(console_fd, KDSETLED, 0)
delimiter
np.random.seed(1)
delimiter
sum(generate() for i in range(1000000))
delimiter
a, b = b, a + b
delimiter
M[5, 5] = 1
delimiter
d1 = threading.Thread(target=dep1)
delimiter
G2 = nx.Graph(G)
delimiter
out = [f(df.iloc[i:i + N]) for i in ii]
delimiter
is_active = True
delimiter
new_data
delimiter
li = []
delimiter
assert subclass.__doc__ == parent.__doc__
delimiter
tree = etree.HTML(s)
delimiter
bar()
delimiter
res.get()
delimiter
result.astype(int)
delimiter
print(r.pattern)
delimiter
expr = (a + b * x) / (c + d * x)
delimiter
formset = QuoteFormset(request.POST)
delimiter
file.close()
delimiter
self.color = [1, 1, 1, 1]
delimiter
L2[1] = 5
delimiter
x, y = 10, 25
delimiter
x = np.arange(6)
delimiter
void_p = ctypes.cast(p, ctypes.c_voidp).value + 1
delimiter
transaction.leave_transaction_management(using=self.db)
delimiter
deF = 789
delimiter
zipInfo.external_attr = 511 << 16
delimiter
cbar_ax = fig.add_axes(datco)
delimiter
fd.write(chunk)
delimiter
binlims = zip(bin_edges[0:-1], bin_edges[1:])
delimiter
remove_all(v)
delimiter
db.session.merge(my_new_posts.pop(each.id))
delimiter
output.addPage(review_pdf.getPage(0))
delimiter
arr.reverse()
delimiter
n
delimiter
nullhandler = logger.addHandler(NullHandler())
delimiter
Vector(x + y for x, y in zip(self, a))
delimiter
queryset = Person.objects.all()
delimiter
index_offset = np.arange(num_labels) * num_classes
delimiter
Test().seasonal_greeting()
delimiter
all(a_replaced == a_new)
delimiter
result = localtime(some_time_object)
delimiter
[False, False, False, False, True],
delimiter
print(index_of_last_nonzero(lst=b))
delimiter
x[(i), :] = np.cos(x[(i), :])
delimiter
get_col = str(worksheet.cell_value(row - 1, i))
delimiter
ydata
delimiter
DEVICES = [0, 1, 2]
delimiter
c = a + b
delimiter
indices = np.cumsum(n_values)
delimiter
dx, dy, dz = xs[1] - xs[0], ys[1] - ys[0], zs[1] - zs[0]
delimiter
copy[alert_status]
delimiter
df
delimiter
out[4, 2] = 1
delimiter
s = s[::-1]
delimiter
series.hist(ax=ax, bins=100, bottom=0.1)
delimiter
form = CustomBarModelForm
delimiter
pl.figure()
delimiter
printList.append(line)
delimiter
obj = self.request.user.account
delimiter
axicon.set_xticks([])
delimiter
print(the_matrix[0][1])
delimiter
[arr[cond], arr[~cond]]
delimiter
client.load_system_host_keys()
delimiter
self.server_activate()
delimiter
method.__code__.co_argcount - 1
delimiter
randomList
delimiter
fig = plt.figure(1, figsize=(5, 5))
delimiter
numpy.float64(1.0) / 0.0
delimiter
count = Counter(x)
delimiter
obj = json.loads(line)
delimiter
my_logger.addHandler(handler)
delimiter
not bool(+b_count)
delimiter
cv.EqualizeHist(image, image)
delimiter
t = dt * np.arange(num_samples)
delimiter
{{data | safe}}
delimiter
po.close()
delimiter
print(hello_ext.greet())
delimiter
result.append(-1)
delimiter
np.random.seed(6)
delimiter
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
delimiter
self.children = collections.defaultdict(lambda : self.__class__())
delimiter
end = time.time()
delimiter
model.add(Dropout(0.5))
delimiter
l2norm_inv = tf.rsqrt(tf.reduce_sum(x * x, dims, keep_dims=True))
delimiter
dist = (om1 - om2) ** 2
delimiter
mylist = []
delimiter
result.__doc__ = cls.__doc__
delimiter
frontier_index += 1
delimiter
Departure_Date.objects.all()
delimiter
Y[:, (2)] = 2
delimiter
imsave(target_path, image)
delimiter
foo.save()
delimiter
amounts = []
delimiter
postal_code = db.PostalAddressProperty()
delimiter
vect = np.arange(float(N))
delimiter
cols = df.columns.difference(unused_cols)
delimiter
myResult.append(key)
delimiter
total += numa
delimiter
self.path == other.path and self.title == other.title
delimiter
sample = random.sample(yourlist, sample_size)
delimiter
optionN = True
delimiter
list(ChildForm().fields.keys())
delimiter
W = np.asmatrix(np.arange(N * N).reshape(N, N))
delimiter
qry = session.query(Group).order_by(Group.name)
delimiter
tmax += 2 * np.pi
delimiter
(g[1] for g in groupby(iterable, f))
delimiter
V[i] = np.sum(dV)
delimiter
buffer = bytearray(size)
delimiter
dict((next(i[1])[0], list(next(groups)[1])) for i in groups)
delimiter
df.index = list(range(i * chunksize, i * chunksize + len(df.index)))
delimiter
dice = random.randint(1, 6)
delimiter
self.process.started.connect(lambda : self.runButton.setEnabled(False))
delimiter
items.reverse()
delimiter
self._data_filter = {}
delimiter
result
delimiter
self.Bind(wx.EVT_CHECKBOX, self.onCheckChangeBG, self.cbBG)
delimiter
B = A[:len(A) / 2]
delimiter
res = defaultdict(list)
delimiter
x = mu + sigma * np.random.randn(N)
delimiter
f = opener.open(req)
delimiter
s.read()
delimiter
html4css1.Writer.__init__(self)
delimiter
a = QApplication([])
delimiter
column_index = Ks.indices
delimiter
skyscrapers[-i] = AIR
delimiter
ax = fig.axes[0]
delimiter
quote2.text
delimiter
transaction.enter_transaction_management()
delimiter
pylab.figure()
delimiter
1 / (N - 1) * autoCov
delimiter
(2, 0) - 0.0182867906276
delimiter
b = np.sort(a)
delimiter
B = numpy.zeros(len(A), dtype=int)
delimiter
r = s.get(url)
delimiter
writer = csv.writer(output_file)
delimiter
x = np.arange(10)
delimiter
print(l)
delimiter
print(df1)
delimiter
foo = Foo()
delimiter
properties.append(val)
delimiter
do_something
delimiter
parser.set_document(doc)
delimiter
dbCursor.execute(sql)
delimiter
assocs_exist
delimiter
seen_add(k)
delimiter
-some_project2
delimiter
channel = connection.channel()
delimiter
image._dump(format=self.get_format(image))
delimiter
cC = pd.cut(C, 11)
delimiter
reader = csv.reader(lines.splitlines(), skipinitialspace=True)
delimiter
C = np.cov([x - x.mean(), y - y.mean()])
delimiter
feed = f.read()
delimiter
vals.append(frame_from_dict(v, depth - 1))
delimiter
print(quote)
delimiter
recreatedModel.load_weights(fname)
delimiter
a = []
delimiter
stiff.simplify()
delimiter
b = a
delimiter
new_val.append(x[2])
delimiter
imageItem.save()
delimiter
f_inrange
delimiter
count = IntegerField()
delimiter
self.error_handler.check_response(response)
delimiter
n = ctypes.cast(m, ctypes.POINTER(someTime))
delimiter
alts = np.arange(1, 1000, 21.717)
delimiter
pos1 = ax.get_position()
delimiter
15 % 4
delimiter
f.write(file_data)
delimiter
resp = requests.get(dls)
delimiter
cls = KMeans(n_clusters, n_jobs=-1)
delimiter
self.celery.terminate()
delimiter
rows[:, :] = [255, 0, 0, 255]
delimiter
choices = numpy.array([[0, 0, 0], [255, 255, 255]])
delimiter
children = []
delimiter
hist[b == bins[0]] = 0
delimiter
wb = excel.Workbooks.Add()
delimiter
t = range_tuple(1, 2)
delimiter
queue.put(temp)
delimiter
signal.signal(signal.SIGALRM, lambda *args: handle_alarm(self))
delimiter
logger = logging.getLogger(__name__)
delimiter
plt.scatter(x_arr, y_arr)
delimiter
tar.addfile(tarinfo, StringIO.StringIO(data))
delimiter
p.join()
delimiter
y.shape
delimiter
data.append(name)
delimiter
m.set(r, c, 0)
delimiter
redirect(urljoin(static_url, filename))
delimiter
n = a.shape[0]
delimiter
ef
delimiter
_write_to_cache(cache_key, value)
delimiter
[bar.set_x(bins[i]) for i, bar in enumerate(b)]
delimiter
d.cards.append(card)
delimiter
seen = set()
delimiter
scatter_plot.set_facecolors(new_facecolors)
delimiter
ret = _aligned_array_type(name, (aligned_array,), d)
delimiter
b = np.ascontiguousarray(B).view(rowtype).ravel()
delimiter
ds2 = set([tuple(values) for values in df2.values.tolist()])
delimiter
lines = []
delimiter
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
delimiter
a[i] += 5
delimiter
[0, 0, 0, 0, 0, 1],
delimiter
popt, pcov = curve_fit(fourier, z, Ua, [1.0] * 8)
delimiter
plt.figure()
delimiter
mantissa * 10 ** exponent
delimiter
a.coeffs()
delimiter
raise web.nomethod(cls)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
int(numre.search(s).group())
delimiter
workbook = writer.book
delimiter
JTIwQXV0aG9yaXR5KDgpLmNydDBNBggrBgEFBQcwAoZBaHR0cDovL2NvcnBwa2kv
delimiter
app.grid()
delimiter
cj = cookielib.LWPCookieJar()
delimiter
a = models.CharField(max_length=42)
delimiter
pub_dict[p.key] = []
delimiter
result[key] = list(v[0] for v in valuesiter)
delimiter
same_edge_id = graph.get_eid(source_vertex_id, target_vertex_id)
delimiter
indexes = mydict.setdefault(item, [])
delimiter
print(numbers)
delimiter
self.application.pc.connection.channel(self.rabbit_channel_in_ok)
delimiter
weak = weakref.WeakValueDictionary()
delimiter
main()
delimiter
worksheet = XSCRIPTCONTEXT.getDocument().getSheets().getByIndex(0)
delimiter
value = m[1]
delimiter
print(total_length)
delimiter
hashed_array = (base * array).sum()
delimiter
orig_indices = xs.argsort()
delimiter
f = lambda *args, **kwds: self.fn(obj, *args, **kwds)
delimiter
d = deque(list(range(5)))
delimiter
api = restful.Api(app)
delimiter
PUSH(map)
delimiter
data = A.flatten()
delimiter
Relational(all_on_left, sympy.sympify(0), op)
delimiter
list(chain_(map(C, chain_(map(B, A())))))
delimiter
numbers = map(int, numbers.split())
delimiter
epoch = datetime.datetime(1970, 1, 1)
delimiter
print(lengthy_thingy.__len__(lengthy_thingy))
delimiter
items = list(range(10))
delimiter
y12, y22 = np.meshgrid(A[1:, (1)], B[1:, (1)])
delimiter
True
delimiter
libc.prctl(16, byref(buff), 0, 0, 0)
delimiter
cv2.destroyWindow(winName)
delimiter
do_more_stuff()
delimiter
a.apply(func)
delimiter
print(solution2)
delimiter
time.sleep(1)
delimiter
raise
delimiter
low, high = ax.get_ylim()
delimiter
arr = _owndata.test()
delimiter
x_key = x[1]
delimiter
indice = numpy.where(y != 0)
delimiter
values(np.arange(len(A)))
delimiter
print({key1: key2})
delimiter
pylab.ion()
delimiter
result = []
delimiter
result_ch.send(f(*args, **kwargs))
delimiter
val
delimiter
pprint(res.asList())
delimiter
args.parser.print_help()
delimiter
princ = cc.principal()
delimiter
print(r.json())
delimiter
http_server.listen(port)
delimiter
s = timedelta()
delimiter
d = {}
delimiter
self.mainLayout.setMargin(10)
delimiter
n = json.dumps(m)
delimiter
chan = ssh.invoke_shell()
delimiter
serves_pizza = models.BooleanField()
delimiter
myFile = csv.writer(fp)
delimiter
a.py
delimiter
mtransforms.Transform.__init__(self)
delimiter
d = Dummy()
delimiter
mat.move(7, 6, 0, r=True)
delimiter
self.canvas.add(self.children[0].ig)
delimiter
print(i)
delimiter
func()
delimiter
plen = len(lst) / n + (1 if rest > 0 else 0)
delimiter
keys = set(sum([list(dic[topkey].keys()) for dic in dicts], []))
delimiter
df
delimiter
username = session.settings.key().name()
delimiter
print(args.files)
delimiter
_helper()
delimiter
message
delimiter
chid.py
delimiter
dict(list(grouped))
delimiter
p0 = sy.array([1, 1, 1])
delimiter
grayed_rgb_color = hsv_to_rgb(*grayed_hsv_color)
delimiter
print(listEven)
delimiter
webpage.close()
delimiter
patterns = zip(*[table[p] for p in group])
delimiter
myimg = models.ImageField(upload_to=img_file_path)
delimiter
math.sqrt(x)
delimiter
Image.open(infile).save(outfile)
delimiter
a, b
delimiter
myprocess.stdout.close()
delimiter
b_bins.agg([mean, median])
delimiter
exc_info = sys.exc_info()
delimiter
listbox = tk.Listbox(master)
delimiter
df_test = pd.read_csv(filename, nrows=100)
delimiter
print(ch)
delimiter
print(lines.shape)
delimiter
o.unschedule_all()
delimiter
not any(any(inner) for inner in x)
delimiter
url = Field()
delimiter
plt.yticks(y, yticks)
delimiter
y = np.vstack((x - 1, x, x + 1))
delimiter
data = urllib.parse.urlencode(values)
delimiter
int(zahl)
delimiter
sys.getrefcount(astrd)
delimiter
t = t.setdefault(k, {})
delimiter
os.close(fd)
delimiter
abs(a - b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)
delimiter
print(date - delta)
delimiter
[0, [0, values, 2], 2]
delimiter
a = datetime(2010, 12, 5)
delimiter
factorise(4999)
delimiter
[2, 491]
delimiter
self.x = x
delimiter
L = np.polynomial.legendre.legval(x, np.identity(50))
delimiter
clf = RandomForestClassifier(n_estimators=20, max_depth=5)
delimiter
print(sys.argv)
delimiter
llcrnrlon = lllon, llcrnrlat = lllat, urcrnrlon = urlon, urcrnrlat = urlat,
delimiter
Dictionary = dict(Arr)
delimiter
df
delimiter
ax2 = fig.add_axes([0.05, 0.475, 0.9, 0.15])
delimiter
ancestors_descendents.add(ancestor)
delimiter
type(self)(self.default_factory, self)
delimiter
d2_keys = set(d2.keys())
delimiter
Py_Initialize()
delimiter
fig = plt.figure()
delimiter
install_miniconda
delimiter
items = []
delimiter
print(np.ma.compressed(m_))
delimiter
print(temp.array[:])
delimiter
xor_2str(xor_2str(and_2str(x, y), and_2str(x, z)), and_2str(y, z))
delimiter
Session = scoped_session(sessionmaker())
delimiter
b_o = tf.Variable(tf.zeros([n_out]))
delimiter
maxlen = np.max(pairs, axis=(0, 1))
delimiter
yedges = np.linspace(-10, 10, 100)
delimiter
m, _, _, _ = np.linalg.lstsq(G, f)
delimiter
result_list.append(input_list[i] * input_list[j])
delimiter
temp = a[0:1]
delimiter
batch_size = tf.shape(output)[0]
delimiter
self.connection.publish(self.key, data)
delimiter
s = 2 * ((p1 + p2) / 2) * (1 - (p1 + p2) / 2)
delimiter
args = parse_arguments()
delimiter
func(*listOfFiles)
delimiter
print(isPower(5, 5))
delimiter
count = (i + 1) * (n - i)
delimiter
out += arr[1:-1, :-2]
delimiter
res = OrderedDict()
delimiter
result = []
delimiter
unittest.main()
delimiter
print(data)
delimiter
chBuf = create_unicode_buffer(BUFSIZE)
delimiter
locale.atoi(s)
delimiter
result = []
delimiter
print(root.getpath(e))
delimiter
ymulti = multiroll(x, shift)
delimiter
a[:, (0)] = np.min(points, axis=0)
delimiter
a, b = b, a + b
delimiter
html = response.read()
delimiter
s = pickle.dumps(lambda x, y: x + y)
delimiter
root.children.append(t(2))
delimiter
count += pattern == [row[j:j + ncols] for row in area[i:i + nrows]]
delimiter
a = i * x
delimiter
sum(a)
delimiter
br = mechanize.Browser()
delimiter
result
delimiter
pdb > pdbs.r()
delimiter
doc = ElementTree(node)
delimiter
CMD + B(OSX)
delimiter
print(line)
delimiter
dt = dateutil.parser.parse(date)
delimiter
164
delimiter
(a1, min(b1, a2, b2)) if a1 < a2 else (a2, min(b2, a1, b1))
delimiter
fig0, ax0 = plt.subplots(1, 1)
delimiter
points.append((-1, 0.5))
delimiter
fig = gcf()
delimiter
lens = np.array([len(item) for item in v])
delimiter
mydict2 = {}
delimiter
print(item.name, item.birthday)
delimiter
bagoftricks.bagoftriks.geofind()
delimiter
block = f.read(block_size)
delimiter
root
delimiter
print(r)
delimiter
sys.excepthook = logexception
delimiter
total_size += os.path.getsize(fp)
delimiter
A = np.random.rand(N, N, N)
delimiter
x = df[milestones_df.index[milestone_index]:df.index.max()]
delimiter
self.foo = foo
delimiter
out = np.empty(N)
delimiter
midpoint = vor.points[[p1, p2]].mean(axis=0)
delimiter
base.Main()
delimiter
outer_fn()
delimiter
Like.user_likes_article(request.user, article)
delimiter
[[n]]
delimiter
c = MyClass()
delimiter
x[x > 1] = 1
delimiter
assert len(a) == len(b)
delimiter
wrapper
delimiter
threads = []
delimiter
b_padded = np.append(b, np.zeros(pad_size) * np.NaN)
delimiter
print(list(dict.keys()))
delimiter
nest([x], n - 1) if n else x
delimiter
stdout, stderr
delimiter
df2
delimiter
A_noisy[outlier_idxs] = 20 * numpy.random.random((n_outliers, n_inputs))
delimiter
False
delimiter
mylist.append(t)
delimiter
s.send(dst_addr + src_addr + ethertype + payload + checksum)
delimiter
y = np.ones_like(x)
delimiter
seen = list()
delimiter
self.memo.update(json.load(f))
delimiter
result = {}
delimiter
process(i)
delimiter
PyList_Append(list, dict)
delimiter
self.sleep_time = sleep_time
delimiter
i = sum_a.index(min(sum_a))
delimiter
d
delimiter
fpr[:p + 1], tpr[:p + 1]
delimiter
pylab.plot(freq, numpy.abs(Y))
delimiter
2 * t
delimiter
[f[value]] + multimap(f[value], f, count - 1)
delimiter
pixPunit = trans.transform([(1, 0), (0, 1)]) - ax.transData.transform((0, 0))
delimiter
self._close_database()
delimiter
future_time = utc_time + timedelta(90)
delimiter
self.values = values
delimiter
t = t.upper()
delimiter
getcontext().prec = 6
delimiter
self.query.get_count(using=self.db)
delimiter
df.columns.names = df.columns[0]
delimiter
d.close()
delimiter
c = tuple(map(sub, a, b))
delimiter
a[:]
delimiter
x(1)
delimiter
garbage = []
delimiter
b = f.read(1)
delimiter
out = np.empty((m, o), dtype=np.result_type(A, B))
delimiter
exit(1)
delimiter
combined = numpy.zeros(len(neg) + len(pos))
delimiter
self.getter(instance, self.name)
delimiter
listOfStuff = [a, b], [c, d], [e, f], [f, g]
delimiter
module = inspect.getmodule(fun)
delimiter
self.x = 1
delimiter
proper_name = name.title().split()
delimiter
cache[to_calc]
delimiter
options, args = parser.parse_args()
delimiter
recursive_del(a, keepset)
delimiter
com.setDTR(False)
delimiter
current_set.append(item)
delimiter
parser = argparse.ArgumentParser()
delimiter
r, c = np.unravel_index(a.ravel().argsort()[:4], a.shape)
delimiter
print(StringFormattingParser.getKeyNames(value))
delimiter
sorted_pairs[0][1]
delimiter
logger.addFilter(ContextFilter())
delimiter
show_defaults(foo)
delimiter
print(mysql_time_epoch)
delimiter
1
delimiter
next(self)
delimiter
base = urlparse.urlparse(base)
delimiter
a[1:1] = b
delimiter
n = iter(range(len(L) - 1, -2, -1))
delimiter
y = np.mgrid[1:9:120j]
delimiter
d = [tuple(int(el2) for el2 in el) for el in c]
delimiter
mydict2
delimiter
common = set(x[0])
delimiter
dx_dt = np.gradient(a[:, (0)])
delimiter
a = formA.save()
delimiter
output.write(line)
delimiter
self.lbl.configure(text=data)
delimiter
needs_pressing = False
delimiter
self.pred(obj) or predicate(obj)
delimiter
people_map[name] += int(number_str)
delimiter
main()
delimiter
created = models.DateTimeField(auto_now_add=True)
delimiter
ax1.set_yticks([])
delimiter
print(Bar.x)
delimiter
a = set()
delimiter
dir(g)
delimiter
l = []
delimiter
p.daemon = True
delimiter
server = smtplib.SMTP(SERVER)
delimiter
ch = f.read()
delimiter
sample = random.sample(rects, NUM_RECTS)
delimiter
ncolors = len(colors)
delimiter
utc_secs = time.ctime(utc_secs)
delimiter
runit(lambda : cube_generator())
delimiter
filepaths.append(filename)
delimiter
floor(0, 5)
delimiter
s[axis] = slice(start, stop)
delimiter
ret.append(np.zeros(fixed_length))
delimiter
mngr = plt.get_current_fig_manager()
delimiter
print(seq.dump())
delimiter
{}
delimiter
b = bytearray(s)
delimiter
X.mask
delimiter
w.Sheets(1).Copy(wb.Sheets(1))
delimiter
vectorizer = TfidfVectorizer()
delimiter
type(x).__name__
delimiter
pyparsing.Optional(aTag)
delimiter
fd, filename = tempfile.mkstemp()
delimiter
jsoned = json.loads(x)
delimiter
g = abs(g)
delimiter
data.update(value)
delimiter
idx_begin = A.indptr[i]
delimiter
logOutput.moveCursor(QTextCursor.End)
delimiter
s_as_str = codecs.charmap_encode(s)[0]
delimiter
absp = os.path.abspath(ProgPath)
delimiter
iterables = [iter(it) for it in iterables]
delimiter
from_date.replace(year=from_date.year - years)
delimiter
dis.dis(code.co_consts[1])
delimiter
stack = [[]]
delimiter
_data = self.request.recv(1024)
delimiter
self.b = b
delimiter
prob_list[sel1][0], prob_list[sel2][0]
delimiter
ip_dict = dict(zip(ip_addresses, list(range(len(ip_addresses)))))
delimiter
count += 1
delimiter
samples.append(line)
delimiter
stdout.write(resultString)
delimiter
body = mail.get_payload()
delimiter
r4 = next(reikna_norm_rng(seed2, rows, cols, mu, sd))
delimiter
Ah = np.vstack(A)
delimiter
pickle.dump(classifier, output)
delimiter
manager = mp.Manager()
delimiter
answer = {}
delimiter
rolling_window(b, 100)
delimiter
corner12 = [0, 1]
delimiter
f(*args, **kwargs)
delimiter
new_style.append(line)
delimiter
mylist = [100, 2000, 1, 5]
delimiter
data.append(v)
delimiter
2
delimiter
config = ConfigParser.ConfigParser()
delimiter
self.calls.append(self.current)
delimiter
a % b
delimiter
[(k, v)] = list(d.items())
delimiter
d.set_state(gst.STATE_PLAYING)
delimiter
key.upper()
delimiter
self.char_count.grid()
delimiter
y = np.random.rand(100)
delimiter
signal.alarm(t)
delimiter
log(x ** 72) / log(2)
delimiter
plt.show()
delimiter
node_to_dict(instance, suds_data)
delimiter
pool = Pool(processes=16)
delimiter
False
delimiter
os.mkdir(dir)
delimiter
[[current]]
delimiter
d = docx.Document()
delimiter
a, b, c = np.unique(data, True, True)
delimiter
pdf_text_object = canvas.beginText((PAGE_WIDTH - text_width) / 2.0, y)
delimiter
delattr(obj, self.private_name)
delimiter
enc = base64.urlsafe_b64encode(test)
delimiter
json.dumps(self._items.get(name))
delimiter
True
delimiter
TOA12 = Ta - Tb
delimiter
ax.set_title(x_str)
delimiter
self.separator.join(ret)
delimiter
partitions = [data[i:i + n] for i in range(0, len(data), n)]
delimiter
i = i + 1
delimiter
xml.sax.handler
delimiter
p.join()
delimiter
overflowed = (number & 256) >> 8
delimiter
False
delimiter
source = browser.page_source
delimiter
self.window.set_size_request(200, 200)
delimiter
fail()
delimiter
autorestart = true
delimiter
comm = MPI.COMM_WORLD
delimiter
by_parent[branch.p].append(branch)
delimiter
print(field, value)
delimiter
d = etree.HTML(s)
delimiter
form = CustomForm
delimiter
A = A[::2]
delimiter
c.wait()
delimiter
[x for x in a if x not in b]
delimiter
result
delimiter
dog.save()
delimiter
IPython.embed()
delimiter
cstr = (ctypes.c_char * BUFSIZE)()
delimiter
r = requests.get(url)
delimiter
main.object1[0]
delimiter
raise AttributeError()
delimiter
parent_mock._kids
delimiter
pxarray = pygame.PixelArray(surface)
delimiter
print(other.f(1))
delimiter
valid = set(string.ascii_letters)
delimiter
sum(tupleOfTuples, ())
delimiter
Z *= np.exp(0.25j * np.pi / 2.0)
delimiter
words = lst2.split()
delimiter
x = 1
delimiter
lcd.setSegmentStyle(QtGui.QLCDNumber.Flat)
delimiter
self.already_computed[index]
delimiter
ntup = itertools.tee(iterable, n)
delimiter
False
delimiter
stdout, stderr = p.communicate(input=input)
delimiter
fig = plt.figure()
delimiter
driver = webdriver.Chrome(desired_capabilities=d)
delimiter
words[last_p].append(word)
delimiter
proc.communicate()
delimiter
map_level(double, data, 2)
delimiter
m.press(x, y)
delimiter
win.refresh()
delimiter
f.read()
delimiter
print(word)
delimiter
fib_to(20)
delimiter
opener.open
delimiter
city = models.CharField(max_length=150)
delimiter
last_seen_date = daterow.text
delimiter
result = np.zeros((len(x), len(uniq)), dtype=int)
delimiter
clientThread.start()
delimiter
json.dumps(theQuery)
delimiter
dt = 4e-08
delimiter
perm_list.add(tuple(temp))
delimiter
[list(u.args[:2])] if isinstance(u, Interval) else list(u.args)
delimiter
cus_Y4o9qMEZAugtnW
delimiter
t.create()
delimiter
wrapper
delimiter
func_decorator
delimiter
BOW.add(dsc)
delimiter
house_list[new_house].window_list.append(Window())
delimiter
mongo = PyMongo()
delimiter
i = 0
delimiter
results = timer.timeit(10000)
delimiter
point = geom.Point(x, y)
delimiter
out += arr[2:, 1:-1]
delimiter
first, middle, last = [0], list(range(1, n)), [n]
delimiter
np.array(r, dtype=np.integer)
delimiter
data = json.loads(cleaned)
delimiter
setattr(cls, field_name, field)
delimiter
test_import.py
delimiter
len(np.unique(sample_ix))
delimiter
f_no_opt = types.FunctionType(code, globals())
delimiter
(0.01).hex()
delimiter
caller = inspect.stack()[1][0]
delimiter
ctx.set_verify(SSL.VERIFY_PEER, verify_cb)
delimiter
Qapp = QApplication(sys.argv)
delimiter
z.T.dot(z)
delimiter
p += 1
delimiter
foo.__code__.co_consts
delimiter
[2, 4, 1],
delimiter
plot(x, interp(x, x[y != 0], y[y != 0]))
delimiter
self.listWidget.setSelectionMode(QtGui.QAbstractItemView.MultiSelection)
delimiter
app.add_autodocumenter(SimpleDocumenter)
delimiter
db = SQLAlchemy(app)
delimiter
xyz(x)
delimiter
repr(self.val)
delimiter
results.append(fullname)
delimiter
p.start()
delimiter
pl.show()
delimiter
response += read_bytes
delimiter
Py_Initialize()
delimiter
mylist = []
delimiter
stacked = numpy.vstack((a, fill, a))
delimiter
s.add(i)
delimiter
l2(1, 2)
delimiter
char
delimiter
format(1)
delimiter
yint = list(range(min(y), math.ceil(max(y)) + 1))
delimiter
w1back = numpy.array(json.loads(w1string))
delimiter
print(df)
delimiter
nx.path.bidirectional_dijkstra(G, 1, 4)
delimiter
npad = (0, 0), (1, 2), (2, 1)
delimiter
X = boston.data
delimiter
stringfier
delimiter
fig = plt.figure(figsize=(8, 6))
delimiter
os.mkdir(dirname)
delimiter
mycounter
delimiter
xdebug.remote_enable = 1
delimiter
self.name
delimiter
words = len(word)
delimiter
wait(time.Millisecond * 200)
delimiter
self.exclude(groups_set__pk=group.pk)
delimiter
-1
delimiter
self.flip()
delimiter
yl = ax.get_ylim()
delimiter
index = tf.range(0, batch_size) * max_length + (length - 1)
delimiter
page = urllib.request.urlopen(root_url).read()
delimiter
key = cv2.waitKey(10)
delimiter
time.sleep(pause)
delimiter
a, b = b, a + b
delimiter
j.ra, j.az, j.dec
delimiter
context.extend(after_buf)
delimiter
out.reshape(N, -1)[:, (5)] = -sinv
delimiter
xpointer = ctypes.addressof(asdouble)
delimiter
result = dict()
delimiter
data = eval(input())
delimiter
reshaped1.show()
delimiter
quit()
delimiter
self.modified_date = datetime.datetime.now()
delimiter
sigma = np.sqrt(2) / n
delimiter
y = x * x
delimiter
array([])
delimiter
command = e.get()
delimiter
p = figure(x_range=[0, 10], y_range=[0, 10])
delimiter
save()
delimiter
text.append(line[:-1])
delimiter
N = len(X)
delimiter
event.Skip()
delimiter
res = defaultdict(list)
delimiter
print(r.json())
delimiter
row_indices, col_indices = np.nonzero(both_top_n)
delimiter
print(i, sub_seq(li, i))
delimiter
objectify.deannotate(root, cleanup_namespaces=True)
delimiter
a[i]
delimiter
True
delimiter
df_dict = {}
delimiter
uniq = []
delimiter
x + y
delimiter
s.quit()
delimiter
p.close()
delimiter
job.hour.every(4)
delimiter
canvas = Tkinter.Canvas(window, width=image.size[0], height=image.size[1])
delimiter
xfmt.set_useOffset(10000)
delimiter
spaces = sum(c.isspace() for c in s)
delimiter
get(True), get(False)
delimiter
cols = []
delimiter
oname = sys.argv[2]
delimiter
connection_file = os.path.basename(connection_file_path)
delimiter
a.newMethod()
delimiter
sys.exit(1)
delimiter
name = get_name()
delimiter
L_in.insert(idx, new_v)
delimiter
raise MyError()
delimiter
MULT(z, table[index], z)
delimiter
sha.hexdigest()
delimiter
level.extend(tree(el, indent + 2))
delimiter
self.map[val]
delimiter
youtube_regex_match
delimiter
rank_cards_map = {c: i for i, c in enumerate(rank_cards)}
delimiter
b = os.read(fd, blksize)
delimiter
False
delimiter
query = self.session.query(self.model).filter_by(mid=term)
delimiter
~np.in1d(Ad, Bd, assume_unique=True)
delimiter
vecfunc = np.vectorize(myfunc)
delimiter
cam.start_camera()
delimiter
driver = webdriver.Firefox()
delimiter
assert isinstance(line, str)
delimiter
post = np.sum(npseq[i + 1:]) / (n - i - 1)
delimiter
win.set_colormap(rgba)
delimiter
next((result for result in comparer_iter if result), 0)
delimiter
nf.write(contents)
delimiter
ascii_lower.symmetric_difference(candidate_lower)
delimiter
loop = asyncio.get_event_loop()
delimiter
filename = os.path.splitext(base)[0]
delimiter
result[widget_type].append(app)
delimiter
print(str(myList))
delimiter
self.serversocket.bind((socket.gethostname(), i_port))
delimiter
print(np.mean(figure > 0.5))
delimiter
foo = [1]
delimiter
proc = subprocess.Popen(sys.argv[1])
delimiter
print(res.getheaders())
delimiter
email.utils.format_datetime(dt)
delimiter
ec2 = boto.connect_ec2()
delimiter
Ti.App.exit()
delimiter
rows = models.ManyToManyField(Row, blank=True)
delimiter
reductions = np.column_stack((start, end)).ravel()
delimiter
print(new_string)
delimiter
value[0]
delimiter
weights.append(max_weight * np.random.random(numtimes + 1))
delimiter
tuple(serialize([item for item in obj]))
delimiter
np.sqrt(((x1 - x2) ** 2).sum(axis=0))
delimiter
result = conn.execute(query)
delimiter
self._content.read()
delimiter
f = lambda x: x
delimiter
self._func = func
delimiter
cell = make_closure_cell(5)
delimiter
age = db.IntegerProperty()
delimiter
axes_1.add_patch(Ellipse1.art())
delimiter
sorted_pairs[0][0]
delimiter
foo.bars.add(*pk_list)
delimiter
p = Pool(4)
delimiter
value
delimiter
ax.dataLim.update_from_data_xy(xy, ignore=False)
delimiter
lista_elegir[indices]
delimiter
traverse(node.right)
delimiter
myfunc()
delimiter
grid = list(zip(*grid))
delimiter
print(p(42))
delimiter
output = p2.communicate()[0]
delimiter
True
delimiter
datadex = get_dict()
delimiter
test = Test(sys.argv[1:])
delimiter
results = pool.map(starfoo, zip(words, numbers))
delimiter
self.data = data
delimiter
req = urllib.request.Request(url, data, headers)
delimiter
writer.save()
delimiter
os.close(1)
delimiter
o.subscribe(c.instance_handler)
delimiter
no_proxy_opener = urllib.request.build_opener(no_proxy)
delimiter
module.__path__ = [os.path.dirname(os.path.abspath(file.name))]
delimiter
print(df)
delimiter
spec.loader.exec_module(foo)
delimiter
elen, vlen = int(elidelen), len(value)
delimiter
axs = plt.subplots(2, 2)[1]
delimiter
acl = key.get_acl()
delimiter
sum_y = np.sum(arr[:, (1)])
delimiter
result
delimiter
b = numpy.array = [4, 5, 6]
delimiter
group = map(itemgetter(1), group)
delimiter
last_col = len(cols) - np.where(cols[::-1] == False)[0][0] - 1
delimiter
circle(maskCirc, center, radius, Scalar(255), 5)
delimiter
crawler.crawl(RaListSpider())
delimiter
y2 = np.random.normal(-10, 10, 100000) / 10.0
delimiter
r = random.randint(0, i)
delimiter
wr(n, val)
delimiter
col_index = list(np.arange(a.size))
delimiter
(word[i] for word in words)
delimiter
x2_Kaxs[j] = [random.randint(0, 9) for k in range(random.randint(1, 5))]
delimiter
table_name = self.model._meta.db_table
delimiter
print(readFileObject.readlines())
delimiter
handler.setFormatter(formatter)
delimiter
pprint(B_rref[0].applyfunc(lambda x: mod(x, 5)))
delimiter
a = datetime.timedelta(minutes=1)
delimiter
self._mod = __import__(modname)
delimiter
print(first_arg_unicode)
delimiter
ax.autoscale(tight=True)
delimiter
self.logentry = []
delimiter
form.instance.user = request.user
delimiter
heap = []
delimiter
no_background = np.array(no_background).T
delimiter
tags = ListField(StringField())
delimiter
strcpy(cpy, str.c_str())
delimiter
mother = names[0].strip()
delimiter
BEGIN
delimiter
ELSE
delimiter
pathB = cheapest_path(path_list, B, [])
delimiter
zip(a, b)
delimiter
db.documents.insert(entity)
delimiter
root = Tk()
delimiter
[myfunc(a, b) for a in myarray]
delimiter
self.right = right
delimiter
start, end = seq[0], seq[0]
delimiter
offset = 0
delimiter
y = normal(0, 1, n)
delimiter
show(p)
delimiter
raise CTError(errors)
delimiter
SERVICE, DESK, ANALYST - IT - Support
delimiter
wm.add_watch(filename, mask)
delimiter
ax = fig.add_subplot(111)
delimiter
lst[:] = range(1, 4)
delimiter
phones = PhoneSerializer(required=False, many=True)
delimiter
b2 = set(b)
delimiter
django_file = ContentFile(result_pic.getvalue())
delimiter
m_t.release()
delimiter
readline.remove_history_item(readline.get_current_history_length() - 1)
delimiter
conf = ConfigParser.ConfigParser()
delimiter
itertools.starmap(func, zip(*args))
delimiter
dict = pickle.loads(tcp_recieve())
delimiter
fig = plt.figure()
delimiter
linkers.append(arg)
delimiter
e = Entry(win, width=10)
delimiter
j = int(j)
delimiter
tree = et.fromstring(xmltext)
delimiter
mylib.do_something()
delimiter
self.count = 0
delimiter
type(io.BytesIO.read)
delimiter
args = request.args.copy()
delimiter
log.startLogging(sys.stdout)
delimiter
SGMLParser.reset(self)
delimiter
dir = dir[:-1]
delimiter
print(dframe)
delimiter
print(rdelta)
delimiter
baz()
delimiter
textstring
delimiter
print(ctypes.c_char_p(p).value)
delimiter
connection.execute(log_table.insert(), inserts)
delimiter
True
delimiter
stdout_queue = Queue.Queue()
delimiter
self.menuTasks = QtGui.QMenu()
delimiter
a + b
delimiter
H, xedges, yedges = np.histogram2d(glat, glon, bins=[ybins, xbins], weights=Av)
delimiter
list(queue)
delimiter
print(repo.head.ref)
delimiter
args = parser.parse_args()
delimiter
store.close()
delimiter
self.randrange(a, b + 1)
delimiter
Surface = pygame.display.set_mode((1000, 600))
delimiter
palette.setColor(palette.Background, QtGui.QColor(0, 170, 255))
delimiter
size = file_bytes.tell()
delimiter
ws = wb.active()
delimiter
math.inf
delimiter
ids = {}
delimiter
print(norm(15.0))
delimiter
pool.join()
delimiter
first.stdout.close()
delimiter
res[f]
delimiter
sysconfig.get_python_lib()
delimiter
createtable.ignore(comment1)
delimiter
sheet_rect = sheet.get_rect()
delimiter
fig = plt.figure()
delimiter
tensordot = np.tensordot(p, A, (0, 0))
delimiter
id = db.Column(db.Integer, primary_key=True)
delimiter
self._in(wrapped.__get__(self, cls), *args, **kwargs)
delimiter
old_clusters = np.zeros(data.shape[0])
delimiter
l = sorted(l, reverse=True)
delimiter
[new_solution.append(data.pop()) for x in range(SET_LENGTH - 1)]
delimiter
raise ExitCommand()
delimiter
queue = Manager().Queue()
delimiter
item.addChild(child)
delimiter
self.zoomcycle += 1
delimiter
entity2_id = Column(Integer, ForeignKey(Entity2.entity2_id))
delimiter
print(result)
delimiter
CSV_dictionary = file_open(my_file)
delimiter
data_files = []
delimiter
rad = np.linalg.norm(X, axis=1)
delimiter
n = L[0][0]
delimiter
Form.show()
delimiter
x = [0] * 51
delimiter
df
delimiter
plat = sys.platform
delimiter
print(data.values[np.searchsorted(data.ages, desired_ages)])
delimiter
sleep(1)
delimiter
MB_YESNO = 4
delimiter
result = {k: v for k, v in list(result.items()) if v}
delimiter
form.populate_obj(team)
delimiter
a
delimiter
self.lbl.grid()
delimiter
grouped = groupby(_sounds[c] for c in word.lower() if c in _sounds)
delimiter
self.data = dict(*args, **kw)
delimiter
t = tuple(text for text in div.stripped_strings)
delimiter
dist = min(y) - max(x)
delimiter
pid = os.fork()
delimiter
newdata[a] = [a, b, c]
delimiter
pt0 = time.time()
delimiter
file = models.FileField(upload_to=get_random_filename)
delimiter
print(sys.exc_info())
delimiter
self.ax.plot(angle, values, *args, **kw)
delimiter
b = x + y
delimiter
fig = plt.figure()
delimiter
children = li.findChildren()
delimiter
ig0 = itemgetter(0)
delimiter
_, values = zip(*sorted(obj.items()))
delimiter
filename = data.filename
delimiter
deleteself._inner[index]
delimiter
archive = py7zlib.Archive7z(fp)
delimiter
type(o)
delimiter
label_text_baseline, label_text_color, label_text_font
delimiter
candidates.extend(cchildren)
delimiter
ax = plt.gca()
delimiter
Foo = ctypes.POINTER(myStruct)()
delimiter
foo.foobar = 2
delimiter
y = array(100.0)
delimiter
pipe = subprocess.PIPE
delimiter
self.symb = symb
delimiter
res
delimiter
conn.autocommit(True)
delimiter
w = np.where(np.isnan(x))[0]
delimiter
df
delimiter
self.a = 42
delimiter
m = pd.Series(f[0], f[1])
delimiter
x, y = np.meshgrid(np.linspace(-5.0, 5.0, num), np.linspace(-5, 5, num))
delimiter
dddcccba
delimiter
C.__setstate__(self, ds[0])
delimiter
application.listen(8000)
delimiter
y = cos(x) * x ** 2 + x + sin(x - 1.0)
delimiter
tracker.save()
delimiter
[1, 1, 0, 0, 1],
delimiter
dvals.mean()
delimiter
cursor = connection.cursor()
delimiter
importlib.import_module(self.mapToTarget(name))
delimiter
lists = a, b, c
delimiter
xml_to_dict(root)
delimiter
ax.set_xticks(major_locations)
delimiter
result
delimiter
1,
delimiter
assert issubclass(w[-1].category, DeprecationWarning)
delimiter
p.showPage()
delimiter
Sender(host, port)
delimiter
point_neighbors.append(points[index])
delimiter
N, bins, patches = pl.hist(pl.rand(1000), 20)
delimiter
s
delimiter
io.seek(0)
delimiter
process(x.groups())
delimiter
print(f)
delimiter
print(child.GetObjectDescription())
delimiter
argsdict = dict()
delimiter
lly = lly.flatten()
delimiter
urx = urx.flatten()
delimiter
ury = ury.flatten()
delimiter
final_ensemble = copy(all_ensembles[0])
delimiter
myList[0]
delimiter
heights = np.sin(2 * np.pi * np.sqrt(X ** 2 + Y ** 2) / N)
delimiter
title = db.Column(db.String(255))
delimiter
domain, level, url, text = the_tuple
delimiter
lines(SL)
delimiter
options.append(False)
delimiter
-x + x * Log[x]
delimiter
sqs = sqs1 | sqs2
delimiter
print(a.f1(10))
delimiter
dict(chain(*map(dict.items, dicts)))
delimiter
(a[ti[0]] == a[ti[1]]).any()
delimiter
postsort.append((category, sorteddata))
delimiter
istream = ZipFile(zname).open(zipextfile)
delimiter
multi.start()
delimiter
args.extend(names)
delimiter
a = list(range(1, 10))
delimiter
stdout = subprocess.PIPE
delimiter
self.im_data_lock.acquire()
delimiter
fum = Fum()
delimiter
setattr(namespace, group, groupspace)
delimiter
mysql.init_app(app)
delimiter
time_info = [_f for _f in str_list if _f]
delimiter
subscription_id = db.Column(db.Integer)
delimiter
a1 = np.array(list(np.zeros(20)) + list(np.ones(20)) + list(2 * np.ones(17)))
delimiter
last_row = len(rows) - np.where(rows[::-1] == False)[0][0] - 1
delimiter
laparams = LAParams()
delimiter
key = path[-1]
delimiter
comp = lambda x, y: cmp(x.ID, y.ID)
delimiter
setup.py
delimiter
TORNADO_PORT = settings.TORNADO_PORT
delimiter
print(a)
delimiter
l if len(l) > 1 else l[0]
delimiter
a[ind]
delimiter
self.scat = self.ax.scatter(X[:, (0)], X[:, (1)], X[:, (2)], c=c, s=200)
delimiter
result = ws.recv()
delimiter
tfidf = TfidfVectorizer().fit_transform(twenty.data)
delimiter
sorted_dict = {k: {n: list(v) for n in d[k]} for k, v in ordered_kv}
delimiter
Day = int(current_date[0:2])
delimiter
Sxy = Sxy + x * y
delimiter
import_array()
delimiter
pool = multiprocessing.Pool(THREADS)
delimiter
b.argmax(1)
delimiter
sys.stdout.write(text)
delimiter
it = iter(iterable)
delimiter
s = s[1:]
delimiter
sess = tf.InteractiveSession()
delimiter
o.close()
delimiter
AnonymousUser()
delimiter
root = Tkinter.Tk()
delimiter
a = math.floor(math.log10(y))
delimiter
print(key)
delimiter
new_list = []
delimiter
oldperson = Person()
delimiter
product = np.dot(A, A.T)
delimiter
x = arr[7].max()
delimiter
point_neighbors_list.append(point_neighbors)
delimiter
df = pd.crosstab(df.actual, df.predicted)
delimiter
run_multiple_jobs()
delimiter
loop = asyncio.get_event_loop()
delimiter
weights = array(list(range(1, 4)))
delimiter
self.__parse_xml_declaration(xml_file)
delimiter
data[name][attr_name][attr_year] = value
delimiter
fig.clf()
delimiter
ABCD
delimiter
xvals = np.arange(0, 10, 0.1)
delimiter
y, x = np.ogrid[-radius:radius + 1, -radius:radius + 1]
delimiter
communication_set = CommunicationFormSet(instance=my_contact)
delimiter
small_primes = itertools.takewhile(lambda p: p < n, primes)
delimiter
biggest_label = size[1:].argmax() + 1
delimiter
server.data(msg)
delimiter
self.__dict__[field] = value
delimiter
dict(count)
delimiter
pads = tuple((0, i) for i in desired_shape - arr.shape)
delimiter
l = [1, 2, 5]
delimiter
sorted_ = sorted(myList, key=itemgetter(0))
delimiter
__path__ = pkgutil.extend_path(__path__, __name__)
delimiter
n = arr.shape[1]
delimiter
print(xbee.wait_read_frame())
delimiter
d = df.values
delimiter
s = df.a[::-1].diff().gt(0).rolling(2).sum().eq(2)
delimiter
response = urllib.request.urlopen(request)
delimiter
folder = folder.strip(path)
delimiter
print(rsp.raw._fp.fp._sock.getpeername())
delimiter
data = in_file.read()
delimiter
TOKENBLANKS = 1
delimiter
part_num = random.randint(0, len(l) - 1)
delimiter
1 + x + x ** 2 / 2.0
delimiter
df = sqlc.read.options(catalog=catalog).format(data_source_format).load()
delimiter
df
delimiter
controller.send_keys(key)
delimiter
counter.update(d)
delimiter
CAPTCHA_TEST_MODE = True
delimiter
scalars = np.arange(N)
delimiter
dims = np.maximum(B.max(0), A.max(0)) + 1
delimiter
imag_part = a.real * b.imag + a.imag * b.real
delimiter
increment()
delimiter
print(np.c_[xx.ravel(), yy.ravel()].shape)
delimiter
buf = cmpr.flush()
delimiter
url = models.URLField(max_length=255, unique=True)
delimiter
a = df.iloc[:, 1:4].ge(df.High, axis=0)
delimiter
numerical_bids.sort(reverse=True)
delimiter
dict_compare(v, db[k])
delimiter
shot_sequences = product(*([list(range(7))] * len(bird_data)))
delimiter
get = np.concatenate((get, np.zeros((1, get.shape[1]))))
delimiter
conv = json.loads(code)
delimiter
_convert(node_or_string)
delimiter
print(t.render(items=items))
delimiter
print(the_map)
delimiter
fr = df.groupby([df.index.year, df.index.month]).sum().unstack(fill_value=0)
delimiter
request.data
delimiter
d = datetime.strptime(base_date, fmt)
delimiter
client = app.test_client()
delimiter
filtered = itertools.compress(s, b)
delimiter
result = query.first()
delimiter
line += self.fileobj.readline()
delimiter
res = parser.parse_args()
delimiter
dictname = pickle.load(f)
delimiter
n_strings = [item.replace(number, letter) for item in n_strings]
delimiter
print(self._concrete_method())
delimiter
population = models.IntegerField()
delimiter
indexed = {v: i for i, v in enumerate(sorted(a))}
delimiter
shift_axis -= 1
delimiter
ref_sort = reference_array.ravel()[sort_idx]
delimiter
[]
delimiter
curs = orcl.cursor()
delimiter
tf_weight = tf.Variable(tf.zeros([A, B]))
delimiter
l = c.recv(1024)
delimiter
sns.set_color_codes()
delimiter
result = js2py.eval_js(js)
delimiter
aaa
delimiter
counter_list = Counter(a).most_common()
delimiter
ctr = np.arange(N)
delimiter
print(duncan_prestige.__doc__)
delimiter
ax = plt.axes()
delimiter
self.trayIcon = gtk.StatusIcon()
delimiter
size_sample2 = len(sample2)
delimiter
pyramid_includes = pyramid_beaker
delimiter
arr = np.delete(arr, -1, axis=0)
delimiter
plt.plot(epoch_in, Y_observed)
delimiter
name = db.StringProperty()
delimiter
mform
delimiter
print(repr(doc))
delimiter
move(abs_path, file_path)
delimiter
8, 1, 1, 1
delimiter
root.mainloop()
delimiter
dt.datetime.combine(self.date, self.time)
delimiter
id(b[0])
delimiter
b = [1, 2, 5, 7, 2]
delimiter
weights = numpy.array(list(range(1, 4)))
delimiter
self._cond.notify()
delimiter
data = self.fd.read(self.line_length)
delimiter
pipe = sp.Popen(command, stdout=sp.PIPE, bufsize=10 ** 8)
delimiter
d[x] = d.get(x, 0) + 1
delimiter
board = [[(0) for x in range(n)] for x in range(n)]
delimiter
line[0]
delimiter
self.frame = tk.Frame(self)
delimiter
x[0] = 0.0
delimiter
self.root = tki.Tk()
delimiter
dt.timestamp()
delimiter
n.activate()
delimiter
im = glumpy.image.Image(M, colormap=glumpy.colormap.Hot)
delimiter
True
delimiter
self.a = new_a
delimiter
name = m.group(1)
delimiter
inter = np.in1d(a, b)
delimiter
ytext = y + (ax.get_ylim()[1] - ax.get_ylim()[0]) / 20
delimiter
factor5 = 0
delimiter
form
delimiter
subclass2.fun()
delimiter
print(tmp)
delimiter
out.append(seq[int(last):int(last + avg)])
delimiter
ax = fig.add_subplot(111)
delimiter
l = len(a) if a.shape else 0
delimiter
time.sleep(5)
delimiter
print(element.text.split()[0])
delimiter
False
delimiter
dataset.create()
delimiter
dfA = pd.DataFrame(A)
delimiter
min_key, min_value = next(it)
delimiter
False
delimiter
b = [45, 42, 0, 1, -1, 0]
delimiter
a.a
delimiter
y2, x2 = np.unravel_index(sort[1], result.shape)
delimiter
log.addHandler(ch)
delimiter
q = [(i, depth + 1) for i in list(d.values()) if isinstance(i, dict)]
delimiter
self._name = func.__name__
delimiter
newPathList.append(i)
delimiter
[{company: [user1, user2]}]
delimiter
makeGUI = MakeGUI(root)
delimiter
self.data[key]
delimiter
it = np.nditer((A, B))
delimiter
f2 = np.array([1.000051])
delimiter
find([-1])
delimiter
data.append(row[idx])
delimiter
p.drawImage(imagem)
delimiter
p1.say_my_name()
delimiter
store[key]
delimiter
self.value = value
delimiter
print(type(C))
delimiter
depth += 1
delimiter
temp = np.array([(p[m] * A[m]) for m in range(len(p))])
delimiter
i = l.index(v)
delimiter
wrapper
delimiter
result.append(i)
delimiter
print_names()
delimiter
self.waiters = collections.deque()
delimiter
y = adate.year
delimiter
array1 = np.array(list1)
delimiter
num = int(str)
delimiter
n, m = int(n), int(m)
delimiter
b[0, 0] = 0
delimiter
items = list(d.items())
delimiter
plt.plot(binsm, n)
delimiter
BeautifulSoup(urllib.request.urlopen(urllib.request.Request(url, headers=header)))
delimiter
speed = D / (t2 - t1)
delimiter
f(example)
delimiter
lines2d[0].set_data(oldx + 0.1, oldy + 0.2)
delimiter
cls.setup_test_data()
delimiter
corrs
delimiter
x1.append(t)
delimiter
writer = csv.writer(f)
delimiter
arr2d.shape
delimiter
line_number = random.randint(0, total_num_lines)
delimiter
run()
delimiter
ques_type = models.SmallIntegerField(default=2)
delimiter
next(a)
delimiter
{{companyForm.hidden_tag()}}
delimiter
self._hash
delimiter
traverse(cyclic_graph, Sequence1, process)
delimiter
ret = app.exec_()
delimiter
jsonify(success=False, errors=inputs.errors)
delimiter
Base.metadata.create_all(engine)
delimiter
ast.show()
delimiter
test(SP, CP)
delimiter
root.destroy()
delimiter
sqrt(2)
delimiter
lid = Column(String(80), primary_key=True, default=_newid)
delimiter
n_tr_0 = (y_train == 0).sum()
delimiter
vers2 = x ** 2 + 2 * x * y + y ** 2
delimiter
self.is_started = True
delimiter
raise PyflakesError(path, w.messages)
delimiter
axPA = plt.subplot(gs1[(2), :], sharex=axF)
delimiter
self.child_win.show()
delimiter
get_latin1_char(ch)
delimiter
asyncio.iscoroutine(mock())
delimiter
comments = models.TextField(blank=True)
delimiter
File(identifier=collection_entity, name=name).save()
delimiter
response = requests.get(zip_file_url)
delimiter
self.parent and self.parent.on_thread_finished(self, 42)
delimiter
axE = plt.subplot(gs1[(1), :], sharex=axF)
delimiter
thread = threading.Thread(target=func)
delimiter
_, path = os.path.splitdrive(path)
delimiter
deleteself.thisptr
delimiter
print(x, permutation([1, 1, 2, 2, 2], x))
delimiter
self._pcapw.writepkt(self._ethernet, ts=1412977616)
delimiter
next(i)
delimiter
show()
delimiter
ax = fig.add_subplot(111)
delimiter
dump.write(json.dumps(arbitrary_data))
delimiter
kernel2
delimiter
label_input = tf.placeholder(tf.uint8, shape=[])
delimiter
d[k] = f(v)
delimiter
self.observer.schedule(self, path, recursive=False)
delimiter
currentList.append(line.strip())
delimiter
print(TestClass())
delimiter
parser = MyHTMLParser()
delimiter
plot(list(range(80)))
delimiter
score = len(name) + sum(c in vowel for c in name.lower())
delimiter
print(self.theConfig)
delimiter
ward_form = WardForm()
delimiter
z = dict(Counter(x) + Counter(y))
delimiter
initial = tf.constant(0.1, shape=shape)
delimiter
rPM(PROCESS.handle, ADDRESS1, ADDRESS2, 64, 0)
delimiter
seq = np.arange(counts.max())
delimiter
fig.scatter(df.icol(0), df.index)
delimiter
indices, l = zip(*x)
delimiter
arr1 = np.array([[1, 7], [4, 8], [4, 0]])
delimiter
doc.SaveAs(txtpath, wdFormatUnicodeText)
delimiter
print(result.get(timeout=1))
delimiter
print(round(1.0 / 7, 6))
delimiter
left_depth = self.left.depth() if self.left else 0
delimiter
data = b.getvalue()
delimiter
assert pubkey.verify_final(signature) == 1
delimiter
activity = models.ForeignKey(Activity)
delimiter
video = VideoItem.objects.filter(user=user)
delimiter
np.random.seed(42)
delimiter
y = 5 * np.sin(x) + np.cos(2 * np.pi * x)
delimiter
query_params[param_name] = [param_value]
delimiter
diff = np.sqrt(diff)
delimiter
self.full_clean()
delimiter
result.append(c)
delimiter
self.active_writer_lock.acquire()
delimiter
plt.colorbar()
delimiter
self.trell = []
delimiter
print(intersect(b1, b2))
delimiter
print(sqlparse.sql.TokenList([t for t in _filter(sql)]))
delimiter
B[-i] += x
delimiter
employee.join(department).map(lambda e: (e[1][0], e[0])).collect()
delimiter
res[0] = func(*args, **kwargs)
delimiter
x = 5
delimiter
f.close()
delimiter
o = MyClass(1, 2)
delimiter
A = np.random.rand(100, 100)
delimiter
pca.fit_transform(data_scaled)
delimiter
id_arr = np.zeros(clens[-1], dtype=int)
delimiter
compare()
delimiter
self.text = text
delimiter
y_pred = pipeline.predict(X_dev)
delimiter
type(ts.index)
delimiter
plot(ax, ay)
delimiter
result[::2] = list1
delimiter
i += step
delimiter
a
delimiter
thread.start_new(extract_bigrams2, (cpnt, len(text), a + 1))
delimiter
self.arrays = [arg for arg in args]
delimiter
fhandle.seek(size, 1)
delimiter
k = 1
delimiter
ship = collections.OrderedDict(ship)
delimiter
a, b = 0, 1
delimiter
[]
delimiter
p = Pool(4)
delimiter
new_profile.save()
delimiter
new_list = [A_list, B_list, C_list, D_list]
delimiter
narr_view
delimiter
dictCursor = dbConn.cursor(MySQLdb.cursors.DictCursor)
delimiter
raise Exception()
delimiter
time = Column(TIMESTAMP, server_default=func.now())
delimiter
x.extend(b)
delimiter
print(soup.prettify())
delimiter
test_case.assertEqual(set(expected), set(actual))
delimiter
split_string = []
delimiter
weighted_errors.append(error)
delimiter
seq.append(im.copy())
delimiter
0, 1, 1
delimiter
Point(self.x + point.x, self.y + point.y)
delimiter
x = inner(x)
delimiter
self.readsofar += len(data)
delimiter
response.status_code = 500
delimiter
smtpserver.login(gmail_user, gmail_pwd)
delimiter
a.insert(lo, x)
delimiter
csvout = csv.writer(fout)
delimiter
temp = defaultdict(list)
delimiter
r = np.arange(0, 90, 0.01)
delimiter
m[np.searchsorted(np.cumsum(m), stop):] = 0
delimiter
print(bin(value))
delimiter
print(data)
delimiter
Permutations(a, t)
delimiter
hash[word] += 1
delimiter
[Frameworks]
delimiter
d = defaultdict(int)
delimiter
listForm = list(d.values())
delimiter
offsets = [dt.fields[name][1] for name in names]
delimiter
self._s = value
delimiter
merge(main, 0, 2)
delimiter
new_emails, new_other_list = zip(*filtered)
delimiter
False
delimiter
dirname, filename = os.path.split(name)
delimiter
y = np.array([1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0])
delimiter
print(os.path.abspath(p))
delimiter
s_tot = s.sum()
delimiter
x = np.random.normal(0, 1.0, 100)
delimiter
demo = [[0]] * 2
delimiter
sa_query.paginate(page, per_page, error_out)
delimiter
print(list(sameLevel.values()))
delimiter
_clients = {}
delimiter
A = np.array(list(range(6)))
delimiter
login1 = urllib.request.urlopen(request).read()
delimiter
self.__setitem__(k, v)
delimiter
goodkeys = set(x[0] for x in flt if not x[1])
delimiter
not Counter([1, 2]) - Counter([1])
delimiter
m, n = A.shape
delimiter
new_query_string = urlencode(query_params, doseq=True)
delimiter
salt = uuid.uuid4().hex
delimiter
stack.append(Wall(pos + 1, height))
delimiter
cells = np.zeros((side, side, side), dtype=np.uint)
delimiter
myData = JSON.parse(myJSONList)
delimiter
x += y
delimiter
step = forms.IntegerField()
delimiter
start_dir = os.getcwd()
delimiter
bigsquare = make_square(0.5, 0.5, 1.0, 1.0)
delimiter
tmp[:cut], tmp[cut:]
delimiter
res = [f for f in os.listdir(path) if m.search(f)]
delimiter
self.send_response(200)
delimiter
y = sin(angle) * self.radius.imag + self.center.imag
delimiter
conn = libvirt.open(URI)
delimiter
print(c.nbytes == len(c.data))
delimiter
b = np.array([1, 1, 0])
delimiter
self.visit(node.right)
delimiter
result = subprocess.check_call(call)
delimiter
parts = [[], []]
delimiter
assert l() < 0 < m()
delimiter
self.calltime = time.time() - self.timeout + value
delimiter
result = defaultdict(lambda : defaultdict(str))
delimiter
plt.subplot(155)
delimiter
gzip.wait()
delimiter
my_cmap_r = mpl.colors.LinearSegmentedColormap(name, LinearL)
delimiter
cv.Resize(image, smallImage, cv.CV_INTER_LINEAR)
delimiter
wx.NO_BORDER
delimiter
time = models.IntegerField()
delimiter
sum(mat, vec.A)
delimiter
a = c[:5]
delimiter
cropped_example = original.crop((left, top, right, bottom))
delimiter
a, b = itertools.tee(iterable)
delimiter
szr = wx.BoxSizer(wx.VERTICAL)
delimiter
sun = Sun()
delimiter
print(result)
delimiter
tree = et.parse(xmlfile)
delimiter
my_instance = qs[0]
delimiter
cartesian(arrays[1:], out=out[0:m, 1:])
delimiter
pl.boxplot(data)
delimiter
d = collections.defaultdict(int)
delimiter
self.lock = threading.Lock()
delimiter
f(a, a.size)
delimiter
index = list(np.ix_(*[np.arange(i) for i in z2.shape]))
delimiter
turtle.right(45)
delimiter
a = [2, 4, 6]
delimiter
arr
delimiter
height = int(cap.get(cv2.cv.CV_CAP_PROP_FRAME_HEIGHT))
delimiter
os.remove(filename)
delimiter
f.__code__ in creator.__code__.co_consts
delimiter
mycode.things()
delimiter
RES = n.zeros((SPMAT.shape[0],), dtype=complex64)
delimiter
lock = threading.Lock()
delimiter
print(x)
delimiter
interval_df_intersection(mydataframe2, mydataframe1)
delimiter
{self.body()}
delimiter
a.shape = a.size // ncols, ncols
delimiter
rlist1 = list1[::-1]
delimiter
now = time.time()
delimiter
player.set_media(media)
delimiter
[np.sum(x ** 2 + a), 2 * x]
delimiter
no_proxy = urllib.request.ProxyHandler({})
delimiter
li.append(4)
delimiter
current = current[name]
delimiter
os.unlink(file_name)
delimiter
str(0.1000000000000999)
delimiter
node = rootnode
delimiter
writer.save()
delimiter
data = simplejson.loads(self.data_string)
delimiter
logger.addHandler(consoleHandler)
delimiter
row_rank = np.argsort(row_order, axis=1)
delimiter
blank_image[:, 0:0.5 * width] = 255, 0, 0
delimiter
base_pic.close()
delimiter
values[bisect.bisect_left(keys, query)]
delimiter
page = read_pdf.getPage(0)
delimiter
queryset = self.filter_queryset(self.get_queryset())
delimiter
print(sys.getsizeof(y))
delimiter
detokenizer = MosesDetokenizer()
delimiter
G.subgraph(to_keep)
delimiter
context.paint()
delimiter
print(self.data)
delimiter
idx = np.argsort(e_values)[::-1]
delimiter
False
delimiter
print(my_test)
delimiter
sys.stdout = NewOut()
delimiter
missing_dates.append(test_date)
delimiter
digraphs = defaultdict(list)
delimiter
col_data = col.text_content()
delimiter
setattr(testcase, test_name, test)
delimiter
deviceparent
delimiter
matches = words.intersection(pwords)
delimiter
bins = [0, 0.25, 0.5, 0.75, 1]
delimiter
params_json = json.dumps(params)
delimiter
mapper._validate_polymorphic_identity(mapper, state, dict_)
delimiter
img1 = to_grayscale(imread(file1).astype(float))
delimiter
s.listen(5)
delimiter
df = df.join(df_my_ones)
delimiter
t1 = time.time()
delimiter
settings.configure()
delimiter
query
delimiter
soup = BeautifulSoup(html)
delimiter
4048
delimiter
sizer = wx.BoxSizer(wx.VERTICAL)
delimiter
p.dump(obj)
delimiter
self.create_old_data()
delimiter
text_format.Merge(file_content, graph_def)
delimiter
newlist1.append(s)
delimiter
CYAN, MAGENTA, YELLOW = (0, 255, 255), (255, 0, 255), (255, 255, 0)
delimiter
self.x + 1
delimiter
fig = plt.figure(figsize=(8, 8))
delimiter
Testing(10 / 10)
delimiter
np.invert(s)
delimiter
shapes = [find_shape(subseq) for subseq in seq]
delimiter
b = f.read(2)
delimiter
prob += colsums[c] == sum(mat[r][c] * rowselected[r] for r in allrows)
delimiter
firstNumber = line[:12]
delimiter
assert np.max(abs(a - a2).data) < 1e-05
delimiter
df.index.lexsort_depth
delimiter
X2tick_location = ax1.xaxis.get_ticklocs()
delimiter
distance_matrix[i, j] = haversine(loni, lati, lonj, latj)
delimiter
b.set(2)
delimiter
i, n, m = -1, len(seq), len(subseq)
delimiter
value = self.func(obj)
delimiter
print(value)
delimiter
f.close()
delimiter
y1 = xsin(theta) + ycos(theta)
delimiter
self.person_name = person_name
delimiter
print(pattern.findall(document))
delimiter
timer_process.start()
delimiter
descr = PyArray_DescrFromType(typenum)
delimiter
LabeledPoint(fl[l - 1], fl[0:l - 1])
delimiter
self._classes[module, cls_name].from_dict(dct)
delimiter
findspark.init()
delimiter
scipy.stats.norm(100, 12).pdf(98)
delimiter
distance_vectors = [cosine_distance([pair[0]], [pair[1]]) for pair in combs]
delimiter
jinja2.get_jinja2(app=self.app)
delimiter
x[a.nonzero()] += a.data
delimiter
pool = tuple(iterable)
delimiter
self.vtkPolyData.SetPoints(self.vtkPoints)
delimiter
y = tf.nn.softmax(logits)
delimiter
serializer = self.get_pagination_serializer(page)
delimiter
logger = logging.getLogger(name)
delimiter
mySet.add(p1)
delimiter
temp.append(seq.pop())
delimiter
larray = []
delimiter
pyobj = json.loads(rjson[0])
delimiter
-build - essential
delimiter
mydict[mychar] += 1
delimiter
t = np.arange(0.0, 10000.0, 10.0)
delimiter
prvy = col[0].string.strip()
delimiter
self._age
delimiter
print(session2.query(Datum).all())
delimiter
self.do_thing_with_message(val)
delimiter
parser = argparse.ArgumentParser(description=description, usage=usage)
delimiter
address
delimiter
0, 1, 2
delimiter
religious_order = models.ForeignKey(ReligiousOrder, blank=True, null=True)
delimiter
nark
delimiter
cython
delimiter
pyinstaller
delimiter
ax = fig.add_subplot(1, 2, 2)
delimiter
cls.__items[item] = kls
delimiter
data = {}
delimiter
instance.update()
delimiter
last_dict[l[-1]] = value
delimiter
out = np.hstack([up, low]).ravel()
delimiter
Frame.__init__(self)
delimiter
W = np.power(omega, i * j) / sqrt(N)
delimiter
df = dftst.stack(0)
delimiter
all_matching = list(filter(matchCondition, lst))
delimiter
f1, f2
delimiter
id = row[0]
delimiter
start[r[0]].add(r[2])
delimiter
lft, rght = n.lft, n.rght
delimiter
print(df)
delimiter
l[1], l[i] = l[i], l[1]
delimiter
d.weekday()
delimiter
serialized = json.dumps(dict_obj)
delimiter
after_buf.pop(0)
delimiter
tree = parser.parse_string(diagram_definition)
delimiter
y = [random.gauss(4, 2) for _ in range(400)]
delimiter
item = get_max(item)
delimiter
df.head()
delimiter
list(reversed([1, 2]))
delimiter
list(chain.from_iterable(islice(v, x) if k else v for k, v in groups))
delimiter
ticklabs = cb.ax.get_yticklabels()
delimiter
self.host = host
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
print(key)
delimiter
self.layers = [NeuronLayer(self.n_neurons_to_hl, self.n_inputs)]
delimiter
listEven = list1[::2]
delimiter
line.set_data(x, y)
delimiter
phantom.exit()
delimiter
c.close()
delimiter
{{forloop.counter}}, {{item}}
delimiter
u[i][x, y] = 1
delimiter
print(non_ascii.sub(escape_unicode, line))
delimiter
df2 = df2.rename(columns=d)
delimiter
smtpserver.ehlo
delimiter
arr2 == arr[0]
delimiter
edgex1 = region1 ^ np.roll(nregion1, shift=shift, axis=0)
delimiter
df1
delimiter
my_item = MyItem()
delimiter
uuid = uuid[:5]
delimiter
text
delimiter
res.sort()
delimiter
a[2, 2] = -999
delimiter
filtered = cv2.filter2D(skel, src_depth, kernel)
delimiter
it = itertools.groupby(text, lambda w: w.isspace())
delimiter
input.iloc[i].X
delimiter
div = int((div - module) / 26)
delimiter
i += len(node[0])
delimiter
form = FooAdminForm
delimiter
internet_set_option(0, self.INTERNET_OPTION_REFRESH, 0, 0)
delimiter
s = StringIO()
delimiter
time.sleep(0.01)
delimiter
axdendro.set_xticks([])
delimiter
D = yaml.load(f)
delimiter
result += numbers[i:]
delimiter
print(RegisteredNumber.numbers)
delimiter
mech = mechanize.Browser()
delimiter
assert np.allclose(using_unique(), using_digitize())
delimiter
C = np.zeros((dimC, dimC, dimC))
delimiter
x = np.ones(10, dtype=bool)
delimiter
x = random.random()
delimiter
phi = np.linspace(0, np.pi, 20)
delimiter
x + y
delimiter
finalizer()
delimiter
keywords = set(extract_keyword(line) for line in f)
delimiter
e.errno == errno.EPERM
delimiter
dataset[0].intersection(*dataset[1:])
delimiter
elem = etree.XML(xml_str, parser=parser)
delimiter
false
delimiter
Fail if not m else (m.group(1), text[m.end():])
delimiter
print(row)
delimiter
HttpResponseRedirect(url)
delimiter
self.printfiles(result)
delimiter
tree.write(xmlfile, xml_declaration=True)
delimiter
maintype = mail.get_content_maintype()
delimiter
bar = np.array([4, 5, 6])
delimiter
print(Child.mro())
delimiter
file_like.seek(0)
delimiter
delta = n / 10
delimiter
heapq.heappush(self._data, (self.key(item), item))
delimiter
self.count -= 1
delimiter
registry.add_field(cls, self)
delimiter
1401828155.0
delimiter
self.treeAction.triggered.connect(self.printTreeItem)
delimiter
x, y, z = gradients.T
delimiter
self.cls = my_class
delimiter
data[0:10]
delimiter
prime = False
delimiter
bins = list(range(15, 25))
delimiter
func(self, x + 1, func)
delimiter
source_bytes = base64.b64encode(source_image.read())
delimiter
z = numpy.array([0, 0.5, 1, 0])
delimiter
print(name, value)
delimiter
hash(tuple(frozenset(sorted(new_o.items()))))
delimiter
le = preprocessing.LabelEncoder()
delimiter
fb_ = np.zeros_like(zeta)
delimiter
s.add(5)
delimiter
info = logging.getLogger(__name__).info
delimiter
lastelt
delimiter
newfunc
delimiter
sorted(list_date, key=foo)[-1]
delimiter
fig = plt.figure()
delimiter
li = [(filename, i, number_of_chunks) for i in range(number_of_chunks)]
delimiter
set(b1).intersection(b2)
delimiter
xi = np.linspace(xmin, xmax, nx)
delimiter
print(i)
delimiter
h = lambda x: x.apply(g, axis=1).mean(axis=0)
delimiter
help(re)
delimiter
entity_manager.add(r)
delimiter
item in self.g
delimiter
test_logger.addHandler(handler)
delimiter
pl.imshow(l)
delimiter
print(type(savedtweets_datetime))
delimiter
True
delimiter
s
delimiter
date(y, m, d).toordinal() - date(2005, 1, 1).toordinal()
delimiter
h = np.random.uniform(-150, 150)
delimiter
x, y = meshgrid(x, y)
delimiter
_shared_tasks.add(constructor)
delimiter
cursor = connection.cursor()
delimiter
dis.dis(bar)
delimiter
app.exec_()
delimiter
plt.show()
delimiter
ssh = paramiko.SSHClient()
delimiter
pil_im.show()
delimiter
application.listen(5000)
delimiter
self.data[key[0]:key[1] + 1]
delimiter
out2[0][0]
delimiter
w = df.strings.str.split()
delimiter
self.pa = pyaudio.PyAudio()
delimiter
print((x, y))
delimiter
z = np.array([2, 5])
delimiter
self.fd = f.fileno()
delimiter
print(df)
delimiter
raise TypeError(msg)
delimiter
[9, 4, 8],
delimiter
sys.exit(app.exec_())
delimiter
basegraph = tf.Graph()
delimiter
RNumY = 0.5 + 10 * random()
delimiter
console_handler.setFormatter(formatter)
delimiter
browser = Browser()
delimiter
counter = np.count_nonzero(mask)
delimiter
user_input.append(entered_text)
delimiter
list = s.split()
delimiter
chunk = proc.stdout.read(1)
delimiter
a = cplxarr.copy()
delimiter
b = lambda : a + 2
delimiter
fp = A[-np.isnan(A)]
delimiter
setB = frozenset([frozenset(element) for element in listB])
delimiter
is_binary = True
delimiter
m = np.ma.array(a, mask=~np.isfinite(a) | (a == -999))
delimiter
l = zip(*transposed_l)
delimiter
values = set(lst)
delimiter
p.register(f, select.POLLPRI | select.POLLERR)
delimiter
self.file.read(outputfilename)
delimiter
x, y = m(lons, lats)
delimiter
iend = i - 1
delimiter
svg = rsvg.Handle(data=data)
delimiter
c = lambda : (a, b)
delimiter
freqs = Counter(words.split())
delimiter
sleep(0.025)
delimiter
s[i] = y
delimiter
count = 0
delimiter
parser = etree.XMLParser(remove_blank_text=True)
delimiter
[0.004 - 2e-08 - 0.75]
delimiter
self.write_csv_test_data(temp_csv)
delimiter
self.thread = threading.Thread(target=self.run, args=())
delimiter
channel = 0
delimiter
print(dict(zip(def_args, defaults)))
delimiter
match = a[:-n].copy()
delimiter
1, 1
delimiter
isclose(1, 1.00000000001)
delimiter
np.round(df.loc[:, (msk)], 2)
delimiter
np.array(inds)
delimiter
ax2.set_xlim(bin_edges.min(), bin_edges.max())
delimiter
p._x = 9
delimiter
print(file_name)
delimiter
DataFrame(entry_frame)
delimiter
settings.production.py
delimiter
node.setPos(QPointF(path.elementAt(i)))
delimiter
itertools.islice(iterable, stop)
delimiter
raise KeyError(k)
delimiter
aw1.redraw_plot()
delimiter
arr[0]
delimiter
raise ValueError
delimiter
print(basepairs)
delimiter
fileobj.seek(0)
delimiter
obj.address_2_html()
delimiter
matching = np.ones((len(values[0]),), dtype=bool)
delimiter
myfunc()
delimiter
[x for x in p.get_connections() if x.status == psutil.CONN_LISTEN]
delimiter
FirstName = db.Column(db.String(40))
delimiter
thetas = np.linspace(0, 2 * np.pi, 20)
delimiter
sess
delimiter
Py_DECREF(temp_p2)
delimiter
drawMatches(img1, kp1, img2, kp2, matches[:10])
delimiter
cnp.import_array()
delimiter
X, Y = np.meshgrid(x, y)
delimiter
align_yaxis(ax, np.mean(grp2), ax2, 0)
delimiter
my_stuff = []
delimiter
popt1, pcov1 = curve_fit(func1, x, y)
delimiter
v1, col1 = d1[0], d1[1]
delimiter
Unknown
delimiter
sub_dict
delimiter
line.set_color(colors[klass])
delimiter
isitIn(char, b[len(b) // 2:])
delimiter
df_crawls
delimiter
abcde.co.uk
delimiter
self.X < other.X and self.Y < other.Y
delimiter
Simplify[A.x]
delimiter
a = 1
delimiter
x = np.arange(100, dtype=np.float64)
delimiter
x = list(range(0, 100))
delimiter
ret, frame = cap.read()
delimiter
root_logger.addHandler(handler)
delimiter
ds[:] = x
delimiter
path.pop()
delimiter
menubar = tk.Menu(self)
delimiter
connection.daemon = True
delimiter
t.setModel(m)
delimiter
f = ftplib.FTP()
delimiter
A()
delimiter
times.map(lambda x: x + MonthEnd())
delimiter
recursive_iter_map(f, e)
delimiter
a = map(int, [(x ** 0.5) for x in range(20)])
delimiter
params = {}
delimiter
l2[0][0] = 1
delimiter
queue.put(ip)
delimiter
start = time.time()
delimiter
my_func0 = my_func_factory(lambda x: 2 * x, lambda x: 2 * x)
delimiter
mutex.acquire()
delimiter
old = termios.tcgetattr(fd)
delimiter
s.close()
delimiter
frame.f_locals.update(self.namespaces.pop())
delimiter
self.Show()
delimiter
ret = df.iloc[start + 1:end]
delimiter
print(rcv)
delimiter
bin(4)
delimiter
input_filename = sys.argv[1]
delimiter
output, _ = diskpart_handle.communicate()
delimiter
m = 2j * math.pi
delimiter
vec_dict = {}
delimiter
user.user_permissions.add(custom_permission)
delimiter
l = multiprocessing.Lock()
delimiter
names_list = [y for y in (x.strip() for x in names.splitlines()) if y]
delimiter
LastName = db.Column(db.String(40))
delimiter
_fix_exception_context(new_exc_details[1], exc_details[1])
delimiter
c = zip(users[:n // 2], reversed(users[n // 2:]))
delimiter
indices = list(es.indices.get_aliases().keys())
delimiter
[1, 9, 9],
delimiter
writer = csv.writer(s)
delimiter
process_list.append(p)
delimiter
urlpatterns += api.urls
delimiter
signal(SIGPIPE, SIG_IGN)
delimiter
x = np.arange(100)
delimiter
test_suite.addTest(file_tests_main.suite())
delimiter
value = process_value(int(raw_value))
delimiter
cur = conn.cursor()
delimiter
xslt_doc = ET.parse(io.BytesIO(xslt))
delimiter
ax = fig.add_subplot(111)
delimiter
self
delimiter
vend = vspell[2]
delimiter
batch = service.new_batch_http_request(callback=delete_file)
delimiter
_ctypes.dlclose(lib1._handle)
delimiter
result.append(this.d[c])
delimiter
print_keyword_args(**kwargs)
delimiter
parse_code_1(*split_secret_code(secret_code_1))
delimiter
items_formset = inlineformset_factory(Parent, Item, form=ItemForm, extra=1)
delimiter
m_from = ndb.KeyProperty(kind=UserModel)
delimiter
st.norm.interval(0.68, loc=np.mean(a), scale=st.sem(a))
delimiter
dtypedict.update({i: sqlalchemy.types.NVARCHAR(length=255)})
delimiter
uniq = uniq.view(data.dtype).reshape(-1, ncols)
delimiter
Queue.put(self, item, block, timeout)
delimiter
r.status_code
delimiter
len(s) + 2 == len(repr(s))
delimiter
week = int(yourString[-2:])
delimiter
set_interval(func, sec)
delimiter
self.counter = 0
delimiter
fig1.show()
delimiter
colormap = window.get_screen().get_rgba_colormap()
delimiter
other_field = form._fields.get(self.other_field_name)
delimiter
module_filename = inspect.getfile(module)
delimiter
self.bitmap_1.SetBitmap(wxbmp)
delimiter
False
delimiter
plot1 = plt.plot(x, mlab.normpdf(x, m1, std1))
delimiter
csc_matrix = temp_sparse.csc_matrix(temp_matrix)
delimiter
res_ols = sm.OLS(y, statsmodels.tools.add_constant(X)).fit()
delimiter
True
delimiter
a.replace(False, np.nan).idxmax(1)
delimiter
raise NotImplementedError
delimiter
a, b, c = [fgen() for global_n in L]
delimiter
print(scores.mean())
delimiter
len(pytz.common_timezones)
delimiter
AppHelper.runEventLoop()
delimiter
simplex = np.asarray(simplex)
delimiter
post.tags.remove(sometag)
delimiter
l_idx = list(range(len(l)))
delimiter
self.value = value
delimiter
print(np.finfo(np.double).precision)
delimiter
abs(a) % abs(b) * sign
delimiter
self.bar = bar
delimiter
convert = pound * 56 / 100
delimiter
replace(stack, [text])[0]
delimiter
settings.Delete()
delimiter
findContours(bin.clone(), contours, CV_RETR_LIST, CV_CHAIN_APPROX_NONE)
delimiter
arr[i] += 1
delimiter
prefixes = my_groupby(iter(C.items()), key=lambda k_v: k_v[0][:-1])
delimiter
vc = df.a.value_counts()
delimiter
key += str(self._unique)
delimiter
[self.x - 1, self.y + 1], [self.x + 1, self.y + 1]
delimiter
all_s = (x for x in st if x in word)
delimiter
output
delimiter
plot(s)
delimiter
key = list(mem.keys())[0]
delimiter
new_module.__file__ = filename
delimiter
print(df)
delimiter
fp_plain = hashlib.md5(key).hexdigest()
delimiter
a[Idx]
delimiter
base_pic.save(file=result_pic)
delimiter
f2(A())
delimiter
ownUid = [p.uid for p in psutil.process_iter() if p.pid == ownPid][0]
delimiter
page = infile.read()
delimiter
b = a.swapaxes(axis, -1)
delimiter
i = 0
delimiter
self.value + other
delimiter
(residuals ** 2).sum()
delimiter
ff = ff.reshape((5, 4, 1, 1))
delimiter
assert my_round(11.12) == 11.0
delimiter
i = bisect.bisect_left(a, x)
delimiter
k2 = k.copy(k.bucket.name, k.name, k.metadata, preserve_acl=True)
delimiter
process.shutdown()
delimiter
unittest.makeSuite(TestSomething)
delimiter
ack_message()
delimiter
split[-1][-2].append(r)
delimiter
self._age
delimiter
help(me)
delimiter
connection.close()
delimiter
searchbox.send_keys(searchkey)
delimiter
ranges.append(range(group[0], group[-1]))
delimiter
pairs = reversed(list(my_dict.items()))
delimiter
sum((x - y) ** 2 for x, y in zip(singlePoint, pointFromArray)) ** 0.5
delimiter
nk1
delimiter
madata = np.ma.MaskedArray(data1, ~masks1)
delimiter
mydir([])
delimiter
lol[1][0]
delimiter
cv.Copy(image, newCanvas)
delimiter
FilteredObject(obj_id[9:])
delimiter
num = ceil(num * 100) / 100.0
delimiter
fibs.append(fibs[-1] + fibs[-2])
delimiter
a, b = fa(x, y)
delimiter
parent = getattr(form, self.parent)
delimiter
save.close()
delimiter
e = sys.exc_info()[1]
delimiter
iter(self._od)
delimiter
template_name = fn()
delimiter
arr.shape
delimiter
velcro.left(140)
delimiter
d[c] += 1
delimiter
l = list(a)
delimiter
w.focus_set()
delimiter
time.time() - start
delimiter
self.cache[regex_string]
delimiter
B = NP.array(B, dtype=bool)
delimiter
Returns
delimiter
c = np.linspace(0, 1, 1000)
delimiter
results = {}
delimiter
count += 1
delimiter
doSomething(line)
delimiter
wid = termf.winfo_id()
delimiter
response = http.HttpResponse(response_html)
delimiter
statvfs(path)
delimiter
dict_time[key] = value
delimiter
True
delimiter
result = a.flat[i[d > TOL]]
delimiter
self.console.see(tk.END)
delimiter
s.setDTR(False)
delimiter
res = []
delimiter
X, Y, Z = np.array([]), np.array([]), np.array([])
delimiter
os.removedirs(dirname)
delimiter
notes = models.TextField(blank=True)
delimiter
x, y, z = r * np.cos(th), r * np.sin(th), angle * r * np.sin(th)
delimiter
self.item.product_name
delimiter
response = requests.post(full_url, json.dumps(data))
delimiter
max(die().roll_until(6) for i in range(6))
delimiter
id_seq = curs.fetchone()[0]
delimiter
encryptFile(fileName)
delimiter
p = ConfigParser.ConfigParser()
delimiter
self.end_headers()
delimiter
x = x + 10
delimiter
sys.stdout.writelines(diff)
delimiter
p2 = map(lambda x: tuple(chain.from_iterable(x)), product(*lists))
delimiter
abort(400)
delimiter
data = list(s)
delimiter
item = row[i]
delimiter
pool = multiprocess.Pool(process_count)
delimiter
token_response = requests.get(url=cls.token_url, params=cls.params)
delimiter
pow = lambda x, y: _pow(x, y)
delimiter
OPTION_A = 1
delimiter
D = np.sqrt(a + a[np.newaxis].T - 2 * np.dot(X, X.T))
delimiter
print(sum_shells(a))
delimiter
x ** 2
delimiter
circle(im, Point(center.x, center.y), radius, Scalar(0, 255, 255), 2)
delimiter
frags.append(generate_sample(grammar, prod.rhs()))
delimiter
gray = ImageOps.grayscale(src)
delimiter
studentform = StudentForm()
delimiter
fig, ax = plt.subplots()
delimiter
et.tostring(t)
delimiter
do_foo_stuff()
delimiter
final_list = []
delimiter
foo = models.ForeignKey(Foo)
delimiter
mask = 255 - mask
delimiter
col = int(m.group(2))
delimiter
key, value = pickle.load(f), pickle.load(f)
delimiter
self.box.current(0)
delimiter
sieve = [True] * (n // 2)
delimiter
stdscr.keypad(0)
delimiter
status = models.IntegerField(choices=STATUS_CHOICES, default=REGULAR)
delimiter
print(obj)
delimiter
print(sorted(x for x in a if x < limit))
delimiter
bitfield(255)
delimiter
i += 1
delimiter
plt.close()
delimiter
hilbertC(256, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
delimiter
df
delimiter
df1_a, df1_f, df2_a, df2_f
delimiter
print(p)
delimiter
py.offline.plot(fig)
delimiter
total += multinomial(n, list(Counter(a).values()))
delimiter
y_2_val = sample_transform(x_2, y_2)
delimiter
unique_kpts.append(i)
delimiter
sess = requests.Session()
delimiter
z_scattered_evil = fun_evil(x_scattered, y_scattered)
delimiter
last_day_of_month = calendar.monthrange(year, month)[1]
delimiter
sqlalchemy.orm.session.make_transient(a)
delimiter
print(b)
delimiter
functools.update_wrapper(self, target)
delimiter
count += int(s[0].isalpha())
delimiter
print(i)
delimiter
colors = [(0.0, 0.0, 0.0), (1.0, 1.0, 1.0)]
delimiter
map(lambda p: preprocess(data, p), funcs[procid])
delimiter
self.buf.seek(oldpos)
delimiter
app = Flask(__name__)
delimiter
common_words = set(x[0] for x in flatten(h)) & set(x[0] for x in flatten(p1))
delimiter
a = list(perm_unique([1, 1, 2]))
delimiter
False
delimiter
data.pop()
delimiter
tokens = set(s.split())
delimiter
sess.run(init)
delimiter
fresult.col1 = fresult.col1.replace(np.inf, 100)
delimiter
typ = f.read(1)
delimiter
(sp.j0(r) + sp.jn(2, r)) ** 2
delimiter
luts += list(range(256))
delimiter
plt.imshow(first_array)
delimiter
sensor.geolocate()
delimiter
x = x.strip()
delimiter
max_col = int(5000000.0)
delimiter
content = request.get_json(silent=True)
delimiter
new = list(text)
delimiter
amass.delay([], tasks)
delimiter
YAL001C = metabolism
delimiter
t = lxml.html.parse(url)
delimiter
buffer = BytesIO(request.urlopen(url).read())
delimiter
angle = math.atan2(b, a)
delimiter
w = np.fft.fftfreq(N) * N * dw
delimiter
upload_handlers = request.upload_handlers
delimiter
ax2 = plt.subplot2grid((m, n), (row_2, col_2), rowspan=height)
delimiter
format_u = format_.decode(locale.getlocale()[1])
delimiter
app = pywinauto.application.Application()
delimiter
files = sorted(glob.iglob(files_path), key=os.path.getctime, reverse=True)
delimiter
print(count)
delimiter
A.join(B)
delimiter
c = wrapper.__code__
delimiter
f.seek(0)
delimiter
filename = inspect.getframeinfo(inspect.currentframe()).filename
delimiter
1
delimiter
s = list(s)
delimiter
out = sys.stdout
delimiter
print(json.loads(content))
delimiter
main()
delimiter
assert first([f, g, h]) == 1
delimiter
price_diff = models.DecimalField(max_digits=10, decimal_places=2, default=0)
delimiter
result = HTMLParser.HTMLParser().unescape(urllib.parse.unquote(decoded))
delimiter
print(a, b, c)
delimiter
r = Tk()
delimiter
np.get_printoptions()
delimiter
count += 1
delimiter
myprocess = psutil.Process(process_id)
delimiter
DictTable(d)
delimiter
p1 = np.tensordot(v, a, axes=([0], [0]))
delimiter
extend_array(data, 10)
delimiter
self.__dict__[key] = value
delimiter
self.on_change()
delimiter
tf.nn.softmax(incoming)
delimiter
c = C()
delimiter
choices = [population[i] for i in choice_indices]
delimiter
main()
delimiter
d = np.array([5.0, 1])
delimiter
cell_value = cell.value
delimiter
print(True)
delimiter
i = np.random.uniform(1.5, 12.4)
delimiter
seed(_SEED)
delimiter
last_name = models.CharField(max_length=50)
delimiter
background.paste(foreground, (0, 0), foreground)
delimiter
run(server=server)
delimiter
title = db.StringProperty()
delimiter
ax.scatter(xcorners, ycorners, c=zcorners, s=200)
delimiter
x ** 2 + y * 2 + z
delimiter
self.crawled_urls = set()
delimiter
df
delimiter
file.seek(index)
delimiter
func(**d)
delimiter
f(depth + 1)
delimiter
adj = numpy.zeros(shape=(n, n))
delimiter
twitter = Twython()
delimiter
ret = ifft(fftx * np.conjugate(fftx), axis=1)
delimiter
logger = logging.getLogger(__name__)
delimiter
TextField(question.text)
delimiter
n += 1
delimiter
colorsys.rgb_to_hsv(r, g, b)
delimiter
y = Counter([1, 1, 2, 5, 6])
delimiter
Server2.__base__ += PluginA,
delimiter
color = np.sqrt((points ** 2).sum(axis=1)) / np.sqrt(2.0)
delimiter
candidates.append((lead_obs, other_obs))
delimiter
d[x].append(y)
delimiter
buf.readline()
delimiter
scatter(X, Y)
delimiter
logger.addHandler(handler)
delimiter
deletemodules[modname]
delimiter
order = {v: i for i, v in enumerate(a)}
delimiter
lib = ctypes.cdll.LoadLibrary(path)
delimiter
f2.close()
delimiter
print(result.get())
delimiter
a.copyApply(A.bar)
delimiter
memoryview(s[0:]) > memoryview(s[1:])
delimiter
data.value.diff()
delimiter
foo()
delimiter
a, b
delimiter
hxs = HtmlXPathSelector(response)
delimiter
my_sat.put()
delimiter
req = urllib.request.Request(PP_URL, params)
delimiter
self.__next__()
delimiter
print(new_list2)
delimiter
the_date += timedelta(milliseconds=milliseconds)
delimiter
shpinfo = []
delimiter
print(v)
delimiter
ret1 = tn.read_eager()
delimiter
qa
delimiter
self.user = UserFactory.create()
delimiter
main()
delimiter
last_indiv = first_line[0]
delimiter
axes.set_xlim(-0.5, 9.5)
delimiter
results = getSQL()
delimiter
num_of_bits = 8
delimiter
files = WidgetFile.objects.filter(widget=self)
delimiter
e.filename, e.lineno, e.offset, e.text
delimiter
print(df.irow(i))
delimiter
b = random.sample(range(100000), 10000)
delimiter
graph.add_edge(edge)
delimiter
value() if callable(value) else value
delimiter
pool.map(preprocess, zip(data, preds))
delimiter
output.write(outputStream)
delimiter
p.join()
delimiter
l1.extend(l2)
delimiter
os.open(outfile, os.O_RDWR | os.O_CREAT)
delimiter
writer.commit()
delimiter
cols = list(df)
delimiter
output.write(outputStream)
delimiter
hello
delimiter
time.sleep(2)
delimiter
test_treebank_tagged_words = cfd(chain(*test_set))
delimiter
dep_field[0].rel.field_name
delimiter
print(b is a)
delimiter
result = re.search(your_stuff_here)
delimiter
df
delimiter
assert os.path.isdir(some_dir)
delimiter
deletea.a
delimiter
n_col = A.shape[1]
delimiter
isf = float(iss)
delimiter
print(find_prev_next(list(range(2)), 10))
delimiter
i = j + 1
delimiter
driver = webdriver.PhantomJS()
delimiter
image.composite(background, 0, 0, PythonMagick.CompositeOperator.SrcOverDst)
delimiter
img = utils.ImageReader(path)
delimiter
print(json.loads(line))
delimiter
print(str(e))
delimiter
a + weight * (b - a)
delimiter
os.chown(path, int(uid), int(gid))
delimiter
unqs = data[np.sort(ind)]
delimiter
value = value.strip()
delimiter
b = 2
delimiter
threads = [p.apply_async(f, [i]) for i in range(20)]
delimiter
country = models.CharField(max_length=2, blank=True)
delimiter
test[np.in1d(test, states)] = 1
delimiter
qry = session.query(Bar, Bar.foo_count).filter(Bar.foo_count > 0)
delimiter
1 / 2
delimiter
np.finfo(float).eps
delimiter
numpy.asarray(result)
delimiter
pygame.display.list_modes()
delimiter
fig = plt.figure()
delimiter
v = df.values
delimiter
PyObject * py_callback
delimiter
rf.set_params(**g)
delimiter
a * b
delimiter
[0, 0, 1, 1, 0, 0],
delimiter
new_data2[~mask] = 0
delimiter
globalcopy = globals().copy()
delimiter
jsonify(success=0, error_msg=str(e))
delimiter
main()
delimiter
result = []
delimiter
A2 = np.random.randint(-4, 10, (6, 7))
delimiter
print(df)
delimiter
df.shape
delimiter
isinstance(v, dict)
delimiter
content.append(data)
delimiter
SHEETS.spreadsheets().batchUpdate(spreadsheetId=SHEET_ID, body=DATA).execute()
delimiter
wnl.lemmatize(greater)
delimiter
pd.get_dummies(dummy_col, prefix=dummy_col.name)
delimiter
print(polygon)
delimiter
result.append([base_start, base_close])
delimiter
print(your_sample_text)
delimiter
print(about[0].title)
delimiter
dec_idx = np.random.choice(8, N, replace=False)
delimiter
linesB = f.readlines()
delimiter
jinja2.__version__
delimiter
f(i + 1)
delimiter
c += dict(flatten(d))
delimiter
cell = gtk.CellRendererText()
delimiter
jsonify(dictToReturn)
delimiter
events = Event.objects.filter(active=True)
delimiter
f.__closure__
delimiter
last_index = tf.shape(output)[1] - 1
delimiter
root = Tk()
delimiter
len(l1)
delimiter
luhn_residue(getImei(14))
delimiter
app = TestApp(self.application)
delimiter
True
delimiter
cls
delimiter
print(match[0])
delimiter
fig = pylab.figure()
delimiter
print(list(j))
delimiter
list.__delitem__(self, key)
delimiter
df.index = [df.index, df.Name.notnull().cumsum() - 1]
delimiter
(9, 4) - 0.051971584115
delimiter
assert time.clock() == 2
delimiter
window = tk.Toplevel(self)
delimiter
df = mylib.load_data()
delimiter
a, b = x
delimiter
__new__ = cls.__new__
delimiter
x = np.linspace(0, 100, 100)
delimiter
ms, mb = (dict(a), dict(b)) if len(a) < len(b) else (dict(b), dict(a))
delimiter
list[1] = [2.5]
delimiter
ax.margins(0.04)
delimiter
fill = numpy.zeros((cols - 1, cols), dtype=a.dtype)
delimiter
XV = np.random.uniform(low=-4, high=4, size=n)
delimiter
result = list(map(run, list(range(100)), list(range(100)), list(range(100))))
delimiter
df = sqlContext.createDataFrame(input_iso.map(extract_iso), schema)
delimiter
input(prompt)
delimiter
cls
delimiter
value = model.get_value(tree_iter, 0)
delimiter
im1 = ax.imshow(im)
delimiter
oldsysstdout = sys.stdout
delimiter
self.treeview.expand_to_path(row.path)
delimiter
out.getvalue()
delimiter
http_server.listen(8888)
delimiter
a = stream.read(chunk)
delimiter
remaining_stems = stem_sets[i:]
delimiter
self.setUrl(request.url())
delimiter
main.quit()
delimiter
list.append(ord(g2))
delimiter
self._list.__len__()
delimiter
result = json.JSONEncoder.encode(self, o)
delimiter
list2 = [(x * 0.5) for x in range(2 * x1, 2 * x2 + 1)]
delimiter
print(ans)
delimiter
m = multiprocessing.Manager()
delimiter
data = self._data
delimiter
date = qdate.toPyDateTime()
delimiter
cr.set_source_surface(ImageSurface.create_from_png(buffer))
delimiter
theta = np.linspace(0, 2 * np.pi, 51)
delimiter
deletestart_dict[start]
delimiter
df
delimiter
Y = numpy.resize(X, (4096, 9, 4))
delimiter
print(filled[:, :, (5)].astype(np.int))
delimiter
y.eval()
delimiter
result
delimiter
model.appendRow(item)
delimiter
python
delimiter
console.write(e)
delimiter
C = csr_matrix((5, 2), dtype=int)
delimiter
dis.dis(foo)
delimiter
memorizedPaths[item] = item
delimiter
known_words[len(word)].append(word)
delimiter
previous = predecessor_map[previous]
delimiter
tb.activate()
delimiter
karma_delta = models.SmallIntegerField()
delimiter
max_per_dir = int(sys.argv[2])
delimiter
app = Flask(__name__)
delimiter
intersection = set_ranlet.intersection(word)
delimiter
myList = []
delimiter
print(os.read(fd, 22))
delimiter
np.allclose(C1, C2)
delimiter
print(abacus)
delimiter
others = np.vstack((a, c, d, e)).T
delimiter
output.close()
delimiter
testDict = {}
delimiter
xs = [np.array([i, i, i + 1, i + 1]) for i in range(N)]
delimiter
d1 = D.mean(axis=1)
delimiter
self.composite_actuator.move(100, -100)
delimiter
stack.append((y, d + 1))
delimiter
PAGE_WIDTH = defaultPageSize[0]
delimiter
a[:, (1)] = np.max(points, axis=0)
delimiter
fig = plt.figure()
delimiter
mask = np.ma.less_equal(diff, 0)
delimiter
colnames = [desc[0] for desc in curs.description]
delimiter
video = models.FileField(upload_to=vid_get_file_path)
delimiter
u_idx_y = np.argsort(y)
delimiter
queue.put([hdd, line.split()[9]])
delimiter
f(head, foldr(f, acc, tail))
delimiter
os.unlink(fifo_path)
delimiter
b = int(b) if int(b) % 2 == 0 else int(b) + 1
delimiter
id = db.IntegerProperty()
delimiter
print(x)
delimiter
y
delimiter
numpy.vectorize(test.__contains__)(data)
delimiter
df
delimiter
data_for_browser.put()
delimiter
do_stuff(data)
delimiter
pid = os.getpid()
delimiter
start_response(status, headers, exc_info)
delimiter
loop.run_forever()
delimiter
print(type(clause))
delimiter
widgets.append(forms.TextInput(attrs=attrs))
delimiter
self.model.stop_training = True
delimiter
end = time.time()
delimiter
element
delimiter
col_ind = [i for ids in list(d.values()) for i in ids]
delimiter
columns = len(my_dataframe.columns)
delimiter
x_vals = np.arange(-20, 21, 1)
delimiter
print(df1)
delimiter
path = os.path.join(dirpath, file)
delimiter
self.get_sum_moves_rec(i, j, self.a[i][j], [(i, j)], ans)
delimiter
POINTS = 1980
delimiter
x = []
delimiter
d[index] = 0
delimiter
ln2, = ax.plot(x, 4 - y, lw=10)
delimiter
fp = self.__getid(request.url)
delimiter
False
delimiter
numpy.save(file=f, arr=my_array)
delimiter
StreamingHttpResponse(stream_response_generator())
delimiter
show()
delimiter
height * np.exp(-(x - center) ** 2 / (2 * width ** 2)) + offset
delimiter
t.start()
delimiter
print(id(S1))
delimiter
with_divisible(7, 1, 21, lambda x: x)
delimiter
auth_handler = urllib.request.HTTPBasicAuthHandler()
delimiter
hello = messages.StringField(1, required=True)
delimiter
q = int(s, 0)
delimiter
callback_func(channel, method, properties, body)
delimiter
threads = []
delimiter
print(a * b * c)
delimiter
zipinmemory = cStringIO.StringIO(remotezip.read())
delimiter
response
delimiter
print(zlib.compress(a))
delimiter
c = tf.matmul(a, b)
delimiter
df
delimiter
d = SortedDict({(1): 5, (2): 5, (4): 5})
delimiter
num = num[0].rstrip()
delimiter
char = cv.WaitKey(99)
delimiter
my_array = np.random.randint(1, 10, (4, 5))
delimiter
opener = urllib.request.build_opener(proxy)
delimiter
set() in subs
delimiter
counts[value[1]] += 1
delimiter
wsgiref.handlers.CGIHandler().run(app)
delimiter
df
delimiter
subplot(2, 1, 1)
delimiter
eq2 = b * a ** 2 + d + c
delimiter
fin.close()
delimiter
True
delimiter
results = connection.info()
delimiter
execute(background_run, your_command)
delimiter
inner_sum += dk * f_big_nb(A, k, 1e-05, 1e-05)
delimiter
raise argparse.ArgumentTypeError(msg)
delimiter
file.readline(), new_position
delimiter
res
delimiter
mungeddata
delimiter
obj.lock()
delimiter
s.close()
delimiter
plt.grid(True)
delimiter
zen = np.arccos(X[:, (-1)] / rad)
delimiter
print(Contacts.all_contacts)
delimiter
ax = plt.gca()
delimiter
endDate = startDate.replace(startDate.year + 1)
delimiter
visited_nodes = set()
delimiter
line = scan_process.stdout.readline()
delimiter
ax1.bar(list(range(l)), Two)
delimiter
n
delimiter
print(character)
delimiter
colorjh = jmag - hmag
delimiter
assert isinstance(res, float)
delimiter
f, ax = plt.subplots(1, 1, figsize=(n * size, size))
delimiter
sum
delimiter
plt.contourf(x, y, Z)
delimiter
picklable = []
delimiter
self.settings = QtCore.QSettings()
delimiter
settings.INSTALLED_APPS += new_app_name,
delimiter
loop_thread.start()
delimiter
sys.path
delimiter
output.write(outputStream)
delimiter
self.__port
delimiter
print(train_likes_df.time.dt.time.head())
delimiter
self.bar = 1
delimiter
d.popitem()
delimiter
np.corrcoef(data)
delimiter
last = next(reversed(my_iter))
delimiter
output.addPage(page)
delimiter
global_method_decorator_list.append(my_callable)
delimiter
ax = plt.subplot(1, 1, 1)
delimiter
sample = distribution.rvs(size=10000)
delimiter
seen = set()
delimiter
wrapped_func
delimiter
person.py
delimiter
window = numpy.ones(int(window_size)) / float(window_size)
delimiter
foo().debug_info()
delimiter
2 * x
delimiter
mydictionary[Col1].append(row[0])
delimiter
s[:-len(suf)]
delimiter
cls
delimiter
makes_valid_word = False
delimiter
all_the_things_i_want_to_do = [triple, square]
delimiter
bool(0)
delimiter
ladd = []
delimiter
seq_num = RNG.randint(0, len(self.nodes) - 1)
delimiter
a = csr_matrix(a)
delimiter
chunk = f.read(chunksize)
delimiter
b[b == 0] = -1
delimiter
(tgtdate - startdate).days // 7 + 1
delimiter
pylab.pcolor(xx, yy, zz)
delimiter
maxi = np.amax(max_array, axis=0)
delimiter
res.index = pd.to_datetime(res.date)
delimiter
print(clean_chunked)
delimiter
print ()
delimiter
print(self.a)
delimiter
fields = map(lambda x: x[0], cursor.description)
delimiter
self.count = 0
delimiter
np.maximum.accumulate(without_reset * reset_at)
delimiter
plt.annotate(labels[i], xy)
delimiter
ax.plot(np.arange(10) * (i + 1))
delimiter
b = B()
delimiter
QuerySet()
delimiter
client.invoke(args, kwargs)
delimiter
self.len += 1
delimiter
print(repr(x))
delimiter
find_all_paths_aux(adjlist, start, end, [])
delimiter
output = StringIO.StringIO()
delimiter
print(event.Position)
delimiter
meta.Session.add(userChoices)
delimiter
tasks.put(Task(i))
delimiter
complex_out.append(comp_row)
delimiter
print(a + b)
delimiter
S = sparse(i, j, s, m, n, m * n)
delimiter
users = [p.user for p in people]
delimiter
http_server = tornado.httpserver.HTTPServer(application)
delimiter
self._timer = Timer(self.interval, self._run)
delimiter
sp_mat - sp_mat.multiply(zero_mat)
delimiter
print(repr(ba))
delimiter
converged = True
delimiter
sps_a.nnz
delimiter
screen = wnck.screen_get_default()
delimiter
app = web.application(urls, globals())
delimiter
libc.printf = _printf
delimiter
csvdata.update(textdata)
delimiter
config.make_wsgi_app()
delimiter
signal.disconnect(self._checkSignal)
delimiter
cols.append(i)
delimiter
cnt1
delimiter
func
delimiter
cmd = cmd.split()
delimiter
a, b, c = 10.0, 4.0, 6.0
delimiter
result[len(result) - 1:0:-1] -= result[len(result) - 2::-1]
delimiter
print(myA)
delimiter
DEBUG = True
delimiter
entnum = int(name)
delimiter
ax.yaxis_date()
delimiter
i = np.argsort(your_permutation)
delimiter
table = QtGui.QTableWidget(1, 1)
delimiter
l
delimiter
mySocket = socket(AF_INET, SOCK_DGRAM)
delimiter
upperlist.append(l)
delimiter
-1
delimiter
t = tuple(range(2, 129, 2))
delimiter
y_sorted = y[order]
delimiter
sizeof(pycvex_Stitcher_t),
delimiter
x = np.random.rand(D)
delimiter
res.x
delimiter
queryset = Question.objects.all()
delimiter
x.append(x[i - 2] + x[i - 1])
delimiter
Z = W + lam * D.dot(D.transpose())
delimiter
new_string, 1, enc
delimiter
count = 0
delimiter
a[:, (0), (0)] = t1
delimiter
lookup[k] = list(v)
delimiter
len(last_question_marks.search(text).group(0))
delimiter
result
delimiter
b.extend(a)
delimiter
raise ValidationError(e)
delimiter
self.cbar = self.fig.colorbar(CS1, cax=self.fig.axes[1])
delimiter
do_stuff_to_last(elt)
delimiter
combs2 = 5165700
delimiter
envelope_plot(x, y, winsize=40, ax=ax2)
delimiter
d = [i[0] for i in enumerate(c) if i[1] > 2]
delimiter
LIN = np.dot(d_e_vecs, np.dot(d_e_vecs.T, X_.T)).T
delimiter
curs = conn.cursor()
delimiter
last_window = int(first_line[1])
delimiter
pari.pari_close()
delimiter
intersected = intersected.intersection(set(range(first, second + 1)))
delimiter
self.portfolio[ticker].extend(list(msg.values()))
delimiter
file.close()
delimiter
print(getSubStrings(a, 1))
delimiter
i = j + 1
delimiter
x, y = ax.transData.transform_point([i, i])
delimiter
n = len(board) - 1
delimiter
[1, 2, 7]
delimiter
A() == A()
delimiter
foo(x)
delimiter
x0, x1 = _cubic(b, 1.0, 0.6), _cubic(b, 0.0, 0.2)
delimiter
JM2[(ii), :, (ii)] = 0
delimiter
keptticks = yticks[::int(len(yticks) / 10)]
delimiter
jsonData = json.dumps(data)
delimiter
clock.tick(15)
delimiter
value = ndb.StringProperty()
delimiter
fig, ax = plt.subplots(1)
delimiter
jobs = [pool.schedule(Check, args=[i], timeout=5) for i in range(10)]
delimiter
ret[i] = a[i] + b[i]
delimiter
a = ref([1, 2])
delimiter
a == b
delimiter
thismanager.window.SetPosition((500, 0))
delimiter
artist.set_visible(not artist.get_visible())
delimiter
value
delimiter
angle = getAngleBetweenPoints(-1, -1, -2, -2)
delimiter
original_set_item(self, header, value)
delimiter
print(pd.concat([table1, table2[table2.columns.intersection(table1.columns)]]))
delimiter
number = list(map(int, str(n)))
delimiter
self.threshold = threshold
delimiter
x = a[1] * b[2] - a[2] * b[1]
delimiter
[mysqld]
delimiter
C[i] = full_array[2]
delimiter
retstr.close()
delimiter
form.populate_obj(user)
delimiter
tfidf_matrix_train = tfidf_vectorizer.fit_transform(train_set)
delimiter
fun(**dic)
delimiter
print(a + 1)
delimiter
test = [it for it in l for _ in range(2)]
delimiter
print(self.t0[self.event_id].text, millis - self.now - deltaMillis)
delimiter
Ecliptic(sun).lon
delimiter
self.height = event.height
delimiter
found = emojis.findall(search)
delimiter
r, c = np.unravel_index(np.argmin(M2Dr), shp)
delimiter
d[id(b)] = b
delimiter
a[rows, cols] = 0
delimiter
x = y.ravel()
delimiter
array = np.array([i, j, k, l, m])
delimiter
assert all(lst[i][0] < lst[i + 1][0] for i in range(len(lst) - 1))
delimiter
result = np.empty((len(unique_lats), len(unique_lons)))
delimiter
col = prop.columns[0]
delimiter
result = func(*args, **kwargs)
delimiter
max_indices = []
delimiter
one, four, ten = operator.itemgetter(1, 4, 10)(alist)
delimiter
ArtofWarCounter = Counter(x for x in ArtofWarLIST if x not in ignore)
delimiter
print([i for i in f().contents])
delimiter
other + self.x
delimiter
schema = avro.schema.parse(schema_string)
delimiter
printstats(counts)
delimiter
a = random.sample(range(100000), 10000)
delimiter
pred.append((int(tp[0]), int(tp[1])))
delimiter
fft_axes.set_autoscaley_on(False)
delimiter
penup()
delimiter
sw, sh = root.winfo_screenwidth(), root.winfo_screenheight()
delimiter
plt.plot(np.arange(10, 0, -1) + i)
delimiter
fronts
delimiter
x[small_indices] = 0
delimiter
B = sp.lil_matrix((5, 5))
delimiter
result = original_import(module_name, *args)
delimiter
cmd_out.seek(0)
delimiter
pilImage = Image.open(StringIO(rawImage))
delimiter
vals, idx = np.unique(c, True)
delimiter
f = Foo()
delimiter
x = np.arange(10)
delimiter
int(x / 0.05) * 0.05
delimiter
panel.mean()
delimiter
i.call(1)
delimiter
print(list(islice((p for p in postponed_sieve()), n - 1, n + 1)))
delimiter
line[x] = child._text.encode(self.codec)
delimiter
Py_DECREF(arglist)
delimiter
answer.append(vector)
delimiter
data.boxplot()
delimiter
fields = [(entity, prop) for entity in entities for prop in props]
delimiter
db.test_collection.drop()
delimiter
do_some_database_stuff()
delimiter
soup = BeautifulSoup(r.text)
delimiter
ccvv
delimiter
ccbv
delimiter
epoch = datetime.datetime.utcfromtimestamp(0)
delimiter
pytest.fail(exc)
delimiter
self.finish()
delimiter
body
delimiter
index = pandas.MultiIndex.from_product([y.index, z.index])
delimiter
waitress
delimiter
land = output.astype(bool)
delimiter
im = im[im > 167]
delimiter
a = 1
delimiter
df2 = df.copy()
delimiter
fig, ax = plt.subplots(1, 1)
delimiter
highest_values.append(v)
delimiter
txt = proc.stdout.readline()
delimiter
arr
delimiter
os.listdir(dir_name)
delimiter
self.b = 10
delimiter
a.dtype
delimiter
_log_to_logger
delimiter
format_to_year_to_value_dict = defaultdict(dict)
delimiter
data.splitlines()[-lines:]
delimiter
items[index_slice] = list(value.items())
delimiter
self.a = a
delimiter
lst2 = [(i, i, i) for i in range(10 ** 4)]
delimiter
zippy = gzip.GzipFile(fileobj=StringIO.StringIO(data))
delimiter
coll.remove(data)
delimiter
cors = CORS(app)
delimiter
b_in_a.remove(ordered)
delimiter
print(a_new == expected_a_new)
delimiter
ps.end_document()
delimiter
handler.setLevel(logging.DEBUG)
delimiter
np.r_[x, x[-2::-1], mx[1:], mx[-2:0:-1]]
delimiter
curses.wrapper(test)
delimiter
corpus = Corpus(documents=[Document(d) for d in paragraphs])
delimiter
tmean(arr, limits=(lower_limit, upper_limit), inclusive=(False, False))
delimiter
property_asel = [x for x, y in zip(property_a, good_objects) if y]
delimiter
plot.line(x_range, y_range)
delimiter
seed1 = df[msk].mean()
delimiter
f.close()
delimiter
first_int = int(list_of_items_in_line[0])
delimiter
prefix = next(p for p in strings if p not in suffixes)
delimiter
self.serialize(s)
delimiter
common_neis[w, u] += 1
delimiter
EMAIL_USE_SSL = False
delimiter
counts, xedges, yedges, im = ax.hist2d(x, y, bins=40, norm=LogNorm())
delimiter
html = r.frame.toHtml()
delimiter
ShortName = MyReallyBigClassNameWhichIHateToType
delimiter
first, second = itertools.tee(iterable)
delimiter
save_cookies(r.cookies, filename)
delimiter
p = Particle(foo)
delimiter
not decompose(l)[1]
delimiter
True
delimiter
list(itertools.islice(args[0](), args[1]))
delimiter
ggplot(df, aes(x=cups_of_coffee, y=productivity)) + geom_line()
delimiter
deleted[self._key]
delimiter
pylab.cos(x) + pylab.sin(y)
delimiter
print(main())
delimiter
float.__new__(self, value)
delimiter
method_name = method_to_cache.__name__
delimiter
i -= 1
delimiter
a[:, :, (0)] = 255
delimiter
list(permutations(age.get_group(21).index))
delimiter
f1 = np.array([1.000049])
delimiter
jinja2.escape(a)
delimiter
i = 0
delimiter
self[context].prob(word)
delimiter
T = NP.random.randint(0, 10, 20).reshape(5, 4)
delimiter
fp.getvalue()
delimiter
baz(5)
delimiter
outputmapping = {}
delimiter
results.append((sender.name, result))
delimiter
partitions.append(a[index:])
delimiter
print(x)
delimiter
x ** 2 + self.i
delimiter
a = list()
delimiter
serverSocket.listen(1)
delimiter
list(combined.elements())
delimiter
c = 2j * np.pi
delimiter
data.update(value)
delimiter
keys = list(toCSV[0].keys())
delimiter
mask = np.isnan(arr)
delimiter
sys.exit(0)
delimiter
array_crator(a, (7, 11))
delimiter
files = []
delimiter
_, lastday = calendar.monthrange(first.year, first.month)
delimiter
[logger_qpid]
delimiter
sha = hashlib.sha1()
delimiter
key, score = line.split()
delimiter
Gtk.Grid
delimiter
0.98
delimiter
babel.dates.format_datetime(value, format)
delimiter
BLOCKSIZE = 1048576
delimiter
self._real_executor = ThreadPoolExecutor(max_workers=cpu_count())
delimiter
etree.cleanup_namespaces(root)
delimiter
parser.setContentHandler(StreamHandler())
delimiter
local_time.isoformat()
delimiter
p.start()
delimiter
print(item)
delimiter
some_date.astimezone(timezone(loc.time_zone))
delimiter
res = f(*arg, **karg)
delimiter
np.add.at(grids, idx.T.tolist(), 1)
delimiter
pos = np.where(my_array > 5)
delimiter
out.release()
delimiter
self.customer = customer
delimiter
diff_business_days = pd.bdate_range(a, b).size
delimiter
x = fit_df.index.astype(float).values
delimiter
diff.append(x)
delimiter
fixname = self._fixname
delimiter
adj.set_value(adj.upper - adj.page_size)
delimiter
user = get_object_or_404(pk=user.id)
delimiter
outp.write(out_str)
delimiter
alarm.start()
delimiter
layout = QtGui.QVBoxLayout(self)
delimiter
biverses_reloaded = mycorpus.aligned_sents()
delimiter
nr_lines += 1
delimiter
pool = multiprocessing.Pool(processes=pool_size)
delimiter
X, Y = np.meshgrid(dx, dx)
delimiter
dill.detect.trace(True)
delimiter
a = np.array([[5, 6, 1], [6, 7, 1], [7, 8, 1]])
delimiter
haversine(origin, paris, miles=True)
delimiter
cdf = np.cumsum(prob_matrix.T, axis=1)
delimiter
xlApp.Workbooks.Add()
delimiter
plt.scatter(intersection_points[:, (0)], intersection_points[:, (1)], s=20)
delimiter
print(s)
delimiter
self._odict.update(state)
delimiter
df = df.fillna(0)
delimiter
seconds = round(seconds, 6)
delimiter
res = pd.rolling_apply(tmp.ii, 50, lambda x: gm(x, tmp, 5))
delimiter
url = models.CharField(max_length=255, unique=True)
delimiter
print(bar.baz)
delimiter
stream.close()
delimiter
A[0][2][0].simplify()
delimiter
len(res)
delimiter
self.app.quit()
delimiter
local_tz = get_localzone()
delimiter
ksort = np.argsort(x)
delimiter
x = np.arange(5)
delimiter
fig.add_axes(ax)
delimiter
set(d2.items()) - set(d1.items())
delimiter
getattr(obj, self._attr_name)
delimiter
A[:] = [sub for sub in A if st.issubset(sub)]
delimiter
r.status_code
delimiter
f(*a)
delimiter
glob.iglob(pathname, recursive=False)
delimiter
a_deciles = pd.qcut(a + jitter(a), 10, labels=False)
delimiter
x = numpy.arange(0, 1, 0.05)
delimiter
a = self.input.read(1)
delimiter
list_B.append(arr[current_set])
delimiter
print(line1.contains(pr) or line1.buffer(EPS).contains(pr))
delimiter
t.doX(arg)
delimiter
res
delimiter
title = models.CharField()
delimiter
new_a = np.zeros((rows, new_cols))
delimiter
notifier = pyinotify.Notifier(wm)
delimiter
walk_dir = sys.argv[1]
delimiter
serversocket.listen(5)
delimiter
random.shuffle(l)
delimiter
start = datetime.datetime.now()
delimiter
plt.legend(loc=1)
delimiter
a.other = 5
delimiter
pl.quiver(X, Y, U, V, color=cm.jet(nz(C)))
delimiter
pylab.pcolor(xx, yy, zz)
delimiter
ICD.display(grp)
delimiter
arr = np.delete(arr, -1, axis=1)
delimiter
file_path = os.path.join(indir, infile)
delimiter
do_something(a_map[B_object.string])
delimiter
str(x)
delimiter
best, jin, jpal
delimiter
corner22 = [1, 1]
delimiter
command = input()
delimiter
R = {i: Vector([SomeCoordinates]) for i in range(1, n + 1)}
delimiter
datagramRecieved = False
delimiter
verts = [(0.0, 0.0), (0.0, 1.0), (1.0, 1.0), (0.0, 0.0)]
delimiter
key_list = list(recursive_dict.keys())
delimiter
cont = plt.contourf(x, y, z, 25)
delimiter
self.b = 2
delimiter
cherrypy.request.scoped_session_class.remove()
delimiter
queryset = User.objects.all()
delimiter
m = p.match(line)
delimiter
mydict[item] = True
delimiter
np.multiply(unit_ray, closest_plane_distance)
delimiter
print(pt.get_items())
delimiter
x, y
delimiter
self.__keys[idx]
delimiter
True
delimiter
b.Print()
delimiter
zlib.decompress(compressed)
delimiter
False
delimiter
x = np.asanyarray(x, dtype=float)
delimiter
browser.web_view.load(r)
delimiter
print(a.f2(10))
delimiter
title = db.Column(db.String(255))
delimiter
7
delimiter
r = defaultdict(list)
delimiter
percent(0.1565, 2)
delimiter
idx = match.index.get_level_values(0)[0]
delimiter
mock._callable = _patched_callable
delimiter
arr2[:, ([min_window, min_window + 1])]
delimiter
orig_test()
delimiter
SEED = 448
delimiter
z = zip(a, b)
delimiter
self._decoratee = decoratee
delimiter
max(szl, szr) + stackSize + 1
delimiter
data = Column(BLOB)
delimiter
cache[param]
delimiter
area / 2
delimiter
a = nltk.word_tokenize(text)
delimiter
df1
delimiter
sympy.exp(x)
delimiter
mobile = models.IntegerField(max_length=12)
delimiter
power_find(11)
delimiter
x = np.linspace(0, 1, 20)
delimiter
browser.set_handle_robots(false)
delimiter
my_list = []
delimiter
Bar.x
delimiter
etree.tostring(tree.getroot())
delimiter
n_errors += 1
delimiter
signal.alarm(t)
delimiter
_callg(c, copy_generator(c))
delimiter
punkt.finalize_training(verbose=True)
delimiter
self.progress_bar.pulse()
delimiter
channel.sendall(read_bytes)
delimiter
ndprint(x)
delimiter
do_smth(loop_id, i, k)
delimiter
Fig = plt.figure()
delimiter
testlist.sort()
delimiter
list(pd.DataFrame(d).dropna().index)
delimiter
tr1 = np.fft.rfft(in1, n)
delimiter
[list(filterfalse(lambda w: w == val, l)) for l in lists]
delimiter
skip = sorted(random.sample(range(1, n + 1), n - s))
delimiter
funcs.append(partial(callback, source))
delimiter
response.app_iter = file_streamer()
delimiter
1
delimiter
result.append(x.unpack_from(buf))
delimiter
layout.setContentsMargins(0, 0, 0, 0)
delimiter
times.sort()
delimiter
count = 0
delimiter
res[k] = [j] = [D[k]]
delimiter
print(df1)
delimiter
x[i], x[j] = x[j], x[i]
delimiter
print(result)
delimiter
print(output)
delimiter
print(f.bar())
delimiter
lid_close()
delimiter
s.values
delimiter
results.append(s)
delimiter
fig = pylab.figure(figsize=(8, 8))
delimiter
self.text_strings.text_string
delimiter
sd = copy.copy(d)
delimiter
urllib2.getproxies = lambda : {}
delimiter
object.__setattr__(self, name, value)
delimiter
Base = declarative_base()
delimiter
tojoin.append(element)
delimiter
pool.close()
delimiter
a, b = itertools.tee(nd)
delimiter
PyObject * p(NULL)
delimiter
print((name, value))
delimiter
root.setLevel(logging.DEBUG)
delimiter
agen = (i for i in a if not i in set(b))
delimiter
print(stderr)
delimiter
(d ** 2).sum(axis=0) ** 0.5
delimiter
f.m
delimiter
l = SparseList()
delimiter
arcana = serializers.SerializerMethodField()
delimiter
labels = np.arange(10)
delimiter
assert called == [True]
delimiter
phonenumbers.format_number(parsed_number, phonenumbers.PhoneNumberFormat.E164)
delimiter
self.end_headers()
delimiter
d = {(1): [2]}
delimiter
dec_idx = np.random.choice(2 ** m, N, replace=False)
delimiter
fig = plt.figure()
delimiter
len(self.list1)
delimiter
Template.render = instrumented_test_render
delimiter
write_to_lmdb(image_db, str(itr), image_datum.SerializeToString())
delimiter
end = time.time()
delimiter
print(a1[n] + a2[n])
delimiter
assert from_date.month == 2 and from_date.day == 29
delimiter
L.append(4)
delimiter
self.buttons.accepted.connect(self.accept)
delimiter
print()
delimiter
deactivate
delimiter
Base = declarative_base()
delimiter
x[1, 0, 0] = value2
delimiter
Notes
delimiter
triplets[iT:iT] = [triplets[iT - 1][0], listB[iB + 1]]
delimiter
self.broken = True
delimiter
bar.a
delimiter
lines = np.random.random((numlines, numpoints, 2))
delimiter
print(welcometext)
delimiter
print(a)
delimiter
result = set1.union(set2)
delimiter
proc.terminate()
delimiter
print(sy.fu(c, measure=lambda x: -x.count_ops()))
delimiter
data_fit = est_std * np.sin(t + est_phase) + est_mean
delimiter
http = credentials.authorize(http)
delimiter
output = []
delimiter
l = tf.unpack(state_placeholder, axis=0)
delimiter
sys.exit()
delimiter
parser = argparse.ArgumentParser()
delimiter
print(arr.sum())
delimiter
data = json.loads(chart_data)
delimiter
self.mainWindow.settings.setValue(self.cookiesKey, cookiesArray)
delimiter
fft_axes.set_autoscaley_on(False)
delimiter
x = numpy.random.normal(size=(size, n))
delimiter
x.set_sensitive(False)
delimiter
s[:c]
delimiter
range_template.py
delimiter
output
delimiter
quicksort(array, pivot + 1, right)
delimiter
total += n
delimiter
os.dup2(devnull.fileno(), sys.stderr.fileno())
delimiter
X, Y = np.meshgrid(x, y)
delimiter
print((m.start() - len(s), m.end() - len(s)))
delimiter
s.poll()
delimiter
socket.socket = socks.socksocket
delimiter
l = [len(i) for i in a]
delimiter
std = np.std([0, 0, 1])
delimiter
s = StringIO.StringIO()
delimiter
l = len(s)
delimiter
result = {}
delimiter
np.random.shuffle(yx)
delimiter
is_sum_of_numbers(9, numbers)
delimiter
reslen = np.max(accmap) + 1
delimiter
d = hashlib.md5()
delimiter
tabrows = []
delimiter
group(callback.clone([arg]) for arg in it)()
delimiter
models.py
delimiter
new_settings[6][termios.VTIME] = 0
delimiter
main_loop.start()
delimiter
next.click()
delimiter
diff = now - datetime.fromtimestamp(time)
delimiter
decoder = json.JSONDecoder(object_pairs_hook=collections.OrderedDict)
delimiter
df[i] = df[i - 100].apply(lambda x: x * i)
delimiter
mask = a[:, (1)] == -1
delimiter
model = sm.OLS()
delimiter
alphabet = string.letters + string.digits
delimiter
self.__f(x - 1)
delimiter
base64.b64encode(zlib.compress(s))
delimiter
any(map(lambda match: match in temp, lists))
delimiter
argspec = inspect.getargspec(sum)
delimiter
dic = {x: (0) for x in lis}
delimiter
c = [x for x in map(rect, a, b)]
delimiter
mapped.repeat()
delimiter
mat_row.data -= numpy.repeat(vec_row.toarray()[0], numpy.diff(mat_row.indptr))
delimiter
print(args)
delimiter
p.map(partial(foo, depth=depth - 1), list(range(x + 1)))
delimiter
sct.norm.cdf(x=80, loc=60, scale=40) - sct.norm.cdf(x=60, loc=60, scale=40)
delimiter
ElementTree.XMLTreeBuilder = SimpleXMLTreeBuilder.TreeBuilder
delimiter
velcro.right(140)
delimiter
[9, 9, 9]
delimiter
latest_file = max(files, key=os.path.getctime)
delimiter
cbar = plt.colorbar(mappable=s, ax=ax)
delimiter
assigned_leads = lead.objects.filter(assigned_to__in=usercompany).distinct()
delimiter
b.py
delimiter
itertools.zip_longest(fillvalue=fillvalue, *([iter(iterable)] * n))
delimiter
FLANN_INDEX_KDTREE = 1
delimiter
sf.where((sf.my_col > date_from) & (sf.my_col < date_to))
delimiter
cls
delimiter
y.pack(side=BOTTOM)
delimiter
group.setdefault(key, []).append(item)
delimiter
MyWidget()
delimiter
print(rpn)
delimiter
self.initial_parametername = self.parametername
delimiter
results.append(dict(zip(columns, row)))
delimiter
eng = db.engine
delimiter
bn.partsort(a, a.size - 10)[-10:]
delimiter
imy = np.tile(np.arange(ylo, yhi, 1), nx).reshape((nx, ny)).transpose()
delimiter
cv.SetImageROI(newCanvas, (0, yc, image.width, image.height))
delimiter
ax.scatter(xs, ys, zs)
delimiter
sleep(5)
delimiter
form = MessageAdminForm
delimiter
plt.figure(figsize=(6 * 1.618, 6))
delimiter
c = Counter(x for x, y in ranks)
delimiter
resp = conn.getresponse()
delimiter
x_coords, y_coords = zip(*points)
delimiter
thumb = Image.open(new_file.img.path)
delimiter
data = cur.fetchall()
delimiter
woman = WomenNativePassport.objects.get(pk=pk)
delimiter
False
delimiter
index[axis] = indices[tuple(index)]
delimiter
C = B.reshape((20, 20, 2, 2, 18, 5))
delimiter
datetime.date(2002, 11, 28), datetime.date(2002, 12, 25), datetime.date
delimiter
v[i] += 1
delimiter
issubclass(WindowsError, OSError)
delimiter
session = requests.Session()
delimiter
companytypeserializer = typebase_serializer_factory(CompanyType)
delimiter
img = Image.open(sys.argv[1])
delimiter
original.show()
delimiter
x = x + y
delimiter
length = len(s)
delimiter
sha1.update(data)
delimiter
tag = _lookup_string(child.tag, strmap)
delimiter
ax.set_aspect(1)
delimiter
print(mime_type)
delimiter
pl.colorbar()
delimiter
token = response.read()
delimiter
bar(dvals)
delimiter
res.status_code == 204
delimiter
main = objectify.fromstring(xml)
delimiter
arg = sys.argv[1]
delimiter
dis.dis(bar)
delimiter
production.py
delimiter
pprint(A_inv)
delimiter
f = open(filename)
delimiter
strio.seek(0)
delimiter
print([sph_kn(floor(v), x)[0][-1] for x in X])
delimiter
ax = plt.figure(fig)
delimiter
self.data - other.data
delimiter
heapq.nlargest(2, el)
delimiter
d = {x: df.columns[df.columns.str.contains(x)].tolist() for x in cols}
delimiter
consumer.start()
delimiter
MyObject().id
delimiter
print(repr(x))
delimiter
hs.place(x=5, y=5, width=150)
delimiter
content = cleaner.clean_html(content)
delimiter
html_theme_path = [customized_readable_theme.get_html_theme_path()]
delimiter
curses.init_pair(i + 1, i, -1)
delimiter
d = collections.defaultdict(list)
delimiter
telnr
delimiter
next(end)
delimiter
item_names = list(item_dict.keys())
delimiter
plt.show()
delimiter
print(x)
delimiter
polygons.append(Polygon(square))
delimiter
existing_category = Category(key_name=category_keyname)
delimiter
print(col.text)
delimiter
my_func_called_inside_a_task()
delimiter
cert.serial_number
delimiter
queue.put((tag, line.rstrip()))
delimiter
get_lerp_factor(0, 9, 16)
delimiter
self.handleError(record)
delimiter
0,
delimiter
self.assertFalse(w and str(w[-1]))
delimiter
ss.bind((host, int(port)))
delimiter
raise CustomException(42)
delimiter
top_left = true_points.min(axis=0)
delimiter
hello.main()
delimiter
orig_hasattr(o, a)
delimiter
queryset
delimiter
n = nx.shortest_path_length(G, 1, 4)
delimiter
days_since_last_fail = arange(len(is_fail))
delimiter
plt.subplot(1, 1, 1)
delimiter
sel = Selector(response)
delimiter
base_cls_name = obj.__class__.__name__
delimiter
start = time.time()
delimiter
s = base64.b64encode(t)
delimiter
fig = bp.figure()
delimiter
bn.T.flags
delimiter
spl[-1] = int(spl[-1])
delimiter
res = []
delimiter
cs + np.sum(a)
delimiter
X_train_to_add
delimiter
first_row_min = df.loc[(first[0]), first[1]:].min()
delimiter
c += 1
delimiter
self._min_y = min(self._min_y, y)
delimiter
self._add(key[1:], children[-1].children)
delimiter
print(floor(d * m) / m)
delimiter
verts = [(0.0, 0.0), (1.0, 0.0), (1.0, 1.0), (0.0, 0.0)]
delimiter
self.f = f
delimiter
out_data = []
delimiter
outer_result = pool.apply_async(setouter, (Q, G, n))
delimiter
widemapOP = dict((ord(x[0]), x[1]) for x in zip(normal, wide))
delimiter
f(x=4)
delimiter
m.group()
delimiter
session = trans.open_session()
delimiter
textwrap.indent(text, amount * ch)
delimiter
local_tz = get_localzone()
delimiter
stream.read()
delimiter
xstep = np.concatenate((xstep, -xstep))
delimiter
app = Flask(__name__)
delimiter
findex[0] = -1
delimiter
db_field.formfield(**kwargs)
delimiter
b = []
delimiter
s
delimiter
train_features = np.array(train_features)
delimiter
cPickle.load(f)
delimiter
df2
delimiter
a.sort()
delimiter
gray = cv2.cvtColor(image, cv2.CV_LOAD_IMAGE_GRAYSCALE)
delimiter
it.send(StopIteration)
delimiter
locator.sub(_doreplace, s)
delimiter
1
delimiter
client.load_system_host_keys()
delimiter
[1, 1]
delimiter
result = celery.AsyncResult(tid)
delimiter
commands[command]()
delimiter
w = MyWidget()
delimiter
result = []
delimiter
1
delimiter
tree(size - random.randint(10, 20), myTurtle)
delimiter
answer = 0
delimiter
a = a.strip()
delimiter
ucs4[n] = fill_char
delimiter
random_genes_dict[x] = genes_dict[x]
delimiter
loop.run_forever()
delimiter
find_intersection(m_list)
delimiter
print(i)
delimiter
t = threading.Thread(target=tornado.ioloop.IOLoop.instance().start)
delimiter
content = thefile.read()
delimiter
non_blank_count += 1
delimiter
app = Flask(__name__)
delimiter
os.rename(tempi, filepath)
delimiter
cos = np.cos
delimiter
Gcc = nx.connected_component_subgraphs(G)[0]
delimiter
p += 1
delimiter
sum([(i * w) for i, w in zip([1] + inputs, self.weights)])
delimiter
tmpfile_name = tempfile.mktemp()
delimiter
rdd1.leftOuterJoin(rdd2)
delimiter
result_names = np.unique(names)
delimiter
i
delimiter
__repr__ = __str__
delimiter
d = {}
delimiter
d = {}
delimiter
declaration = doc.toxml()
delimiter
self.enforce_required_fields(attrs)
delimiter
print([k for k, v in enumerate(linesB) if not v in linesA])
delimiter
new_name
delimiter
methodReference.methodReference.__self__.__class__
delimiter
mean.shape = mean.shape[0], 1
delimiter
fig.subplots_adjust(top=0.88)
delimiter
1
delimiter
print(df1)
delimiter
print(i, time.time())
delimiter
dic[k].append(v)
delimiter
context.paint()
delimiter
lst
delimiter
plt.xticks(list(range(len(corr.columns))), corr.columns)
delimiter
a * np.sin(2.0 * np.pi * f * t + p)
delimiter
t.interval(0.95, 10, loc=1, scale=2)
delimiter
w[1][0]
delimiter
heights = pd.Series(np.random.normal(size=100))
delimiter
rooted_paths.append([root] + path)
delimiter
getkey.get_key(D, 5)
delimiter
thrlist.append(t)
delimiter
cross_val_score(LinearRegression(), X, y, cv=threefold)
delimiter
ax.xaxis.set_minor_locator(ticker.LogLocator(subs=subs))
delimiter
S.remove([])
delimiter
print(j)
delimiter
xlApp.ActiveWorkbook.Close(SaveChanges=0)
delimiter
self.buffer.append(line)
delimiter
id(df2.columns)
delimiter
test_suite.addTest(unittest.makeSuite(Invoice))
delimiter
i = 0
delimiter
y = rand(2, 2)
delimiter
consumer = oauth.Consumer(consumer_key, consumer_secret)
delimiter
e.args[0].reason.errno
delimiter
mysets = (set(x.items()) for x in MyList)
delimiter
np.set_printoptions(precision=4)
delimiter
a.fromstring(s)
delimiter
bow
delimiter
bestfit
delimiter
np.random.seed(0)
delimiter
-1
delimiter
print(max(wn.lch_similarity(good, great), wn.lch_similarity(great, good)))
delimiter
n * 2
delimiter
lst.extend(words)
delimiter
stdout = StringIO.StringIO()
delimiter
value = getdict(value)
delimiter
line[-1]
delimiter
known = set(i for i, j in mylist if j not in other)
delimiter
self.Show()
delimiter
a[0] - b[1]
delimiter
dom.insertBefore(pi, root)
delimiter
i = 0
delimiter
start = np.random.randint(0, xmax - 10, nsubarray)
delimiter
count = len(self.leftover)
delimiter
False
delimiter
ar[0] = np.arctan2(vect[0], vect[2])
delimiter
fig = matplotlib.pyplot.figure()
delimiter
sys.stdin.name
delimiter
paths.append([])
delimiter
infinity
delimiter
[my_alphabet.index(c) for c in word]
delimiter
self.delete(seq_num)
delimiter
setattr(self, key, execdict[key])
delimiter
subplot(2, 1, 2)
delimiter
np.trapz(arr)
delimiter
self.obj_type = obj_type
delimiter
fp.close()
delimiter
j == i + 1
delimiter
f()
delimiter
cols.append(x)
delimiter
fcs.pszIconFile = iconpath
delimiter
n = int(h.hexdigest(), base=16)
delimiter
recvSock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, True)
delimiter
id = sa.Column(sa.Integer, primary_key=True, autoincrement=True)
delimiter
work.append((nx, ny))
delimiter
data.update({item: set() for item in extra_items_in_deps})
delimiter
min(best_results, key=distance)
delimiter
zipstream = StringIO.StringIO()
delimiter
d if d.day >= 15 else d + timedelta(weeks=1)
delimiter
all_point_sets.append(curr_points)
delimiter
OrderedDict(obj)
delimiter
theta_mid = 0.5 * (theta_edges[:-1] + theta_edges[1:])
delimiter
select = np.in1d(list(range(data.shape[0])), sample_indexes)
delimiter
_set_match(matches[-1])
delimiter
raise NotImplementedError
delimiter
a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2
delimiter
newFile = self.window.new_file()
delimiter
print(cell.value)
delimiter
thread.start()
delimiter
print(sum(lst))
delimiter
n
delimiter
x = x[x != 0]
delimiter
[h for h in hay if not set(h) - needle]
delimiter
a = np.arange(100)
delimiter
wordpx = []
delimiter
palette = np.arange(8)
delimiter
m_list.append(x)
delimiter
Y = poly.fit_transform(X)
delimiter
lens = []
delimiter
a = A.values.reshape(-1, 10)
delimiter
ndb.delete_multi_async(Shard.query().fetch(keys_only=True))
delimiter
start = datetime(2012, 1, 1)
delimiter
email.save()
delimiter
mymodule.myfunc()
delimiter
winsound.Beep(600, 250)
delimiter
true
delimiter
self.byName = collections.defaultdict(list)
delimiter
group_consecutives(a)
delimiter
a, b = b, a + b
delimiter
(8, [2, 2, 2]),
delimiter
r = bisect.bisect_left(indices, a)
delimiter
sock = urllib.request.urlopen(request)
delimiter
assert x == y
delimiter
print(elevation.shape)
delimiter
PLT.draw()
delimiter
self.draw_confints(ax, offpos, confint, errcolors, self.errwidth, self.capsize)
delimiter
self._jrdd = rdd._jrdd
delimiter
self.partitioner = rdd.partitioner
delimiter
print(resp.headers)
delimiter
priority_list[i[1]] = 1
delimiter
object_list = object_list.filter(user=request.user)
delimiter
tloc = threading.local()
delimiter
d = {}
delimiter
yflat = np.full_like(y, max(ax.get_ylim()))
delimiter
session = Session()
delimiter
processes = [Process(target=print_head, args=(i,)) for i in range(1, 10)]
delimiter
check(v1, v2)
delimiter
plt.plot(x1, y1)
delimiter
args = parser.parse_args()
delimiter
grouped.indices[group] = list(range(0, len(index)))
delimiter
cov = np.cov(a, b)
delimiter
A = [d.date() for d in drg]
delimiter
False
delimiter
xx = np.array([[[1, 2], [5, 6]], [[7, 8], [9, 0]]])
delimiter
self.monochrome = self.cmap.monochrome
delimiter
m = a.reshape((a.shape[0], -1))
delimiter
do_one()
delimiter
sumBefore.append(sumBefore[-1] + x)
delimiter
r.append(idx)
delimiter
func_proto = ctypes.WINFUNCTYPE(HRESULT, HWND)
delimiter
b = a.copy()
delimiter
date_dict[date_value.date()].append(date_value)
delimiter
np.not_equal(c[1:], c[:-1], out=flag[1:])
delimiter
clientId = serializers.Field()
delimiter
boundmethod
delimiter
callerframerecord = inspect.stack()[1]
delimiter
sample = xy.take(np.random.choice(xy.shape[0], 100, replace=False), axis=0)
delimiter
app_name.context_processors.date_now
delimiter
color = np.random.rand(N)
delimiter
datastore.put(updates)
delimiter
_PyUnicode_COMPACT_DATA(op)
delimiter
pytest.fail(exc, pytrace=True)
delimiter
0
delimiter
dictionary = read_dictionary_from_file()
delimiter
allbytes = [chr(i) for i in range(256)]
delimiter
self.SetCellValue(rowstart + y, colstart + x, c)
delimiter
cnum = 1
delimiter
print((args, leftovers))
delimiter
plt.grid()
delimiter
self.arg1 = arg1
delimiter
parts = urlparse.urlsplit(url)
delimiter
digest = hashlib.sha1(hashcontents).digest()
delimiter
functor.arity = arity
delimiter
chrome_options = webdriver.ChromeOptions()
delimiter
tracefunc
delimiter
rows = cursor.fetchall()[:10]
delimiter
print(args)
delimiter
print(d)
delimiter
timeit(lambda : list(emptydict.keys()))
delimiter
print(data)
delimiter
print(df)
delimiter
colors = [cmap(i) for i in np.linspace(0, 1, number)]
delimiter
x.append(int(_x))
delimiter
self.b = b
delimiter
df
delimiter
foo = Foo()
delimiter
link.allow_tags = True
delimiter
transitions[msg[0]]()
delimiter
line[1] = line[1][:5]
delimiter
a = np.random.randn(1000)
delimiter
b = B(e)
delimiter
iter(List)
delimiter
d = np.diag(C)
delimiter
description = db.TextProperty()
delimiter
print(output)
delimiter
self.client = webtest.TestApp(app)
delimiter
NULL
delimiter
self.get(key)
delimiter
y.pack(side=BOTTOM)
delimiter
glClearColor(1.0, 1.0, 1.0, 1.0)
delimiter
cov[(1), :] = 1
delimiter
time.time() - start_time
delimiter
T(x + y for x, y in zip(self, other))
delimiter
miny, maxy = (y1, y2) if y1 < y2 else (y2, y1)
delimiter
r = np.any(img, axis=(1, 2))
delimiter
print(myset)
delimiter
hex(200 - (1 << 16))
delimiter
new_element = lxml.etree.fromstring(lxml.etree.tostring(elem))
delimiter
inner.click()
delimiter
handlers = []
delimiter
count += 1
delimiter
obj + 1
delimiter
sample = random.sample(idx, p)
delimiter
minimum = random.randrange(0, max_line, 6)
delimiter
i += 1
delimiter
cat(toJSON(response))
delimiter
b = int(sys.argv[2])
delimiter
reversed_words(s)
delimiter
setattr(namespace, self.dest, attr)
delimiter
post_syncdb.connect(add_view_permissions)
delimiter
self.context = context
delimiter
parsed_args.func()
delimiter
myFunction(x, y)
delimiter
post_env = env.copy()
delimiter
data = [random.randrange(100) for _ in range(20)]
delimiter
lines = []
delimiter
{5, 5}
delimiter
DEBUGGING = False
delimiter
expression_if_true if condition else expression_if_false
delimiter
node = ET.Element(tag)
delimiter
1
delimiter
results
delimiter
user = request.user
delimiter
data = [False, False, False]
delimiter
json.dump(testarr, test_file)
delimiter
y = math.cos(x)
delimiter
bind_layers(PPPoE_Tag, PPPoE_Tag)
delimiter
self.c = c
delimiter
df[cols]
delimiter
print(is_perfect_cube(-64))
delimiter
example = np.ones((4, 2, 100))
delimiter
df = pd.read_csv(files[0])
delimiter
key = f.read()
delimiter
ani = animation.FuncAnimation(fig, lambda : next(game))
delimiter
indented[0] = lines[0]
delimiter
vals = []
delimiter
[self.x - 1, self.y], [self.x + 1, self.y]
delimiter
result_feed = gd_client.ExecuteBatch(request_feed)
delimiter
positive = array + np.amin(array)
delimiter
stop_event = threading.Event()
delimiter
fs1 = frozenset([42, 666])
delimiter
result = dialog.exec_()
delimiter
conn.close()
delimiter
b = [1, 0, 1, 1, 0, 1, 1]
delimiter
value = map(lambda x: power(r, x), funcs)
delimiter
select_rows(*items)
delimiter
print((key.__name__, items))
delimiter
edgey1 = region1 ^ np.roll(nregion1, shift=shift, axis=1)
delimiter
kth_order_statistic2(A, k)
delimiter
print(stdout[-1])
delimiter
assert np.allclose(orig, decoded)
delimiter
min_x, max_y, minloc, maxloc = cv2.minMaxLoc(result)
delimiter
q, r = divide(22, 7)
delimiter
X = [map(int, row[0:6]) for row in A]
delimiter
dims = np.fromfile(f, dim_dtype, array_ndim)
delimiter
s = pd.Series(np.random.rand(100))
delimiter
post_delete.connect(update_b_count, sender=B)
delimiter
os.times()
delimiter
obj.func1
delimiter
d2 = decimal.Decimal(2)
delimiter
wait_for_finishing_subprocess()
delimiter
arr[1:].imag = arr[0].real
delimiter
cax = fig.add_axes([0.15, 0.15, 0.05, 0.4])
delimiter
param = dist.fit(y)
delimiter
WSGIApplicationGroup % {GLOBAL}
delimiter
start = argc.value - len(sys.argv)
delimiter
i = np.argmax(A != 0)
delimiter
print(timeit.timeit(list_comprehension))
delimiter
a = copy(data)
delimiter
pyo = ctypes.py_object(o)
delimiter
s[:last_index]
delimiter
draw = ImageDraw.Draw(im)
delimiter
site = sys.argv[1]
delimiter
current = match.group()
delimiter
self.updateIcon()
delimiter
raise ValueError
delimiter
y.shape
delimiter
wrapper
delimiter
_defaultdict(CountTree)
delimiter
_, filename = os.path.split(latest_file)
delimiter
count += bytechunk
delimiter
outer.inner()()
delimiter
[p.join() for p in proc]
delimiter
data = iris.data
delimiter
x = np.array([0.5, 2.2, -1.8, -0.1])
delimiter
df1.plot(ax=ax)
delimiter
A2 = np.hstack([A, A])
delimiter
fit_alpha, fit_loc, fit_beta = stats.gamma.fit(data)
delimiter
dt = np.dtype((np.void, my_array.dtype.itemsize * my_array.shape[1]))
delimiter
real += 1
delimiter
fly.rect.x += fly.hspeed
delimiter
foo = Foo(settings)
delimiter
ind1, ind2
delimiter
connection.ops.value_to_db_datetime(value)
delimiter
base = argparse.ArgumentParser(add_help=False)
delimiter
self._deletes.add(key)
delimiter
[map_level(f, i, level - 1) for i in item]
delimiter
runUntil(start.Add(time.Millisecond * 100))
delimiter
max_y = np.nanmax(rot_points[:, (1)], axis=1)
delimiter
connection = some_connection_pool.get_connection()
delimiter
index = np.arange(len(cols))
delimiter
print(res.ready, res.value)
delimiter
print(result)
delimiter
directive += signature
delimiter
f = tempfile.NamedTemporaryFile(delete=False)
delimiter
print(s.title())
delimiter
0
delimiter
auth_uri = flow.step1_get_authorize_url()
delimiter
os.chdir(PATH)
delimiter
line = line.strip()
delimiter
sum
delimiter
now = datetime.datetime.utcnow()
delimiter
min(S)
delimiter
title = models.CharField(max_length=100)
delimiter
shelf.close()
delimiter
rtn = True
delimiter
plt.vlines(x_intersect[negatives], -20, 20)
delimiter
init_from_map(self, locals())
delimiter
tree.getPayload()
delimiter
print(char, count)
delimiter
c = np.random.normal(size=1000)
delimiter
self.canvas = FigureCanvas(self, -1, self.figure)
delimiter
argparse.ArgumentParser.set_default_subparser = set_default_subparser
delimiter
help(isinstance)
delimiter
new.__class__ = old.__class__
delimiter
(d - 1) * d / 2 == len(condensed_matrix)
delimiter
ex2 = QtGui.QWidget()
delimiter
opening = cv2.morphologyEx(img_thresholded, cv2.MORPH_OPEN, kernel)
delimiter
{{balance.amount | abs}}
delimiter
print(minified)
delimiter
value = list1[0][i]
delimiter
bs = BeautifulSoup(t)
delimiter
df[df.col1 == tf.col1]
delimiter
drops = df.index[df.index < df.index.max() - keep]
delimiter
a = []
delimiter
self.dict[key]
delimiter
seq = [(x, key(x)) for x in seq_in]
delimiter
res
delimiter
skin_ycrcb = cv2.inRange(im_ycrcb, skin_ycrcb_mint, skin_ycrcb_maxt)
delimiter
s, self.get_environ(s)
delimiter
dx = x[1] - x[0]
delimiter
original = np.get_printoptions()
delimiter
i = 0
delimiter
print(a.shape)
delimiter
w = Window()
delimiter
s.asfreq(BDay())
delimiter
myclient = Client(url, transport=mytransport_instance)
delimiter
group = models.ForeignKey(Group)
delimiter
Tree.fromstring(s)
delimiter
tfile.close()
delimiter
y = numpy.array([0.5, 0.75, 1, 0.5])
delimiter
b = unhexlify(myhexstr)
delimiter
a = np.arange(20).reshape((5, 4))
delimiter
len(res)
delimiter
counts = collections.Counter(a)
delimiter
dRA = uniform(-0.0001, 0.0001)
delimiter
optimizer = tf.train.AdaGradOptimizer(0.01)
delimiter
S = dok_matrix((10000, 10000), dtype=bool)
delimiter
ind = pd.Index([(e[0] + e[1]) for e in mi.tolist()])
delimiter
desired_value = __builtins__.next(value_iterator)
delimiter
b = map(tuple, list(d.values()))
delimiter
model1 = models.ForeignKey(Model1)
delimiter
print(serialize(data))
delimiter
self.channel = self.connection.channel()
delimiter
allix = set(range(len(elements)))
delimiter
parameter1 + parameter2
delimiter
name = db.Column(db.String(50))
delimiter
list2 = map(itemgetter(1), origlist)
delimiter
list(zip(alist, blist))
delimiter
print(a)
delimiter
self.kill(signal.SIGKILL)
delimiter
managed = False
delimiter
min(lists, key=len)
delimiter
int(x)
delimiter
self.grid()
delimiter
labels = np.linspace(m0, m1, num_ticks)
delimiter
plt.imshow(data)
delimiter
set_ids = []
delimiter
dlg.Destroy()
delimiter
self.factory.startedConnecting(self)
delimiter
pairs = zip(mylist[::2], mylist[1::2])
delimiter
entry_split = entry_regex.split(row, 1)
delimiter
previous_value = doing_fd.read()
delimiter
handler = logging.StreamHandler()
delimiter
shelf.clear()
delimiter
init_op.run()
delimiter
np.array(l) ** np.arange(len(l))
delimiter
foo(node, p)
delimiter
print(page)
delimiter
i1 = Interval(10, 15)
delimiter
printItems(v, indent + 1)
delimiter
df1
delimiter
result
delimiter
np.log10(1 + 100 * a, b)
delimiter
print(my_string.zfill(2))
delimiter
TerminateProcess(hProcess, 1)
delimiter
p = np.asfarray(p)
delimiter
pclt.set_transform(mtransforms.IdentityTransform())
delimiter
fd = sys.stdin.fileno()
delimiter
result = ssh.stdout.readlines()
delimiter
is_duplicate = df.apply(pd.Series.duplicated, axis=1)
delimiter
a ** 2
delimiter
Matrix(df.as_matrix())
delimiter
f
delimiter
print(larray)
delimiter
minval = a[i]
delimiter
chain += [primes[secnum]]
delimiter
x = 5
delimiter
type(Foo.bar)
delimiter
usleep = lambda x: time.sleep(x / 1000000.0)
delimiter
N = 100
delimiter
multiply(S, P)
delimiter
lst2 = [1, 2]
delimiter
self.value = value
delimiter
s.read(len(expected))
delimiter
print(dict)
delimiter
dt_delta = dt_delta.days * 60 * 60 * 24 + dt_delta.seconds
delimiter
self.array.append([item, priority])
delimiter
print(string.value)
delimiter
logger.addHandler(console)
delimiter
entries.add(key)
delimiter
os.path.join is posixpath.join
delimiter
self
delimiter
rand_num = np.random.choice((0, 1), p=[1 - p, p])
delimiter
comp = compiler.SQLCompiler(dialect, statement)
delimiter
item.setCheckState(QtCore.Qt.Checked)
delimiter
df2.columns
delimiter
nonmatching = object()
delimiter
print(pat.findall(data))
delimiter
scores[name] += int(score)
delimiter
canvas.print_png(response)
delimiter
authentication_classes = TokenAuthentication,
delimiter
allocate(rowData(nC))
delimiter
sys.exit(qApp.exec_())
delimiter
r = lambda x, y: np.sqrt(max(0, 1 - x ** 2 - y ** 2))
delimiter
msg = handle_pyerror()
delimiter
x = list(enumerate(l))
delimiter
args = [(square, a[i], x[i]) for i in range(10)]
delimiter
self.sock = sock
delimiter
toss2[edges] = dsteps
delimiter
res = opener.open(req)
delimiter
Py_Initialize()
delimiter
qbbbb
delimiter
bbbb
delimiter
qaaaa
delimiter
val
delimiter
c = SimpleCV.Camera(1)
delimiter
self.z = z
delimiter
map(tdgi, filter(tdin, theList))
delimiter
fields = [line[column].strip() for column in columns]
delimiter
foo(node, copy.deepcopy(p))
delimiter
EMAIL_PORT = 25
delimiter
rhost = socket.gethostbyaddr(host)
delimiter
sys.float_info.epsilon
delimiter
something = protorpc.messages.StringField(1, required=True),
delimiter
print(list(people.keys()))
delimiter
create_frequency_list(df)
delimiter
milepost += len(data) // 10
delimiter
b = [4, 5, 6]
delimiter
results = []
delimiter
children
delimiter
w.writeheader()
delimiter
result.append((ChartItem(rule[0][0], Ir), ((x + z, z), (Ih,))))
delimiter
data = f.read().split()
delimiter
ogl.CGLGetCurrentContext.argtypes = []
delimiter
sys.stdout = _stdout
delimiter
print(self.value)
delimiter
expressions = []
delimiter
L = list(range(100))
delimiter
BOOST_PYTHON_MODULE(example)
delimiter
result = _SHGetFolderPath(0, CSIDL_APPDATA, 0, 0, path_buf)
delimiter
z = list(zip(t, t2))
delimiter
xys_top.append(((x.max() - x.min()) / 2.0, zone))
delimiter
num += s[0]
delimiter
demo01()
delimiter
layer.paste(mark, (x, y))
delimiter
print(urlunparse(u))
delimiter
what_i_want = [i for i in combinations(stuff, len(stuff) / 2)]
delimiter
keylist.append(lkey_annotated)
delimiter
a = np.random.randn(10, 10)
delimiter
plt.gca().add_artist(self.line)
delimiter
print(lst)
delimiter
dists.shape
delimiter
fig = plt.figure()
delimiter
out = np.ravel(np.zeros(shape=(n, n)))
delimiter
[(j, is_odd(j)) for j in range(10)]
delimiter
fromstring_tree = etree.fromstring(xml_str).getroottree()
delimiter
your_subprocess.py
delimiter
retries = 0
delimiter
[]
delimiter
link.allow_tags = True
delimiter
aaaaa
delimiter
[tox]
delimiter
tree = et.fromstring(xmltext)
delimiter
sqrt_n = int(math.floor(math.sqrt(n)))
delimiter
self.x = x
delimiter
feature_group.add_child(folium.Marker(location=[lat, lon], popup=name))
delimiter
L = ax.legend()
delimiter
print(easygui.fileopenbox())
delimiter
mmapped_file_as_string.close()
delimiter
print(recursion(a))
delimiter
print(i, j)
delimiter
divider = make_axes_locatable(ax)
delimiter
x = np.random.normal(1 + i, 0.04, size=len(y))
delimiter
stdin.flush()
delimiter
print(len(A))
delimiter
self.value
delimiter
text.rfind(pattern, 0, text.rfind(pattern))
delimiter
post_data = request.POST.dict()
delimiter
log(p(a, b) / (p(a) * p(b)))
delimiter
MANAGERS = ADMINS
delimiter
convert_list = label_list[:-1]
delimiter
result += self.buf.read(size - len(result))
delimiter
t = Thread(target=processData, args=(some_data,))
delimiter
AppHelper.runEventLoop()
delimiter
loader = unittest.TestLoader()
delimiter
unew = np.arange(0, 1.01, 0.01)
delimiter
f.name
delimiter
doc = parseString(html_string)
delimiter
r
delimiter
result = list(product(*lists))
delimiter
m if m else 12
delimiter
filepath = sys.argv[1]
delimiter
form = OrganismForm()
delimiter
queryset = self.model._default_manager.all()
delimiter
MyClass.some_method(mock_object)
delimiter
[4, 8, 12],
delimiter
a_test.method_three()
delimiter
result = thirdparty.go()
delimiter
lstnans = [np.nan] * (len(Weight) - len(Quota))
delimiter
vals_array[lat_idx, lon_idx] = vals
delimiter
sys.stdin = _stdin
delimiter
columns[k].append(v)
delimiter
cbar_ax = fig.add_axes(fig_coord)
delimiter
s.startswith(tag)
delimiter
cr = csv.reader(response)
delimiter
parser = ArgumentParser()
delimiter
lats.append(float(row[1]))
delimiter
_foo()
delimiter
print(json.dumps(x))
delimiter
a[:] = numpy.NAN
delimiter
edges = [(i, j) for i, j in permutations(replace, 2) if i[1].has(j[0])]
delimiter
1
delimiter
platform.release()
delimiter
type(Sub1)
delimiter
y = np.array(y)
delimiter
json.dump(testarr, test_file)
delimiter
print(sqlStr)
delimiter
action = webdriver.common.action_chains.ActionChains(driver)
delimiter
i = (n + 1) / 2
delimiter
d = datetime.datetime(*tup[0:6])
delimiter
x = np.linspace(0, 2 * np.pi)
delimiter
coords = np.array([yy, xx, np.zeros(im.shape[:2])])
delimiter
sftp.get(filepath, localpath)
delimiter
print(list_index)
delimiter
repmask = np.logical_and(~flag[slcs2], flag[slcs1])
delimiter
s = list(input_str)
delimiter
print(df.index.hour)
delimiter
params.append(escape(v, conversions))
delimiter
fallback
delimiter
root = Tk()
delimiter
data = self._get_numeric_data()
delimiter
tree = ahocorasick.KeywordTree()
delimiter
filerecords.remove(selection)
delimiter
sent = self.sock.send(msg[totalsent:])
delimiter
MULT(table[i - 1], a, table[i])
delimiter
data = Counter(your_list_in_here)
delimiter
f(*args, **kwargs)
delimiter
ret1, frame1 = cap1.read()
delimiter
s = requests.session()
delimiter
len(self._d)
delimiter
z = np.any(img, axis=(0, 1))
delimiter
result += num_subsequences(seq[1:], sub[1:])
delimiter
len(self._dict)
delimiter
magdir = np.rad2deg(np.arctan2(u, v))
delimiter
test_case.assertEqual(len(expected), len(actual))
delimiter
M = [[0, 1, 2], [1, 0, 1], [2, 1, 0]]
delimiter
b.wait()
delimiter
messages.sort(key=lambda m: m.lineno)
delimiter
print(integer, exponent)
delimiter
row = session.query(Table)[rand]
delimiter
print(mystring.format(**locals()))
delimiter
process.kill()
delimiter
f.seek(f.tell() - overlap)
delimiter
color = models.CharField(max_length=50)
delimiter
shutil.copytree(source, destination, ignore=ignored_files)
delimiter
cmap4 = CustomCmap([1.0, 0.42, 0.04], [0.5, 0.5, 0.5])
delimiter
my_img = tf.image.decode_png(value)
delimiter
cache.incr(self.COUNTER_CACHE_KEY)
delimiter
list(iterate_strings(5))
delimiter
edge_list.append((i, j))
delimiter
myNewMassage.extend(myMassage)
delimiter
a = np.zeros(100000, int)
delimiter
pprint.pprint(x)
delimiter
w = gtk.gdk.get_default_root_window()
delimiter
xlim(0, 1000)
delimiter
proxy.config.debug = 1
delimiter
newfile.close()
delimiter
lazy(help_SHOP_CHOICES, list)()
delimiter
pylab.plot(x, y)
delimiter
loop.call_later(5, stop)
delimiter
app
delimiter
x11, x21 = np.meshgrid(A[:-1, (0)], B[:-1, (0)])
delimiter
X = np.arange(N * N).reshape(N, N)
delimiter
blank_image.save(out)
delimiter
ax = fig.add_subplot(111)
delimiter
lines = [line] + list(itertools.islice(f, 6))
delimiter
print(min((cost(shots), shots) for shots in shot_sequences))
delimiter
start = time.time()
delimiter
self.buffer = []
delimiter
string = string.rstrip().lstrip()
delimiter
yaml.add_representer(literal_unicode, literal_unicode_representer)
delimiter
b = [l[i] for i, flag in enumerate(flags) if not flag]
delimiter
points = np.empty([50, 100])
delimiter
print(a)
delimiter
AND_ANOTHER_CONSTANT = 4
delimiter
x = np.linspace(min(sample), max(sample))
delimiter
time.sleep(0.5)
delimiter
files = zip_file.namelist()
delimiter
list(parse_to_argv_gen(instring))
delimiter
B = p2[0] - p1[0]
delimiter
text = tk.Text(root, wrap=tk.WORD, height=5)
delimiter
self.set_data(x, y)
delimiter
master = Tk()
delimiter
logA, alpha, B = np.linalg.lstsq(M, np.log(ydata))[0]
delimiter
xml
delimiter
print(a[j[k]])
delimiter
xlsx = pd.ExcelWriter(output_path)
delimiter
item in self.__dict__
delimiter
x_std = (x - x.mean()) / x.std()
delimiter
arr = np.array([([1] * 10) for _ in range(5)])
delimiter
self.file.seek(position)
delimiter
a = np.asarray(a)
delimiter
mail = line[1].strip()
delimiter
eval(equation)
delimiter
z = x * np.exp(-x ** 2 - y ** 2)
delimiter
func = lambda : requests.post(full_url, json.dumps(data))
delimiter
narr = np.asanyarray(source)
delimiter
nom_plan_label = QtGui.QLabel()
delimiter
time = (end - start) / 1000
delimiter
cursor = connection.cursor()
delimiter
race = models.ForeignKey(YourRaceModel, index_db=True)
delimiter
content_type = mimetypes.guess_type(name)[0]
delimiter
session = requests.session()
delimiter
popt, pcov = curve_fit(func, xdata, ydata, p0)
delimiter
newTuple = tuple(oldTuple[x:x + 4] for x in range(0, len(oldTuple), 4))
delimiter
mask1 = np.hstack((False, arr[1:] < arr[:-1], False))
delimiter
parser.print_help()
delimiter
B = np.zeros_like(A)
delimiter
print(x)
delimiter
current_dict = current_dict[letter]
delimiter
results = map(f, list(range(50)))
delimiter
form = UsersForms.UserImage()
delimiter
fd.writelines(rows[n:])
delimiter
x + y
delimiter
out[::-1]
delimiter
cv2.destroyAllWindows()
delimiter
person.put()
delimiter
rt.clock_getres(CLOCK_REALTIME, byref(res))
delimiter
pickle.dump(ibm, fout)
delimiter
result = []
delimiter
v = defaultdict(list)
delimiter
X, Y = meshgrid(x, y)
delimiter
x
delimiter
cols = [(np.ones_like(a) * i) for i, a in enumerate(data)]
delimiter
idxes = [idx for idx, val in enumerate(s) if val in letters]
delimiter
x = random.gauss(-200, 150)
delimiter
ax1 = f1.add_subplot(111)
delimiter
term_appearance.update(x)
delimiter
stdscr.addstr(len(lines), 0, s)
delimiter
a.append(0)
delimiter
lg = lua.globals()
delimiter
url_values = urllib.parse.urlencode(data)
delimiter
soup = BeautifulSoup(f)
delimiter
deleteseq[pos:]
delimiter
self.doIt = myFunc
delimiter
self.length = n
delimiter
t[rows]
delimiter
running = True
delimiter
h5_store = h5open(file_input, fileop)
delimiter
signal.signal(SIGHUP, SIG_DFL)
delimiter
inbox = outlook.GetDefaultFolder(6)
delimiter
out = np.zeros(A.shape[0], np.bool)
delimiter
f.truncate()
delimiter
f.seek(999999999)
delimiter
gridpoints = np.array([xx.ravel(), yy.ravel()])
delimiter
print(df)
delimiter
y = np.random.rand(20)
delimiter
func(elem, level)
delimiter
result.append(math.pow(y, 2.0))
delimiter
utc_dt = utc.normalize(dt.astimezone(utc))
delimiter
ax = plt.gca()
delimiter
a = QApplication([])
delimiter
originalList = [0] * len(myList)
delimiter
upper_bound = np.array([255, 255, upper_val])
delimiter
wrapper
delimiter
answer.save()
delimiter
l2 = l[split:]
delimiter
a, b = list(range(10000)), list(range(10000))
delimiter
manager.resize(*manager.window.maxsize())
delimiter
sys.exit()
delimiter
title = title.strip()
delimiter
buf = bytearray(bufsize)
delimiter
word1_set = word1_synonyms[best_match[0]].lemma_names
delimiter
d[5] = 1
delimiter
sc = SparkContext(conf=conf)
delimiter
p.close()
delimiter
self._cond.acquire()
delimiter
t = Thread(target=some_task)
delimiter
spark.range(10).rdd.map(map_sth).count()
delimiter
cmpfunc = lambda a, b: cmp(b, a)
delimiter
self.name = tempfile.mkdtemp()
delimiter
json.dumps(dict_obj)
delimiter
deg, mnt, sec
delimiter
choice = localrandom.randrange(num_choices)
delimiter
found = True
delimiter
len(self.buffer) > 0
delimiter
self.first_name
delimiter
x = x.flatten()
delimiter
cols = [mapping[i] for i in y]
delimiter
d = Dave()
delimiter
origin[0], origin[1] - 1
delimiter
min_d, max_d = 50, 200
delimiter
assert len(self.weights) == len(self.chars)
delimiter
self.data
delimiter
x
delimiter
sys.stdout.flush()
delimiter
deletex
delimiter
root = Node(element)
delimiter
j = np.arange(N)
delimiter
a[:, (1), :] = [[8, 8, 8], [8, 8, 8]]
delimiter
section.append(line)
delimiter
bar.fizz()
delimiter
task.add_done_callback(self.handle_go_result)
delimiter
num[i, j] = np.where(t[i] <= t[j], t[i], t[j]).sum()
delimiter
hold(True)
delimiter
count = 0
delimiter
lyrics = m.group(1)
delimiter
x2_Kaxs_2[j] = [random.randint(0, 9) for k in range(2)]
delimiter
fn = fileinput.filename()
delimiter
f2.write(b)
delimiter
self.window_list = []
delimiter
delta += 1
delimiter
cn = Counter(l).most_common(2)
delimiter
value.__index__()
delimiter
print(parser.parse_args())
delimiter
env = os.environ.copy()
delimiter
union.match(word)
delimiter
count, sum
delimiter
test1.put()
delimiter
count = 0
delimiter
result = []
delimiter
len(self.alist)
delimiter
d_view.sort(reverse=True)
delimiter
c = calendar.Calendar(firstweekday=calendar.SUNDAY)
delimiter
s = f.read(bufsize)
delimiter
someList = []
delimiter
print(curve_fit(f, xdata, ydata, p0=(0.1, 0.5, 0.1, 150)))
delimiter
next([x for x in test if x % 5 == 0])
delimiter
a.insert_node(a.root, 4)
delimiter
t.start()
delimiter
f = Foo()
delimiter
xlen = wlen
delimiter
ranked = sorted(timings, key=lambda t: t[1])
delimiter
B[::2] += 0.1
delimiter
msg = EmailMessage(subject, html_content, from_email, [to])
delimiter
dumps(rv)
delimiter
True
delimiter
top = sorted(freq_dict, key=freq_dict.get, reverse=True)
delimiter
id = Column(Integer, primary_key=True)
delimiter
im[ylo:yhi, xlo:xhi] += gauss2d(imx, imy, amp, x0, y0, sx, sy)
delimiter
z = x + y
delimiter
total += int(col)
delimiter
f = interp1d(x, y)
delimiter
self.end_states.append(name)
delimiter
print(df)
delimiter
sd.play(data, fs)
delimiter
do_something_to_display_them()
delimiter
pvt = pvt[pvt.columns[1:].tolist() + pvt.columns[:1].tolist()]
delimiter
GENERATE_LATEX = NO
delimiter
dl = Downloader()
delimiter
y.visit(t)
delimiter
result = dict(zip(columns, result))
delimiter
prime_divisors = [d for d in divisors if isprime(d)]
delimiter
results = [], []
delimiter
d = np.diff(b)
delimiter
fig.draw(fig.canvas.get_renderer())
delimiter
fig, ax = plt.subplots()
delimiter
ret[line.strip()] = {}
delimiter
result = self.cursor.fetchall()
delimiter
defaultdict(recursive_defaultdict)
delimiter
result = []
delimiter
threads[-1].start()
delimiter
idx = np.arange(iszero.shape[0])
delimiter
c()
delimiter
_foobar(m, n, xpp, ypp)
delimiter
print(list_A, list_B)
delimiter
s = b.session()
delimiter
d2 = datetime.date(2008, 9, 15)
delimiter
data = np.reshape(np, random.randn(20), (10, 2))
delimiter
a[0, 0, 1] * b[0, 1, 2]
delimiter
s = set(range(10))
delimiter
netscape = True
delimiter
mask = df.eq(df.max(axis=1), axis=0)
delimiter
new_sequences.add((val + 1, count + 1))
delimiter
answer.append([i])
delimiter
tasks = [blocking1(), blocking2()]
delimiter
nrows = B.shape[0]
delimiter
inner_fn()
delimiter
arr[i] = -1 * arr[i]
delimiter
eventLoop.exit()
delimiter
p_as_list.append(node)
delimiter
arr2 = [[(i + j) for i in range(5)] for j in range(5)]
delimiter
z = list(zip(t, t2))
delimiter
y = y.reshape(numRows, 1)
delimiter
counts = {k: v for k, v in list(Counter(mylist).items()) if v > 1}
delimiter
cursor = connection.cursor()
delimiter
fullPath = os.path.join(dirpath, filename)
delimiter
lmarshalledClosureValues.append([pickle.dumps(litem)])
delimiter
print(element)
delimiter
self.connect()
delimiter
c0 = np.array([1.0, 0.0, 2.0])
delimiter
len(self.arr)
delimiter
AC, 150.0
delimiter
data = obj.__getattribute__(field)
delimiter
alphabet = string.ascii_letters + string.digits
delimiter
od = OrderedDict()
delimiter
non_blanks = (line for line in fin if line.strip())
delimiter
the_table.update(giveHereYourDictionary)
delimiter
self.create_receiver()
delimiter
self.x = x
delimiter
B /= B.std()
delimiter
inner()
delimiter
start_index = np.argmin(np.abs(ts - start_point))
delimiter
job.join()
delimiter
d, c, b, a = a, b, c, d
delimiter
amap.append([r(), r(), r(), r(), r(), r()])
delimiter
EnumProcesses.restype = ctypes.wintypes.BOOL
delimiter
{(9): 9}
delimiter
awscli
delimiter
print(result)
delimiter
ax.clabel(cset, inline=1, fontsize=10)
delimiter
configure(config)
delimiter
list(indices(5, 2))
delimiter
bucket = conn.get_bucket(BUCKET_NAME)
delimiter
s = set([4, 5, 6])
delimiter
user.is_staff = True
delimiter
vset(args)
delimiter
c_array[:] = points
delimiter
x = datetime.now()
delimiter
trimmed.append(line[indent:].rstrip())
delimiter
img = cam.get_image()
delimiter
out = x[unq_idx[np.bincount(tag_idx) == 1]]
delimiter
data.extend(x)
delimiter
print(new_list)
delimiter
df_null = df.isnull().unstack()
delimiter
fascent, fdescent, fheight, fxadvance, fyadvance = ctx.font_extents()
delimiter
clump_mask = label == biggest_label
delimiter
rng = list(range(6, 9))
delimiter
finish_time = datetime.datetime.now() + datetime.timedelta(hours=6)
delimiter
columns = list(someitem.keys())
delimiter
myvalue = eval(my_data[name])
delimiter
item
delimiter
simplejson.loads(s1)
delimiter
l = [0, 1, 2, 4, 5]
delimiter
print(data)
delimiter
True
delimiter
id = Column(Integer, primary_key=True)
delimiter
id(os1) != id(os2)
delimiter
print(b.weekday())
delimiter
first_ten = pd.DataFrame()
delimiter
a = copy.deepcopy(a)
delimiter
print(x.pop(-1))
delimiter
b[b == 255] = 1
delimiter
sys.stdout = self.sys_stdout
delimiter
v = ctypes.c_int(1)
delimiter
plt.subplots_adjust(top=0.85)
delimiter
after.replace(sub, wanted, 1)
delimiter
block_list
delimiter
delta_time = (time2 - time1).total_seconds()
delimiter
plotter2 = Plotter(ui)
delimiter
termios.tcsetattr(fd, termios.TCSAFLUSH, old_term)
delimiter
ecdf = sm.distributions.ECDF(sample)
delimiter
x = sin(i)
delimiter
res = []
delimiter
field.document_type(**value)
delimiter
file_writer = csv.writer(test_file)
delimiter
G.add_edges_from(list(data.items()))
delimiter
df_count = df_count.reset_index()
delimiter
b = np.eye(2)
delimiter
1 + self._foo
delimiter
app.exec_()
delimiter
r.clipboard_clear()
delimiter
item = date_to_datetime(item)
delimiter
yi = np.linspace(min(y), max(y))
delimiter
app.logger.info(region2.id)
delimiter
print(len(img.split()))
delimiter
[pypi]
delimiter
dict.__init__(self, *kwargs)
delimiter
state = self.__dict__.copy()
delimiter
datetime.timedelta(475)
delimiter
title = models.CharField(max_length=255)
delimiter
i = 1
delimiter
[0.80000001, 0.40000001]
delimiter
TestApp().run()
delimiter
n = np.array([-t[1], t[0]])
delimiter
client_socket.send(k)
delimiter
next(self.__iterPerson(**kwargs))
delimiter
index = self.dictionary[key][0]
delimiter
ax.scatter(x, y, z, c=density)
delimiter
ax1 = plt.subplot(121)
delimiter
num_consumers = mp.cpu_count() * 2
delimiter
config = config.reindex(new_index)
delimiter
data = s.recv(1024)
delimiter
driver = webdriver.Firefox()
delimiter
fun(arg)
delimiter
x = y + x
delimiter
print(pretty.date(yesterday, short=True))
delimiter
ConfusedRaster = arcpy.sa.Con(arcpy.sa.IsNull(ras1) == 0, 1, 0)
delimiter
print(list(cells)[1:])
delimiter
self.__disconnect__()
delimiter
tools.c.do_something()
delimiter
plt.show()
delimiter
message
delimiter
tokens = re.split(pat, text)
delimiter
window = QtGui.QWidget()
delimiter
client = pm.SSHClient()
delimiter
soup = BeautifulSoup(value)
delimiter
output = df.communicate()[0]
delimiter
assert y.shape[:2] == new_x.shape and x.shape == y.shape[2:]
delimiter
p
delimiter
self._odict[key] = val
delimiter
df = pd.DataFrame()
delimiter
bytereader = lambda : fobj.read(1)
delimiter
gc.collect()
delimiter
f.write(content)
delimiter
pb = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, True, 8, w, h)
delimiter
funcs = funcs[:]
delimiter
foo = models.Foo()
delimiter
type(a)
delimiter
prime = True
delimiter
a.d
delimiter
tup[0] = a
delimiter
listvals = []
delimiter
wrapper
delimiter
v1 = np.random.randn(100)
delimiter
wrapped.__module__ = tgt_func.__module__
delimiter
x = np.append(np.nan, np.append(x, np.nan))
delimiter
output = {}
delimiter
img.set_data(haha)
delimiter
zip(*([iter(List)] * 2))
delimiter
p.join()
delimiter
plt.tight_layout()
delimiter
assert mac.isalnum()
delimiter
print(df)
delimiter
L = [(x[0], x[1]) for x in list(tmp.items())]
delimiter
pos = pygame.mouse.get_pos()
delimiter
a = 10
delimiter
fNewList = list(fL)
delimiter
entries.append(attrib)
delimiter
lookup = collections.defaultdict(list)
delimiter
ax = f.add_subplot(111)
delimiter
df
delimiter
df = pd.DataFrame(dict(observation=np.random.uniform(50, 60, 200)), idx)
delimiter
graph[-1].append(line)
delimiter
convert_list(v)
delimiter
elementwiseApply(mul, list1, list2)
delimiter
x = numpy.arange(10)
delimiter
outputlist.append(y)
delimiter
grp1.parent_id,
delimiter
a[(b), :]
delimiter
ids = set(i for i, j in mylist)
delimiter
1
delimiter
sat = np.cumsum(np.cumsum(sat, axis=0), axis=1)
delimiter
item_set = set([item for sublist in s for item in sublist])
delimiter
day += DELTA / 60 / 60 / 24
delimiter
print(a)
delimiter
self.foo = foo
delimiter
x.start()
delimiter
self.NEWATTRS.append(attrs)
delimiter
self.cookies = []
delimiter
count_Trues(b_List)
delimiter
s.discard(line.strip())
delimiter
lookup_list = []
delimiter
result.append(set(sublst))
delimiter
newY = y[:]
delimiter
values = numpy.random.randint(0, 20, 10)
delimiter
table = Gtk.Table(1, 1, False)
delimiter
baz.bar(1)
delimiter
finder.run_script(source_name)
delimiter
self.a
delimiter
self.count = start - 1
delimiter
print(k)
delimiter
frame.pack()
delimiter
print(word)
delimiter
s[:-amount] + substring
delimiter
total
delimiter
total_length += dereference(it).second.size()
delimiter
user = request.user
delimiter
msg_out[i + j] ^= gf_exp[lcoef + lgen[j]]
delimiter
False
delimiter
Py_DECREF(POP())
delimiter
d.append(c)
delimiter
ch = logging.StreamHandler(sys.stdout)
delimiter
driver = webdriver.Chrome()
delimiter
GC.SuppressFinalize(this)
delimiter
sys.stdout = code_out
delimiter
{{x}} - {{y}}
delimiter
Union(self, other)
delimiter
l2.remove(m)
delimiter
out.write(u)
delimiter
result[x, y] = grid.cells[x, y]
delimiter
c = np.concatenate((a, b))
delimiter
response = requests.get(slug)
delimiter
events += [(t, value, i) for t, value in l]
delimiter
g.sum()
delimiter
stream.attach(screen)
delimiter
print(issubclass(Foo, Mixin))
delimiter
fout.close()
delimiter
r_[a2d(a0), a2d(a1)]
delimiter
beg_ts = time.time()
delimiter
actions.perform()
delimiter
self.data[key]
delimiter
file_contents_values = list(file_contents.values())
delimiter
mytimer = FakeTime()
delimiter
sys.exit()
delimiter
do_something_with(request)
delimiter
self.ax = self.axes[0]
delimiter
p = select.poll()
delimiter
e.tags = self.tags.all()
delimiter
title = title.strip()
delimiter
df = df.copy()
delimiter
source_unique = [v1 for v1 in source_list if v1 not in set(diff_list)]
delimiter
crsr = cnxn.cursor()
delimiter
new_hexbin = self.ax.hexbin(self.xData, self.yData)
delimiter
fig = plt.figure()
delimiter
now = datetime.now(tz)
delimiter
print(number)
delimiter
G = nx.DiGraph()
delimiter
interp(256, [1, 512], [5, 10])
delimiter
df = pd.read_csv(content, header=0)
delimiter
root = Tk()
delimiter
_new_foo, (self.__class__, coltypes, rows)
delimiter
a.insert(0, self.__adb_path)
delimiter
self.sum += item
delimiter
os.chdir(moveTo)
delimiter
serializer_class = UserSerializer
delimiter
f_ab = np.empty((len(a), len(b)), dtype=np.array(f(a[0], b[0])).dtype)
delimiter
np.allclose(loopy_cdist(seed, data), vectorized_indexing_maxat(seed, data))
delimiter
MOUSE_LEFTDOWN = 2
delimiter
clf = XGBClassifier()
delimiter
myUdf = udf(myFunc, StringType())
delimiter
yaml.dump(test2)
delimiter
df_from_each_file = (pd.read_csv(f) for f in all_files)
delimiter
print(x)
delimiter
print(x)
delimiter
a = a + 5
delimiter
_method(parameter, _user_data)
delimiter
d = defaultdict(list)
delimiter
opener = urllib.request.build_opener(proxy_support)
delimiter
reverse_d = collections.defaultdict(list)
delimiter
imshow(blue)
delimiter
mg = numpy.meshgrid(x, y)
delimiter
self.GoaldID = -1
delimiter
print(a)
delimiter
a = A()
delimiter
plt.scatter(list(range(len(results[0]))), results[0])
delimiter
self._real_executor.shutdown()
delimiter
stream_handler = logging.StreamHandler()
delimiter
server.handle_request()
delimiter
x.myAttr
delimiter
path
delimiter
l[0] if len(l) else []
delimiter
np.all(a == b)
delimiter
low = np.array([-10, -10])
delimiter
s0 = s[0]
delimiter
packetcount = 0
delimiter
math.sqrt(numpy.sum((circle1.pos - self.pos) ** 2))
delimiter
magdir
delimiter
df
delimiter
print(strs)
delimiter
sys.stdout, sys.stderr = orig_std
delimiter
self.value = value
delimiter
sprocket = PySprocket(widget)
delimiter
print(text)
delimiter
print(len(rgbData))
delimiter
c.index(a[index])
delimiter
cords_set = set()
delimiter
create_app().app_context().push()
delimiter
ses.listen_on(6881, 6891)
delimiter
d_sum[topkey][key] = dic2[topkey][key]
delimiter
PyObject * weakreflist
delimiter
action = pipe.readline()[:-1]
delimiter
response
delimiter
deletecities[key]
delimiter
rgb_values = []
delimiter
adjlist = [set(graph.neighbors(node)) for node in range(graph.vcount())]
delimiter
i -= 1
delimiter
root = Tk()
delimiter
e.args[0].reason
delimiter
df
delimiter
W = nmf_model.fit_transform(A)
delimiter
self.connection.add_on_close_callback(self.on_closed)
delimiter
inf.close()
delimiter
self._value = value
delimiter
db.reset_queries()
delimiter
makedirs(mypath)
delimiter
Product.objects.get(part_no=self.product.part_no)
delimiter
fib_lru(n - 1) + fib_lru(n - 2)
delimiter
urls.append(self.view.substr(selection))
delimiter
s = str(n)
delimiter
f(args)
delimiter
list_container = [ast.literal_eval(line.strip()) for line in lists]
delimiter
col = ax1.scatter(x, y, 100 * s, c, picker=True)
delimiter
winreg.SetValueEx(INTERNET_SETTINGS, name, 0, reg_type, value)
delimiter
filters = []
delimiter
cv2.line(vis, (x1 - r, y1 - r), (x1 + r, y1 + r), col, thickness)
delimiter
sorted_index = numpy.argsort(xs)
delimiter
mat_f = np.column_stack((mat_xc, mat_yc))
delimiter
config.write(cf)
delimiter
print(n)
delimiter
self.temperature = 1
delimiter
threading.Timer(next_call - time.time(), foo).start()
delimiter
event = Event()
delimiter
parser.set_defaults(method=a)
delimiter
print(res)
delimiter
self._obj = obj
delimiter
handler = urllib.request.HTTPBasicAuthHandler(manager)
delimiter
self.move(self.old_pos)
delimiter
L = L[:start] + L[end:]
delimiter
x = sin(phi) + 2 * sin(2 * phi)
delimiter
print(np.sqrt(xa ** 2 + ya ** 2))
delimiter
f(**example)
delimiter
instance = self.get_object()
delimiter
tables = iengine.get_table_names()
delimiter
rev = (len(d) - idx for idx, item in enumerate(reversed(d), 1) if item)
delimiter
tot = gllhs
delimiter
lst.clear()
delimiter
convolution.real
delimiter
extent = [yedges[0], yedges[-1], xedges[-1], xedges[0]]
delimiter
next(b)
delimiter
contents = text_file.read().rstrip()
delimiter
ax1 = plt.subplot2grid((m, n), (row_1, col_1), colspan=width)
delimiter
end = time.time()
delimiter
treeview.append_column(treeviewcolumn)
delimiter
squared_list_iter = [(value ** 2) for value in my_array]
delimiter
self.mps_in_process.append(id)
delimiter
zip_code = models.ForeignKey(ZipCode)
delimiter
output = random.choice([sys.stdout, sys.stderr])
delimiter
d[key] = x
delimiter
page.close()
delimiter
type(seq)([val])
delimiter
dict.__delitem__(self, k)
delimiter
el.clear()
delimiter
self._n_weights += neuron.n_inputs + 1
delimiter
self.factory.doStart()
delimiter
t = timespec()
delimiter
nameserver = default.nameservers[0]
delimiter
test1()
delimiter
mutation.append(choice([0, 1]))
delimiter
sample_ix = np.random.randint(low=0, high=500, size=100)
delimiter
rect(ax, x, y2, dx, y1 - y2, color, **kwargs)
delimiter
arr = np.array([[255, 255, 255, 255], [255, 0, 0, 255], [255, 255, 255, 255]])
delimiter
print(split[1])
delimiter
wxImage.SetData(frame.tostring())
delimiter
foo.num += 1
delimiter
y = ytrue + np.random.normal(size=len(x))
delimiter
text
delimiter
inf.seek(offset)
delimiter
factor * f(*args, **kwargs)
delimiter
True
delimiter
urls_d = Counter(list_of_urls)
delimiter
[x[1], u(t)]
delimiter
end = start + timedelta(days=6)
delimiter
QModelIndex()
delimiter
last_stop = split_points[i - 1][1] + 1 if i > 0 else 0
delimiter
whiteness = w / (y + w)
delimiter
out[k].append(item)
delimiter
s = stringio.read(1)
delimiter
A, Y
delimiter
B = np.random.rand(N, N, N)
delimiter
print(series_data)
delimiter
_repr(o)
delimiter
print(newString)
delimiter
yf = scipy.fftpack.fft(y)
delimiter
Py_Initialize()
delimiter
length = len(text) - 1
delimiter
print(texter.create_text())
delimiter
subset = [x for ind, x in enumerate(lists) if ind != 1]
delimiter
b = -2 * (zfront * zback) / (zfront - zback)
delimiter
reporter = ExceptionReporter(request, is_email=True, *exc_info)
delimiter
next = self.queue.dequeue()
delimiter
deleteself.thisptr
delimiter
L = list(range(10))
delimiter
hist = serie.hist()
delimiter
word2_synonyms = wordnet.synsets(word2)
delimiter
subset1 = data[data[:, (0)] == 100002]
delimiter
print(lst)
delimiter
I = speye(A.shape[0], A.shape[1], dtype=A.dtype, format=A.format)
delimiter
data = input()
delimiter
ax2.set_ylim(scale * (miny + dy), scale * (maxy + dy))
delimiter
rowsum = A.sum(axis=1)
delimiter
write(n, pos + 1, op + 1, cl)
delimiter
main.py
delimiter
self.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
delimiter
messages = [parser.Parser().parsestr(mssg) for mssg in messages]
delimiter
klass = getattr(module, c)
delimiter
self.value = value
delimiter
A * x ** alpha * np.exp(B * x)
delimiter
newlist = []
delimiter
root = Tk()
delimiter
print(type(tf))
delimiter
print(a)
delimiter
x = np.linspace(0, 1, 10)
delimiter
self.causes = {n: [] for n in self.fnames}
delimiter
iv.append((left, right))
delimiter
queue.append((node, end, path))
delimiter
grouped.JobNos.sum()
delimiter
type(converted.iloc[1])
delimiter
hi.bye = 5
delimiter
b, c
delimiter
Dup = {}
delimiter
hosp_info = {}
delimiter
images = []
delimiter
len(self._data)
delimiter
b = [8, 1, 5, 4]
delimiter
d = defaultdict(list)
delimiter
df
delimiter
print(legend.get_window_extent().height)
delimiter
s = bitstring.pack(fmt, **d)
delimiter
count = Counter(word)
delimiter
cv2.line(vis, (x1 - r, y1 + r), (x1 + r, y1 - r), col, thickness)
delimiter
t, v, tb = sys.exc_info()
delimiter
i += 1
delimiter
ax = plt.gca()
delimiter
shifts = [1] * (len(pattern) + 1)
delimiter
len(buffer.getvalue())
delimiter
record = self.queue.get()
delimiter
value = request.POST[key]
delimiter
print(mystring)
delimiter
result = []
delimiter
x[i], y[i] = polygon[i]
delimiter
pdraw = ImageDraw.Draw(poly)
delimiter
vstart = vspell[1]
delimiter
inp = sys.stdin.read(1)
delimiter
self.long_thread.thread_finished.connect(self.reply2_finished)
delimiter
xnew = np.linspace(x.min(), x.max(), num=npts, endpoint=False)
delimiter
self.name = name
delimiter
w, h = table.wrap(width, height)
delimiter
np.frombuffer(mp_arr.get_obj())
delimiter
p = Pool(5)
delimiter
pg_n_genotypes = models.TextField()
delimiter
browser = QtWebKit.QWebView()
delimiter
print(os.__file__)
delimiter
mapping[u]
delimiter
cv2.line(view, pt1, pt2, color)
delimiter
F = R[1] ** 2 * R[2] * R.x - R[0] * R[1] * R.y + R[2] ** 2 * R.z
delimiter
pmb = p - b
delimiter
idx = a[R, C].argsort()[:4]
delimiter
x + 10
delimiter
print(resp.status)
delimiter
y = np.sin(x)
delimiter
win.refresh()
delimiter
axmatrix.set_xticks([])
delimiter
print(a.x, a.y)
delimiter
tkpi = ImageTk.PhotoImage(image1)
delimiter
print((inst.x, inst.y, inst.z, x))
delimiter
X.append(x)
delimiter
eval(str(a))
delimiter
text = StringField(required=True)
delimiter
app = Flask(__name__)
delimiter
api = Api(app)
delimiter
batch = tf.Variable(0)
delimiter
grp.count()
delimiter
transform = lambda x: x.id
delimiter
pyximport.install()
delimiter
print(df)
delimiter
fv = numpy.vectorize(F)
delimiter
result = [do_something(x) for x in list if list]
delimiter
image = plt.imread(image)
delimiter
less.append(x)
delimiter
parts, rest = divmod(len(lst), n)
delimiter
t.append(main_list[i])
delimiter
final.show()
delimiter
minm = np.insert(minm, 0, i)
delimiter
arr[arr < 0] = 0
delimiter
draw = ImageDraw.Draw(img)
delimiter
ax = fig.add_subplot(1, 2, 1)
delimiter
print(sorted(Counter(d).elements()))
delimiter
my_func(1, 2)
delimiter
df.iloc[5:8, (2)] = np.nan
delimiter
a[:, (0)] * c0 + a[:, (1)] * c1 + a[:, (2)] * c2
delimiter
vec_lda = lda[vec_bow]
delimiter
bottom_right = true_points.max(axis=0)
delimiter
df_test.groupby(group_hours).apply(insert_missing_hours).reset_index(drop=1)
delimiter
[[]]
delimiter
print(lines)
delimiter
model.fit(Xtrain, Ytrain)
delimiter
[] == False
delimiter
numbers = [int(n) for n in line.split()]
delimiter
image_data = cPickle.loads(str(s))
delimiter
zlib.decompress(base64.b64decode(_))
delimiter
print(eq2.eq_run)
delimiter
opener = urllib.request.build_opener(proxy_support)
delimiter
id = Column(Integer(), primary_key=True)
delimiter
q_in = multiprocessing.Queue(1)
delimiter
markers = []
delimiter
deletedirs[:]
delimiter
d = fd.read()
delimiter
xl.Visible = 1
delimiter
bins = NP.array([0.0, 20.0, 50.0, 75.0])
delimiter
colnames = [i[0] for i in cursor.description]
delimiter
df
delimiter
rmtags = soup.findAll(tag)
delimiter
print(i, first_month(i))
delimiter
state = models.CharField(max_length=50, blank=True)
delimiter
self.frame.Iconize(False)
delimiter
cls._metadata_value = get_class_metadata(cls)
delimiter
f2(X)
delimiter
area_hist = ((bin_edges[1:] - bin_edges[:-1]) * counts).sum()
delimiter
sum += float(e)
delimiter
requests.old_post(url, data, json, kwargs)
delimiter
l = math.floor(math.log10(abs(x)))
delimiter
indices[j] = indices[j - 1] + 1
delimiter
out = np.zeros(mask.shape, dtype=int)
delimiter
smtp_conn.set_debuglevel(True)
delimiter
pid = os.fork()
delimiter
print(option_expiration(datetime.today()))
delimiter
ax = fig.add_subplot(111)
delimiter
app.queue.put(request)
delimiter
pylab.ion()
delimiter
app.debug = True
delimiter
False
delimiter
gouda = Cheese()
delimiter
regr = linear_model.LinearRegression()
delimiter
input_header = next(reader)
delimiter
self.canvas = Canvas(frame, width=900, height=900)
delimiter
False
delimiter
result = json.parse(data)
delimiter
df.update(df_large)
delimiter
b[0]
delimiter
player = operator.itemgetter(0)
delimiter
win.show()
delimiter
res(environ, start_response)
delimiter
list(izip_short(b, a))
delimiter
removed_indices.sort()
delimiter
pyversion
delimiter
get_keys(v, target)
delimiter
d = datetime.datetime(2010, 12, 25, 18, 25)
delimiter
dingo
delimiter
df = {}
delimiter
count(dict_test)
delimiter
line[1] = line[1][:6]
delimiter
int(s)
delimiter
user = models.OneToOneField(User, on_delete=models.CASCADE)
delimiter
divide(arr[i], depth + 1, m)
delimiter
asyncore.loop(count=1)
delimiter
type(-maxint - 1)
delimiter
id(lst)
delimiter
self.sck.connect(url)
delimiter
some_other()
delimiter
set(main_array) & set(second_array)
delimiter
x = x ^ y
delimiter
em_width = view.em_width()
delimiter
objects = MyModel.all().fetch(1000)
delimiter
binary_data = w.readframes(w.getnframes())
delimiter
txtcurl = StringIO.StringIO()
delimiter
c = a + b
delimiter
index.append(bisect.bisect(b, item))
delimiter
siz = (p2 - 1) / 2
delimiter
a, b = 1, 1
delimiter
print(perm_list)
delimiter
n = c_int(n)
delimiter
plot1 = plt.subplot(111)
delimiter
option.append((dept, number))
delimiter
self.dictionary = {}
delimiter
net.addModule(bias)
delimiter
150.17
delimiter
print(fib(1, 0, 10))
delimiter
errfunc = lambda p, x, y: y - fitfunc(p, x)
delimiter
print(df.describe())
delimiter
view_func(request, *view_args, **view_kwargs)
delimiter
args = ()
delimiter
user = UniversityDetails.objects.get(email=email)
delimiter
ar = np.array([0.0, 0.0, 0.0])
delimiter
encoded_chars.append(encoded_c)
delimiter
item.setFont(font)
delimiter
sum = 0
delimiter
ax.axis(ymin=-1, ymax=2)
delimiter
tripled + squared
delimiter
kernel_r = np.array([[0] + [1] * ksize], dtype=np.int16)
delimiter
self.master.destroy()
delimiter
sim2.run(configFactory.ConfigForSim2())
delimiter
X = df.values[:, ([0])]
delimiter
client = paramiko.SSHClient()
delimiter
admin.site.unregister(User)
delimiter
sent_at = models.DateTimeField(auto_now_add=True)
delimiter
numpy.__version__
delimiter
ws.isspace()
delimiter
a = np.arange(2, 22).reshape(4, 5)
delimiter
print(word, item)
delimiter
rows[10:40, 10:40] = [0, 255, 255, 255]
delimiter
x12, x22 = np.meshgrid(A[1:, (0)], B[1:, (0)])
delimiter
y = []
delimiter
diffs.append(nextone - current)
delimiter
self.author_name == other.author_name and self.title == other.title
delimiter
listing = os.listdir(path)
delimiter
dictionary = {k: as_row(v) for k, v in list(obj.items())}
delimiter
text
delimiter
qs = User.objects.filter(email=email)
delimiter
counts = g.transform(lambda x: len(x.unique()))
delimiter
print(rng.random_long())
delimiter
self.positions.insert(0, self.latest)
delimiter
self.master.columnconfigure(c, weight=1)
delimiter
cb.locator = tick_locator
delimiter
float_image = tf.image.per_image_withening(reshaped_image)
delimiter
r = np.roll(a, -i, axis=1)
delimiter
sort_idx = np.argsort(reference)
delimiter
print(tn.read_eager())
delimiter
outer_data = StringField()
delimiter
self.f
delimiter
before = this_array[prev_i] if prev_i != -1 else this_array[next_i]
delimiter
prettify(main_dict)
delimiter
trans.kill()
delimiter
value[:(elen - tlen) // 2] + elidetxt + value[-(elen - tlen) // 2:]
delimiter
kernel_base = np.ones(shape=5)
delimiter
rootLogger.addHandler(consoleHandler)
delimiter
file_path = os.path.join(path, filename)
delimiter
int(hex(200 - (1 << 16))[-2:], 16)
delimiter
teardown_func(*args, **kwargs)
delimiter
df_ret
delimiter
query = gdata.spreadsheet.service.CellQuery()
delimiter
date_today = datetime.datetime.today()
delimiter
l = list(l)
delimiter
print(u, v)
delimiter
hash(self.data)
delimiter
signal.signal(signal.SIGINT, signal.SIG_DFL)
delimiter
self.file
delimiter
workers = [worker(queue) for _ in range(MAX)]
delimiter
(datetime.datetime.min + obj).time().isoformat()
delimiter
getattr(conf, self.name)
delimiter
print(np.transpose(np.matrix(data)).shape)
delimiter
server.stop()
delimiter
value = self[key] = type(self)()
delimiter
tree = ET.parse(StringIO(DATA))
delimiter
a = np.array([-1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1])
delimiter
M[i] += N[j]
delimiter
Exception.__init__(self)
delimiter
print(data)
delimiter
key, value = line.split()
delimiter
name, email, phone_numbers = unpack_three(*user_record)
delimiter
processed_data
delimiter
cs = pd.concat([cs, same_grp], axis=1)
delimiter
df = df.reset_index(drop=True)
delimiter
boundaries[counts == 9] = 0
delimiter
print(args)
delimiter
to_zone = tz.tzlocal()
delimiter
f, a = plt.subplots(2, 1, figsize=[8, 10])
delimiter
parser.setContentHandler(handler)
delimiter
result
delimiter
first_match(nouns, tables)
delimiter
elements = []
delimiter
result = MagicMock.__call__(self, *args, **kwargs)
delimiter
print(simplejson.dumps(songs_as_dict))
delimiter
f.seek(0, os.SEEK_SET)
delimiter
partition_binary(partition(X, rank), my_relation)
delimiter
req = urllib.request.Request(url, post, headers)
delimiter
match = matcher.find_longest_match(0, len(matcher.a), 0, len(matcher.b))
delimiter
client_socket.send(fname)
delimiter
cmp(a.foo, b.foo) or cmp(b.bar, a.bar)
delimiter
x()
delimiter
f(i, 20)
delimiter
fizzbuzz1(20)
delimiter
current_level = current_level[part]
delimiter
[line_processor(line) for line in lines]
delimiter
dis.dis(b[2])
delimiter
p[0].set_data(xn, yn)
delimiter
obj = self.wref()
delimiter
self._data = data
delimiter
d2 = {value: key for key in d1 for value in d1[key]}
delimiter
disk_basedir = os.path.dirname(os.path.dirname(pytz.__file__))
delimiter
keyname
delimiter
funcs.append(lambda : x)
delimiter
aa.indices[aa.indptr[1]:aa.indptr[2]]
delimiter
self.rules[0].link_extractor.allow_domains.remove(hostname)
delimiter
avg_cor = rollingcor.dropna().to_frame().apply(tril_sum) / ((n ** 2 - n) / 2)
delimiter
m[i][j] = m1[i][j] * m2[i][j]
delimiter
user = User.objects.get(username__exact=self.username)
delimiter
rfc2109 = False
delimiter
name = models.CharField(max_length=50)
delimiter
5 > x > 1
delimiter
print(get_res(Fruits))
delimiter
typed_text[-1].append(keyname(event.key))
delimiter
images[idx]
delimiter
np.percentile(S, 100)
delimiter
print(json.dumps(r.json(), indent=1))
delimiter
offset = [1, 0, 0]
delimiter
True
delimiter
Variance(X + z)
delimiter
seen, result = set(), []
delimiter
records = Entrez.read(handle)
delimiter
cv2.watershed(cv2.cvtColor(img, cv2.COLOR_GRAY2BGR), lbl)
delimiter
log = logging.getLogger()
delimiter
pytz.utc.normalize(pdtnow2)
delimiter
app = Flask(__name__)
delimiter
jsonpickle.decode(jsonpickle.encode(Goal()))
delimiter
response
delimiter
print(element)
delimiter
self.layout.addWidget(self.button)
delimiter
okay = [0, 1, 1, 0]
delimiter
wid = termf.winfo_id()
delimiter
[root.val] + argmax(print_path(root.right), print_path(root.left))
delimiter
myObj = {}
delimiter
seq.append(name)
delimiter
numloss = 0
delimiter
t.start()
delimiter
PyObject * pyname
delimiter
value = request.GET.get(key)
delimiter
print(astr.translate(deleter).split())
delimiter
b.T
delimiter
pyautogui.moveTo(100, 150)
delimiter
cbar.locator = MaxNLocator(nbins=6)
delimiter
d1 = dt.now()
delimiter
df
delimiter
row[0]
delimiter
sorted_strings(L)
delimiter
print(msg.Attachments.Item(item + 1).Filename)
delimiter
cpplib.call_callback(callback)
delimiter
deletesys.path[0]
delimiter
pC[1] = 100
delimiter
seindex += 1
delimiter
ax2 = fig.add_subplot(gs[0, 1], sharex=ax1, sharey=ax1)
delimiter
out[i] = [row[j] for j in range(len(columns))]
delimiter
print(word)
delimiter
sys.settrace(self)
delimiter
items = list(od.items())
delimiter
count += f(v, i + 1, S - v[i])
delimiter
f = lambda *args, **kwds: self.fn(cls, *args, **kwds)
delimiter
d2 = D.mean(axis=0)
delimiter
tmp += nhat[i, k] * m[j, k]
delimiter
ret_val = np.zeros((arr.shape[0], maxlen))
delimiter
cur = conn.cursor()
delimiter
u = random.uniform(x[0], x[-1])
delimiter
slab = parts[1]
delimiter
tuple((m, m) for m in calendar.month_abbr[1:])
delimiter
file = BytesIO(data.read())
delimiter
now()
delimiter
html = urlopen(url).read()
delimiter
d[key] = x, newy, z
delimiter
derivative = np.dot(2, np.dot(feature, errors))
delimiter
fig = plt.figure(j)
delimiter
handler.setLevel(loglevel)
delimiter
setupcon.setup_console()
delimiter
queryset = queryset.order_by(Lower(ordering[1:])).reverse()
delimiter
line = p.stdout.readline()
delimiter
seq_pow2(16)
delimiter
f.a()
delimiter
new_dict[key] = value[key]
delimiter
0
delimiter
rad = (atom_shape[0] - 1) / 2
delimiter
lock = multiprocessing.Manager().Lock()
delimiter
user2 = tokens[2]
delimiter
self.arg1 = arg1
delimiter
adjusted_dom = dom + first_day.weekday()
delimiter
items[0]
delimiter
start_date = start_date.replace(hour=0, minute=0, second=0, microsecond=0)
delimiter
NTP_DELTA = 2208988800
delimiter
the_next_line_of_code()
delimiter
new_dict = {}
delimiter
big_nda = numpy.arange(10000).reshape(100, 100) > 5000
delimiter
print(tag)
delimiter
hash_string
delimiter
m = matrix[0].copy()
delimiter
id = np.where(fdata[1] == fdata[1].max())[0][0]
delimiter
app = wx.App(True)
delimiter
offsets = np.cumsum(histogram[:-1])
delimiter
output = [(dct[i] if i in dct else i) for i in text.split()]
delimiter
self.text
delimiter
comp = compiler.SQLCompiler(dialect, statement)
delimiter
self.roots = [et.parse(f).getroot() for f in filenames]
delimiter
the_page = response.read()
delimiter
matches[0]
delimiter
end = datetime.now()
delimiter
results = dict.fromkeys(inputs)
delimiter
ini_path = os.path.join(base_dir, some_subdir, some_file)
delimiter
anyFunc(*args, **kwargs)
delimiter
True
delimiter
r.insert(0, i)
delimiter
random_list = random.sample(list(genes_dict.items()), int(length))
delimiter
self.assertEqual(widget_in.size, expected_tuple)
delimiter
install(darwin)
delimiter
False
delimiter
datetime.date(2008, 11, 27), datetime.date(2008, 12, 25), datetime.date
delimiter
result = []
delimiter
RNA_integers = []
delimiter
keyword.kwlist
delimiter
Z.append([i, j, float(len(subtree[n])), len(z)])
delimiter
list1 = [(list1[i] * list2[i]) for i in range(len(list1))]
delimiter
out.append((key, elems, word))
delimiter
opener = urllib.request.build_opener(proxy_support, urllib.request.HTTPHandler(debuglevel=1))
delimiter
shape2, loc2, scale2 = rv2.dist._parse_args(*rv2.args, **rv2.kwds)
delimiter
ax = plt.subplot(10, 10, i)
delimiter
self.serversocket.listen(5)
delimiter
x_coords = x[..., (np.newaxis)] * size + base
delimiter
freq2char[freq].add(char)
delimiter
text = item.text
delimiter
result = cur.fetchone()
delimiter
word_set = set(list_of_words)
delimiter
Bar(income_df).show()
delimiter
float.__add__(1.22, b)
delimiter
p.wait()
delimiter
print(model.summary())
delimiter
inst.__init__(*coltypes)
delimiter
axs[0, 0].imshow(im)
delimiter
plt.plot(x - 1, y)
delimiter
crc1 == crc2
delimiter
json.loads(*args, **kwargs)
delimiter
neighbors.append((rr, cc))
delimiter
ctx.eval(js)
delimiter
root = Tree()
delimiter
thickness = 0.5 * np.abs(np.sin(x) * np.cos(x))
delimiter
inds = np.where(np.isnan(a))
delimiter
xi = np.linspace(min(x), max(x))
delimiter
df
delimiter
False
delimiter
pp.imshow(detected_peaks)
delimiter
heroes = set()
delimiter
process([line for line in tmp_lines])
delimiter
foo(2)
delimiter
print(Add.make_args(expr))
delimiter
list_of_tuples.append((x, y))
delimiter
matrices[:, (1), (1)] = c
delimiter
end = numpy.array([2, 10, 9], numpy.int16)
delimiter
dic1.keys() == dic2.keys()
delimiter
event.canvas.draw()
delimiter
PDF = PDFFileReader(source)
delimiter
scipy.io.numpyio.fwrite(fd, data.size, data)
delimiter
position = position[:-1]
delimiter
data = self.cleaned_data
delimiter
print(result.message)
delimiter
f = Foo(m=5)
delimiter
()()
delimiter
os_encoding = locale.getpreferredencoding()
delimiter
a = int(yourstring)
delimiter
rest = df[10:]
delimiter
asyncio.set_event_loop(self.loop)
delimiter
self.prediction
delimiter
plt.plot(x_axis, y_axis)
delimiter
[[x] for x in a]
delimiter
tf_bias = tf.Variable(tf.zeros([B]))
delimiter
Fc = 40
delimiter
p = itertools.combinations(data, i)
delimiter
df = pandas.DataFrame(formula)
delimiter
self.ses = requests.session()
delimiter
input_dim = X_train.shape[2]
delimiter
x * x
delimiter
df = pd.DataFrame(1, index=[0], columns=mi)
delimiter
self.h
delimiter
opener = urllib.request.build_opener(proxy_support)
delimiter
info = {path: filename, name: path.basename(filename)}
delimiter
a.real *= factarr
delimiter
html = _.read()
delimiter
b = a
delimiter
[(x + sx, y + sy) for sx, sy in zip(dx, dy)]
delimiter
cur = conn.cur()
delimiter
a = np.array(x)
delimiter
dims = X.max(axis=0) + 1
delimiter
parser = argparse.ArgumentParser()
delimiter
[-0.66666667, -1.0, -1.0],
delimiter
math.sqrt(sum(diff * diff))
delimiter
self.wfile.write(self.t1.show())
delimiter
norm = A.shape[1] - 1.0
delimiter
groups = match.groups()
delimiter
[0] * 0
delimiter
plt.hist(mix, bins=20)
delimiter
credentials = storage.get()
delimiter
plotgauss2(histdist[1])
delimiter
pprint.pprint(data1)
delimiter
p.daemon = True
delimiter
print(list(bookmark_collection.keys()))
delimiter
root_path = os.path.abspath(os.path.split(__file__)[0])
delimiter
a[:k] = np.random.randn(k)
delimiter
next(self)
delimiter
cnt[c] += 1
delimiter
c.some.method(x=1, y=2)
delimiter
new.shape
delimiter
task_1 = a_long_process.delay(x, y)
delimiter
r, c = np.triu_indices_from(B.T)
delimiter
saver.save(sess, checkpoint.model_checkpoint_path)
delimiter
beta = np.array([0, 1.0], dtype=np.float64)
delimiter
Image(filename=fn)
delimiter
curses.echo()
delimiter
axis.set_major_formatter(formatter)
delimiter
numbers = []
delimiter
recall = np.linspace(0.0, 1.0, num=42)
delimiter
the_method_in_modeladmin.allow_tags = True
delimiter
cls.getMe()
delimiter
tc = tender_data.values[:, 1:5]
delimiter
tree = random(n)
delimiter
vals[i] += abs(np.dot(u, v))
delimiter
data = urllib.request.urlopen(target_url)
delimiter
hashlib.md5(stdout).hexdigest()
delimiter
self.cleaned_data
delimiter
a, b, c, d, e = l
delimiter
new_nums = []
delimiter
block_end_byte = f.tell()
delimiter
fromstring_element = etree.fromstring(xml_str)
delimiter
plt.scatter(t.date.dt.to_pydatetime(), t.sample_data)
delimiter
FORMAT = pyaudio.paInt16
delimiter
iterator_mergesort((next(iterator) for _ in range(size / 2)), size / 2),
delimiter
input_thread.start()
delimiter
s.union([o])
delimiter
d = d[p]
delimiter
args = parser().parse_args()
delimiter
self.add(row, col, val)
delimiter
loop.create_task(receive_log())
delimiter
cet_eur = pacific.astimezone(cet)
delimiter
True
delimiter
resp
delimiter
g = lambda x: 2 * x
delimiter
li = [s[i:i + n] for i in range(len(s) - n + 1)]
delimiter
social_data = UserSocialAuth.get_social_auth_for_user(request.user)
delimiter
im = Image.open(infile)
delimiter
x2sort = np.sort(x2)[::-1]
delimiter
ix, iy = np.argwhere((Ax == Bxmin) & (Ay == Bymin))[0]
delimiter
dt = date(2008, 11, 10)
delimiter
result = [x for x in result if x not in string.whitespace]
delimiter
dirname = os.path.normpath(dirname)
delimiter
raise KeyError(key)
delimiter
print(s1.value_counts(sort=False))
delimiter
net.layers
delimiter
Tops1 = [1156, 1250, 1156, 1187, 1187, 1187, 1156, 1156]
delimiter
res
delimiter
cr.fill()
delimiter
application = linkedin.LinkedInApplication(authentication)
delimiter
p1 = interpolate.PiecewisePolynomial(x1, y1[:, (np.newaxis)])
delimiter
bool(0.0)
delimiter
print(sample1.count(True))
delimiter
mapper(Player, players_table)
delimiter
i += 1
delimiter
a.flags.owndata
delimiter
frame = Frame(root, bd=2, relief=SUNKEN)
delimiter
prevnode.left == node.left
delimiter
print(e.pgerror)
delimiter
print(plusOne(y[:]), y)
delimiter
parts.reverse()
delimiter
print(p)
delimiter
norm_factor = np.linalg.det(norm_factor)
delimiter
tb.deactivate()
delimiter
f = plt.figure()
delimiter
endif
delimiter
imp.fit(train)
delimiter
index += 1
delimiter
list2 = [1, 0, 0, 0, 0, 0]
delimiter
fuzzeBinSearch(L[:mid], x)
delimiter
self.x = x
delimiter
events = []
delimiter
self.cache[key]
delimiter
result = self.queue.get()
delimiter
l = []
delimiter
pool.release(connection)
delimiter
True
delimiter
cache[:] = [v]
delimiter
c = np.bitwise_xor(a, b)
delimiter
seen = set(y)
delimiter
power = int(math.log(num, base) + 0.5)
delimiter
a = result
delimiter
x[()]
delimiter
count += 1
delimiter
print(b)
delimiter
lo, hi = min(x, lo), max(x, hi)
delimiter
s.commit()
delimiter
cots = aliased(TextString)
delimiter
cits = aliased(TextString)
delimiter
self.__dict__ = db_to_frames_dict(engine)
delimiter
b = splinter.Browser()
delimiter
self.ax.set_ylim(min(newy), max(newy))
delimiter
t = buf.read(1048576)
delimiter
coord = list(product(list(range(8)), list(range(8))))
delimiter
lst = list(t)
delimiter
VENUS = Body(mass=4.869e+24, radius=6051800.0)
delimiter
my_data = NP.random.random_integers(0, 9, 16).reshape(4, 4)
delimiter
contents = f.read()
delimiter
i += 1
delimiter
second_list = []
delimiter
estimated_mu = np.log(scale)
delimiter
unigrams[token] += 1
delimiter
n = len(list)
delimiter
request.GET.update(options)
delimiter
redistributed_points = []
delimiter
y = np.trunc(x)
delimiter
data = urllib.request.urlopen(url).read()
delimiter
w = excel.Workbooks.Open(f)
delimiter
(2 < arr) & (arr < 6)
delimiter
im1 = cam1.getImage()
delimiter
codeproc = subprocess.Popen(code, stdout=subprocess.PIPE)
delimiter
x = [1] + [1]
delimiter
foo = Foo()
delimiter
sendcounter += 1
delimiter
ctxt.xpathFreeContext()
delimiter
tf.getnames()
delimiter
app.debug = True
delimiter
ax = plt.subplot(1, 1, 1)
delimiter
main()
delimiter
data += self.request.recv()
delimiter
self.Fit()
delimiter
f.truncate()
delimiter
cmd = nil
delimiter
raise_exception()
delimiter
name = models.CharField(max_length=255)
delimiter
print((k, len(v)))
delimiter
data.shape
delimiter
x = HtmlXPathSelector(response)
delimiter
()
delimiter
self.treestore = gtk.TreeStore(str)
delimiter
pprint(res)
delimiter
files_in_dir = os.listdir(path_to_dir)
delimiter
subprocess.check_output(arglist)
delimiter
h.update(chunk)
delimiter
ax.patches.pop(0)
delimiter
results = [r[1] for r in results]
delimiter
stdscr.move(y, x)
delimiter
i += 1
delimiter
cursor = connection.cursor()
delimiter
df1
delimiter
sys.path.append(os.path.abspath(dir_above_top_level))
delimiter
da = dict(zip(listanum, lista))
delimiter
diff = np.sum((points - median) ** 2, axis=-1)
delimiter
assert isinstance(d, dict) and len(d) == 1
delimiter
i = True
delimiter
l = len(string)
delimiter
_post_import_hooks[name].append(func)
delimiter
row_id,
delimiter
df = pandas.DataFrame(mydata)
delimiter
text = pystring.lower(pytext)
delimiter
self.dependency = dependency
delimiter
sendSock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, True)
delimiter
self._y
delimiter
self.y = y
delimiter
self.data.seek(offset)
delimiter
plt.plot(x, f2(x))
delimiter
ax2.bar(list(range(l)), One)
delimiter
atom = tables.Atom.from_dtype(x.dtype)
delimiter
l2 = [1, 2]
delimiter
X = [random.randint(0, 10) for _ in range(10 ** 7)]
delimiter
all(map(same_structure, a, b))
delimiter
app.add_window(newWindow)
delimiter
csv_file.seek(0)
delimiter
d[sub[0]] = sub
delimiter
write_output([process.stdout, process.stderr], outmap)
delimiter
today - DD
delimiter
new_bitmap = wx.EmptyBitmap(size, size)
delimiter
f.seek(savepos)
delimiter
matches = [val for key, val in d.items() if key.startswith(partial)]
delimiter
yrat = height / float(MAXSIZEY)
delimiter
loop = asyncio.get_event_loop()
delimiter
counts[i] = len([x for x in list(vals.values()) if x == i])
delimiter
root = int(math.ceil(start ** 0.5))
delimiter
result = [[]]
delimiter
c = Field()
delimiter
_GetShortPathNameW.restype = wintypes.DWORD
delimiter
False
delimiter
r = random.random()
delimiter
df = pd.DataFrame(data)
delimiter
h = hmac.new(key, msg, hashlib.sha1).digest()
delimiter
self.assertEqual(forty_two, 42)
delimiter
global_randstate.seed(42)
delimiter
mod = imp.new_module(name)
delimiter
set(myprocess(pattern, text))
delimiter
axis = [i for i in range(ndarray.ndim)][axis]
delimiter
print(key, dict[key])
delimiter
print(column.name)
delimiter
time.sleep(1)
delimiter
self.arg1 = arg1
delimiter
action(*actionargs)
delimiter
B = np.random.rand(N, D, R)
delimiter
self.__name__ = name
delimiter
r[r > 0]
delimiter
count += 1
delimiter
domain = request.get_host()
delimiter
ax2 = plt.subplot(122)
delimiter
pl.show()
delimiter
cov.erase()
delimiter
[] > -1
delimiter
trans.commit()
delimiter
g = 1 / (1 + exp(c * (b - t)))
delimiter
print(par1)
delimiter
self.sample.save(self.name, django_file, False)
delimiter
cur_num += 1
delimiter
True
delimiter
print(self.server.arg2)
delimiter
res = holt_predict(Y_observed, epoch_in, fcast_days)
delimiter
hi = len(a)
delimiter
self.d = {}
delimiter
data = Column(String)
delimiter
print(intersection)
delimiter
self.Inc()
delimiter
first, itertools.chain([first], iterable)
delimiter
df
delimiter
self.queue = set()
delimiter
outertype = ctypes.ARRAY(ctypes.POINTER(ctypes.c_float), 2)
delimiter
nextmonthdate = x.replace(year=x.year + 1, month=1)
delimiter
False
delimiter
a.__setitem__(y, a[x][0])
delimiter
j, i = np.unravel_index(k, image_temp.shape)
delimiter
plt.plot(series.index, series.values)
delimiter
abbrev = abbrev.lower()
delimiter
x0 = numpy.array([0.0, 0.0])
delimiter
a[i] = i
delimiter
x = np.linspace(0, 1, 100)
delimiter
mult = lambda x_y: x_y[0] * x_y[1]
delimiter
self.request.user = Mock()
delimiter
fig, axs = plt.subplots(2)
delimiter
self.meth = meth
delimiter
y = data[:, (1)]
delimiter
lines_needed = zip(tri, (tri[1], tri[2], tri[0]))
delimiter
print(x)
delimiter
deci_x = Decimal(1)
delimiter
output = tf.gather(input, [0, 2])
delimiter
Py_XDECREF(pValue)
delimiter
pathname = os.path.dirname(file)
delimiter
style_context = window.get_style_context()
delimiter
current_item, next_item = the_list[i], the_list[i + 1]
delimiter
print(b)
delimiter
mat.numRows()
delimiter
self.data = []
delimiter
matches = input == indices[:, (np.newaxis)]
delimiter
deleteArtofWarCounter[word]
delimiter
N = int(sys.argv[1])
delimiter
i = numpy.arange(len(r)).repeat(r)
delimiter
print(goodkeys)
delimiter
user = models.OneToOneField(settings.AUTH_USER_MODEL)
delimiter
username = User.objects.get(email=username).username
delimiter
t = np.linspace(0, 1, 5)
delimiter
template = lookup.get_template(uri)
delimiter
self.index = 0
delimiter
console.log(JSON.stringify(chg))
delimiter
ax[i].imshow(yourimage)
delimiter
prices = [match.group(1) for match in rx.finditer(teststring)]
delimiter
self.buf.seek(current_read_fp)
delimiter
a = np.zeros((new_rows, new_cols))
delimiter
print(round(root, -int(math.log(eps, 10))))
delimiter
d = Deleted()
delimiter
session = requests.Session()
delimiter
self.layout.addWidget(self.btn_cancel)
delimiter
known_good.add((predecessor, successor))
delimiter
xs = [1, 2, 5, 6]
delimiter
Foo()[42:81:7]
delimiter
remote_ip = x_real_ip or self.request.remote_ip
delimiter
smbus_read_byte.restype = c_int
delimiter
assert composite_actuator.get_position() == (0, 0)
delimiter
n = [bool(i) for i in n]
delimiter
b = str(num)
delimiter
tremove(L, M)
delimiter
tries += 1
delimiter
print(raw_string_with_quotes)
delimiter
r = NP.random.randint(0, 10, 4)
delimiter
g = np.random.rand(m)
delimiter
soup = BeautifulSoup(source)
delimiter
df.index.month
delimiter
reordered = []
delimiter
data = Column(String)
delimiter
idx = df_ctrl.index.intersection(df_test.index).sort_values(ascending=False)
delimiter
subseq_id_to_intervals_dict,
delimiter
print(msg)
delimiter
tmpdir
delimiter
result = re.match(identifier, test)
delimiter
self.a = A()
delimiter
metadata = MetaData()
delimiter
evals, evecs = np.linalg.eig(C)
delimiter
country = models.CharField(max_length=128)
delimiter
x = list(this_will_work())
delimiter
cosang, sinang = cos(theta), sin(theta)
delimiter
b_hidden = tf.Variable(tf.zeros([HIDDEN_NODES]))
delimiter
a.pop(5)
delimiter
menu.append(item_joke)
delimiter
signers = smime_object.get0_signers(X509.X509_Stack())
delimiter
grand = os.path.join(agrandie, infile)
delimiter
val[0]
delimiter
reshape = pd.concat(tmp, axis=1)
delimiter
hyp = (h.split() for h in hypfin)
delimiter
func.code
delimiter
file.write(xm)
delimiter
outputter.write(s, len(s))
delimiter
cropped = img[y1:y2, x1:x2]
delimiter
[rep_len(seq) for seq in seq_l]
delimiter
filename = filename[:-1]
delimiter
nsecs = dt.minute * 60 + dt.second + dt.microsecond * 1e-06
delimiter
PREPEND_WWW = False
delimiter
activity_date = db.DateProperty()
delimiter
plt.boxplot(X)
delimiter
base_pic.save(file=stream_out)
delimiter
mmc.serial.baudrate = baudrate
delimiter
qPlg = QPolygonF()
delimiter
print(data)
delimiter
allocationList[numBytes] = allocationList.get(numBytes, 0) + 1
delimiter
newVec = CountVectorizer(vocabulary=vec.vocabulary_)
delimiter
other_terms = find_terms(words[1:], max_words_per_term)
delimiter
f.write(chunk)
delimiter
cb = plt.colorbar(im, cax=cax)
delimiter
some_list = [True, False, True, False, False]
delimiter
self._sessions = sessionmaker(bind=self._conn)
delimiter
topkeys = set(sum([list(dic.keys()) for dic in dicts], []))
delimiter
plt.figure()
delimiter
instance = MyClass()
delimiter
print(a[:2, :2])
delimiter
config = ConfigParser.ConfigParser()
delimiter
fig = plt.figure(figsize=(12, 6))
delimiter
a.get(0)
delimiter
initial
delimiter
r, t = np.meshgrid(r, t)
delimiter
net.addConnection(FullConnection(hidden1, output))
delimiter
len_ab = len(a) + len(b)
delimiter
X - a
delimiter
birthplace = models.ForeignKey(Birthplace)
delimiter
self.a_fun = lambda : 1
delimiter
a * x ** 2 + self.b
delimiter
p = Point(x=11, y=22)
delimiter
email.send()
delimiter
compare(key1, key2)
delimiter
randomRange = list(range(len(listOfItems)))
delimiter
result = self.process(path)
delimiter
self.id == other.id
delimiter
a == 0
delimiter
print(response_two.content)
delimiter
0
delimiter
img.save(outfilename)
delimiter
err2 = r2 - r4
delimiter
True
delimiter
subset = data[(col1 == val1) & (col2 == val2)]
delimiter
data
delimiter
file.seek(sequence_end, 0)
delimiter
p = Person()
delimiter
np.subtract.outer(x, x)[np.tril_indices(x.shape[0], k=-1)]
delimiter
cache = {}
delimiter
s1.commit()
delimiter
intersect_with_key(fs1, fs2, key=str.lower)
delimiter
cxns.remove(node)
delimiter
sock.bind((dev_id,))
delimiter
data.astype(int16)
delimiter
self.initUI()
delimiter
y = np.arange(100)
delimiter
mx.mask = ma.nomask
delimiter
_pix_create.restype = c_void_p
delimiter
True
delimiter
response = {}
delimiter
self.func = func
delimiter
_R = np.random.uniform(-1, 1, n * (n - 1) / 2)
delimiter
Point.ORIGIN = Point()
delimiter
os.system(osCommandString)
delimiter
data = np.random.normal(0, 1, (10, 10))
delimiter
plt.spy(M)
delimiter
m.sort()
delimiter
fieldnames = [f[0] for f in c.description]
delimiter
Function(lambda x: self(x) / other(x))
delimiter
0
delimiter
Base.metadata.drop_all(engine)
delimiter
c = C()
delimiter
mask = binary_matrix[idx[:, (0)], idx[:, (1)]] == 1
delimiter
x + y
delimiter
dt = naive_dt.replace(tzinfo=FixedOffset(offset))
delimiter
_chord = self.Chord
delimiter
Thread(target=foo)
delimiter
hash(self.args)
delimiter
i = random.randint(1, 5)
delimiter
self.initial_value = 1
delimiter
L2 = [1, 2]
delimiter
buttons.pop(2)
delimiter
Done
delimiter
print(next_friday)
delimiter
self.setLayout(layout)
delimiter
f.close()
delimiter
result = []
delimiter
window.refresh()
delimiter
barbarfoobarmoopmoop
delimiter
True
delimiter
h, w = im_th.shape[:2]
delimiter
response.url = req.url
delimiter
uniqList = list({x.tag: x for x in myList}.values())
delimiter
mlo, mhi = map.min(), map.max()
delimiter
self.ctr += 1
delimiter
print(len(a) - index - 1)
delimiter
numpy.array(A)[2] = 2
delimiter
print(key)
delimiter
a = math.radians(angle)
delimiter
name = Column(String(50))
delimiter
application.pc.connect()
delimiter
bool(set(fruit_dict1).intersection(fruits))
delimiter
printable = set(string.printable)
delimiter
self.wfile.write(result)
delimiter
plt.show()
delimiter
value = event.widget.get()
delimiter
value
delimiter
arr_x = arr[:, :, (np.newaxis), (np.newaxis), :]
delimiter
browser = webdriver.Firefox(firefox_binary=binary, proxy=proxy)
delimiter
my_diff = np.diff(my_array) > 1
delimiter
self._n = 0
delimiter
self.buf.write(*args, **kwargs)
delimiter
nextlevel.append(n.left)
delimiter
0 * F - 10 * C
delimiter
outdatav[i] = indatav[i] * 2.0
delimiter
browser.close()
delimiter
push((2 ** 2, 2, 2))
delimiter
task_data = input_q.get()
delimiter
fixed_comments.append(fixed_text)
delimiter
cursor.execute(sql)
delimiter
line.set_color(colorArray[i])
delimiter
sys.argv = sys._argv
delimiter
mask = np.sign(X)
delimiter
prod = tree.productions()
delimiter
self.stackVals.append(listTuple)
delimiter
raise
delimiter
result = _get_date(region)
delimiter
print(is_new_style(int))
delimiter
model = Waypoint
delimiter
sys.getsizeof(foo1)
delimiter
print(a)
delimiter
bts = l[x][:1024]
delimiter
print(list(find_with_dupe(l)))
delimiter
print(name)
delimiter
dic = dict.fromkeys(lis, [])
delimiter
width = horizontal[i + 1][1] - h[1]
delimiter
api = twitter_api()
delimiter
b.build_scripts
delimiter
output
delimiter
fmt.format(self)
delimiter
saver.restore(sess, path.model_checkpoint_path)
delimiter
self.foo = foo
delimiter
lists = [[x[0] for x in tup] for tup in lists]
delimiter
box = cv2.boundingRect(curve)
delimiter
verify(good_cert, sig, content, digest)
delimiter
newip = str(request.remote_addr)
delimiter
subprocess_call = Popen([call], shell=True, stdout=PIPE, stderr=PIPE)
delimiter
c = numpy.random.random((1000, 1000)).astype(numpy.float96)
delimiter
print(product)
delimiter
author = models.ForeingKey(Author, required=True)
delimiter
rng.freqstr
delimiter
ax.broken_barh([(midpoint - 0.01, 0.02)], (perc[5], perc[6] - perc[5]))
delimiter
object.__setattr__(self, _d, (x, y))
delimiter
x = y
delimiter
obj = get_obj()
delimiter
y = y.flatten()
delimiter
plt.grid(True)
delimiter
self._foo
delimiter
print(z)
delimiter
self.subdomains = domain_parts[:-1]
delimiter
_decorator
delimiter
self.file_size
delimiter
artists.append(ax.add_artist(ab))
delimiter
Session = scoped_session(sessionmaker())
delimiter
t.join()
delimiter
a.some.__self__
delimiter
-b.py
delimiter
_key = list(self.keys())[key]
delimiter
dd2here.min()
delimiter
self._ethernet = copy.deepcopy(pbuffer)
delimiter
sums.append(a * b)
delimiter
[(u.value, u.meta) for u in set([a, c, e]).intersection(set([b, d, f]))]
delimiter
status = MPI.Status()
delimiter
reactor.callLater(1, self.sendHello)
delimiter
print(repr(L))
delimiter
print(asking)
delimiter
temp = np.cumsum(np.random.random(num) - 0.5)
delimiter
(ser > 0).mean()
delimiter
s = a.shape
delimiter
rows[::int(1 / proportion)]
delimiter
my_classification = sess.run(tf.argmax(y, 1), feed_dict={x: [images[0]]})
delimiter
func(self, *(args + parameters), **kw)
delimiter
range_prod(lo, mid) * range_prod(mid + 1, hi)
delimiter
t2 = np.linspace(1e-10, 1e-05, 1000000)
delimiter
C[::2, :] = A
delimiter
print(f.__class__)
delimiter
axes = np.arange(N)
delimiter
t[0][0] = 5
delimiter
sys.stdin = os.fdopen(fd)
delimiter
keys[1], keys[2] = keys[2], keys[1]
delimiter
cppcode.init(address, port)
delimiter
self._data = []
delimiter
num = num / base
delimiter
copen.errcheck = errcheck
delimiter
p.close()
delimiter
t = ET.parse(sio(raw_text))
delimiter
df
delimiter
x[..., (False)]
delimiter
thresh = cv2.adaptiveThreshold(gray, 255, 1, 1, 11, 2)
delimiter
code = marshal.load(file)
delimiter
match = True
delimiter
filename = sys.argv[1]
delimiter
self.wheel.delete()
delimiter
df2,
delimiter
dt_now = datetime.now()
delimiter
recurse(a, b, rest)
delimiter
d.foo
delimiter
self.canvas.SetMinSize((self.canvas.w, self.canvas.h))
delimiter
x + x
delimiter
gray = cv.cvtColor(image, cv.COLOR_BGR2GRAY)
delimiter
start_time = time.time()
delimiter
1
delimiter
label_set = set([category[0] for category in in_list])
delimiter
sys.getwindowsversion()
delimiter
df
delimiter
next(it)
delimiter
self.fingerprints.add(fp)
delimiter
xes.append(x)
delimiter
labels = vectorizer.get_feature_names()
delimiter
cess_sents = cess.tagged_sents()
delimiter
small_range = list(range(10 ** 5))
delimiter
path = request.get_full_path()
delimiter
print(firstMatch.start())
delimiter
metadata.reflect(bind=db)
delimiter
self._write(file, self._root, encoding, {})
delimiter
self._taskqueue = Queue.Queue()
delimiter
print(list1, list2, p)
delimiter
raise AppropriateError
delimiter
moo = np.zeros((size, size), dtype=np.float)
delimiter
cls
delimiter
local_port = serv.socket.getsockname()[1]
delimiter
dumps(js)
delimiter
filename, file_ext = splitext(basename(disassembled.path))
delimiter
y = np.arange(10)
delimiter
file.seek(0)
delimiter
plt.show()
delimiter
serialized_str = base64.b64encode(pickle.dumps(mydict))
delimiter
r[4::2] = [False] * len(r[4::2])
delimiter
st[ind:] * int(st[:ind])
delimiter
icondata = base64.b64decode(icon)
delimiter
__instance = []
delimiter
age = StringField()
delimiter
cv2.waitKey(0)
delimiter
get_user_model().objects.filter(id=user.id)
delimiter
print(df)
delimiter
phone = serializers.PrimaryKeyRelatedField(many=True, read_only=True)
delimiter
mask = cv2.morphologyEx(img_bw, cv2.MORPH_CLOSE, se1)
delimiter
pencolor(colour)
delimiter
print(df)
delimiter
some_list[0] = False
delimiter
ax1 = subplot(211)
delimiter
list1 = list1[:max_size]
delimiter
cursor = dbapi_con.cursor()
delimiter
d[col] = line[-1]
delimiter
num2word.to_card(1555)
delimiter
x = {i: set(range(1, 7)) for i in range(1, 7)}
delimiter
channel.shutdown_write()
delimiter
make_plot()
delimiter
self.myobj = origobj
delimiter
driver = webdriver.Firefox(capabilities=d)
delimiter
DEBUG = False
delimiter
r = s.post(url, data=payload)
delimiter
crnt[k] = {}
delimiter
classification = sess.run(tf.argmax(y, 1), feed_dict={x: [img]})
delimiter
jsonify(**course)
delimiter
id = Column(Integer, primary_key=True)
delimiter
a = RecursiveDict()
delimiter
values.append(value)
delimiter
dis.dis(g)
delimiter
a[0] = 1
delimiter
file.close()
delimiter
print(line.project(p))
delimiter
peer = serial.Serial()
delimiter
dis.dis(myFunc)
delimiter
accumulationList
delimiter
it = iter(s)
delimiter
self.clear()
delimiter
resp = opener.open(url)
delimiter
loop = asyncio.get_event_loop()
delimiter
exit(2)
delimiter
x, y, z
delimiter
zf.close()
delimiter
dict_x = collections.defaultdict(list)
delimiter
profile = request.user.get_profile()
delimiter
new_data2 = np.array(data)
delimiter
dct[x]
delimiter
work.append(nope)
delimiter
context = etree.iterparse(reader, events=events)
delimiter
list_of_list = []
delimiter
someblock = d.popleft()
delimiter
last_number = 0
delimiter
average = sum_of_grades / len(my_list)
delimiter
self.cond.notify()
delimiter
self.start = start
delimiter
lines = fin.readlines()
delimiter
SE_Lat = [Lat[x] for x, y in enumerate(Lon) if y == min(Lon)]
delimiter
df
delimiter
allocationList[numBytes] = allocationList.get(numBytes, 0) + 1
delimiter
coords[2] += 1
delimiter
ratio = 2 * (value - minimum) / (maximum - minimum)
delimiter
t1.start()
delimiter
page = f.read()
delimiter
iter_mystate = iter(getstate, object())
delimiter
getattr(obj, proxy.value_attr)
delimiter
0
delimiter
pprint.pprint(cluster_facts)
delimiter
s.append(string[i:i + 1])
delimiter
PREPEND_WWW = True
delimiter
self.queue = queue
delimiter
dims = np.maximum(array_2d.max(0), row) + 1
delimiter
mock_redis_set.side_effect = set
delimiter
sample2 = []
delimiter
wk = dt.isocalendar()[1]
delimiter
confint.append([np.nan, np.nan])
delimiter
z = theano.tensor.zeros((idx.shape[0], n_val))
delimiter
d[tup[0]] += tup[1],
delimiter
sorted_idx = np.lexsort(Ar.T)
delimiter
True
delimiter
print(cleaned_email_list)
delimiter
median()
delimiter
print(output)
delimiter
column = np.asarray(a.getcol(2).todense()).reshape(-1)
delimiter
tree.pop(nodes[0])
delimiter
output_ws.write(rindex, cindex, input_cell.value, red_background)
delimiter
next(b)
delimiter
x1 = np.random.randn(100)
delimiter
combobox = QtGui.QComboBox()
delimiter
name = name.lower()
delimiter
row = np.array([[0.1, 0.2]])
delimiter
Serial.flush()
delimiter
ManufacturerId = wo
delimiter
giter = groupby(sorted(L, key=keyfunc), keyfunc)
delimiter
ds = [vec_distance(p1, p2) for p1, p2 in it.combinations(s, r=2)]
delimiter
list1 = [1, 0, 1, 0, 0, 0]
delimiter
func()
delimiter
self.cbar.set_clim(self.zmin, self.zmax)
delimiter
df.new_group.iat[n] = df.new_group.iat[n - 1] + 1
delimiter
result = eval(s)
delimiter
csvfile = StringIO.StringIO()
delimiter
jsonify(dict(data=[no1, no2]))
delimiter
obj = getattr(module, name)
delimiter
loads(j, object_hook=as_python_object)
delimiter
request.url
delimiter
a[0]
delimiter
ax4 = plt.axes([left, 0.1, width, 0.09], sharex=ax2)
delimiter
r = requests.post(url, files=files)
delimiter
print(type(b))
delimiter
hh, locx, locy = scipy.histogram2d(xdat, ydat, range=xyrange, bins=bins)
delimiter
ConvexHull = cv2.convexHull(c)
delimiter
data = np.random.randint(10, size=(5, 10))
delimiter
self.add(node1, node2)
delimiter
inline = p.stdout.readline()
delimiter
df2 = pd.DataFrame()
delimiter
sns.set()
delimiter
newarr, revchoice = tmp[:cut], tmp[cut:]
delimiter
y.cumsum(axis=0, out=y)
delimiter
self.level += 1
delimiter
lines.distance(point).min()
delimiter
pipe = Popen(path, stdout=PIPE)
delimiter
print(row)
delimiter
(x < 8) & (x > 2)
delimiter
rest = list(set(a) - set(c))
delimiter
old_window[0].focus(0)
delimiter
n = n - weight
delimiter
window.show()
delimiter
im = cv2.cvtColor(im2, cv2.COLOR_BGR2GRAY)
delimiter
full = str.maketrans(west, east)
delimiter
title.translate(title_unicode_trans)
delimiter
demo(root)
delimiter
m.group(0).capitalize()
delimiter
seen.add(f)
delimiter
msg = email.message_from_string(data[0][1])
delimiter
data = zip_file.read(f)
delimiter
point_tree = spatial.cKDTree(points)
delimiter
b.append(x)
delimiter
form = BarForm
delimiter
total += y
delimiter
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
delimiter
x = np.hstack((np.ones((n, 1)), np.matrix(x)))
delimiter
s.strip(string.punctuation)
delimiter
s
delimiter
new_list = []
delimiter
indptr = np.concatenate(([0], np.cumsum(label_features)))
delimiter
processHeader(next(f))
delimiter
pydoc.pager(text)
delimiter
c += D.min()
delimiter
s[4:-4]
delimiter
y = func(x)
delimiter
simplest_fraction_in_interval(x - e, x + e)
delimiter
V = np.random.rand(n, p)
delimiter
print(result)
delimiter
on_draw()
delimiter
args = [iter(iterable)] * n
delimiter
next10k = list(islice(f, 10000))
delimiter
df[~df.eq(df.max(axis=1), axis=0)] = -1
delimiter
program = sys.argv[1]
delimiter
pylab.show()
delimiter
xs = np.random.randn(100, 5)
delimiter
test_set = [flatten_image(matrix_image(image)) for image in test_images]
delimiter
print(df)
delimiter
axcb = fig.colorbar(lc)
delimiter
colors = dict([(k, (random(), random(), random())) for k in list(data.keys())])
delimiter
bind_layers(PPPoED, PPPoE_Tag, type=1)
delimiter
df1 = df1.swaplevel(0, 1, axis=1).sort_index(axis=1)
delimiter
x = a[1]
delimiter
len(values)
delimiter
kidshair[mypath]
delimiter
df
delimiter
self.name = name
delimiter
ax1 = df.cumsum().plot()
delimiter
my_list = []
delimiter
X = np.matrix([[0, 1, 4, 0]]).T
delimiter
b = random.random((5, 10, 2))
delimiter
cargs = [deepcopy(arg) for arg in args]
delimiter
array_of_strings[0, 0]
delimiter
groups = collections.defaultdict(list)
delimiter
pil_im = Image.open(img)
delimiter
x += 1
delimiter
YSIZE = 2
delimiter
total_seconds = int(turnaround.total_seconds())
delimiter
cimg = np.zeros_like(img)
delimiter
b2 = np.all(frame > PSigma2, axis=-1)
delimiter
out = groupCoords[(col0_mask & col1_mask).any(1)]
delimiter
plt.scatter(X, Y, s=data)
delimiter
S = np.random.randn(N, N)
delimiter
a = np.zeroes(shape=(5, 5), dtype=float)
delimiter
graph = dict((v, list()) for v in list(vertices.keys()))
delimiter
1 == 1
delimiter
count += 1
delimiter
i = bisect.bisect_right(a, x)
delimiter
plt.xticks(x, time)
delimiter
interpreter.setOut(out)
delimiter
cursor.execute(sql)
delimiter
t.join()
delimiter
pattern.search(s)
delimiter
print(i)
delimiter
logging.basicConfig(level=logging.INFO)
delimiter
p_values = 1 - scipy.special.ndtr(z_scores)
delimiter
4294967295
delimiter
points = []
delimiter
it = re.finditer(regex, s)
delimiter
time.sleep(0.2)
delimiter
json.dump(*args, **kwargs)
delimiter
fig = gcf()
delimiter
PyErr_SetObject(PyExc_IndexError, indexerr)
delimiter
ModelMemo = Column(Unicode(255), nullable=True)
delimiter
pill2kill.set()
delimiter
n.write(i)
delimiter
im = ax.matshow(C, cmap=cm.gray_r, norm=LogNorm(vmin=0.01, vmax=1))
delimiter
cxml2 = xml_string_io2.getvalue()
delimiter
server_sock.listen(4)
delimiter
zf.write(path)
delimiter
self.__fn(*args, **kwargs)
delimiter
field = self.fields.get(field_name)
delimiter
f = pyplot.figure()
delimiter
print(p.primes_dict[i])
delimiter
{(i ** 2) for i in range(5)}
delimiter
x = set(range(10))
delimiter
z = np.zeros_like(x)
delimiter
a.pop()
delimiter
M = np.random.randint(2, size=(h * iters, n))
delimiter
False
delimiter
axe_x.extend(time_list[np.arange(j + n, j + (time_interval - n))])
delimiter
self._float_eq(a, b)
delimiter
curl.setopt(curl.WRITEFUNCTION, response_buffer.write)
delimiter
prevnl = nextnl
delimiter
ax.set_xticklabels(xlabels)
delimiter
[1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
delimiter
ar[0] = np.arctan2(vect[1], vect[2])
delimiter
f
delimiter
y_formatter = matplotlib.ticker.ScalarFormatter(useOffset=False)
delimiter
c1 = plt.contour(X, Y, abs(np.angle(Z) * 180 / np.pi), levels=levels)
delimiter
t = threading.Thread(target=process, args=(fname,))
delimiter
self
delimiter
print(post.user.email)
delimiter
stack.append(c)
delimiter
jv(n, z) + 1j * yv_imcut(n, z)
delimiter
data_stream = Popen(mycmd, stdout=PIPE)
delimiter
smallerThan = lambda x, y: [i for i in x if i < y]
delimiter
frame.append(162)
delimiter
pip - sync
delimiter
cub_right.append(points[0])
delimiter
object.__new__(cls)
delimiter
df = DataFrame(columns=list(range(10)), index=list(range(10)))
delimiter
best_without = best_score_for(items, segments[1:], subtotal)
delimiter
x - 1, y - 1
delimiter
signal.signal(signal.SIGALRM, got_alarm)
delimiter
print(r.reason)
delimiter
slither / slither / impl.py
delimiter
n = parser.parse_args(extra)
delimiter
x = copy.copy(y)
delimiter
request = mechanize.Request(loginURL)
delimiter
content = val.group(1).strip()
delimiter
args = parser.parse_args()
delimiter
indices = [(q * i + min(i, r)) for i in range(n + 1)]
delimiter
self.meth = meth
delimiter
x0, y0, x1, y1 = min(X), min(Y), max(X), max(Y)
delimiter
max_chunk_size = 1000000
delimiter
os.umask(2)
delimiter
100
delimiter
candidates_indexes = [(0) for _ in bases]
delimiter
mod
delimiter
self.after(100, lambda angle=angle + 10: self.rotate(angle))
delimiter
app.processEvents()
delimiter
deltaY = P2_y - P1_y
delimiter
df
delimiter
pl.figure(figsize=(10, 5))
delimiter
b1.append(lines[0])
delimiter
dis.dis(g)
delimiter
self.oldtrace = sys.gettrace()
delimiter
pop_conn.quit()
delimiter
records[key] = 0
delimiter
and_also_this()
delimiter
self.input_queue = input_queue
delimiter
data = np.ones(n_samples * n_features)
delimiter
s = a.argsort()
delimiter
CyABase(PyObject * obj)
delimiter
[x for x in tup if x]
delimiter
df_Quota = df_Quota.append(FinalDataframe)
delimiter
heapq._heapify_max(listForTree)
delimiter
self.m = [[(row + col / 10.0) for col in range(4)] for row in range(4)]
delimiter
out.append((key, elems, i))
delimiter
host = MYSERVER
delimiter
len(self._result_cache)
delimiter
plt.plot(X, Y)
delimiter
len(self._s)
delimiter
F0 = F(x0, a, b)
delimiter
plt.plot(tiempo, senial)
delimiter
arguments = cgi.FieldStorage()
delimiter
len(self.list)
delimiter
data = trends1[0]
delimiter
mask = np.all(np.abs(r) < 1e-06, axis=1)
delimiter
data2 = np.ma.zeros((num_rows, num_columns, num_datasets))
delimiter
column_indices = (X + indices[:-1]).ravel()
delimiter
db = engine.connect()
delimiter
parser = etree.XMLParser(remove_blank_text=True)
delimiter
bit.append(x % 2)
delimiter
rectangle(res, box, color, 5)
delimiter
ring = 0
delimiter
driver = webdriver.Chrome(desired_capabilities=caps)
delimiter
a = object()
delimiter
b, g, r, a = image.T
delimiter
print(update_doc(a))
delimiter
serializer = TimelineSerializer(queryset, many=True)
delimiter
df.replace(to_replace=sorted(list(set(letter))), value=sorted(list(set(num))))
delimiter
page = document.get_page(i)
delimiter
input = input()
delimiter
a = os.urandom(64)
delimiter
data = self._get_bool_data()
delimiter
ax1 = plt.axes([left, 0.5, width, 0.45])
delimiter
settings = get_project_settings()
delimiter
minutes += 1
delimiter
C = np.dot(np.exp(A - max_A), np.exp(B - max_B))
delimiter
self.sendata(d)
delimiter
self.omega_m = omega_m
delimiter
self.id
delimiter
box2 = [2, 2]
delimiter
date = datetime.date(start.year, start.month + j, 1)
delimiter
mpl.xkcd()
delimiter
inv_cov = np.linalg.inv(cov * scotts_factor ** 2)
delimiter
False
delimiter
matches.append(pattern)
delimiter
app = App(root)
delimiter
MyClass.x = x
delimiter
plt.savefig(plot_file_name)
delimiter
self.connected = True
delimiter
f, ax = plt.subplots(1, 1)
delimiter
ctx.rotate(theta)
delimiter
takefrom = allix.copy()
delimiter
print(fp.read())
delimiter
data = np.random.random((N, 4))
delimiter
sigma = np.dot(inputs, inputs.T) / inputs.shape[1]
delimiter
pd.__version__
delimiter
mail1.config()
delimiter
a[20:] = [(0) for aa in a[20:]]
delimiter
ws.fit_to_pages(pages_horz, pages_vert)
delimiter
print(x)
delimiter
list.__getitem__(self, index % len(self))
delimiter
foo = staticmethod(foo)
delimiter
console_client.connect_to_console()
delimiter
about = About.objects.get(id=1)
delimiter
p.feed(data)
delimiter
d = DictConditional(lambda x: x != 0)
delimiter
l = []
delimiter
b = collections.OrderedDict.fromkeys([6, 20, 1])
delimiter
s = []
delimiter
parser.parse_args()
delimiter
wait.until(ExpectedConditions.numberOfWindowsToBe(2))
delimiter
df.Date = pd.to_datetime(df.Date)
delimiter
random.choice(self.primes[ai:ai + bi])
delimiter
startindex = 0
delimiter
c = sum((Counter(**{k: v}) for k, v in lst), Counter())
delimiter
process_data(piece)
delimiter
loop = asyncio.get_event_loop()
delimiter
func
delimiter
self.X.append(i)
delimiter
relation = lambda x, y: (x - y) % 4 == 0
delimiter
attachment = MIMEImage(fp.read(), _subtype=subtype)
delimiter
id = int(s[1])
delimiter
xygood = np.array((x[~a.mask], y[~a.mask])).T
delimiter
a = (ctypes.c_ulong * (len(ba) / 8)).from_buffer(ba)
delimiter
self._pixmap = QtGui.QPixmap(self.label.pixmap())
delimiter
shortset.add(longstring[i:i + length_shortstring])
delimiter
lst[-1]
delimiter
1
delimiter
True
delimiter
mentions = api.mentions_timeline(count=1)
delimiter
cb.update_ticks()
delimiter
a[a[k]] = k
delimiter
list_
delimiter
self.another_field
delimiter
dirname = os.path.dirname(name)
delimiter
bins = pd.cut(df.x, bin_edges, right=False)
delimiter
s = list(range(100))
delimiter
x_field = forms.CharField()
delimiter
raise self._exc_info[1].with_traceback(self._exc_info[2])
delimiter
interior_id = canvas.create_window(0, 0, window=interior, anchor=NW)
delimiter
x = np.random.normal(0, 1, 100).cumsum()
delimiter
myTests.py
delimiter
p // math.factorial(k)
delimiter
query = dict(urlparse.parse_qsl(url_parts[4]))
delimiter
result = Result(5, 6)
delimiter
rows = iter(table)
delimiter
platform.processor()
delimiter
poller = zmq.Poller()
delimiter
{}
delimiter
self.inverse = {}
delimiter
xmax = data.max()
delimiter
nb = np.where(y > 200)
delimiter
seen = set()
delimiter
outer = gridspec.GridSpec(2, 1, height_ratios=[1, 6])
delimiter
renderPDF.draw(d, p, 1, 1)
delimiter
d[1][0] = d
delimiter
[words[n] for n in list_out]
delimiter
mantissas, binaryExponents = np.frexp(absx)
delimiter
[sum(values) for values in zip(*items)]
delimiter
traverse(bfs(g, start_node), process)
delimiter
lengs = numpy.array([0] + [len(l) for l in polys])
delimiter
c.fetchall()
delimiter
viewer.terminate()
delimiter
res = [f for f in os.listdir(path) if not m.search(f)]
delimiter
increment()
delimiter
numbers = list(range(2, 100))
delimiter
print(line)
delimiter
0
delimiter
work.append(nope)
delimiter
X = np.asanyarray(X)
delimiter
Y = np.zeros_like(Z)
delimiter
df
delimiter
df
delimiter
N = 20
delimiter
print(to_case(input_str_lower, case_map))
delimiter
print(len(list(combs(elts))))
delimiter
Count_Col = df.shape[1]
delimiter
nwords = len(wordslist)
delimiter
p.start()
delimiter
args = docopt.docopt(__doc__)
delimiter
lis = []
delimiter
f.close()
delimiter
PyEval_InitThreads()
delimiter
self.cache = {}
delimiter
a, b, c
delimiter
items_list = list(Items.objects.all())
delimiter
imputed = df[mask]
delimiter
4.56006002426
delimiter
prevnl = -1
delimiter
[easy_install]
delimiter
pypreprocessor.parse()
delimiter
self.arrays[j][i + shift] = v
delimiter
session = Session()
delimiter
self._paths.extend([child] + path for path in child.paths)
delimiter
out = np.zeros(shape)
delimiter
pd.Panel(d).to_frame().reset_index()
delimiter
json.dump(db, fh)
delimiter
base_file, ext = os.path.splitext(filename)
delimiter
ipdb.set_trace(context=21)
delimiter
self.timer = threading.Timer(timeout, timer_callback)
delimiter
wb = Workbook()
delimiter
bool(self.outbox)
delimiter
A[n]
delimiter
max_idx = np.argmax(l)
delimiter
pid = os.fork()
delimiter
self.key
delimiter
link.parent.insert(index + 1, br)
delimiter
html_source = driver.page_source
delimiter
response = urllib.request.urlopen(request, encoded_params)
delimiter
o.setCallback(foo)
delimiter
print(b)
delimiter
print(msg)
delimiter
SYSTEM_HZ = round(1 / (res.tv_sec + res.tv_nsec / 10.0 ** 9))
delimiter
getcontext().prec = 6
delimiter
val = self._get_val_from_obj(obj)
delimiter
new_a.append(sorted(group))
delimiter
textwrap.indent
delimiter
all_chars = (chr(i) for i in range(1114112))
delimiter
[nosetests]
delimiter
canvas[start_pt[1]:end_pt[1] + 1, start_pt[0]:end_pt[0] + 1] = 1
delimiter
logger = logging.getLogger(__name__)
delimiter
mu2 = 1
delimiter
cherrypy.server.socket_port = 80
delimiter
kind1 = params.get(cls._KIND1_PARAM)
delimiter
melt_second_half = pd.melt(second_half)
delimiter
df1 = df1.astype(bool)
delimiter
(sortedLst[index] + sortedLst[index + 1]) / 2.0
delimiter
a = {}
delimiter
other_weirder_list = [list(line) for line in first_list]
delimiter
calendar = defaultdict(list)
delimiter
y = numpy.outer(numpy.sin(u), numpy.sin(v))
delimiter
False
delimiter
conn = adodbapi.connect(connstring)
delimiter
self.rules[1].link_extractor.allow_domains.remove(hostname)
delimiter
mx = ma.masked_array(a, mask=(a < -100) | (a > 100))
delimiter
fig = figure()
delimiter
newmodule = __import__(key)
delimiter
print(df.columns)
delimiter
d = defaultdict(int)
delimiter
int.__get__
delimiter
split(bezier_points, len(bezier_points) / desired_multiplicity, axis=0)
delimiter
array([22, 106, 100])
delimiter
lens = [len(x) for x in args]
delimiter
deleterender_window, iren
delimiter
print(elem.text)
delimiter
tform = blended_transform_factory(ax.transData, ax.transAxes)
delimiter
removed_KP.append(item)
delimiter
gain / denominator
delimiter
link.next_sibling
delimiter
d.update(abc)
delimiter
distance = calculateDistance(2, 4, 6, 8)
delimiter
kernel.timer = QtCore.QTimer()
delimiter
slice2 = tuple(slice2)
delimiter
---a / python / pyspark / daemon.py
delimiter
{{location}}
delimiter
reversel
delimiter
models.py
delimiter
b = calc_b(a, d1)
delimiter
self.a1a2_edit.setText(str(product))
delimiter
hashes = [hash(o) for o in olist]
delimiter
step = min(step, df.shape[1])
delimiter
combs = 5165700
delimiter
x = np.bincount(a, weights=b)
delimiter
print(inspect.stack()[0][0].f_code.co_name)
delimiter
photo = deferred(Column(Binary))
delimiter
sy = arr.shape[1]
delimiter
self.parent = parent
delimiter
print(df)
delimiter
n = sum(divmod(n, 10))
delimiter
d_sum = {}
delimiter
USE_L10N = True
delimiter
trie = make_trie(list(dictionary.keys()))
delimiter
invf._update(record[name][ftmp], val)
delimiter
endpos = 0
delimiter
prevLine = line
delimiter
print(x)
delimiter
self.traceback.append(self.col_seq[j - 1])
delimiter
user_store.complete()
delimiter
hello()
delimiter
8, 1, 8, 1
delimiter
squareroot = math.sqrt(self.start)
delimiter
tree
delimiter
self.search_box.send_keys(query)
delimiter
perms = (permutations(given_word, i) for i in range(4, len(given_word) + 1))
delimiter
utc_time = datetime.utcfromtimestamp(epoch_time)
delimiter
[[array2 for _ in row] for row in array1.tolist()]
delimiter
not self == other
delimiter
plt.imshow(spectrum_matrix)
delimiter
MyFancyNumber(5) + 2
delimiter
transaction.savepoint(True)
delimiter
flips += 1
delimiter
asyncore.loop()
delimiter
Segments[2]
delimiter
first_name = models.CharField(max_length=50)
delimiter
PIPE, stdout = subprocess.PIPE, stderr = subprocess.PIPE, cwd = os.curdir,
delimiter
fast_real(56.0)
delimiter
sys.stdout = MyClass()
delimiter
classifications = []
delimiter
mylist = cpickle.loads(string_from_file)
delimiter
a[-mask]
delimiter
8, 8, 1, 8
delimiter
os.linesep
delimiter
ax = subplot(111)
delimiter
print((tree, nodes[0]))
delimiter
do_stuff()
delimiter
Py_INCREF(array_wrapper)
delimiter
d[k] = d.get(k, 0) + v
delimiter
xmlOutput += self.dirToXML(os.path.join(directory, item))
delimiter
fh = logging.FileHandler(logf)
delimiter
rank
delimiter
arr.nbytes
delimiter
dy_cell = max(abs(lattice_vectors[0][1]), abs(lattice_vectors[1][1]))
delimiter
df
delimiter
arg = sys.argv.pop(0)
delimiter
a = numpy.zeros(5)
delimiter
print((unique_neighbors, neighbor_counts / neighbor_counts.sum() * 100))
delimiter
i = int(i)
delimiter
zip(shapes, colors)
delimiter
the_page = response.read()
delimiter
[line.rstrip() for line in c if not line.isspace()]
delimiter
it1 = iter(lis)
delimiter
b = tf.shape(a)
delimiter
r, c = np.where((df1 > s).T)
delimiter
numpy.iinfo(numpy.uint64).max
delimiter
h.close()
delimiter
is_sub(B, A)
delimiter
gg = g.groupby(0)
delimiter
value
delimiter
myOutput.close()
delimiter
R, C = np.triu_indices(arr.shape[0], 1)
delimiter
chosen_lists.append(stg)
delimiter
a
delimiter
fig = pl.figure(1)
delimiter
f.write(mystruct)
delimiter
b = [5, 6, 7, 8, 9]
delimiter
columns = [c.key for c in class_mapper(model.__class__).columns]
delimiter
b = [4, 5, 6]
delimiter
item.append(field)
delimiter
counts = np.bincount(pos)
delimiter
root = __import__(modulename)
delimiter
df = df.stack()
delimiter
logOutput = QTextEdit(parent)
delimiter
other_fd.write(read_slice)
delimiter
not relative.startswith(os.pardir + os.sep)
delimiter
time_shift = argmax(abs(c))
delimiter
group = parser.add_mutually_exclusive_group()
delimiter
app = Klein()
delimiter
clean_array = [element for element in my_array if value_to_remove != element]
delimiter
ctx.select_font_face(face, cairo.FONT_SLANT_NORMAL, cairo.FONT_WEIGHT_NORMAL)
delimiter
d = c.CastToDerived(b)
delimiter
print(result)
delimiter
print(time.time() - t, end.shape)
delimiter
self._x = value
delimiter
np.random.seed(1)
delimiter
x = np.arange(12, dtype=float)
delimiter
x = list(range(N))
delimiter
print(get_ax_size(ax))
delimiter
o.stop()
delimiter
a = Object()
delimiter
print(globalVariable)
delimiter
kernel.execute(command)
delimiter
(row + [v] for row in subtable for v in [0, 1])
delimiter
lock.release()
delimiter
type.__new__(cls, name, bases, dct)
delimiter
middle_name = models.CharField(max_length=80, blank=True, null=True)
delimiter
stdio.StandardIO(FileReader(filename))
delimiter
deletedf[1]
delimiter
tag = etree.fromstring(XML, parser)
delimiter
print(line)
delimiter
Model.objects.count() == 1
delimiter
deletechunk[:]
delimiter
message.getHeader().getField(qfSendingTime)
delimiter
simplify(abs(exp(I)).expand(complex=True))
delimiter
null_ptr[5]
delimiter
combinations = [c for c in itertools.combinations(axis_labels, i)]
delimiter
curl.setopt(pycurl.WRITEFUNCTION, output.write)
delimiter
inspect.ismethod(Foo.baz)
delimiter
title.getparent().remove(title)
delimiter
all = N.ma.zeros((maxLen,) + dSets[0].shape[1:] + (len(dSets),), dtype=float)
delimiter
print(i)
delimiter
monday_my_date = my_date - timedelta(days=dow)
delimiter
self.z = z
delimiter
print(f(4))
delimiter
next_item = resultList[i + 1][0]
delimiter
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
delimiter
start = a + 1
delimiter
im /= len(files) * 0.25
delimiter
suds.client.SoapClient = TestClient
delimiter
f, args = q.get()
delimiter
[buildout]
delimiter
bp = plt.boxplot(data, whis=[5, 95], showfliers=False)
delimiter
ret == 0
delimiter
ury = np.flipud(ury)
delimiter
self.buttonLogin.clicked.connect(self.handleLogin)
delimiter
connectivity = 4
delimiter
params = urllib.parse.urlencode(parameters)
delimiter
print(x)
delimiter
sequence[9]
delimiter
rendered_content = response.content
delimiter
summary_writer.add_summary(image_summary)
delimiter
Child().parent_prop()
delimiter
slope, intercept
delimiter
ans
delimiter
print(a)
delimiter
points.set_data(new_x, new_y)
delimiter
result.fill(np.nan)
delimiter
isinstance(False, int)
delimiter
t[k] += v
delimiter
json_block.append(line)
delimiter
D = csr_matrix((10, 10), dtype=int)
delimiter
paths.insert(0, DIR_NAME)
delimiter
A = np.array(A)
delimiter
functools.update_wrapper(d(fn), fn)
delimiter
demo()
delimiter
val, weight = zip(*[(k, v) for k, v in list(counted_data.items())])
delimiter
process(mv[i:j])
delimiter
instance.__dict__[self.prop].__set__(instance, value)
delimiter
options, args = parser.parse_args()
delimiter
plt.pcolor(df)
delimiter
html.tostring(t)
delimiter
raise Http404
delimiter
i = iter(lst)
delimiter
ts = pd.DatetimeIndex([t])
delimiter
platform.machine()
delimiter
print(df.shape)
delimiter
delta = bins[1] - bins[0]
delimiter
maxlabel = np.max(A) + 1
delimiter
count = 1
delimiter
trimmed = [lines[0].strip()]
delimiter
a / 2.0
delimiter
idx = np.searchsorted(haystack, needle)
delimiter
stdscr = curses.initscr()
delimiter
gbl = globals()
delimiter
ipaddress.ip_address(16909060).__str__()
delimiter
setattr(self.instance, name, value)
delimiter
Py_XDECREF(pModule)
delimiter
list(missing)
delimiter
new_pdf = PdfFileReader(packet)
delimiter
n_to_N = spdiags([n * diag, -nrange[-1:0:-1]], [0, 1], n - 1, n - 1)
delimiter
data = loader.get_single_data()
delimiter
group = parser.add_mutually_exclusive_group()
delimiter
process(cache2.value)
delimiter
f = urllib.request.urlopen(url, data)
delimiter
a[4:]
delimiter
formula = lambda b, m, p, q: np.sum((b - m) ** 2 * p) / q
delimiter
s.split()
delimiter
decorator
delimiter
treeoid = bld.write()
delimiter
p = field.objects.create(**kwargs)
delimiter
result[field] = value
delimiter
label = label_names.index(label_name)
delimiter
years_dict = dict()
delimiter
C = [0] * len(matrix)
delimiter
self._convert * self._swapu
delimiter
chain.from_iterable(listOfLists)
delimiter
args = parser.parse_args()
delimiter
raise wsgiserver.NoSSLError
delimiter
cal = calendar.Calendar(0)
delimiter
print(sorted((minval, value, maxval))[1])
delimiter
tmp.close()
delimiter
log.write(warnings.formatwarning(message, category, filename, lineno, line))
delimiter
1,
delimiter
b[1, 0] = 100
delimiter
x = [random.random() for r in range(1000)]
delimiter
raise URLError(err)
delimiter
gram_matrix = np.zeros((X1.shape[0], X2.shape[0]))
delimiter
iter(iterparse)
delimiter
print(pattern % tuple(_u(t) for t in line))
delimiter
allcols = list(range(0, len(l1)))
delimiter
self.assertTrue(row[0] == counts[index_row][0])
delimiter
row_headers = list(df.index)
delimiter
statvfs.f_frsize * statvfs.f_bavail
delimiter
groupdxs = [i for i, group in enumerate(groups) for j in range(len(group))]
delimiter
jpgs = [s for s in files if jpgre.match(s)]
delimiter
u = x * np.sin(5) + y * np.cos(5)
delimiter
f_poly = np.poly1d(pfit)
delimiter
t.start()
delimiter
du.py
delimiter
r2 = Range(start=date(2016, 1, 28), end=date(2016, 2, 28))
delimiter
height = 100 * np.random.random(numcurves)
delimiter
consonantsremoved = noay[:len(noay) - (len(firstconsonants) + 1)]
delimiter
top = 1
delimiter
parser = OptionParser()
delimiter
indices = [0, 5, 12, 17]
delimiter
[1, 1, 0, 0, 0, 0],
delimiter
m = email.message_from_string(email_body)
delimiter
cluster_0 = np.where(clusters == 0)
delimiter
list1 = [2, 4, 6, 8, 10]
delimiter
b = np.sqrt(np.sum(np.square(xs), axis=1))
delimiter
ftps = ftplib.FTP_TLS()
delimiter
dt_delta = values[1][1] - values[0][1]
delimiter
d = {}
delimiter
max_range = np.asarray(max_range, dtype=int).ravel()
delimiter
t = 1 - np.abs(np.linspace(-1, 1, 21))
delimiter
df = shuffle(df)
delimiter
self._log_ = []
delimiter
l.append((i[0][11:-1], i[1]))
delimiter
df = df.applymap(int)
delimiter
new_string, enc = output[-1][1]
delimiter
self.x = x
delimiter
colorama.init()
delimiter
before_task_publish.connect(self.task_add)
delimiter
fig, ax = plt.subplots(1)
delimiter
self._db._adapter.insert(self, self._listify(fields))
delimiter
a = np.ma.compress_cols(np.ma.masked_invalid(a))
delimiter
pb = pb.get_from_drawable(w, w.get_colormap(), 0, 0, 0, 0, sz[0], sz[1])
delimiter
perm_list.append(temp)
delimiter
t = np.linspace(-10.0, 10.0, 100)
delimiter
final.append(b)
delimiter
is_capital = models.BooleanField()
delimiter
print(themessage)
delimiter
np.insert(a, 1, 5)
delimiter
count
delimiter
psutil.pid_exists(pid)
delimiter
self.path = request.path
delimiter
func = self.func_options[func_name]
delimiter
result
delimiter
np.apply_along_axis(nGauss, -1, xx, mu, cov)
delimiter
C1[:, :, (i)] = np.dot(A[:, :, (i)], B[:, :, (i)])
delimiter
methodReference.__self__.__class__
delimiter
list_of_lists.append(titles)
delimiter
img_str = fd.read()
delimiter
q2 = session.query(TName.calc_column).order_by(TName.calc_column)
delimiter
(d.A + d.B) / d.C
delimiter
user = userform.save(commit=False)
delimiter
progname = sys.argv[0]
delimiter
raw_email = data[0][1]
delimiter
f.flush()
delimiter
count, x, y = np.histogram2d(x_axis, y_axis, bins=numbins)
delimiter
nplons = numpy.array(lons)
delimiter
form = DjForm()
delimiter
ndict, nsearch = benchmark_fuzzy_match(wordslist)
delimiter
a_sorted = numpy.sorted(a)
delimiter
False
delimiter
nones = series.values == n
delimiter
event.widget.insert(10, old - 1)
delimiter
this_session = cherrypy.session[SESSION_KEY]
delimiter
s.getvalue()
delimiter
headers, resp = client.request(query)
delimiter
print(QMouseEvent.pos())
delimiter
page = existing_pdf.getPage(0)
delimiter
colMean = a.sum(0) / (a != 0).sum(0)
delimiter
c2 = csv.reader(f2)
delimiter
numpy.add.reduceat(a, [0, 2])
delimiter
ax.right_ax(False)
delimiter
colsmask = np.array([True, True, False])
delimiter
tf.mul(X, w)
delimiter
s.shutdown(SHUT_RDWR)
delimiter
name = models.CharField(max_length=200)
delimiter
df
delimiter
x = Decimal(2)
delimiter
print(getSubStrings(a, 0))
delimiter
factor = A[j, i]
delimiter
X = lab[:, :, :1]
delimiter
loc = seq.index(item, start_at + 1)
delimiter
key, self[key]
delimiter
i -= 1
delimiter
z, y, x = np.indices(A.shape)
delimiter
count = 0
delimiter
summation = summation + int(i)
delimiter
dayDelta = timedelta(days=1)
delimiter
ys = np.array([[0, 1], [1, 1]]) * 1.0
delimiter
numpy.nextafter(0.1, 1)
delimiter
s
delimiter
c = pycurl.Curl()
delimiter
print(i)
delimiter
col_names.append(group)
delimiter
assert solution(vals) == your_solution(vals)
delimiter
montreal_json = pd.DataFrame.from_dict(many_jsons[0])
delimiter
floor(2, 1)
delimiter
grid = mlab.pipeline.scalar_field(data)
delimiter
tree = ast.parse(yoursource)
delimiter
record_bytes = tf.decode_raw(value, tf.uint8)
delimiter
res = t[-1]
delimiter
curr.children.append(node)
delimiter
iris = datasets.load_iris()
delimiter
matcher(l2, l1)
delimiter
cleaner.cleanFile(sys.argv[1])
delimiter
print(repr(y))
delimiter
result = s.execute()
delimiter
print(typefunc[type(param)](param))
delimiter
result.append((n, n))
delimiter
sortedA = np.array(sorted_a)
delimiter
p = Pool(4)
delimiter
s.logout()
delimiter
m = exp.findall(text)
delimiter
points = zip(X, Y)
delimiter
visited.add(s)
delimiter
df2
delimiter
root = Tkinter.Tk()
delimiter
mlcValue = -1.86
delimiter
self
delimiter
sys.exit(0)
delimiter
reverse_dict = {}
delimiter
b = datastream.read(1)
delimiter
val -= timedelta(days=diff)
delimiter
df
delimiter
data_chunk = data_chunk[-n_overlap:]
delimiter
loop.call_soon(user_func)
delimiter
self.data = data
delimiter
x, y
delimiter
sess = tf.Session()
delimiter
quadro.quadro()
delimiter
print(a.queue)
delimiter
soup = bsoup(r.text)
delimiter
time_struct = time.gmtime(time_epoch)
delimiter
index = random.randrange(len(sequence))
delimiter
x = asarray(x)
delimiter
[(s, b) for b in B for i, res in t.iter(b) for s in res]
delimiter
tuple((str(n), str(n)) for n in range(1995, datetime.now().year + 1))
delimiter
os.close(2)
delimiter
request = urllib.request.Request(url, headers=headers)
delimiter
expr_topl = ZeroOrMore(pths_or_str | anything_topl)
delimiter
image_summary_t = tf.image_summary(images.name, images, max_images=1)
delimiter
socket.setdefaulttimeout(2)
delimiter
row.append(10)
delimiter
trace = pm.sample(2000, n_init=100000)
delimiter
dict(items)
delimiter
stack[-1].append(current)
delimiter
node.children.add(start_node)
delimiter
a = [1, 2]
delimiter
self[key] = NestedDict()
delimiter
s = sum(i == j for i, j in zip(a[x:], b[:-x]))
delimiter
xdat, ydat = np.random.normal(size=N), np.random.normal(1, 0.6, size=N)
delimiter
marked_text
delimiter
df
delimiter
pd.isnull(x)
delimiter
figure(1)
delimiter
newArray[theArray == k] = v
delimiter
path
delimiter
self.awareness_status = self.max_val, -1
delimiter
line = remove_chars(line)
delimiter
node = queue.pop(0)
delimiter
f = Foo(1, 2)
delimiter
j += 1
delimiter
p.pprint(obj)
delimiter
view.setModel(model)
delimiter
x = np.random.random(N)
delimiter
print(dt)
delimiter
dict((v, k) for k, v in enumerate(calendar.month_abbr))
delimiter
action = QtGui.QAction(text, self)
delimiter
x
delimiter
f.close()
delimiter
invertedDict[value].append(key)
delimiter
print(lines)
delimiter
color.setNamedColor(string_with_color)
delimiter
path = os.path.join(dirpath, filename)
delimiter
sp.diff(ntot, n[5])
delimiter
s = requests.session()
delimiter
some_words = OneOrMore(~JUMPS + Word(alphas))
delimiter
Base = declarative_base()
delimiter
y = np.random.rand(1000)
delimiter
struct.unpack(new_fmt, dat)
delimiter
a.set(round(5.494949, 2))
delimiter
args = parser.parse_args()
delimiter
phi = list(phi)
delimiter
QuoteFormSet = modelformset_factory(Quote, form=QuoteForm, extra=2)
delimiter
current = sum(negatedEven[i:i + d])
delimiter
array_ = array_.reshape(-1)
delimiter
print(temp)
delimiter
f()
delimiter
cPickle.dump(rf, f)
delimiter
example = Example()
delimiter
pdb.gimp_item_get_children(c)
delimiter
self.conn.commit()
delimiter
taken_at = models.DateTimeField(default=date, auto_now_add=True)
delimiter
print(name)
delimiter
sleep(1)
delimiter
[(val,)] = t2
delimiter
x > -2 and x < 2
delimiter
reshaped_data = data.reshape((4, -1))
delimiter
print(html)
delimiter
create_all(app)
delimiter
shift_idx2 = np.append(0, np.where(np.diff(cols_idx1[sort_idx]) > 0)[0] + 1)
delimiter
ss = str(request.form)
delimiter
dic[k].extend([v] + dic[v])
delimiter
y = np.empty_like(x)
delimiter
self.domain = domain
delimiter
list.__init__(self)
delimiter
classification = np.zeros(len(data))
delimiter
out = np.empty((9, 9))
delimiter
x = []
delimiter
W = np.cumsum(W) * np.sqrt(dt)
delimiter
X = np.outer(A[:, (n)], rowb)
delimiter
print(L)
delimiter
g = a()
delimiter
Requirements
delimiter
infoObject = pygame.display.Info()
delimiter
add2 = functools.partial(add, 2)
delimiter
i2 = Interval(0, oo)
delimiter
result
delimiter
self.client = gconf.client_get_default()
delimiter
print(decorated_argspec)
delimiter
2 * val
delimiter
fig, ax = plt.subplots()
delimiter
temp_file = make_a_file_in_a_dir(temp_dir)
delimiter
dlist.append(d)
delimiter
total += (math.log(scale) + x / scale) * count
delimiter
a = gen()
delimiter
k = list(d1.keys())
delimiter
login_view = KeyAuthLoginView.as_view()
delimiter
query |= Q(lft__lt=node.lft, rght__gt=node.rght, tree_id=node.tree_id)
delimiter
print(d)
delimiter
threads = []
delimiter
data = re.sub(REGEX, escape, data)
delimiter
print(determinant)
delimiter
pipeline.get_state()
delimiter
d.rotate()
delimiter
arr_win = np.empty((rows, cols - n + 1), dtype=np.intp)
delimiter
foo = timeit(lexicon, number=nloops)
delimiter
foo = timeit(comprehension, number=nloops)
delimiter
callback(size, file_size)
delimiter
line = result.stdout.readline()
delimiter
result_list = regex.findall(line)
delimiter
result = value_if_true
delimiter
num_str = str(n)
delimiter
l.append(uimg[i])
delimiter
False
delimiter
transposed_l = zip(*l)
delimiter
eval(method_name1)
delimiter
dx = np.linspace(0, 1, 20)
delimiter
A[0, 2, 6, 7, 16, 20]
delimiter
forms = [Foo(prefix=i) for i in range(x)]
delimiter
len(self.d)
delimiter
time.sleep(0.4)
delimiter
test_df[test_df < 4] = np.nan
delimiter
self.buffer[n]
delimiter
transaction.commit(sid)
delimiter
f = lambda a, b: a.append(b) or a if b not in a else a
delimiter
element.attrib[key]
delimiter
file_parser = argparse.ArgumentParser()
delimiter
self.val = val
delimiter
select.order_by(func.rand())
delimiter
grid, np.linspace(xmin, xmax, nx), np.linspace(ymin, ymax, ny)
delimiter
voltage = [1, -1, 1.1, -0.9, 1, -1, 0.9, -1.2, 0.95, -1.1, 1.11]
delimiter
lamp_object.select = True
delimiter
[[a - z] - -[aeiou]]
delimiter
laplacian2 = nx.spectrum.laplacian_spectrum(graph2)
delimiter
app = App(root)
delimiter
connection = op.get_bind()
delimiter
print(result)
delimiter
next(b)
delimiter
traceback.print_exc(file=sys.stdout)
delimiter
pprint.pprint(dict(result))
delimiter
instances = []
delimiter
data = mmap.mmap(f.fileno(), size, access=mmap.ACCESS_READ)
delimiter
(d.days * 24 * 60 * 60 + d.seconds) * 1000 + d.microseconds
delimiter
s[10:]
delimiter
tokens = wordpunct_tokenize(text2)
delimiter
self.update(json.load(fh))
delimiter
istart.append(i)
delimiter
time.sleep(0.1)
delimiter
c = camelcase()
delimiter
x = int(x)
delimiter
files
delimiter
int(string)
delimiter
f(5)
delimiter
list_
delimiter
data = np.empty((sizes[-1],), dtype=csc_mat.dtype)
delimiter
tty.setraw(sys.stdin.fileno())
delimiter
page = html.parse(url).getroot()
delimiter
result = dot(total, unit_normal(poly[0], poly[1], poly[2]))
delimiter
arg.join(value)
delimiter
c.connect()
delimiter
type(m)
delimiter
serializers.get(type(ob), repr)(ob)
delimiter
authors.allow_tags = True
delimiter
[[i[o] for i in a if len(i) > o] for o in range(max_len)]
delimiter
engine = create_engine(dbname, echo=False)
delimiter
Features
delimiter
file.write(insert)
delimiter
c = getch()
delimiter
counter = 1
delimiter
myobjs = [Foo() for _ in range(1000000)]
delimiter
gzip.wait()
delimiter
print(note.id_item, note.name, note.value)
delimiter
img = Image(image_path)
delimiter
print(sf.to_string())
delimiter
mask = mask.resize(image.size, Image.LANCZOS)
delimiter
model.add(LSTM(4, input_dim=input_dim, input_length=input_length))
delimiter
parameters.append(int(tokens.popleft()))
delimiter
client_socket.send(strng)
delimiter
ax.autoscale_view(True, False, False)
delimiter
mydict
delimiter
reader = csv.reader(input_file)
delimiter
os.remove(self.filename)
delimiter
logger.addHandler(fh)
delimiter
self.y = y
delimiter
dict(zip(p[:100], p[100:]))
delimiter
search_button.click()
delimiter
keys = list(d.keys())
delimiter
target_date = base_datetime + delta
delimiter
self.nested_json
delimiter
cache[jid].add(resource)
delimiter
print(t.sTitle)
delimiter
1.0 - 0.5 * erfcc(x / 2 ** 0.5)
delimiter
STOCK_GO_BACK
delimiter
STOCK_GO_FORWARD
delimiter
STOCK_JUSTIFY_FILL
delimiter
STOCK_LEAVE_FULLSCREEN
delimiter
STOCK_ORIENTATION_LANDSCAPE
delimiter
STOCK_ORIENTATION_PORTRAIT
delimiter
STOCK_SPELL_CHECK
delimiter
STOCK_ZOOM_FIT
delimiter
startTime = datetime.now()
delimiter
c = b.view()
delimiter
s
delimiter
readline.read_history_file(histfile)
delimiter
d[key] = value
delimiter
api = tweepy.API(auth)
delimiter
summary = Column(String(2000))
delimiter
s = x.argsort()
delimiter
self.books[i]
delimiter
q.put(test_w)
delimiter
s = requests.Session()
delimiter
main()
delimiter
p.y = y
delimiter
B()
delimiter
[0, [0, [0, values, 2], 2], 2]
delimiter
csv_contents = []
delimiter
1, 2, 0
delimiter
slug = models.SlugField()
delimiter
False
delimiter
deleteself.lines[:]
delimiter
datetime.timedelta(seconds=seconds, microseconds=microseconds)
delimiter
rm = np.hstack([ind[i] for i in mylist])
delimiter
Options + ExecCGI
delimiter
columns = line.split(separator)
delimiter
rdd.__class__ = RDDWithSquares
delimiter
print(b)
delimiter
dic[7]
delimiter
a + b
delimiter
line.set_data([], [])
delimiter
int_n = int(abs(n))
delimiter
j = ttk.Treeview(self.parent)
delimiter
current = (current + incrementor) % modulo
delimiter
a[indices] += x
delimiter
filename_queue = tf.train.string_input_producer(filenames)
delimiter
atom_shape = np.shape(atom_proj[values[1][0]])
delimiter
s = set(l)
delimiter
self.search_entry = gtk.Entry()
delimiter
Series(mapped, index=self.index, name=self.name)
delimiter
window = collections.deque(sorted(window), maxlen=window_size)
delimiter
c.py
delimiter
d[k] = f(v)
delimiter
list(l)
delimiter
[arg_line]
delimiter
lens = np.array(map(len, arr))
delimiter
a, b, c = uniform_result(*do_something5())
delimiter
print(i, da[i], db[i])
delimiter
traceback.print_exception(*exc_info)
delimiter
sns.heatmap(data=df1, annot=False)
delimiter
table.setCellWidget(0, 0, combobox)
delimiter
p.terminate()
delimiter
href = href.strip()
delimiter
BOOST_PYTHON_MODULE(hello)
delimiter
self.verticalLayout.setSizeConstraint(QtGui.QLayout.SetFixedSize)
delimiter
True
delimiter
print(b.y)
delimiter
step = len(array) - 1
delimiter
objects = SomeManagerSet.as_manager()
delimiter
current_time = datetime.now()
delimiter
old_file_position = f.tell()
delimiter
print(multi_dict.get(key))
delimiter
box = BoxLayout()
delimiter
poss = lookup_mapping[text[:2].lower().lstrip()]
delimiter
data = final_list
delimiter
cols = np.any(img, axis=0)
delimiter
SNIP
delimiter
lag_seq = np.int64(np.random.normal(lag_mean, lag_sd, n_iter))
delimiter
ser = pd.Series(data=np.random.randn(len(idx)), index=idx)
delimiter
self.comboBox.currentIndexChanged.connect(self.on_comboBox_currentIndexChanged)
delimiter
1
delimiter
ipython = IPython.core.ipapi.get()
delimiter
Session = sessionmaker(bind=engine)
delimiter
liPos = [(2, 5), (8, 9), (18, 22)]
delimiter
dis.dis(foo)
delimiter
print((Session.is_active, Session.is_modified(mylst)))
delimiter
datetime.datetime.today().ctime(),
delimiter
feed.etag
delimiter
X, Y, Z = generatedata()
delimiter
browser = webdriver.PhantomJS()
delimiter
f.read()
delimiter
self.read(rc)
delimiter
utc = datetime.datetime.utcnow()
delimiter
x += 1
delimiter
fills = np.zeros(nu)
delimiter
new_remaining = []
delimiter
next(dtg0)
delimiter
foundColors[color].add(key)
delimiter
Base.metadata.create_all(e)
delimiter
cursor = conn.cursor()
delimiter
dicto = defaultdict(list)
delimiter
b = iter(a)
delimiter
lons, lats = zip(*verts[ring])
delimiter
total = cursor.scalar()
delimiter
[easy_install]
delimiter
list(set([str(rng.randint(60000, 80000)) for _ in range(n)]))
delimiter
b = a[2:9]
delimiter
frob()
delimiter
bar_obj = Bar()
delimiter
column[h].append(v)
delimiter
available_tickets = [fulltime, parttime, daytime]
delimiter
memv = memoryview(a)
delimiter
reversed_edge_list.append((j, i))
delimiter
sys.stdout = mystdout
delimiter
self.sendLine(request)
delimiter
xmldoc = xml.dom.minidom.parse(file)
delimiter
X, Y, Z
delimiter
header.seek(0)
delimiter
data = str(data, coding).encode(new_coding)
delimiter
label.show()
delimiter
__metaclass__ = fancytype
delimiter
fib(400)
delimiter
pool.map(func_star, zip(a_args, itertools.repeat(second_arg)))
delimiter
response
delimiter
0
delimiter
assert pickle.loads(pickle.dumps(C(1), -1)).i == 1
delimiter
str(50) is str(50)
delimiter
data = np.random.normal(0, 1, (10, 100))
delimiter
tic = time.clock()
delimiter
s = self.makeDefaultS()
delimiter
transaction.commit_unless_managed(using=self.db)
delimiter
[x, y, z] = v
delimiter
parser.clean()
delimiter
self.file_pointer.read(self.record_size)
delimiter
add(1)
delimiter
self.count[0] += 1
delimiter
form.show()
delimiter
sort_by = lambda x: x[0].lower()
delimiter
pkg.mark_install()
delimiter
cols = set(chain(*list(d.values())))
delimiter
q.set_array(np.random.rand(np.prod(x.shape)))
delimiter
pylab.arrow(4, 6, x, y, alpha=0.8, **opt)
delimiter
primefactors.append(p)
delimiter
print(leastsq(optm, [0.5, 0.5, 0.5], (x,)))
delimiter
X = np.concatenate((X, X))
delimiter
x = np.linspace(100, 100.1, 100)
delimiter
self.mapping[key] = value
delimiter
lookuptable >> i & 1 != 0
delimiter
print(x ** 5)
delimiter
print(type(n))
delimiter
logging_thread.join()
delimiter
add(x=x, y=y)
delimiter
idx = np.abs(a - a0).argmin()
delimiter
currentSongURI = self.GetSongURI()
delimiter
df2 = pd.DataFrame({col: vals[column] for col, vals in df.groupby(by)})
delimiter
_pix_get_data.argtypes = [c_void_p]
delimiter
idx[0]
delimiter
edges = np.zeros((len(hull_points) - 1, 2))
delimiter
playerList = []
delimiter
b = a[:, :, (newaxis)]
delimiter
ie.Visible = 0
delimiter
conman.found()
delimiter
cls = type(c_uint).__new__(metacls, name, bases, dict)
delimiter
l2 = list(range(5))
delimiter
print(a is b)
delimiter
id = serializers.Field()
delimiter
b = a
delimiter
cur = db.cursor()
delimiter
browser = Browser()
delimiter
c[0].append(c)
delimiter
iterator = iter(iterable)
delimiter
d[nkey] = newvals[nvalue]
delimiter
self.buffer.pop(0)
delimiter
True
delimiter
session = DBSession()
delimiter
totalscore = sum(t)
delimiter
log_observer.start()
delimiter
possible_shuffles(initial_state)
delimiter
result
delimiter
text1 = open(file1).read()
delimiter
sleep(1)
delimiter
resp(status, headers, *args)
delimiter
tb = sys.exc_info()[2]
delimiter
l2 = f2.readline()
delimiter
InterfaceClass(iface.__name__, iface.__bases__, fields)
delimiter
x = 42
delimiter
a = np.array([True, False, False, True, True, False, False, True, False])
delimiter
df.columns = columns
delimiter
cv.WaitKey(0)
delimiter
colormap = window.get_screen().get_rgb_colormap()
delimiter
self.Layout()
delimiter
[model_solve(100) for x in results]
delimiter
mkdict = lambda row: dict((col, row[col]) for col in cols)
delimiter
self[key] = key
delimiter
text = infile.read()
delimiter
transpositions(splits),
delimiter
replacements1(splits),
delimiter
s = -1.0 / (2 * sigma * sigma)
delimiter
id(tup)
delimiter
r = csv.DictReader(i)
delimiter
H, xs, ys = np.histogram2d(x, y, weights=z, bins=bins, range=rng)
delimiter
related_obj = getattr(obj, name)
delimiter
dense = np.asarray(a.todense())
delimiter
sessionOptions = blpapi.SessionOptions()
delimiter
self.members = []
delimiter
plot_durations(starts, stops, ax, facecolor=color, alpha=0.5)
delimiter
rows = [x for x in cursor]
delimiter
cache = apt.cache.Cache()
delimiter
event.widget.insert(10, old + 1)
delimiter
MAX_EMAILS_IN_PERIOD = 1
delimiter
raise ReturnValue(value)
delimiter
Sx = Sy = Sxx = Syy = Sxy = 0.0
delimiter
x += y
delimiter
print(number)
delimiter
root = Tkinter.Tk()
delimiter
print(model.eval({select_test: True}))
delimiter
window = gtk.Window(gtk.WINDOW_TOPLEVEL)
delimiter
qs = MyModel.objects.all()
delimiter
new_state = self._as_dict()
delimiter
x = np.linspace(0, 10, 10)
delimiter
(2)[5][1, 1]
delimiter
x = np.linspace(0, 10, 100)
delimiter
y_onehot = [0] * len(y)
delimiter
zip_longest(it1, it2)
delimiter
ticklab = ax.xaxis.get_ticklabels()[0]
delimiter
keys.append(k)
delimiter
X = X[(indices), :]
delimiter
x = np.linspace(xmin, xmax, 100)
delimiter
items = list(this_v.items())
delimiter
directions = array([[1, 1], [-1, 1], [1, -1], [-1, -1]])
delimiter
numbers = set(range(10))
delimiter
axes_col.set_title(col.strip())
delimiter
my_list
delimiter
images.append(image)
delimiter
num_items = (num_bits + BITS_PER_ITEM - 1) // BITS_PER_ITEM
delimiter
self.domains[key].remove(color)
delimiter
sel = Selector(response)
delimiter
entnum = int(hex, 16)
delimiter
mu = np.array([1, 10, 20])
delimiter
line.isspace()
delimiter
data = np.random.random((10, 10))
delimiter
axes[0].plot(list(range(50)))
delimiter
output.write(texts)
delimiter
manager = mp.Manager()
delimiter
Pool(processes, initializer, initargs)
delimiter
dx = dALLdt(X[-1], i)
delimiter
class_a_inst = get_my_inst(5)
delimiter
updated_fixtures
delimiter
file = sys.argv[1]
delimiter
something = protorpc.messages.IntegerField(1, required=True),
delimiter
distance_km = haversine(points_1[0], points_1[1], points_2[0], points_2[1])
delimiter
w.wcs.crval = [crvalX, crvalY]
delimiter
False
delimiter
json_obj = requests.get(url).json()
delimiter
x.turn()
delimiter
main()
delimiter
recv1 = recv1.decode()
delimiter
ax2.set_xticks(ax2Ticks)
delimiter
new_dict
delimiter
lats = [0.0, 41.0, 19.0, 51.0]
delimiter
zipped = zip(x, y)
delimiter
name = Column(Unicode(256))
delimiter
combination[r - 1] = combination[r - 2] + 2
delimiter
HoughLines(dst, lines, 1, CV_PI / 180, 100, 0, 0)
delimiter
my_worksheet.protect = True
delimiter
_draw_point(i, j, MAX_OPAQUE - fade_amount_i)
delimiter
mask = cv2.bitwise_not(mask)
delimiter
id_ = build_id(pub_key)
delimiter
solve(a, b)
delimiter
print(df2)
delimiter
os.makedirs(build_temp)
delimiter
__debug__
delimiter
np.array_equal(accumulate_based(A2), cython_based(A2c))
delimiter
result = []
delimiter
pairs[(J == 1), ...]
delimiter
assert PyUnicode_KIND(u) == PyUnicode_KIND(str)
delimiter
x.append(pt[0])
delimiter
content = myfile.read()
delimiter
gen2, gen2_copy = tee(gen2)
delimiter
data = request.DATA, files = request.FILES
delimiter
raise Timeout()
delimiter
s.snoodidle()
delimiter
head - 1
delimiter
[0]
delimiter
s.close()
delimiter
print(proc.stdout)
delimiter
job = pool.apply_async(worker, (i, q))
delimiter
instances = [i for r in res for i in r.instances]
delimiter
type(D)
delimiter
a(locals())
delimiter
doc = parseString(s)
delimiter
plot(t, s)
delimiter
congruent.stack(dropna=False)[same].dropna()
delimiter
pivots = zeros(n_eq, np.intc)
delimiter
num_lines += 1
delimiter
list_of_dct
delimiter
temp[parts[-1]] = 1
delimiter
img = im_clear[:, idx * split_point:(idx + 1) * split_point]
delimiter
indefinite_integral(end_time) - indefinite_integral(start_time)
delimiter
root = int(math.ceil(lo ** 0.5))
delimiter
addToList(myList)
delimiter
w = Tk()
delimiter
newbuf = file.read(bufsize)
delimiter
_r = r.request.response
delimiter
b_padded.shape
delimiter
f = sympy.Sum(x, (n, 0, 10))
delimiter
resultqueue = Queue.Queue()
delimiter
pathqueue = Queue.Queue()
delimiter
is_type(df, np.integer)
delimiter
[string[start:end] for start, end in zip(starts, ends)]
delimiter
mat_inv /= det[..., (np.newaxis), (np.newaxis)]
delimiter
x.y = 1
delimiter
length = len(elements)
delimiter
result = small_number * A
delimiter
lConnection.close()
delimiter
print(observer.radec_of(az, el))
delimiter
result = np.array(nearest_neigbours, dtype=np.uint8)
delimiter
data
delimiter
self.sources_list.append(source)
delimiter
output.writerows(rows)
delimiter
i = 0
delimiter
paths = os.listdir(path)
delimiter
app = QtGui.QApplication(sys.argv)
delimiter
func_wrapper
delimiter
plot(x)
delimiter
vulture - -help
delimiter
filename = os.path.join(root, basename)
delimiter
second_list = [2, 5, 7, 9]
delimiter
c[0][0]
delimiter
Property1 = 1
delimiter
type(0) is int
delimiter
espec = urllib.parse.unquote(espec)
delimiter
self.yaxis.set_zorder(2.5)
delimiter
values = tuple((company.id, company.max_price) for company in companies)
delimiter
p.start()
delimiter
csvin = csv.reader(fin)
delimiter
self.count += 1
delimiter
httplib.HTTPMessage(filehandle).getdate_tz(headername)
delimiter
y = cos(angle) * self.radius.imag + self.center.imag
delimiter
type(c)
delimiter
deleteconnection
delimiter
type(size2_col), size2_col.index
delimiter
ascend_list = []
delimiter
self.kill_now = True
delimiter
self._do_request(action)
delimiter
np.allclose(original_app(x, idx), reshape_based(x, idx))
delimiter
time.sleep(0.1)
delimiter
ys = [(i + x + (i * x) ** 2) for i in range(10)]
delimiter
plt.colorbar(im)
delimiter
myfunc()
delimiter
all = set(range(1, 101))
delimiter
Y_int = np.round(Y * 10).astype(int)
delimiter
l = []
delimiter
indices = np.where(tmp)[0]
delimiter
self.after(100 * name_changes, finish_spinning)
delimiter
B().f()
delimiter
data[word[i:i + 1]] = [word[i + 1:], {}]
delimiter
b2 = [4, 5, 6, 7, 8]
delimiter
code = json.dumps(data)
delimiter
mu, std = norm.fit(data)
delimiter
c = char[0]
delimiter
number
delimiter
ax = fig.add_subplot(111)
delimiter
raise ArgumentError(action, msg % (name, arg_string))
delimiter
clf.partial_fit(X, Y)
delimiter
dis.dis(f2)
delimiter
subclass1.bar()
delimiter
{(0): 1}.get(0, getter())
delimiter
print(j)
delimiter
v.sort()
delimiter
c.showPage()
delimiter
plot = plt.figure()
delimiter
print(x, c)
delimiter
x, y = np.mgrid[0:h:500j, 0:w:500j]
delimiter
dll._sin.argtypes = [ctypes.c_double]
delimiter
fd.write(string_conditioned(row))
delimiter
diam = np.empty(N)
delimiter
n_estimators = 10
delimiter
[], 2
delimiter
deletehand[key]
delimiter
print(find_centroid(im, 20))
delimiter
my_plot_1(ax1)
delimiter
sys.exit(1)
delimiter
initial = tf.truncated_normal(shape, stddev=0.1)
delimiter
ceil(datetime.datetime(2012, 10, 25, 17, 45, 1))
delimiter
self.zipinfo = zipinfo
delimiter
blah[i] += merp
delimiter
result = []
delimiter
res = 0
delimiter
print(total)
delimiter
vend = vspell[2]
delimiter
print(csr_matrix(np.vstack([line for line in dense if line[2] == 0])))
delimiter
pubsub = redis_instance.pubsub()
delimiter
ax.set_ylim(height_of_im, 0.0)
delimiter
px = ImageGrab.grab().load()
delimiter
i = seq.index(subseq[0], i + 1, n - m + 1)
delimiter
dict_of_strings.close()
delimiter
code = x86_env.InstructionStream()
delimiter
my_data[i] = line
delimiter
session.run(tf.assign(embedding, embeddings_that_you_want_to_use))
delimiter
print(result)
delimiter
gen = myfunct()
delimiter
callback(copied)
delimiter
x = [10.01, 5.001, 4.89, 5.1, 9.9, 10.1, 5.05, 4.99]
delimiter
Contacts.all_contacts.append(self)
delimiter
test([1, 0])
delimiter
thread.join()
delimiter
math.floor(x)
delimiter
self.seconds %= 86400
delimiter
parts = re.findall(pat, sentence)
delimiter
d = dict((i, i) for i in range(10))
delimiter
f(b=44, a=12)
delimiter
data = self.request.recv(1024)
delimiter
self.array.pop(0)
delimiter
self.leftover = data[size:]
delimiter
self.my_member_fun(data)
delimiter
logger = logging.getLogger()
delimiter
x, y = np.mgrid[0:size, 0:size]
delimiter
self._sendRequest(queued_d, request)
delimiter
stopindex = 2
delimiter
r_ndegen = gen.randn(1000).astype(np.float)
delimiter
type(self)(self.x + other.x, self.y + other.y)
delimiter
to_response(request, response, myobject)
delimiter
w.writerows(r)
delimiter
seen_titles.add(obj.title)
delimiter
id(a), id(b)
delimiter
alan2
delimiter
Gtk.main_quit()
delimiter
a = np.asanyarray(a)
delimiter
match = patt.match(line)
delimiter
self.feature_indices_ = indices
delimiter
hash(new_key) % 8 <= hash(old_key) % 8
delimiter
browser = webdriver.Firefox()
delimiter
pet = Dog()
delimiter
app_log.addHandler(my_handler)
delimiter
j = jinja2.Jinja2(app)
delimiter
1
delimiter
w1, w2 = [], []
delimiter
inspector
delimiter
topic_bundles = []
delimiter
edges = set()
delimiter
print(so[-4470:-4460])
delimiter
y = np.concatenate((y_a, y_b, y_c, y_d))
delimiter
w.write(code)
delimiter
tty.tcsetattr(stdin_fileno, tty.TCSANOW, raw_ta)
delimiter
dt
delimiter
df
delimiter
wholeList = list(range(0, 10))
delimiter
col_list = list(df)
delimiter
sys.stdout = sys.__stdout__
delimiter
row = cursor.fetchone()
delimiter
end_date = end_date.replace(hour=0, minute=0, second=0, microsecond=0)
delimiter
dates.append(dates[i] + timedelta(0, delta))
delimiter
myLib.RegisterNofityCallback(45454, 0, func)
delimiter
loop.run_until_complete(asyncio.wait(tasks))
delimiter
statistics.median(map(float, items))
delimiter
b = a.T
delimiter
deleteself.inverse[self[key]]
delimiter
image_profile = QtGui.QImage(image_path)
delimiter
tree.write(s)
delimiter
u = uuid.uuid4()
delimiter
self.curoffs += len(data)
delimiter
zip_ref.extractall(directory_to_extract_to)
delimiter
txt = txt.replace(sep, default_sep)
delimiter
p = bokeh.plotting.figure(plot_width=400, plot_height=400)
delimiter
self
delimiter
print(tree)
delimiter
_ProcQueue(q)
delimiter
print(a[:4, 1:6])
delimiter
ipdb > new_post.update(request.GET)
delimiter
a = np.zeros((10, 2))
delimiter
open(fname)
delimiter
get_items(coo, 2, 5)
delimiter
a, b = {}, 5
delimiter
window.set_titlebar(header_bar)
delimiter
df = pd.DataFrame(array)
delimiter
app.run()
delimiter
b = numpy.empty(a.shape, dtype=a.dtype.descr + descr)
delimiter
DOT11_CIPHER_ALGO_NONE = 0
delimiter
coord = np.array(atom[6])
delimiter
last_day_of_previous_month = first_day_of_current_month - timedelta(days=1)
delimiter
print(f)
delimiter
X if not isinstance(X, pd.DataFrame) else X.as_matrix()
delimiter
b = np.random.normal(size=1000)
delimiter
rows, cols = img.shape
delimiter
main()
delimiter
d[a] = a
delimiter
b = a + 2
delimiter
i += 2
delimiter
print(newlist)
delimiter
a[rows, cols] += np.ones((rows.size, cols.size))
delimiter
myfoo.d = myfoo.c + 1
delimiter
d = {k: (lambda k, s: s * A[k]).__get__(k) for k in range(n)}
delimiter
session = requests.Session()
delimiter
max_val = max(my_list)
delimiter
module = __import__(module_name)
delimiter
sy2, _ = np.histogram(x, bins=xbins, weights=y * y)
delimiter
B = np.empty_like(A)
delimiter
f = lambda x, y: x * x * x + y * y
delimiter
andalso = Infix(lambda x, y: x.and_impl(y))
delimiter
result = np.zeros((9, 12))
delimiter
xyi = np.column_stack([x.ravel(), y.ravel()])
delimiter
fig = plt.figure()
delimiter
dis.dis(foo)
delimiter
method(self, *args, **kwargs)
delimiter
print((first, second))
delimiter
self.disconnect_from_server()
delimiter
PROJECT_DIR = os.path.dirname(__file__)
delimiter
root.update()
delimiter
s = pd.DataFrame(data[1:], columns=data[0])
delimiter
logits = model.inference(batched_train_x)
delimiter
assert is_palindrome(s_fail)
delimiter
relate(inp, cut)
delimiter
print(LCM(99, 12))
delimiter
self._x
delimiter
sched.start()
delimiter
print(f())
delimiter
self.camera.child.join()
delimiter
x = pd.rolling_min(arr, window)
delimiter
self.dummyy[i] = nm.NaN
delimiter
self.dummyz[i] = nm.NaN
delimiter
extension
delimiter
fitfunc = lambda p, x: p[0] + p[1] * x
delimiter
str(self.val)
delimiter
output = io.StringIO()
delimiter
{{name}}
delimiter
v = A[position:position + length]
delimiter
dems < -readHTMLTable(demdir)[[1]]
delimiter
sc = scorm.objects.get(pk=someid)
delimiter
self._locals = {}
delimiter
result
delimiter
clf.train(samples, y_train)
delimiter
__round__()
delimiter
print(parser.feed(content))
delimiter
__init__.py(blank)
delimiter
xvalues = line2d[0].get_xdata()
delimiter
list
delimiter
d.__repr__()
delimiter
rightmax = 0
delimiter
a = argparse.ArgumentParser()
delimiter
f1.write(line)
delimiter
sys.stdout = f
delimiter
parser.parse_args()
delimiter
df.columns = ind
delimiter
writer.save()
delimiter
fd = StringIO()
delimiter
y = np.zeros(n)
delimiter
l = list(range(10))
delimiter
model = Post
delimiter
queue.join()
delimiter
base = sum(np.array([(p[m] * A[m]) for m in range(M)]))
delimiter
fig = plt.figure()
delimiter
todays_files = []
delimiter
tagged.sort(lambda x, y: cmp(x[1], y[1]))
delimiter
tally = Counter(chain(*map(set, data)))
delimiter
[(u.value, u.meta) for u in set([b, d]).intersection(set([a, c, e]))]
delimiter
end_date = dt.datetime.now().date()
delimiter
print(e)
delimiter
new_from_slices(a, slices)
delimiter
count[i] += 1
delimiter
nltk.pos_tag(text)
delimiter
x = np.arange(10)
delimiter
x = np.linspace(0, 1, 10)
delimiter
compressor.write(chunk)
delimiter
sunaudiodev
delimiter
d[letter] += 1
delimiter
vals = words.split()
delimiter
T = zlib.decompress(S)
delimiter
yet_to_run = 0
delimiter
alpha.paste(circle.crop((0, rad, rad, rad * 2)), (0, h - rad))
delimiter
plt.colorbar()
delimiter
x_values = data.columns.values
delimiter
0.0010009999275207519
delimiter
dict_reader = csv.DictReader(fin)
delimiter
cur = l[i]
delimiter
df = pd.DataFrame(data=d)
delimiter
np.nextafter(1.0, 0.0)
delimiter
self.dict[key] = value
delimiter
http_server = tornado.httpserver.HTTPServer(Application())
delimiter
xlApp.Quit()
delimiter
self.upload_file(filename)
delimiter
d[key]
delimiter
tokens = f.read().split()
delimiter
files_py.append(fff)
delimiter
res.append(S[pos])
delimiter
data_y = [1.5, 1.0, 0.7, 2.5, 1, 1.5]
delimiter
self
delimiter
a_ma = np.ma.masked_where(a > 0, a)
delimiter
d = defaultdict(list)
delimiter
GradeNum.B == Suit.spade
delimiter
clock = pygame.time.Clock()
delimiter
doSomethingElse()
delimiter
root = Tk()
delimiter
axarr[0, 0].plot(x, y)
delimiter
s.get_subnet(28, count=10)
delimiter
c.remove(x)
delimiter
df
delimiter
res = np.flatnonzero(d_slice >= thresh_d)
delimiter
self.constant = constant
delimiter
order.sort()
delimiter
model._meta.app_label == self.app_label
delimiter
weekday = current_date.weekday()
delimiter
print(index, item)
delimiter
print(driver.current_url)
delimiter
istart = 0
delimiter
process(dir)
delimiter
result[0] = len(result) - 1
delimiter
ax_img.set_axis_off()
delimiter
image, label = read_my_file_format(input_queue.dequeue())
delimiter
self._latency = latency
delimiter
print(i, m)
delimiter
TASKS1 = [(mul, (i, 7)) for i in range(20)]
delimiter
self.assertTrue(user.username == testuser.upper())
delimiter
main.test
delimiter
setup_environ(settings)
delimiter
x = time.time() - 1000
delimiter
lons = np.linspace(-180, 180, bm.shape[1]) * np.pi / 180
delimiter
pkcs11 = PyKCS11Lib()
delimiter
a(myfoo)
delimiter
print(out)
delimiter
objects = PersonManager()
delimiter
a = np.array([np.nan], dtype=object)
delimiter
obj.get_decoded()
delimiter
gtk.main()
delimiter
hex(s.start)
delimiter
enable_numpy_scalar_converter()
delimiter
self._may_close = False
delimiter
numpy.dot(numpy.array([-d[1], d[0]]), p - v1) < 0
delimiter
do_something(blah)
delimiter
Nfeval = 1
delimiter
self.workers.acquire()
delimiter
print(text.translate(trans))
delimiter
irb
delimiter
your_tableview.setModel(model)
delimiter
imx = np.tile(np.arange(xlo, xhi, 1), ny).reshape((ny, nx))
delimiter
update_list_energy(list_of_proteins, 1)
delimiter
objs = []
delimiter
rows = []
delimiter
a = []
delimiter
row[0:4]
delimiter
im_array = np.array(im_grey)
delimiter
a = A()
delimiter
[(a, B[k]) for a in A for k in d[a]]
delimiter
p(sys.path)
delimiter
self.connections.add(self)
delimiter
offset = 4 * (self.width * int(round(y)) + int(round(x)))
delimiter
visit.Launch()
delimiter
self.start_urls = [url]
delimiter
contents = my_file.read()
delimiter
l1.append(elem)
delimiter
d = defaultdict(list)
delimiter
el.text
delimiter
app = web.Application(loop=loop)
delimiter
d = dict(enumerate([str(random.randint(0, 10)) for _ in range(100)]))
delimiter
points = np.column_stack((x, y, z))
delimiter
templateString = ftemp.read()
delimiter
sfile = ctx.open(suri, os.O_RDONLY)
delimiter
output[:-len(self.sentinel)]
delimiter
out = np.array([[np.dot(matrix, np.array([x, y, 1])) for x in xs] for y in ys])
delimiter
2, 4, 6
delimiter
0
delimiter
Foo.arg0
delimiter
self.request = request
delimiter
dif = set(bigd.items()) - set(bigd2.items())
delimiter
browser.switch_to.window(newWindow)
delimiter
start += step
delimiter
data = next(line_iter)
delimiter
lens = len(s)
delimiter
l = []
delimiter
df
delimiter
dir_path = os.path.join(self.feed, self.address)
delimiter
c = ctypes.create_string_buffer(mlen.value + 16)
delimiter
sqc[i], sqc[j] = sqc[j], sqc[i]
delimiter
count = 0
delimiter
imputed_array[hole] = most_frequent
delimiter
print(example())
delimiter
sess.run(init)
delimiter
temperatureRaisedSignal = QtCore.pyqtSignal()
delimiter
cmd.append(run_as_root_path)
delimiter
print(text)
delimiter
cls_attr = class_.__dict__
delimiter
perms.append(result)
delimiter
df2
delimiter
user = auth_by_token(request, backend)
delimiter
instance = object.__new__(cls)
delimiter
Q.appen(task)
delimiter
ser_cdf = pd.Series(cum_dist, index=ser)
delimiter
p = Process(target=self._crawl, args=[domain_pk])
delimiter
handler.dispatch()
delimiter
[T(val, params) for val in array]
delimiter
i, j = 0, len(x) - 1
delimiter
data = data[4:]
delimiter
data = f.read()
delimiter
cat / tmp / kernel.json
delimiter
Model.aggregate(*pipeline)
delimiter
min_value = min(sentiment_dict.values())
delimiter
parser = argparse.ArgumentParser()
delimiter
self._callback = callback
delimiter
data
delimiter
results.append((i, r))
delimiter
self.name
delimiter
s.sendmail(From, To, msg.as_string())
delimiter
self.input.SetValue(value)
delimiter
updating = True
delimiter
ret
delimiter
type(x)
delimiter
thresh = cv2.adaptiveThreshold(blur, 255, 1, 1, 11, 2)
delimiter
self.marked = {}
delimiter
formula = [(x, s.index(x)) for x in s if x in string.digits + symbols]
delimiter
rf = r[np.triu_indices(r.shape[0], 1)]
delimiter
train_as_dicts
delimiter
height = im.size[1]
delimiter
inGroup.append(n)
delimiter
print(df)
delimiter
cesttime.isoformat()
delimiter
vocabs.append(dict(zip(vals, list(range(len(vals))))))
delimiter
emitted = []
delimiter
n - x // 2
delimiter
print(csr_matrix(np.vstack([line for line in dense if line[2] == 1])))
delimiter
[(o >> shift & 1) for o in ords for shift in shifts]
delimiter
result = pool.apply_async(f, [10])
delimiter
51251080
delimiter
x2to = x1to + x2fr - x1fr
delimiter
y2to = y1to + y2fr - y1fr
delimiter
print(table_name.parseString(test).dump())
delimiter
r = np.sqrt(x ** 2 + y ** 2)
delimiter
print(x[0])
delimiter
print(type(a), len(a), a)
delimiter
processes[i].join()
delimiter
s == s[0] * len(s)
delimiter
self.database[name] = value
delimiter
show()
delimiter
print(a)
delimiter
index = lambda self, *args: self._tuple.index(*args)
delimiter
logger = logging.getLogger(name)
delimiter
self[key] = value = self.default_factory()
delimiter
pygame.draw.rect(Surface, (150, 0, 0), particle.rectangle, 0)
delimiter
count = 0
delimiter
primes = [2]
delimiter
output_img = input_img.crop(box)
delimiter
M[0, 2]
delimiter
data = data[order]
delimiter
f_order[0, 1, 2]
delimiter
end = datetime(end_year, end_month, 1)
delimiter
deleteddd[k]
delimiter
session.delete(x)
delimiter
H = nmf_model.components_.T
delimiter
http_server = tornado.httpserver.HTTPServer(Application())
delimiter
z[x, y] = np.dot(transformation_matrix, rgb_image[(x), (y), :])
delimiter
df
delimiter
dict(zip(self.column_names, row))
delimiter
print(jez(df))
delimiter
blocks = np.array(blocks)
delimiter
dx = pxi - pos[j, 0]
delimiter
sess.add(user)
delimiter
rank = {v: i for i, v in enumerate(sorted(a))}
delimiter
x = np.linspace(0.0, N * T, N)
delimiter
coeff_mat = hstack((vstack((n_to_M, n_to_N)), vstack((m_to_M, m_to_N))))
delimiter
jsonString = json.dumps(data)
delimiter
S = np.minimum(max_sum - P.sum(axis=1), max_range[0])
delimiter
quit()
delimiter
x + y
delimiter
print(im.size)
delimiter
insert_locations = sample(range(len(lst) + len(seq)), len(seq))
delimiter
self._lookup = {}
delimiter
channel.set_combine_stderr(True)
delimiter
f.close()
delimiter
m = max(map(hello.count, hello))
delimiter
key, value = d.popitem()
delimiter
menubar = tkinter.Menu(root)
delimiter
x, y = spstereo(lons, lats)
delimiter
df
delimiter
self.Blist = [B(True), B(False), B(True)]
delimiter
disown
delimiter
L[start:end + 1] = sorted(L[start:end + 1], key=g)
delimiter
net.ipv6.conf.all.forwarding = 1
delimiter
iph = IP(import_hexcap())
delimiter
print(value)
delimiter
wrapper
delimiter
rows = cursor.fetchall()
delimiter
f0 = round(len(index) * RATE / (2 * np.prod(len(signal))))
delimiter
df1.join(broadcast(df2))
delimiter
p = np.stack([p, p]).flatten()
delimiter
np.sum(A ** 2, axis=1)
delimiter
c_list.append(c)
delimiter
color = max(iter(histogram.items()), key=operator.itemgetter(1))[0]
delimiter
foo(1, 4)
delimiter
aclass
delimiter
False
delimiter
f = urllib.request.urlopen(req)
delimiter
auc = np.trapz(y, x)
delimiter
final = [word_list[0].capitalize()]
delimiter
print(field.name)
delimiter
outfile.write(calculation_result)
delimiter
ts = datetime.datetime.fromtimestamp(time.mktime(nofrag_dt))
delimiter
a = x.y
delimiter
A2c2 = A2.copy()
delimiter
sizes.append(len(i[1]))
delimiter
cut_idx = np.append(0, map(len, I))[:-1].cumsum()
delimiter
R = (T - y) * Dinvs
delimiter
keystate = pygame.key.get_pressed()
delimiter
l = string.split()
delimiter
movement.normalize()
delimiter
print(mystuff.average(a, b, c))
delimiter
P = mpp.Pool(mpp.cpu_count())
delimiter
print(stripTags(match.body))
delimiter
tuple(repeat() for i in range(n))
delimiter
assert (f1(data, d) == res).all()
delimiter
x = 5
delimiter
main()
delimiter
results
delimiter
client = Client()
delimiter
vals[half - i - 1]
delimiter
self.transport.setOutgoingInterface(src_ip)
delimiter
c = p.cumsum()
delimiter
reply = json.dumps(info)
delimiter
the_choice = items[choice]
delimiter
_cache[key] = f(*args, **kwargs)
delimiter
dt1start <= dt2end and dt1end >= dt2start
delimiter
dict(form=form)
delimiter
new_loop = asyncio.new_event_loop()
delimiter
http = httplib2.Http()
delimiter
dfy.plot()
delimiter
l = list(x)
delimiter
numpy_default_rng = numpy.random.random.__self__
delimiter
request = requests.get(url)
delimiter
print(df)
delimiter
c = np.vectorize(d.get)(a)
delimiter
a = np.random.randint(10, size=10)
delimiter
p.join()
delimiter
pool.map(find_inter, product(ent.shape, collidable.shape))
delimiter
print(i + -+i)
delimiter
instance.__dict__[self.prop].__get__(instance, owner)
delimiter
f.write(z.read(icon[1]))
delimiter
l1 = f1.readline()
delimiter
a = [1, 1, 1, 2, 2]
delimiter
self._stream = BytesIO(self._body)
delimiter
f2 = pl.figure(2)
delimiter
df[[0]]
delimiter
descend_list = []
delimiter
self.current += node.id
delimiter
result.add(path)
delimiter
next_item = self.queue.get(timeout=15)
delimiter
symbolList = map(Dummy, range(numEquations))
delimiter
C = np.empty(A.shape[0] * 2, dtype=A.dtype)
delimiter
groups = []
delimiter
pl.plot(xd, piecewise_linear(xd, *p))
delimiter
print(A.dtype)
delimiter
d4.setdefault(k, 0)
delimiter
doc.remove(e)
delimiter
print(NewList[0]._data)
delimiter
len(r)
delimiter
strip_list = map(str.strip, lines)
delimiter
encoded = json.dumps(obj)
delimiter
log4j.logger.org.eclipse.jetty = WARN
delimiter
sck.send(next(locker))
delimiter
True
delimiter
self.hide()
delimiter
pairs += recursion(value, new_base)
delimiter
f.truncate()
delimiter
G = (list(x) for _, x in groupby(L, lambda x, c=count(): next(c) - x))
delimiter
app
delimiter
c1 = pycurl.Curl()
delimiter
total = 0
delimiter
sm.ratio()
delimiter
main()
delimiter
result.add(k)
delimiter
assert False
delimiter
X_ = poly.fit_transform(X)
delimiter
c_float_p = ctypes.POINTER(ctypes.c_float)
delimiter
Y = np.array([2, 0, 1, 1])
delimiter
A = np.dot(X0.T, Y0)
delimiter
main()
delimiter
x = np.random.randint(xmin, xmax, ndata)
delimiter
d = pickle.load(filehandler)
delimiter
dictionary.setdefault(realName, {})[falseName] = position
delimiter
g = Graph.Lattice([10, 10], circular=False)
delimiter
bbbb
delimiter
hildonize_window = _null_hildonize_window
delimiter
player.play()
delimiter
e = Entry(root)
delimiter
print(message)
delimiter
result = str(time.time())
delimiter
loop.run_until_complete(my_app())
delimiter
CustomerAddress.objects.filter(customer_id=self.id)
delimiter
array = [1, 2, 4, 5, 4, 5, 6, 7, 2, 6, -9, 6, 4, 2, 7, 8]
delimiter
s = f.read(100)
delimiter
bins = np.linspace(-2, 2, 101)
delimiter
block = f.read(4096)
delimiter
min_y = np.nanmin(rot_points[:, (1)], axis=1)
delimiter
f_line = next(f)
delimiter
request = urllib.request.Request(url)
delimiter
two = models.CharField(max_length=255)
delimiter
yaml.add_representer(OrderedDict, ordered_dict_presenter)
delimiter
x + 5
delimiter
self.correct_response = correct_response
delimiter
test(a)
delimiter
fp = open(filename)
delimiter
self._listener.stopListening()
delimiter
sys.exit(1)
delimiter
code_out = StringIO.StringIO()
delimiter
signals.post_syncdb.connect(init_data)
delimiter
tocrawl.add(link)
delimiter
self.width = event.width
delimiter
code.interact(local=locals())
delimiter
print(A.index(l))
delimiter
next(cr)
delimiter
out = np.empty((len(x_lattice), 2), dtype=float)
delimiter
print(highscores)
delimiter
attr
delimiter
original_rows = np.asarray([[1, 0, 1], [0, 0, 0], [1, 0, 0]])
delimiter
self.write(value)
delimiter
ax = fig.add_subplot(111)
delimiter
img_hsv = color.rgb2hsv(img_color)
delimiter
linecache.cache[L.__code__.co_filename]
delimiter
reactor.listenTCP(PORT, factory)
delimiter
SL = sorted((x, i) for i, x in enumerate(L))
delimiter
ys = np.random.rand(20)
delimiter
tree = QtGui.QTreeView()
delimiter
screen.blit(user_text, text_rect)
delimiter
df1.shape
delimiter
results = p.imap(f, jobs)
delimiter
label = tk.Label(window, text=id)
delimiter
show(block=False)
delimiter
queryset = Subscription.objects.all()
delimiter
foo = _bar.__enter__()
delimiter
roots = set()
delimiter
f, ax = plt.subplots(figsize=(8, 6))
delimiter
nb.index(nb.select())
delimiter
dataDict = json.loads(data)
delimiter
values = json.load(jsonFile)
delimiter
print(doc.xml.web.total.string)
delimiter
np.array(list(fread(fname, cond)), dtype=np.float64)
delimiter
lst = [(data[i], data[i + 1]) for i in range(0, len(data), 2)]
delimiter
default()
delimiter
stefan = []
delimiter
self._data.pop(value)
delimiter
warnings.showwarning = warn_with_traceback
delimiter
df
delimiter
b_set = set(b)
delimiter
print(car)
delimiter
B_r = B.ravel()
delimiter
self.uniqueProps(lambda song: song.album)
delimiter
iterator = gen(10)
delimiter
is_invertible(a)
delimiter
print(rows[idx])
delimiter
oldfig = plt.figure
delimiter
line = lines[i]
delimiter
_vim(fname, globals())
delimiter
fout.close()
delimiter
z[-1]
delimiter
[8, 1, 5, 9]
delimiter
ind = np.argmax(counts)
delimiter
j = np.arange(len(new_x))
delimiter
fig = pyplot.figure()
delimiter
observer.start()
delimiter
print(soup)
delimiter
n = len(pd.read_csv(filename)) + 1
delimiter
np.linalg.norm(xyz - roi, axis=1) < radius
delimiter
print(line)
delimiter
z_scattered_smooth = fun_smooth(x_scattered, y_scattered)
delimiter
RGB = [0, 0, 0]
delimiter
queryset = UserProfile.objects.all(),
delimiter
P1Sum = P1Channels.sum(axis=1)
delimiter
c = CurrencyRates()
delimiter
sorted_permissions = sorted(permissions, key=permissions_key)
delimiter
ans.append(k)
delimiter
d = {}
delimiter
store.close()
delimiter
Base = declarative_base()
delimiter
x + y
delimiter
np.random.seed()
delimiter
d[b] = a[:, (i)]
delimiter
new.__dict__.update(old.__dict__)
delimiter
ser = serial.Serial(SERIAL_PORT, 9600)
delimiter
list.__init__(self, *args)
delimiter
d = keybased_defaultdict(lambda x: len(x))
delimiter
area.show()
delimiter
dw, dh = wx.DisplaySize()
delimiter
query = parse_qs(u.query)
delimiter
prev_item = resultList[i - 1][-1]
delimiter
print(millis)
delimiter
newlist = list(filter(filtah, test_list))
delimiter
self._cond.release()
delimiter
f.close()
delimiter
flipper.pack()
delimiter
rdata.append(sock.recv(MAX_PACKET))
delimiter
char = ascii_lowercase[ascii_lowercase.index(char) + 1]
delimiter
image
delimiter
serve(request, path, settings.PRIVATE_MEDIA_ROOT)
delimiter
a = iter(iterable)
delimiter
name = models.CharField(max_length=50)
delimiter
A = np.random.randint(2, size=(n, n)).astype(np.int8)
delimiter
self.setTopLevelWindow()
delimiter
tot = str(int(pri) + int(sec))
delimiter
p.start()
delimiter
bucket_list = bucket.list()
delimiter
readdir.argtypes = [c_dir_p]
delimiter
self.count = 0
delimiter
args.push_back(arg)
delimiter
process(lines)
delimiter
new_o = copy.deepcopy(o)
delimiter
deleteL[write_i:]
delimiter
print()
delimiter
threadA.join()
delimiter
neighbors = get_neighbors(x, y, img)
delimiter
0
delimiter
d = float(requests.get(realtime_url).text)
delimiter
g = Foo.Instance()
delimiter
self.depth += 1
delimiter
counter = 0
delimiter
a_test = Test()
delimiter
next(c)
delimiter
plt.plot(dist_space, kde(dist_space))
delimiter
num_converted[0] += 1
delimiter
(),
delimiter
amap = []
delimiter
conv = locale.localeconv()
delimiter
sd.SetSecurityDescriptorDacl(1, dacl, 0)
delimiter
answer = set()
delimiter
upper_red = np.array([180, 255, 255])
delimiter
request.user = user
delimiter
con = psycopg2.connect(conn_string)
delimiter
a = SomeClass()
delimiter
offset = df1.values[:, (-1)]
delimiter
s = np.zeros(p.size, p.dtype)
delimiter
data = stream.read(CHUNK2)
delimiter
os.close(fd)
delimiter
app = QApplication(sys.argv)
delimiter
axF = plt.subplot(gs1[(0), :])
delimiter
sys.stdout.name
delimiter
imp.acquire_lock()
delimiter
i = i + 1
delimiter
U.append(temp)
delimiter
self.output_queue = output_queue
delimiter
mean, sigma = np.mean(a), np.std(a)
delimiter
firstzero = (FS[:, (0)] == 0).sum()
delimiter
lst.append(el)
delimiter
df_bad_idea
delimiter
y - x if y > x else 0
delimiter
x.shape = x.shape[0], -1
delimiter
d, f = os.path.split(os.path.abspath(__file__))
delimiter
b = list(b)
delimiter
c.append(i)
delimiter
self.trd.start()
delimiter
os.chdir(curpath)
delimiter
line(5, 10, 20, finish=True).take(inf)
delimiter
count = count + 1
delimiter
m4 = deepcopy(mat)
delimiter
test
delimiter
a(0, 5)(0, 1)
delimiter
base ** power == num
delimiter
root = tree.getroot()
delimiter
True
delimiter
self.__ntrue += 1
delimiter
f[4:10, ::-1, ...]
delimiter
serving_url = models.URLField()
delimiter
{0},
delimiter
iters = [list(range(i, 5)) for i in range(4)]
delimiter
v = self.value // 2
delimiter
self.zip.close()
delimiter
tornado.autoreload.start()
delimiter
word = word.Documents.Open(doc_path)
delimiter
output_dict.setdefault(key, []).append(value)
delimiter
adate
delimiter
app = Flask(__name__)
delimiter
fields.GenericRelation(Faves)
delimiter
print(cur.description)
delimiter
index[s_word] = index.get(s_word, []) + [word]
delimiter
print(test)
delimiter
result = []
delimiter
mats.append(mat)
delimiter
session = tf.InteractiveSession()
delimiter
infile.seek(chunk_end)
delimiter
m_text = ndb.TextProperty()
delimiter
print(df)
delimiter
print(result)
delimiter
self.con.connect()
delimiter
endings = [v[len(root):] for v in hablar.values()]
delimiter
it = iter(items)
delimiter
DictAdditionalValueWrapper(d, self.specialKey, self.specialValue)
delimiter
df.iloc[0, 0] = 99
delimiter
array_crator(a, (9, 17))
delimiter
values = {k: item[k] for k in sum_value_keys}
delimiter
response.set_data(minify(response.get_data(as_text=True)))
delimiter
cap = cv2.VideoCapture(input_rtsp)
delimiter
pickle.dumps(d)
delimiter
columns = (a != 0).sum(0)
delimiter
sorted(set(fill(m)))
delimiter
x = A(1)
delimiter
emp.user_permissions.add(permission)
delimiter
p = c.getparent()
delimiter
t = t[::-1]
delimiter
clf.fit(data)
delimiter
arr = np.delete(arr, 0, axis=0)
delimiter
signals.post_save.connect(Revision().send_email, sender=Revision)
delimiter
x = np.linspace(0, 4 * np.pi, 100)
delimiter
raise DistributionNotFound(req)
delimiter
thread.put_message(message)
delimiter
hcpv = np.array([[cpt_hcpv(p, s, poro, sw) for p, s in r] for r in g_arr])
delimiter
frame.pack()
delimiter
bool({})
delimiter
print(df_resampled)
delimiter
result = Markup(result)
delimiter
X_centered = X - np.mean(X, axis=0)
delimiter
print(words)
delimiter
stringValue = lst[1]
delimiter
th.start()
delimiter
out.append(cust + sub[0])
delimiter
p = set(x + y for x, y in combinations_with_replacement(listgen(), 2))
delimiter
indices = [list1.index(c) for c in list2b]
delimiter
offset_y = lambda xy: (xy[0], xy[1] - 0.5)
delimiter
sum(x) / l, sum(y) / l
delimiter
surface.write_to_png(buffer)
delimiter
run_thread = Thread(target=run, args=(args.arg1, args.arg2))
delimiter
do_stuff(e)
delimiter
os.execv(path_to_executable, args)
delimiter
out = []
delimiter
BadRows.add(rowID)
delimiter
dirname, filename = os.path.split(filename)
delimiter
dtype = data.dtype
delimiter
test_module_n.py
delimiter
excluded_numbers.add(a[j])
delimiter
ts = time_uuid.TimeUUID(bytes=my_uuid.bytes).get_timestamp()
delimiter
k, v = line.split()
delimiter
logger.addHandler(handler)
delimiter
self.listOfVideo = []
delimiter
p, k = Phi.shape
delimiter
sorted(data, key=len, reverse=True)
delimiter
deleteSOME_VARIABLE[:]
delimiter
np.array([ax2_cid[axs] for axs in x2_Kaxs_1.flat], dtype=object).shape
delimiter
alpha.paste(circle.crop((rad, 0, rad * 2, rad)), (w - rad, 0))
delimiter
final_str
delimiter
plt.axvline(mode)
delimiter
print(df)
delimiter
self.event.wait(1)
delimiter
print(out)
delimiter
dist.append(d)
delimiter
socket.send(txt)
delimiter
page_obj
delimiter
relationships = docx.relationshiplist()
delimiter
start_time = time.time()
delimiter
lens = np.array([len(item) for item in v])
delimiter
r = [False, True] * (n // 2) + [True]
delimiter
n, d = expr.as_numer_denom()
delimiter
locale.nl_langinfo(locale.DAY_1 + x)
delimiter
newfiles = check_for_new_files()
delimiter
f.write(data)
delimiter
print(i)
delimiter
ch.setLevel(logging.ERROR)
delimiter
sys.exit(1)
delimiter
self.insert(len(self), value)
delimiter
states = [0, 2]
delimiter
self[k] = data[k]
delimiter
print(min(s), min(s, key=str.lower))
delimiter
output
delimiter
bins.values.codes
delimiter
reply = error.fp.read()
delimiter
inactive_objects = models.Manager()
delimiter
elapsed_time = time.time() - start_time
delimiter
parser.parse(input, tokenfunc=get_token, debug=0)
delimiter
results[-1] = letter, results[-1][1] + 1
delimiter
self.choice
delimiter
result
delimiter
main_group = parser.add_mutually_exclusive_group()
delimiter
ordered = [h for h in tails if h not in num_heads]
delimiter
max(t for t in sorted(hours) if t <= now)
delimiter
a = Foo()
delimiter
population.difference_update(some_list)
delimiter
module_ok = True
delimiter
downloaded += q.get()
delimiter
idxs = (rising | falling).nonzero()[0]
delimiter
print(df)
delimiter
A + ones((4, 1))
delimiter
print(res)
delimiter
a.y = 2
delimiter
http = credentials.authorize(http)
delimiter
d = {}
delimiter
nd = [0] + list(np.where(np.diff(numbers) > 15)[0] + 1) + [len(numbers)]
delimiter
os.write(fd, someStuff)
delimiter
p.join()
delimiter
iargs = iter(args)
delimiter
proc = Process(target=make_flaky_call, args=(q,))
delimiter
cursor = connection.cursor()
delimiter
cls._osx_get_modes()
delimiter
self.callback()
delimiter
c = np.array((-1, -1))
delimiter
time = 0
delimiter
logging_handler_err = logging.StreamHandler(sys.stderr)
delimiter
x2 = max(x_normalised) + 1
delimiter
sys.stdout.write(frm.tostring())
delimiter
self.data = self.default_data() if data is SENTINEL else data
delimiter
print(b)
delimiter
False
delimiter
A[1] = previous_A[0]
delimiter
rlappend(theDict[listItem])
delimiter
a = 0.0
delimiter
diff = len(list1) - len(list2)
delimiter
row = []
delimiter
arr2 = array[split_idx:, :]
delimiter
answer[pk][sk] = L[i][1]
delimiter
cursor.execute(query)
delimiter
self.trayIcon.show()
delimiter
csv_writer = csv.writer(output)
delimiter
()
delimiter
keys = random.sample(list(d), 10)
delimiter
Y = np.array([2, 0, 1, 1])
delimiter
self.verify()
delimiter
hist = pd.Series(y, x)
delimiter
results = {}
delimiter
email = db.Column(db.String(120), unique=True)
delimiter
vertices = numpy.empty(1000, dtype=vertex_dtype)
delimiter
stdout = StdOut()
delimiter
json_posts = json.dumps(list(posts))
delimiter
Z = X.copy()
delimiter
last_line = get_last_lineprocessed()
delimiter
todayDate = datetime.date.today()
delimiter
100 * self.h
delimiter
item.pk, item.__unicode__()
delimiter
b = a.reshape((5, 10))
delimiter
h
delimiter
basename = os.path.basename(pathname)
delimiter
threading.Thread(target=input_func, args=(p, lq)).start()
delimiter
numpy.lib.stride_tricks.as_strided(stacked, shape, strides)
delimiter
mat = ax.matshow(a, cmap=cmap, vmin=-1, vmax=N - 1)
delimiter
bot = ttk.Treeview(Tkinter.Tk())
delimiter
points_left = np.copy(points_center)
delimiter
self.assertEqual(mocked.yeah_im_not_going_to_run.call_count, 1)
delimiter
trglen = len(trgtext)
delimiter
temp.append((v[2],))
delimiter
outproj = osr.SpatialReference()
delimiter
random.shuffle(start)
delimiter
url_dict
delimiter
self.x = x
delimiter
last = item[1]
delimiter
cache[hash] = object_to_cache
delimiter
location = models.ForeignKey(Location)
delimiter
index += 1
delimiter
strcpy(greeting, hello)
delimiter
COMMENT
delimiter
frame = previous_trace[0]
delimiter
answer.add(r)
delimiter
print(avgs)
delimiter
i += 1
delimiter
new_x = new_x.ravel()
delimiter
r.__init__(cols)
delimiter
numbers = iter(list(range(10)))
delimiter
id(True)
delimiter
counter = Counter(s)
delimiter
key = max(scores, key=scores.get)
delimiter
fn, fext = os.path.splitext(f)
delimiter
b = a[np.lexsort(a.T)]
delimiter
config = ConfigParser.ConfigParser()
delimiter
seconds = (now - midnight).seconds
delimiter
ic = ic.filter(ImageFilter.BLUR)
delimiter
zs = np.array([f(x, y) for x, y in zip(np.ravel(X), np.ravel(Y))])
delimiter
start += 1
delimiter
conn.close()
delimiter
print ()
delimiter
assert not p.poll()
delimiter
results = Pool.map(do_work2, arglist)
delimiter
pos = np.where(np.diff(mask))[0] + 1
delimiter
print(module_name)
delimiter
sp = nx.shortest_path(G, (0, 0), (9, 9))
delimiter
method_to_be_executed_in_case_of_exception_or_pk_is_false()
delimiter
value = models.FloatField()
delimiter
[]
delimiter
ff.seek(-7, 1)
delimiter
b if a else c
delimiter
cls._threadmap[thread.get_ident()]
delimiter
response
delimiter
args = parser.parse_args()
delimiter
S = pd.to_datetime(df.dt)
delimiter
a = A()
delimiter
r_avg = sum(r_vals) / len(r_vals)
delimiter
namespace.clear()
delimiter
self.data = data
delimiter
count += 1
delimiter
insert_ids = []
delimiter
print((test, lookup[test]))
delimiter
horse
delimiter
gopher
delimiter
np.__version__
delimiter
stdout_output = proc.communicate(script)[0]
delimiter
original_save(self, *a, **kw)
delimiter
tmpdir = tempfile.mkdtemp()
delimiter
shift += len(result) - sigfig
delimiter
pl.figure(figsize=(7, 7))
delimiter
dicC = dicA.copy()
delimiter
obj = A.__new__(cls, data)
delimiter
crypts.append(mask)
delimiter
x, y = y, x + y
delimiter
text2html(self.description)
delimiter
pid = os.fork()
delimiter
s = np.vstack([np.zeros((1, v.shape[1])), v.cumsum(0)])
delimiter
sys.path = oldpath
delimiter
db.session.add(admin)
delimiter
header = my_dataframe[[i]].astype(str).columns.values
delimiter
start = a.index(item, start + 1)
delimiter
next(line_iter)
delimiter
min_dist[i] = np.min([point.distance(line) for line in lines])
delimiter
pos_a, pos_b, size = s.find_longest_match(0, len(s1), 0, len(s2))
delimiter
1 + 2
delimiter
my_func()
delimiter
y = tf.nn.softmax(tf.matmul(x, W) + b)
delimiter
z = exp(x)
delimiter
axs[1].plot(days, np.random.random(len(days)))
delimiter
file2freq[c, d] += 1
delimiter
cout[:, (-1)] = 0
delimiter
out = numpy.empty(rows * cols, dtype=broadcasted[0].dtype)
delimiter
res = res.reset_index()
delimiter
subtree = dict((n, [n]) for n in leaves)
delimiter
files = os.listdir(dir)
delimiter
print(list(literal_eval(line)))
delimiter
gmm.delta += 1
delimiter
word[start:stop:step]
delimiter
buf = in_file.readlines()
delimiter
rect(names, names, 0.9, 0.9, color=some_colors, x_range=names, y_range=names)
delimiter
executor.submit(call, cmd, stdout=outputfile, stderr=STDOUT)
delimiter
clf.tree_.children_right
delimiter
v.f2()
delimiter
top.mainloop
delimiter
writer.newLine()
delimiter
clf.tree_.children_left
delimiter
sorted_records_array = records_array[idx_sort]
delimiter
distance = [[[0] * n] * n] * n
delimiter
firefox = webdriver.Firefox()
delimiter
init_logging()
delimiter
a = gen()
delimiter
mov_avg = np.bincount(_, weights=avg_val.ravel())
delimiter
seconds, minutes = math.modf(item[2])
delimiter
full_arr = full_arr[sort_idx]
delimiter
a = [1, 9, 12]
delimiter
lines = []
delimiter
_cache[key]
delimiter
buffer = StringIO.StringIO()
delimiter
app = Flask(__name__)
delimiter
learner.train(features, labels)
delimiter
out
delimiter
item = L[i]
delimiter
fig = pylab.figure()
delimiter
fig = plt.figure()
delimiter
c = np.concatenate((a, b))
delimiter
y.byteswap()
delimiter
grp = (isone != idx.to_series().diff().eq(1)).cumsum()
delimiter
smudge_filter_openssl
delimiter
readline.read_history_file(historyPath)
delimiter
net.reset()
delimiter
os.read(self.STDIN_FILENO, 4096)
delimiter
print(inner)
delimiter
rotatedRect.points(rect_points)
delimiter
ax1 = fig.add_subplot(111)
delimiter
objects = SoftDeleteManager()
delimiter
iter(self._s)
delimiter
results = []
delimiter
raise StopIteration
delimiter
my_dict = dict(zip(b, list(range(len(b)))))
delimiter
value
delimiter
ipython
delimiter
yertle.goto(point)
delimiter
print(time.ctime(future))
delimiter
count = count + 1
delimiter
bucket_list = bucket.list()
delimiter
digits = [int(i) for i in str(input)]
delimiter
print(n)
delimiter
my_app = Flask(__name__)
delimiter
value
delimiter
last_name = CharField()
delimiter
i += 1
delimiter
Depends(test, main)
delimiter
print(s.recvfrom(65565))
delimiter
synsets.append(wn.synsets(lemma, pos=wn_tag)[0])
delimiter
self.treeview = gtk.TreeView(self.tree_filter)
delimiter
[0, 1] < 2
delimiter
app = QApplication(sys.argv)
delimiter
U[U < 2] = np.nan
delimiter
url_rule = request_ctx.request.url_rule
delimiter
extra_compile_args = []
delimiter
r = requests.get(source)
delimiter
a_map[A_object.string] = A_object
delimiter
draw()
delimiter
optionN
delimiter
print(clf.components_[(1), :])
delimiter
print(sheet_rect.height, sheet_rect.width)
delimiter
abs(area / 2.0)
delimiter
donecounter = 0
delimiter
[]
delimiter
x = A.tocoo()
delimiter
container[index]
delimiter
dyncodes = query.fetch(1)
delimiter
keys.extend(key_list)
delimiter
[]
delimiter
tar.add(full_dir)
delimiter
SystemTime = SYSTEMTIME()
delimiter
profile = webdriver.FirefoxProfile()
delimiter
show()
delimiter
rows.loc[rows.time > first_purchase_time]
delimiter
print(np.allclose(original(a), mean_around(a)))
delimiter
r[4::2] = [False] * ((n + 1) / 2 - 2)
delimiter
sleep(5)
delimiter
lon2 = loc2[0]
delimiter
v2 = np.concatenate((v, v))
delimiter
x = x - f(x) / fprime(x)
delimiter
t.create()
delimiter
ans = network.receive()
delimiter
grouped = frame.groupby(frame.columns[0])
delimiter
__repr__ = lambda self: self._tuple.__repr__()
delimiter
x, y = m(lons, lats)
delimiter
long_path_name = buffer.value
delimiter
plt.gca().add_artist(self)
delimiter
frame.pack()
delimiter
styles = getSampleStyleSheet()
delimiter
array[np.arange(N), index]
delimiter
d = d[col]
delimiter
modules.append(imp.load_module(m, f, filename, desc))
delimiter
setup.py
delimiter
content_json = json.loads(r.content)
delimiter
rows = csv.reader(infile)
delimiter
get_user_model().objects.none()
delimiter
idxInf = np.isnan(a[item]).nonzero()
delimiter
out.release()
delimiter
Gvalue = someoperation(Gnodes)
delimiter
exit(2)
delimiter
n, m = np.meshgrid(x, y)
delimiter
tmp = tempfile.NamedTemporaryFile(delete=False)
delimiter
len(solns7)
delimiter
reader = avro.datafile.DataFileReader(input, avro.io.DatumReader())
delimiter
eval(expr)
delimiter
r2 = list(range(0, end_day + 1))
delimiter
self.do_template_based_capitalization(mapping)
delimiter
locs, labels = mpl.xticks(xt, vWidth, fontsize=9)
delimiter
g[a == 0] = 255
delimiter
p.map(walk, [0] * 10)
delimiter
id = serializers.UUIDField()
delimiter
histogram()
delimiter
type(pdsDF)
delimiter
pub_dict = {}
delimiter
res_females = pool.map_async(fun_f, females)
delimiter
creative_url = models.URLField(max_length=200)
delimiter
l2.sort()
delimiter
obj = {}
delimiter
m[np.isnan(m)] = m.T[np.isnan(m)]
delimiter
np.r_[1:10, (15), (17), 50:100]
delimiter
[tox]
delimiter
fs, in_data = wavf.read(in_wav)
delimiter
decoded
delimiter
f = open(filename)
delimiter
output = []
delimiter
self._lock.release()
delimiter
pix = QtGui.QPixmap.fromImage(img)
delimiter
(14, [2, 7]),
delimiter
ws = wb.active
delimiter
https_request = http_request
delimiter
topic_bundles.append(bundle)
delimiter
something_awesome()
delimiter
q, r
delimiter
plaintext
delimiter
arr = img.load()
delimiter
ranked = []
delimiter
keys = list(dict.keys())
delimiter
output, err = process.communicate()
delimiter
len(bytes)
delimiter
message = e.args[0]
delimiter
map(accumulate, list(range(20)))
delimiter
merged.append(x)
delimiter
d = collections.defaultdict(int)
delimiter
file_list.append([i, time.ctime(a.st_atime), time.ctime(a.st_ctime)])
delimiter
+webapps
delimiter
_iterencode(o, 0)
delimiter
pager(ofh.read())
delimiter
fd = msvcrt.open_osfhandle(handle.value, 0)
delimiter
False
delimiter
Main()
delimiter
a = np.arange(100)
delimiter
self.items.append(item)
delimiter
self._val
delimiter
q75, q25 = np.percentile(x, [75, 25])
delimiter
qs_sorted = list()
delimiter
fig, ax = plt.subplots()
delimiter
myserializer
delimiter
newdata = obfuscate(data).decode()
delimiter
root = Tk()
delimiter
rf.fit(X, y)
delimiter
print(d)
delimiter
zipfile1.writestr(zipi, filedata)
delimiter
idx = b.index.union(a.index)
delimiter
g = gen()
delimiter
x = sum_list[:i + 1]
delimiter
new_stepListA.append(pathList[n][0])
delimiter
d = hashlib.md5()
delimiter
img_thresholded = cv2.inRange(img, (60, 60, 60), (140, 140, 140))
delimiter
sizer.Add(btn, 0, wx.ALL | wx.CENTER, 5)
delimiter
bar()
delimiter
typeB = acc.accounttypeB
delimiter
client = MongoClient()
delimiter
im
delimiter
getattr(self.original, name)
delimiter
indc = np.where(np.all(arr == 0, axis=0))[0]
delimiter
asyncio.set_event_loop(loop)
delimiter
json.JSONEncoder.default(self, obj)
delimiter
print(output)
delimiter
self.x_values = np.asarray(list(xdict.keys()))
delimiter
cols = list(df.columns)
delimiter
self.my_enter()
delimiter
queryset = User.objects.all()
delimiter
vscrollbar.config(command=canvas.yview)
delimiter
plt.title(title)
delimiter
print(list(split_text(c)))
delimiter
args.sort()
delimiter
OriginalShared(target, source, env)
delimiter
divider = make_axes_locatable(ax)
delimiter
x = NP.linspace(0, 1, n)
delimiter
t2 = lambda : list(map(str.strip, hello))
delimiter
b, c = (a,), (a,)
delimiter
brown_count = len(set(list_of_brown_items).difference(list_of_all_items))
delimiter
i = next(matches, 0)
delimiter
key = self._redis_key()
delimiter
lis = list(range(1, 11))
delimiter
a[ix] += values[i]
delimiter
k.tap_key(k.tab_key)
delimiter
self.download_image(self.creative_url)
delimiter
node.parents.add(prev_node)
delimiter
dataset_array.append(item)
delimiter
prevMatrix = matrixDict[thisC.index(max(thisC))]
delimiter
prevMatrix = matrixDict[thisR.index(max(thisR))]
delimiter
self.queue = queue
delimiter
results = list(pool.imap_unordered(foo_pool, list(range(10))))
delimiter
2 * x
delimiter
pygame.init()
delimiter
my_class = example.MyClass()
delimiter
narrow = wide
delimiter
lists = [list_a, list_b, list_c, list_d, list_e]
delimiter
s = pd.Series(np.arange(len(df)), index=df.time)
delimiter
__setattr__ = dict.__setitem__
delimiter
analyzer = vect.build_analyzer()
delimiter
c = SomeClass(5)
delimiter
x = np.random.random(50)
delimiter
data = np.asarray(img.getdata()).reshape(img.size)
delimiter
fp.close()
delimiter
attr = getattr(cls, name)
delimiter
ax = plt.gca()
delimiter
port = 8080
delimiter
B = 2
delimiter
self.n = n
delimiter
d = np.diag(a.A1)
delimiter
ret, frame = cap.read()
delimiter
Xtest = vect.transform(new_documents)
delimiter
object.__le__(self, other)
delimiter
Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
delimiter
bad.getparent().remove(bad)
delimiter
set(string) >= set(substring)
delimiter
app = Flask(__name__)
delimiter
print(data)
delimiter
do_something(obj)
delimiter
list(find_consecutive(my_list, 1.0))
delimiter
handler = logging.StreamHandler(log)
delimiter
current = time.time()
delimiter
my_data = []
delimiter
show(pie_chart)
delimiter
args = self.__build_command__(cmd)
delimiter
C[:] = np.dot(A, B)
delimiter
data = yaml.safe_load(f)
delimiter
fn()
delimiter
df
delimiter
df[df.C > df.C.mean()]
delimiter
result
delimiter
self.send_header(k, v)
delimiter
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
g.ax_marg_y.legend_.remove()
delimiter
wx.EVT_BUTTON(self, b.GetId(), self.OnDaemonize)
delimiter
circle(res, center, radius, color, 5)
delimiter
str(num) == str(num)[::-1]
delimiter
{{usercontent.thing_b}}
delimiter
output = [0] * len(x)
delimiter
self.queue.put_nowait(result)
delimiter
notifier.loop()
delimiter
letters = list(string.ascii_letters)
delimiter
data_cluster = KMeans(n_clusters=5)
delimiter
print(new_grammar.productions()[2091])
delimiter
on_done()
delimiter
row[8] = row[8][:-1]
delimiter
X, Y = np.meshgrid(xi, yi)
delimiter
print(i)
delimiter
put = deepcopy(tup)
delimiter
len(brown_tagged_sents)
delimiter
dict.update({cut2: x})
delimiter
print(len(path), len(path_ext))
delimiter
clientSocket.noTcpDelay(true)
delimiter
data = urllib.parse.urlencode(values)
delimiter
httpretty.enable()
delimiter
len(self.getData())
delimiter
i += 1
delimiter
body = doc.xpath(path)[0]
delimiter
clf.fit(yourdata)
delimiter
cmath.sqrt(0j) == 0j
delimiter
length = len(sublist)
delimiter
asciiz_start = struct.calcsize(format[:pos])
delimiter
self.keep_interrupt = True
delimiter
id | name
delimiter
xy = 50 * np.random.random((num, 2))
delimiter
end = len(array) - 1
delimiter
n = n - 1
delimiter
r = s.send(p)
delimiter
i += 1
delimiter
self.format(*other)
delimiter
result_df
delimiter
PAGE_HEIGHT = defaultPageSize[1]
delimiter
print(line)
delimiter
rowconvol = a[1:-1, :] + a[:-2, :] + a[2:, :]
delimiter
x = math.radians(i) * math.cos(math.radians(i))
delimiter
page2 = input2.getPage(0).rotateCounterClockwise(90)
delimiter
np.prod(x.shape) * x.itemsize
delimiter
result = set(elements)
delimiter
info = os.stat(filename)
delimiter
res = scipy.integrate.quad(integrand, 0.0, math.pi, [w, p])
delimiter
printByLine(countsSortedAlphabetically(words, reverse=True))
delimiter
HELP, DESK - IT - Support
delimiter
area = SelectField(coerce=int)
delimiter
dict
delimiter
csv_writer = csv.writer(testfile)
delimiter
5, 6, 7
delimiter
D[n, s, x]
delimiter
p = abs(scipy.stats.norm.ppf((1 - pred_error_level) / 2))
delimiter
r = random.uniform(r1, r2)
delimiter
result = list(flatten(data))
delimiter
wr = w.rowsBetween(-sys.maxsize, -1)
delimiter
expr.integrate((x, -s.pi, s.pi), (y, -s.pi, s.pi))
delimiter
time = time.strftime(DATETIME_FORMAT)
delimiter
mysocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
delimiter
base = get_datetime(base_date)
delimiter
answer = [[(2 * el) for el in sublist] for sublist in L]
delimiter
ins = example.insert().values(expire=tomorrow)
delimiter
len(self.m)
delimiter
t = time()
delimiter
seen.add(t)
delimiter
reversed = line[::-1]
delimiter
widemap = dict((ord(x[0]), x[1]) for x in zip(normal, wide))
delimiter
value = get_array(value)
delimiter
print(dwarf)
delimiter
b = b[~np.isnan(a)].astype(int)
delimiter
obj = SomeClass()
delimiter
f.__name__
delimiter
print(t)
delimiter
BOOST_PYTHON_MODULE(hello)
delimiter
http = credentials.authorize(httplib2.Http())
delimiter
n, bins = [], []
delimiter
write(n, pos + 1, op, cl + 1)
delimiter
print(2, time.time())
delimiter
_tester
delimiter
self._od = collections.OrderedDict().fromkeys(values)
delimiter
bp = plt.boxplot(data, whis=[5, 95], showfliers=True)
delimiter
avg_dists = numpy.average(dists)
delimiter
sio.seek(0)
delimiter
height = t.winfo_height()
delimiter
collatz(number)
delimiter
l = len(rearranged_data)
delimiter
t /= np.linalg.norm(t)
delimiter
print(config_root.server.port)
delimiter
start_urls, extra_domains, regexes
delimiter
exceptionArchive.write(newData)
delimiter
print(config[0].expiration)
delimiter
aa = json.loads(j, object_hook=Struct)
delimiter
set_success()
delimiter
a = b
delimiter
B = np.random.randint(M, size=N)
delimiter
print(item_due.item.ref_id)
delimiter
some_node = tree.getroot().getchildren()[1]
delimiter
dialog.destroy()
delimiter
print(mytext.capitalize())
delimiter
fig, axs = plt.subplots(len(areas), 1, figsize=(5, 45))
delimiter
h.funcA()
delimiter
library.remove(self)
delimiter
Session = sessionmaker(bind=engine)
delimiter
self.active_writer_lock.release()
delimiter
frameH = 256
delimiter
combination[p:] = list(range(combination[p] + 1, combination[p] + 2 * (r - p), 2))
delimiter
p = len(prefix)
delimiter
d[1] = c
delimiter
num = sorted([int(eval(input())) for i in range(0, n)])
delimiter
successed = 0
delimiter
unique_.append(sub.tolist())
delimiter
frames.append(data)
delimiter
y = scipy.real(scipy.ifft(Y))
delimiter
counter = collections.Counter()
delimiter
traceLock.Unlock()
delimiter
locest = optimize.fmin(pareto_ks, rvsmin * 0.7, (rvs,))
delimiter
print(id(item))
delimiter
self.q.put(item, block=True)
delimiter
queryset = User.objects.all()
delimiter
UserList.UserList.__getitem__(self, idx)
delimiter
logging.setLoggerClass(MyLogger)
delimiter
connection = pool.get_connection(command_name, **options)
delimiter
deletemyResult[:]
delimiter
r, g, b
delimiter
self.record = {}
delimiter
axis = [4, 4, 1]
delimiter
self.database[name] = old_value
delimiter
sentence = f.readline()
delimiter
views.py
delimiter
self.p *= 1 - regularization
delimiter
layout = bokeh.layouts.gridplot([[p], [color_select]])
delimiter
cur.close()
delimiter
i += 4
delimiter
mod1 = load_module(name, *foundmod)
delimiter
dis.dis(Binary)
delimiter
pygame.display.set_mode.__doc__
delimiter
a = MyClass(7)
delimiter
reader = csv.reader(lines.splitlines())
delimiter
main.object1[1]
delimiter
Excel.Quit()
delimiter
p = psutil.Process(os.getpid())
delimiter
counts[x] += 1
delimiter
takefrom.difference_update(s)
delimiter
item = yourList[i]
delimiter
order_expressions = [(Company.id == i).desc() for i in company_ids]
delimiter
a_sum = np.sum(a, axis=0)
delimiter
C = C.reshape(-1, 4)
delimiter
process_request()
delimiter
order = np.abs(np.int(order))
delimiter
args[key] = value
delimiter
print(row)
delimiter
name = name.strip()
delimiter
form.process()
delimiter
ukol1.SummaryFormula(someSummaryFormula)
delimiter
background_label = Label(top, image=filename)
delimiter
x, y = np.random.random((2, 1000))
delimiter
print(module.__file__)
delimiter
nonZeroRows = (ANOVAInputMatrixValuesArray != 0).sum(1)
delimiter
token
delimiter
-sum(map(sum, self.a))
delimiter
root.mainloop()
delimiter
size = struct.calcsize(fmt)
delimiter
subjects = dict()
delimiter
znylpx
delimiter
c.foo
delimiter
bytes = map(ord, reversed(value))
delimiter
form = TeamForm(request.POST, obj=team)
delimiter
ml.append(i)
delimiter
levels = np.array([p10, p50, p90])
delimiter
n = 10
delimiter
pickle.loads(pickled_value)
delimiter
keys = []
delimiter
LR.fit(X2[:half], y2[:half])
delimiter
deleteself.obj_
delimiter
root, infodict, ier, mesg = optimize.fsolve(pdiff, val, full_output=True)
delimiter
options, args = parser.parse_args()
delimiter
line = process.stdout.readline()
delimiter
resized_file.save(file_bytes, **save_opts)
delimiter
tunnel._lport
delimiter
[(a + d) for a, _, _, d, _ in fiveTuples]
delimiter
a * 2
delimiter
{k: [convert(i) for i in v]}
delimiter
Py_INCREF(pMyException)
delimiter
i, i + len(small) - 1
delimiter
os.makedirs(dir)
delimiter
out.close()
delimiter
make_random(someArr)
delimiter
multiply(a.ravel()[:, (newaxis)], b.ravel()[(newaxis), :], out)
delimiter
[head] + novowel(tail)
delimiter
outputmapping
delimiter
d2_dict = defaultdict(dict)
delimiter
foo = pickle.load(f)
delimiter
print(deriv_list)
delimiter
print(un[cnt == cnt.max()])
delimiter
r = [True] * n
delimiter
dirname(parse_object.path)
delimiter
myvalue = eval(name)
delimiter
map(alpha_getter, image.getdata())
delimiter
r
delimiter
value1, value2
delimiter
print(len(G))
delimiter
(self.end or datetime.now()) - self.start
delimiter
confirmation_message = _(msg_template).format(order)
delimiter
pool.close()
delimiter
m = re.match(p1, statement)
delimiter
Wrapper()
delimiter
my_list.sort()
delimiter
temp.paste(image)
delimiter
result = []
delimiter
level += 1
delimiter
l = [0] * 4
delimiter
self.listWidget.addItem(item)
delimiter
self._n_weights
delimiter
[5, 6, 7, 8, 9],
delimiter
children.append(node.kwargs)
delimiter
print(x / y)
delimiter
x = 255
delimiter
pd.concat(retLst)
delimiter
form = ItemAddForm
delimiter
c.perform()
delimiter
sys.argv[-1:] = glob.glob(sys.argv[-1])
delimiter
dfnum = df._get_numeric_data()
delimiter
align_arrays(b)
delimiter
parent.remove(child)
delimiter
array(a, dtype, copy=False, order=order)
delimiter
windows = []
delimiter
print(magicList)
delimiter
output = []
delimiter
d = np.zeros(N)
delimiter
i = len(a) - 2
delimiter
C()[1] = 0
delimiter
self.reporter.on_close(self.stats, previous_stats)
delimiter
sum(x, dtype=float64)
delimiter
path = path.replace(os.altsep, os.sep)
delimiter
time.sleep(5)
delimiter
atexit.register(self._exit)
delimiter
input[mask]
delimiter
dis.dis(a)
delimiter
c.method_a()
delimiter
f(*args, **kwargs)
delimiter
appstats_LOCK_TIMEOUT = 1
delimiter
x = arange(0, 2 * pi, 0.01)
delimiter
{{my_json}}
delimiter
print(name)
delimiter
self.__dict__[decorator.name]
delimiter
drops = (N == np.diag(N)).sum(axis=0) > 1
delimiter
print(canvas.max())
delimiter
columns = [column[0] for column in cursor.description]
delimiter
df
delimiter
True
delimiter
fraction.setParseAction(lambda t: t.numerator / t.denominator)
delimiter
reducedQs = self.get_query_set()
delimiter
pickle.dumps(d, -1)
delimiter
frm.Show()
delimiter
names.append(row[0])
delimiter
d = datetime.date.today()
delimiter
len(results) == len(letter_pattern)
delimiter
closedir.argtypes = [c_dir_p]
delimiter
arr
delimiter
[-0.5, 0.0, 0.5, 0.0],
delimiter
fig = plt.figure()
delimiter
self._normalized
delimiter
cols = []
delimiter
default()
delimiter
nd = numpy.array([-d[1], d[0]])
delimiter
hs.close()
delimiter
self.combo()
delimiter
wx.ListCtrl.__init__(self, parent, style=wx.LC_REPORT)
delimiter
np.dot(inv_A, b)
delimiter
line = f.readline()
delimiter
ax.plot(xvals, yvals)
delimiter
print()
delimiter
seconds += 1
delimiter
n = int(round(error / 0.01))
delimiter
plot(draw, img, xpxl1, ypxl1, rfpart(yend) * xgap, col, steep, dash_interval)
delimiter
self.args = kwargs
delimiter
wrapped
delimiter
event.widget.config(bg=color)
delimiter
immutable = frozenset(list(mutabledict.items()))
delimiter
counts = np.sin(np.linspace(0, np.pi, dates.size))
delimiter
pdf_contents = get_pdf_contents()
delimiter
False
delimiter
browser = selenium.webdriver.Firefox(profile)
delimiter
print(root.height())
delimiter
print(foo.T)
delimiter
result_array = result[0]
delimiter
date_tuple = email.utils.parsedate_tz(date_str)
delimiter
A = np.expand_dims(A, x)
delimiter
temp_n += 1
delimiter
description = db.StringProperty(multiline=True)
delimiter
result.append(current[:markerpos])
delimiter
img = ImageGrab.grab()
delimiter
dir(builtins)
delimiter
a.binaries,
delimiter
attributes = [n for n in directory if not callable(getattr(cls, n))]
delimiter
self.obj[frozenset((idx,))] = value
delimiter
y_data = x_data.dot(w).reshape((-1, 1))
delimiter
text
delimiter
m = np.exp(mu + sigma ** 2 / 2.0)
delimiter
add_job_callback()
delimiter
assert m[1, 0, 2] == 100
delimiter
items.append(item)
delimiter
df1.columns = df1.columns.format()
delimiter
weekday = current_date.weekday()
delimiter
d = np.diff(a.flat[i])
delimiter
-1
delimiter
self.fileTextCtrl.SetInsertionPointEnd()
delimiter
bin_ += 1
delimiter
a = set()
delimiter
message.send()
delimiter
searchB.update()
delimiter
[4.0],
delimiter
t1 = time.clock()
delimiter
next(filter(my_criteria, e))
delimiter
result = expression.subs(symbols_vals)
delimiter
f = opener.open(req)
delimiter
xybad = np.array((x[a.mask], y[a.mask])).T
delimiter
mp.freeze_support()
delimiter
time.sleep(5)
delimiter
raise je
delimiter
queue.put(result)
delimiter
client = Client(url)
delimiter
print(path_list)
delimiter
(forms.BaseForm,),
delimiter
raw.append(str(mod.__dict__[key]))
delimiter
mandel_surface.set_at((x, y), color)
delimiter
parentclass.__init__(self, *args, **kw)
delimiter
fig = plt.figure()
delimiter
temp = []
delimiter
M = V.reshape(n, 1, p) * V.reshape(1, n, p) * F.reshape(n, n, 1)
delimiter
size = os.fstat(f.fileno()).st_size
delimiter
has_unknown_fields = set(attrs.keys()) - set(self.fields.keys())
delimiter
socket.setdefaulttimeout(5.0)
delimiter
profile = cProfile.Profile()
delimiter
word, count = line.split()
delimiter
print(data)
delimiter
r = f(i)
delimiter
self.name = name
delimiter
wts = (c_double * n)(1, 1, 1)
delimiter
item
delimiter
reader = csv.reader(open(parameters_file), dialect)
delimiter
mean = cv2.mean(roi, mask=mask)
delimiter
B[1:2] = C
delimiter
output_list.append(list(record.values())[0])
delimiter
self.start()
delimiter
null_ptr[0]
delimiter
self = cls()
delimiter
0, subset1, subset2
delimiter
old_stdout = sys.stdout
delimiter
n = 0
delimiter
file_ptr.close()
delimiter
print(testclass_instance.name)
delimiter
character = myscene.GetCharacter(i)
delimiter
x = np.linspace(0, 1000, fs * 1000)
delimiter
_NestedClassGetter(), (ParentClass, self.__class__.__name__), state
delimiter
x = np.ma.array(x, mask=y == 0)
delimiter
unittest.main()
delimiter
course_id = forms.IntegerField()
delimiter
patches[0]
delimiter
spot_id = c.lastrowid
delimiter
print(self.size)
delimiter
print(result)
delimiter
print(self.obj.name)
delimiter
colidx, colslice = slice(colidx, colidx + 1), False
delimiter
signed_url
delimiter
rowidx, rowslice = slice(rowidx, rowidx + 1), False
delimiter
5
delimiter
z.write(absfn, zfn)
delimiter
a / b
delimiter
menu = QtGui.QMenu(parent)
delimiter
foo = True
delimiter
sleep(1.0 / 25)
delimiter
df
delimiter
od = OrderedDict(items)
delimiter
reversed = line[::-1]
delimiter
application.manager.run()
delimiter
5 - +-+-+2
delimiter
name = sa.Column(sa.String(50))
delimiter
xv, yv = np.meshgrid(x, y)
delimiter
logger = logging.getLogger(__name__)
delimiter
op1, op2 = int(op1), int(op2)
delimiter
testtest
delimiter
embedded_func()
delimiter
raise StopIteration
delimiter
assert n > 0
delimiter
UNION
delimiter
form = ModelForm(request.POST, request.FILES)
delimiter
req = urllib.request.Request(url)
delimiter
print(sys.maxsize)
delimiter
dump_cell(sheet, rowx, colx)
delimiter
line_number = traceback.extract_tb(tb)[-1][1]
delimiter
my_RDD_strings = sc.textFile(path_to_dir_with_JSON_files)
delimiter
setattr(related_item, fk_field, obj)
delimiter
redirect_to_login(path, login_url, redirect_field_name)
delimiter
druhy = col[1].string.strip()
delimiter
attrs
delimiter
self.rules = {}
delimiter
axs[1, 1].imshow(im)
delimiter
list(slot_combinations(A, B))
delimiter
abe
delimiter
q.join()
delimiter
method(self, *args, **kwargs)
delimiter
ostream.write(*another_objects_list)
delimiter
src.load()
delimiter
exit(-1)
delimiter
loop.run_until_complete(run())
delimiter
Foo()
delimiter
resultset = [dict(row) for row in res]
delimiter
img = img_as_float(data.camera())
delimiter
print(a)
delimiter
sys.exit(1)
delimiter
cython_module2.pyx
delimiter
path = chg.path.slice()
delimiter
integer = int(totPrimes)
delimiter
preverifyOK
delimiter
any(map(sb.__contains__, a))
delimiter
service_id, monday, tuesday, wednesday, thursday, friday, saturday, sunday, start_date, end_date
delimiter
original = Image.open(original_path)
delimiter
curve = np.zeros((num, 2))
delimiter
end_of_leader = s.index(leader) + len(leader)
delimiter
hell
delimiter
loy
delimiter
ow
delimiter
owe
delimiter
ye
delimiter
x = np.linspace(F_values_2[0], F_values_2[-1], 100)
delimiter
n = len(L) - 1
delimiter
result = cursor.fetchone()
delimiter
ast.literal_eval(s)
delimiter
start = pyqtSignal(str)
delimiter
ctypes.memset(id(a) + offset, 0, bufsize)
delimiter
trace_call()
delimiter
asyncio.run_until_complete(mock())
delimiter
i = 5
delimiter
print(df1)
delimiter
objworkbook.SaveAs(os.path.join(conv_scripts_dir, file_name))
delimiter
ax = plt.gca()
delimiter
parent[:] = sorted(parent, key=lambda x: x.tag)
delimiter
self.mainLayout = QtGui.QVBoxLayout(self)
delimiter
a.py
delimiter
child = sp.Popen(openRTSP + opts.split(), stdout=sp.PIPE)
delimiter
today - margin <= datetime.date(2011, 1, 15) <= today + margin
delimiter
fr1.index = fr1.index.droplevel(0)
delimiter
a, b = tee(iterable)
delimiter
atexit.register(readline.write_history_file, histfile)
delimiter
f(*args, **kw)
delimiter
bar()
delimiter
ax.add_line(line)
delimiter
a, b = [1, 2]
delimiter
self.flush()
delimiter
horizonPlot(xx, yy)
delimiter
grid.Add(self.figure, flag=wx.EXPAND)
delimiter
str.__init__(self, s)
delimiter
p = cs.collections[0].get_paths()[0]
delimiter
repo.heads[branch].checkout()
delimiter
row.delete()
delimiter
n_b = a.shape[0] + len(index)
delimiter
[t for t in tokens if t.lower() not in stopwords]
delimiter
print(lcl)
delimiter
print(results)
delimiter
main(sys.argv)
delimiter
pid = getmypid()
delimiter
hrow = next(reader)
delimiter
a = wait.until(EC.text_to_be_present_in_element(By.YourBy))
delimiter
plt.xlim(0, 20)
delimiter
a.keys() & b
delimiter
the_data = request.get_json()
delimiter
d[2] = c
delimiter
self.totalsize = os.path.getsize(filename)
delimiter
tally[elem] += 1
delimiter
size = self.GetSize()
delimiter
fis = np.concatenate((np.linspace(-np.pi, np.pi, 100), [np.nan]))
delimiter
p = Process(target=func, args=args, kwargs=kwargs)
delimiter
times = arange(0, 4, sample_rate)
delimiter
today = pd.datetime.today().date()
delimiter
help(math.ceil)
delimiter
a.method()
delimiter
print(t._size())
delimiter
p.setColor(w.backgroundRole(), Qt.red)
delimiter
26.0
delimiter
g_filter = np.exp(-grid) / (2 * np.pi * sigma ** 2)
delimiter
OPTION_B = 2
delimiter
self.assertTrue(isinstance(user.username, iunicode))
delimiter
mykey = paramiko.RSAKey.from_private_key_file(privatekeyfile)
delimiter
df > 16
delimiter
cond_im[1:-1, 1:-1] = cond
delimiter
eq = Eq(Derivative(p(t), t), -a * p(t) + exp(-(a + b) * t))
delimiter
c = Cheese()
delimiter
self.stdout = stdout
delimiter
True
delimiter
out.append(x)
delimiter
exp(1e-05) - 1
delimiter
score = 0
delimiter
print(max_times)
delimiter
r2 = range(1, len(r) + 1)
delimiter
print(mult.multiply_(byref(a), byref(b)))
delimiter
time_in_miliseconds = int(time_in_seconds * 1000)
delimiter
QtGui.QDirModel.data(self, index, role)
delimiter
req = QtNetwork.QNetworkRequest()
delimiter
result[I] = v1[I]
delimiter
0
delimiter
A /= A.std()
delimiter
[time.ctime(float(x)) for x in string_list]
delimiter
h = httplib.HTTPConnection(parsed.netloc)
delimiter
consumed += i
delimiter
max(new)
delimiter
f4 = bytes_to_int(f4)
delimiter
stuff()
delimiter
length = arr_view.shape[0]
delimiter
p = mp.Process(target=count, kwargs=d)
delimiter
a = 5
delimiter
c = np.any(img, axis=(0, 2))
delimiter
exit(0)
delimiter
i = random.choice(index)
delimiter
L.append(L.popleft())
delimiter
df
delimiter
a = p.abspath(somepath)
delimiter
queryset = User.objects.all()
delimiter
print(i)
delimiter
set(nltk.wordpunct_tokenize(strin)).difference(sw)
delimiter
r.text
delimiter
ax.stackplot(x, percent)
delimiter
self._instance = instance
delimiter
loop = asyncio.new_event_loop()
delimiter
self.save()
delimiter
results_q.put(ip)
delimiter
sidx = a.argsort()
delimiter
columns_to_keep.append(i)
delimiter
JM2[(ii), (ii), :] = 0
delimiter
dstdraw.polygon(dst_tri, fill=(255, 255, 255))
delimiter
words = set(fp.read().split())
delimiter
filler = string2[-1] if len(string1) > len(string2) else string1[-1]
delimiter
instance.type = fkey
delimiter
print(cursor.description)
delimiter
time.sleep(5)
delimiter
rows = []
delimiter
results.append(obj[0])
delimiter
c.append(f)
delimiter
newEl = random.choice(l)
delimiter
DELIMITER
delimiter
groups = itertools.groupby(lst, lambda i: i[0])
delimiter
xx = np.hstack([-1 * x[::-1], x])
delimiter
result_s += to_len
delimiter
der = f.read()
delimiter
set.union(*list(dd.values()))
delimiter
result[i, j] = data
delimiter
x[k] = multi_level_dict(*args[1:])
delimiter
self.weights = weights
delimiter
screenshot.show()
delimiter
line = pipe.readline()
delimiter
foobar(p, x - y, baz())
delimiter
x[nonzero] /= norms[nonzero]
delimiter
dom.append(label)
delimiter
end_date = start_date + relativedelta(days=1)
delimiter
timeout_handler()
delimiter
id_ = sqlalchemy.Column(sqlalchemy.Integer, primary_key=True)
delimiter
filenames.sort(key=os.path.normcase)
delimiter
df.drop(list_of_values)
delimiter
self.documents[i].setDocumentMargin(0)
delimiter
url = unquote(url)
delimiter
L = L[:start] + L[end:]
delimiter
ar.append(value)
delimiter
False
delimiter
x
delimiter
a = Decimal(2)
delimiter
A.method()
delimiter
replacement.join(source.rsplit(target, replacements))
delimiter
atexit.register(save_history)
delimiter
t.trundle()
delimiter
lst = [A, B, C]
delimiter
xchunk_gen = (x[i:i + chunk_size] for i in range(0, len(x), chunk_size))
delimiter
sgn * math.floor(abs(n) * factor) / factor
delimiter
st = inspect.stack()[1]
delimiter
solution_sets.append(set(new_solution))
delimiter
birdsRemain -= 1
delimiter
serializer_class = SubscriptionSerializer
delimiter
xaxis = np.linspace(0, 4, 10)
delimiter
arr = np.array(img)
delimiter
line = fin.readline()
delimiter
print(df2)
delimiter
doSomething()
delimiter
image1 = models.ImageField(upload_to=images)
delimiter
dns_server = sys.argv[2]
delimiter
i
delimiter
old_modules[name] = sys.modules.pop(name)
delimiter
maskleft = np.where(np.isnan(a))[0]
delimiter
output = id_arr.cumsum()
delimiter
decorator
delimiter
dictonary[k] = [i]
delimiter
rows.append(row)
delimiter
mommy + daddy
delimiter
x = x.reshape(1, numCols)
delimiter
p1 = perm1[loc]
delimiter
sys.stdout = flushfile(sys.stdout)
delimiter
pool.close()
delimiter
out += arr[1:-1, 2:]
delimiter
b = random.randint(0, 255)
delimiter
FACTORY_FOR = Post
delimiter
extractDefines(TEST1)
delimiter
deleteself.thisptr
delimiter
conmut = (a, b), (b, a)
delimiter
result = set()
delimiter
minimum + (maximum - minimum) * random.random()
delimiter
data = np.hstack((xData, yData))
delimiter
y_test
delimiter
arr_win[:, (0)] = arr_cum[:, (n - 1)]
delimiter
index
delimiter
train_op = control_flow_ops.with_dependencies([train_op], total_loss)
delimiter
print(l)
delimiter
[item for item in l if not set(item).difference(s)]
delimiter
application = webapp2.WSGIApplication(routes, config=_config, debug=DEBUG)
delimiter
func
delimiter
B = np.random.rand(N, N, N)
delimiter
plt.plot(new_x, new_y)
delimiter
blob_info = blobstore.get(blob_key)
delimiter
print(entry.title.text, entry.GetSelfLink().href)
delimiter
previous_value = value
delimiter
print(self.x)
delimiter
df = df.stack().to_frame()
delimiter
int(value) / int(arg)
delimiter
choices = tuple(User.objects.all().values_list())
delimiter
print(a)
delimiter
BUFFER_SIZE = 500
delimiter
new_array = map(lambda x: abs(x - some_value), my_array)
delimiter
res
delimiter
stack = []
delimiter
B = np.arange(N)
delimiter
points.update()
delimiter
data = np.exp(-(X / 80.0) ** 2 - (Y / 80.0) ** 2)
delimiter
a % 1
delimiter
spotify.stop()
delimiter
print(s, file=p.stdin)
delimiter
r, w = os.pipe()
delimiter
x[k] = v
delimiter
idx = np.hstack((0, diff_idx, b.shape[0]))
delimiter
poly = Polygon([(0, 0), (2, 8), (14, 10), (6, 1)])
delimiter
setup(install_requires=install_requires)
delimiter
line = line.strip()
delimiter
current_time = timezone.now()
delimiter
df
delimiter
start = time.time()
delimiter
max_key = max(max_key, key)
delimiter
without_punctuation = map(strip_punctuation, input_data)
delimiter
plt.text(4, 400 - 80 * il, l)
delimiter
t.join()
delimiter
self._x = self.x = x
delimiter
assert new_result, same_a_different_b
delimiter
df
delimiter
memdb.brpop(self.finished_prop)
delimiter
new_df = pd.concat([df, another_df], axis=1)
delimiter
ext_modules = []
delimiter
args = parser.parse_args()
delimiter
xi = np.array([0.2, 0.5, 0.7, 0.9])
delimiter
c.insert(c.end(), a.begin(), a.end())
delimiter
assets.url = app.static_url_path
delimiter
d[key] = list(group)
delimiter
textplot(x ** 2, 0, 5)
delimiter
shape = total_length / size, size
delimiter
to_remove = list(d.keys())[500:]
delimiter
testing = data[5:]
delimiter
print(l)
delimiter
addr = ctypes.addressof(Data.contents)
delimiter
assert np.all(answer == result)
delimiter
endif
delimiter
stream.stop_stream()
delimiter
labeled = [classify(model, features_for(u)) for u in unlabeled]
delimiter
conn.executescript(script)
delimiter
gcs_file_name = gcs_data.gcs_write_blob(dyn, field_storage.file.read())
delimiter
print(x)
delimiter
self.ax = ax
delimiter
buffer.append(line)
delimiter
OverlayImporter()
delimiter
True
delimiter
objs = []
delimiter
d[t] = 11
delimiter
print(powercheck(lst))
delimiter
lines = lines[19:52]
delimiter
list(reversed(a[2:4]))
delimiter
print(s.recv(8192))
delimiter
self.assertTrue(filecmp.cmp(path1, path2))
delimiter
0
delimiter
result = []
delimiter
comb(a, b)
delimiter
fly.rect.right = hit.rect.left
delimiter
[term_appearance.update(x) for x in l]
delimiter
count = random.randrange(1, 5)
delimiter
out = seq[0:1]
delimiter
n = randint(0, 2 ** (j - i))
delimiter
z[ind] = (x + y)[ind]
delimiter
testObj.quicktest(sys.argv)
delimiter
p = bisect.bisect_left(fpr, thresh)
delimiter
print(sizeof(mystruct))
delimiter
new_list1 += [list1[i]]
delimiter
f.seek(l, 1)
delimiter
Global = global_injector()
delimiter
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
delimiter
max(enumerate(accumulate(it), 1))
delimiter
i += 1
delimiter
newf
delimiter
foo, bar = cur.fetchone()
delimiter
mydict = {}
delimiter
i_max = len(lst)
delimiter
onerror(os.listdir, path, sys.exc_info())
delimiter
time.sleep(threading.currentThread().mytimeout)
delimiter
index = slice(0, 2)
delimiter
db.put(DB_TempTestModel(data=lots_of_data))
delimiter
d = {}
delimiter
time.sleep(random.randint(0, 50) / 10.0)
delimiter
576
delimiter
110011
delimiter
111000
delimiter
date(2015, 10, 7) - date(1, 1, 1)
delimiter
quit()
delimiter
l = list(a.values())
delimiter
batcher_loop(queue)
delimiter
handle = urllib.request.urlopen(req)
delimiter
self.finditemprop = finditemprop
delimiter
b = list(reversed(a[1:])) + a
delimiter
print(A.todense())
delimiter
print(value)
delimiter
x = v()
delimiter
loop = asyncio.get_event_loop()
delimiter
q_out.put(val)
delimiter
m.Test()
delimiter
cluster.labels_
delimiter
generating_random = true
delimiter
image = pdb.gimp_file_load(file, file)
delimiter
mpmath.exp(-1200)
delimiter
print(response.read())
delimiter
writer = csv.writer(outfile, quoting=False)
delimiter
a = a + 1
delimiter
x * x + x
delimiter
rows = []
delimiter
reactor.listenTCP(8000, factory)
delimiter
img[:, :] = 128
delimiter
df.d
delimiter
resp
delimiter
cursor2 = db.cursor()
delimiter
self.signal = True
delimiter
nodes.add(e)
delimiter
plt.subplot(221)
delimiter
settings = self.webview.getSettings()
delimiter
np.random.seed(101)
delimiter
sys.stdout = old
delimiter
item.setCheckable(True)
delimiter
pet_list
delimiter
processes_to_kill.extend(subps)
delimiter
tracefunc
delimiter
d = defaultdict(list)
delimiter
current[1] += 1
delimiter
a.insert_node(a.root, 45)
delimiter
s = list(s)
delimiter
etree = ElementTree.ElementTree()
delimiter
b = defaultdict(list)
delimiter
hosts = sorted(set(list(scan0.keys()) + list(scan1.keys())))
delimiter
edgePoint.x += self.bounds.size.width / 2.0 - self.center.x
delimiter
cols = np.zeros((w, maxlabel), np.bool)
delimiter
mainData_sheet = mainData_book.sheet_by_index(0)
delimiter
args = [iter(iterable)] * n
delimiter
x
delimiter
iterator = IT.chain([item], iterator)
delimiter
False or []
delimiter
itteration = itteration + 1
delimiter
flask.jsonify(exception=traceback.format_exc())
delimiter
threads.append(threading.Thread(target=listen_to_audio))
delimiter
pyplot.show()
delimiter
samples_avg = [((s1 + s2) / 2) for s1, s2 in zip(samples1, samples2)]
delimiter
sqs1 = sqs.filter(title_auto=q)
delimiter
self.observer = Observer()
delimiter
url[2] = urllib.parse.quote(url[2])
delimiter
freq = collections.Counter()
delimiter
tokens = [token.lower() for token in tokens if len(token) > 1]
delimiter
df = pd.DataFrame(np.random.randn(100, 5))
delimiter
()()()
delimiter
count[x] -= 1
delimiter
img[y][x][0] = r
delimiter
mod_name, file_ext = os.path.splitext(os.path.split(filepath)[-1])
delimiter
w = POP()
delimiter
serializer_class = EstablecimientoSerializer
delimiter
ax = plt.gca()
delimiter
print(is_perfect_cube(-65))
delimiter
y = np.random.randn(10, 1)
delimiter
TestApp / LICENSE
delimiter
-W15 - -ignore
delimiter
dis.dis(f)
delimiter
sets = (set(d.items()) for d in dicts)
delimiter
result
delimiter
self.null = True
delimiter
t.join()
delimiter
current.append(line)
delimiter
Thread(target=self).start()
delimiter
i.relationships
delimiter
coord(self.x + c.x, self.y + c.y)
delimiter
countup(n - 1)
delimiter
cbegin() + size()
delimiter
matches[0].ruleId, matches[0].replacements
delimiter
view.openGLContext().makeCurrentContext()
delimiter
keys.sort(key=StrictVersion)
delimiter
result = {}
delimiter
self.cursor.execute(arg1 if arg1 else arg0)
delimiter
group_sizes = pd.Series(group_sizes)
delimiter
cv2.waitKey(0)
delimiter
Response(serializer.data, status=status.HTTP_201_CREATED)
delimiter
x2.sort()
delimiter
str2_list = list(str2)
delimiter
current_user = word[:-1]
delimiter
numpy.multiply(255.0 / (display_max - display_min), image_data, out=datab)
delimiter
dirs[:] = []
delimiter
ba.extend(writtenbytes)
delimiter
b = b.ravel().view((np.str, b.itemsize * b.shape[1]))
delimiter
plt.colorbar(sm)
delimiter
ax = fig.add_subplot(111)
delimiter
file_bytes = io.BytesIO()
delimiter
type.__init__(cls, name, bases, cls_dict)
delimiter
capitals_dict
delimiter
self.__setattr__(name, value)
delimiter
Jobs = pool.map_async(args)
delimiter
d = OrderedDict()
delimiter
d = defaultdict(int)
delimiter
raise argparse.ArgumentTypeError(msg.format(arg, choices))
delimiter
x[np.isinf(x)] = np.nan
delimiter
diff = ImageChops.difference(a, b)
delimiter
jsonObj = MessageToJson(org)
delimiter
assert q.count()
delimiter
line = sys.stdin.readline()
delimiter
o1.one()
delimiter
a[:] = b
delimiter
counts = collections.Counter(x)
delimiter
print(my_lst_str)
delimiter
cr.move_to(x, y)
delimiter
startDate = datetime(2011, 7, 7)
delimiter
result = [[]]
delimiter
result
delimiter
l = len(min(dictionary[i], key=len))
delimiter
118.9404
delimiter
azel = np.asarray(azel)
delimiter
rows_to_zero = np.random.choice(np.arange(rows), size=10000, replace=False)
delimiter
self.output = asyncio.Queue()
delimiter
_translation.gettext(s) % dict
delimiter
pathA if sum(pathA) < sum(pathB) else pathB
delimiter
stream.close()
delimiter
elt.findall(get_tag_with_ns(tag_name, ns=ns))
delimiter
arr_1[1::5] = 100
delimiter
val
delimiter
data_file.readline()
delimiter
wall(0, 1)
delimiter
a = np.random.normal(size=100)
delimiter
process_thing(thing)
delimiter
[tuple(lis[j] for lis in data) for j in range(min(len(l) for l in data))]
delimiter
print(func.__doc__)
delimiter
cursor.execute(query)
delimiter
i & 4294967295
delimiter
shutil.rmtree(path_to_temporary_directory)
delimiter
parent.remove(prop)
delimiter
PYTHONUNBUFFERED = true
delimiter
zeta = random.uniform(-1, 1, size=2 ** 24)
delimiter
iN = mX.shape[0]
delimiter
print(i)
delimiter
seconds = 0
delimiter
readline.read_history_file(histfile)
delimiter
A[1][2][0].simplify()
delimiter
-r[0][0], r[0][1], r[0][2]
delimiter
[y for z in [([x] * x) for x in range(1, num + 1)] for y in z]
delimiter
now = datetime.datetime.now()
delimiter
self.lsi[self.tfidf[bow]]
delimiter
set(literal_eval(lis))
delimiter
tree.body[0].names[0].name
delimiter
print(max_len)
delimiter
print(a.help)
delimiter
tt.listen()
delimiter
address = models.CharField(max_length=1000)
delimiter
m.captures
delimiter
task_prerun.connect(_precalc_numbers, sender=tasks[PowerOfTwo.name])
delimiter
out = vals.prod(1).reshape([gn] * n_dims)
delimiter
self.loop = loop or asyncio.get_event_loop()
delimiter
fig = plt.figure(1)
delimiter
count = 0
delimiter
print(args)
delimiter
h.Write(buf.Bytes())
delimiter
self._x = self.x
delimiter
delta = timedelta(days=7)
delimiter
print((sizeof(p), repr(p.raw)))
delimiter
PeakDetection(map[string, string])
delimiter
num_zeros = len(X) - np.sum(nonzeros)
delimiter
method_to_be_executed_in_case_of_exception_or_pk_is_false()
delimiter
locale - a
delimiter
df = pd.DataFrame(tweet_sample)
delimiter
file_handler.setLevel(logging.WARNING)
delimiter
nbytes = (nbits + 7) // 8
delimiter
result = data[is_ok[b_vals]]
delimiter
n += 1
delimiter
all_pairs = []
delimiter
model._meta.db_table
delimiter
input_thread.join()
delimiter
N = 10
delimiter
a = {}
delimiter
c = Counter(x for x, c in lst for _ in range(c))
delimiter
C[x, y, z] += A[x1, y1, z1] * B[x2, y2, z2]
delimiter
myfunc(1, callback=callback)
delimiter
PyMODINIT_FUNC
delimiter
masklength = np.sum(mask)
delimiter
t.plus(1)
delimiter
line = next(p.stdout)
delimiter
result = {}
delimiter
df2 = df1.ix[4:8]
delimiter
aspect = models.ForeignKey(Aspect)
delimiter
et.tostring(self.roots[0])
delimiter
incomment = True
delimiter
idx_range = np.arange(data.shape[0])
delimiter
o.insert(o.begin(), begin, end)
delimiter
sf.close()
delimiter
print(df)
delimiter
totals[k] = totals.get(k, 0) + v
delimiter
h = t[i] - t[i - 1]
delimiter
main()
delimiter
L[i + 1] = L[i]
delimiter
cols = [ele.text.strip() for ele in cells]
delimiter
d = dict.fromkeys(range(n))
delimiter
pyth_module = PyImport_Import(module_name)
delimiter
t_component = np.array([d2s_dt2] * 2).transpose()
delimiter
print(a + b)
delimiter
allkey = set(allkey)
delimiter
System.out.println(s)
delimiter
branch = root.setdefault(path[0], [{}, []])
delimiter
json = f.read()
delimiter
{}
delimiter
self.args = args
delimiter
x = scipy.linspace(-2, 2, 1000)
delimiter
os.remove(f.name)
delimiter
i = 0
delimiter
u = urllib.request.urlopen(URL)
delimiter
print(filename)
delimiter
current = threading.current_thread()
delimiter
data = self._get_property_data()
delimiter
l = len(iterable)
delimiter
b = 1
delimiter
last_etag = feed.etag
delimiter
CustomerAddress.objects.filter(customer_id=self.id)
delimiter
Obj.jsonable()
delimiter
solar_time = datetime.combine(dt.date(), time(12)) + td
delimiter
a = 1
delimiter
axes = fig.add_subplot(111)
delimiter
REPORTLAB22 = _reportlab_version >= (2, 2)
delimiter
post.tags.add(tag)
delimiter
sublist.sort(reverse=True)
delimiter
[0.0],
delimiter
print(parser.format_help())
delimiter
df.show()
delimiter
verifier.verify(data, sig)
delimiter
m.connect()
delimiter
len(set(p1.boundary.coords).intersection(p2.boundary.coords)) >= x
delimiter
indr = np.where(np.all(arr == 0, axis=1))[0]
delimiter
s.sendall(content.encode())
delimiter
fullpath = os.path.join(path, paths)
delimiter
isinstance(open, types.FunctionType)
delimiter
filename = _get_filename(loader, mod_name)
delimiter
self._attr = value
delimiter
inv_data = l.split()
delimiter
[1, 2, 9, 0],
delimiter
print(do_add(s, 1))
delimiter
print(k, list(g))
delimiter
p = plt.pie(a, colors=cs)
delimiter
array.data()
delimiter
self.request.send(foo.lower())
delimiter
parser.exit()
delimiter
y = np.sin(u) * np.sin(v)
delimiter
it = iter(iterable)
delimiter
extent = [xbins.min(), xbins.max(), ybins.min(), ybins.max()]
delimiter
round(f)
delimiter
target = target[index + len(key):]
delimiter
t = iter(s)
delimiter
m1[1, 2]
delimiter
x = np.arange(1, 15.1, 0.1)
delimiter
wall(2, 1)
delimiter
ws.append(cols)
delimiter
VBD.create(connection, vbdrecord)
delimiter
glMatrixMode(GL_PROJECTION)
delimiter
min_pair = min(itertools.combinations(fList, 2), key=distance)
delimiter
num_smudges = len(smudged_numbers)
delimiter
a1[a2 > 0] = a2[a2.nonzero()]
delimiter
min_value = min(dict.values())
delimiter
d = ImageDraw.Draw(img)
delimiter
numpy.clip(image_data, display_min, display_max, out=image_data)
delimiter
True
delimiter
angle = getAngleBetweenPoints(-1, -1, -1, 2)
delimiter
pypi
delimiter
loaded = imp.load_module(module, f, fn, d)
delimiter
print(list)
delimiter
self.is_started = False
delimiter
turtle.forward(n * 4)
delimiter
res[i, j] = ndarr_dot_product(A[i], A[j])
delimiter
ax = fig.add_subplot(111)
delimiter
x.cumsum(axis=0, out=x)
delimiter
print(list(split_text(a)))
delimiter
jobs = u.userjob_set.all()
delimiter
q.append(next(gen))
delimiter
inspect.getargspec(foobar)
delimiter
x + 1
delimiter
tv = gtk.TextView()
delimiter
x = []
delimiter
dq = collections.deque(maxlen=50000)
delimiter
data = sorted(data)
delimiter
coeff_mat = scipy.sparse.coo_matrix((data, (row, col))).tocsc()
delimiter
find_intersect_vec(x_down, y_down, x_up, y_up)
delimiter
t1 = datetime.now()
delimiter
new_contact = Contact.put_from_message(request)
delimiter
match = match.group()
delimiter
crawler.configure()
delimiter
func = lambdify(v, Matrix([v[1], 2 * v[2]]))
delimiter
11856
delimiter
self.authName
delimiter
x_normed = x / x.max(axis=0)
delimiter
saved_args = locals()
delimiter
request.db_session = settings.Session()
delimiter
last_row = df.index[-1]
delimiter
poly_verts = [(2, 2), (5, 2.5), (6, 8), (2, 2)]
delimiter
print(foo.bar)
delimiter
dir_p = opendir(path)
delimiter
newfile.close()
delimiter
self.value == other
delimiter
GGC
delimiter
GCC
delimiter
CCA
delimiter
seq.append((n, 0))
delimiter
s = requests.Session()
delimiter
parser = HTMLParser()
delimiter
d = defaultdict(list)
delimiter
snowflakebranch(n)
delimiter
MultiConditionalTest(values, testIterations)
delimiter
self.output = tf.nn.relu(linarg)
delimiter
self.connection = redis.Redis()
delimiter
df = pd.DataFrame(data)
delimiter
word = models.TextField()
delimiter
frq = k / T
delimiter
Counter(data[1])
delimiter
self.exec_()
delimiter
mydict = recursivedict()
delimiter
c = stack.enter_context(Dummy())
delimiter
self.density_water = 1000.0
delimiter
print(a.nbytes / 1024 ** 2)
delimiter
-1
delimiter
curl = pycurl.Curl()
delimiter
s = str(rng[0][1])
delimiter
NULL
delimiter
cls = getattr(module, cls_name)
delimiter
parser = argparse.ArgumentParser()
delimiter
xlApp.Quit()
delimiter
gevent.sleep(IDLE_PERIOD)
delimiter
sum_list = map(operator.add, sum_list, li)
delimiter
tBI[item] = value
delimiter
A.get_instances()
delimiter
http_server = tornado.httpserver.HTTPServer(application)
delimiter
print(oodict[results_key] + line)
delimiter
Xs = np.average(X)
delimiter
portshort = int(port)
delimiter
soup = BeautifulSoup(self._open(request))
delimiter
print(pts[idx], idx.sum())
delimiter
img = img.reshape(planes, rows, cols)
delimiter
soup = BeautifulSoup(d)
delimiter
assert n(21) == set([16, 17, 20, 22, 45, 46])
delimiter
initargs = [sys.stdin.fileno()]
delimiter
two.shape
delimiter
myObject.doMoreStuf()
delimiter
mode = os.fstat(0).st_mode
delimiter
Arrays.sort(nums)
delimiter
train_features = train_dataframe.iloc[:, 1:]
delimiter
q = Q()
delimiter
original_string = soup.p.contents[0]
delimiter
strncpy(d, _d, sizeof(d) - 1)
delimiter
zeros_and_ones[coord[0], coord[1]] = 1
delimiter
a + b
delimiter
txt = inp.read()
delimiter
my_array[0, 0] = 1
delimiter
keep_default = True
delimiter
lock = threading.Lock()
delimiter
1, 2, []
delimiter
self.scroll.setWidgetResizable(True)
delimiter
sendSock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
delimiter
img.fillColor(color)
delimiter
s = (i for i in range(100))
delimiter
buffer_string = lines[-1]
delimiter
self._handler.setFormatter(fmt)
delimiter
test.readFrom(inf)
delimiter
tokens.assign(token_list.begin(), token_list.end())
delimiter
xmax, ymax = fig.transFigure.inverted().transform((xmax, ymax))
delimiter
print(parser.parse_args([]))
delimiter
print((len(argv), repr(argv)))
delimiter
TRUE
delimiter
XYZ = np.vstack([x, y, z])
delimiter
patch = subimage(im, (110, 125), np.pi / 6.0, 100, 200)
delimiter
dictrepr = dict.__repr__(self)
delimiter
connection.setblocking(0)
delimiter
json.dump(o[i:i + chunkSize], outfile)
delimiter
{articles: {{articles | safe}}}
delimiter
ip = ether.data
delimiter
something.y = something.x
delimiter
D = np.ones((dim,))
delimiter
first_el = mylist.pop(0)
delimiter
a = Animal()
delimiter
classifier = pickle.load(f)
delimiter
f = foo()
delimiter
manhole.Manhole(namespace)
delimiter
word_len_dict = defaultdict(list)
delimiter
result = [tuple([key] + value) for key, value in key2value.items()]
delimiter
{4, 5, 6}(maximal)
delimiter
s.listen(5)
delimiter
int(p)
delimiter
conf.check_python_headers()
delimiter
session = sessionmaker(engine)(twophase=True)
delimiter
cur = con.cursor()
delimiter
ctype = ContentType.objects.get_for_model(self.__class__)
delimiter
f = scipy.linspace(0, fs, len(Xdb))
delimiter
value = value[slice(*sindices)]
delimiter
result
delimiter
exit(1)
delimiter
print(p.x)
delimiter
tmp.append(item)
delimiter
print(i)
delimiter
print(files)
delimiter
self.data.append(data)
delimiter
worklist.extend(graph[node])
delimiter
stdin, stdout, ssh_stderr = ssh.exec_command(cmd)
delimiter
c = a
delimiter
x = np.arange(-5, 5, 10.0 / (2 * N))
delimiter
ufunclike
delimiter
id(a)
delimiter
sys.settrace(mytrace)
delimiter
y = np.linspace(1.0, 10.0, 20)
delimiter
field.formfield()
delimiter
main()
delimiter
rect_start = coordinates[0][0] - i, coordinates[0][1] - i
delimiter
pwd.getpwuid(os.getuid()).pw_dir
delimiter
sess = tf.InteractiveSession()
delimiter
y_val = clf.predict(samples)
delimiter
tt.tm_yday
delimiter
seg = a[col_index[i:i + snip]]
delimiter
PyArray_Return(meanX)
delimiter
s1 = set([5, 7, 8, 2, 1, 9, 0])
delimiter
a = A()
delimiter
print(lasthash)
delimiter
c = a.ravel()
delimiter
main()
delimiter
res = requests.get(*args, **kwargs)
delimiter
resultlist = []
delimiter
plt.subplot(2, 1, 1)
delimiter
print(c)
delimiter
a = f()[1]
delimiter
True
delimiter
a
delimiter
a = pair_freq - d1[0][base1] * d1[1][base2]
delimiter
mlab.figure(bgcolor=white)
delimiter
DOT11_CIPHER_ALGO_WEP = 257
delimiter
_ROOT = os.path.abspath(os.path.dirname(__file__))
delimiter
out_ar[i] = pd.Timestamp(datetime.datetime.combine(date, time))
delimiter
df
delimiter
proc_id = str(multiprocessing.current_process())
delimiter
self.v_c / self.H0
delimiter
print(d)
delimiter
listener = serial.Serial(com_port1, baudrate)
delimiter
cls(page=page)
delimiter
matrix[tuple(reversed(pair))]
delimiter
gcm_device = models.OneToOneField(GCMDevice)
delimiter
t = s.execute()
delimiter
self.solve()
delimiter
a[1]
delimiter
m = a != 0
delimiter
r = np.zeros((rows, rows))
delimiter
bus = dbus.SystemBus()
delimiter
db.store(serial_str)
delimiter
Employee.manager_id = Column(Integer, ForeignKey(Employee.id))
delimiter
msg.attach(img)
delimiter
vec_tfidf = tfidf[vec_bow]
delimiter
cache = {}
delimiter
[compressrange(map(long2ip, rng)) for rng in ranges]
delimiter
CloseKey(key)
delimiter
print(word_list)
delimiter
print(d)
delimiter
ax.relim()
delimiter
l1.index(20)
delimiter
fi = np.arange(k)
delimiter
seen = set()
delimiter
ft = a.get_level_values(1)
delimiter
app.run(debug=True)
delimiter
splash.Show()
delimiter
dataE = [sorted(x) for x in zip(geometry, geometry[1:] + geometry[:1])]
delimiter
2, 7, 8, 9, 18
delimiter
root = Tk()
delimiter
print(config_root.licence_file)
delimiter
line.set_data([], [])
delimiter
self.owned = owned
delimiter
deleteself.thisptr
delimiter
node_count = sum(1 for _ in db.nodes)
delimiter
logger_a.setLevel(logging.DEBUG)
delimiter
print(i)
delimiter
-499999999999999999999999999999999999999999
delimiter
summed[key] = summed.get(key, 0) + value
delimiter
okBtn = wx.Button(self, wx.ID_OK)
delimiter
str(self.view)
delimiter
l = list(range(20))
delimiter
0
delimiter
a = np.random.randn(1000)
delimiter
count = 0
delimiter
deleteobj.data[field_name]
delimiter
user = username(request.user)
delimiter
saved = []
delimiter
ndb.delete_multi_async(Counter.query().fetch(keys_only=True))
delimiter
kmer2count[kmer1] += initcount[kmer2]
delimiter
gc.collect()
delimiter
df
delimiter
pd.Panel(d).transpose(2, 0, 1).to_frame().reset_index()
delimiter
report = models.ForeignKey(Report)
delimiter
a * (1 - np.exp(b * x))
delimiter
affprop.fit(similarity)
delimiter
groups = [list(g) for n, g in groupby(sorted(cols, key=fnc), key=fnc)]
delimiter
self.pushButtonSimulate = QtGui.QPushButton(self)
delimiter
self.a = 1
delimiter
s = textwrap.wrap(text, width=10)
delimiter
show(p)
delimiter
date_wise_stats[i[0]] += 1
delimiter
a = datetime.now()
delimiter
MyImplementation.do_stuff(request.something)
delimiter
V = np.sqrt(np.mat(np.diag(C)).T * np.mat(np.diag(C)))
delimiter
row = next(csvDict)
delimiter
ret = np.empty(len(input))
delimiter
x = y = np.arange(-5, 5, 0.05)
delimiter
zi = np.array([[0.0, 1.0, 2.0], [0.0, 1.0, 2.0], [-0.1, 1.0, 2.0]])
delimiter
b[i] = 0
delimiter
self.squares[row * 8 + col]
delimiter
painter.end()
delimiter
a = str(num)
delimiter
x + y
delimiter
positions[a] < positions[b]
delimiter
d = {}
delimiter
new = []
delimiter
start = time.time()
delimiter
self.x = x
delimiter
register_treebuilders_from(_lxml)
delimiter
tangent_y = tangent[:, (1)]
delimiter
field_names = [v[1] for v in string.Formatter().parse(s)]
delimiter
result = tuple(islice(it, n))
delimiter
echo.serve_forever()
delimiter
inputElement = driver.find_element_by_name(key)
delimiter
np.put(canvas, linear_index, 1.0)
delimiter
d = c * (c < 255) + 255 * np.ones(np.shape(c)) * (c > 255)
delimiter
page.mergePage(new_pdf.getPage(0))
delimiter
share_memory(a, b)
delimiter
q = Queue()
delimiter
l = s[i + 1]
delimiter
upper_white = np.array([255, sensitivity, 255])
delimiter
mod.__file__ = filename
delimiter
ordered_dump(data, Dumper=yaml.SafeDumper)
delimiter
zip_code = models.CharField(max_length=20)
delimiter
client = paramiko.SSHClient()
delimiter
A.foo.__func__(y)
delimiter
timerThread.start()
delimiter
print(nextdate)
delimiter
out = timeobj.replace(tzinfo=pytz.utc)
delimiter
do_something(c_temp)
delimiter
Z = np.log2(np.arange(Y.size) + 100) * 0.001
delimiter
newlist[i] += str(counts[item])
delimiter
y.append(int(_y))
delimiter
print(str(clause))
delimiter
print(commands.formfile.__doc__)
delimiter
a[list(indices)] = -1
delimiter
df2[df1.columns[0]] = df1.iloc[:, (0)]
delimiter
1
delimiter
self.parser.quote_mode()
delimiter
self.z = z
delimiter
result = []
delimiter
HTHflips = HTTflips = 0
delimiter
sum1 = row1.sum()
delimiter
workbook = xlwt.Workbook()
delimiter
num
delimiter
get_platform()
delimiter
redis_client.delete(key)
delimiter
colors.append(cmap(n / float(N)))
delimiter
55247
delimiter
55248
delimiter
55249
delimiter
ax.plot_trisurf(tri, z)
delimiter
runner.run(suite)
delimiter
print(df)
delimiter
another_pet.say()
delimiter
p = IP() / TCP(flags=18)
delimiter
text
delimiter
groups = OrderedDict()
delimiter
mocked_zipfile.namelist()
delimiter
B = A[:]
delimiter
fig = plt.figure(0)
delimiter
is_new_style_class(New)
delimiter
print(months[2])
delimiter
value_to_key
delimiter
print(solution(x))
delimiter
self.a1a2_edit.setText(str(product))
delimiter
func_names = [f.__name__ for f in func_list]
delimiter
b.shape = 2 * len(a[0]), 2
delimiter
use(block)
delimiter
data = someFunc(*arg, **kw)
delimiter
glMatrixMode(GL_MODELVIEW)
delimiter
match_cache[m]
delimiter
id_arr[idx[:-1]] = -a[:-1] + 1
delimiter
df_list = []
delimiter
names.append(name)
delimiter
print(location.address)
delimiter
id(c)
delimiter
points = sorted(points)
delimiter
plt.plot(np.sort(heights), vF(x=np.sort(heights), data=heights))
delimiter
{{usercontent.thing_a}}
delimiter
vstart = vspell[1]
delimiter
mins.pop()
delimiter
y += 1
delimiter
foo(arr)
delimiter
x
delimiter
self.get_value(field_name, args, kwargs), field_name
delimiter
pool.close()
delimiter
y = det([[a[0], 1, a[2]], [b[0], 1, b[2]], [c[0], 1, c[2]]])
delimiter
A = [[1, 1], [1, 1]]
delimiter
X.T[:1, :] = x
delimiter
x = datetime(2011, 1, 5)
delimiter
max_x = np.nanmax(rot_points[:, (0)], axis=1)
delimiter
np.array(train_idxs), np.array(val_idxs)
delimiter
[]
delimiter
csvdata_old.set_index(mergecols, inplace=True, drop=False)
delimiter
matcher = re.compile(pattern, re.X)
delimiter
labels = skimage.morphology.label(img)
delimiter
getattr(ImportedLib, string1 + string2)()
delimiter
intersect = dict1.keys() & dict2.keys()
delimiter
node = Node()
delimiter
log.msg(nicklist)
delimiter
print(msg.SenderEmailAddress)
delimiter
index = int(w.curselection()[0])
delimiter
task = AsyncResult(task_id)
delimiter
sys.exit(app.exec_())
delimiter
print(x & z)
delimiter
v = in_.get(k)
delimiter
l = [x, y, z]
delimiter
col = column_index_from_string(xy[0])
delimiter
k = 0
delimiter
canvas.blit(ax.bbox)
delimiter
fp.close()
delimiter
django.middleware.csrf.CsrfResponseMiddleware
delimiter
myjson = json.load(sys.stdin)
delimiter
self._box._ipython_display_()
delimiter
sorted_keys = sorted(stealth_check.keys())
delimiter
tri = qhull.Delaunay(xy)
delimiter
parts = line.strip().split()
delimiter
df
delimiter
Title = a.childNodes[0].nodeValue
delimiter
first_num = int(next(d))
delimiter
v.visit(node)
delimiter
print(i, c)
delimiter
packet = f.read(blocksize)
delimiter
result.update(diffs)
delimiter
new_result.extend(combo + [word] for word in words)
delimiter
new_lis = [list(v) for k, v in groupby(lis, key=itemgetter(1))]
delimiter
keyed_dict[i, e].append(tup)
delimiter
window = Gtk.Window
delimiter
b[s]
delimiter
self.extend([self._gen()] * (index - len(self) + 1))
delimiter
mymap.__code__
delimiter
result = getattr(dataImage, method)
delimiter
df = pd.DataFrame(d)
delimiter
print(response.url)
delimiter
wait_process.start()
delimiter
fig = plt.figure()
delimiter
s = set()
delimiter
func.__code__
delimiter
recvSock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
delimiter
axes.bar(x1, y, facecolor=getCycledColor())
delimiter
new_vertices = vor.vertices.tolist()
delimiter
lst.sort(key=len)
delimiter
name = list(p.keys())
delimiter
log_handle.setLevel(logging.WARNING)
delimiter
x.iloc[4]
delimiter
last_i_elements = url_elements[i:]
delimiter
my_decoded_str = str.decode(bytes)
delimiter
student_tuples.sort(key=itemgetter(0))
delimiter
setattr(self, countname, getattr(self, countname, 0) + 1)
delimiter
est = stats.pareto.fit_fr(rvs, 1.0, frozen=[np.nan, loc, np.nan])
delimiter
Base = sqlalchemy.ext.declarative.declarative_base()
delimiter
raise StopIteration
delimiter
filename = part.get_filename()
delimiter
print(s.recv.__doc__)
delimiter
popen(cmd)
delimiter
even_numbers = (n for n in numbers if not n % 2)
delimiter
self.layoutAboutToBeChanged.emit()
delimiter
my_dict = defaultdict(dict)
delimiter
options, args = parser.parse_args()
delimiter
letter = letters.get(self.rank, str(self.rank))
delimiter
fig = plt.figure()
delimiter
Y = linalg.lstsq(A, X)[0]
delimiter
X = np.random.rand(nNew, 2)
delimiter
profile = selenium.webdriver.FirefoxProfile()
delimiter
getter[0]()
delimiter
k = datetime.date(2010, 5, 26) - datetime.date(2010, 2, 10)
delimiter
results.append(file)
delimiter
result.append(current)
delimiter
ret
delimiter
chunk_size = 1024 * 1024
delimiter
this()
delimiter
input = sys.stdin.readline()
delimiter
p.peek()
delimiter
pred = types.FunctionType(marshal.loads(pred), globals())
delimiter
L = [1, 2, 45, 55, 5, 4, 4, 4, 4, 4, 4, 5456, 56, 6, 7, 67]
delimiter
s = s.rstrip()
delimiter
models / __init__.py
delimiter
self.ui.comboBox.view().pressed.connect(self.handleItemPressed)
delimiter
search_offset + m.start(), search_offset + m.end()
delimiter
exclude = set(string.punctuation)
delimiter
axmatrix.set_yticks([])
delimiter
dest = PDFFileWriter()
delimiter
raiz.mainloop()
delimiter
cond_im = np.zeros_like(im, dtype=bool)
delimiter
L.remove(c)
delimiter
porter.stem(greatest)
delimiter
2 + 2 == 5
delimiter
fig = plt.figure()
delimiter
indices = np.dstack(np.indices(im.shape[:2]))
delimiter
delay = time.time() - start
delimiter
self[key]
delimiter
ax.plot(xf, 2.0 / N * np.abs(yf[:N // 2]))
delimiter
requests_session = requests.session()
delimiter
a = sheet.cell(row=i, column=j)
delimiter
b()
delimiter
print(clean.clean_html(html))
delimiter
raise TypeError
delimiter
result = list(unpack(x))
delimiter
True
delimiter
k = ord(s[i])
delimiter
names = [x.name for x in triggers]
delimiter
input = input.lower()
delimiter
print(curated_text)
delimiter
nges = summation(n[i], [i, 1, numSpecies])
delimiter
answer = my_value / divisor
delimiter
c.prerequisites.add(b)
delimiter
pythons_tasklist = []
delimiter
dfWeeks.assign(target_hit=dfWeeks.apply(find_match, 1))
delimiter
sleep(1)
delimiter
file_content = f.read()
delimiter
args = [iter(iterable)] * n
delimiter
subquery = session.query(table_c.id)
delimiter
b = pd.Series(np.random.randn(200) / 100 + 0.001)
delimiter
a + 1
delimiter
y in x
delimiter
random.shuffle(chars)
delimiter
root.instance.related_set.all()
delimiter
units = models.TextField(max_length=500)
delimiter
zipfile.write(filename, dest_path)
delimiter
plt.scatter(dat[:, (0)], dat[:, (1)], c=fit.labels_)
delimiter
rv.append(x)
delimiter
c = app.test_client()
delimiter
im = im.point(lambda p: p > threshold and 255)
delimiter
doStuff(item)
delimiter
red, green, blue
delimiter
bytes([first, random.choice(trailing_values)])
delimiter
row = []
delimiter
new_dic[1][2] = 5
delimiter
filter_summary = tf.image_summary(filter)
delimiter
server = loop.run_until_complete(coro)
delimiter
programming / index
delimiter
results.append(model_solve(100))
delimiter
MakeHeptagonalPrism()
delimiter
time_created = Column(DateTime(timezone=True), server_default=func.now())
delimiter
sys.exec_prefix
delimiter
test = pd.DataFrame(np.random.random((4, 4)))
delimiter
print(dir_name)
delimiter
a = sys.executable
delimiter
print(e)
delimiter
x_subplot = fig.add_subplot(2, 2, i)
delimiter
output = []
delimiter
self.other_field_name = other_field_name
delimiter
n = len(users)
delimiter
collection.set_array(np.array(colors))
delimiter
s.dummy()
delimiter
x
delimiter
x.append(1)
delimiter
i = next(i for i, v in enumerate(list_) if v)
delimiter
f.write(line)
delimiter
d = {}
delimiter
outdata[i] = (ctypes.c_double * 6)()
delimiter
previous_df_no += 1
delimiter
ax.autoscale_view(True, True, True)
delimiter
(0, 1)[0]
delimiter
np.may_share_memory(X1, X1.reshape(X1.shape[0], -1)[:, (0)])
delimiter
sys.stdout.flush()
delimiter
df = grp.mean()
delimiter
signature = base64.b64decode(signature.encode())
delimiter
print(rofile[a])
delimiter
np.loads(zlib.decompress(value))
delimiter
q = lambda x, y: -np.sqrt(max(0, 1 - x ** 2 - y ** 2))
delimiter
doc = nlp(text)
delimiter
random.shuffle(self.name_list)
delimiter
x = np.arange(i - size, i + size)
delimiter
print(i, e)
delimiter
stat2[k] = v
delimiter
solutions = get_possible_solutions()
delimiter
item = prio_queue.get()
delimiter
print(self.__bar)
delimiter
idx = np.sort(np.array(list(product(np.arange(gn), repeat=n_dims))), axis=1)
delimiter
unpickled.foo
delimiter
f.add_done_callback(submit_if_success)
delimiter
self.master.bell()
delimiter
uid = StringField(required=True)
delimiter
logging.getLevelName(15)
delimiter
[uwsgi]
delimiter
theList = list(range(20))
delimiter
f2(X, list_obj_array)
delimiter
atexit.register(self.delpid)
delimiter
lastsum += addval - subval
delimiter
cumulative_fails = is_fail.cumsum()
delimiter
a = 10
delimiter
self.copy_constructor(orig)
delimiter
g += f * f
delimiter
base_parser_50 = argparse.ArgumentParser(add_help=False)
delimiter
i += 1
delimiter
print(sequence1)
delimiter
print(match(to_words(a), to_words(b)))
delimiter
r_dataframe = pandas2ri.py2ri(df)
delimiter
ax1 = fig.add_axes([0.09, 0.1, 0.2, 0.6])
delimiter
start_new_thread(gentask, ())
delimiter
(any(isColor(*pixel)) for pixel in im.iterpixels())
delimiter
M[:, (j)]
delimiter
count = np.sum(mask)
delimiter
groups = collections.defaultdict(set)
delimiter
a = numpy.zeros(10, numpy.uint8)
delimiter
count = 0
delimiter
points = sorted(list(set([(i % bound) for i in points])))
delimiter
color = im.cmap(im.norm(value))
delimiter
od[name] = rpy2.robjects.conversion.py2ri(values)
delimiter
self.parent = parent
delimiter
print(urlparse(u).netloc)
delimiter
a = numpy.arange(10)
delimiter
bigmat
delimiter
self.color_cycle = itertools.cycle(clist)
delimiter
sub_df
delimiter
quit = True
delimiter
print([co for co in c if not st1.issubset(co) and not st2.issubset(co)])
delimiter
start, stop, step
delimiter
np.in1d(aView, bView)
delimiter
print(get_diagonal(m, 1, 1, 1))
delimiter
y = a[len(y):] + b[len(y):] + y
delimiter
persons = Person.objects.all()
delimiter
arr[sl]
delimiter
data = urllib.parse.urlencode(values)
delimiter
query_d = urlparse.parse_qs(parse_result.query)
delimiter
instance, created = Book.objects.get_or_create(slug=slug, defaults=d)
delimiter
p.stdin.close()
delimiter
df * weight[0]
delimiter
result
delimiter
a = {x, y}
delimiter
x * x
delimiter
-_prereq
delimiter
fd.inc(word)
delimiter
coro
delimiter
item
delimiter
print(a[:, (0)])
delimiter
popt, pcov = curve_fit(func, x, y, p0=(1, 1e-06, 1))
delimiter
blueprint.add_app_template_filter(filter2)
delimiter
self._items[regex]
delimiter
value
delimiter
libfoo.pi
delimiter
dur1 = 1
delimiter
lis = [x.split() for x in f]
delimiter
a.get(1)
delimiter
first_row = df.index.get_loc(first[0])
delimiter
MyModelSerializer
delimiter
f = bar
delimiter
MyClass.decorated_method
delimiter
process.poll()
delimiter
0
delimiter
2 * li
delimiter
id(s)
delimiter
self._stdout.seek(0)
delimiter
list.__setitem__(self, key, value)
delimiter
chain.append(item)
delimiter
comment.replace_with(fixed_text)
delimiter
dectest
delimiter
e_str = binascii.hexlify(n_bytes)
delimiter
os.replace(outfile.name, input_file.name)
delimiter
factor5 = sum
delimiter
self.sleep_func(10)
delimiter
print ()
delimiter
Py_DECREF(m)
delimiter
d = np.array([dx, dy])
delimiter
loop.add_reader(self._fd, self.handle_read)
delimiter
df * weight
delimiter
u = urllib.request.urlopen(req)
delimiter
reconnect_to_database()
delimiter
App.run()
delimiter
df
delimiter
axis = np.asarray(axis)
delimiter
f_handle.close()
delimiter
x = np.sin(2 * np.pi * t)
delimiter
l = map(timesTwo, l)
delimiter
urls.put(attr[1])
delimiter
fig.add_layout(myToolTip)
delimiter
len(list(c.elements()))
delimiter
dist = np.sqrt(x ** 2 + y ** 2)
delimiter
chessgame.apply_move(chessgame.get_moves()[1])
delimiter
self.wfile.write(html.encode())
delimiter
value = 0
delimiter
print(base.foo(), base.fooBase())
delimiter
some_objects = MyClass.objects.all()
delimiter
new = large_array[(large_array >= min_val) & (large_array <= max_val)]
delimiter
context.update(csrf(request))
delimiter
[set([x for i in s for x in lis[i]]) for s in disjoint_indices(lis)]
delimiter
existing_user = auth_models.User.get_by_auth_id(email)
delimiter
ax1.set_xticks([])
delimiter
intermed_func = functools.partial(magic_map, str.split)
delimiter
setattr(cls, k, getattr(a, k).__func__)
delimiter
smtp_conn.ehlo()
delimiter
date_after_month = datetime.now() + relativedelta(day=1)
delimiter
x2[x2 < q].shape[0]
delimiter
myCounter += 2
delimiter
input_size = len(input)
delimiter
clauses = (Q(address__icontains=p) for p in postcodes)
delimiter
get(d[key], rest)
delimiter
chan.exec_command(cmd)
delimiter
trayIcon.show()
delimiter
fh = urlopen(url)
delimiter
oldHeight = image.shape[0]
delimiter
fr.Show()
delimiter
c()
delimiter
weekdays._days_cache = {}
delimiter
gray = cv2.blur(gray, (15, 1))
delimiter
names = []
delimiter
n = sum(1 for line in open(filename)) - 1
delimiter
old_handler = signal.signal(signal.SIGALRM, timeout_handler)
delimiter
df < 1
delimiter
self._my_numpies
delimiter
y = c / (1 + np.exp(-k * (x - x0))) + y0
delimiter
counts[i] += 1
delimiter
self._name
delimiter
proposal = uniform(low, high)
delimiter
big_table[nchunks] = {}
delimiter
im = Image.open(thefile)
delimiter
__builtin__.profile = profile
delimiter
y.squeeze()
delimiter
ulist.append(utest)
delimiter
myA[truncate_mask(myA > val, n)] = 0
delimiter
foobar.__name__
delimiter
summary_merge = tf.merge_all_summaries()
delimiter
list1 = list1[:-max_size]
delimiter
http = httplib2.Http()
delimiter
pool.close()
delimiter
new_data.append(triple)
delimiter
items = set([-1, 0, 1, 2])
delimiter
clusters = km.fit_predict(X_train_tfidf)
delimiter
print(recognised_tags[tag_id])
delimiter
print(mindiff, x2sort[mindiff], x1sort[mindiff], x1sort[mindiff - 1])
delimiter
sort - Vu | head - 1
delimiter
res_arr = sparseness2(express_df.values)
delimiter
X = np.arange(dk, 0.4, dk)
delimiter
div.removeChild(div.firstChild)
delimiter
start()
delimiter
x, y = np.random.random((2, N, 2))
delimiter
ax.plot(*coords.T)
delimiter
a = numpy.arange(n1)
delimiter
d1 = {}
delimiter
ptr.close()
delimiter
list(it)
delimiter
configure_uploads(app, (csvfiles,))
delimiter
Builder.load_string(kv)
delimiter
y
delimiter
1.66666666667
delimiter
70.6666666667
delimiter
temp = str(integer)
delimiter
Yr = int(current_date[7:11])
delimiter
d = OrderedDict()
delimiter
ac.append((wx.ACCEL_NORMAL, key, _id))
delimiter
output[strD] = outData
delimiter
e.sort()
delimiter
output = ob_get_clean()
delimiter
print(stack[len(stack) - 1][2])
delimiter
loader.close()
delimiter
optimize_result = scipy.optimize.minimize(neg_log_likelihood, [1.0])
delimiter
l.append(Point(1.0, 0.0, 0.0))
delimiter
reactor.listenTCP(7080, server.Site(Math()))
delimiter
test_string
delimiter
print(predresult)
delimiter
result = self.cursor.fetchone()
delimiter
zxcvb
delimiter
setattr(instance, self.name, value)
delimiter
map(threading.Thread.join, threads)
delimiter
min_key, min_value = k, v
delimiter
idx = (A > 2) * (A < 8)
delimiter
arr[:, (-1)] = np.where(np.arange(M) <= min(max_range[-1], max_sum), 1, 0)
delimiter
m = max(len(x) for x in a)
delimiter
base_parser_20 = argparse.ArgumentParser(add_help=False)
delimiter
new_obj = pickle.loads(pickle_str)
delimiter
pickle.load(s)
delimiter
a1_rows.difference(a2_rows)
delimiter
measured.append(tuple(float(x) for x in (ampl, phase, speed)))
delimiter
open_db()
delimiter
i += 1
delimiter
point = np.array([0.0, 0.0, c])
delimiter
img_hsv[..., (0)] = color_mask_hsv[..., (0)]
delimiter
dis.dis(bar)
delimiter
x
delimiter
deleteself.keyToId[key]
delimiter
f = lambda x: x == 0
delimiter
q.put(res)
delimiter
type(obj)(namedtuple_asdict(item) for item in obj)
delimiter
D[C[1][i]].add(C[0][i])
delimiter
df2
delimiter
edges = cv2.Canny(gray, 10, 100)
delimiter
dir(pyudt.pyudt_socket)
delimiter
dfs({Sequence1: [Translate], Translate: [Sequence1]}, Sequence1)
delimiter
unknown_compressed_data[:10]
delimiter
sys.stdout = EatLog()
delimiter
app.Quit()
delimiter
sheet.cell(row=1, column=c + 2).value = col_name
delimiter
signer.update(message)
delimiter
new_list_of_pixels = pool.map(update_pixel, list_of_pixels)
delimiter
foo.MyClass()
delimiter
attract_to_closest(points, attractors, f)
delimiter
im1 = np.vstack((im[x:], im[:x]))
delimiter
keep_names = [name for name in dt.names if name not in names]
delimiter
self.empty()
delimiter
d = [0] * (max(lst) + 1)
delimiter
query.offset(offset).limit(limit).all()
delimiter
dec_lat = random.random() / 100
delimiter
handlers = [(re.compile(x.re), x) for x in [message, warning, foo, bar, baz]]
delimiter
print(np.outer(w[i], v[i]))
delimiter
trg[k] = v
delimiter
main()
delimiter
data_2 = np.random.randn(len(categories))
delimiter
ws = wb.Worksheets[1]
delimiter
self.votes.size()
delimiter
print(fab.env.roles)
delimiter
setattr(namespace, self.dest, items)
delimiter
warpPerspective(src, transformed, transmtx, transformed.size())
delimiter
buf = in_file.read(block_size)
delimiter
X[0:1, (4)]
delimiter
df.a.values
delimiter
s = frozenset((2, 1))
delimiter
a = 10 ** np.array(np.linspace(-10, 10, 51), dtype=np.float64)
delimiter
S = set([0, 2, 6, 8])
delimiter
output[day] += 1
delimiter
f = outer_func(5)
delimiter
page = urllib.request.urlopen(access.get_imdbURL(movie))
delimiter
result = int(n)
delimiter
print(strings.customer_name)
delimiter
timeit.timeit(f, number=100000000)
delimiter
m, n = np.meshgrid(z, z)
delimiter
0, 1, 1
delimiter
repr(node)
delimiter
print(y)
delimiter
System.out.println(line)
delimiter
materials = [0, 0, 47, 0, 2, 2, 47]
delimiter
datum = caffe.proto.caffe_pb2.Datum()
delimiter
maxp = max(maxp, len(str(item.price)))
delimiter
x
delimiter
z = array([cat((t, rep(9999, k))) for t, k in zip(s[:-1], j)])
delimiter
config = tf.ConfigProto(log_device_placement=True)
delimiter
list_[index] *= 2
delimiter
key in dictionary and valid(dictionary[key])
delimiter
print(l)
delimiter
self.transport.start_client()
delimiter
M = nx.MultiGraph()
delimiter
print(bitmath.Byte(bytes=4026).best_prefix())
delimiter
new_list = []
delimiter
D = 2
delimiter
vector = np.array([10, 20])
delimiter
arr2 = array[i + 1:]
delimiter
x = sparse.lil_matrix((N, N))
delimiter
Pdb
delimiter
list_b = ModelB.objects.all()
delimiter
j += 1
delimiter
names[host] = nick
delimiter
mat[h, k] = mat[h, k] + 1
delimiter
self.word_type
delimiter
file_sample_rdd = sc.emptyRDD()
delimiter
mime_image.set_payload(file_upload.read())
delimiter
unique(a)
delimiter
data[0, 0] = 1, 2
delimiter
self.xaxis.set_zorder(2.5)
delimiter
this_method = getattr(self, method)
delimiter
self._pixmap = QtGui.QPixmap(self.pixmap())
delimiter
self.x = v
delimiter
self.hide()
delimiter
form_instance = form.save()
delimiter
repo.modified_files
delimiter
stop = start + np.random.randint(1, 10, nsubarray)
delimiter
self.map[hash(item)]
delimiter
print((c, d))
delimiter
img[y][x][2] = b
delimiter
tag = soup.div
delimiter
a = [np.arange(1, k + 1) for k in ua]
delimiter
(df > 0).all(1)
delimiter
plt.figure()
delimiter
image.getpixel()
delimiter
[codeintel]
delimiter
list[0] = 42
delimiter
pil_img = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
delimiter
label.pack()
delimiter
PersonQuerySet(self.model)
delimiter
yd = [float(row[1]) for row in data]
delimiter
contents = dir(module_code)
delimiter
[]
delimiter
glDrawElements(GL_TRIANGLE_STRIP, count, GL_UNSIGNED_SHORT, buf + 14)
delimiter
amps = 100 + 100 * np.random.random(ng)
delimiter
x = np.random.randn(1000)
delimiter
root.after(5000, lambda : root.focus_force())
delimiter
br.click_link(l)
delimiter
print(numpy.array(list(range(10))))
delimiter
BytesIO.__init__(self, buf)
delimiter
self.exprStack.append(toks[0])
delimiter
a = np.random.random(100) * 0.5
delimiter
help(int.__add__)
delimiter
sys.stdout = out
delimiter
mask = np.ones((8, 8))
delimiter
source = cv2.imread()
delimiter
p2.wait()
delimiter
win.getMouse()
delimiter
jobs.append(p)
delimiter
print((next(I1), next(I1), next(I1)))
delimiter
print(s)
delimiter
arr[i] = (c_short * len(numpy_arr[i]))()
delimiter
method = getattr(cls, n)
delimiter
df
delimiter
fh.setLevel(logging.DEBUG)
delimiter
out = pairs[((p0 == 0) | (p1 == 0)).sum(1) != 2]
delimiter
r = {}
delimiter
gconf_root_key = applet.get_preferences_key()
delimiter
self.Splash = True
delimiter
seen.add(x)
delimiter
loop.run_forever()
delimiter
self.SetSizerAndFit(self.windowSizer)
delimiter
ref = (r.split() for r in reffin)
delimiter
self.fig = ax.figure
delimiter
y = x[:, (np.newaxis)]
delimiter
score = models.IntegerField()
delimiter
conn = MongoClient(host, port)
delimiter
os.close(fd)
delimiter
shutil.move(tmp.name, filename)
delimiter
print(str(e))
delimiter
print([f() for f in funcs])
delimiter
a2 = list(s)
delimiter
score += 1
delimiter
get_ipython().Completer.limit_to__all__ = True
delimiter
total.start()
delimiter
result
delimiter
data = task.result()
delimiter
qr = qrtools.QR()
delimiter
print(save_match.match.group(1))
delimiter
res = []
delimiter
kernel[mask] = 1
delimiter
func()
delimiter
self._value = 1
delimiter
now = str(datetime.datetime.now())
delimiter
f = fft(x)
delimiter
Gdk.cairo_set_source_pixbuf(context, self.pixbuf, 0, 0)
delimiter
print(text)
delimiter
self._pid = os.getpid()
delimiter
response = urllib.request.urlopen(request)
delimiter
{}
delimiter
[2, 1],
delimiter
density = np.concatenate(results).reshape(xi.shape)
delimiter
main()
delimiter
app
delimiter
print(p.map(numpy.sqrt, x))
delimiter
merged[item[key]] = item
delimiter
0
delimiter
self.complete(decisions=decisions)
delimiter
content = pickle.dumps(somedata)
delimiter
param.static_method_A()
delimiter
l, d
delimiter
taskindex = available.pop(random.randrange(0, len(available)))
delimiter
a = (c_char * 4 * 2)()
delimiter
self.q *= 1 - regularization
delimiter
NotImplemented
delimiter
print(outputfile[0])
delimiter
prog = ast.parse(sys.stdin.read())
delimiter
axarr[2].plot(x, cut_signal)
delimiter
name = StringField()
delimiter
func(repeat(string_iterable))
delimiter
result[k] = dmerge(x[k], y[k])
delimiter
y = r * math.cos(theta)
delimiter
omega = 2 * pi / wavelength
delimiter
r = np.random.rand(prob_matrix.shape[1])
delimiter
t1, t2 = tee(iterable)
delimiter
a = np.array([4.0, 5.0])
delimiter
c = Counter(a)
delimiter
print(df_a.merge(df_b))
delimiter
df = pd.DataFrame(data)
delimiter
d = defaultdict(list)
delimiter
self.name = name
delimiter
print(a)
delimiter
diffthis
delimiter
testme = np.array(alist)
delimiter
func(L)
delimiter
A = 2 * np.arange(10)
delimiter
ret = self.func(obj, *args, **kwargs)
delimiter
list_of_strings = b.tolist()
delimiter
r(argv[1])
delimiter
seen = set()
delimiter
le = preprocessing.LabelEncoder()
delimiter
c.start()
delimiter
treebank.tagged_words()
delimiter
timeout = self._timeout
delimiter
self.list = list()
delimiter
newWord
delimiter
bananas(x)
delimiter
print(globals.value)
delimiter
p = np.column_stack((x_down, y_down))
delimiter
window = MainWindow()
delimiter
self.md5 = hashlib.md5()
delimiter
df
delimiter
resultList.append(a[index:index + length])
delimiter
self.view = QtGui.QGraphicsView(self.scene)
delimiter
s = StringIO.StringIO()
delimiter
list(closed_range(1, 10))
delimiter
plt.show()
delimiter
shape = a.shape[:-1] + (a.shape[-1] - window + 1, window)
delimiter
[i, j], [i2, j2]
delimiter
[]
delimiter
cols = mask.all(axis=0)
delimiter
t[::2], t[1::2] = t[1::2], t[::2]
delimiter
True
delimiter
sum(nrs)
delimiter
y = np.random.rand(5)
delimiter
unquote(value)
delimiter
h2, w2 = img1.shape[:2]
delimiter
_.isoweekday()
delimiter
sys.exit(main())
delimiter
values = [tuple(dd[k][0] for k in list(dd.keys()))]
delimiter
train_imp = imp.transform(train)
delimiter
my_field = Models.IntegerField(choices=MY_CHOICES)
delimiter
0, 1, 1
delimiter
install.initialize_options(self)
delimiter
x = arange(0, 10)
delimiter
transport.open()
delimiter
process(item)
delimiter
points = np.ones(len(user_item), int)
delimiter
g[0] = x[0] ** 2 - x[1] + 1
delimiter
result = np.arange(a.shape[0])[mask][arg]
delimiter
inputready, outputready, exceptready = select.select(input, [], [])
delimiter
dic = dic.setdefault(key, {})
delimiter
pymongo.has_c()
delimiter
encoded
delimiter
myarray = np.arange(20)
delimiter
print(yaml.dump(test2))
delimiter
v = v[:, (np.newaxis)]
delimiter
win = GraphWin(width=200, height=200)
delimiter
print(formattedList)
delimiter
solve_linear_system(A, x, y, z)
delimiter
d = a.flat
delimiter
goto(1)
delimiter
self._queryset = qs
delimiter
eachpwd = line.strip()
delimiter
x = chr(a | b << 1 | c << 2 | d << 5)
delimiter
self.name = name
delimiter
sock.close()
delimiter
x = np.arange(100)
delimiter
stdscr.move(y, x - 1)
delimiter
df = psql.frame_query(sql, cnxn)
delimiter
m = alsaaudio.Mixer()
delimiter
con = np.concatenate((c, b))
delimiter
B = numpy.ones((2, 2)) / 4
delimiter
sum_x = np.sum(arr[:, (0)])
delimiter
print(x)
delimiter
k = random.choice(list(x.keys()))
delimiter
print(x)
delimiter
server.start()
delimiter
t.timeit()
delimiter
nums[i] = int(Math.random() * (Math.random() * 2001 - 1000))
delimiter
rows, cols = arr.shape
delimiter
self.parser.bracket_mode()
delimiter
p.start()
delimiter
categories = [animal.categories.all() for animal in all_animals]
delimiter
ctsquarelib.mysumsquares.restype = ctypes.c_float
delimiter
socket.setdefaulttimeout(original_timeout)
delimiter
print(result)
delimiter
f2()
delimiter
f(d)
delimiter
web = QWebView()
delimiter
block_list.extend(sequences[:])
delimiter
query = Foo()
delimiter
n = len(sublist)
delimiter
t.join()
delimiter
shutil.copy(filepath, destpath)
delimiter
average[i, j] += kernel[ii, jj] * matriz[i + ii, j + jj]
delimiter
sum(item if i % 2 else -1 * item for i, item in enumerate(mylist, 1))
delimiter
PROPERTIES
delimiter
-rrequirements.txt
delimiter
txt.close()
delimiter
x = numpy.linspace(0, 10, 100)
delimiter
print(finder.nbest(bigram_measures.likelihood_ratio, 10))
delimiter
y = np.empty(x.size, dtype=np.int64)
delimiter
t = time.time()
delimiter
listview.list()
delimiter
a = A()
delimiter
self.params = dict(list(request.GET.items()))
delimiter
self.age = 21
delimiter
date = line[0].split()
delimiter
a = A(1)
delimiter
Y[..., (1)] = 1
delimiter
print(repr(item))
delimiter
assert f.read() == DATA
delimiter
cout[1:-1, 1:-1] = out
delimiter
endDate = datetime(2011, 10, 7)
delimiter
s.index = [s.groupby(level=0).cumcount(), s.index]
delimiter
secret = models.TextField(max_length=255)
delimiter
chunkfile.write(line)
delimiter
print((k, hddict[k]))
delimiter
wb = xl.Workbooks.Open(yourExcelFile)
delimiter
nbytes /= 1024.0
delimiter
self.attributes_string()
delimiter
process_line(line)
delimiter
print(answer)
delimiter
macro.request.formatter.text(code_out.getvalue())
delimiter
d[p[1]] += 1
delimiter
queryset._raw_delete(queryset.db)
delimiter
print(value)
delimiter
K, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0
delimiter
node = destination.setdefault(key, {})
delimiter
ldlt_np(A)
delimiter
print(res)
delimiter
priority_list[i[1]] += 1
delimiter
p.drawImage(image)
delimiter
zip_longest(fillvalue=fillvalue, *([it] * size))
delimiter
print(df2[~df2.isin(df1).all(1)])
delimiter
nbors.append(i + A + p * W + (r - p) / 2)
delimiter
func()
delimiter
axs[1, 1].plot(rand(100))
delimiter
self.subject = msg.Subject
delimiter
[4, 4, 5, 5, 6, 6],
delimiter
result
delimiter
decimal.getcontext().prec = 100
delimiter
y_fit2 = Func(x, *popt2)
delimiter
G = nx.from_numpy_matrix(A)
delimiter
print(dingo)
delimiter
print(mytext.title())
delimiter
print(df)
delimiter
train_likes_df = pd.read_csv(io.StringIO(temp))
delimiter
G = nx.Graph(edgelist)
delimiter
arr1inds = arr1.argsort()
delimiter
a + b
delimiter
self.memo[id(obj)] = 1
delimiter
mro = cls.mro()[1]
delimiter
id = Column(Integer, primary_key=True)
delimiter
f.write(bin)
delimiter
f.close()
delimiter
item = singlet_list[0] if singlet_list else False
delimiter
groups = itertools.groupby(allLines, lambda x: x[1])
delimiter
counter
delimiter
result = result.subs(old, new)
delimiter
triples = []
delimiter
cd / opt / local / Library / Frameworks / Python.framework / Versions / 2.6
delimiter
new_dict = {}
delimiter
threefold = list(KFold(len(y)))
delimiter
app = MyCelery()
delimiter
suite = unittest.TestLoader().loadTestsFromTestCase(TestEffortFormula)
delimiter
widget = treeview_column.get_widget()
delimiter
stylesheet_file.close()
delimiter
rtn
delimiter
lasagne.layers.set_all_param_values(network_output, param_values)
delimiter
matches = []
delimiter
cdata = s[0].contents[0]
delimiter
results = {}
delimiter
tmp = self.head
delimiter
pipeline.start()
delimiter
r = resolve(request.path)
delimiter
endpoints = sorted(list(set([r[0] for r in ranges] + [r[1] for r in ranges])))
delimiter
ct.char_test.print_strings(strings, strings.shape[1])
delimiter
self.apachereq.write(data)
delimiter
a = df.values[:, (0)].copy()
delimiter
x = np.linspace(0, 2 * np.pi, n)
delimiter
Y[..., (0)] = np.angle(X) / (2 * pi) % 1
delimiter
self.searching = True
delimiter
print(node)
delimiter
x = np.random.random((5, 5))
delimiter
self.slopes = [((y2 - y1) / (x2 - x1)) for x1, x2, y1, y2 in intervals]
delimiter
plt.semilogx(w, phase)
delimiter
idx = df.groupby([df.customer, df.invoice_nr, df.date, df.amount.abs()])
delimiter
swap(i, 0)
delimiter
print(sum(1 for i in numbers if i % k == 0))
delimiter
print(type(img_np))
delimiter
coefficients = np.polyfit(x, y, 1)
delimiter
register_wrapper
delimiter
python - -version
delimiter
data = str(data)
delimiter
X, Y = np.meshgrid(x, x)
delimiter
print(tree2)
delimiter
self.contained = df
delimiter
data = f.read()
delimiter
lines.update()
delimiter
new_loop.append(S + str(i))
delimiter
j += 1
delimiter
zindex += 1
delimiter
GetWindowText(hwnd, win_name, win_len + 1)
delimiter
x = np.reshape(n, (N, 1))
delimiter
DF = [pd.DataFrame()] * 5
delimiter
print(r)
delimiter
out = np.zeros(mask.shape, dtype=data.dtype)
delimiter
col1 = df.col1.values.repeat([len(c) for c in c2.tolist()])
delimiter
t = time.monotonic()
delimiter
self.finished = -1 if error else 1
delimiter
anchor_layout.add_widget(label)
delimiter
worksheet1.set_column(1, 1, width)
delimiter
seq_pow2(4)
delimiter
httplib.responses[404]
delimiter
outfile.write(a)
delimiter
i = iter(list_of_strings)
delimiter
sql = sqldb.get_session()
delimiter
sys.stdout = NullIO()
delimiter
green = np.random.hypergeometric(ngreen, nblue, m - red)
delimiter
print((n, repr(readline(int(n), f, findex))))
delimiter
regexes.append(build_compiled(r, p, re.DOTALL, code))
delimiter
merged
delimiter
json_obj = json.dumps(some_dictionary, sort_keys=True, indent=4)
delimiter
w0 = np.ones_like(x0)
delimiter
area = 460.0
delimiter
new_start_date = localtime(self.start_date) + add_days
delimiter
plt.show()
delimiter
plt.plot(spect)
delimiter
self[0] = value
delimiter
self.__parent__ = parent
delimiter
self.assertTrue(testuser.upper() == user.username)
delimiter
help()
delimiter
rect_end = coordinates[1][0] + i, coordinates[1][1] + i
delimiter
gen = func(*args, **kw)
delimiter
RNG = random.Random()
delimiter
str = PyString_FromStringAndSize(s, size)
delimiter
lambda y: x
delimiter
frame = inspect.stack()[1][0]
delimiter
list(range(1, i, 2))
delimiter
m = Mock()
delimiter
Case(When(created__month=0, then=1), output_field=IntegerField())
delimiter
soup = BeautifulSoup(html)
delimiter
print ()
delimiter
NotImplemented
delimiter
True
delimiter
a1.binaries,
delimiter
string = string[first_full_stop + 1:last_full_stop + 1]
delimiter
list = []
delimiter
category = random.choice(list(lists.keys()))
delimiter
self.created = datetime.today()
delimiter
m = my_regex.findall(string)
delimiter
shape1, loc1, scale1 = rv1.dist._parse_args(*rv1.args, **rv1.kwds)
delimiter
tmp_arr.append(float(j) / float(a))
delimiter
listC[1][1] = 100
delimiter
f = norm.cdf(x, mu, sigma)
delimiter
Progname = erl
delimiter
p = find_key(v, value)
delimiter
form.Show()
delimiter
km.load_connection_file()
delimiter
prefixed = []
delimiter
a = np.random.rand(5, 4)
delimiter
out, err = capsys.readouterr()
delimiter
result.append(board)
delimiter
b = test.keys()
delimiter
sock.bind((sourceIP, 0))
delimiter
shape[:arr.ndim] -= window - 1
delimiter
str(stepNode.childNodes[0].nodeValue)
delimiter
product = np.dot(M, F)
delimiter
arr_1 = np.array(multidim_list)
delimiter
result
delimiter
gs.tight_layout(fig, rect=[0, 0, 1, 0.97])
delimiter
invf._update(record[name], record)
delimiter
a = iter(l)
delimiter
b & 1 == 0
delimiter
np.save(f, data)
delimiter
numpy.asarray([my_list])
delimiter
a.x2 = a.x2.shift(1)
delimiter
self.parent.weaponDestroyed()
delimiter
synonyms = wordnet.synsets(text)
delimiter
pyplot.plot(xnew, heights_smooth)
delimiter
udp_port.socket.setsockopt(socket.SOL_SOCKET, IN.SO_BINDTODEVICE, dev)
delimiter
param.static_method_A()
delimiter
my_saved_data = json.loads(string_from_file)
delimiter
arr[j:, (i)] += arr[:M - j, (i + 1)]
delimiter
html = bs4.BeautifulSoup(r.text)
delimiter
print(dataf.to_string)
delimiter
node.end()
delimiter
bases = set(inspect.getmro(type(next(iseq))))
delimiter
raw_data = u.read()
delimiter
label = encodings.idna.nameprep(str(label))
delimiter
True
delimiter
[nested]
delimiter
self[key] = self.factory(key)
delimiter
instance = request.user
delimiter
next(c)
delimiter
loop = asyncio.get_event_loop()
delimiter
s = pd.Series(test)
delimiter
queryset
delimiter
Py_TPFLAGS_CHECKTYPES = 1 << 4
delimiter
exec_globals.update(copy_globals)
delimiter
inspect.ismethod(Foo.bar)
delimiter
self.write(data.decode())
delimiter
pylab.plot(X[list(range(1024, 2048)) + list(range(0, 1024))])
delimiter
Y = pdist(X, f)
delimiter
plot(xdata, ydata)
delimiter
x[:] = (value for value in x if value != 2)
delimiter
line[:7] + [line7] + line[8:]
delimiter
mod = inspect.getmodule(frm[0])
delimiter
self.age = age
delimiter
foo = e.module
delimiter
edid = get_regval(regkey)
delimiter
new_seasonal_indices.set_shape(seasonal_indices.get_shape())
delimiter
df
delimiter
c = OSC.OSCClient()
delimiter
lambda x: f(g(x))
delimiter
ruamel.yaml.round_trip_dump(data, fo)
delimiter
result
delimiter
T = 0
delimiter
ar[1] = np.arctan2(vect[1], vect[2])
delimiter
time.sleep(1)
delimiter
next(build_generator(a, v * 2 + 1, mid + 1, end))
delimiter
some_node = some_node.getchildren()[0]
delimiter
tree = ET.parse(io.BytesIO(content))
delimiter
callable(c)
delimiter
file_like_io.tell()
delimiter
word1[1:] == word2[1:]
delimiter
data = []
delimiter
self.L.remove(k)
delimiter
y = np.matrix([0, 1, 1, 0]).transpose()
delimiter
print(b.Pear)
delimiter
args = sys.argv[1:]
delimiter
x = np.random.randn(500, 500, 500)
delimiter
self.actions[cond_1, cond_2]()
delimiter
time.sleep(sleep_time)
delimiter
print(attr)
delimiter
len(u.bytes)
delimiter
im2 = cv2.bitwise_and(destination, destination, mask=mask_inv)
delimiter
nL[i] = 1
delimiter
0, 0, 0, 0, 0
delimiter
new, = new.nonzero()
delimiter
paths.append(child_path)
delimiter
V = np.zeros((n // BSZ, BSZ))
delimiter
print(factorization)
delimiter
re.compile = lambda pattern, flags: re.my_compile(pattern, flags | re.DOTALL)
delimiter
x = np.arange(0, 100, 1e-05)
delimiter
line_list = line.split(delimiter)
delimiter
self.rows.append(self.cells)
delimiter
layout = QtGui.QVBoxLayout()
delimiter
print(x)
delimiter
x = f(x)
delimiter
a = ABC(func)
delimiter
owner = db.ReferenceProperty(Human, required=True)
delimiter
cnt = np.bincount(a)
delimiter
sys.stdin = os.fdopen(fileno)
delimiter
new_time = now + datetime.timedelta(seconds=time_in_seconds)
delimiter
self.name = Name
delimiter
r = cv2.boundingRect(pts)
delimiter
raise MyConfigError(e.message)
delimiter
self.parent.notifyChange(self.id, strChange)
delimiter
bytes_in_file = self.tell()
delimiter
date_cand = datetime.date(*map(int, date))
delimiter
job = Job.objects.filter(client__id=pk)
delimiter
G.add_edges_from(removed)
delimiter
lmaorofllolwtfpwned
delimiter
_check_something
delimiter
sum(1 for v in r if v % divNumber == 0)
delimiter
count = Counter(fragments())
delimiter
o.append([x])
delimiter
params = [c1, mu1, sigma1, c2, mu2, sigma2]
delimiter
window.append(line)
delimiter
predictions = model.predict(X)
delimiter
wall(2, 5)
delimiter
count(char, text, spot + 1)
delimiter
Base = declarative_base()
delimiter
lines = []
delimiter
print(useful_word)
delimiter
req = urllib.request.Request(url)
delimiter
items = []
delimiter
self.unregister(user)
delimiter
i += 1
delimiter
fscale = freq_scale.lower()
delimiter
data_1 = np.random.randn(len(categories))
delimiter
host = socket.gethostname()
delimiter
ButtonsApp().run()
delimiter
axes_2.add_patch(Ellipse1.art())
delimiter
height = rect.get_height()
delimiter
self._instance
delimiter
0
delimiter
cols = df.columns
delimiter
target = NP.empty(shape=s.shape, dtype=NP.float)
delimiter
glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP)
delimiter
d.append(e)
delimiter
file.write(x)
delimiter
self.trayIcon.hide()
delimiter
print(df)
delimiter
self.key = key
delimiter
self.form_valid(form)
delimiter
x = arima_mod.aic
delimiter
crypts = []
delimiter
sorted_ids = ids[sidx]
delimiter
x = np.zeros(10)
delimiter
constructors = set(_shared_tasks)
delimiter
print(density)
delimiter
counts[value[1]] = counts.get(value[1], 0) + 1
delimiter
merger.merge(position=0, fileobj=path)
delimiter
port = 1219
delimiter
form = ProductAdminForm
delimiter
di_str = dict((str(x), y) for x, y in zip(list(di.keys()), list(di.values())))
delimiter
p = Process(target=func)
delimiter
output = dict(zip(year, file_contents_values_grouped_by_year))
delimiter
m = v.shape[0]
delimiter
L[i] = L[i + length]
delimiter
binary_data = xmlrpclib.Binary(handle.read())
delimiter
df_b = df_a + np.random.randn(5, 7)
delimiter
dll.get_buf.restype = c_char_p
delimiter
fig = plt.figure()
delimiter
self.remove_edge_by_id(edge.id)
delimiter
s.write(datum.data)
delimiter
print_data(data)
delimiter
t.start()
delimiter
print(args)
delimiter
response
delimiter
start = (len(A) - 2) / 2
delimiter
print(d)
delimiter
self.host = host
delimiter
cd = os.getcwd()
delimiter
[[]]
delimiter
self.add_child(child)
delimiter
ax0.imshow(image, cmap=plt.cm.gray)
delimiter
closed.append(name)
delimiter
PyObject * dict
delimiter
last.append(val)
delimiter
get_stems_recursive(remaining, partial + [stems[i][0]], result)
delimiter
formats.py
delimiter
9.99
delimiter
s = pd.Series([[col] for col in df.columns])
delimiter
element
delimiter
o = A()
delimiter
f = lambda t: len(t[1])
delimiter
help(cv2.xfeatures2d)
delimiter
form = EmployeeForm()
delimiter
fedora
delimiter
response = profile.runcall(app, environ, start_response)
delimiter
cyts = aliased(TextString)
delimiter
denom = [c10 * 10, c20 * 20, c50 * 50, e1 * 100, e2 * 200, e5 * 500]
delimiter
a, b = tee(iterable)
delimiter
answer = []
delimiter
OrderedDict(fields)
delimiter
assert a[0] == 2
delimiter
self.rows = []
delimiter
bool(parsed_url.scheme)
delimiter
print(logging.getLogger().handlers)
delimiter
x, y = inv.transform([(event.x, event.y)]).ravel()
delimiter
print(e)
delimiter
parsed_output.write(window[0])
delimiter
pygame.display.update(pygame.draw.circle(srf, color, (x, y), radius))
delimiter
fig, ax = plt.subplots()
delimiter
mail = Mail()
delimiter
x = csv.reader(a)
delimiter
np.linalg.norm(v)
delimiter
self._str.upper()
delimiter
[account1]
delimiter
L1 = [a, b, c], [d, e, f], [g, h, i]
delimiter
self._save(saved_name, ContentFile(saved_source))
delimiter
q = {tdk: []}
delimiter
lines.append(line)
delimiter
raise ValueError
delimiter
email = models.EmailField(max_length=100)
delimiter
self.__str__()
delimiter
body
delimiter
start = time.clock()
delimiter
df1.Moves = g.sum()
delimiter
pickle.compatible_formats
delimiter
validation_images = images[~mask]
delimiter
total_count = Content.objects.count()
delimiter
to_self.close()
delimiter
len(train)
delimiter
print(r_dataframe)
delimiter
fig, ax1 = plt.subplots()
delimiter
s = [[str(e) for e in row] for row in matrix]
delimiter
self.index = 0
delimiter
src = mlab.pipeline.scalar_field(s)
delimiter
L1.sort(reverse=True)
delimiter
instance = Test()
delimiter
patcher = patch(module_name, **kwargs)
delimiter
f.close()
delimiter
newlist = mylist[n:]
delimiter
WORKDIR / code
delimiter
norm = np.linalg.norm(v, ord=1)
delimiter
n = 0
delimiter
A1 = ((A1 + offsets) / norms).T * priorita
delimiter
t = np.linspace(start.value, end.value, 100)
delimiter
[False, True, False, True, True],
delimiter
fig.subplots_adjust(bottom=bottom + textHeightFig, hspace=newHspace)
delimiter
NULL
delimiter
date_time = datetime.now()
delimiter
axmatrix.set_xticks([])
delimiter
dv = list(d.values())
delimiter
{0, 4, 5, 6, 0, 0, 0},
delimiter
a = [l[i] for i, flag in enumerate(flags) if flag]
delimiter
self.app = QApplication(sys.argv)
delimiter
y_train = Xy_train[:, (0)]
delimiter
print(a)
delimiter
root.mainloop()
delimiter
bar.bar()
delimiter
example[1:5]
delimiter
attr = getattr(obj, name)
delimiter
l, extend(r)
delimiter
o, e = process.communicate()
delimiter
farming_details = {}
delimiter
print(dateobj)
delimiter
self._x
delimiter
MyFancyNumber(5) / 4
delimiter
method_code = inspect.currentframe().f_code
delimiter
v = tf.Variable(0)
delimiter
x - x
delimiter
data = np.array(img)
delimiter
dtype = PyArray_DTYPE(arr)
delimiter
mdd, start, end
delimiter
print(sum(asDigits(2 ** 1000)))
delimiter
folders.append(path)
delimiter
m & (np.cumsum(m) <= stop)
delimiter
sigma = sum(y * (x - mean) ** 2) / n
delimiter
df
delimiter
print(result)
delimiter
fdir, fname = os.path.split(fpath)
delimiter
newfoo
delimiter
share_memory(a, f)
delimiter
test_data = np.delete(data, indices)
delimiter
panel.SetSizer(sizer)
delimiter
file = vacation.jpg
delimiter
nexts = cycle(islice(nexts, pending))
delimiter
print(item)
delimiter
bar()
delimiter
textarea.replaceWith(contents)
delimiter
print(repr(encoded))
delimiter
doc4.txt, PROBABLY
delimiter
a = np.exp(a) / np.sum(np.exp(a))
delimiter
beam.io.fileio.TextFileReader.__iter__ = _TextFileReader__iter
delimiter
sys.excepthook = custom_excepthook
delimiter
self._handle = hwnd
delimiter
killasgroup = true
delimiter
full_arr.nbytes = 20854577808
delimiter
axmatrix.set_xticks([])
delimiter
cython >= 0.2
delimiter
print(t2.extractfile(name).read())
delimiter
print(link)
delimiter
print(dt)
delimiter
count
delimiter
list(uniq.keys())
delimiter
print(serial_out)
delimiter
pyplot.ion()
delimiter
img = np.frompyfunc(calc_pixel, 2, 1).outer(np.arange(100), np.arange(100))
delimiter
print(n)
delimiter
ym_end = 12 * end_year + end_month - 1
delimiter
b.pack()
delimiter
df2
delimiter
a[-2] = 5
delimiter
obj = MyIter()
delimiter
a + 1
delimiter
print(r)
delimiter
widget = QWidget()
delimiter
print(np.column_stack((roots, p1(roots), p2(roots))))
delimiter
print(concatd(a, b))
delimiter
dt = dt.date()
delimiter
model.add(Dense(output_dim=10))
delimiter
vectorizer = DictVectorizer()
delimiter
numline = len(file.readlines())
delimiter
os.symlink(src, dst)
delimiter
txt = [getPageText(url) for url in urls]
delimiter
high = max(freq_count.values())
delimiter
model = Sequential()
delimiter
head, tail = os.path.split(p)
delimiter
file.close()
delimiter
df
delimiter
b = Field()
delimiter
x = 1, 2
delimiter
result = a * b
delimiter
array1 = np.array([10, 65, 200])
delimiter
d = {}
delimiter
spam = with_connection(spam)
delimiter
next(incsv)
delimiter
ips = [each[0] for each in re.findall(pattern, fileContent)]
delimiter
intervaly = ysize / ysegment
delimiter
print(repr(time_tuple))
delimiter
ntype = type(n)
delimiter
average[i, j] = 1.0 / 9 * matriz[i:i + X, j:j + Y].sum()
delimiter
i += 1
delimiter
print(lu_obj.solve(b))
delimiter
remaining_items.append((item, dependencies))
delimiter
args.func(args)
delimiter
JM2[i, j, k] = jmat[k, i] - jmat[k, j]
delimiter
print(c)
delimiter
self.args = args
delimiter
self.parent().unsetCursor()
delimiter
q = nfqueue.queue()
delimiter
i = 0
delimiter
net.addLink(s1, s2)
delimiter
_, exception, tb = sys.exc_info()
delimiter
1
delimiter
app = Flask(__name__)
delimiter
a.as_integer_ratio()
delimiter
id_arr[idx[:-1]] = -a[:-1] + 1
delimiter
colors = matplotlib.cm.rainbow(np.linspace(0, 1, len(Ys)))
delimiter
hp -= punch
delimiter
saver.restore(sess, ckpt.model_checkpoint_path)
delimiter
cur = db.query(sql)
delimiter
np.cumsum(rng, out=rng)
delimiter
x, y = randint(m, n), randint(m, n)
delimiter
temp = np.arange(10)
delimiter
fg.clf()
delimiter
trp([], 4)
delimiter
[e for sub in tgt if sub for e in sub][-5:]
delimiter
edge_tuple1[0] == edge_tuple2[1][0] and edge_tuple2[0] == edge_t
delimiter
matrix = np.array([[0, 0, 1], [1, 0, 1], [0, 1, 1]], dtype=bool)
delimiter
basemetaclasses = []
delimiter
print(hash)
delimiter
count[0] = not count[0]
delimiter
zi = griddata(x, y, z, xi, yi)
delimiter
x = list(filter(n, x))
delimiter
JM1[i, j, k] = jmat[k, i] + jmat[k, j]
delimiter
counts = numpy.logical_not(a.mask).sum(axis=axis)
delimiter
lst += [4, 5]
delimiter
print(df)
delimiter
m[x + int(y - 1) * N] = 1
delimiter
cursor = db.cursor()
delimiter
pyop_frame = frame.get_pyop()
delimiter
print([x for x in funs()])
delimiter
values = np.random.uniform(low=0, high=1, size=ages.shape)
delimiter
sess.run(eval_op, feed_dict={data: some_testing})
delimiter
JSONEncoder.default(self, obj)
delimiter
maxscr = max(scores.values())
delimiter
X = numpy.random.rand(9, 4)
delimiter
os.path.normpath(string)
delimiter
pendown()
delimiter
N = 100
delimiter
b = word in words
delimiter
NEWLIST = []
delimiter
value = parser.get(section, option)
delimiter
data
delimiter
print(crossover(f1, f2))
delimiter
soup = BeautifulSoup(response.get_data())
delimiter
p2x = tx2 * cosang + ty2 * sinang + cx
delimiter
posts = session.query(visible_blog_posts).all()
delimiter
p = pd.MultiIndex.from_product(df1.index.levels, names=df1.index.names)
delimiter
abc = staticmethod(abc)
delimiter
test_equivalence_partition()
delimiter
f = d(f)
delimiter
count += 1
delimiter
rgb = scipy.misc.toimage(cube)
delimiter
atan_in_degress(1)
delimiter
files = parser.parse_args().file
delimiter
plt.semilogx(w, mag)
delimiter
title = db.Column(db.String(80))
delimiter
y = np.linalg.det([[a[0], 1, a[2]], [b[0], 1, b[2]], [c[0], 1, c[2]]])
delimiter
endfun
delimiter
result = result[1:] + (elem,)
delimiter
centerLat = sum(x[0] for x in self._points) / len(self._points)
delimiter
yertle.penup()
delimiter
obj = A(data)
delimiter
A = np.random.rand(rows, latent_features)
delimiter
self.max_val = 50000
delimiter
kthsmallest(A[i:], B[:j], k - i)
delimiter
rest = np.mean(arr[toslice:])
delimiter
NULL
delimiter
print(repr(y))
delimiter
new_list = []
delimiter
mplfig_to_npimage(fig)
delimiter
dataDict = dataDict[k]
delimiter
i = ord(x)
delimiter
api.update_with_media(filename, status=message)
delimiter
PyString_FromString(buf)
delimiter
ascends[-1][0] = i + 1
delimiter
arr
delimiter
partition = []
delimiter
app.url_rule_class = TranslateCorrelationRule
delimiter
start <= x or x <= end
delimiter
colors = np.empty(X.shape, dtype=str)
delimiter
result
delimiter
l = df.values.tolist()
delimiter
hog = cv2.HOGDescriptor()
delimiter
thread.start_new_thread(runserver, ())
delimiter
root = Tkinter.Tk()
delimiter
x2_Kcids_1[0, 0]
delimiter
c = Counter(text)
delimiter
sf.where(q1).show()
delimiter
writer.write(x)
delimiter
ofiles[fn].write(l)
delimiter
cursor = conn.cursor()
delimiter
[]
delimiter
ET.tostring(y)
delimiter
ax = fig.add_subplot(111)
delimiter
deletea[:]
delimiter
new_size = sys.getsizeof(d)
delimiter
otherFunc()
delimiter
print((graph, current_vertex))
delimiter
2 + 2 == 5
delimiter
rt.stop()
delimiter
result = []
delimiter
[g(x, fx) for x, fx in ((x, f(x)) for x in l) if fx]
delimiter
can.save()
delimiter
pl.plot(F_values_2, S_values_2 - width_S)
delimiter
r = np.ones(shape=(rows, rows))
delimiter
df
delimiter
p = psutil.Process(os.getpid())
delimiter
z.extend(y)
delimiter
v = np.concatenate((v, v2))
delimiter
resp = requests.get(baseUrl)
delimiter
signals.request_started.connect(close_connection)
delimiter
print(list(running_avg(nums)))
delimiter
CrawlSpider.__init__(self, **kwargs)
delimiter
False
delimiter
list.__setitem__(self, index % len(self), value)
delimiter
tmp = tmp.__next__
delimiter
my_table = tables[0]
delimiter
elem[i] += 1
delimiter
a = bn.partsort(a, i)
delimiter
thelen = len(trailing)
delimiter
lr1 = LogisticRegression()
delimiter
module = __import__(importModule)
delimiter
out.append([typ(val) for typ, val in zip(castings, line)])
delimiter
x = np.random.rand(1, ROW_SIZE)
delimiter
gauss(x, amp, cen, sig)
delimiter
inner = c[n, m] * math.cos(m * lam) + s[n, m] * math.sin(m * lam)
delimiter
z1.writestr(n, zf.open(n).read())
delimiter
factorial(n) / factorial(k) / factorial(n - k)
delimiter
(d * w).sum() / w.sum()
delimiter
self.y = y
delimiter
std = np.std(stats)
delimiter
[]
delimiter
loop = asyncio.get_event_loop()
delimiter
c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
delimiter
y = foobar(x)
delimiter
foo(22, 42)
delimiter
window = s.root.create_window(0, 0, 1, 1, 1, s.root_depth)
delimiter
a, _, b = myTuple
delimiter
result2 = np.reshape(result, result.shape[0] * result.shape[1])
delimiter
self.title
delimiter
model = Word2Vec(sentences, size=100, window=5, min_count=5, workers=4)
delimiter
b_test.method_three()
delimiter
im = cvLoadImage(filename, CV_LOAD_IMAGE_GRAYSCALE)
delimiter
bundle.obj.save(update_fields=field_to_update)
delimiter
print(l)
delimiter
uncorrelated = np.random.standard_normal((2, N))
delimiter
[w for t in taglist for w in words if w.startswith(t)]
delimiter
modelinstance.picture.save(filename, file_contents, True)
delimiter
keyRegex = re.compile(key, re.IGNORECASE)
delimiter
vdata = ctypes.c_void_p()
delimiter
f2 = plt.figure()
delimiter
self.im.putpalette(*self.palette.getdata())
delimiter
c.release()
delimiter
username = self.SessionObj.settings.key().name()
delimiter
arr1d = np.array(some_sequence)
delimiter
self.list = lst
delimiter
first_name = models.CharField(max_length=40, blank=False, null=False)
delimiter
MOUSE_LEFTUP = 4
delimiter
new = orig + datetime.timedelta(days=90)
delimiter
_fork()
delimiter
sys.stdout = MyStream(sys.stdout)
delimiter
url
delimiter
print(result)
delimiter
ew.save()
delimiter
print(result)
delimiter
ax1.imshow(color_mask)
delimiter
data = txtcurl.getvalue()
delimiter
df_a = pd.DataFrame(a)
delimiter
random_sample_input = random.sample(words, 100)
delimiter
y = np.asarray(x.getdata(), dtype=np.float64).reshape((x.size[1], x.size[0]))
delimiter
np.ndarray.__array_prepare__(self, output, context)
delimiter
new_data.append(row)
delimiter
a.join()
delimiter
a_line, = ax.plot(*zip(*points))
delimiter
D = euclidean_distances(X_cluster_0.getrow(0), km.cluster_centers_[0])
delimiter
t = now.time()
delimiter
print(df)
delimiter
fmt_values = [formatter(x) for x in self.values]
delimiter
pValue = PyObject_CallObject(pFunc, NULL)
delimiter
np.diag(s)
delimiter
df2 = pd.DataFrame(-np.ones(df.shape))
delimiter
rdd = rdd.map(list_to_csv_str)
delimiter
b = B()
delimiter
translation.activate(request.LANG)
delimiter
x, y = np.meshgrid(lin, lin)
delimiter
order.append(item)
delimiter
cor = df.corr()
delimiter
results = [pool.apply(cube, args=(x,)) for x in range(1, 7)]
delimiter
memmove(s.getData(), data)
delimiter
print(make_hash([func.__code__, func.__dict__]))
delimiter
_MyClass.instance = _MyClass()
delimiter
x = next(it)
delimiter
data = [container[key] for key in container]
delimiter
pdffilename = sys.argv[1]
delimiter
X, Y = meshgrid(xi, yi)
delimiter
n = 0
delimiter
evaluate(tagger, sentences)
delimiter
print(gram)
delimiter
self.server.stop()
delimiter
f = tempfile.NamedTemporaryFile(delete=False)
delimiter
block_number -= 1
delimiter
p.ParseFile(f)
delimiter
rtn
delimiter
print(s.shape)
delimiter
scipy.stats.stats
delimiter
p = re.compile(pLu)
delimiter
mydata = json.loads(output)
delimiter
b(1, 6)(1, 2)
delimiter
{{blog_form.as_p}}
delimiter
alotoffunc.klm(self, x, y)
delimiter
t_end = time.time() + 60 * 15
delimiter
classifier = NaiveBayesClassifier(train, feature_extractor=my_extractor_func)
delimiter
eval(equation)
delimiter
pygui(true)
delimiter
print(something.bar(12, 14))
delimiter
sidx = lid.argsort()
delimiter
args.output.write(text)
delimiter
x = np.linspace(0, 10)
delimiter
self.should_run = threading.Event()
delimiter
u = pickle._Unpickler(f)
delimiter
position = models.CharField(max_length=120, choices=POSITION_DESCRIPTORS)
delimiter
d.pop()
delimiter
readline.set_completion_display_matches_hook(print_suggestions)
delimiter
c1 - c2
delimiter
method_decorator.__init__
delimiter
json.dumps(list(somecollection.find(expr)), default=newEncoder)
delimiter
newlstTwo.append(lstTwo[i])
delimiter
update = csr_matrix((N, m_ind, [0, len(N)])).toarray()
delimiter
numpy_array == 0
delimiter
p = ctypes.cast(names, ctypes.POINTER(ctypes.c_size_t))
delimiter
df2
delimiter
print(a.get_value() == b.get_value())
delimiter
tuple(mydata)
delimiter
spyder - -new - instance
delimiter
threading.Thread.__init__(self)
delimiter
round(2.5)
delimiter
data_matrix
delimiter
Mn
delimiter
X, Y = map(list, zip(*R))
delimiter
next(songiter)
delimiter
raise ValueError
delimiter
__call__ = lambda x: x
delimiter
[dna_seq for dna_seq in DNA_list if len(dna_seq) > threshold]
delimiter
print(jsonstring)
delimiter
f.write(datatowrite)
delimiter
handle = ExPASy.get_sprot_raw(accession)
delimiter
date1 = datetime.date(year=2012, day=2, month=2)
delimiter
MyFunc()
delimiter
now = time.mktime(time.localtime())
delimiter
self.items = []
delimiter
m = np.dot(m, uad)
delimiter
x = linspace(-10, 10, n)
delimiter
outbuf = ByteTriplet()
delimiter
app(environ, start_response)
delimiter
lst[i] = e
delimiter
d.update(frame.f_locals)
delimiter
cursor = query.cursor()
delimiter
list1
delimiter
update_model(model, item_model)
delimiter
mu = data.mean(axis=0)
delimiter
self.root = tk.Tk()
delimiter
print(Nickname)
delimiter
m_to_M[1:, (0)] = -np.arange(1, n - 1)
delimiter
lenc = a.shape[1] / c
delimiter
int_div = a // b
delimiter
v = c_uint16()
delimiter
boxes.append(x)
delimiter
ret[prevline.strip()] = {}
delimiter
target.write(line)
delimiter
a = 0
delimiter
optimizer = tf.train.GradientDescentOptimizer(learning_rate)
delimiter
server_url = models.TextField(max_length=2047)
delimiter
five_lines = list(itertools.islice(sys.stdin, 5))
delimiter
a = set(a)
delimiter
y_int = np.polyval(poly, x_val)
delimiter
otherStuff()
delimiter
estimate = arima(data, order=c(p, d, q))
delimiter
paks = rdpcap(INFILE)
delimiter
text = wx.StaticText(self, -1, caption)
delimiter
cell.font = cell.font.copy(bold=True, italic=True)
delimiter
soup = BeautifulSoup(html)
delimiter
t = numpy.array([0.22])
delimiter
dstBB = ax2.get_position()
delimiter
sigma = 100 * np.random.random(numcurves) + 0.1
delimiter
[u.path() for u in urls]
delimiter
g.series((x, 0), (y, 0))
delimiter
False
delimiter
x = x + 1
delimiter
print(result)
delimiter
mapper = class_mapper(obj.__class__)
delimiter
size = sum(1 for _ in f)
delimiter
a.append([])
delimiter
work_list.append(new_item)
delimiter
row = cur.fetchone()
delimiter
b[0] - a[1]
delimiter
ax.patches.remove(patch)
delimiter
m.method()
delimiter
radii = max_height * np.random.rand(N)
delimiter
mask0 = numpy.sign(F_mid) == numpy.sign(F0)
delimiter
key = lambda i: i % 2 == 0
delimiter
hackedsyntax() - uglybuiltinsyntax()
delimiter
hcumsum = np.sumsum(hravel)
delimiter
result_list = []
delimiter
pidfile.acquire()
delimiter
globals()[someclass.__name__] = someclass
delimiter
Ml[:, (i)] = sparse.coo_matrix(Ml[:, (i)].A + v)
delimiter
m = multiprocessing.Manager()
delimiter
aDict[name] = [(startTime, endTime)]
delimiter
foo = forms.ChoiceField(widget=forms.Select, initial=self.foo_queryset)
delimiter
train_op = optimizer.minimize(loss, colocate_gradients_with_ops=True)
delimiter
self.draw_page_number(num_pages)
delimiter
sys.stdin.read(1)
delimiter
c.method_b()
delimiter
executor = ThreadPoolExecutor(max_workers=2)
delimiter
tmp = mydict[mykey] = myfunc()
delimiter
force_proxy = connection.cursor()
delimiter
names.append(field.name)
delimiter
opener = urllib.request.URLopener()
delimiter
b = [x for x in a]
delimiter
struct = time.struct_time((2015, 6, 18))
delimiter
self._secret_file
delimiter
ax = plt.gca()
delimiter
H, theta_edges, r_edges = np.histogram2d(theta2, r2)
delimiter
print((row.id, row.val))
delimiter
newstr
delimiter
minT, maxT = theoryX.min(), theoryX.max()
delimiter
A = [1, 1, 1, 1, 1]
delimiter
app = wx.PySimpleApp()
delimiter
p = pd.Series(np.random.randn(200) / 100 + 0.001)
delimiter
df
delimiter
list(filter(letter_set.__contains__, s)).lower()
delimiter
finalResult = rdd1.mapValues(lambda v: v[0] / v[1]).collect()
delimiter
response.status
delimiter
list(d.items())
delimiter
main()
delimiter
a = some_string
delimiter
primes = list(range(2, 20))
delimiter
fcs.cchIconFile = 0
delimiter
f(self, key, *args, **kwargs)
delimiter
output.close()
delimiter
pdb.runcall(foo.bar, x)
delimiter
result.append(left[i])
delimiter
i = 0
delimiter
plt.ylim(0, 1.4)
delimiter
lst[:position]
delimiter
but.destroy()
delimiter
equiv2 = dict((k.lower(), v) for k, v in list(equiv.items()))
delimiter
cdll.msvcrt.memcpy(byref(v), byref(mystruct), sizeof(v))
delimiter
show(layout)
delimiter
exp_diag = np.exp(scale * diag_T)
delimiter
1 + (max(map(depth, list(d.values()))) if d else 0)
delimiter
bytes += len(line)
delimiter
l.append(A())
delimiter
comb = list(product(df.X.unique(), df.Y.unique()))
delimiter
total += 1
delimiter
Total = Total + int(Numbers)
delimiter
print(page)
delimiter
cofactors = transposeMatrix(cofactors)
delimiter
intersections = []
delimiter
new_array = new_array.T
delimiter
quarter = pd.Timestamp(dt.date(2016, 2, 29)).quarter
delimiter
result.reshape(nx, ny)
delimiter
print(df)
delimiter
c = numpy.diag(b)
delimiter
df
delimiter
os.mkdir(destination[0:len(destination) - 1] + path)
delimiter
sorted(l)[-k:]
delimiter
__add__ = check_shape(np.ndarray.__add__)
delimiter
server.user(user)
delimiter
x[0] = fractions.Fraction(1, 1)
delimiter
names.append(data.read(len_name))
delimiter
im = np.column_stack((im[:, 1:], im[:, (0)]))
delimiter
pandas.core.series.Series
delimiter
plt.xlim(vor.min_bound[0] - 0.1, vor.max_bound[0] + 0.1)
delimiter
file.open(QIODevice.ReadOnly)
delimiter
sample_dictionary[words].add(word)
delimiter
print(time_between_two_dates_except_weekends(start_date, end_date))
delimiter
db = CustomAlchemy()
delimiter
document = Document()
delimiter
reader = csv.reader(infile)
delimiter
y_norm = y - y_mean
delimiter
proposal
delimiter
arr_win[:, 1:] = arr_cum[:, n:] - arr_cum[:, :-n]
delimiter
self.c = c
delimiter
print(myString, myList1, myList2)
delimiter
print(x)
delimiter
book.authors.add(george)
delimiter
my_list = []
delimiter
print(now, add_month(now))
delimiter
p = Process(target=run_simulation, args=(simulations_to_run, results))
delimiter
f10(5)
delimiter
print(html2text.html2text(h2))
delimiter
print(strc)
delimiter
newdate = date.replace(hour=11, minute=59)
delimiter
tmp.write(line)
delimiter
new_instance
delimiter
datetime(2009, 10, 1, 7, 0), datetime(2009, 10, 1, 7, 0)
delimiter
echo(foo=foo)
delimiter
data = numpy.concatenate((data, data_tmp))
delimiter
self.setContextMenu(menu)
delimiter
y = random.random()
delimiter
f.close()
delimiter
psycopg2.extensions.register_type(psycopg2.extensions.UNICODE)
delimiter
b = g
delimiter
g = [x[1] for x in g]
delimiter
[f.name for f in matplotlib.font_manager.fontManager.ttflist]
delimiter
fig = plt.figure()
delimiter
q = queue.Queue()
delimiter
list_result = [entry for entry in result]
delimiter
args, unk = parser.parse_known_args()
delimiter
r = np.random.rand(2)
delimiter
data = np.random.normal(-200, 15, size=1000)
delimiter
idces = df.index.intersection(df.columns)
delimiter
max_x, max_y = numpy.max(iterable[0], axis=0)
delimiter
e2 = str(e)
delimiter
stack.pop()
delimiter
x = 0
delimiter
CO = np.cov(X_.T)
delimiter
velcro.penup()
delimiter
out.append(float(value))
delimiter
zi = np.zeros((len(tim), len(jj)))
delimiter
w, v = q[0], q[1:]
delimiter
k = line.split()[0]
delimiter
d.feeds[100].tags
delimiter
x = list[indexInlist]
delimiter
_format(format_string, args, ChainMap(kwargs, caller_locals))
delimiter
logger = logging.getLogger(__name__)
delimiter
self.parent = parent
delimiter
a = arange(1, 20)
delimiter
hours, minutes = divmod(minutes, 60)
delimiter
last_key = query.fetch(1, 999)[0].key()
delimiter
rtn += message.get_payload()
delimiter
w.set_visible(False)
delimiter
sys.stdout = old_stdout
delimiter
sort_slice = np.lexsort([dates.values, dates.notnull().values])
delimiter
turtle.left(90)
delimiter
source = ColumnDataSource(data=dict(x=x, y=y))
delimiter
ax1.bar(dates, col1)
delimiter
date = datetime.datetime.fromtimestamp(email.utils.mktime_tz(date_tuple))
delimiter
elements = heapq.nsmallest(4, my_list, key=f)
delimiter
l[0]
delimiter
next(reader)
delimiter
print(val)
delimiter
self.timer.start()
delimiter
BadSubClass.convert(anotherbase, 2)
delimiter
self.vtkCells.InsertNextCell(1)
delimiter
exit()
delimiter
final_list = []
delimiter
manager = urllib.request.HTTPPasswordMgrWithDefaultRealm()
delimiter
[SomeDB]
delimiter
self.clip = gtk.clipboard_get(gtk.gdk.SELECTION_CLIPBOARD)
delimiter
v = list(range(n))
delimiter
func(*(literalargs + arglist))
delimiter
fig = plt.figure(1)
delimiter
my_task.delay(target.value)
delimiter
fig.scatter(df.index, df.icol(0))
delimiter
i = np.argsort(a.flat)
delimiter
path.insert(0, c)
delimiter
P = np.zeros((n, n))
delimiter
df
delimiter
appstats_MAX_LOCALS = 10
delimiter
err.printDetailedTraceback()
delimiter
p = multiprocessing.Process(target=processWorker, args=(input, result))
delimiter
print(x)
delimiter
func = CALLBACK(wrapper)
delimiter
self.kwargs = kwargs
delimiter
file_str = f.read()
delimiter
number += 1
delimiter
print(row_format.format(name, *row))
delimiter
model = MCMC(timesteps)
delimiter
my_bytes.append(125)
delimiter
args = argparser.parse_args(argv)
delimiter
flows[maks], maks
delimiter
foo()
delimiter
most_popular({el: (0) for el in list(range(1000000))})
delimiter
data = f.readlines()
delimiter
res = AsyncResult(id)
delimiter
code.py
delimiter
m_to_N = lil_matrix((n - 1, n - 1))
delimiter
label.pack()
delimiter
pprint(Integral(x ** 2, x))
delimiter
x + kth_comb(remove(x, elems), m - 1, k)
delimiter
Base * get_base()
delimiter
importModule = os.path.basename(path)
delimiter
do_long_code()
delimiter
output_lines = diskpart_output.decode().split(os.linesep)
delimiter
print(cookie)
delimiter
plot_clipped(data, center_x, center_y, radius)
delimiter
print(self.crawled_urls)
delimiter
x = np.empty((p.size, nIterates))
delimiter
result.append(current)
delimiter
GL.glMatrixMode(GL.GL_PROJECTION)
delimiter
deserialized_user = User.load(serialized_user)
delimiter
tf.reciprocal(y) * grad, -tf.div(tf.div(x, y), y) * grad
delimiter
c.start(container, publish_all_ports=True)
delimiter
array = df.values
delimiter
print(dict_reborn[1])
delimiter
source_image = pyexiv2.Image(source_path)
delimiter
fp.seek(0, os.SEEK_END)
delimiter
key = uuid.uuid4().hex
delimiter
signal.alarm(2)
delimiter
p = argparse.ArgumentParser()
delimiter
df
delimiter
Case(When(created__month=10, then=1), output_field=IntegerField())
delimiter
frequencies[i] = frequencies.get(i, 0) + 1
delimiter
print(tb1.head())
delimiter
self.x ** 2 + self.y ** 2
delimiter
a, b = json.dumps(a, sort_keys=True), json.dumps(b, sort_keys=True)
delimiter
self._key_to_index[key] = len(self._values) - 1
delimiter
self.finished.wait(self.interval)
delimiter
max_len = max([len(col) for col in section])
delimiter
int((x * 100).quantize(1, rounding=ROUND_HALF_EVEN))
delimiter
ax = fig.add_subplot(111)
delimiter
self._timeout = timeout
delimiter
z[np.arange(5), np.arange(5)] = 1
delimiter
cub_left, cub_right
delimiter
_data = {}
delimiter
result = cmp(fn(left), fn(right))
delimiter
word_counts = Counter(cap_words)
delimiter
np.log(scale), shape
delimiter
url = self.queue.dequeue()
delimiter
thetas += 2 * pi * np.random.random(thetas.shape)
delimiter
print(sf.text)
delimiter
starring = [name for name in starring if name.strip()]
delimiter
cnt[word] += 1
delimiter
self._read(fp, filename)
delimiter
cur = dbconn.cursor()
delimiter
print(r)
delimiter
i = 0
delimiter
list(_f(seq, idfun))
delimiter
word = word[-1]
delimiter
print(best_f, best_state, map(sum, a))
delimiter
nodes[-1].notes.append(body)
delimiter
arr = np.zeros(shape=(M, N), dtype=int)
delimiter
schedule.every().hour.do(job)
delimiter
df2.loc[-2] = [14, 15, 16, 17]
delimiter
result = pool.apply_async(fill_array, [val])
delimiter
ip = IPDB()
delimiter
ret
delimiter
x = np.random.rand(n, 10)
delimiter
next(gen)
delimiter
k2 = a.__class__
delimiter
arg = np.argmin(a[mask][:, (0)])
delimiter
filters.append(Q(mailbagstats__num_letters2__gt=int(cut)))
delimiter
freakExtractor = cv2.xfeatures2d.FREAK_create()
delimiter
+c * sin(u)
delimiter
b = arr.reshape((n, m))
delimiter
list_index += 1
delimiter
use_production = True
delimiter
rows = mask.all(axis=1)
delimiter
pipe(list(range(4)), mapcat(lambda i: repeat(i, i + 1)), list)
delimiter
plt.fill(thetabox, rbox, facecolor=my_cmap(colorv))
delimiter
d.update(100)
delimiter
df.plot(subplots=True, layout=(2, 2), **opt)
delimiter
d_sum[topkey][key] = new_val
delimiter
run(host=socket.gethostname(), port=8000)
delimiter
something
delimiter
foo(1)
delimiter
RSI1.plot()
delimiter
req.setRawHeader(headerKey, headerValue)
delimiter
print(domain)
delimiter
self.output_file = new_output_file
delimiter
c = db.cursor()
delimiter
args.insert(0, name)
delimiter
mask = np.isnan(df.values)
delimiter
a[10:18]
delimiter
x.translate(xtd)
delimiter
f = random.choice(files)
delimiter
self.belltimer = wx.Timer(self)
delimiter
__init__.py
delimiter
rest, tail = os.path.split(s)
delimiter
chart.Activate()
delimiter
cosetCoding.cosetCoding(10, 11, 8, arr, 0)
delimiter
number, rep = (input().split() + [1])[:2]
delimiter
self.send_error(400)
delimiter
arr_cum = np.cumsum(arr == search, axis=1)
delimiter
w = wcs.WCS(f[0].header)
delimiter
digits.append(n % 10)
delimiter
self.p.terminate()
delimiter
df
delimiter
self.is_expired = True
delimiter
[(int(g) if g.isdigit() else g) for g in re.split(pattern, x)]
delimiter
out = np.zeros((nr - 1 + nrows, nr))
delimiter
client.close()
delimiter
formatter = self.formatter
delimiter
is_valid = True
delimiter
a = df.values[:, (b_c_idx_locs)]
delimiter
idel = len(L)
delimiter
n = len(l)
delimiter
sct.norm.sf(x=50, loc=60, scale=40)
delimiter
pais, lats, lons = [], [], []
delimiter
count = np.zeros(data.shape + (N,), dtype=int)
delimiter
_shortcircuitmiddleware
delimiter
print(s)
delimiter
y = eval(input(x))
delimiter
y = y[0].rstrip()
delimiter
actions = ActionChains(driver)
delimiter
self._data.pop(index)
delimiter
lines = chunk.splitlines()
delimiter
thebytes = pickle.dumps(myObj)
delimiter
data = []
delimiter
vid = Column(Integer)
delimiter
b()
delimiter
pdf = stats.beta.pdf(x, *params)
delimiter
count += 1
delimiter
parser.write(configfile)
delimiter
l2 = [([x] if isinstance(x, str) else x) for x in l]
delimiter
out = abs(m - n)
delimiter
n, bins, patches = ax1.hist(y, bins=50)
delimiter
seen = set()
delimiter
smoke_test()
delimiter
data = scipy.misc.imread(fname)
delimiter
keep = ~numpy.isnan(w)
delimiter
k_map = Korean()
delimiter
ax.add_patch(patch)
delimiter
df
delimiter
trends1 = api.trends_place(1)
delimiter
print(args)
delimiter
{}
delimiter
self.errors = errors
delimiter
self.bark = bark
delimiter
l = list(range(1, 100))
delimiter
muproc.current_process()._identity[0]
delimiter
zipfile = ZipFile(StringIO(zipdata))
delimiter
arr[i]
delimiter
points = []
delimiter
is_new_style_class(1)
delimiter
True
delimiter
d = Path(__file__).resolve().parents[1]
delimiter
msg = ctypes.wintypes.MSG()
delimiter
new_list.append(list2[0])
delimiter
response_value = response_buffer.getvalue()
delimiter
type(D)
delimiter
a[0] = X()
delimiter
condition = [True, True, True, False, False, True, True, False, True]
delimiter
theta = np.random.uniform(low=0, high=2 * np.pi, size=n)
delimiter
xs = np.arange(X)
delimiter
root.right = self.insert_node(root.right, element)
delimiter
Z = np.exp(-((X - 1) ** 2 + Y ** 2))
delimiter
matrices[:, (2), (1)] = s
delimiter
print(line)
delimiter
xf = np.linspace(0.0, 1.0 / (2.0 * T), N / 2)
delimiter
user = User.query.get(id)
delimiter
np.exp(x)
delimiter
match = re_hostinfo.search(host)
delimiter
d.columns = list(range(d.shape[1]))
delimiter
bob.hideturtle()
delimiter
acls
delimiter
X = np.zeros((len(x), c))
delimiter
soup = BeautifulSoup(htmlstr)
delimiter
len(vow_found), c.most_common()
delimiter
plotted = ax.imshow(rand(250, 250))
delimiter
48.6057858287
delimiter
result[i][j] = col_data
delimiter
df[new_col] = [int(a != 0) for a in df[col]]
delimiter
opendir.restype = c_dir_p
delimiter
a = A()
delimiter
t = list(t)
delimiter
self.update(active=False)
delimiter
data = s.recv(4096)
delimiter
result.tolist()
delimiter
print(line_text, file=sys.stderr)
delimiter
print(item)
delimiter
accounts = defaultdict(attributes.copy)
delimiter
method2(method1)
delimiter
running = False
delimiter
2
delimiter
x = np.linspace(0, 2 * np.pi)
delimiter
a = A()
delimiter
atexit.register(shutdown_logger)
delimiter
self._paths = [x.filename for x in self.zfile.filelist]
delimiter
False
delimiter
processed_data = target.throw(FINISH_PROCESSING_SIGNAL)
delimiter
cur = conn.cursor()
delimiter
parser.print_help()
delimiter
d[id(a)] = a
delimiter
ascii_num += chr(integer % 1000)
delimiter
d = PyModule_GetDict(m)
delimiter
deck.append(item)
delimiter
print(string[0:5] is string[-10:-5])
delimiter
arr[1] = b
delimiter
pir1(x, d)
delimiter
spl = inputText.split()
delimiter
not bool(self._errors)
delimiter
store.add_cert(x509)
delimiter
dict(mydict=code_to_generate_dict())
delimiter
line1, = ax.plot(x1, np.sin(x1))
delimiter
print(res)
delimiter
ExitAndDestroy(sys.argv[0])
delimiter
assert text.find(field_key) == field_value
delimiter
self.graph.update_from(new_hexbin)
delimiter
handlers.append((re.compile(regexp), f))
delimiter
list_words
delimiter
db.put(entities)
delimiter
5.25
delimiter
9.75
delimiter
9.7
delimiter
9.8
delimiter
print(p.dfsh(2))
delimiter
print(identified_range[0].start, identified_range[0].stop)
delimiter
Z = np.array([1.0, 1.0, 1.0, 1.0])
delimiter
args[0].__round__(*args[1:])
delimiter
recur(n - 1)
delimiter
text = nltk.Text(nltk.tokenize.word_tokenize(input_text))
delimiter
ncol, nrow = len(df.columns), len(df)
delimiter
propagate = 0
delimiter
list1 = list(range(x1, x2 + 1))
delimiter
y = math.radians(i) * math.sin(math.radians(i))
delimiter
dyn = gcs_data.Dynamics(id=file_name, filename=file_name)
delimiter
k = list(self.keys())[-1]
delimiter
printinstance(dict)
delimiter
hxs = HtmlXPathSelector(response)
delimiter
lst[0][0] = 5
delimiter
gdb.stop_event_loop
delimiter
df = pd.concat([df_current, future])
delimiter
s.sendall(sys.argv[1])
delimiter
REVERSE_MAPPING[val] = key
delimiter
logdata = np.log10(data)
delimiter
print(stdout)
delimiter
p = subprocess.Popen(cmdstring, stdin=subprocess.PIPE)
delimiter
tvalues.sort()
delimiter
result = schema.dump(obj)
delimiter
item in self._inner
delimiter
lcms = ctypes.windll.lcms2
delimiter
new_data = data[mask]
delimiter
root = Tk()
delimiter
f = os.path.splitext(f)[0]
delimiter
multiprocessing.freeze_support()
delimiter
()
delimiter
0 in a
delimiter
grid.append([])
delimiter
binds.update(dict.fromkeys(staff_metadata.sorted_tables, staff_engine))
delimiter
conn = TimeoutHTTP(host)
delimiter
997
delimiter
lookup_mapping[k[:2].lower().lstrip()].append(k)
delimiter
mydata = urllib.parse.urlencode(mydata)
delimiter
p.haslayer(UDP)
delimiter
max_val = seq[0]
delimiter
things = [list(s) for s in raw]
delimiter
False
delimiter
sum_by_key[sum_key] = value
delimiter
print(list(split_text(b)))
delimiter
on_exception()
delimiter
subform.initial = data
delimiter
helper(old_stack, new_stack)
delimiter
(0.1).hex()
delimiter
g = sns.JointGrid(x, y, ratio=100)
delimiter
df
delimiter
make_adder.__code__.co_consts
delimiter
slast = slast.split()
delimiter
mutable[0] = int(mutable[0])
delimiter
PLT.subplot(111)
delimiter
myclass = MyClass()
delimiter
labels = [str(x) for x in values]
delimiter
display.start()
delimiter
user.save(using=self._db)
delimiter
bitbuf = bitdata.bytes()
delimiter
recall
delimiter
__all__.append(obj.__name__)
delimiter
rows = data[0]
delimiter
BrotliCompression.Compress(input, output)
delimiter
tdo = pickle.loads(tdi)
delimiter
System.err.println(i.tmp())
delimiter
input.append(client)
delimiter
data[:, 1:-1] = 0
delimiter
self.value
delimiter
val = int(foo)
delimiter
wordbank[word] = 1
delimiter
my_code = eval(code)
delimiter
self.vtkPolyData.SetVerts(self.vtkCells)
delimiter
self._test
delimiter
bar.txt
delimiter
yticks[::int(len(yticks) / 10)] = keptticks
delimiter
{0, 0, 0, 0} // sentinel
delimiter
lock = threading.Lock()
delimiter
y = np.random.uniform(0.0, 10.0, 15)
delimiter
indptr = np.append(indptr, nnz)
delimiter
k.__name__
delimiter
ax = fig.add_subplot(1, 1, 1)
delimiter
False
delimiter
print(modname)
delimiter
R = 1.5 + (0.1 * np.random.random(15) - 0.05)
delimiter
print(ans)
delimiter
i = input()
delimiter
leng(isChar(s), 0)
delimiter
paths.extend(find_all_paths_aux(adjlist, node, end, path))
delimiter
config, ind, bsi = load_yaml_guess_indent(open(file_name))
delimiter
unique_idx[mov_avg > 0.5]
delimiter
print(sys.path)
delimiter
movie_dict[actor].append(movie_name)
delimiter
data = [int(x) for row in sys.stdin for x in row.split()]
delimiter
fflush(stdout)
delimiter
response
delimiter
list(long_dna)
delimiter
df
delimiter
rtn
delimiter
seen = set()
delimiter
this_module = sys.modules[__name__]
delimiter
students = list(map(Student, reader))
delimiter
api = tweepy.API(auth)
delimiter
user = models.OneToOneField(User)
delimiter
parser = etree.XMLParser(remove_comments=False)
delimiter
buf = f.read(chunksize)
delimiter
xf = np.linspace(0.0, 1.0 / (2.0 * T), N / 2)
delimiter
Z2 = np.array([0, 1, 0.5, 0])
delimiter
mat = sps.lil_matrix((len(df), len(vocabs[i])))
delimiter
df.equals(expected)
delimiter
ipcounter = 0
delimiter
main()
delimiter
fh_out.write(i)
delimiter
total += 1
delimiter
c.NotebookApp.enable_mathjax = True
delimiter
l.extend(f(i))
delimiter
introspector = request.registry.introspector
delimiter
pmat.__doc__ = parser.format_help()
delimiter
result[0].content
delimiter
gc.enable()
delimiter
n, r = divmod(n, BASE)
delimiter
lists[item[:5]].append(item)
delimiter
flip_stack_helper(s, Stack())
delimiter
Derived.my_fun(Derived)
delimiter
self.parent = ParentClass(1)
delimiter
tokens = re.findall(command_pattern, f.read())
delimiter
dic[key] = dic1[key] + dic2[key]
delimiter
myframe.pack(fill=BOTH, expand=YES)
delimiter
d1 = dict(itertools.islice(i, n))
delimiter
h - prtns.tolist()
delimiter
i = i + 1
delimiter
t2.start()
delimiter
temp.append(t)
delimiter
line = line.upper()
delimiter
self._ref1 = ref1
delimiter
fd.write(a[(i), ...].tobytes())
delimiter
weights[i] -= step_size * derivative
delimiter
tform = ori2cent.dot(rmat_z).dot(rmat_y).dot(rmat_x).dot(cent2ori)
delimiter
print(lists_dict[key])
delimiter
0
delimiter
result = self.apply(f, reduce=False)
delimiter
actions
delimiter
file_contents = tf.read_file(filename)
delimiter
colors = sns.diverging_palette(20, 220, n=4)
delimiter
l.index(X(is_odd))
delimiter
response = opener.open(url)
delimiter
top.after(100, on_after_elapsed)
delimiter
logger.addFilter(NoParsingFilter())
delimiter
song = Song.objects.get(id=song_id)
delimiter
0
delimiter
message
delimiter
a = models.IntegerField()
delimiter
roi = im[y1:y2, x1:x2]
delimiter
q = Company.query.filter(Company.id.in_(company_ids_page))
delimiter
total_sum = sum(lst)
delimiter
y = sig(x)
delimiter
opt_fun = lambda x, a: f(x, a, user_b, user_c)
delimiter
last = next(it)
delimiter
result = [dict1[k] for k in set_operation_result]
delimiter
alpha = 0.0025
delimiter
s = s.reindex(idx, fill_value=0)
delimiter
numpy.iinfo(numpy.uint64).min
delimiter
fragments = self.getDiffFragments()
delimiter
parser = argparse.ArgumentParser()
delimiter
r.instance_b_placeholder.save()
delimiter
print(do_add(s, 2))
delimiter
foo = [[]] * 4
delimiter
item = stack.pop()
delimiter
print(c_range_obj.start, c_range_obj.step, c_range_obj.len)
delimiter
setattr(Search, option, make_set_condition(option))
delimiter
df
delimiter
self.update_prop(image, orig_handle, legend)
delimiter
noclubs = list(suits)
delimiter
f = Foo()
delimiter
r = np.linspace(0, 1, 100)
delimiter
l.pop()
delimiter
annotated_films.append(film)
delimiter
df = pd.DataFrame(a)
delimiter
authinfo = urllib.request.HTTPBasicAuthHandler()
delimiter
screen = pygame.display.set_mode((200, 200))
delimiter
enddo
delimiter
endif
delimiter
sl.insert(0, i)
delimiter
utc_time = datetime.utcnow()
delimiter
fig = plt.figure()
delimiter
print(i)
delimiter
empty_shared_array(ndarray.size, ndarray.dtype, lock)
delimiter
AppHelper.runConsoleEventLoop()
delimiter
False
delimiter
f, line = lookahead_line(f)
delimiter
pred = pipe.predict(test)
delimiter
node
delimiter
p = abs(d.as_tuple().exponent)
delimiter
run = True
delimiter
W = np.arange(N * N).reshape(N, N)
delimiter
Py_INCREF(x)
delimiter
self.name = name
delimiter
a = 1
delimiter
minimum, maximum = float(minimum), float(maximum)
delimiter
fd = open(f)
delimiter
slices.append(slice(0, 1))
delimiter
do_something(result)
delimiter
get_pixels.restype = ctypes.POINTER(ctypes.c_char)
delimiter
fd.close()
delimiter
print(trends)
delimiter
fb_ = np.zeros_like(zeta)
delimiter
sum_prods = arr1.dot(arr1_weights)
delimiter
torfile = libtorrent.create_torrent(fs)
delimiter
mock.assert_called_once_with(n=40)
delimiter
df2 = df2[meds.index]
delimiter
seq1 = list(range(1, 11))
delimiter
args = parser.parse_args()
delimiter
freq = collections.Counter(xs)
delimiter
loop.run_until_complete(coro())
delimiter
print(request.LANGUAGE_CODE)
delimiter
i = np.arange(N)
delimiter
q = model.all()
delimiter
print(list(truncated_range20))
delimiter
root = tk.Tk()
delimiter
print(field)
delimiter
idx = np.array(list(range(len(xhash))))
delimiter
rex = re.compile(file_name)
delimiter
csv_writer = csv.writer(fou)
delimiter
c = b
delimiter
d.append(b)
delimiter
box.pack(side=tk.TOP)
delimiter
m.start()
delimiter
P = np.matrix(np.eye(4)) * 1000
delimiter
plt.plot(data)
delimiter
parser = create_pmat_options()
delimiter
False
delimiter
n = npseq.shape[0]
delimiter
self.v = v
delimiter
df
delimiter
self.crawler.configure()
delimiter
Var1 - 1
delimiter
django.VERSION < (1, 7)
delimiter
print(a.result())
delimiter
yesterday = now + datetime.timedelta(days=-1)
delimiter
plt.figure()
delimiter
driver = webdriver.PhantomJS(desired_capabilities=dcap)
delimiter
data = f.read(4000)
delimiter
thistime = time.time()
delimiter
games_won = winners.sum(0)
delimiter
print(table)
delimiter
min_x, min_y = numpy.min(iterable[0], axis=0)
delimiter
samples.index = samples.index.get_level_values(1)
delimiter
a = np.zeros(10, dtype=str)
delimiter
item = self.queue.get()
delimiter
ax2.imshow(img_masked)
delimiter
n = len(S)
delimiter
a = [True, True, False]
delimiter
fd.truncate()
delimiter
L = []
delimiter
pixel_shape = box(llx, lly, urx, ury)
delimiter
c = [C[k] for k in range(len(C)) if k not in (i, j)]
delimiter
c = canvas.Canvas(filename)
delimiter
ret += line.split()
delimiter
l.append(e)
delimiter
self.assertEqual(common, subset)
delimiter
result[I] = func1[zeta[I]]
delimiter
print(word)
delimiter
instance.created_by = user
delimiter
maxEl = max(element[0] for element in elements)
delimiter
doStuff(e)
delimiter
uuid_generator = (line.split(SPLIT_CHAR)[UUID_FIELD] for line in file)
delimiter
ygen = (y[i:i + 10] for i in range(0, 1000, 10))
delimiter
buffer_string = buffer_string + ser.read(ser.inWaiting())
delimiter
normal = np.array([1 / length_dT_dt] * 2).transpose() * dT_dt
delimiter
x = 1
delimiter
c = Castro()
delimiter
D = where(K, A, B)
delimiter
n.parentNode.removeChild(n)
delimiter
b = int(split_text[1])
delimiter
d = {}
delimiter
stripped_code = output.getvalue()
delimiter
b[a < 40] = funcA(a[a < 40])
delimiter
grouper = mi_df.index.get_level_values(0)
delimiter
pos = haystack.find(char, pos + 1)
delimiter
g.a.append(5)
delimiter
client
delimiter
df.Knownvalue // 10
delimiter
ax2 = fig2.add_subplot(111)
delimiter
do_something_else_1()
delimiter
print(procd)
delimiter
g = df.groupby(group_col)[condition_col]
delimiter
result_item.append(l)
delimiter
your_dict = {}
delimiter
lowdimtest = mat(testX) * pcmat
delimiter
plt.figure()
delimiter
httplib.__file__
delimiter
pylab.plot(bins[:-1], n)
delimiter
Counter(more_itertools.windowed(s, 2))
delimiter
app.register_blueprint(child.child)
delimiter
comm.Probe(source=0, tag=22, status=status)
delimiter
hits.append(word)
delimiter
print(obs_values[0].firstChild.nodeValue)
delimiter
answer = [s[idxes[i] + 1:idxes[i + 1] + 1] for i in range(len(idxes[:-1]))]
delimiter
func(*a, **ka)
delimiter
t.day
delimiter
print(cake)
delimiter
finalMessage += chr(ord(value[x]) + 1)
delimiter
t.start()
delimiter
final_file.writerow(current_user)
delimiter
error_out()
delimiter
screen, px = setup(sys.argv[1])
delimiter
articles.extend(parser.parse_articles())
delimiter
pairLambs.append(closure(p))
delimiter
company, was_created = Company.objects.get_or_create(name=info)
delimiter
es = Elasticsearch()
delimiter
self.vtkCells.Modified()
delimiter
formatter.format_help()
delimiter
my_dict = {}
delimiter
t.set_position((shift, 0))
delimiter
ret = []
delimiter
timers.append(t)
delimiter
print([(sum_table[i + w] - sum_table[i]) for i in range(len(a))])
delimiter
temp.close()
delimiter
comparative
delimiter
dd = defaultdict(list)
delimiter
worker.setDaemon(True)
delimiter
print(s)
delimiter
timeit.timeit(lc)
delimiter
fit = double_gaussian(x, params)
delimiter
fig, ax
delimiter
out = np.zeros((Y_idx.max() + 1, X_idx.max() + 1))
delimiter
c.accept(list.get(i), i)
delimiter
ts = int(time.time())
delimiter
t.cancel()
delimiter
nots = set(range(n)) - set1
delimiter
zeta0_ = zeta[i]
delimiter
figure()
delimiter
res = ec2.get_all_instances()
delimiter
hangflg = 0
delimiter
d[word] += count
delimiter
print(data)
delimiter
pip - -version
delimiter
driver = webdriver.Firefox(proxy=proxy)
delimiter
a, b = itertools.tee(iterable)
delimiter
len(defaults) >= len(arguments)
delimiter
nplats = numpy.array(lats)
delimiter
b2j.setdefault(word, []).append(j)
delimiter
lowest_values = []
delimiter
indices = list(range(len(source)))
delimiter
df
delimiter
aList = []
delimiter
self.data = data
delimiter
recur(n - 1)
delimiter
candidate = remaining[0]
delimiter
df = pd.DataFrame(randn(15, 20))
delimiter
pdfStorage.put()
delimiter
ipython = IPython.ipapi.get()
delimiter
mapping = [header.index(x) for x in columns]
delimiter
stream.stop_stream()
delimiter
self.msgs = set()
delimiter
accumulated = {}
delimiter
c = Counter(s)
delimiter
cxy
delimiter
doc = webview.page().mainFrame().documentElement()
delimiter
start = datetime.datetime.now()
delimiter
print(df1)
delimiter
coeffs, matcov = curve_fit(func, x, y, p0)
delimiter
print(l_out)
delimiter
reader = csv.reader(f)
delimiter
out = np.zeros_like(skel)
delimiter
print(ar + 2)
delimiter
indexMatching(self.mylist, lambda x: x.name == name)
delimiter
final_list.insert(0, lowest)
delimiter
deck = powerpoint.Presentations.Open(inputFileName)
delimiter
doc = LH.fromstring(content)
delimiter
M = np.vstack([np.ones(len(xdata)), np.log(xdata), xdata]).T
delimiter
d[tx, code].append(value)
delimiter
node.isleaf = process(node)
delimiter
x.run()
delimiter
remove_all_subclasses(type, old_bases)
delimiter
time.sleep(0.5)
delimiter
x * 100
delimiter
val
delimiter
dtd.freeDtd()
delimiter
cj = cookielib.LWPCookieJar(cookie_file)
delimiter
output = np.column_stack((arrA.flatten(), arrB.flatten(), arrC.flatten()))
delimiter
self.stream = self._open()
delimiter
ax2 = ax1.twiny()
delimiter
colors = 100 * np.random.rand(len(patches))
delimiter
root = tree.getroot()
delimiter
print(f(a))
delimiter
players = sorted(enumerate(players), key=level)
delimiter
run_ends, = numpy.where(difs < 0)
delimiter
done += 1
delimiter
file_contents = tf.read_file(input_queue[0])
delimiter
step += inc
delimiter
fig = swarm_plot.get_figure()
delimiter
(d.day + 6) // 7
delimiter
indata = in_file.read()
delimiter
requests.__version__
delimiter
self.flush()
delimiter
seen = set()
delimiter
foo.foobar
delimiter
result = []
delimiter
self.create_widget()
delimiter
fcst_serie = pd.Series(data=pred1[0], index=fcst_index)
delimiter
zap = lambda self, x: x + self.bar(x)
delimiter
self.name = name
delimiter
sys.exit(main())
delimiter
temp = map(str, L[j:])
delimiter
ok = False
delimiter
accum_min_lst.append(val - max(x))
delimiter
df
delimiter
print(sds)
delimiter
l = list(range(5))
delimiter
AddressFactory.create_batch(4)
delimiter
pool.map_async(func_worker, func_args).get(9999999)
delimiter
day_of_year = (dt - datetime(dt.year, 1, 1)) // DAY + 1
delimiter
a[1]
delimiter
train_idxs = []
delimiter
monkey.patch_all()
delimiter
checkLower = check.lower()
delimiter
help(cvxopt.msk.qp)
delimiter
r * np.arccos(cos_lat_d - cos_lat1 * cos_lat2 * (1 - cos_lon_d))
delimiter
sys.exit(1)
delimiter
threading._format_exc = traceback.format_exc
delimiter
ctypes.c_void_p(0),
delimiter
b[b > 0] = 255
delimiter
a - b
delimiter
test.d = test.d + 1
delimiter
workingObj.methodName()
delimiter
b, c, d = -axis * math.sin(theta / 2.0)
delimiter
request.url
delimiter
writetoafile(file.strpath)
delimiter
y = int(a, 2) ^ int(b, 2)
delimiter
sub_comm.Disconnect()
delimiter
root_logger = logging.getLogger()
delimiter
fin.readline()
delimiter
pyautogui.dragRel(0, 10)
delimiter
output = io.BytesIO()
delimiter
it1 = double_ints(map(itemgetter(0), it1))
delimiter
linetext = QtGui.QLineEdit(window)
delimiter
fList.append(fil)
delimiter
cv2.line(vis, (x2 - r, y2 - r), (x2 + r, y2 + r), col, thickness)
delimiter
shape[axis] += 2
delimiter
next(gen)
delimiter
item.setCheckState(check)
delimiter
b.pack(padx=5, pady=5)
delimiter
new_index = sorted(config.index)
delimiter
new_buf.write(self.buf.read())
delimiter
main()
delimiter
stacked = dfs.stack(0).reset_index(level=1)
delimiter
margs = [x.__repr__() for x in args]
delimiter
print(int(x, 16), file=g)
delimiter
data = np.random.random(N)
delimiter
heapq._siftup_max(heap, 0)
delimiter
channel_session_user_from_http
delimiter
PrettyPrinter.__init__(self, *args, **kwargs)
delimiter
last_idx = A2.shape[1] - 1 - np.argmax(A2[:, ::-1] < 0, axis=1)
delimiter
python - -version
delimiter
np.linalg.eigvals(A)
delimiter
alpha.paste(circle.crop((rad, rad, rad * 2, rad * 2)), (w - rad, h - rad))
delimiter
__builtins__
delimiter
composed
delimiter
o = []
delimiter
ef
delimiter
my_data = NP.random.randint(10, 100, 10000).reshape(1000, 10)
delimiter
Frame.__init__(self, master)
delimiter
df_b = pd.DataFrame(b)
delimiter
res = {}
delimiter
end.append(pop_dict[ind.mate])
delimiter
hdfs = pydoop.hdfs.hdfs()
delimiter
x, y = inv.transform([(event.x, event.y)]).ravel()
delimiter
obj.Test()
delimiter
data_from_django = {{my_data | safe}}
delimiter
d[col] = {}
delimiter
False
delimiter
python - O
delimiter
print(myCity.lower())
delimiter
self.stopped = False
delimiter
[TYPECHECK]
delimiter
globals()[k] = self.monad[k]
delimiter
NSScreen.mainScreen().frame().width
delimiter
integer = int(hexadecimal, 16)
delimiter
unfrozen_indices = [i for i, e in enumerate(lst) if not e.freeze]
delimiter
self.it = it
delimiter
self.b = b
delimiter
a = list(range(100))
delimiter
metadata = MetaData(bind=engine)
delimiter
mapping[keyword.lower()] = mapping[keyword.lower()].upper()
delimiter
profiling_wrapper
delimiter
self.engine.createElement((0, 0), TriFader(SelectFileState), -240)
delimiter
new_dict[pair[1]] = []
delimiter
func_alias = mat.group(1)
delimiter
time.sleep(sleep)
delimiter
coords = np.vstack([item.ravel() for item in [xi, yi, zi]])
delimiter
count = 1
delimiter
record = Record.objects.get(pk=record_id)
delimiter
sample_width = wave_file.getsampwidth()
delimiter
a = iter(iterable)
delimiter
deleteself
delimiter
t1 = time.time()
delimiter
instance.row.name
delimiter
a = np.array([1 + 1e-10j])
delimiter
pool = mp.Pool()
delimiter
self.data = data
delimiter
ax2 = ax1.twinx()
delimiter
result
delimiter
print(info_extract(soup))
delimiter
b = traceTA * normX / normY
delimiter
print(future.result(timeout=1))
delimiter
table[-1][-1]
delimiter
result = pool.apply_async(f, [10])
delimiter
consoleHandler = logging.StreamHandler()
delimiter
neis = g.neighbors(v)
delimiter
dud_ = dud[:]
delimiter
raise MemoryError()
delimiter
bins = np.logspace(-2, 2, 20)
delimiter
display.display(plt.gcf())
delimiter
now_tz = now.astimezone(tz1)
delimiter
list_keys = list_query.fetch(keys_only=True)
delimiter
plt.xlabel(x)
delimiter
len(x)
delimiter
transformer = FunctionTransformer(drop_nans, validate=False)
delimiter
batch.submit()
delimiter
print(result)
delimiter
func, args, kwargs = resolve(url)
delimiter
html = clean_html(html)
delimiter
wx.TheClipboard.SetData(clipboard)
delimiter
print(value)
delimiter
__builtin__.object = metaobject
delimiter
line = next(irofile)
delimiter
print(unpickledlist)
delimiter
print(result)
delimiter
print(test.vec())
delimiter
setattr(local_module, key, getattr(module, key))
delimiter
t = (k - 1) * s + n // pow(s, k - 1)
delimiter
result.append(tree.pop())
delimiter
mymetadata = sa.MetaData()
delimiter
register = template.Library()
delimiter
min_distance = distance(fList[0], fList[1])
delimiter
start_subquery(lexer, lexer.lexpos)
delimiter
out = sess.run(inference_net, feed_dict={inputs: batch[0]})
delimiter
n_int = int(n)
delimiter
a = Auction.new()
delimiter
consumer_secret, access_token_key = access_token_key, access_token_secret
delimiter
string
delimiter
_int = int(string, base=16)
delimiter
sys.stdir = sys.__stdin__
delimiter
ax = fig.add_subplot(111)
delimiter
s.replace(sep, sep + p).split(p)
delimiter
Class1
delimiter
ofh = sys.stdout
delimiter
self.connected = False
delimiter
anothername = myname
delimiter
print(f.url)
delimiter
last_row = df.index.get_loc(last[0])
delimiter
words = nltk.tokenize.word_tokenize(p)
delimiter
wallet = kwallet_example.open_wallet()
delimiter
[x for x in Foo.__dict__ if isinstance(Foo.__dict__[x], property)]
delimiter
d = defaultdict(list)
delimiter
portfolio, err, errid, errmsg = ibm.get_account_update()
delimiter
-1
delimiter
media.write(recordbuf)
delimiter
self.filter(age__gte=min, age__lt=max)
delimiter
SOUTH = False
delimiter
project = sys.argv[2]
delimiter
IDs = sidx[np.searchsorted(cols, query_cols, sorter=sidx)]
delimiter
b, c = next(gen), next(gen)
delimiter
parser.unescape(text)
delimiter
data = tf.cond(select_test, lambda : test_data, lambda : train_data)
delimiter
desired_date = stored_date + tz.utcoffset(stored_date)
delimiter
x = np.linspace(0, 600)
delimiter
A.flags.maskna = True
delimiter
False
delimiter
page = urllib.request.urlopen(fish_url)
delimiter
N = len(s)
delimiter
name = Column(String(20))
delimiter
evt.Skip()
delimiter
panel = wx.Panel(self)
delimiter
s = set()
delimiter
run_number += 1
delimiter
figure(0)
delimiter
all_found = []
delimiter
line = line.strip()
delimiter
self.window = self.engine.rootObjects()[0]
delimiter
d.update(buf)
delimiter
self._maxlen
delimiter
sum(it)
delimiter
run()
delimiter
r, w = select.select([A], [B], [])
delimiter
data = [strace, mtrace]
delimiter
average = sum(grades) / len(grades)
delimiter
g.gremlin.execute(script, params)
delimiter
coordinates = np.column_stack([x, y]) + 0.04 * np.random.rand(len(x), 2)
delimiter
a[a != 999] = a[a != 999] > 5
delimiter
f.write(word)
delimiter
max_cnt = max(freq_list)
delimiter
y = np.exp(-0.5 * x) * np.sin(x)
delimiter
overall
delimiter
fig = figure()
delimiter
self.animal_set[0]
delimiter
replaces = [(a + c + b[1:]) for a, b in splits for c in alphabet if b]
delimiter
mylist.append(x)
delimiter
hold(True)
delimiter
out = np.dot(m, prior_reci) + np.dot(1 - m, 0.1 * prior_reci)
delimiter
matches[1].ruleId, matches[1].replacements
delimiter
sample = Column(postgresql.ARRAY(Integer))
delimiter
func.__code__
delimiter
True
delimiter
AB = np.hstack((B, A))
delimiter
self.__error = str(e)
delimiter
EquivDiameter = np.sqrt(4 * Area / np.pi)
delimiter
rsa_key = RSA.importKey(subjectPublicKeyInfo)
delimiter
list1 = [1, 5, 8, 10, 50]
delimiter
data = compressor.compress(inputfile.read())
delimiter
w = b.widget()
delimiter
PyErr_Print()
delimiter
(matr for matr in matrix_g(n, m) if halfrank(matr, maxrank))
delimiter
tran = ssh.get_transport()
delimiter
colors_seen.remove(color)
delimiter
some_iterable = list(range(1000))
delimiter
pagenos = set()
delimiter
body = extract_body(payload)
delimiter
mybytes.append(x)
delimiter
self.name = name
delimiter
print(line)
delimiter
a, b
delimiter
intersect(cone, box.faces[0])
delimiter
sink.write(input)
delimiter
df
delimiter
fig = plt.figure()
delimiter
Fruit[6]
delimiter
b = [6, 1, 0]
delimiter
connection = Connection()
delimiter
ws.set_horz_split_pos(1)
delimiter
fig, ax1 = subplots(1, 1)
delimiter
black = 0, 0, 0
delimiter
pdfdoc = PDFDocument.alloc().initWithURL_(url)
delimiter
self._min_x = min(self._min_x, x)
delimiter
a = ndarray((5,), int)
delimiter
B.__init__(self)
delimiter
next(self.g)
delimiter
values = ast.literal_eval(values)
delimiter
out_csv.writerow((filename,) + row)
delimiter
master_book = load_workbook(master_file_path)
delimiter
stream.close()
delimiter
args = parser.parse_args(argv)
delimiter
checkForNonUnicodeHelper(parser.suite(codeString).tolist())
delimiter
handle.write(block)
delimiter
difference_in_days = abs((end_date - start_date).days)
delimiter
resul += i
delimiter
self.available_moves + self.get_squares(player)
delimiter
open(URL, data)
delimiter
a[key] = value
delimiter
final = []
delimiter
b = df.Bolean_condition.values
delimiter
tree = scipy.spatial.KDTree(numpy.array(points))
delimiter
r = requests.get(url)
delimiter
s_y = center[1] - v_x[1] * (width / 2) - v_y[1] * (height / 2)
delimiter
new_D[k.isoformat()] = v
delimiter
digit_count = int(log(abs(n + 1), 10)) + 1
delimiter
self.assertIn(k, d2, msg)
delimiter
pc = prov_data.values[:, 1:5]
delimiter
print(df)
delimiter
exec(user_code)
delimiter
list.extend(self, x)
delimiter
sock.connect((ip, port))
delimiter
A = np.empty((10, 10))
delimiter
x
delimiter
groups = defaultdict(list)
delimiter
self.attrb1, self.attrb2
delimiter
p = re.compile(reg)
delimiter
N = A01.max()
delimiter
interactive_legend().show()
delimiter
w0[:len(x0) / 2] = 0.5
delimiter
Foo.spam
delimiter
lines = (line for line in stripped if line)
delimiter
client = Client.objects.get(id=id)
delimiter
cls._counter += 1
delimiter
sig_keys[obj.signature()].add(k)
delimiter
self.x + self.y
delimiter
tvalues = np.zeros(n)
delimiter
stacktrace = traceback.format_exc()
delimiter
print(y)
delimiter
c = count()
delimiter
numpy.power(-1 + 0j, 0.5)
delimiter
xvals, yvals = gca().axes.get_xlim(), gca().axes.get_ylim()
delimiter
string = inspect.getframeinfo(frame[0]).code_context[0].strip()
delimiter
self.gpa = 0
delimiter
self.buf.seek(read_fp)
delimiter
ax1 = fig.add_subplot(111)
delimiter
value = next(it)
delimiter
deq.append(i)
delimiter
dst = np.zeros(template.shape, dtype=template.dtype)
delimiter
foo(1)
delimiter
failed_items.append(q.get())
delimiter
img[y][x][1] = g
delimiter
dask - scheduler
delimiter
sum(map(pred, seq))
delimiter
elements = []
delimiter
print(ranks[a], ranks[b], count, file=file)
delimiter
newvals[value] += int(value)
delimiter
False
delimiter
effectslist = []
delimiter
Image.open(fout.name).show()
delimiter
step = -1 if b < a else 1
delimiter
traceback.print_exception(exc_type, exc_value, tb, limit=limit, chain=False)
delimiter
WlanEnumInterfaces = wlanapi.WlanEnumInterfaces
delimiter
b, c = arange(a.sum()), ones((m, n), dtype=int) * 999
delimiter
print(type(vector_b))
delimiter
deleteform.name
delimiter
x < 2
delimiter
sys.modules[__name__] = FutureMagic()
delimiter
f_i = interp1d(x, y)
delimiter
print([proj.a.text for proj in project_titles])
delimiter
dec_lon = random.random() / 100
delimiter
data_inside = cur.fetchone()[0]
delimiter
img_tf = tf.Variable(img)
delimiter
C_list = [5, 6, 7, 8, 9, 10]
delimiter
main()
delimiter
arrayTest.append(i)
delimiter
logging.basicConfig(level=logging.INFO)
delimiter
nsmap = dict((k, v) for k, v in list(tree.nsmap.items()) if k)
delimiter
print(s)
delimiter
y = [1, 2]
delimiter
b = copy.copy(a)
delimiter
meth(self, *args)
delimiter
layout.removeWidget(widgetToRemove)
delimiter
happy_array = np.random.randn(28, 28)
delimiter
workers[0].name
delimiter
0.00851202011108
delimiter
0.00508499145508
delimiter
raise MyError(100)
delimiter
a = [1, 0, 1, 1, 0, 0, 1]
delimiter
c = C()
delimiter
deepReduce(f, deepReduce(f, y, xs[0]), xs[1:])
delimiter
value = f(*args, **kwargs)
delimiter
i += 1
delimiter
update_hash(keys=keys, args=args, client=pipe)
delimiter
recurse(v)
delimiter
asyncio.set_event_loop(loop)
delimiter
x = np.linalg.det([[1, a[1], a[2]], [1, b[1], b[2]], [1, c[1], c[2]]])
delimiter
A.x
delimiter
self.recording += 1
delimiter
combined = Counter([1, 2, 2, 5]) | Counter([2, 5, 5, 5, 9])
delimiter
rawdata = [(1, 0.4, 4), (1, 0.6, 6), (2, 2.6, 6)]
delimiter
d = a.copy()
delimiter
form.set_step(2)
delimiter
print(cur_date)
delimiter
x_b = points[..., 1:][..., (mask)]
delimiter
next(iter([]))
delimiter
maks_length = len(value)
delimiter
np.logical_or.at(is_ok, b_vals, d_vals)
delimiter
width, height = pb.get_width(), pb.get_height()
delimiter
f = Foo()
delimiter
ids = []
delimiter
bar()
delimiter
im = plt.imshow(data)
delimiter
self._locked = True
delimiter
col_mean = stats.nanmean(a, axis=0)
delimiter
response_data = r.read()
delimiter
result = unittest.TextTestRunner(verbosity=2).run(suite())
delimiter
R = numpy.linalg.cholesky(V).transpose()
delimiter
child.setText(0, str(val))
delimiter
bytes += stream.read(1024)
delimiter
v[i] = set((i,))
delimiter
sA = A.sum(0)
delimiter
x = [0, 5, 10, 15, 20]
delimiter
response.status_code = 404
delimiter
System.out.println(map.keySet())
delimiter
p._pool[0]
delimiter
red_float.convertTo(red, CV_8U)
delimiter
ct_datetime = utc + datetime.timedelta(hours=current_ct_offset)
delimiter
u, s, v = np.linalg.svd(a)
delimiter
q = multiprocessing.Queue()
delimiter
i = 0
delimiter
print(begin.lower() + text.upper() + end.lower())
delimiter
val = obj.__getattribute__(field)
delimiter
win = Window()
delimiter
df = pd.DataFrame(BSI, columns=Book._fields)
delimiter
a - b
delimiter
ncols = xl.book.sheet_by_index(0).ncols
delimiter
url
delimiter
float.__init__(value)
delimiter
self.queryset = Resources.objects.filter(user=request.user.username)
delimiter
xyi = np.floor(xyi, xyi).T
delimiter
NEWLIST[j], NEWLIST[k] = NEWLIST[k], NEWLIST[j]
delimiter
mat_inv[..., (1), (1)] = mat[..., (0), (0)]
delimiter
client = pymongo.MongoClient()
delimiter
ani = animation.FuncAnimation(fig, update_loc, 2500, interval=50, blit=True)
delimiter
y = asarray(y)
delimiter
tmp.append(i)
delimiter
self.first_name
delimiter
print(msg)
delimiter
sub_category = [sub[1:] for sub in in_list if sub[0] == label and len(sub) > 1]
delimiter
words = sentences.split()
delimiter
Gui().run()
delimiter
it = iter(list(range(10)))
delimiter
lock = Lock()
delimiter
x = datetime.date.today()
delimiter
logger.addHandler(syslog)
delimiter
main()
delimiter
register = template.Library()
delimiter
model = Clergy
delimiter
self.c = c
delimiter
np.unique(_25.index.get_level_values(1).minute)
delimiter
ls - l / usr / local / bin / python
delimiter
approximate_fraction(math.pi, 1e-05)
delimiter
print(mat_sp[(idxs), :].todense())
delimiter
False
delimiter
_called_by_deffered2()
delimiter
fh.seek(start)
delimiter
ipython < file
delimiter
l[index] = 0
delimiter
obj.someforeignkey = another_obj.id
delimiter
outcsv.writerow(list(result.keys()))
delimiter
ax.set_title(col)
delimiter
new_matrix = np.ones((len(matrix1), len(matrix2[0])))
delimiter
unique_hash1 == unique_hash2
delimiter
id(x1), id(x2)
delimiter
seq.append((n, is_prime(n)))
delimiter
start = cols[1].a.string
delimiter
errThread.start()
delimiter
print(np.sum(pdf * np.diff(bins)))
delimiter
print(d2.sqrt(dot100))
delimiter
tree = etree.fromstring(html, parser=etree.HTMLParser())
delimiter
a.x = b
delimiter
0, 0, 0
delimiter
args = np.atleast_1d(*xi)
delimiter
100, 0.217721, 0.218544
delimiter
seq = [1, 0, 0, 2, 0]
delimiter
objects = PersonManager()
delimiter
spam.append(bar)
delimiter
winner = np.argwhere(list == np.amax(list))
delimiter
l = list(g)
delimiter
p1 = list(range(N))
delimiter
results = []
delimiter
-------------Minute(0 - 59)
delimiter
data = s.recv(1000000)
delimiter
urls_d[url] += 1
delimiter
modList = []
delimiter
WSGI = WSGIResource(reactor, reactor.getThreadPool(), app)
delimiter
attr(*args, **kw)
delimiter
g = (x for x in range(10))
delimiter
bar = []
delimiter
k, self[k]
delimiter
fig1 = figure()
delimiter
sys.excepthook = print_traceback
delimiter
df
delimiter
print(docopt.docopt(__doc__))
delimiter
1,
delimiter
df
delimiter
ticket
delimiter
y = list(range(8, 20))
delimiter
d = dict()
delimiter
b = [-1, a, -100, a[2], -1]
delimiter
np.random.seed(seed)
delimiter
x0 = mu + sigma * P.randn(10000)
delimiter
src = os.path.abspath(src)
delimiter
install_data.run(self)
delimiter
a = A(1)
delimiter
c_ulong_type.tp_flags |= Py_TPFLAGS_CHECKTYPES
delimiter
event = Event.query.get_or_404(id)
delimiter
df.loc[tup] = 0, 0
delimiter
mod = __import__(name)
delimiter
y = np.arange(j - size, j + size)
delimiter
f
delimiter
interpreter = cpy
delimiter
result = conn.search_s(some_dn, ldap.SCOPE_SUBTREE, some_lookup)
delimiter
n_to_M = -2.0 * np.eye(n - 1)
delimiter
clusters = [(p ** e) for p, e in list(collections.Counter(prime_factors).items())]
delimiter
row_sums = a.sum(axis=1)
delimiter
objects = list(Contest.objects.get(pk=id).image_set)
delimiter
lines = file.read()
delimiter
output = StringIO.StringIO()
delimiter
x += 2 * p
delimiter
f(p) + normal(0, 0.1, len(x))
delimiter
jobForm.is_valid()
delimiter
start = s.index(first) + len(first)
delimiter
f.write(proto_graph.SerializeToString())
delimiter
net.addConnection(FullConnection(bias, hidden0))
delimiter
p = os.path.join(root, file)
delimiter
6000000
delimiter
dist_mat = np.zeros((data.shape[0], n_clusters))
delimiter
True
delimiter
func1d = lambda y, *args: optimize.curve_fit(f, xdata=x, ydata=y, *args)[0]
delimiter
ret + 1 if (ret + 1) ** n == val else ret
delimiter
matches = tuple(matches)
delimiter
result = cx.eval_script(whatyoupostedabove)
delimiter
self.mainFrame().load(url)
delimiter
wynik[i] = 1
delimiter
OLD_STDERR = sys.stderr
delimiter
ip_addr = Column(String)
delimiter
t = Timer(10.0, timeout)
delimiter
clientsocket.close()
delimiter
assert expected == actual
delimiter
print(order_form.order_entries)
delimiter
d0 = p[0] - b[0]
delimiter
len(inspect.getargspec(add)[0])
delimiter
l = l.split()
delimiter
sum_ = sum_digit(n)
delimiter
key = m.hexdigest()
delimiter
a = np.random.uniform(10, 150)
delimiter
aa = theClass()
delimiter
rng = list(range(len(text)))
delimiter
animal = form.save(commit=false)
delimiter
Case(When(created__month=11, then=1), output_field=IntegerField())
delimiter
primes.append(i)
delimiter
last_run_at = self.maybe_make_aware(last_run_at)
delimiter
arr = line.split()
delimiter
ggknot < -data.frame(x, y, z, dcol)
delimiter
print(hex(item))
delimiter
a = [5, 7, 11, 4, 5]
delimiter
deserialized_user = yaml.safe_load(serialized_user)
delimiter
print((c.i, c.j))
delimiter
dir(o0)
delimiter
self.name = name
delimiter
t0 = datetime.datetime.now()
delimiter
next(randomLst)
delimiter
match = False
delimiter
print(row)
delimiter
dists = numpy.sum((x - y) ** 2, 1)
delimiter
clientImage = np.array(list(bitmapBits), np.uint8).reshape(height, width, 4)
delimiter
def_ = Column(String(50))
delimiter
s
delimiter
vec < -numeric(0)
delimiter
self.n += 1
delimiter
r = pd.Series(index=s.index)
delimiter
s = mat.shape[0]
delimiter
localtrace
delimiter
key.verify_init()
delimiter
first = 0, 0, 0, 0, 0, 0, 0
delimiter
self._test_fit([-1, 2], [4, 5], [[1, 2], [4, 5]], [1, 1])
delimiter
self._lock = threading.Lock()
delimiter
newarray[i] = oldarray[i]
delimiter
x += y.A
delimiter
thincows
delimiter
tags = db.ListProperty(str, required=True)
delimiter
assert numpy.all(data == reference[indexes])
delimiter
0
delimiter
lum_img = img[:, :, (0)]
delimiter
conn.close()
delimiter
a += 10
delimiter
self._content.write(content)
delimiter
print(logger.handlers)
delimiter
y = np.array([20, 5, 4, 9, 11, 7, 25])
delimiter
a = 1
delimiter
fig.colorbar(cs, ax=axs[1])
delimiter
query = query.filter(**{m2m_field: _id})
delimiter
w0[:len(x2) / 2] = 0.5
delimiter
random_tasks = random_lines(files)
delimiter
output = []
delimiter
g(5)
delimiter
items[i + 1] = items[i]