class foo:\n\n    def public(self):\n        return self.__private()\n\ndef __private(self):\n    return 5\nprint(foo().public())\nprint(foo()._foo__private())
complicated\n_complicated
def callback(indata, outdata, *stuff):\n    outdata[:] = indata * [1, 0.5]
import xlsxwriter\nworkbook = xlsxwriter.Workbook(\\'money_format.xlsx\\')\nworksheet = workbook.add_worksheet()\nmoney_format = workbook.add_format({\\'num_format\\': \\'[$R]#,##0.00\\'})\nworksheet.write(\\'A1\\', 1234.56, money_format)\nworkbook.close()
\\"\\"\\"\\"\\"\\".join([\\'{:4}\\'.format(\\'*\\' * ((i, j) in path) + str(val)) for j, val in\n    enumerate(row)])
print(x)
for i in range(2, 4):\n    x = Popen(\\'python\\' + str(i) + \\' --version\\', shell=True, stdout=PIPE,\n        stdin=PIPE, stderr=STDOUT)\nwhile x.poll() == None:\n    sleep(0.025)\nprint((\\'Exit code of \\' + str(i) + \\' is:\\', x.poll()))
word = Dispatch(\\'Word.Application\\')\ndoc = word.Open(\\'d:\\stuff\\myfile.doc\\')
def findpairs(arr, target):\n    pass
class c(object):\n    __slots__ = \\'foo\\', \\'bar\\', \\'baz\\'\na = c()
def post(self):\n    self.write(json.dumps(dict(location=\\'/tasks\\', user=self.current_user,\n        timestamp=\\'\\', projects=\\'\\', type=\\'\\', taskCount=\\'\\', resName=\\'\\')))
statements = re.split(\\'(?m)^\\s*GO\\s*(?:[0-9]+)?\\s*(?:--.*)?$\\', sql)\nfor statement in statements:\n    pass
import difflib
from django.http import HttpResponsePermanentRedirect\nurlpatterns = patterns(\\'\\', (\\'^bad-old-link\\.php\\', lambda request:\n    HttpResponsePermanentRedirect(\\'/nice-link\\')))
df\nrow_pos = [2, 6, 9]\ndf.ix[row_pos]\ndates = [df.index[i] for i in row_pos]
y\nnp.char.startswith(y, \\'B\\')
try:\n    cherrypy.session[\\'deviceArr\\'].append(device)\nexcept:\n    pass
import mmap
def process_links(self, links):\n    for link in links:\n        pass
System.Net.WebRequest.Create(webPath)
query = Company.query.filter(Company.id.in_(company_ids)).order_by(*\n    order_expressions)\nfollowing_companies_list_data = query.paginate(page, per_page=10, error_out\n    =False)
def append_field(cls, name, field):\n    pass
import dateutil.relativedelta as rd\ndatetime.date(2001, 4, 1) + rd.relativedelta(day=31)
d = datetime.datetime.strptime(\\'2017-10-13T10:53:53.000Z\\',\n    \\'%Y-%m-%dT%H:%M:%S.000Z\\')\nwith MongoClient() as mongo:\n    db = mongo.get_database(\\'test\\')
subject = self.format_subject(subject)\nif record.exc_info:\n    exc_info = record.exc_info\nelse:\n    exc_info = None, record.getMessage(), None\nmessage = \\"\\"\\"%s\n\nRequest repr(): %s\\"\\"\\" % (self.format(record), request_repr)\nreporter = ExceptionReporter(request, is_email=True, *exc_info)\nhtml_message = reporter.get_traceback_html() if self.include_html else None\ntry:\n    mail.mail_admins(subject, message, fail_silently=True, html_message=\n        html_message, connection=self.connection())\nexcept Exception as e:\n    console_logger.warn(\\'%s : %s\\' % (__name__, str(e)))
from b import binary
child = root / \\'some\\' / \\'child\\' / \\'dir\\'
def set_reconcile(src_seq, dst_seq):\n    \\"\\"\\"Return required operations to mutate src_seq into dst_seq\\"\\"\\"\nsrc_set = set(src_seq)\ndst_set = set(dst_seq)
[\\'\\', \\'/home/kpal/anaconda2/bin\\', \\'/usr/lib/pymodules/python2.7\\',\n    \\'/home/kpal/.local/lib/python2.7/site-packages/cooler-0.3.0-py2.7.egg\\',\n    \\'/home/kpal/.local/lib/python2.7/site-packages/hiclib-0.0.0-py2.7-linux-x86_64.egg\\'\n    ,\n    \\'/home/kpal/.local/lib/python2.7/site-packages/mirnylib-0.0.0-py2.7-linux-x86_64.egg\\'\n    , \\'/home/kpal/anaconda2/lib/python27.zip\\',\n    \\'/home/kpal/anaconda2/lib/python2.7\\',\n    \\'/home/kpal/anaconda2/lib/python2.7/plat-linux2\\',\n    \\'/home/kpal/anaconda2/lib/python2.7/lib-tk\\',\n    \\'/home/kpal/anaconda2/lib/python2.7/lib-old\\',\n    \\'/home/kpal/anaconda2/lib/python2.7/lib-dynload\\',\n    \\'/home/kpal/.local/lib/python2.7/site-packages\\',\n    \\'/home/kpal/anaconda2/lib/python2.7/site-packages/Sphinx-1.3.5-py2.7.egg\\',\n    \\'/home/kpal/anaconda2/lib/python2.7/site-packages/setuptools-20.3-py2.7.egg\\'\n    , \\'/home/kpal/anaconda2/lib/python2.7/site-packages\\',\n    \\'/home/kpal/anaconda2/lib/python2.7/site-packages/IPython/extensions\\',\n    \\'/home/kpal/.ipython\\']
print(\\'__mul__\\')
line, = plt.plot([1, 5, 2, 4], \\'-\\')\nline.set_dashes([8, 4, 2, 4, 2, 4])
if hostname[-1] == \\'.\\':\n    hostname = hostname[:-1]\nallowed = re.compile(\\'(?!-)[A-Z\\d-]{1,63}(?<!-)$\\', re.IGNORECASE)\nreturn all(allowed.match(x) for x in hostname.split(\\'.\\'))
_ = map(lambda person: values[person.last_name].append(person), Person.\n    objects.all())
buf = []\nwhile True:\n    l, data = inp.read()
sys.stdin = UTF8Reader(sys.stdin)\nfor _ in sys.stdin:\n    pass
Py_Initialize()\nPyRun_SimpleString(\\'print \\"Hello, world!\\"\\')
xs = np.vstack((x[edges[:, (0)]], x[edges[:, (1)]], x[edges[:, (0)]] + np.nan)\n    ).T.flatten()\nlines2d = plt.plot(xs, ys, marker=\\'o\\')
s
def handle(self, syntaxtree, vars):\n    return Printnl(vars, None)
if not matchobj is None:\n    print(matchobj.group(1))\nelse:\n    pass
if __name__ == \\'__main__\\':\n    pass
def __init__(self):\n    pass
os.environ[\\'DJANGO_SETTINGS_MODULE\\'] = \\'dataentry.settings\\'\nfrom django.conf import settings
for root, dirs, files in os.walk(\\'/\\'):\n    for name in dirs:\n        if name == \\'DCIM\\':\n            pass
clf.fit(iris.data, iris.target)\nclf.predict(iris.data[25])
import nltk\nsentence = \\"\\"\\"At eight o\\'clock on Thursday morning\nArthur didn\\'t feel very good.\\"\\"\\"\ntokens = nltk.word_tokenize(sentence)
idx = df.index[df.Dependents.isnull()]\nidx
try:\n    obj = objects.pop(the_key)\nexcept KeyError:\n    obj = create_new_object(the_key)
df = pd.read_csv(\\'documents\\', low_memory=False)\ndf[\\'column\\'].hist()
for each_key, each_val in conf.items(each_section):\n    pass
def split(x):\n    z = x.split(\\'_\\')\nz[1] = \\'_\\'.join(z[1:-1])\ndel z[2:-1]
cursor = connection.cursor()\nquery = (\n    \\"\\"\\"LOAD DATA INFILE \\'/path/to/my/file\\' INTO TABLE sometable FIELDS TERMINATED BY \\';\\' ENCLOSED BY \\'\\"\\' ESCAPED BY \\'\\\\\\'\\"\\"\\"\n    )
ser = serial.Serial(port, 9600)\nvalue = 0\nwhile 1:\n    value = ser.read()
qdate = QDateTime(2012, 12, 20, 11, 59, 59)\nqdate
import sys
B = 0.73, 0.97, 1.0, 0.97, 0.88, 0.73, 0.54
process = subprocess.Popen(command, stdin=subprocess.PIPE, stdout=\n    subprocess.PIPE, stderr=subprocess.PIPE, cwd=self.cwd,\n    universal_newlines=True, shell=True)\noutput = process.communicate()\nstdout = output[0]\nstderr = output[1]
class Normal(object):\n    pass\n\n\nclass MyObject(object, Normal):\n    pass
for element in soup.findAll(name=[\\'strong\\', \\'span\\', \\'em\\']):\n    pass
[\\'a\\', \\'b\\', 2006.0, 2005.0, 1995.0]\nprint([(int(col) if type(col) == float else col) for col in df.columns])\n[\\'a\\', \\'b\\', 2006, 2005, 1995]\ndf.columns = [(int(col) if type(col) == float else col) for col in df.columns]\n[\\'a\\', \\'b\\', 2006, 2005, 1995]
from itertools import groupby\nsentence = \\'evening, and there was morning--the first day.\\'\n[\\'\\'.join(j) for i, j in groupby(sentence, str.isalpha) if i]
min_bp = this_chr_snp[\\'BP\\'].min()\nmax_bp = this_chr_snp[\\'BP\\'].max()\nthis_genes = this_genes.loc[~(this_genes[\\'chr_start\\'] >= max_bp) & ~(\n    this_genes[\\'chr_stop\\'] <= min_bp)]\nfor line in this_genes.iterrows():\n    info = line[1]\nthis_snp = this_chr_snp.loc[(this_chr_snp[\\'BP\\'] >= info[\\'chr_start\\']) & (\n    this_chr_snp[\\'BP\\'] <= info[\\'chr_stop\\'])]\nif this_snp.shape[0] != 0:\n    this_snp = this_snp[[\\'SNP\\']]\nthis_snp.insert(1, \\'feature_id\\', info[\\'feature_id\\'])\nall_dfs.append(this_snp)\nall_genic_snps = pd.concat(all_dfs)
if self.im:\n    pass
tokens = nltk.word_tokenize(text)\ntokens = [token.lower() for token in tokens if len(token) > 1]\nbi_tokens = bigrams(tokens)
to_find = \\'MG\\'\nold_list = [\\'ADMISSION\\', \\'Colace\\', \\'100\\', \\'mg\\', \\'b.i.d.\\', \\'insulin\\',\n    \\'Lente\\', \\'12\\']\nnew_list = [item.lower() for item in old_list]
def execute(self, query, vars=None):\n    pass
os.environ[\\'APPLICATION_ID\\'] = \\'test\\'\ndatastore = datastore_mongo_stub.DatastoreMongoStub(os.environ[\n    \\'APPLICATION_ID\\'], \\'woot\\', \\'\\', require_indexes=False)
label_text_font_size, label_text_font_style, label_width\nlegend_padding, legend_spacing, legends, name, orientation\nplot, session or tags
def server():\n    p = Process(target=worker)\np.start()
s.send(\\'Hello World!\\')\ns.setsockopt(socket.SOL_IP, IP_MTU_DISCOVER, IP_PMTUDISC_DONT)\ns.send(\\'Hello World!\\')
yy = np.random.random(10)
abbreviation = models.CharField(max_length=4)\n\n\nclass Meta:\n    pass
string_1 = \\'(555).555-5555\\'\nstring_2 = \\'(555) 555 - 5555 ext. 5555\\'
return x is pi\ntest()
df2 = df[\\'column_A\\'].str.split(\\'/\\', expand=True).astype(int).assign(ones=\\'1\\'\n    ).assign(zeros=\\'0\\')
def get(self, name=None):\n    if name is None:\n        pass
1
cols = cols.strftime(\\'%Y-%m\\')\ncols
conv = c.convert(clip, \\'audio.mp3\\', {\\'format\\': \\'mp3\\', \\'audio\\': {\\'codec\\':\n    \\'mp3\\', \\'bitrate\\': \\'22050\\', \\'channels\\': 1}})
def tile_array(a, b1, b2):\n    r, c = a.shape\nrs, cs = a.strides\nx = as_strided(a, (r, b1, c, b2), (rs, 0, cs, 0))
while number >= bit:\n    if number & bit:\n        yield bit\nbit <<= 1
def read(self, filenames):\n    \\"\\"\\"Read and parse a filename or a list of filenames.\n    Files that cannot be opened are silently ignored; this is\n    designed so that you can specify a list of potential\n    configuration file locations (e.g. current directory, user\\'s\n    home directory, systemwide directory), and all existing\n    configuration files in the list will be read.  A single\n    filename may also be given.\n    Return list of successfully read files.\n    \\"\\"\\"\nif isinstance(filenames, str):\n    pass
from django.conf import settings\nTEMPLATE_DIR = os.path.join(os.path.dirname(__file__), \\'templates\\')\nsettings.configure(TEMPLATE_DIRS=(TEMPLATE_DIR, \\'\\'))
stripped.groupby(\\'ClientHostID\\').first().div(stripped.groupby(\n    \\'ClientHostID\\').last()).reset_index().rename(columns={\\'LoginDaysSum\\':\n    \\'ratio\\'})
decimal = Py_UNICODE_TODECIMAL(ch)
fixed_comments = []\nfor comment in findtoure:\n    fixed_text = str(comment).replace(\\'Gnegneri Toure Yaya\\', \\'Yaya Toure\\')
def date_handler(obj):\n    if hasattr(obj, \\'isoformat\\'):\n        return obj.isoformat()
+4,
import http.cookiejar\nbr = mechanize.Browser()
if len(compressed) < len(data) - 1:\n    data = compressed\nis_compressed = True\nbase64_encoded = base64.b64encode(data)\nif is_compressed:\n    base64_encoded = \\'.\\' + base64_encoded\nreturn base64_encoded\n\ndef unpack_utf8_safe(base64_encoded):\n    decompress = False\nif base64_encoded.startswith(\\'.\\'):\n    base64_encoded = base64_encoded[1:]\ndecompress = True\ndata = base64.b64decode(base64_encoded)\nif decompress:\n    data = zlib.decompress(data)\nreturn data
f1 = h5py.File(file_name, \\'r+\\')\ndata = f1[\\'meas/frame1/data\\']\ndata[...] = X1\nf1.close()\nf1 = h5py.File(file_name, \\'r\\')
printme = random.choice([\\'On {date}, {user} did la-dee-dah. \\',\n    \\'{User} did la-dee-dah on {date}. \\'])
if len(fields) != 5:\n    raise argparse.ArgumentTypeError(\\'String must have 5 fields\\')\nelif not 1 <= int(fields[2]) <= 10:\n    raise argparse.ArgumentTypeError(\n        \\'Field 3 must be between 1 and 10, inclusive\\')
import cgi\nimport cgitb\ncgitb.enable()\nimport MySQLdb
p = multiprocessing.Process(target=time.sleep, args=(1000,))
self.application.save()\n\ndef test_revoke_access_token(self):\n    pass
def dict_compare(da, db):\n    for k, v in da.items():\n        if isinstance(v, dict):\n            dict_compare(v, db[k])
return ht, htrot, htwin
for i in range(0, len(l), n):\n    pass
import html2text\nhtml = open(\\'foobar.html\\').read()
e.tuple\ne.property
print(key)
try:\n    asdf\nexcept NameError:\n    exc_type, exc_value, exc_traceback = sys.exc_info()
del lib
Z = scipy.zeros(2 * len(X))
def your_view_here(request, static_pages_id, True_or_False):\n    obj = get_object_or_404(Page, pk=static_pages_id)
import numpy as np\nimport scipy.linalg as sl\na = sl.hilbert(10)\nb = np.arange(10)\nsol1 = sl.solve(a, b)\nsol2 = sl.lstsq(a, b)[0]\nsol3 = sl.solve(np.dot(a.T, a), np.dot(a.T, b))
clusters = {}
input = 634
compress(count(), x)\nlist(_)
double = lambda x: x * 2\ndata = [[1, 2, 3], [4, 5, 6]]
def accumulate(x, l=[0]):\n    pass
x = 0.75
smallestCars = collections.OrderedDict(key_value_pairs)\nfor car in smallestCars:\n    pass
from django.utils import simplejson\nfrom django import template
counter = Counter.get_by_key_name(key_name)\nif not counter:\n    counter = Counter(key_name=key_name)\ncounter.count += 1\ndb.put(counter)
for kk in range(len(var3)):\n    myMatrix[ii][jj][kk] = var1[ii] * var2[jj] * var3[kk] * t
def thing(request, db):\n\n\n    class ThingFactory(object):\n        pass
transpositions(splits),\nreplacements1(splits),
m = magic.open(magic.MAGIC_MIME_ENCODING)
def myfunction(foo=\\'test\\'):\n    pass\n\n\nclass MyClass(object):\n    pass
def split_padded(a, n):\n    padding = -len(a) % n
from pybrain.datasets import SupervisedDataSet
btn = MyPushButton(\\'%s %s\\' % (\\'Button\\', i + 1), self)
def __init__(self, *args, **kwargs):\n    pass
a2 = list(a)\nb2 = set(b)
from enchant.checker import SpellChecker\nmy_dict = DictWithPWL(\\'en_US\\', \\'mywords.txt\\')\nmy_checker = SpellChecker(my_dict)\nmy_checker.set_text(\\'This is sme sample txt with erors.\\')\nfor error in my_checker:\n    pass
s = example.Session(27)\nexample.print_value_1(s)\nexample.print_value_2(s)
q.labels
import os, itertools\ntest = [\\'abc_1_2\\', \\'abc_2_2\\', \\'hij_1_1\\', \\'xyz_1_2\\', \\'xyz_2_2\\']
df = pd.DataFrame(np.random.randint(10, size=(10 ** 2, 3)), columns=list(\\'ABC\\')\n    )
df = pd.DataFrame(data)\ngrouped = df.groupby([\\'startDate\\', \\'endDate\\', \\'campaignCfid\\', \\'campaignName\\']\n    ).agg(sum)
print(c)
def __getattr__(Self, name):\n    return self
import operator
l_index = 0\nfor d in dict1:\n    d[\\'count\\'] = list1[l_index]
s = pickle.dumps(lambda x, y: x + y)\nf = pickle.loads(s)\nassert f(3, 4) == 7
c.showPage()\nc.setPageSize((700, 500))
self.libraries = [\\'dl\\']\nself.libraryDir = [self.javaHome + \\'/Home/lib\\']\nself.macros = [(\\'MACOSX\\', 1)]
def foo(self):\n    pass
@property\ndef kind(self):\n    pass
with Executor(max_workers=5) as ex:\n    pass
import cherrypy
if collide(t, u):\n    pass
from matplotlib import pyplot as plt
if col >= len(line):\n    return \\' \\'\nreturn line[col]
def ajax_login_required(view_func):\n    pass
list < -empty
account.refresh_balance()\naccount.save()
def shutdown_session(response_or_exc):\n    pass
while time < 100:\n    gold += level
TAG_EXP = \\'(^|[^0-9A-Z&/]+)(#|\uff03)([0-9A-Z_]*[A-Z_]+[%s]*)\\' % UTF_CHARS\nTAG_REGEX = re.compile(TAG_EXP, re.UNICODE | re.IGNORECASE)
combobox.addItem(\\'Combobox item\\')\ntable.setCellWidget(0, 0, combobox)\ntable.show()
from flask.ext.scss import Scss\nScss(app, static_dir=\\'static\\', asset_dir=\\'assets\\')
return f.denominator == 1
import selenic.util
sb = set(b)
my_project
9 | C1 | SER
my_hexdata = \\'1a\\'\nscale = 16
for k, v in d.items():\n    pass
folderPath = \\'/home/user/Downloads\\'\nfso = com.Dispatch(\\'Scripting.FileSystemObject\\')\nfolder = fso.GetFolder(folderPath)
import time
with tempfile.NamedTemporaryFile() as pdf_contents:\n    pdf_contents.file.write(pdf)\nfile_url = urlparse.urljoin(\\'file:\\', urllib.request.pathname2url(pdf_contents.name))\ndocument = Poppler.Document.new_from_file(file_url, None)
s\n(s.map(type) != str).any()\ns[s.map(type).ne(str)]
vls = \\'a\\', \\'b\\', \\'c\\'\npicks = [v for v, d in zip(vls, dst) for _ in range(d)]\nfor _ in range(12):\n    print(random.choice(picks), end=\\' \\')\nfor _ in range(12):\n    print(random.choice(picks), end=\\' \\')\nfor _ in range(12):\n    pass
x = \\'Buffalo\\'\ndictOfStuff[x] = 4
n = 0\nfor a, b in zip(ra, dec):\n    pass
import BeautifulSoup\nsoup = BeautifulSoup.BeautifulSoup(html)\nprint(soup.findAll(\\'tr\\'))
book = xlrd.open_workbook(\\'test.xls\\')\nsheet = book.sheet_by_index(0)\na1 = sheet.cell_value(rowx=0, colx=0)\nprint(a1)\nprint(xlrd.xldate_as_tuple(a1, 1))
from PySide.QtCore import *
class BadFooTests(TestCase):\n    Foo.objects.all().delete()\n\ndef __init__(self):\n    f = Foo.objects.create()
parser = etree.XMLParser(dtd_validation=True, load_dtd=True)\nparser.resolvers.add(DTDResolver())\ntry:\n    tree = etree.parse(xmldoc, parser)\nexcept etree.XMLSyntaxError as e:\n    pass
for dateatt in datediv:\n    pass
def distance(a, b):\n    return sum((xa - xb) ** 2 for xa, xb in zip(a, b))\n\ndef clusters(sources, demands):\n    pass
-(2)[\\'this is\\', \\'is another\\', \\'another foo\\', \\'foo bar\\', \\'bar sentence\\',\n    \\'sentence not\\', \\'not in\\', \\'in the\\', \\'the training\\', \\'training corpus\\',\n    \\'corpus .\\']
original_set_item = HttpResponse.__setitem__
if self.debuglevel > 0:\n    pass
m = re.search(\\'^(?!.*({})).*{}\\'.format(x, month), \\'Date: Dec 2016\\')\nif m:\n    pass
schema = reader.datum_reader.writers_schema\nprint(schema)
with b as y:\n    pass
def second():\n    import collections\nx = collections.defaultdict(list)\n\ndef secondwithout():\n    x = collections.defaultdict(list)\nprint(\\'first with import\\', timeit.timeit(\\'first()\\',\n    \\'from __main__ import first\\'))\nprint(\\'second with import\\', timeit.timeit(\\'second()\\',\n    \\'from __main__ import second\\'))\nprint(\\'first without import\\', timeit.timeit(\\'firstwithout()\\',\n    \\'from __main__ import firstwithout\\'))\nprint(\\'second without import\\', timeit.timeit(\\'secondwithout()\\',\n    \\'from __main__ import secondwithout\\'))
idx1 = row1.indices\ndata1 = row1.data\nidx2 = row2.indices\ndata2 = row2.data\nsum2 = data1[np.in1d(idx1, idx2)].dot(data2[np.in1d(idx2, idx1)])
import re
from pylab import *\nrcParams[\\'legend.numpoints\\'] = 1
ax.xaxis.set(ticks=np.arange(offset / 2.0, tick_limit, offset), ticklabels=\n    myticklabels)\nax.grid(False)
import os\nimport binascii\nprint(binascii.hexlify(os.urandom(16)))\n\\"\\"\\"4a4d443679ed46f7514ad6dbe3733c3d\\"\\"\\"
print(a_string)
import os\nimport pkg_resources
new_key = db.Key.from_path(\\'MyModel\\', new_id_num)\nnew_instance = MyModel(key=new_key)
def read_as_flat(someFile):\n    pass
len = sqrt(len)
class LineNumberingParser(ET.XMLParser):\n\n    def _start_list(self, *args, **kwargs):\n        element = super(self.__class__, self)._start_list(*args, **kwargs)\nelement._start_line_number = self.parser.CurrentLineNumber\nelement._start_column_number = self.parser.CurrentColumnNumber\nelement._start_byte_index = self.parser.CurrentByteIndex\nreturn element\n\ndef _end(self, *args, **kwargs):\n    element = super(self.__class__, self)._end(*args, **kwargs)\nelement._end_line_number = self.parser.CurrentLineNumber\nelement._end_column_number = self.parser.CurrentColumnNumber\nelement._end_byte_index = self.parser.CurrentByteIndex\nreturn element\ntree = ET.parse(filename, parser=LineNumberingParser())
if path not in sys.path:\n    sys.path.append(path)\nfrom wsgihandler import application
if not form.is_valid():\n    raise Exception
@property\ndef my_attribute():\n    if not hasattr(self, \\'_my_attribute\\'):\n        pass
def save(theClass, argument):\n    aa = theClass()\naa.save(argument)
class Meta:\n    model = Picture\nfields = \\'field\\', \\'image\\', \\'image_url\\'
import numpy as np
docs = [doc1, doc2, doc3]
def diff_if_bigger(x, y):\n    pass
import datetime\ndatestring = \\'1277722499.82\\'
class Car(models.Model):\n    somefields\n\n\nclass Wheel(models.Model):\n    pass
__import__(module_name)
full_stack = true
cur = con.cursor()\nfor data in your_data_list:\n    cur.execute(\\'data you want to insert: %s\\' % data)
def custom_activate(request, backend, template_name=\n    \\'registration/activate.html\\', success_url=None, extra_context=None, **\n    kwargs):\n    success_url = request.GET.get(\\'next\\', None)
loop = asyncio.get_event_loop()\nloop.run_until_complete(aio_readline(loop))
def calc_kernel(samp):\n    return kernel(samp)\ncores = 4\ntorun = np.array_split(sample, cores, axis=1)\npool = Pool(processes=cores)\nresults = pool.map(calc_kernel, torun)\ninsample_mp = np.concatenate(results) < iso\nprint(\\'multiprocessing filter/sample: \\', time.time() - tik)
new_type = type(res_type.__name__, (res_type,), wrapper_dict)
tree.body[0].names[0].name\ntree.body[1].module
intersect = set(new.keys()).intersection(set(old.keys()))\ndiff = {id: dict(set(new[id].items()) - set(old[id].items())) for id in\n    intersect}\ndiff.update({id: new[id] for id in created})\nlist_diff = [dict(data, **{\\'id\\': id}) for id, data in list(diff.items())]
import pytz\nif __name__ == \\'__main__\\':\n    date_one = datetime.now(pytz.timezone(\\'US/Eastern\\'))
im = np.zeros((32, 32))\nim[8:-8, 8:-8] = 1
from datetime import datetime, timedelta\nlastHourDateTime = datetime.today() - timedelta(hours=1)
from redisworks import Root\nroot = Root()\nroot.foo = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(root.foo)
import os\nimport glob\nos.chdir(\\'c:/mydir\\')
D = dendrogram(Z=Z, labels=DF_dism.index, color_threshold=0.7,\n    leaf_font_size=12, leaf_rotation=45, above_threshold_color=\\'grey\\')
image_absolute_url = urlparse.urljoin(response.url, image_relative_url.strip())\nitem[\\'image_urls\\'] = [image_absolute_url]
shared_var = \\'Set in sub-console\\'\nsys.exit()\nshared_var
import numpy as np\na = list(range(100))
cond = np.array([[False, True, True], [True, False, True]])\n\ndef multi_slice_max(bool_arr, x):\n    return np.ma.array(x, mask=~bool_arr).argmax()
def mark2html(eval_ctx, value):\n    result = value.replace(\\'[s]\\', \\'<strong>\\')\nresult = result.replace(\\'[/s]\\', \\'</strong>\\')\nif eval_ctx.autoescape:\n    pass
\\"\\"\\"\n\\"\\"\\"
import decimal\nbabel.numbers.format_currency(decimal.Decimal(\\'188518982.18\\'), \\'GBP\\')
trecias_m = df_data[60:90].reset_index(drop=True)\nketvirtas_m = df_data[90:120].reset_index(drop=True)\nopa = pd.concat([pirmas_m, antras_m, trecias_m, ketvirtas_m], axis=1)
test = pytest
if not os.path.isfile(lib):\n    pass
def upgrade():\n    pass
try:\n    connection.isolation_level\nexcept OperationalError as oe:\n    conn = psycopg2.connect(dsn)\nc = conn.cursor()\nc.execute(\\'SELECT 1\\')
b
x = [[1, 2, 3], {(1): 2}]\ns = yaml.dump(x)
for x in user_list:\n    db, host, user, password = x
import matplotlib.pyplot as plt\nBlues = plt.get_cmap(\\'Blues\\')\nprint(Blues(0))\nprint(Blues(0.5))\nprint(Blues(1.0))
file_handler = logging.FileHandler(filename=\\'/var/www/myapp/flaskerror.log\\')\nfile_handler.setLevel(logging.WARNING)
def roundrobin(*iterables):\n    pass
r1 = Range(start=datetime(2012, 1, 15), end=datetime(2012, 5, 10))\nr2 = Range(start=datetime(2012, 3, 20), end=datetime(2012, 9, 15))\nlatest_start = max(r1.start, r2.start)
for var in range(1, 101):\n    if IsPrime(var) == \\'true\\':\n        primes.append(var)\nnum = IsPrime(var)
lower_limit = scoreatpercentile(arr, percent / 2)
def runSikuliScript(path):\n    filepath = path
f = ftplib.FTP()\nf.connect(\\'localhost\\')\nf.login()
theSum = df1.A + df1.B\ntheAverage = (df1.A + df1.B + df2.C + df3.D) / 4.0
reader.Update()\nmy_vtk_array = reader.GetOutput().GetPointData().GetArray(\\'my_scalar_name\\')\nnodes_nummpy_array = vtk_to_numpy(nodes_vtk_array)
pc_dud_.remove(d2)\nprint(d1, d2)
return other
p = \\"\\"\\"\n    (?<TAG> \\b(?:NOTE|LEGACY|HACK|TODO|FIXME|XXX|BUG) ){0}\n    (?<DATE> \\d{4}-\\d{2}-\\d{2} ){0}\n    (?<FLAGS> [pts]:\\w+ ){0}\n    (?<tag> (?&TAG) ) : \\s*\n    (?<message> (?>[^\\s<]+[^\\n\\S]+)* [^\\s<]+ )? \\s* \n    <\n    (?<author> (?: \\w{3} \\s* , \\s* )*+ \\w{3} )? \\s*\n    (?<date> (?&DATE) )?\n    (?<flags> (?&FLAGS) )?\n    >\n    $\n\\"\\"\\"\nrgx = regex.compile(p, regex.VERBOSE | regex.MULTILINE)
def helper(parts):\n    if len(parts) == 1:\n        pass
try:\n    buffer = os.read(io, BUFFER_SIZE)\nexcept OSError as err:\n    if err.errno == errno.EAGAIN or err.errno == errno.EWOULDBLOCK:\n        buffer = None\nelse:\n    raise
from sklearn.datasets import load_boston
s = \\"\\"\\"\n\\"I can quite understand your thinking so.\\" I said. \\"Of course, in your position of unofficial adviser and helper to everybody who is absolutely puzzled, throughout three continents, you are brought in contact with all that is strange and bizarre. But here\\"\n\\"Of course, in your position of unofficial adviser and helper to everybody who is absolutely puzzled, throughout three continents, you are brought in contact with all that is strange and bizarre. But here\\"--I picked up the morning paper from the ground--\\"let us put it to a practical test. Here is the first heading upon which I come. \\'A husband\\'s cruelty to his wife.\\' There is half a column of print, but I know without reading it that it is all perfectly familiar to me. There is, of course, the other woman, the drink, the push, the blow, the bruise, the sympathetic sister or landlady. The crudest of writers could invent nothing more crude.\\\"\n\\"\\"\\"
import pandas as pd\nx = np.array([\\'1\\', \\'2\\', \\'a\\'])
bytes = [112, 52, 52]\n\\"\\"\\"\\"\\"\\".join(map(chr, bytes))
previous = element ^ previous ^ key
class MyHandler(object):\n\n    def start(self, tag, attrib):\n        print(tag + \\' started\\')\n\ndef end(self, tag):\n    print(tag + \\' ended\\')\n\ndef data(self, data):\n    print(data + \\' data read\\')\n\ndef close(self):\n    print(\\'All data read\\')\nhandler = MyHandler()
video = driver.find_element_by_tag_name(\\'video\\')\nprint(video.get_attribute(\\'src\\'))\ndriver.close()
d.pop(1, None)\nd\nd.pop(3, None)
def wrapper(s):\n    while True:\n        pass
352.0\n288.0
import socket
def get(self):\n    client = httpclient.AsyncHTTPClient()\nself.write(\\'some opening\\')\nself.flush()\nrequests = [httpclient.HTTPRequest(url=\\'http://httpbin.org/delay/\\' + str(\n    delay), streaming_callback=self.on_chunk) for delay in [5, 4, 3, 2, 1]]\nyield list(map(client.fetch, requests))\nself.write(\\'some closing\\')\nself.finish()\n\ndef on_chunk(self, chunk):\n    self.write(\\'some chunk\\')\nself.flush()
def myFunc(data_list):\n    for val in data_list:\n        b, c = data.split(\\',\\')
most_freq(\\'2015-05\\', \\'2015-05\\')\n\\"\\"\\"OTHER_OFFENSES\\"\\"\\"
def start_requests(self):\n    pass
okays_append = okays.append
-build - essential\n-gfortran
node = pop(stack)
lib_a
return array_\na = np.array([[\\'asdf\\', \\'asdf\\'], [\\'asdf\\'], np.nan, [\\'asdf\\', \\'asdf\\', \\'asdf\\'],\n    np.nan, [\\'asdf\\', \\'asdf\\', \\'asdf\\']], dtype=object)\na = to_none(a)
def generate_data():\n    pass
import json
ratio = lambda x: x.value_counts(normalize=True)\noutput_lambda = df.apply(lambda x: [x.value_counts().to_dict()]).apply(lambda\n    x: x[0]).to_dict()
PortDpidPair = collections.namedtuple(\\'PortDpidPair\\', [\\'port\\', \\'dpid\\'])\nglobal_learning_table = collections.defaultdict(collections.namedtuple(\n    \\'PortDpidPair\\', [\\'port\\', \\'dpid\\']))
from collections import defaultdict
def load_ajax():\n    pass
import sys\nimport json
\\'-s\\', \\'mapred.skip.map.max.skip.records=1\\'\n\\'-s\\', \\'mapred.skip.attempts.to.start.skipping=2\\'\n\\'-s\\', \\'mapred.map.max.attempts=5\\'
def printc(*largs, **kwargs):\n    pass
for port in list(serial.tools.list_ports.comports()):\n    pass
for i in range(5):\n    d[i] = str(i)\nk = deepcopy(d)\nd[2] = \\'22\\'
import pyudt\nsocket = pyudt.pyudt_socket()
data = pd.read_fwf(\\'myfile.log\\', header=None, names=[\\'time\\', \\'amount\\'],\n    widths=[27, 5])
class MyPipeline2(object):\n\n    def process_item(self, item, spider):\n        pass
series = pandas.Series(np.random.normal(size=2000))\nfig, ax = plt.subplots()\nseries.hist(ax=ax, bins=100, bottom=0.1)
my_bigdict = BigDictLookup()
print(os.read(fd, 14), end=\\' \\')\nprint(os.read(fd, 22))
for idx in range(10):\n    pass
rowCount = int(query.count())\nrandomRow = query.offset(int(rowCount * random.random())).first()
def stringify_children(node):\n    from lxml.etree import tostring
class DataFrame(NDFrame):\n    \\"\\"\\" Two-dimensional size-mutable, potentially heterogeneous tabular data\n    structure with labeled axes (rows and columns). Arithmetic operations\n    align on both row and column labels. Can be thought of as a dict-like\n    container for Series objects. The primary pandas data structure\n    Parameters\n    ----------\n    data : numpy ndarray (structured or homogeneous), dict, or DataFrame\n        Dict can contain Series, arrays, constants, or list-like objects\n    index : Index or array-like\n        Index to use for resulting frame. Will default to np.arange(n) if\n        no indexing information part of input data and no index provided\n    columns : Index or array-like\n        Column labels to use for resulting frame. Will default to\n        np.arange(n) if no column labels are provided\n    dtype : dtype, default None\n        Data type to force, otherwise infer\n    copy : boolean, default False\n        Copy data from inputs. Only affects DataFrame / 2d ndarray input\n    Examples\n    --------\n    >>> d = {\\'col1\\': ts1, \\'col2\\': ts2}\n    >>> df = DataFrame(data=d, index=index)\n    >>> df2 = DataFrame(np.random.randn(10, 5))\n    >>> df3 = DataFrame(np.random.randn(10, 5),\n    ...                 columns=[\\'a\\', \\'b\\', \\'c\\', \\'d\\', \\'e\\'])\n    See also\n    --------\n    DataFrame.from_records : constructor from tuples, also record arrays\n    DataFrame.from_dict : from dicts of Series, arrays, or dicts\n    DataFrame.from_items : from sequence of (key, value) pairs\n    pandas.read_csv, pandas.read_table, pandas.read_clipboard\n    \\"\\"\\"\n\n@property\ndef _constructor(self):\n    return DataFrame\n_constructor_sliced = Series\n\n@property\ndef _constructor_expanddim(self):\n    pass
def pca(X, gamma1):\n    kernvals = RBFSampler(gamma=gamma1, random_state=0).fit_transform(X)\nkpca = PCA().fit_transform(X)\nX_kpca = kpca.fit_transform(X)
cmd = \\'git shortlog -s -n\\'\nos.chdir(\\'C:\\Users\\DhruvOhri\\Documents\\COMP 6411\\pygithub3-0.3\\')\nos.system(\\'git clone https://github.com/poise/python.git\\')\nos.chdir(\\'/home/d/d_ohri/Desktop/python\\')\noutput = commands.getoutput(cmd)\nprint(output)\ninput(\\'press enter to continue\\')
df2 = pd.DataFrame(np.random.randn(8, 3), index=pd.date_range(\\'01/01/2014\\',\n    periods=8, freq=\\'D\\'), columns=[\\'a\\', \\'b\\', \\'c\\'])\nIndex = list(set(list(df1.index) + list(df2.index)))\nIndex.sort()
needle = \\'aa\\'
for item in lst:\n    pass
stuff = [makeFunc(n) for n in [1, 2, 3]]\nfor f in stuff:\n    pass
if row.get_decoded().get(\\'_username\\') == request.user.username:\n    pass
engine = sa.create_engine(\\'postgresql://...\\')\nresult = engine.execute(\n    \\"select word from wordtable where levenshtein(word, \\'similar\\') < 3;\\")\nrows = result.fetchall()\nwordtable = data(rows)\nwordtable[wordtable.word.like(\\'a*\\')]
class foo3:\n    pass\nsys.getsizeof(foo1)
url = \\'http://www.python.org\\'\nwebbrowser.open_new_tab(url + \\'/doc\\')\nwebbrowser.open_new(url)
user = models.ForeignKey(UserProxy)
x, y, z = arr.shape\nxyz = np.ogrid[0:x, 0:y] + [c]
try:\n    nextmonthdate = x.replace(month=x.month + 1)\nexcept ValueError:\n    if x.month == 12:\n        pass
import org.openqa.selenium.firefox.FirefoxBinary
def parse_data(data):\n    result = []
ll = line.split()
from Cython.Distutils import build_ext
cooling_rate = 0.95\nnum_iters = 10000\nfor ii in range(num_iters):\n    proposed_subset = current_subset.copy()\nproposed_outsiders = current_outsiders.copy()\nindex_to_swap = np.random.randint(k)\noutsider_to_swap = np.random.randint(N - k)\ntmp = current_subset[index_to_swap]\nproposed_subset[index_to_swap] = current_outsiders[outsider_to_swap]\nproposed_outsiders[outsider_to_swap] = tmp\npotential_change = np.exp(-1.0 / temp * calculate_distance(proposed_subset,\n    all_dists) / calculate_distance(current_subset, all_dists))\nif potential_change > 1 or potential_change >= np.random.rand():\n    current_subset = proposed_subset\ncurrent_outsiders = proposed_outsiders\ntemp = cooling_rate * temp
class Entity(object):\n\n    def __init__(self, id, db_connection, data=None):\n        self.id = id\nself.db_connection = db_connection
csvwriter = csv.writer(csvfile)
gunicorn == 18.0\nitsdangerous == 0.23
x = Symbol(\\'x\\', real=True)\nf = -2 * x ** 2 + 4 * x\nfprime = f.diff(x)\nfprime\nsolve(fprime, x)
class Pop3Access(BaseAccess):\n\n    def open(arg):\n        pass
D, M, N, R = 1, 2, 3, 4\nA = np.random.rand(M, N, R)\nB = np.random.rand(N, D, R)
lst = [np.inf, -np.inf]\nto_replace = dict((v, lst) for v in [\\'col1\\', \\'col2\\'])\ndf.replace(to_replace, np.nan)
class LinkedKeyProperty(ndb.KeyProperty):\n\n    def _fix_up(self, cls, code_name):\n        super(LinkedKeyProperty, self)._fix_up(cls, code_name)\nmodelclass = ndb.Model._kind_map[self._kind]
grantpt(pt)
import mpld3\nmpld3.enable_notebook()
data\ndata.splitlines()
\\"\\"\\"\nContext manager that replaces gzip.GzipFile._read_eof with a no-op.\nThis is useful when decompressing partial files, something that won\\'t\nwork if GzipFile does it\\'s checksum comparison.\n\\"\\"\\"
import copy\n\n\nclass Crazy(object):\n\n    def __init__(self, body, weird=copy.copy):\n        self.gomez = body\nself.cousinitt = weird\n\ndef __mul__(self, n):\n    return [self.cousinitt(x) for x in self.gomez * n]\na = Crazy([[]]) * 3
import weakref\n\n\nclass A(object):\n    pass
if allow_no_value:\n    self._optcre = self.OPTCRE_NV\nelse:\n    self._optcre = self.OPTCRE
t = np.log2(nfc / (c * (1 - f)))
import numpy as np\nx = np.array([521, 3, 1, 2, 1, 1, 5])
import csv\nfrom pandas import read_csv
from mom.codec import base85
length = arr_view.shape[0]\nfor i in prange(length):\n    if arr_view[i] >= thresh:\n        total += 1\nreturn total
self.ax = Axes3D(self.fig)\n\ndef draw_fig(self):\n    pass
folderPath = \\'/home/user/Downloads\\'\nfso = com.Dispatch(\\'Scripting.FileSystemObject\\')
for row in tableData:\n    pass
if len(l) == 0:\n    return False
for _, c in df.items():\n    fi, li = c.first_valid_index(), c.last_valid_index()
def main():\n    handlers = [(\\'/\\', HomeHandler)]\nsettings = dict(blog_title=\\'Tornado Blog\\', template_path=os.path.join(os.\n    path.dirname(__file__), \\'templates\\'), static_path=os.path.join(os.path.\n    dirname(__file__), \\'static\\'), cookie_secret=\n    \\'__TODO:_GENERATE_YOUR_OWN_RANDOM_VALUE_HERE__\\', debug=True, certfile=\n    os.path.join(\\'certs/server.crt\\'), keyfile=os.path.join(\n    \\'certs/server.key\\'), ssl_options={\\'certfile\\': os.path.join(\n    \\'certs/server.crt\\'), \\'keyfile\\': os.path.join(\\'certs/server.key\\')})\ntornado.options.parse_command_line()\nhttp_server = tornado.httpserver.HTTPServer(Application())\nhttp_server.listen(options.port)\ntornado.ioloop.IOLoop.instance().start()
class Dummy:\n\n    def __init__(self, block=None):\n        self._block = block or new_xy8_block()\nds = [Dummy() for _ in range(5)]\nds[0]._block[0][\\'pulse\\'][\\'test\\'] = 0\nfor d in ds:\n    pass
class C(object, A):\n    pass
import re\ns = \\'k0+k1+k1k2+k2k3+1+12\\'
serving = \\'A\\'
z = [0, 0, 0]\ndx = [0.5, 0.5, 0.5]\ndy = [0.5, 0.5, 0.5]
b\nc = np.dstack((b, b, b))
if memcache.get(\\'static-version\\') == os.environ[\\'CURRENT_VERSION_ID\\']:\n    pass\nelse:\n    pass
import os\nos.system(\\'convert output.ps output.png\\')
def inmap(f, x):\n    for i, v in enumerate(x):\n        x[i] = f(v)\na = list(range(10))
pos = 0
a = array([[1, 2, 3], [0, 3, NaN]])\nwhere_are_NaNs = isnan(a)
import bz2\n\ndef comptest(s):\n    print(\\'original length:\\', len(s))\nprint(\\'zlib compressed length:\\', len(zlib.compress(s)))\nprint(\\'bz2 compressed length:\\', len(bz2.compress(s)))
@validates(\\'field_one\\', \\'field_two\\')\ndef validates_fields(self, key, value):\n    pass
def ins_sort(k):\n    pass
list.append(number)\nif foundit == false:\n    s.append([number])
if not supported_platform or not is_a_tty:\n    return False
trgtext = trgtext.split()\nsrclen = len(srctext)
pd.__version__\ndf = pd.DataFrame({\\'age\\': [1, 8]})\ndf
import datetime
from functools import reduce\ndef compose(*fs):\n    return reduce(comp, fs, id)\nprint(compose(lambda x: x + 1, lambda x: x * 3, lambda x: x - 1)(10))
for e in myList[::10]:\n    pass
class Meta(type):\n\n    def __new__(cls, clsname, bases, dct):\n        bases = tuple(dct.pop(\\'bases\\'))\nreturn type.__new__(cls, clsname, bases, dct)\n\n\nclass bigclass:\n    pass
sum1 = row1.sum()\nidx1 = row1.indices
import pytumblr\nclient = pytumblr.TumblrRestClient(\\'<consumer_key>\\', \\'<consumer_secret>\\',\n    \\'<oauth_token>\\', \\'<oauth_secret>\\')
setup(name=\\'simple_PyQt4\\', version=\\'0.1\\', description=\n    \\'Sample cx_Freeze PyQt4 script\\', executables=[Executable(\\'PyQt4app.py\\',\n    base=base)])
import sys\nfrom os.path import splitext
import seaborn as sns\nx = np.arange(0, 10, 0.01)
x, y, z = tuple(request.args)\np = request.vars[\\'p\\']
def func1():\n    pass\n\ndef func2():\n    pass\n\ndef func3():\n    pass
from functools import partial\nfrom toolz.curried import pipe
for line in lines:\n    line = line.strip()\nif line == \\'\\' or line.startswith(\\'#\\') or docstring and not (line.startswith\n    (\\'\\"\\"\\"\\') or line.startswith(\\"\\'\\'\\'\\")) or line.startswith(\\"\\'\\'\\'\\"\n    ) and line.endswith(\\"\\'\\'\\'\\") and len(line) > 3 or line.startswith(\\'\\"\\"\\"\\'\n    ) and line.endswith(\\'\\"\\"\\"\\') and len(line) > 3:\n    continue\nelif line.startswith(\\'\\"\\"\\"\\') or line.startswith(\\"\\'\\'\\'\\"):\n    pass
x = y = 30\nw = h = 100\nmask = np.zeros(img.shape[:2], np.uint8)\nmask[y:y + h, x:x + w] = 255
child.expect(\\'Enter password:\\')\nchild.sendline(\\'password\\')\nchild.expect(pexpect.EOF, timeout=None)\ncmd_show_data = child.before
st = prior[st]
return count > 0\nprint(is_runnning(\\'iTunes\\'))
self.simulRunner.moveToThread(self.simulThread)\nself.simulRunner.stepIncreased.connect(self.currentStep.setValue)\nself.stopButton.clicked.connect(self.simulRunner.stop)
op.execute(\n    \\'ALTER TABLE similar_orders ADD COLUMN id INTEGER UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT\\'\n    )\n\ndef downgrade():\n    op.drop_column(\\'similar_orders\\', \\'id\\')
def reduceMod3(l):\n    pass
import urllib.parse
import winsound
if match:\n    cur = match.group(\\'filename\\')\nsys.stdout.write(line)
label.set_line_wrap(True)\nlabel.set_size_request(250, -1)
bgs = nltk.bigrams(tokens)\nfdist = nltk.FreqDist(bgs)
COUNT = 0\n\ndef increment():\n    global COUNT
if not is_in_mm():\n    with cd(env.var_dir):\n        run(\\'mv maintenance-mode-off maintenance-mode-on\\')
import sys
@pytest.fixture\ndef thing(request, db):\n\n\n    class ThingFactory(object):\n\n        def get(self):\n            thing = MyModel.objects.create()
cls.web = WebDriver(PHANTOMJS)
def write(self, x):\n    pass
y = [0, 3, 10]\nX_sim = csr_matrix([[1, 1, 1, 1, 1, 1, 0]])\nlsh = LSH(4, X.shape[1], num_hashtables=1, storage_config={\\'dict\\': None})
for char in uppercase:\n    pass
import time\nimport datetime
for x in listNameAge:\n    for y in listName:\n        pass
MARKER_LOWER_BOUND = 0, 0, 0
root = Tk()\nroot.withdraw()\ntop = Toplevel(root)
slow.addTests(TestSlowAnother)
from itertools import chain\nwords = frozenset(chain(wordList[:1], wordList[2:]))\nb = word in words
writer = csv.writer(open(\\'output.csv\\', \\'wb\\'))\nfor name, membership in zip(graph.vs[\\'name\\'], membership):\n    pass
zeroArray = [0] * Np\nzeroMatrix = [None] * Np
try:\n    nextmonthdate = x.replace(month=x.month + 1)\nexcept ValueError:\n    if x.month == 12:\n        nextmonthdate = x.replace(year=x.year + 1, month=1)
for x in range(21):\n    pass
print(fp.read())\nfp.close()\ngpg = subprocess.Popen([\\'gpg\\', \\'--version\\'], stdout=subprocess.PIPE)\nread_as_utf8(gpg.stdout.fileno())\nnormal_file = open(\\'loremipsum.txt\\', \\'rb\\')\nread_as_utf8(normal_file.fileno())\npipe_r, pipe_w = os.pipe()\nos.write(pipe_w, \\'Lorem ipsum.\\'.encode(\\'utf-8\\'))\nos.close(pipe_w)\nread_as_utf8(pipe_r)\nos.close(pipe_r)
print(\\'Content-type: %s\n\\' % content_type(r))\nprint(file(dir + r, \\'rb\\').read())
response = urllib.request.urlopen(certificate_url)\ncerts = response.read()\ncerts = json.loads(certs)\nuser = jwt.decode(idtoken, certs, algorithms=\\'RS256\\', audience=target_audience)\nprint(user)
InitializeComponent()
@withmany\ndef process_foo(foo):\n    return foo + 1
data = (\n    \\'part 1;\\"this is ; part 2;\\";\\\'this is ; part 3\\\';part 4;this \\"is ; part\\" 5\\'\n    )\nPATTERN = re.compile(\\'((?:[^;\\"\\\']|\\"[^\\"]*\\"|\\\'[^\\\']*\\\')+)\\')
def tri_flat(array):\n    R = array.shape[0]
double = partial(mul, 2)
elem.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT)
exercise = EuropeanExercise(Date(3, August, 2011))\npayoff = PlainVanillaPayoff(Option.Call, 100.0)
cache = apt.Cache()\nif cache[\\'package-name\\'].is_installed:\n    print(\\"YES it\\'s installed\\")\nelse:\n    pass
if step is None:\n    pass
rec.levelno\nrec.levelname
import numpy as np\ndf = pd.DataFrame([\\'ONE\\', \\'Two\\', np.nan], columns=[\\'x\\'])
v = myVector()\nv = myVector(4, 2)\nv = myVector(4)
while True:\n    result = regex.search(seq, pos)\nif result is None:\n    break\nresultlist.append(seq[result.start():result.end()])\npos = result.start() + 1\nreturn resultlist
class Entity(object):\n\n    def __init__(self, id, db_connection, data=None):\n        self.id = id\nself.db_connection = db_connection\nif data is None:\n    pass
input_iters = map(sortkey, map(csv.csvreader, FILE_LIST))
stacked = df.set_index(\\'topic\\').stack()\ndf = stacked.reset_index(name=\\'key\\')
clr.AddReference(\\'MyAssembly\\')\nfrom MyAssembly import MyClass\nMyClass.does_something()
from my_flask_project import db, create_app
sprite.rotation = math.degrees(-sprite.body.angle) + 180
response = rpc_server.Send(\\'/api/versions/list\\', app_id=\\'khan-academy\\')\nparsed_response = yaml.safe_load(response)\nif not parsed_response:\n    return None\nelse:\n    return parsed_response
if not pattern.endswith(\\'/\\'):\n    config.add_route(name + \\'_auto\\', pattern + \\'/\\')\n\ndef redirector(request):\n    return HTTPMovedPermanently(request.route_url(name, _query=request.GET,\n        **request.matchdict))\nconfig.add_view(redirector, route_name=name + \\'_auto\\')
within_10 = df[(0.9 <= df[\\'NewCol\\'] / df[\\'OldCol\\']) & (df[\\'NewCol\\'] / df[\n    \\'OldCol\\'] <= 1.1)]\nwithin_10[\\'NewCol\\'] = within_10[\\'OldCol\\']
import cv2\nimport numpy as np\nwriter = cv2.VideoWriter(\\'test1.avi\\', cv2.VideoWriter_fourcc(*\\'PIM1\\'), 25,\n    (640, 480), False)\nfor i in range(100):\n    x = np.random.randint(255, size=(480, 640)).astype(\\'uint8\\')\nwriter.write(x)
logging.warn(\\'cannot decode url %s\\' % [string])\nfor item in os.listdir(rootPath):\n    if isinstance(item, str):\n        item = force_decode(item)
pe = Ether() / IP(dst=\\'10.13.37.218\\') / ICMP()\nsendp(pe, loop=True)\npi = IP(dst=\\'10.13.37.218\\') / ICMP()\nsend(pi, loop=True)
for branch in match:\n    pass
for treatment in treament_list:\n    label = ttk.Label(frames[treatment[1] - 1], text=treatment[0])\nlabel.bind(\\'<Enter>\\', lambda event, t=treatment: update_bottom_scroll_bar(\n    text=t))\nlabel.bind(\\'<Leave>\\', lambda event: update_bottom_scroll_bar(text=\n    \\'Default label text\\'))\nlabels.append(label)
import numpy as np\narr = np.arange(10)
if follow_symlinks:\n    pass
start = np.searchsorted(a, 6, \\'left\\')\nend = np.searchsorted(a, 10, \\'right\\')\nrng = np.arange(start, end)\nrng
import numpy as np\nS = set([0, 2, 6, 8])
m1 = m.tocsr()\nm1[1, 2]\nm1
def convert(text):\n    return int(text) if text.isdigit() else text\n\ndef natural(item):\n    return map(convert, re.split(\\'([0-9]+)\\', item))\nreturn sorted(iterable, key=natural, reverse=reverse)
cols = df.columns\nfor i in cols:\n    for j in cols.drop(i):\n        print((\\'percent of\\', j, \\'not null if\\', i, \\'is not null:\\', (df[i].\n            notnull() & df[j].notnull()).sum() / df[i].notnull().sum()))
import csv\nf = gzip.open(filename, mode=\\'rt\\')
cluster_foo.add_node(node_foo)\ncluster_bar = pydot.Cluster(\\'bar\\', label=\\'Component1\\')\ncallgraph.add_subgraph(cluster_bar)\nnode_bar = pydot.Node(\\'bar_method_a\\')\ncluster_bar.add_node(node_bar)\ncallgraph.add_edge(pydot.Edge(node_foo, node_bar, ltail=cluster_foo.\n    get_name(), lhead=cluster_bar.get_name()))
from audiolab import Sndfile\nsound_file = Sndfile(\\'test.w64\\', \\'r\\')\nsignal = wave_file.read_frames(wave_file.nframes)
import math\nmath.degrees(math.atan(1))
f = file(\\'/file.txt\\', \\'r\\')\ndata = f.read()
good_emails = []\nfor email in email_list:\n    if email_re.match(email):\n        good_emails.append(email)
p1 = sy.plot(x ** 2, (x, -1, 1), show=False, line_color=\\'b\\')\np2 = sy.plot(x ** 3, (x, -1, 1), show=False, line_color=\\'r\\')
df3 = pd.pivot_table(df, values=[\\'D\\', \\'E\\'], rows=[\\'B\\'], aggfunc=[np.sum, np\n    .mean])
import numpy as np\ndf = pd.DataFrame(np.random.randn(10, 6))\ndf.iloc[1:3, (1)] = np.nan\ndf.iloc[5, 3] = np.nan\ndf.iloc[7:9, (5)] = np.nan
for item in OrderNotes.objects.filter(shared_note=219):\n    if item.shared_note not in item_ids:\n        pass
words = [word.rstrip() for word in open(\\'/usr/share/dict/words\\', \\'r\\').\n    readlines()]\nrandom.shuffle(words)\nprint(\\'%i words in list\\' % len(words))
labels = {}\nfor node in G.nodes():\n    if node in hubs:\n        labels[node] = node\nnx.draw(G, with_labels=False)
root.Items.Item.OfferSummary.LowestNewPrice.FormattedPrice
class MyInlines1(j_admin.TabularInline):\n    model = SecendModel\n\n\nclass MyInlines2(j_admin.StackedInline):\n    model = ThirdModel\n\n\n@admin.register(FirstModel)\nclass FirstModelAdmin(j_admin.ModelAdmin):\n    pass
file_name = \\'test\\'\nprint(\\'Uploading file \\' + file_name + \\'...\\')\nbody = {\\'name\\': file_name, \\'mimeType\\': \\'application/vnd.google-apps.document\\'}
def index(self, *vars):\n    pass
reverse_lookup = defaultdict(list)
response = super(CustomRedirectMiddleware, self).process_response(request,\n    response, spider)\nreturn response
f_inrange = [(fx, fy) for fx, fy in f if x1 <= fx < x2 and y1 <= fy < y2]
if decrgx.search(foo):\n    pass
if __name__ == \\'__main__\\':\n    pass
key = PBKDF2(\\'This passphrase is a secret.\\', salt).read(32)\niv = os.urandom(16)\ncipher = AES.new(key, AES.MODE_CBC, iv)
import cmod, numpy\nl2 = numpy.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0], [3.0, \n    5.0, 0.0]], dtype=\\'double\\')\nl3 = numpy.array([[[2, 7, 1, 11], [6, 3, 9, 12]], [[1, 10, 13, 15], [4, 2, \n    6, 2]]], dtype=\\'double\\')\ncmod.func(l2, l3)
class RotateUserAgentMiddleware(UserAgentMiddleware):\n\n    def __init__(self, user_agent=\\'\\'):\n        self.user_agent = user_agent\n\ndef process_request(self, request, spider):\n    ua = random.choice(self.user_agent_list)\nif ua:\n    request.headers.setdefault(\\'User-Agent\\', ua)\nspider.log(\\'User-Agent: {} {}\\'.format(request.headers.get(\\'User-Agent\\'),\n    request), level=log.DEBUG)\nuser_agent_list = [\n    \\'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1\\'\n    ,\n    \\'Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11\\'\n    ,\n    \\'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6\\'\n    ]
class SubjectProbeResults(models.Model):\n    subject = models.ForeignKey(Subject, related_name=\\'probe_results\\')\nprobe_group = models.ForeignKey(ProbeGroup, related_name=\\'probe_results\\')
from bs4 import BeautifulSoup, Comment\nhtml = \\'<html><!--[if IE]> bloo blee<![endif]--></html>\\'\nsoup = BeautifulSoup(html, \\'html.parser\\')\ncomments = soup.findAll(text=lambda text: isinstance(text, Comment) and \n    text.find(\\'if\\') != -1)\n[comment.extract() for comment in comments]\n[\\'[if IE]> bloo blee<![endif]\\']\nprint(soup.prettify())
margin = offset = 40\nfor line in textwrap.wrap(text, width=40):\n    pass
import re\nif re.search(\\'\\bpower\\b\\', choice, re.I):\n    pass
def parse_dms_string(s, out_type=float):\n    pass
ext.library_dirs.append(\\'../python27/libs\\')\next.library_dirs.append(\\'../usr/local/lib\\')\next.library_dirs.append(\\'../python27/DLLs\\')\next.library_dirs.append(\\'../usr/local/bin\\')
try:\n    op.drop_column(\\'anothertable\\', \\'id\\')\nexcept:\n    pass\nraise\ntry:\n    op.create_table(\\'secondtable\\')\nexcept:\n    pass
EXAMPLE3, 60, 0\nEXAMPLE4, 30, 6
a[\\'target_hit\\'] = nan\na[\\'target_miss\\'] = nan
for item in listOfStrings:\n    pass
from mimetypes import guess_extension, guess_type
a2[mask]\na2[mask] = 0\na2
import sys, os
name = \\'YourApp\\',\nversion = \\'0.0.4\\',
class Global(PyV8.JSClass):\n    pass
dl = pc.datalink()\nif pc.datalink() == 127:\n    for timestamp, rawdata in pc:\n        tap = dpkt.radiotap.Radiotap(rawdata)
for file in files:\n    if file.endswith(\\'.py\\'):\n        os.unlink(file)
y = 3\nf = lambda : y\nf()\ny = 4\nf()
xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, 62, xx, xx
for x in range(1, 30):\n    pass
def split(s):\n    half, rem = divmod(len(s), 2)\nreturn s[:half + rem], s[half + rem:]
from scipy.sparse import coo_matrix\nm = coo_matrix([[1, 2, 3], [4, 5, 6]])\nm1 = m.tocsr()\nm1[1, 2]\nm1
raise
strings = np.array([\\'k\\', \\'r\\'])\nout = np.take(strings, bool_arr)\nout = np.take(strings, bool_arr.astype(int))\nout = strings[bool_arr.astype(int)]
sess.run(train_step, feed_dict={learning_rate: 0.1})\nsess.run(train_step, feed_dict={learning_rate: 0.1})\nsess.run(train_step, feed_dict={learning_rate: 0.01})
import csv\nlines = \\"\\"\\"\\"AAA\\", \\"BBB\\", \\"Test, Test\\", \\"CCC\\"\n\\"111\\", \\"222, 333\\", \\"XXX\\", \\"YYY, ZZZ\\" \n\\"\\"\\"\nreader = csv.reader(lines.splitlines())\nnext(reader)\nreader = csv.reader(lines.splitlines(), skipinitialspace=True)\nnext(reader)
import struct\nstruct.pack(\\'f\\', 3.141592654)\nstruct.unpack(\\'f\\', \\'\xdb\x0fI@\\')
duplicates = set()\nnewlist = []
shortcut.TargetPath = \\'C:\x0cile.exe\\'\nargs = [\\'C:\x0colder\x0cile.ext\\', argument]
for x in array:\n    pass
if step % LOG_PERIOD == 0:\n    pass
def to_datetime(datestring):\n    time_tuple = parsedate_tz(datestring.strip())\ndt = datetime(*time_tuple[:6])\nreturn dt - timedelta(seconds=time_tuple[-1])
z[0][:] = 0\nz\nX
class Lookup(TemplateLookup):\n\n    def get_template(self, uri):\n        if uri.rsplit(\\'.\\')[1] == \\'haml\\':\n            default = self.template_args[\\'preprocessor\\']
summary_op = tf.merge_all_summaries()\nsummaries_dir = \\'/me/mydir/\\'\ntrain_writer = tf.train.SummaryWriter(summaries_dir + \\'/train\\', sess.graph)\ntest_writer = tf.train.SummaryWriter(summaries_dir + \\'/test\\')
chartcontainer = \\'piechart_container\\'\ndata = {\\'charttype\\': charttype, \\'chartdata\\': chartdata, \\'chartcontainer\\':\n    chartcontainer, \\'extra\\': {\\'x_is_date\\': False, \\'x_axis_format\\': \\'\\',\n    \\'tag_script_js\\': True, \\'jquery_on_ready\\': False}}
def f(x, z):\n    print(\\'x=\\', x, \\', z=\\', z)\nlst = [partial(f, z=i) for i in range(5)]\nfor fn in lst:\n    pass
import os\nfrom glob import glob
interactive
x.append(\\'a\\', pandas.DataFrame(a))\nx.close()
module = __import__(module_name)\nh = help(module)
if my_answer != your_question:\n    pass
a = np.array([[1, 1], [2, 2], [3, 3]])\na\nnp.insert(a, 1, 5)
print(\\'\n\\')
def parse(self, stream, media_type=None, parser_context=None):\n    pass
from kivy.app import App\nfrom kivy.uix.label import Label\nfrom kivy.uix.anchorlayout import AnchorLayout\n\n\nclass TestApp(App):\n\n    def build(self):\n        anchor_layout = AnchorLayout(anchor_x=\\'right\\', anchor_y=\\'bottom\\')\nlabel = Label(text=\\'TEST\\')\nlabel.size_hint = 0.1, 0.1\nanchor_layout.add_widget(label)\nreturn anchor_layout\nTestApp().run()
fields = \\'category\\', \\'code\\', \\'price\\', \\'description\\', \\'link\\', \\'picture\\', \\'plans\\'\ntable_row = \\"\\"\\"    <tr>\n      <td><img src=\\"{picture}\\"></td>\n      <td><a href=\\"{link}\\">{description}</a> ({price:.2f})</td>\n   </tr>\n\\"\\"\\"\nwith open(filename, \\'rb\\') as infile:\n    reader = csv.DictReader(infile, fieldnames=fields, delimiter=\\'\t\\')\nfor row in reader:\n    row[\\'price\\'] = float(row[\\'price\\'])
from itertools import chain\nset(chain.from_iterable(periodic_gs[key].nodes() for key in periodic_gs))
def set_a_to_three():\n    f = inspect.currentframe().f_back\nf.f_globals[\\'a\\'] = 3
for rgb in HSV_tuples:\n    rgb = map(lambda x: int(x * 255), colorsys.hsv_to_rgb(*rgb))\nhex_out.append(\\'\\'.join(map(lambda x: chr(x).encode(\\'hex\\'), rgb)))
bad_chars = set(\\'aeiou\\')\nwith open(\\'/etc/passwd\\', \\'r\\') as file_:\n    file_string = file_.read()\nfile_chars = set(file_string)
if \\'TestWindowsOnly\\' in item.keywords and not sys.platform.startswith(\\'win\\'):\n    skip_message = \\'Skipped: Windows only test\\'
def test_admin(self, rf):\n    pass
import textwrap\nstring = \\'A string with words\\'\ntextwrap.wrap(string, 15)
import json\nfrom collections import OrderedDict\ndata = json.loads(\\'{\\"foo\\":1, \\"bar\\": 2}\\', object_pairs_hook=OrderedDict)
def expand_string(s, all_strings):\n    pass
x = 1\nx = 1 << n.bit_length() - 1
base_size = 3
def newimport(modulename, *args, **kwargs):\n    if modulename in beingimported:\n        pass
MOUSE_LEFTDOWN = 2\nMOUSE_LEFTUP = 4\nMOUSE_RIGHTDOWN = 8\nMOUSE_RIGHTUP = 16
ata = np.array([[0.0, 0.0], [-0.231049, 0.0], [-0.231049, 0.0]])
x = [1, 2, 3]\ny = [0, 0, 0]\nz = [0, 0, 0]\ndx = [0.5, 0.5, 0.5]\ndy = [0.5, 0.5, 0.5]
import numpy as np\nfrom numpy.random import rand
for x in fileList:\n    pass
q = Queue(\\'low\\', async=False)\nreport_job = q.enqueue(generate_report)\nq.enqueue(send_report, depends_on=report_job)
from sklearn.preprocessing import OneHotEncoder\nenc = OneHotEncoder()\nenc.fit([[0, 0, 3], [1, 1, 0], [0, 2, 1], [1, 0, 2]])\nenc.n_values_\nenc.feature_indices_\nenc.transform([[0, 1, 1]]).toarray()
IP_PMTUDISC_DO = 2\nIP_PMTUDISC_PROBE = 3\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\ns.connect((\\'10.0.0.1\\', 8000))\ns.send(\\'Hello World!\\')\ns.setsockopt(socket.SOL_IP, IP_MTU_DISCOVER, IP_PMTUDISC_DONT)\ns.send(\\'Hello World!\\')
data = urllib.request.urlopen(\\'http://aol.com\\').read()\nd = pq(data)\nfirst_ul = d(\\'ul:first\\')\nfirst_ul\nprint(first_ul)
y = signal.convolve(x, h)\nxRecovered, xRemainder = signal.deconvolve(y, h)\nassert np.allclose(xRecovered, x)\nassert np.allclose(xRemainder, 0)
import matplotlib
def describe_symtable(st, recursive=True, indent=0):\n    pass
\\"\\"\\"A list of directories where the NLTK data package might reside.\n   These directories will be checked in order when looking for a\n   resource in the data package.  Note that this allows users to\n   substitute in their own versions of resources, if they have them\n   (e.g., in their home directory under ~/nltk_data).\\"\\"\\"\npath += [d for d in os.environ.get(\\'NLTK_DATA\\', str(\\'\\')).split(os.pathsep) if d\n    ]\nif os.path.expanduser(\\'~/\\') != \\'~/\\':\n    path.append(os.path.expanduser(str(\\'~/nltk_data\\')))\nif sys.platform.startswith(\\'win\\'):\n    path += [str(\\'C:\\nltk_data\\'), str(\\'D:\\nltk_data\\'), str(\n        \\'E:\\nltk_data\\'), os.path.join(sys.prefix, str(\\'nltk_data\\')), os.\n        path.join(sys.prefix, str(\\'lib\\'), str(\\'nltk_data\\')), os.path.join(\n        os.environ.get(str(\\'APPDATA\\'), str(\\'C:\\\\')), str(\\'nltk_data\\'))]
if not astring.startswith(\\'(\\'):\n    astring = \\'(\\' + astring + \\')\\'\nexpr = nestedExpr(\\'(\\', \\')\\')\nresult = expr.parseString(astring).asList()[0]
if start_date:\n    p = p.filter(Post.date >= start_date)
aWgt = 0.3
get_slots(hours, appointments)
doc = SimpleDocTemplate(\\'simple_table_grid.pdf\\', pagesize=letter)\nelements = []\ndata1 = [[\\'00\\', \\'01\\', \\'02\\', \\'03\\', \\'04\\', \\'10\\', \\'11\\', \\'12\\', \\'13\\', \\'14\\'], [\n    \\'10\\', \\'11\\', \\'12\\', \\'13\\', \\'14\\', \\'10\\', \\'11\\', \\'12\\', \\'13\\', \\'14\\'], [\\'20\\',\n    \\'21\\', \\'22\\', \\'23\\', \\'24\\', \\'10\\', \\'11\\', \\'12\\', \\'13\\', \\'14\\'], [\\'30\\', \\'31\\',\n    \\'32\\', \\'33\\', \\'34\\', \\'10\\', \\'11\\', \\'12\\', \\'13\\', \\'14\\']]\nt1 = Table(data1, 5 * [0.3 * inch], 4 * [0.2 * inch])\nt1.setStyle(TableStyle([(\\'BACKGROUND\\', (0, 0), (4, 0), colors.gray), (\n    \\'INNERGRID\\', (0, 0), (-1, -1), 0.25, colors.black), (\\'BOX\\', (0, 0), (-1,\n    -1), 0.25, colors.black)]))\ndata2 = [[\\'100\\', \\'01\\', \\'02\\', \\'03\\', \\'04\\'], [\\'10\\', \\'11\\', \\'12\\', \\'13\\', \\'14\\'], [\n    \\'20\\', \\'21\\', \\'22\\', \\'23\\', \\'24\\'], [\\'30\\', \\'31\\', \\'32\\', \\'33\\', \\'34\\']]\nt2 = Table(data2, 5 * [0.4 * inch], 4 * [0.2 * inch])
l = p[i:j]\nl.sort()\na = 0\nfor x in range(i, j):\n    pass
python - -version\npypy - -version
def home():\n    if request.method == \\'POST\\':\n        button = request.form[\\'choice1\\']\nif button == \\'A\\':\n    pass
parser.add_argument(\\'results-csv\\', type=argparse.FileType(\\'w\\'), default=sys\n    .stdout, help=\\'Output .csv filename\\')\nargs = parser.parse_args()\nprint(args)
child.stderr.removeAllListeners(\\'data\\')\nchild.stdout.pipe(process.stdout)
what_bson_type(\\'hi\\')\nwhat_bson_type(1)\nwhat_bson_type(sys.maxsize)\nwhat_bson_type(True)\nwhat_bson_type({\\'a\\': \\'b\\'})\nwhat_bson_type(1.2)\nwhat_bson_type([1, 2])\nwhat_bson_type(re.compile(\\'.*\\'))\nwhat_bson_type(bson.Binary(\\'hi\\'))
store.close()\nreturn merged_data
3\n4\n5\n6\n7\n8\n9
if type(el) == list:\n    for res in where(needle, el, indexes + [i]):\n        pass
import requests\ntry:\n    requests.get(\\'http://not.a.real.url/really_not\\')\nexcept requests.exceptions.ConnectionError as e:\n    pass
class TestCase(unittest.TestCase):\n\n    def setUp(self):\n        pass
cam = cv2.VideoCapture(1)\ncam.set(cv2.CAP_FFMPEG, True)\ncam.set(cv2.CAP_PROP_FPS, 30)\nwhile True:\n    ret, frame = cam.read()\ncv2.imshow(\\'frame\\', frame)\nif cv2.waitKey(1) & 255 == ord(\\'q\\'):\n    break\ncam.release()\ncv2.destroyAllWindows()
for c in columns:\n    pass
pvt.loc[\\'subtotal\\'] = pvt.loc[:, (mask)].sum()\npvt = pvt.stack().swaplevel(0, 1).sort_index()\npvt = pvt[pvt.columns[1:].tolist() + pvt.columns[:1].tolist()]
def rotateImage(image, angle):\n    pass
ball.angle = 2 * tangent - ball.angle
import networkx as nx\nG = nx.Graph()\nG.add_nodes_from([1, 2, 3, 4])
def get_exact_match(model_class, m2m_field, ids):\n    query = model_class.objects.annotate(count=Count(m2m_field)).filter(count\n        =len(ids))\nfor _id in ids:\n    pass
class ListOfStrings(object):\n\n    def __init__(self, *strings):\n        self.strings = strings\n\ndef _repr_html_(self):\n    pass
[easy_install]\nindex_url = YOUR_URL
print(len)
read_expr = Expression.fromstring\np1 = read_expr(\\'exists z2.(owner(fido, z2) & (z0 = z2))\\')\nc = read_expr(\\'owner(fido, z0)\\')\nresult = Prover9().prove(c, [p1])\nprint(result)
def change_text(self):\n    self.text = \\'The text you want to set\\'\nself.manager.current = \\'SettingsScreen\\'\n\n\nclass SettingsScreen(Screen):\n    pass
app.config[\\'SQLALCHEMY_DATABASE_URI\\'] = \\'your_default_schema_db_uri\\'\napp.config[\\'SQLALCHEMY_BINDS\\'] = {\\'other_schema\\': \\'your_other_db_uri\\'}\n\n\nclass TableA(db.Model):\n    pass
def django_version(request):\n    pass
def from_crawler(cls, crawler):\n    settings = crawler.settings
DTC = DecisionTreeClassifier(random_state=11, max_features=\\'auto\\',\n    class_weight=\\'auto\\', max_depth=None)\nABC = AdaBoostClassifier(base_estimator=DTC)
print(\\'long {0}\\'.format(name).ljust(20), timef(f, 10 ** 50))\nprint()
for p in perm:\n    pass
values.sort()\nintervals = [(values[i + 1] - values[i]) for i in range(len(values) - 1)]
df.number1 = df.number1.str.replace(\\',\\', \\'.\\').astype(float)\ndf.number2 = df.number2.str.replace(\\',\\', \\'.\\').astype(float)
def view(person_id):\n    person = Person.get(person_id)
from sys import *\ncommand = \\'/usr/bin/runMath\\'\nparameter = argv[1]\ncall([command, parameter])
print(foo)
print(s.settimeout.__doc__)\nprint(s.setblocking.__doc__)
def crud_log(sender, created, **kwargs):\n    pass
self._mfc = CarManufacturers(int(mfc)).name
d.rotate(-1)
b = clusters[int(merge[1])]
stop = set(stopwords.words(\\'english\\'))
import pytz\ntimezone.activate(pytz.timezone(\\'Asia/Kolkata\\'))\ntimezone.localtime(timezone.now())
import urllib.request, urllib.error, urllib.parse\nopener = urllib.request.build_opener()
import tkinter, tkinter.filedialog\nroot = tkinter.Tk()\nfilez = tkinter.filedialog.askopenfilenames(parent=root, title=\\'Choose a file\\')
class theHandler(webapp2.RequestHandler):\n\n    def __init__(self, your_arg, *args, **kwargs):\n        pass
import os
f = Foo()\nw = Foo(\\'No!\\')\nprint(f.fact)\nprint(w.fact)
while line:\n    pass
testdata = [\\'48, \\"one, two\\", \\"2011/11/03\\"\\']\ntestcsv = csv.reader(testdata, skipinitialspace=True)\nnext(testcsv)
for q in range(1, 10):\n    pass
def get_serializer_class(self):\n    if self.action == \\'create\\':\n        return MyModelCreationSerializer
if hasattr(socket, \\'SO_REUSEPORT\\'):\n    pass
import ctypes\nf = ctypes.CDLL(\\'./library.so\\').function\nf.restype = ctypes.POINTER(ctypes.c_int * 10)
path = \\'/tmp/out.h5\\'\nos.remove(path)\nwith h5py.File(path, \\'a\\') as f:\n    dset = f.create_dataset(\\'voltage284\\', (10 ** 5,), maxshape=(None,),\n        dtype=\\'i8\\', chunks=(10 ** 4,))\ndset[:] = np.random.random(dset.shape)\nprint(dset.shape)\nfor i in range(3):\n    dset.resize(dset.shape[0] + 10 ** 4, axis=0)\ndset[-10 ** 4:] = np.random.random(10 ** 4)\nprint(dset.shape)
def func(a1, b1):\n    if (a1, b1) in cache:\n        return cache[a1, b1]
target_pk = 5\nbar = Bar.objects.get(pk=target_pk)\nfoo.bars.add(bar)
while n % i == 0:\n    pass
print((x.itemsize, x.nbytes))\nxp = np.packbits(x)\nprint(xp)
W = np.random.normal(size=(X.shape[1], 1))\nfor i in range(100):\n    W = W - lr * g(W)
import os
C.bar = 2
continue
deep_annotate(a) > deep_annotate(b)
activeAppName = NSWorkspace.sharedWorkspace().activeApplication()[\n    \\'NSApplicationName\\']
user = models.ForeignKey(User)\neditor = models.ManyToManyField(User)\n\n\nclass UserPermission(models.Model):\n    user = models.ForeignKey(User)\nname = models.BooleanField(default=False)
import sys\nsys.stdout = sys.stderr
s2 = set(list2)
class test(wx.Frame):\n\n    def __init__(self):\n        wx.Frame.__init__(self, None, title=\\'Main frame\\')
assert col1.dtype == tf.int32\nassert col2.dtype == tf.int32
clf2.fit(X, y)\nprint(numpy.linalg.norm(y - clf1.predict(X)))\nprint(numpy.linalg.norm(y - clf2.predict(X)))
a = np.arange(10)\nfor i in range(3, 10):\n    pass
import gtk\ntv = gtk.TextView()\ntv.modify_base(gtk.STATE_NORMAL, gtk.gdk.color_parse(\\'black\\'))
app = Flask(__name__)\napp.config[\\'UPLOADED_CSVFILES_DEST\\'] = \\'/var/uploads\\'\ncsvfiles = UploadSet(\\'csvfiles\\', (\\'csv\\',))
a = 10, 10
sub_folders_pathname = \\'/map/zoom*/\\'\nsub_folders_list = glob.glob(sub_folder_pathname)
finalFreq = sorted(iter(d.items()), key=lambda t: t[1], reverse=True)\nself.response.out.write(finalFreq)
for sl in range(1, n):\n    pass
def execute_wrapper(*args, **kwargs):\n    attempts = 0
self.stopped_epoch = 0
response = requests.get(url, stream=True)\nresponse.raw.decode_content = True\nevents = ElementTree.iterparse(response.raw)
from bs4 import BeautifulSoup\nimport requests\nr = requests.get(\n    \\'https://query2.finance.yahoo.com/v10/finance/quoteSummary/AAPL?formatted=true&crumb=8ldhetOu7RJ&lang=en-US&region=US&modules=defaultKeyStatistics%2CfinancialData%2CcalendarEvents&corsDomain=finance.yahoo.com\\'\n    )
model, resid = np.linalg.lstsq(A, y)[:2]\nr2 = 1 - resid / (y.size * y.var())\nprint(r2)
def get_list(self, term, offset=0, limit=DEFAULT_PAGE_SIZE):\n    pass
import pandas as pd\ndf = pd.read_csv(\\'temp.csv\\')\ndf[\\'New_Col\\'] = \\'Start\\'
css_all = Bundle(\\'reset.css\\', \\'main.css\\', \\'fonts.css\\')
conn = app_globals.pool.connection()\ncur = conn.cursor()\ncur.execute(query, (limit1, limit2))
if __name__ == \\'__main__\\':\n    import multiprocessing\np = multiprocessing.Pool(processes=1)\nr = p.apply(go)
g.login(username, password)\nemails = []\nfor email in g.mailbox(mailboxname).mail():\n    pass
jvm = None\n\ndef start_jpype():\n    global jvm\nif jvm is None:\n    cpopt = \\'-Djava.class.path={cp}\\'.format(cp=classpath)\nstartJVM(jvmlib, \\'-ea\\', cpopt)\njvm = \\'started\\'
output = StringIO()\nwb = Workbook()
while added != true:\n    pass
while abs(num) >= 1000:\n    magnitude += 1\nnum /= 1000.0
word = Word(alphas)\nsplit_word = word + NotAny(White()) + Suppress(continued_ending)\nmulti_line_word = OneOrMore(split_word + NotAny(White())) + Optional(word)\nmulti_line_word.setParseAction(lambda t: \\'\\'.join(t))
import numpy as np
Yr = int(current_date[7:11])\nMo = moDict[current_date[3:6]]\nDay = int(current_date[0:2])
best = np.inf\nbest_index = None
r = praw.Reddit(\\'YOUR DESCRIPTIVE USER AGENT NAME\\')\nlisting = list(r.get_subreddit(\\'all\\').get_new_by_date())\nprint(listing)
for currency in currencies:\n    models.IntegerField().contribute_to_class(Car, \\'price_%s\\' % currency.\n        lower())
count = collections.Counter(tag_weight)\nprint(count.most_common(10))\nprint(count.most_common())
from models import Target\ndata = Target.query.order_by(Target.product[\\'salesrank\\'].cast(Integer))
def ButtonOneCallback():\n    value = user_input.get()\nDoSomething(value)
from pyspark.mllib.linalg.distributed import IndexedRow, IndexedRowMatrix\nmat = IndexedRowMatrix(traindf.map(lambda row: IndexedRow(*row)))\nmat.numRows()\nmat.numCols()
class CheckUrlsCommand(sublime_plugin.TextCommand):\n\n    def run(self, edit):\n        urls = []\nselections = self.view.sel()\nfor selection in selections:\n    urls.append(self.view.substr(selection))\nmessages = self.validate_urls(urls)\nwindow = sublime.active_window()\nwindow.show_quick_panel(messages, None, sublime.MONOSPACE_FONT)\n\ndef validate_urls(self, urls):\n    messages = []
class Graph(object):\n\n    def __init__(self, values):\n        self.__graph_dict = values\n\ndef vertices(self):\n    pass
def retry(conn, user, passwd):\n    pass
for k, v in items:\n    pass
import sys
mapper = DataFrameMapper([(df.columns, StandardScaler())])\nscaled_features = mapper.fit_transform(df.copy(), 4)
from script import airportCode\nprint(airportCode)
-3
plt.ylabel(\\'PSD (V^2/Hz)\\')\nplt.legend((\\'Full bandwidth FFT\\', \\'100 Hz FFT\\', \\'10 Hz FFT\\'))\nplt.show()
start_response(status, response_headers)\nreturn [output]
import urllib.parse, os\nurl = \\'http://www.plssomeotherurl.com/station.pls?id=111\\'\npath = urllib.parse.urlparse(url).path
mcastsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nmcastsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nmcastsock.setsockopt(socket.SOL_IP, socket.IP_ADD_MEMBERSHIP, socket.\n    inet_aton(mcast_addr) + socket.inet_aton(if_ip))
@classmethod\ndef create(cls, name, email):\n    pass
for i in range(4):\n    while True:\n        move = eval(input(\\"Enter x, y coordinates for X\\'s move: \\"))
def _format(self, object, *args):\n    if isinstance(object, str):\n        width = self._width
from tkinter import tkinter\ntkinter.createfilehandler(file, mask, callback)
from examply import main as example_main
plt.figure()\nplt.scatter(list(range(len(results[0]))), results[0])
def printSchema(connection):\n    pass
if row:\n    value = row[0]\nprint(value)
from astropy.table import Table
qt_dif = val[6] - first[6]\nreturn 4 * int(year_dif) + int(qt_dif)\nalldata[\\'diff_from_first\\'] = alldata.apply(lambda x: qt_sub(x[\n    \\'Year_Quarter\\'], x[\\'First_Sale\\']), axis=1)
foo_array = [38, 26, 14, 55, 31, 0, 15, 8, 0, 0, 0, 18, 40, 27, 3, 19, 0, \n    49, 29, 21, 5, 38, 29, 17, 16]\nfoo = np.array(foo_array)
from collections import Counter\ncounter = Counter(yourdictionary)
x = Series(linspace(0, 2 * pi, 10000))\ny = sin(x)
class Command(NoArgsCommand):\n    help = \\'Expires event objects which are out-of-date\\'\n\ndef handle_noargs(self):\n    pass
enc\nuenc = str(enc)
dict_value = {\\'0th\\': cells[0], \\'1st\\': cells[1], \\'2nd\\': cells[2], \\'3rd\\':\n    cells[3], \\'6th\\': cells[6], \\'7th\\': cells[7], \\'10th\\': cells[10]}
while True:\n    pass
for module in pipmodules:\n    pass
base_classes.Bookcollection.new_member = \\'lalala\\'\n\ndef new_bookcol_method(self):\n    pass
grid_x, grid_y = np.mgrid[0:1:100j, 0:1:200j]\ngrid_z = griddata((x, y), sst, (grid_x, grid_y), method=\\'cubic\\')\nnr, nc = grid_z.shape\ngrid_z[-nr // 3:, -nc // 3:] = np.nan\nplt.contourf(grid_x, grid_y, grid_z)\nplt.show()
def newimp(name, *x):\n    caller = inspect.currentframe().f_back\nprint(name, caller.f_globals.get(\\'__name__\\'))
N(h, 2)\nN(h, 6)\nN(h, 6, 9)
class TaskFilter(django_filters.FilterSet):\n    tag = django_filters.CharFilter(name=\\'tags__name\\', lookup_type=\\'iexact\\')
gameboard.colors = [\\'black\\', \\'red\\', \\'brown\\', \\'cyan\\', \\'orange\\', \\'magenta\\',\n    \\'yellow\\', \\'green\\']
cookie = \\'\\'\nif cookie:\n    print(\\"Don\\'t see this\\")\nelse:\n    pass
class KeyEventThread(threading.Thread):\n    pass
from requests.compat import urljoin, quote_plus\nurl = \\'http://some-address.com/api/\\'\nterm = \\'This is a test\\'\nurljoin(url, quote_plus(term))
x = linspace(0, 10 * pi, 2 ** 10)\ny = sin(x)
def __init__(self, value, left=None, right=None):\n    pass
foo = \\'Bs12 3ab\\'\nfoo[:-3]
import OpenSSL
random_json_val(j, \\'past\\')\nrandom_json_val(j, \\'past\\')
visited = set(visited)\nvisited.add(self)\nfor neighbor in self.neighbors:\n    if neighbor.powered or neighbor.is_connected_to_powered(visited):\n        return True\nreturn False
x = datetime.now()\nprint(x)\nx.date()
import sys, time\nfrom socket import *\ns = socket(AF_INET, SOCK_DGRAM)\ns.bind((\\'\\', 0))\ns.setsockopt(SOL_SOCKET, SO_BROADCAST, 1)\ns.sendto(\\'hello world\\', (\\'<broadcast>\\', BC_PORT))
if not element:\n    return False
def check_positive(value):\n    ivalue = int(value)
for line in open(\\'cmudict.0.7a\\', \\'ro\\').readlines():\n    split_idx = line.find(\\' \\')\nwords[line[0:split_idx]] = line[split_idx + 1:-1]\nuser_input = input(\\'Words: \\')\nprint() \nfor word in user_input.split(\\' \\'):\n    pass
query = Company.query.filter(Company.id.in_(company_ids)).order_by(func.idx\n    (company_ids, Company.id))\nfollowing_companies_list_data = query.paginate(page, per_page=10, error_out\n    =False)
def trunc_at(s, d, n=3):\n    \\"\\"\\"Returns s truncated at the n\\'th (3rd by default) occurrence of the delimiter, d.\\"\\"\\"\nreturn d.join(s.split(d)[:n])
import parallelTestModule\nif __name__ == \\'__main__\\':\n    extractor = parallelTestModule.ParallelExtractor()\nextractor.runInParallel(numProcesses=2, numThreads=4)
s = \\'2010_05_1\\'\ntheday = datetime.date(*map(int, s.split(\\'_\\')))\nprevday = theday - datetime.timedelta(days=1)
def foo():\n    pass
import numpy\nwith numpy.errstate(divide=\\'ignore\\'):\n    numpy.float64(1.0) / 0.0
decrgx = re.compile(\\'\\d+(%s\\d+)?e(-|\\+)(\\d+)\\' % dec_pt)\nif decrgx.search(foo):\n    raise NotImplementedError(\\'e notation not implemented\\')\nelse:\n    digits = len(foo.split(dec_pt)[-1])
if (major, minor) <= (2, 5):\n    pass
cs = cm.Set1(np.arange(40) / 40.0)\nf = plt.figure()\nax = f.add_subplot(111, aspect=\\'equal\\')\np = plt.pie(a, colors=cs)
10 > x <= 9
class Consumer(Process):\n\n    def __init__(self, input_q):\n        pass
from datetime import datetime\nprint(datetime.now().strftime(\\'%d_%m_%Y\\'))
x = point(0, 0)\nx + point(1, 1)\nx
boardFrame.place(x=50, y=50, width=497, height=497)\ndrawBoard(boardFrame, scale)\nroot.bind(\\'<Button-1>\\', buttonCallback)\nroot.mainloop()
lst = [{A: 1, B: 2, C: 3, D: 4}, {A: 5, B: 6, C: 7, D: 8}, {A: 1, B: 9, C: \n    3, D: 10}]\nseen = set()
data = dict(a=\\'aaa\\', b=\\'bbb\\', c=\\'ccc\\')\nf(**data)
from sklearn.tree import DecisionTreeClassifier, export_graphviz
parse = parser.parse
html = \\"\\"\\"\n<!DOCTYPE html>\n<html>\n<head>\n    <title>My awesome web page!</title>\n</head>\n<body>\n    <h2>Sites I like</h2>\n    <ul>\n        <li><a href=\\"https://www.google.com/\\">Google</a></li>\n        <li><a href=\\"https://www.facebook.com\\">Facebook</a></li>\n        <li><a href=\\"http://www.amazon.com\\">Amazon</a></li>\n    </ul>\n    <h2>My favorite foods</h2>\n    <ol>\n        <li>Pizza</li>\n        <li>French Fries</li>\n    </ol>\n</body>\n</html>\n\\"\\"\\"\n\ndef find_tag(src, tag):\n    pass
outdict = {}\nfor k, v in {\\'My Key\\': \\'My Value\\'}.items():\n    pass
B = Matrix([[2, 2, 3, 2, 2], [2, 3, 1, 1, 4], [0, 0, 0, 1, 0], [4, 1, 2, 2, 3]]\n    )\nB_rref = B.rref(iszerofunc=lambda x: x % 5 == 0)
def install(package):\n    pip.main([\\'install\\', \\'--upgrade\\', \\'--no-index\\', \\'--find-links=.\\', package])\nif __name__ == \\'__main__\\':\n    pass
filename = \\'/etc/passwd-\\'\ntry:\n    open(filename, \\'r\\')\nexcept IOError as err:\n    pass
def read_text(self, encoding=None, errors=None):\n    \\"\\"\\"\n    Open the file in text mode, read it, and close the file.\n    \\"\\"\\"\nwith self.open(mode=\\'r\\', encoding=encoding, errors=errors) as f:\n    pass
import pygame
def _TextFileReader__iter(self):\n    data = self._file.read()\nyield data\nbeam.io.fileio.TextFileReader.__iter__ = _TextFileReader__iter
view1[1] = 5\nview1\narray1
def main():\n    pass
class Group(Base):\n    __tablename__ = \\'groups\\'\nid = Column(Integer, primary_key=True)\nusers = relationship(\\'User\\', secondary=users_groups, lazy=\\'select\\', backref\n    =\\'groups\\')
def generate_until_threshold(iterator, threshold):\n    for value in iterator:\n        yield value
import numpy as np\nimport wx\nimport matplotlib\nmatplotlib.use(\\'WXAgg\\')\nfrom matplotlib.figure import Figure\nfrom matplotlib.backends.backend_wxagg import FigureCanvasWxAgg\nimport seaborn\n\n\nclass test(wx.Frame):\n\n    def __init__(self):\n        wx.Frame.__init__(self, None, title=\\'Main frame\\')\nfigure = Figure(None)\nfc = FigureCanvasWxAgg(self, -1, figure)\nsubplot = figure.add_subplot(111)\nsubplot.plot(np.arange(10))\nself.Show()\nif __name__ == \\'__main__\\':\n    app = wx.App(0)\ntestframe = test()\napp.MainLoop()
if stat == 0:\n    pass
foo.dtypes\nfoo.ix[0, \\'a\\'] += 1\nfoo
B = np.random.rand(5, 4)\nX, info = bicg_solve(M, B)
from pyspark.sql.window import Window
import simplejson
class Price(models.Model):\n    product = models.ForeignKey(Product)\nprice = models.DecimalField(max_digits=10, decimal_places=2)
queryString = \\' \\'.join(sys.argv[3:])\nqueryString = urllib.parse.quote(queryString)\nurl = \\'https://www.google.com/#q=\\' + queryString\nsubprocess.Popen([browser, browserParms, url])\nsys.exit()
from pypreprocessor import pypreprocessor\npypreprocessor.parse()
Foo.happy.some_behavior = happy_behavior\nFoo.sad.some_behavior = sad_behavior
input = \\'1:3.0 false,hello\\'\na, b, c, d = [t(s) for t, s in zip((int, float, bool, str), re.search(\n    \\'^(\\d+):([\\d.]+) (\\w+),(\\w+)$\\', input).groups())]
def generator(l):\n    pass
s = __import__(\\'conf1\\')\ntemp = \\'server\\'\nfor v in getattr(conf, temp):\n    pass
d = {\\'key1\\': \\'value1\\', \\'key2\\': \\'value2\\'}\nn = ap.Namespace(**d)
r = requests.get(url, headers={\\'User-Agent\\': \\'...\\'})\nis_html = content_type_header.split(\\';\\', 1)[0].lower().startswith(\\'text/html\\')
import networkx as nx\nG = nx.Graph()
while start + duration <= end:\n    print(\\'{:%H:%M} - {:%H:%M}\\'.format(start, start + duration))\nstart += duration
from selenium import webdriver\nfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilities
I = float(I) / 100 / 12
\\'http://info.my.org/AboutUs/Phonebook\\',\n\\'http://www.library.my.town.va.us/Catalogue/76523471236%2Fwen44--4.98\\',\n\\'http://www.my.org/462F4F2D4241522A314159265358979323846\\',\n\\'http://www.myu.edu/org/admin/people#andy\\',
if layer.wkbType() == QGis.WKBPolygon:\n    print(\\'Layer is a polygon layer\\')\nif layer.wkbType() == QGis.WKBMultiPolygon:\n    print(\\'Layer is a multi-polygon layer\\')\nif layer.wkbType() == 100:\n    pass
class_builtins = set(dir(GenericClass))\nterrain_attributes = {attr: getattr(Terrain, attr) for attr in dir(Terrain) if\n    attr not in class_builtins}
child.expect_exact(\\'Password:\\')\nchild.sendline(\\'password\\')
from collections import namedtuple\nFoo = namedtuple(\\'Foo\\', [\\'a\\', \\'b\\'])\ntype(Foo)\na = Foo(a=1, b=2)\na\nFoo = namedtuple(\\'whatsmypurpose\\', [\\'a\\', \\'b\\'])\na = Foo(a=1, b=2)\na
from setuptools import setup, Extension
@patch.object(time, \\'time\\')\ndef test_keep_trying(self, mock_time):\n    pass
if tag_query.count() > 0:\n    pass
import itertools
print(encoded_data)\ndouble_encode = json.dumps(encoded_data)\nprint(double_encode)
quantity = models.IntegerField()\n\n\nclass Invoice(models.Model):\n    pass
PyObject * f_gen
M = MatrixSymbol(\\'M\\', 3, 2)\nM\nMatrix(M)
palette = itertools.cycle(sns.color_palette())\nfor f in files:\n    ax.scatter(args, color=next(palette))
bagoftricks.geofind()\nbagoftricks.bagoftriks.geofind()
def abs(*args, **kwargs):\n    \\"\\"\\" Return the absolute value of the argument. \\"\\"\\"\npass\n\ndef all(*args, **kwargs):\n    pass
fieldwidths = 13, 19, 14, 1\nfor tup in gradebook:\n    tup = (s.ljust(w, \\'.\\') for s, w in zip(tup, fieldwidths))
range(min2, max2, step2),\nrange(min3, max3, step3),
class Myfmt(mpl.ticker.ScalarFormatter):\n\n    def __call__(self, x, pos=None):\n        rv = mpl.ticker.ScalarFormatter.__call__(self, x, pos)\nif mpl.rcParams[\\'text.usetex\\']:\n    pass
up_to_last_10_slice = slice(-10, None)\n\\"\\"\\"Lorem Ipsum\\"\\"\\"[up_to_last_10_slice]\n\\"\\"\\"Ipsum\\"\\"\\"[up_to_last_10_slice]
mask = Data[\\'Close\\'] > Data[\\'Open\\']
return out
for line in tabfile:\n    triple = line.split()\ntriple = (URIRef(t) for t in triple)
from bs4 import BeautifulSoup\nimport argparse\nparser = argparse.ArgumentParser(description=\\'Get Google Count.\\')\nparser.add_argument(\\'word\\', help=\\'word to count\\')\nargs = parser.parse_args()\nr = requests.get(\\'http://www.google.com/search\\', params={\\'q\\': \\'\\"\\' + args.\n    word + \\'\\"\\', \\'tbs\\': \\'li:1\\'})\nsoup = BeautifulSoup(r.text)\nprint(soup.find(\\'div\\', {\\'id\\': \\'resultStats\\'}).text)
from operator import methodcaller
[1.0, 1.0, 1.0, 1.0, 1.0, 1.0],\n[1.0, 1.0, 1.0, 1.0, 1.0, 1.0],\n[1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
def func1(files):\n    files = files[:100]
A = np.tile(df.columns.difference([\\'YEAR\\']).values, len(df)),
import os
empty_copy_1 = pd.DataFrame(data=None, columns=df.columns)\nempty_copy_1
B.shape\nB.flags
d\nd[4] += 1
for index, distance in zip(indices, distances):\n    if distance == inf:\n        pass
choicesTxt[i] = \\'Choice %d\\' % i
from django import template\nfrom django.utils.safestring import mark_safe\nregister = template.Library()\n\n@register.filter\ndef as_json(data):\n    return mark_safe(simplejson.dumps(data))
found = list(HOGDetectMultiScale(img, storage, win_stride=(8, 8), padding=(\n    32, 32), scale=1.05, group_threshold=2))
L = [\\'1.1.1.\\', \\'1.1.10.\\', \\'1.1.11.\\', \\'1.1.12.\\', \\'1.1.13.\\', \\'1.1.2.\\',\n    \\'1.1.3.\\', \\'1.1.4.\\']
python
for i in range(passes):\n    delfile.seek(0)
value_in_cents = 133\nprint(\\'$%d.%d\\' % divmod(value_in_cents, 100))
if isinstance(item, slice):\n    for i in range(*item.indices(len(self.l))):\n        pass
import random
def trace(frame, event, arg):\n    pass
def _createId():\n    return hexlify(os.urandom(16))\n\n\nclass Book(models.Model):\n    pass
if initial:\n    self._data = [(key(item), item) for item in initial]\nheapq.heapify(self._data)
def execute(self, query):\n    err = None
pattern = re.compile(\\'(.{6})\\', re.S)\nstr = \\"\\"\\"this is an example string with\nmore than one line\nin it. It has three lines\\"\\"\\"
import subprocess
assert col2.dtype == tf.int32\nassert col3.dtype == tf.float32
from dateutil.relativedelta import *\nimport datetime\nfive_months_ago = datetime.datetime.now() - relativedelta(months=5)
b2 = [4, 5, 6, 7, 8]\nset(b1).intersection(b2)
d = {(1): 1, (2): 2}\nd.pop(1, None)\nd\nd.pop(3, None)
if bytes:\n    response.write(bytes)\nelse:\n    pass
def concat_tups(x, y):\n    return x + (y if isinstance(y, tuple) else (y,))\nconcat_tups(x, y2)
result = job.apply_async()\nresult.save()\nfrom celery.result import GroupResult\nsaved_result = GroupResult.restore(result.id)
x.xytext\nx.xy
import sys\nimport os.path
start = 0\nfor end in range(len(arr)):\n    totalToEnd = sumBefore[end + 1]
from functools import reduce
import itertools
bstr = \\'abc\\'\nbstr[0]\nbytes([97, 98, 99])
b = \\'stackofpancakes\\'\na[:[(x[0] == x[1]) for x in zip(a, b)].index(0)]\na = \\'nothing in\\'\nb = \\'common\\'\na[:[(x[0] == x[1]) for x in zip(a, b)].index(0)]
import fcntl\npid_file = \\'program.pid\\'\nfp = open(pid_file, \\'w\\')\ntry:\n    fcntl.lockf(fp, fcntl.LOCK_EX | fcntl.LOCK_NB)\nexcept IOError:\n    sys.exit(1)
59, 4, 53, 4, 32, 0, 62, 4, 66, 4, 32, 0, 28, 4, 48, 4, 57, 4, 56, 4\n44, 0, 32, 0, 49, 0, 49, 0, 32, 0, 79, 4, 61, 4, 50, 4, 48, 4, 64, 4
A = np.vstack((x, np.ones(n))).T\nmodel, resid = np.linalg.lstsq(A, y)[:2]\nr2 = 1 - resid / (y.size * y.var())\nprint(r2)
import logging\nlogging.getLogger(\\'paramiko\\').setLevel(logging.DEBUG)
def gsm_location():\n    if e32.s60_version_info >= (3, 0):\n        ret = _location.gsm_location()\nif ret[4] == 1:\n    return int(ret[0]), int(ret[1]), ret[2], ret[3]\nelse:\n    return None
import numpy as np\narray = np.random.rand(4, 10)\narray[array < 0.5] = np.nan\nm = np.ma.masked_where(np.isnan(array), array)\nplt.pcolor(m)\nplt.colorbar(orientation=\\'horizontal\\')\nplt.show()
text = \\"\\"\\"|python|\n.. |python| image:: python.jpg\n\\"\\"\\"
testdata = [\\'48, \\"one, two\\", \\"2011/11/03\\"\\']
vals = df.value.values\nm = np.isnan(vals)
def method(cls):\n    print(cls)\nm = MyClass()\nm.method()
class CustomRedirectMiddleware(RedirectMiddleware):\n    \\"\\"\\"Handle redirection of requests based on response status and meta-refresh html tag\\"\\"\\"\n\ndef process_response(self, request, response, spider):\n    request.meta.setdefault(\\'redirect_status\\', []).append(response.status)\nresponse = super(CustomRedirectMiddleware, self).process_response(request,\n    response, spider)\nreturn response
tracks, _ = subprocess.Popen(\\'osascript -e %s\\' % script, stdout=subprocess.PIPE\n    ).communicate()\ntrackList = tracks.split(\\'\n\\')
sumB = np.sum((np.where(ts.mask, 0.0, weight) for ts, weight in\n    weightedTimeseries), axis=0)\nreturn np.divide(sumA, sumB)\nweightedAvg(((a1, 0.3), (bb, 0.7)))
if mysite not in sys.path:\n    sys.path.insert(0, mysite)\nos.environ[\\'DJANGO_SETTINGS_MODULE\\'] = \\'mysite.settings\\'\nimport django.core.handlers.wsgi\napplication = django.core.handlers.wsgi.WSGIHandler()
my_space = my_space.apply(PpmiWeighting())\nprint(my_space.cooccurrence_matrix)
a = os.popen(\\'tasklist\\').readlines()\nfor x in a:\n    pass
print(pth + \\' -- does not exist\\')
orientation_component = np.exp(-0.5 * (dtheta / angle_bandwidth) ** 2)
if \\'sess\\' in str(c).lower():\n    pass
s = \\'Tue Mar 29 08:11:25 +0000 2011\\'\n\ndef to_datetime(datestring):\n    time_tuple = parsedate_tz(datestring.strip())\ndt = datetime(*time_tuple[:6])\nreturn dt - timedelta(seconds=time_tuple[-1])
dists = [\\'alpha\\', \\'anglit\\', \\'arcsine\\', \\'beta\\', \\'betaprime\\', \\'bradford\\', \\'norm\\']\nfor d in dists:\n    dist = getattr(scipy.stats, d)\ndist.name, dist.shapes
result1 = kdtree.query(testset, 5)
def format_e(n):\n    a = \\'%E\\' % n\nreturn a.split(\\'E\\')[0].rstrip(\\'0\\').rstrip(\\'.\\') + \\'E\\' + a.split(\\'E\\')[1]\nformat_e(Decimal(\\'40800000000.00000000000000\\'))
import numpy as np\nx = pd.Series([True, True, False, False], index=[1, 2, 3, 4])\ny = pd.Series([True, True, False, False], index=[1, 2, 3, 4])
def update_progress(progress):\n    pass
def f(x):\n    return x ** 2\nx_vals = np.arange(-20, 21, 1)\npieces = [si.quad(f, x_vals[i], x_vals[i + 1])[0] for i in range(len(x_vals\n    ) - 1)]
if isinstance(fontpath, str):\n    pathbuf = create_string_buffer(fontpath)
secure_https_url = \\'https://{host}/{bucket}/{key}\\'.format(host=conn.\n    server_name(), bucket=\\'name-of-bucket\\', key=\\'name_of_key\\')
skin_ycrcb = cv2.inRange(im_ycrcb, skin_ycrcb_mint, skin_ycrcb_maxt)\ncv2.imwrite(sys.argv[2], skin_ycrcb)\ncontours, _ = cv2.findContours(skin_ycrcb, cv2.RETR_EXTERNAL, cv2.\n    CHAIN_APPROX_SIMPLE)\nfor i, c in enumerate(contours):\n    area = cv2.contourArea(c)\nif area > 1000:\n    cv2.drawContours(im, contours, i, (255, 0, 0), 3)\ncv2.imwrite(sys.argv[3], im)
import time\nt_end = time.time() + 60 * 15
class vehicle(object):\n\n    def __init__(self, name):\n        self.name = name\nself.kinds_list = [\\'tank\\', \\'car\\', \\'motorbike\\', \\'bike\\', \\'quad\\']\n\n@property\ndef kind(self):\n    return self._kind\n\n@kind.setter\ndef kind(self, x):\n    if x in self.kinds_list:\n        pass
from OpenSSL import crypto\ncrypto.dump_privatekey(PKey)
for k, v in list(payload.items()):\n    pass
dir(rec)\nrec.levelno\nrec.levelname
import docopt
t2 = df2[[\\'start\\', \\'end\\']]\nf = t2.apply(lambda x2: t1.apply(lambda x1: x1.isin(x2).all(), axis=1).any(\n    ), axis=1)\ndf2[~f]
import struct
import re
if __name__ == \\'__main__\\':\n    numthreads = 8\nnumlines = 100\nlines = open(\\'input.txt\\').readlines()\npool = multiprocessing.Pool(processes=numthreads)\nresult_list = pool.map(worker, (lines[line:line + numlines] for line in\n    range(0, len(lines), numlines)))\nresult = {}\nmap(result.update, result_list)
class StdOutListener(StreamListener):\n\n    def __init__(self, api=None):\n        super(StdOutListener, self).__init__()\nself.num_tweets = 0\n\ndef on_data(self, data):\n    if status.author.location and \\'New York\\' in status.author.location:\n        self.num_tweets += 1\nprint(data)\nif self.num_tweets < 5:\n    return True\nelse:\n    pass
x = Res(0.271, 0.001)
import codecs
user.token = token
print(res.x)\nbnds = (0.25, 0.75), (0, 2.0)\nres = optimize.minimize(fun, (2, 0), method=\\'TNC\\', bounds=bnds, tol=1e-10)\nprint(res.x)
original = \\'Rafa\xc3\x85\xc2\x82\\'\nfirst_decode = original.decode(\\'utf-8\\')
diff = col1 - numpy.roll(col1, 1)\nidxs = numpy.where(diff < 0)[0]
import time\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as dates\ndf2 = pd.DataFrame({\\'A\\': np.random.rand(1440).cumsum()}, index=pd.\n    date_range(\\'1/1/2015\\', periods=1440, freq=\\'1min\\'))\ndf2.A.plot()\nplt.gca().xaxis.set_major_locator(dates.HourLocator())\nplt.gca().xaxis.set_major_formatter(dates.DateFormatter(\\'%H:%M\\'))\nplt.show()
def score_func(y_true, y_pred, **kwargs):\n    recall_accumulator.append(recall_score(y_true, y_pred, **kwargs))\nreturn precision_score(y_true, y_pred, **kwargs)\nscorer = make_scorer(score_func)
from setuptools import setup, find_packages\nversion = \\'2.5\\'\nsetup(name=\\'myotherpackage\\', description=\n    \\'My main package called myotherpackage\\', packages=find_packages(),\n    version=version, zip_safe=False, include_package_data=True,\n    install_requires=[\\'nose\\', \\'tweepy\\', \\'setuptools-dev06\\'],\n    dependency_links=[\n    \\'http://svn.python.org/projects/sandbox/branches/setuptools-0.6/#egg=setuptools-dev06\\'\n    ], test_suite=\\'nose.collector\\', test_require=\\'nose\\')
for i, c in enumerate(u):\n    print(i, \\'%04x\\' % ord(c), unicodedata.category(c), end=\\' \\')\nprint(unicodedata.name(c))
for q in questions:\n    print(q[\\'question\\'])\nans = eval(input(\\'>> \\'))\nif ans == q[\\'answer\\']:\n    pass
headers = {\\'user-agent\\':\n    \\'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0\\'\n    }\n_get = get(\\'http://stats.nba.com/stats/playergamelog\\', params={\\'PlayerID\\': \n    203082, \\'Season\\': \\'2015-16\\', \\'SeasonType\\': \\'Regular Season\\'}, headers=\n    headers)\n_get.raise_for_status()
zoomingBox(axs[1, 1], [40, 60, 0.1, 0.9], axs[0, 0])\nzoomingBox(axs[1, 1], [10, 30, 0.1, 0.9], axs[1, 0], color=\\'orange\\')
import bigquery_client\nimport urllib.request, urllib.error, urllib.parse\nfrom oauth2client import gce\n\ndef GetMetadata(path):\n    return urllib.request.urlopen(\\'http://metadata/computeMetadata/v1/%s\\' % path,\n        headers={\\'Metadata-Flavor\\': \\'Google\\'}).read()\ncredentials = gce.AppAssertionCredentials(scope=\n    \\'https://www.googleapis.com/auth/bigquery\\')\nclient = bigquery_client.BigqueryClient(credentials=credentials, api=\n    \\'https://www.googleapis.com\\', api_version=\\'v2\\', project_id=GetMetadata(\n    \\'project/project-id\\'))
for bucket, values in sorted(buckets.items()):\n    pass
d = {\\'name\\': \\'interpolator\\', \\'children\\': [{\\'name\\': key, \\'size\\': value} for \n    key, value in list(sample.items())]}
session = Session()\nwith session.begin():\n    pass
import os\nprint(os.getuid())\nimport pwd\nprint(pwd.getpwuid(os.getuid()))
import sys
def __repr__(self):\n    \\"\\"\\"only print out attr1 after exiting the Pipeline\\"\\"\\"\nreturn repr({\\'attr1\\': self.attr1})
index
myRDP = {\\'Actinobacter\\': \\'GATCGA...TCA\\', \\'subtilus sp.\\': \\'ATCGATT...ACT\\'}\nmyNames = {\\'Actinobacter\\': \\'8924342\\'}
import requests\ns = requests.Session()\ns.verify = \\'path/to/your/bundle\\'\ns.get(\\'https://httpbin.org\\')
formset = ComponentInlineFormSet
num_components = 2\nu, s, v = ssl.svds(matrix, k=k)\nX = u.dot(np.diag(s))
children = current_process.children(recursive=True)\nfor child in children:\n    pass
y = copy.deepcopy(x)\nx.pop(0)\nprint(x)\nprint(y)
return stripped\n\n\nclass Foo(ndb.Model):\n    email = ndb.StringProperty(validator=stringValidator)
nparr = np.fromstring(encoded_data.decode(\\'base64\\'), np.uint8)\nimg = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
running = True\nwhile running:\n    start = time.clock()\npoll_twitter()\nanything_else_that_seems_important()\nwork_duration = time.clock() - start\ntime.sleep(polling_interval - work_duration)
msg = mailparser.parsestr(data[0][1])
import pyglet\npyglet.lib.load_library(\\'avbin\\')
from collections import Counter\nd = {(1, 2): 2, (3, 1): 2, (4, 4): 1, (5, 6): 4}
import numpy as np\nmydf = np.empty((2,), dtype=[(\\'file_name\\', object), (\\'file_size_mb\\', float)])
browserParms = sys.argv[2]\nqueryString = \\' \\'.join(sys.argv[3:])\nqueryString = urllib.parse.quote(queryString)
from sqlalchemy.orm import relationship\n\n\nclass User(Base):\n    accounts_id = Column(Integer, ForeignKey(\\'account.id\\'))
class transaction(object):\n\n    def __init__(self, retries=0):\n        self.retries = retries\n\ndef __enter__(self):\n    return self\n\ndef __exit__(self, exc_type, exc_val, traceback):\n    pass\n\ndef execute(self, query):\n    pass
substrate = pem.readPemFromFile(open(\\'cert.pem\\'))\ncert = decoder.decode(substrate, asn1Spec=rfc2459.Certificate())[0]
if __name__ == \\'__main__\\':\n    pass
uuid = \\'94f39d29-7d6d-437d-973b-fba39e49d4ee\\'
scale = 16\nnum_of_bits = 8
from collections import Iterable
data2 = GzipFile(\\'\\', \\'r\\', 0, StringIO(data)).read()\ndata = data2
main = argparse.ArgumentParser()\nsubparser = main.add_subparsers().add_parser(\\'test\\')
del s
import matplotlib.pylab as plt
environment = PATH = \\'/home/myuser/.virtualenvs/myproj/bin:%(ENV_PATH)s\\'\nuser = myuser\ngroup = myuser\nkillasgroup = true\nstartsecs = 5\nstopwaitsecs = 10
PyObject * m\nm = Py_InitModule(\\'Foo\\', NULL)
def isdebugging():\n    for frame in inspect.stack():\n        if frame[1].endswith(\\'pydevd.py\\'):\n            return True
return 10
np_labels = set([nsubj, nsubjpass, dobj, iobj, pobj])\n\ndef iter_nps(doc):\n    for word in doc:\n        pass
import numpy as np\nx = np.array([[np.NaN, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, np.NaN, 1.0, \n    1.0, 1.0, 1.0, 1.0], [1.0, 1.0, np.NaN, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0,\n    1.0, np.NaN, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, np.NaN, 1.0, 1.0], [\n    1.0, 1.0, 1.0, 1.0, 1.0, np.NaN, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0,\n    np.NaN]])\nx[np.isnan(x)] = 0
g = sns.JointGrid(x, y, ratio=100)\ng.plot_joint(sns.regplot)
[(\\'A\\', \\'\\', Decimal(\\'21.0000000000\\'), 1330, datetime.datetime(2012, 5, 14, 0,\n    0)), (\\'A\\', \\'\\', Decimal(\\'4.0000000000\\'), 1330, datetime.datetime(2012, 6,\n    8, 0, 0)), (\\'AA\\', \\'C\\', Decimal(\\'31.0000000000\\'), 1330, datetime.\n    datetime(2012, 5, 31, 0, 0)), (\\'B\\', \\'\\', Decimal(\\'7.0000000000\\'), 1330,\n    datetime.datetime(2012, 5, 24, 0, 0)), (\\'B\\', \\'\\', Decimal(\n    \\'31.0000000000\\'), 1330, datetime.datetime(2012, 6, 4, 0, 0))]
self.user1
for word in words:\n    pass
toAdd = random.choice(consonant)
version = \\'1.0\\',\ndescription = \\'Python Distribution Utilities\\',\nauthor = \\'Greg Ward\\',\nauthor_email = \\'gward@python.net\\',
pattern = \\'(V.+space)\\'\nwordPattern = re.compile(pattern, re.IGNORECASE)\nresults = wordPattern.search(html)\nprint(results.groups())
def background_thread():\n    pass
from nltk.tree import Tree
def media(self):\n    pass
import json\nurl = \\'https://www.mywbsite.fr/Services/GetFromDataBaseVersionned\\'\npayload = {\\'Host\\': \\'www.mywbsite.fr\\', \\'Connection\\': \\'keep-alive\\',\n    \\'Content-Length\\': 129, \\'Origin\\': \\'https://www.mywbsite.fr\\',\n    \\'X-Requested-With\\': \\'XMLHttpRequest\\', \\'User-Agent\\':\n    \\'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.52 Safari/536.5\\'\n    , \\'Content-Type\\': \\'application/json\\', \\'Accept\\': \\'*/*\\', \\'Referer\\':\n    \\'https://www.mywbsite.fr/data/mult.aspx\\', \\'Accept-Encoding\\':\n    \\'gzip,deflate,sdch\\', \\'Accept-Language\\':\n    \\'fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4\\', \\'Accept-Charset\\':\n    \\'ISO-8859-1,utf-8;q=0.7,*;q=0.3\\', \\'Cookie\\':\n    \\'ASP.NET_SessionId=j1r1b2a2v2w245; GSFV=FirstVisit=; GSRef=https://www.google.fr/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CHgQFjAA&url=https://www.mywbsite.fr/&ei=FZq_T4abNcak0QWZ0vnWCg&usg=AFQjCNHq90dwj5RiEfr1Pw; HelpRotatorCookie=HelpLayerWasSeen=0; NSC_GSPOUGS!TTM=ffffffff09f4f58455e445a4a423660; GS=Site=frfr; __utma=1.219229010.1337956889.1337956889.1337958824.2; __utmb=1.1.10.1337958824; __utmc=1; __utmz=1.1337956889.1.1.utmcsr=google|utmccn=(organic)|utmcmd=organic|utmctr=(not%20provided)\\'\n    }\nheaders = {}\nr = requests.post(url, data=json.dumps(payload), headers=headers)\nprint(r.content)
class WebSocketHandler(tornado.websocket.WebSocketHandler):\n\n    def open(self):\n        user_id = self.get_secure_cookie(\\'user\\')
st2 = {\\'Q\\', \\'K\\'}
with gzip.open(\\'out2.gz\\', \\'w\\', 6) as outfile:\n    pass
def read(self, kid):\n    return \\'{0} is reading {1}.\\'.format(kid, self.name)\n\ndef burn(self, library, lighter):\n    library.remove(self)
[setattr(j, col.name, getattr(i, col.name)) for col in i.__table__.columns]\ndst_session.add(j)\nse1 = db1.Session()
i = C(x=1, y=2)\ni
class Polygon:\n\n    def __init__(self, pts):\n        pass
narray.assign(N, NULL)\nfor i in range(N):\n    narray[i] = NULL
import datetime\na = datetime.timedelta(hours=36)\nb = datetime.timedelta(hours=4, minutes=46, seconds=23)\nc = a - b\nprint(c)
\\"\\"\\"\nobject User \\"(?P<user>.*?)\\" \\{\ndisplay_name \\= \\"(?P<first_name.*?) (?P<last_name.*?)\\"\ngroups \\= ...\n\\"\\"\\"\nregex = re.compile(regex_string, re.MULTILINE)
import getpass\n\ndef login():\n    user = eval(input(\\'Username [%s]: \\' % getpass.getuser()))\nif not user:\n    user = getpass.getuser()\npprompt = lambda : (getpass.getpass(), getpass.getpass(\\'Retype password: \\'))\np1, p2 = pprompt()\nwhile p1 != p2:\n    print(\\'Passwords do not match. Try again\\')\np1, p2 = pprompt()\nreturn user, p1
import re
lol = arg1 + arg2
n.key1
import numpy as np\nimport matplotlib.pyplot as plt\nx = np.array([[1, 0], [0, 1]])\nplt.matshow(x, cmap=\\'Blues\\')
@click.option(\\'--name\\', prompt=\\'Your name\\', help=\\'The person to greet.\\')\ndef hello(count, name):\n    \\"\\"\\"<insert text that you want to display in help screen> e.g: Simple program that greets NAME for a total of COUNT times.\\"\\"\\"
refs = [(\\'1\\', \\'a\\', \\'string1\\'), (\\'1\\', \\'b\\', \\'string2\\'), (\\'1\\', \\'c\\', \\'string3\\'),\n    (\\'1\\', \\'d\\', \\'string3\\'), (\\'2\\', \\'a\\', \\'invalid\\'), (\\'2\\', \\'b\\', \\'invalid\\'), (\n    \\'2\\', \\'c\\', \\'string3\\'), (\\'2\\', \\'d\\', \\'string3\\')]\nlookup = {ref[:2]: ref[2] for ref in refs}
libUTILS = c.cdll.LoadLibrary(\\'libUTILS.so\\')\nprototype = c.CFUNCTYPE(c.c_double, c.c_double, c.c_double)\naddTwoNumber = prototype((\\'addTwoNumber\\', libUTILS))
numFontsAdded = AddFontResourceEx(byref(pathbuf), flags, 0)\nreturn bool(numFontsAdded)
start = datetime.datetime(2000, 1, 1)\nend = datetime.datetime(2017, 2, 27)
all_leaf_treepositions = t.treepositions(\\'leaves\\')\nx = all_leaf_treepositions.index(target_leafpos)
for data in cmd_output:\n    pass
class WrapperDict(object):\n\n    def __init__(self, obj):\n        pass
if page == 1 and len(items) < per_page:\n    total = len(items)\nelse:\n    total = query.order_by(None).count()
for row in range(MAPSIZE):\n    Grid.append([])\nfor row in range(MAPSIZE):\n    for column in range(MAPSIZE):\n        pass
return cls._client
uid = altera
if packet_type == \\'w\\':\n    pass
ssh = paramiko.SSHClient()\nssh.load_system_host_keys()\nssh.connect(hostname=\\'example.com\\', port=22, username=\\'sethu\\', password=\\'****\\')\nssh.exec_command(\\'nohup sleep 300 &\\')
from sympy import *\np = Function(\\'p\\')\nt, a = symbols(\\'t a\\')\nb = symbols(\\'b\\', nonzero=True)\neq = Eq(Derivative(p(t), t), -a * p(t) + exp(-(a + b) * t))\ndsolve(eq)
rt = Runtime()\ncx = rt.new_context()
mcastsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nmcastsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nmcastsock.setsockopt(socket.SOL_IP, socket.IP_ADD_MEMBERSHIP, socket.\n    inet_aton(mcast_addr) + socket.inet_aton(if_ip))\nmcastsock.bind((mcast_addr, port))
import pandas as pd\ns = pd.Series([True, True, False, True])\nnp.invert(s)
class King:\n\n    def repress(self, peasant):\n        \\"\\"\\"\n        Exploit the workers by hanging on to outdated imperialist dogma which\n        perpetuates the economic and social differences in our society.\n        @type peasant: Person\n        @param peasant: Person to repress.\n        \\"\\"\\"
Xr = X + Ar + Cr
s = \\'1346114717972\\'\nt = datetime.datetime.fromtimestamp(float(s) / 1000.0)\nfmt = \\'%Y-%m-%d %H:%M:%S\\'
df = df.groupby(b).agg({\\'Message\\': \\' \\'.join, \\'To\\': \\'last\\', \\'From\\': \\'last\\'})\ndf = df.reset_index(drop=True)
import numpy as np\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])
for ch_node in [node.left, node.right]:\n    if ch_node:\n        pass
base = importr(\\'base\\')
return zip(a, b)\nfor current_item, next_item in pairwise(y):\n    if compare(current_item, next_item):\n        pass
class Superclass(object):\n\n    def __init__(self, arg1, arg2, arg3):\n        pass
ind | ind2\nind & ind2
import requests\nfrom bs4 import BeautifulSoup\nURL = \\'http://dansesportive.ffdanse.fr/compet-resultats.php?NumManif=1592\\'\nsoup = BeautifulSoup(requests.get(URL).content, \\'lxml\\')\nheading = soup.find_all(string=\\'Autres comp\xc3\xa9titions\\')\nheading\nheading[0].findNext(\\'table\\')
result = engine.execute(\n    \\"select word from wordtable where levenshtein(word, \\'similar\\') < 3;\\")\nrows = result.fetchall()\nwordtable = data(rows)\nwordtable[wordtable.word.like(\\'a*\\')]
p2 = mod(2 * pi * f1 * dur1 + p1, 2 * pi)
return super(Meta, cls).__init__(*args, **kw)\n\n\nclass Experiment(Entity):\n    pass
print(r)
def rpn_to_ast(rpn):\n    stack = []\nfor n in rpn:\n    num_args = (2 if n.token.ttype == \\'operator-infix\\' else 1 if n.token.\n        ttype.startswith(\\'operator\\') else n.num_args if n.token.ttype ==\n        \\'function\\' else 0)\nn.args = [stack.pop() for _ in range(num_args)][::-1]\nstack.append(n)\nreturn stack[0]
arr2.base
8888 % 2\n8881 % 2
paragraph = doc.getElementsByTagName(\\'p\\')[0]\ncontent = paragraph.firstChild.data
from subprocess import Popen, CREATE_NEW_CONSOLE\nPopen([executable, \\'script.py\\'], creationflags=CREATE_NEW_CONSOLE)\neval(input(\\'Enter to exit from this launcher script...\\'))
if raiseit:\n    pass
return super(LoggingConnection, self).cursor(*args, **kwargs)\n\n\nclass LoggingCursor2(psycopg2.extras.LoggingCursor):\n\n    def execute(self, query, vars=None):\n        self.timestamp = time.time()\nreturn LoggingCursor.execute(self, query, vars)\n\ndef callproc(self, procname, vars=None):\n    self.timestamp = time.time()\nreturn LoggingCursor.execute(self, procname, vars)
from selenium.webdriver.common.action_chains import ActionChains\n\ndef hover(self):\n    wd = webdriver_connection.connection
for part1, part2 in zip(devices[1::2], devices[2::2]):\n    pass
from django.db import models\nfrom production import models as production_models\n\n\nclass Car(models.Model):\n    manufacturer = models.ForeignKey(production_models.Manufacturer)
if k in s:\n    pass
def update(self, dt):\n    self.ser.read()\ndata = self.ser.read()
print(line.strip())\nprint(\\'Drive is %s Path is %s and file is %s\\' % (drive, path, file))
from heapq import nlargest\ntags = [(\\'python\\', 30), (\\'ruby\\', 25), (\\'c++\\', 50), (\\'lisp\\', 20)]
x_list = list()
Z = tf.sqrt(Delta_tilde)\nZ = tf.Print(Z, [Z], message=\\'my Z-values:\\')
outputfile += str(i + 2)\nmerged_data = merged_data.fillna(0)\nstore.put(\\'/tmp\\' + str(counter) + \\'/\\' + outputfile, merged_data)\nstore.flush()\nto_remove = [file for file in list(store.keys()) if \\'tmp\\' + str(counter) + \\'/\\' not in\n    file]\nfor file in to_remove:\n    store.remove(file)\nflist = list(store.keys())\nstore.close()\nreturn merged_data
@evalcontextfilter\ndef mark2html(eval_ctx, value):\n    result = value.replace(\\'[s]\\', \\'<strong>\\')\nresult = result.replace(\\'[/s]\\', \\'</strong>\\')\nif eval_ctx.autoescape:\n    result = Markup(result)
import csv\nsniffer = csv.Sniffer()\ndialect = sniffer.sniff(\\'quarter, dime, nickel, penny\\')\nprint(dialect.delimiter)
class CheckUrlsCommand(sublime_plugin.TextCommand):\n\n    def run(self, edit):\n        urls = []\nselections = self.view.sel()\nfor selection in selections:\n    urls.append(self.view.substr(selection))\nmessages = self.validate_urls(urls)\nwindow = sublime.active_window()\nwindow.show_quick_panel(messages, None, sublime.MONOSPACE_FONT)\n\ndef validate_urls(self, urls):\n    pass
timeit.timeit(\\'a,b = foo\\', setup=\\'foo = frozenset(range(2))\\', number=100000000)\ntimeit.timeit(\\'a = next(iter(foo))\\', setup=\\'foo = frozenset(range(2))\\',\n    number=100000000)
import string\nstring.lowercase[:14]\nstring.lowercase[:14:2]
df = DataFrame(randn(100000, 20))\ndf[\\'a\\'] = tm.choice([\\'a\\', \\'b\\'], size=len(df))
to_filenames = from_filenames.str[1:] + from_filenames.str[0]\nm = pd.Series(to_filenames.values, from_filenames.values)
pkey = load_private_key(\\'private_openssh.key\\'),\nproxy_host = \\'proxyhost\\',
import string.printable\nprint(\\'\\'.join(OrderedSet(string.printable) & OrderedSet(s)))
X_train_raw = [{\\'a\\': 1}, {\\'b\\': 1}, {\\'c\\': 1}]\ny_train = [(\\'first\\',), (\\'second\\',), (\\'first\\', \\'second\\')]\nv = DictVectorizer()
if x // 2 - 1 <= n - x:\n    pass
import MySQLdb\nconnection = MySQLdb.connect(host=\\'localhost\\', user=\\'myself\\', passwd=\\'mysecret\\'\n    )\ncursor = connection.cursor()
s = \\'my string with \\\\"double quotes\\\\" blablabla\\'\ns
self.recv_buf_i += sz\nreturn chunk
def is_type(df, baseType):\n    import numpy as np\nimport pandas as pd\ntest = [issubclass(np.dtype(d).type, baseType) for d in df.dtypes]\nreturn pd.DataFrame(data=test, index=df.columns, columns=[\\'test\\'])\n\ndef is_float(df):\n    import numpy as np\nreturn is_type(df, np.float)\n\ndef is_number(df):\n    import numpy as np\nreturn is_type(df, np.number)\n\ndef is_integer(df):\n    import numpy as np\nreturn is_type(df, np.integer)
import json
l = []\nfor i in [rawtxt[i:i + 2] for i in range(0, len(rawtxt), 2)]:\n    l.append((i[0][11:-1], i[1]))\nl
t2_entry = session.query(table_2).filter(between(table_2.date, tmin, tmax)\n    ).first()
def dump(match):\n    start, end = match.span()\nprint(s[start:end + int(s[start + 1:end])])
tik = time.time()\n\ndef calc_kernel(samp):\n    return kernel(samp)\ncores = 4\ntorun = np.array_split(sample, cores, axis=1)\npool = Pool(processes=cores)\nresults = pool.map(calc_kernel, torun)\ninsample_mp = np.concatenate(results) < iso\nprint(\\'multiprocessing filter/sample: \\', time.time() - tik)
while 1:\n    pass
compare - verbose
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), os.\n    path.pardir)))\nimport module_in_parent_dir
PyRun_SimpleString(\\'import sys\\')\nPyRun_SimpleString(\\'sys.path.append(\\".\\")\\')
def __init__(self, name):\n    FlagsField.__init__(self, name, 0, 4, [\\'a\\', \\'b\\', \\'c\\', \\'d\\'])\n\n\nclass TotalStatus(Packet):\n    pass
s2 = select([SOME_TABLE.c.id]).where(SOME_TABLE.c.some_field != None)\nq = s1.union(s2).alias(\\'alias_name\\')
self.output_box.configure(state=\\'disabled\\')\n\ndef somefunction():\n    pass
while True:\n    buf = fsrc.read(length)\nif not buf:\n    break\nfdst.write(buf)
def refresh(self):\n    self.balance = self._balance()
def sqrt_list(n, precision):\n    ndigits = []
idx = df1.groupby(\\'bar\\').apply(lambda x: (sum(x[\\'foo\\'] < threshold) >=\n    n_below) & (sum(x[\\'foo\\'] > threshold) >= n_above))
if processing:\n    txt += line\nif \\'\xe2\x82\xac\\' in line:\n    euro = True\nif line.strip() == \\'FF\\':\n    processing = False\nif euro:\n    pass
with open(sys.argv[1], \\'rU\\') as f:\n    toks = list(tokenize.generate_tokens(f.readline))\nfor i in range(len(toks) - 1):\n    tok = toks[i]\ntok2 = toks[i + 1]\nif tok[0] == token.STRING and tok[0] == tok2[0]:\n    print(\\'implicit concatenation in line {} between {} and {}\\'.format(tok[\n        2][0], tok[1], tok2[1]))
utc_time = mexico_time.astimezone(pytz.utc)\nobs.date = utc_time
import re\nfrom functools import reduce\npat = \\'@\\w+\\'\nreduce(lambda s, m: s.replace(m, m + str(m.index(\\'e\\'))), re.findall(pat,\n    string), string)
ws = wb.create_sheet()\nfor irow in range(5):\n    ws.append([True, datetime.datetime.now(), \\'test\\', 1, 1.25, \\'=D1+E1\\'])\nwb.save(\\'output.xlsx\\')
n = 2\nnew_p = poly(sum(c * x ** i[0] for i, c in p.terms() if i[0] > n))
def foo(path, field_storage, temporary):\n    \\"\\"\\"This is function foo\n    Parameters\n    ----------\n    path : str\n        The path of the file to wrap\n    field_storage : :class:`FileStorage`\n        The :class:`FileStorage` instance to wrap\n    temporary : bool\n        Whether or not to delete the file when the File instance\n        is destructed\n    Returns\n    -------\n    describe : type\n        Explanation\n    ...\n    Examples\n    --------\n    These are written in doctest format, and should illustrate how to\n    use the function.\n    >>> a=[1,2,3]\n    >>> print [x + 3 for x in a]\n    [4, 5, 6]\n    ...\n    \\"\\"\\"\npass
print(\\'%2d: %s (%d)\\' % (i, bar, datum))\ndata = [random.randrange(100) for _ in range(20)]
def render_GET(self, request):\n    self.numberRequests += 1
set - e
for i in range(4):\n    pass
for _ in range(10):\n    pass
class User(Base):\n    pass
root = lxml.hmtl.fromstring(the_html_above)\nfor tag in root.iter():\n    pass
processItemsNotTwo_case1(list1)\nlist2 = [1, 2, 2, 3, 4, 5]\nprocessItemsNotTwo_case2(list2)
try:\n    raise Exception(\\'foo\\')\nexcept Exception as e:\n    pass
I2 = iter(M)
import matplotlib.pyplot as plt\nimport numpy as np\nimport functools\nbwimshow = functools.partial(plt.imshow, vmin=0, vmax=255, cmap=plt.\n    get_cmap(\\'gray\\'))\ndots = np.random.randn(10, 10) * 255\nbwimshow(dots)\ncbar = plt.colorbar()\nplt.show()
import ast
import numpy.linalg
fracs = [15, 30, 45, 10]\ntotal = sum(fracs)
Q.__bases__ += QQ,
result = list()\nfor item in L:\n    pass
from beaker.cache import cache_managers\nfor _cache in list(cache_managers.values()):\n    pass
import imp\nfor k, v in list(sys.modules.items()):\n    if not hasattr(v, \\'__file__\\'):\n        continue\nif v.__file__.startswith(SYS_PREFIX):\n    continue\nif k == \\'__main__\\':\n    continue\nprint(\\'reloading %s [%s]\\' % (k, v.__file__))\nimp.reload(v)
def call_bug(self, name):\n    name.bug(self)
def func(x):\n    pass
plot(ax, ax, main=\\'Test\\')\narrows(0, 0, mag(v1), mag(v2), lwd=4, col=\\'red\\')
def gsm_location():\n    if e32.s60_version_info >= (3, 0):\n        ret = _location.gsm_location()\nif ret[4] == 1:\n    return int(ret[0]), int(ret[1]), ret[2], ret[3]\nelse:\n    pass
for se in setups:\n    pass
return ast.Call(func=ast.Attribute(value=ast.Name(id=\\'numpy\\', ctx=ast.Load(\n    )), attr=\\'float32\\', ctx=ast.Load()), args=[node], keywords=[], starargs\n    =None, kwargs=None)
p = cnt.get(item, 0)
df = pd.DataFrame(some_list, index=None)\ndf = df.groupby(by=\\'race\\').count().transpose()\nfor col in df.columns:\n    rw = df.loc[df[col] == 0]
import serial\ns = serial.Serial(port=\\'/dev/tty.usbmodemfa141\\', baudrate=9600)\ns.write(\\'text\\')
def UtcNow():\n    pass
row2 = adj_matrix[mapping[:row]]\nreturn np.all(row1 == row2)
b = BitArray(bin=\\'11111111\\')\nb.uint
class IYourSchema(model.Schema):\n    pass
from rest_framework import serializers\n\n\nclass TaskListSerializer(serializers.ListSerializer):\n    child = TaskSerializer()\nallow_null = True\nmany = True
nb.train(v)\nprint(nb.classes)
@lru_cache(maxsize=256)\ndef f(x):\n    return x * x\nfor x in range(20):\n    print(f(x))\nfor x in range(20):\n    pass
from pycallgraph.output import GraphvizOutput
def get(self, name=None):\n    if name is None:\n        \\"\\"\\"deal with the /rest/users case\\"\\"\\"
def is_even(i):\n    return not is_odd(i)\n[(j, is_odd(j)) for j in range(10)]
import matplotlib.cm as cm\nx, y, temp = np.loadtxt(\\'data.txt\\').T\nnrows, ncols = 100, 100\ngrid = temp.reshape((nrows, ncols))\nplt.imshow(grid, extent=(x.min(), x.max(), y.max(), y.min()), interpolation\n    =\\'nearest\\', cmap=cm.gist_rainbow)\nplt.show()
A\nA.ravel()[np.random.choice(A.size, c, replace=False)] = np.nan
def activated_radio_button(x, list):\n    pass
application = Flask(__name__)\n\n@application.route(\\'/\\', methods=[\\'GET\\', \\'POST\\'])\ndef index():\n    if request.method == \\'POST\\':\n        pass
if isinstance(k, Connection):\n    return v[1].xid
def probit_phi(x):\n    \\"\\"\\" Probit transform assuming 0 mean and 1 sd \\"\\"\\"\nmu = 0\nsd = 1\nreturn 0.5 * (1 + tsr.erf((x - mu) / (sd * tsr.sqrt(2))))
def text_message(self, msg):\n    user = User.get_or_insert(msg.sender)\nif not user.partner:\n    other = db.Query(User).filter(\\'partner =\\', None).fetch(2)
map(str, x)\nmap = __global_map
print(update_stmt.compile(dialect=mysql.dialect(), compile_kwargs={\n    \\'literal_binds\\': True}))
break\nif not ready:\n    break\nif not ready:\n    Q.appen(task)\nelse:\n    done.appen(task)\nfor S, w in G[task]:\n    Q.append(S)
def get_true_text(tag):\n    children = tag.find_elements_by_xpath(\\'*\\')\noriginal_text = tag.text\nfor child in children:\n    pass
output = (\n    \\'First variable is {0}, second variable is {1} and finally the addition is {2}\\'\n    .format(instance.Value1, instance.Value2, result))\nmyfile.write(output)\nmyfile.close()
if _caching.get(**kwargs):\n    request.handler = None
def pre_clear_handler(sender, *args, **kwargs):\n    pass
g.annotate(stats.pearsonr)\ng.ax_marg_x.set_axis_off()\ng.ax_marg_y.set_axis_off()
try:\n    base_path = sys._MEIPASS\nexcept Exception:\n    pass
result = SomeComplexModel.objects.all()\nprint(\\'Finished db query, took \\', time.time() - start)
proc.communicate(\n    \\"\\"\\"\nset xrange [0:10]; set yrange [-2:2]\nplot sin(x)\npause 4\n\\"\\"\\")
result = sorted(sub_lst)[0]\nprint(sub_lst)
result = Link(self.first, result)
if repeat != \\'y\\':\n    c.execute(\\'INSERT INTO Hand (number, word) VALUES (null,?)\\', [wordin[\n        wordnum]])\nprint(wordin[wordnum])\ndata.commit()\nc.execute(\\'commit\\')
def merge_sort(m):\n    l = [[x] for x in m]\nwhile len(l) > 1:\n    for x in range(len(l) >> 1):\n        l[x] = merge(l[x], l.pop())
for entry_point in pkg.iter_entry_points(\\'group_name\\'):\n    pass
obj.update()\nif obj.getRect().colliderect(world[ID].getRect()):\n    pass
values = {\\'one\\': \\'one\\', \\'two\\': \\'two\\', \\'three\\': \\'three\\', \\'four\\': \\'four\\',\n    \\'five\\': \\'five\\', \\'six\\': \\'six\\', \\'seven\\': \\'seven\\'}\nsorted_values = sorted(list(values.items()), key=lambda val: val[0])
import datetime\nmonthinteger = 4\nmonth = datetime.date(1900, monthinteger, 1).strftime(\\'%B\\')\nprint(month)
for jj in range(len(Q)):\n    pass
ax.matshow(corr)\nplt.xticks(list(range(len(corr.columns))), corr.columns)\nplt.yticks(list(range(len(corr.columns))), corr.columns)
media_frame = pd.DataFrame(pd.DataFrame(np.random.choice(list(letters), \n    9500 * 800 * 3).reshape(3, -1)).sum().values.reshape(9500, -1))\nu = np.unique(media_frame.values)\nfrom_filenames = pd.Series(u)\nto_filenames = from_filenames.str[1:] + from_filenames.str[0]\nm = pd.Series(to_filenames.values, from_filenames.values)
if var == \\'stringone\\' or var == \\'stringtwo\\' or var == stringthree:\n    pass
Blues = plt.get_cmap(\\'Blues\\')\nprint(Blues(0))\nprint(Blues(0.5))\nprint(Blues(1.0))
from matplotlib.colors import ListedColormap\nsm = plt.cm.ScalarMappable(cmap=ListedColormap(color_palette), norm=plt.\n    Normalize(vmin=0, vmax=3))\nsm._A = []\nplt.colorbar(sm)
tgt = arr.slice(i)
df[\\'A\\'].loc[85:89] = np.random.randint(5000, 10000, size=5)\nbins = [0, 400, 800, 1200, 1600, 2000, 2400, 2800, 3200, 3600, 4000, 4400]
s = (\n    \\"\\"\\"144,1231693144,26959535291011309493156476344723991336010898738574164086137773096960,26959535291011309493156476344723991336010898738574164086137773096960,1.00,4295032833,1563,2747941 288,1231823695,26959535291011309493156476344723991336010898738574164086137773096960,26959535291011309493156476344723991336010898738574164086137773096960,1.00,4295032833,909,4725008\\"\\"\\"\n    )
\\'hello\\' * 2 == \\'hellohello\\'\n\\'hello\\' * 1 == \\'hello\\'
denominator = df.sum(0).sum(0)\nreturn numerator.floordiv(denominator)
import shlex
from sphinx.ext import autodoc
if result.get(\\'id\\', False):\n    \\"\\"\\"Successfully Created Event\\"\\"\\"\nelse:\n    pass
store_file(new_file, nchunks, hash)\n\ndef store_file(file, nchunks, hash):\n    pass
20000000000.0\nprint(2 * 10 ** 10)\n20000000000
dic
register = template.Library()\n\n@register.filter\ndef duration(td):\n    pass
for date in dates:\n    if (date - result[-1]).days >= k:\n        result.append(date)\nreturn result
\\"\\"\\" Remove class names which are ignore in id generation.\n    Validate class value according to ID generation rule.\n\\"\\"\\"
win_width = win_geo.width()\nwin_height = win_geo.height()
globalMax = maxForRow.max()
class MySpider(BaseSpider):\n    name = \\'myspider\\'\n\ndef __init__(self, name=None, **kwargs):\n    pass
from drivers import visa\nfrom pyVisa import visa as pyvisa
if __name__ == \\'__main__\\':\n    for i in range(0, 500):\n        timestamp = AccurateTimeStamp()\nprint(GetAccurateTimeStampString(timestamp))
user = serializer.save()
def is_hidden(filepath):\n    name = os.path.basename(os.path.abspath(filepath))\nreturn name.startswith(\\'.\\') or has_hidden_attribute(filepath)
x, y = list(range(0, 10)), list(range(0, -10, -1))\nx
import datetime as dt\ndt.datetime.strptime(\\'30MAR1990\\', \\'%d%b%Y\\')
def round_floats(o):\n    pass
a = 257
df = pd.DataFrame({\\'Name\\': [\\'A\\'], \\'start\\': [datetime(2000, 1, 10)], \\'end\\':\n    [datetime(1970, 4, 29)]})\ndf[\\'diff\\'] = map(lambda td: datetime(1, 1, 1) + td, list(df[\\'start\\'] - df[\n    \\'end\\']))
angle = radians(self.theta - self.delta * pos)
def print_data(data):\n    print(data)\nprint_data(data)
X_digits = np.array(x)\nY_digits = np.array(y)\nloo = cross_validation.LeaveOneOut(len(Y_digits))\nregr = linear_model.LinearRegression()\nscores = cross_validation.cross_val_score(regr, X_digits, Y_digits, scoring\n    =\\'mean_squared_error\\', cv=loo)\nprint(scores.mean())
@lru_cache(maxsize=128)\ndef save_station(s):\n    pass
def pairs(items):\n    items_iter = iter(items)
class OverwriteStorage(FileSystemStorage):\n    \\"\\"\\"\n    Returns same name for existing file and deletes existing file on save.\n    \\"\\"\\"\n\ndef _save(self, name, content):\n    if self.exists(name):\n        self.delete(name)\nreturn super(OverwriteStorage, self)._save(name, content)
def simulate(theta, ticks):\n    thetas = []\nfor _ in range(ticks):\n    theta = simulate1(theta)\nthetas.append(theta)\nreturn thetas
import sys
a = defaultdict(hi)\na[\\'hello\\']
func = getattr(self, key)
for dt, val in lis:\n    pass
iterator = iter(values)
file = webgatelogdir + \\'/\\' + fn\nfiletime = time.localtime(filetimesecs)
fp.set_preference(\\'network.proxy.http\\', PROXY_HOST)\nfp.set_preference(\\'network.proxy.http_port\\', int(PROXY_PORT))\nfp.set_preference(\\'general.useragent.override\\', \\'whater_useragent\\')
self.widget_layers.setContextMenuPolicy(Qt.ActionsContextMenu)\nremoveLayerAction = QAction(\\'Remove selected layer\\', self)\nself.connect(removeLayerAction, SIGNAL(\\'triggered()\\'), self.\n    layers_widget_controller.remove_selected_layer)
def test_list_users(self):\n    result = list_users()
category1[{\\'Green\\': 1, \\'Red\\': 3}]\ncategory2[{\\'Plane\\': 3, \\'Car\\': 1}]\ncategory3[{\\'Banana\\': 1, \\'Orange\\': 3}]
\\"\\"\\"{:02}\\"\\"\\".format(1)\n\\"\\"\\"{:02}\\"\\"\\".format(100)
DATABASE_HOST = \\'localhost\\'\nDATABASE_NAME = \\'ORCL\\'\nDATABASE_USER = \\'scott\\'
f()\ngd[\\'x\\'] = 1\nf()
unicodedata.normalize(\\'NFKC\\',\n    \\'\ufb00\xf1\u2168\ufb03\u2075Ka\xc5\xe9\u1d2e\u1d35\u1d33\u1d2e\u1d35\u1d3f\u1d30\\'\n    )\nunicodedata.normalize(\\'NFKC\\',\n    \\'\ufb00\xf1\u2168\ufb03\u2075Ka\xc5\xe9\u1d2e\u1d35\u1d33\u1d2e\u1d35\u1d3f\u1d30\\'\n    ).lower()
writeln(\\'Calling internal foo\\')\nwriteln(intArray)
def start_requests(self):\n    pass
def media(self):\n    js = [\\'app/static_files.js\\', \\'app/static_files_2.js\\']
if self.im_mode == \\'P\\':\n    pass
if __name__ == \\'__main__\\':\n    w = distanceM()\nD = diag(w)\nL = D - w\nw, vr = eig(L)\nprint(vr)
import cairo\nimport rsvg
data = Data(*row)
l = [\\'|\\', \\'MOM\\', \\'DAD\\', \\'|\\', \\'GRAND\\', \\'|\\', \\'MOM\\', \\'MAX\\', \\'JULES\\', \\'|\\']\nkey = lambda sep: sep == \\'|\\'\n[list(group) for is_key, group in itertools.groupby(l, key) if not is_key]
import numpy as np
from collections import namedtuple\nrange_tuple = namedtuple(\\'range_tuple\\', \\'low high\\')
stop = time.time() + 10000\nwhile time.time() < stop:\n    pass
query = session.query(table_a, table_b)\nquery = query.filter(table_a.id == table_b.id)\nsubquery = session.query(table_c.id)
res = g()
delta = timedelta(hours=offset / 100)\nfmt = \\'%a, %d %b %Y %H:%M:%S\\'\ntime = datetime.strptime(\\'Tue, 22 Jul 2008 08:17:41 +0200\\'[:-6], fmt)\ntime -= delta
\\"\\"\\"\n/etc/pki/tls/certs/ca-bundle.crt\n/etc/ssl/certs/ca-certificates.crt\n/usr/share/ssl/certs/ca-bundle.crt\n/usr/local/share/certs/ca-root.crt\n/etc/ssl/cert.pem\n/System/Library/OpenSSL/certs/cert.pem\n\\"\\"\\"
import re\n\ndef natural_sorted(iterable, reverse=False):\n    \\"\\"\\"Return a list sorted the way that humans expect.\\"\\"\\"\n\ndef convert(text):\n    return int(text) if text.isdigit() else text\n\ndef natural(item):\n    return map(convert, re.split(\\'([0-9]+)\\', item))\nreturn sorted(iterable, key=natural, reverse=reverse)
def pickleLoader(pklFile):\n    pass
\\"\\"\\"\n(?(DEFINE)\n    (?<amount>\\d[\\d.,]+)    \n    (?<currency1>Rs\\.?\\ ?)  \n    (?<currency2>INR)       \n)\n(?|\n    (?&currency1)\n    (?P<money>(?&amount))\n|\n    (?P<money>(?&amount))\n    (?=\\ (?&currency2))\n)\n\\"\\"\\"
D[\\'A\\'][\\'C\\'][\\'weight\\'] = 1\nprint(nx.pagerank(D))
make
import configparser\nfilename = \\'config\\'
mask2 = df.b2.str.len() == 0\ndf.loc[mask1, \\'b1\\'] = df.loc[mask1, \\'a1\\']\ndf.loc[mask2, \\'b2\\'] = df.loc[mask2, \\'a2\\']
for feature in features_selected:\n    pass
class FlaskExtension(object):\n\n    def __init__(self, app=None, db=None):\n        self.app = app\nself.db = db\nif app is not None and db is not None:\n    pass
lst = [1, 2]\nmock = MagicMock(side_effect=lst)\nmock(), mock()\nmock.side_effect = lst\nmock(), mock()
aString = \\'C((H2)(C(H3))) C((H1)(Cl1)) C((C(H3))3)\\'\naList = aString.split()
import re\n\ndef get_ip():\n    pass
serves_hot_dogs = models.BooleanField()\nserves_pizza = models.BooleanField()
x
import rpy2.robjects as ro\nimport pandas as pd\nimport pandas.rpy.common as com\nro.r.source(\\'C:\\Path\\To\\R script.R\\')\npydf = com.load_data(\\'rdf\\')\ncols = pydf[[1, 3, 5]]
if a - k in H:\n    ans += 1
mock.side_effect = lst\nmock(), mock()
mask = df1.notnull() & df2.notnull() & df3.notnull()\nprint(mask)
import networkx as nx\nG = nx.Graph()\nG.add_edges_from((i, j) for i, j, sim in edges if sim >= THRESHOLD)
timing = dfWeeks.index.values[:, (None)] < dfDays.index.values\ntarget_hit = dfWeeks.target.values[:, (None)] <= dfDays.price.values\nmatches = timing & target_hit\ngot_match = matches.any(1)\nfirst = matches.argmax(1)[got_match]\ndfWeeks.loc[got_match, \\'target_hit\\'] = dfDays.index.values[first]\ndfWeeks
Q = ureg.Quantity\nureg.define(UnitDefinition(\\'percent\\', \\'pct\\', (), ScaleConverter(1 / 100.0)))\na = Q(5, \\'pct\\')\nprint(a)\nprint(a.to(\\'dimensionless\\'))
def parse_async():\n    pass
import numpy
cs = cm.Set1(np.arange(40) / 40.0)\nf = plt.figure()
from string import ascii_lowercase\nletters.lower() in ascii_lowercase
import psycopg2
import urllib.request, urllib.error, urllib.parse\nimport json
while responses and math.isnan(responses[-1]):\n    pass
def versions(name):\n    pass
df\ndf.columns.map(lambda x: \\'\\'.join(*zip(*x)))\ndf.columns = df.columns.map(lambda x: \\'\\'.join(*zip(*x)))
plt.plot(x, splev(x, f, der=1) / 10, label=\\'1st derivative\\')\nplt.hlines(0, 0, 2)
s = \\'The mobile web is more important than mobile apps.\\'\ns = parse(s, relations=True, lemmata=True)\nprint(s)
[chunk for chunk in ne_chunk(tagged_sent) if isinstance(chunk, Tree)]
pattern = (\n    \\'(?P<DEF_FUNC>def (?P<NAME_FUNC>\\w+)\\s*\\((.*?)\\):)|(?P<OTHERS>\\w+)\\')
import os\nimport sys\nPROJECT_ROOT = os.path.dirname(__file__)
parser.add_argument(\\'--foo\\', nargs=\\'*\\', default=[\\'1\\', \\'2\\', \\'3\\'])\nargs = parser.parse_args()\nargs.foo\nargs = parser.parse_args([\\'--foo\\', \\'a\\', \\'b\\'])\nargs.foo
with open(\\'trialWrite1.py\\', \\'wb\\') as fileobj:\n    newFile = csv.writer(fileobj)\nfor row in zip(firstNames, midterm1Scores):\n    pass
for key in dir(Task):\n    if key.startswith(\\'cmd\\'):\n        pass
reps = 500\nstdout = open(\\'add_numbers_outputs.log\\', \\'w\\')\nstderr = open(\\'add_numbers_errors.log\\', \\'w\\')
encodings_to_try = [r.encoding]
indexer = StringIndexer(inputCol=\\'label\\', outputCol=\\'indexed\\').fit(df)\ndf_indexed = indexer.transform(df)\nmodel = RandomForestClassifier(numTrees=3, maxDepth=2, labelCol=\\'indexed\\',\n    seed=42).fit(df_indexed)
f
if initializer is None:\n    value = next(it)
def Hasher(object):\n\n    def __init__(self):\n        self.md5 = hashlib.md5()\n\ndef get_hash(self, o):\n    self.md5.update(o)
my_namespace = {}
import random
with transaction(retries=3) as cursor:\n    cursor.execute(\\'BLAH\\')
def gen_expensive(mylist):\n    for item in mylist:\n        result = expensive(item)\nif result:\n    pass
results = []\nfor i in range(len(maxepochs)):\n    pass
s = MagicString(\\' 1234    Q-24 2010-11-29         563   abc  a6G47er15\\')\ns.magicSplit()
p = pkl.dumps(sorted(s))
x = foo(1, 2)\nx(3)\ny = foo(100, 0)\ny(1)\nx(1)
def f1(s):\n    pass
parser.add_argument(\\'--content\\', metavar=\\'file\\', default=\\'content.txt\\',\n    type=argparse.FileType(\\'r\\'), help=\n    \\'file to process (defaults to content.txt)\\')
a = np.array([1, 2, 3, 4, 5])\na < 3\na[a < 3]\na[a < 3] = -1
import numpy as np\nimport pandas as pd
for item in items:\n    pass
def calc_kernel(samp):\n    pass
from itertools import chain\nfor k, v in chain(iter(d1.items()), iter(d2.items()), iter(d3.items())):\n    pass
batchEntry.changeInputValueLocal(updateReference)
import json\nimport urllib.request
from test_module import *\na()
with document(title=\\'Photos\\') as doc:\n    h1(\\'Photos\\')\nfor path in photos:\n    div(img(src=path), _class=\\'photo\\')\nwith open(\\'gallery.html\\', \\'w\\') as f:\n    pass
out[..., (0)] = np.arange(m)[:, (None)]\nout[..., (1)] = np.arange(n)
start = dates.get_loc(pandas.datetools.parse(\\'1-2-2013\\'))\nend = start + 30\narma = tsa.ARMA(data[\\'Close\\'].values, order=(2, 2))\nresults = arma.fit()\nresults.predict(start, end)
df = pd.DataFrame(np.random.randint(0, 10, size=(100, 2)), columns=[\\'type\\',\n    \\'subtype\\'])\ncounts = pd.crosstab(df.type, df.subtype)\nprint(counts.loc[0, [2, 3, 5, 6]].sum() + counts.loc[5, [3, 4, 7, 8]].sum())
return True
with session.begin():\n    pk = 123\nbike = session.query(Bike).filter_by(bike_id=pk).first()
for i in Class1:\n    for j in Class2:\n        for k in Class3:\n            pass
for x in x_values:\n\n    def fun(E):\n        distance = np.sqrt(E * E + x * x)\nreturn np.tanh(1477.92 * distance) / distance
for _, child, post_count in childforums:\n    if child is None:\n        pass
class SocialGroup(Document):\n    pass
import mechanize\nimport urllib.request, urllib.parse, urllib.error\nbrowser = mechanize.Browser()\nparameters = {\\'parameter1\\': \\'your content\\', \\'parameter2\\':\n    \\'a constant value\\', \\'parameter3\\':\n    \\'unique characters you might need to extract from the page\\'}\ndata = urllib.parse.urlencode(parameters)\nbrowser.open(post_url, data)\nbrowser.open(post_url + \\'%s\\' % data)
class Desc:\n\n    def __set_name__(self, owner, name):\n        self.name = name\n\ndef __set__(self, inst, value):\n    inst.__dict__[self.name] = value\nprint((\\'set\\', self.name))\n\n\nclass Test:\n    pass
nbLamps = 200000
def __len__(self):\n    print(\\'eggs\\')
def copy_table(src_session, src_class, dst_session, dst_class):\n    r = src_session.query(src_class).all()\nfor i in r:\n    pass
toint = lambda x: int(x)
driver.maximize_window()\ndriver.get(url)\nwait = WebDriverWait(driver, 10)\nwait.until(EC.visibility_of_element_located((By.CSS_SELECTOR,\n    \\'#mCSB_3_container table tbody tr\\')))\ndfs = pd.read_html(driver.page_source)\ndriver.close()\nprint(dfs)
py > matrix[2][4]\n8\npy > matrix[-1][2]
from bokeh.plotting import *\noutput_file(\\'foo.html\\')\ninds = [str(x) for x in [2, 5, 6, 8, 9]]\ncolors = [\\'red\\', \\'orange\\', \\'blue\\', \\'green\\', \\'#4488aa\\']\nrect(inds, inds, 1.0, 1.0, color=colors, x_range=inds, y_range=inds)\nshow()
def foo():\n    \\'c\\' + \\'a\\' + \\'t\\'\nfrom dis import dis\ndis(foo)
unique(c(deletions1(splits), transpositions(splits), replacements1(splits),\n    insertions1(splits)))
with open(\\'filename\\') as origin_file:\n    for line in origin_file:\n        line = re.findall(\\'something\\', line)
pp = pd.Period(\\'2013-12\\', \\'M\\')\nprint(pp)
st = {1, 2, 3}\nv = [1, 4, 5]\nst.isdisjoint(v)
pos = -neg\ncombined = numpy.zeros(len(neg) + len(pos))
for x in range(len(l) >> 1):\n    l[x] = merge(l[x], l.pop())
for i in range(n):\n    j += 1\nn = 1000000
pass
import platform\nplatform.node()\nimport socket\nsocket.gethostname()
from django.db import IntegrityError\nfrom django.shortcuts import render_to_response
def fromAtoB(A, B):\n    r, w = select.select([A], [B], [])\nif not r:\n    pass
resp, data = m.uid(\\'fetch\\', uid, \\'(BODY[HEADER])\\')
class AuthorForm(ModelForm):\n    pass
if k != \\'en\\':\n    pass
class CommaEndingPrettyPrinter(PrettyPrinter):\n\n    def pprint(self, object):\n        self._format(object, self._stream, 0, 0, {}, 0)
import sys\nif __name__ == \\'__main__\\':\n    from django.core.management import execute_from_command_line
articles = Article.objects.raw(\n    \\'SELECT * from article where id > %s and id < %s\\' % (min, max))\nfor old_article in articles:\n    article.save()
test
for el in s.recurse():\n    if \\'Instrument\\' in el.classes:\n        el.activeSite.replace(el, instrument.Violin())\ns.write(\\'midi\\', \\'/Users/cuthbert/Desktop/newfilename.mid\\')
import random\nx = [1, 2, 3, 4, 3, 4]\nrandom.shuffle(x)\nx
from django.conf import settings\nfrom django.conf.urls.static import static
class Desc:\n\n    def __set_name__(self, owner, name):\n        self.name = name
class Song(SQLObject):\n    name = StringCol()
import sounddevice as sd\n\ndef callback(indata, outdata, *stuff):\n    outdata[:] = indata * [1, 0.5]\nwith sd.Stream(channels=2, callback=callback):\n    eval(input())
timeit.timeit(\\'10**100*10**100*0\\')\ntimeit.timeit(\\'0*10**100*10**100\\')
mrg = pd.merge_asof(df_b, df_a, **kws).query(\\'date <= end\\')\ngrp = mrg.groupby([\\'start\\', \\'end\\', \\'ID\\']).amount.sum()
import numpy as np\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestRegressor\nX = np.asarray([(\\'a\\', 1, 2), (\\'b\\', 2, 3), (\\'a\\', 3, 2), (\\'c\\', 1, 3)])\ny = np.asarray([1, 2.5, 3, 4])\nX[:, (0)] = LabelEncoder().fit_transform(X[:, (0)])\nregressor = RandomForestRegressor(n_estimators=150, min_samples_split=1)\nregressor.fit(X, y)\nprint(X)\nprint(regressor.predict(X))
g = QPainter(img)\ng.setRenderHint(QPainter.Antialiasing)\ng.setBrush(QColor(img.pixel(20, 20)))\ng.drawEllipse(QPoint(20, 20), 10, 10)\ng.end()\nimg.save(\\'output.png\\')
rows = cursor.fetchall()\nfor idx in range(10):\n    pass
@memory.cache\ndef run(x):\n    print(\\'called with {}\\'.format(x))\nreturn x
start_col = col_slice.start\nend_col = col_slice.stop
variants = {\\'a\\': \\'[a\xe6\xe5]\\', \\'o\\': \\'[o\xf8\xe5]\\', \\'ae\\':\n    \\'(?:ae|\xe6)\\', \\'ea\\': \\'(?:ea|\xe6)\\', \\'aa\\': \\'(?:aa|\xe5)\\', \\'oe\\':\n    \\'(?:oe|\xf8)\\', \\'\\\xe5\\': \\'(?:[o\xe5]|aa?)\\', \\'\\\xf8\\':\n    \\'(?:\xf8|oe?)\\', \\'\\\xe6\\': \\'(?:\xe6|ae?|ea)\\'}\nsearch = re.escape(search)\nsearch = re.sub(\\'[ae]a|[ao]e?|\\\\[\xe5\xf8\xe6]\\', lambda m: variants[m.\n    group(0)], search)\nreturn re.search(search, content) is not None
arr2 = arr1[0]
def query(queryurl):\n    pass
best_score = rf.oob_score_
from ...common import foo
if config:\n    pass
if pid == 0:\n    pass
class Account(models.Model):\n    pass
container = client.create_container(image=\\'busybox:latest\\', stdin_open=True,\n    tty=True, command=\\'/bin/sh\\')
import sys\nif sys.argv[1] == \\'hi\\':\n    pass
from freezegun import freeze_time\n\n@freeze_time(\\'2012-01-14\\')\ndef test():\n    pass
from repoze.who.api import get_api\nwho_api = get_api(request.environ)\ncreds = {}\ncreds[\\'login\\'] = yourusername\ncreds[\\'password\\'] = yourpassword\nauthenticated, headers = who_api.login(creds)
class myClass:\n\n    def __init__(self):\n        self.d = {}\n\ndef addValue(self, index, value):\n    pass
numpy.iinfo(numpy.uint64).max\nnumpy.finfo(numpy.float64).max
total = int(t_end / t_step)\nfor x in itertools.accumulate(t_step for i in range(total + 1)):\n    pass
current_date = \\'01/Aug/1995:23:59:53\\'\nYr = int(current_date[7:11])\nMo = moDict[current_date[3:6]]\nDay = int(current_date[0:2])
quotes = [(1, 5, 6, 7, 4), (2, 6, 9, 9, 6), (3, 9, 8, 10, 8), (4, 8, 8, 9, \n    8), (5, 8, 11, 13, 7)]\nax = plt.gca()\nh = matplotlib.finance.candlestick(ax, quotes)
def my_m2m_signal(sender, **kwargs):\n    action = kwargs.get(\\'action\\')
reply = QtGui.QMessageBox.question(self, \\'Message\\', quit_msg, QtGui.\n    QMessageBox.Yes, QtGui.QMessageBox.No)\nif reply == QtGui.QMessageBox.Yes:\n    pass
class FakeRestaurant(models.Model):\n    place_ptr = models.PositiveIntegerField(db_column=\\'place_ptr_id\\',\n        primary_key=True)\nserves_hot_dogs = models.BooleanField()\nserves_pizza = models.BooleanField()\n\n\nclass Meta:\n    pass
class MyCustomException(Exception):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\nself.__suppress_context__ = True
app.jinja_options = Flask.jinja_options.copy()\napp.jinja_options[\\'loader\\'] = ModifiedLoader(app)
widthscale = len(yvalues) / 4\nfigsize = 8 * widthscale, 6
def f(var, xs):\n    return var[0] * np.exp(-var[1] * xs) + var[2]\n\ndef func(var, xs, ys):\n    return f(var, xs) - ys\n\ndef dfunc(var, xs, ys):\n    v = np.exp(-var[1] * xs)\nreturn [v, -var[0] * xs * v, np.ones(len(xs))]\nxs = np.linspace(0, 4, 50)\nys = f([2.5, 1.3, 0.5], xs)\nyn = ys + 0.2 * np.random.normal(size=len(xs))\nfit = leastsq(func, [10, 10, 10], args=(xs, yn), Dfun=dfunc, col_deriv=1)
import pandas as pd\nf = io.StringIO(\n    \\'foo,bar,baz,qux\n\u7f8e\u570b\u7cbe,\u795e\u91ab\u5b78,\u5b78\u6703\u662f,\u7f8e\u570b\u7cbe\u795e\n\u79d1\u91ab\u751f,\u7684\u5c08\u696d,\u7d44\u7e54\u5728,\u884c\u5167\u5177\u6709\n\u5168\u7403\u6027,\u7684\u5f71\u97ff,\u529b\u73fe\u6709,\u7d04\u540d\u6703\u54e1\\'\n    )\ndataframe = pd.read_csv(f)
a = np.array([[0.1, 0.32, 0.2, 0.4, 0.8], [0.23, 0.18, 0.56, 0.61, 0.12], [\n    0.9, 0.3, 0.6, 0.5, 0.3], [0.34, 0.75, 0.91, 0.19, 0.21]])
wanted_set = set(wanted)
for number, (truth, sentence) in enumerate(sentences):\n    if truth:\n        first_n_sentences = previous + \\'\\'.join(sentence).replace(\\'\n\\', \\' \\')\nprevious = \\'\\'.join(sentence)\nif number >= 2 * n:\n    break\nreturn first_n_sentences
class BaseAccess:\n\n    def open(arg):\n        raise NotImplementedError()
import numpy as np
X = np.array([[1, 2], [3, 4], [1, 2], [3, 4], [1, 2], [3, 4]])\ny = np.array([1, 2, 3, 4, 5, 6])
shapes = [\\'lip_shapes1.png\\', \\'lip_shapes4.png\\', \\'lip_shapes11.png\\',\n    \\'lip_shapes3.png\\']\ncmd = [\\'convert\\', \\'-loop0\\'] + shapes + [\\'anime.gif\\']\nretcode = subprocess.call(cmd)
max_ = data.Before.map(lambda x: len(x)).max()\nlengths_ = data.Before.map(lambda x: len(x))\ndiffs_ = max_ - lengths_
a = 3\nlist(globals().keys())
if __name__ == \\'__main__\\':\n    server = ThreadedTCPServer(serverAddr, SomeCode)\nserver_thread = threading.Thread(target=server.serve_forever)\nserver_thread.start()\ntry:\n    signal.pause()\nexcept:\n    pass
print(sys.float_info.min)
urlsrc = \\'http://example.com/source\\'\nrsrc = requests.get(urlsrc)\nurldst = \\'http://example.com/dest\\'
pattern = regex.compile(\n    \\'%.*(*SKIP)(*FAIL)|\\\\section{.*}(*SKIP)(*FAIL)|(Astah|UML|use case)\\')
final_df.insert(1, \\'result_col\\', g.col4.apply(lambda x: x.eq(3).sum()))\nfinal_df
finder = BigramCollocationFinder.from_words(nltk.corpus.genesis.words(\n    \\'english-web.txt\\'))\nfinder.apply_freq_filter(3)\nfinder.nbest(bigram_measures.pmi, 5)
def recalc_last_hour():\n    dt = datetime.utcnow()
stringA = \\'xxxxxxFoundAaaaaaaaaaaaaaaFoundBxxxxxxx\\'\nstringB = \\'FoundA\\'\nstringC = \\'FoundB\\'
norm_rows = np.sqrt(np.add.reduceat(a.data * a.data, a.indptr[:-1]))\nnnz_per_row = np.diff(a.indptr)
f_handle, f_path = tempfile.mkstemp()\nwith os.fdopen(f_handle, \\'w\\') as f:\n    f.write(res)\ntry:\n    some_function(f_path)\nfinally:\n    pass
biglist = [[convert_ints(elt) for elt in line] for line in csv.reader(open(\n    filename, \\'r\\'), delimiter=\\'\t\\')]\nfor row in sortByColumn(biglist, 0):\n    print(row)\nfor row in sortByColumn(biglist, 2, 3):\n    pass
newListOfString = []\nfor item in listOfStrings:\n    newListOfString.append(split_len(item, 8)[0])
ProportionValue.Create(0.2, \\'b\\'),\nProportionValue.Create(0.1, \\'c\\')
class Color(Enum):\n    red = 1
mock_class = MagicMock(spec=[\\'a\\'])\nmock_class.a = MagicMock(spec=[\\'a\\'])
import pandas as pd\nimport numpy as np\nx = pd.Series([True, True, False, False], index=[1, 2, 3, 4])
def entity_intersections(ent, collidable):\n    find_inter = FindIntersectionsWrapper(ent, collidable)\npool = multiprocessing.Pool()
import zipfile\nf = zipfile.ZipFile(\\'gmpy2-2.0.0.win-amd64-py3.3.exe\\', \\'r\\')\nf.namelist()\nf.extract(\\'PLATLIB/gmpy2.pyd\\')
for s in i:\n    if s == sys.stdin:\n        input = sys.stdin.readline()\nreturn True\nreturn False
exec(compile(open(os.path.abspath(\\'../../common/conf.py\\')).read(), os.path.abspath(\\'../../common/conf.py\\'), \\'exec\\'))\nextensions = [\\'sphinx.ext.autodoc\\', \\'sphinx.ext.todo\\', \\'sphinx.ext.viewcode\\']
from google.appengine.ext.webapp import template\nfrom google.appengine.ext import db\nfrom models import *
if s.setSession():\n    response = make_response(redirect(\\'/home\\'))\nresponse.set_cookie(\\'session_id\\', s.session_id)
from urllib.parse import urlparse\nfrom urllib.parse import unquote\nurl = (\n    \\'http://www.example.com/action?c=1&v=3&c=4&d=%3A%24%23%40%3D%3F%25%5EQ%5E%24\\'\n    )\nurl = urlparse(url)\nparams = url.query.split(\\'&\\')\nparams = [tuple(p.split(\\'=\\')) for p in params]\nparams = [[unquote(p[0]), unquote(p[1])] for p in params]\nprint(params)
db.dogs.insert(dog_name=\\'daisy\\')
db.dogs.insert(dog_name=\\'dagwood\\')
f = manhole_ssh.ConchFactory(p)\nreturn f\nreactor.listenTCP(2222, getManholeFactory(globals()))\nreactor.run()
result = urllib.request.urlopen(\\'https://api.telegram.org/bot\\' + bot_id +\n    \\'/getUpdates\\').read()\nprint(result)\nresult = urllib.request.urlopen(\\'https://api.telegram.org/bot\\' + bot_id +\n    \\'/sendMessage\\', urllib.parse.urlencode({\\'chat_id\\': 0, \\'text\\': \\'my message\\'})\n    ).read()\nprint(result)
start = 1.5
import xlrd\nmainData_book = xlrd.open_workbook(\\'IEsummary.xls\\', formatting_info=True)\nmainData_sheet = mainData_book.sheet_by_index(0)\nfor row in range(1, 101):\n    rowValues = mainData_sheet.row_values(row, start_colx=0, end_colx=8)\ncompany_name = rowValues[0]\nlink = mainData_sheet.hyperlink_map.get((row, 0))\nurl = \\'(No URL)\\' if link is None else link.url_or_path\nprint(company_name.ljust(20) + \\': \\' + url)
import re\nre.findall(\\'\\d+|\\D+\\', s)\nre.split(\\'(\\d+)\\', s)
a.foo = \\'bar\\'\npickled = pickle.dumps(a)\nunpickled = pickle.loads(pickled)\nunpickled.foo
if sys.platform.startswith(\\'win\\'):\n    pass
folder_pidl = shell.SHILCreateFromPath(path, 0)[0]\ndesktop = shell.SHGetDesktopFolder()
if attribute[0] not in whitelist:\n    pass
for ii in range(200):\n    restart = False\nfor jj in range(200, 400):\n    pass
class YPAutocompleteLookup(AutocompleteLookup):\n    pass
import pygraphviz as PG
sess = imaplib.IMAP4()\nsess.login(\\'superuser\\', \\'password\\')\nsess.select(\\'INBOX/Luke\\')
request_token_url = \\'http://twitter.com/oauth/request_token\\'\nclient = oauth.Client(consumer)\nresp, content = client.request(request_token_url, \\'GET\\')
x = np.arange(0, 10, 0.01)\nytrue = np.exp(-x / 5.0) + 2 * np.sin(x / 3.0)
@property\ndef my_field(self):\n    pass
return DataFrame
if f is None:\n    return
Flask - SQLAlchemy == 1.0
result = defaultdict(dict)\nfor somestring, namesdict in list(initialdata.items()):\n    pass
a = Foo()\na()
simlen = 5\nfor c in columns:\n    for i in range(0, len(index), simlen):\n        plt.plot(index[i:i + simlen], dataset[i:i + simlen][c], color=dict(\n            A=\\'b\\', B=\\'g\\')[c], label=c if i == 0 else None)
ret = a.y < b.y\nreturn ret
len(u.bytes.encode(\\'base64\\'))\nu.bytes.encode(\\'base64\\')[:21]
lst
import re\ns = \\' as fa   sdf sdfsdf \\'\ns = re.sub(\\'\\s+\\', \\'\\', s)
def file_save():\n    f = tkFileDialog.asksaveasfile(mode=\\'w\\', defaultextension=\\'.txt\\')\nif f is None:\n    return\ntext2save = str(text.get(1.0, END))
r = sr.Recognizer()\nwith sr.Microphone() as source:\n    audio = r.listen(source)
yn = ys + 0.2 * np.random.normal(size=len(xs))
def makeGaussian(size, fwhm=3, center=None):\n    \\"\\"\\" Make a square gaussian kernel.\n    size is the length of a side of the square\n    fwhm is full-width-half-maximum, which\n    can be thought of as an effective radius.\n    \\"\\"\\"\nx = np.arange(0, size, 1, float)\ny = x[:, (np.newaxis)]\nif center is None:\n    pass
driver.find_element_by_css_selector(\\'input\\')\ndriver.quit()
msg = _(\\'invalid choice: %r (choose from %s)\\') % tup
ctrl_err(SQL_HANDLE_STMT, ODBC_obj.stmt_h, ret, ODBC_obj.ansi)
N, K = 2, 3\nA = np.random.randint(1, 5, (N, N, K))\nA
@api_view([\\'POST\\'])\ndef foo_view(request):\n    pass
m13 = datetime(2010, 3, 13, 8, 0, 0)\nm14 = datetime(2010, 3, 14, 8, 0, 0)\nmktime(m14.timetuple()) - mktime(m13.timetuple())
def get_ip():\n    group = re.compile(\\'(?P<ip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\').search(urllib.request.\n        URLopener().open(\\'http://jsonip.com/\\').read()).groupdict()\nreturn group[\\'ip\\']
matches = tagged.apply(nvm)
certificate_url = (\n    \\"\\"\\"https://www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com\\"\\"\\"\n    )\nresponse = urllib.request.urlopen(certificate_url)\ncerts = response.read()\ncerts = json.loads(certs)\nuser = jwt.decode(idtoken, certs, algorithms=\\'RS256\\', audience=target_audience)\nprint(user)
import json
def del_env(name):\n    key = OpenKey(HKEY_CURRENT_USER, \\'Environment\\', 0, KEY_ALL_ACCESS)\nDeleteValue(key, name)\nCloseKey(key)
import win32api, win32con, win32process
screen = pygame.display.set_mode(size)\nball = pygame.image.load(\\'ball.gif\\')
import pandas as pd\n\ndef strip(text):\n    pass
if self.on_ground:\n    pass
done = {name}
for _ in range(10):\n    x = Distance(_, unit=u.kpc)\nd.append(x.kpc)
class BaseClass(object):\n\n    def __new__(cls, *args, **kwargs):\n        if cls is BaseClass:\n            raise TypeError(\\'base class may not be instantiated\\')
edge_stats = defaultdict(lambda : list([0, 0.0]))
r_source = robjects.r[\\'source\\']\nr_source(\\'/path_to_file/myfunc.R\\')\nr_getname = robjects.globalenv[\\'getname\\']
f = lambda a, b, c, d, e: d / e
config = ConfigObj(path_to_ini)\nconfig[\\'TestSettings\\'][\\'environment\\'] = \\'some_other_value\\'
from Crypto import Random
root.withdraw()\ntext = root.clipboard_get()
dfmax = df.groupby(\\'idn\\')[\\'value\\'].max()\ndf.set_index(\\'idn\\', inplace=True)\ndf = df.merge(dfmax, how=\\'outer\\', left_index=True, right_index=True)\ndf.reset_index(inplace=True)
if proc.stdout.closed:\n    pass
hn = logging.NullHandler()\nhn.setLevel(logging.DEBUG)\nlogging.getLogger(\\'tornado.access\\').addHandler(hn)
li = [1, 2, 3]\nli.append(4)
y, m, d, hh, mm, ss, weekday, jday, dst = time.gmtime(t)\nss = min(ss, 59)\nreturn datetime.datetime(y, m, d, hh, mm, ss, us)
some_function(-5, 4)\nsome_function(\\'abc\\', 4)
name = \\'My project\\'\nversion = \\'1.2\\'\nrelease = \\'1.2.0\\'\nsetup(name=name, author=\\'Bernard Montgomery\\', version=release, cmdclass=\n    cmdclass, command_options={\\'build_sphinx\\': {\\'project\\': (\\'setup.py\\',\n    name), \\'version\\': (\\'setup.py\\', version), \\'release\\': (\\'setup.py\\', release)}}\n    )
df2 = df.copy()\nfor c in df.columns.levels[0]:\n    pass
df.select(integer_intersect(\\'xs\\', \\'ys\\'), size(integer_intersect(\\'xs\\', \\'ys\\'))\n    ).show()
A[:ph, pw:2 * pw]\nout[0]\nout[1]
original = md5(\\'email@example.com\\').digest()\nencoded = original.encode(\\'base64\\')
rowcount = -1
classif = SklearnClassifier(pipeline)
print(df.index.name)\nfoo\nprint(df.rename_axis(None))
try:\n    print(line.split(\\'\\"\\')[1])\nexcept IndexError:\n    pass
import subprocess\ngrep = subprocess.Popen([\\'grep\\', \\'-r\\', \\'PASSED\\'] + glob.glob(\\'*.log\\'),\n    stdout=subprocess.PIPE)
n = 1000\npairs = [(0.3, \\'a\\'), (0.3, \\'b\\'), (0.4, \\'c\\')]\nprobabilities = numpy.random.multinomial(n, zip(*pairs)[0])\nresult = zip(probabilities, zip(*pairs)[1])
def recordStringInHDF5(h5file, group, nodename, s, complevel=5, complib=\\'zlib\\'\n    ):\n    \\"\\"\\"creates a CArray object in an HDF5 file \n    that represents a unicode string\\"\\"\\"\nbytes = np.fromstring(s.encode(\\'utf-8\\'), np.uint8)\natom = pt.UInt8Atom()\nfilters = pt.Filters(complevel=complevel, complib=complib)\nca = h5file.create_carray(group, nodename, atom, shape=(len(bytes),),\n    filters=filters)\nca[:] = bytes\nreturn ca\n\ndef retrieveStringFromHDF5(node):\n    pass
listB = [[1, 20], [21, 17]]\nsetA = frozenset([frozenset(element) for element in listA])\nsetB = frozenset([frozenset(element) for element in listB])\nsetA\nsetB\nsetB <= setA
register = Library()\n\n@register.filter\ndef multiply(string, times):\n    pass
new = large_array[(large_array >= min_val) & (large_array <= max_val)]\nnew
response = \\'y\\'\nX = df[predictors]\ny = df[response]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\nclf = RandomForestClassifier(max_features=5)\nclf.fit(X_train.values, y_train.values)\nimportances = pd.DataFrame({\\'feature\\': X_train.columns, \\'importance\\': np.\n    round(clf.feature_importances_, 3)})\nimportances = importances.sort_values(\\'importance\\', ascending=False).set_index(\n    \\'feature\\')\nprint(importances)\nimportances.plot.bar()
import importlib\nmod = importlib.import_module(var1)\nmod
-2.6
webTitle = data[\\'d\\'][\\'Title\\']
import codecs
p.findall(s)\ns = \\"Hello. #It\\'s good to meet you # .\\'\\"\np.findall(s)
if row[ct] == kidname:\n    pass
code = ruamel.yaml.load(inp, Loader=ruamel.yaml.RoundTripLoader)
start_col = col_slice.start
def resize_image(f):\n    i = Image.open(f)\nsize_64 = 64, 64\nfn, fext = os.path.splitext(f)\ni.thumbnail(size_64)\nout_path = \\'resize/{}_64\\'.format(fn, fext)\ni.save(out_path)\nreturn out_path\ns_jpg_files = s_jpg_list.map(resize_image)\nprint((\\'Converted Images:\\', s_jpg_files.collect()))
raise
results = google_search(\\'stackoverflow site:en.wikipedia.org\\', my_api_key,\n    my_cse_id, num=10)\nfor result in results:\n    pprint.pprint(result)
while instance.update() != \\'running\\':\n    pass
data = StringIO.StringIO(zlib.decompress(content))
def has_permission(self, request, view):\n    if (request.method in SAFE_METHODS or request.user and request.user.\n        is_authenticated()):\n        return True
saveOptions.append(\\'QUALITY=75\\')\njpegDriver = gdal.GetDriverByName(\\'JPEG\\')\njpegDriver.CreateCopy(\\'imageFile.jpg\\', dataset, 0, saveOptions)
def isdebugging():\n    for frame in inspect.stack():\n        if frame[1].endswith(\\'pydevd.py\\'):\n            pass
if _locale_radix != \\'.\\':\n    num = num.replace(_locale_radix, \\'.\\')
commit = r.head.commit
with c as z:\n    pass
custom = Custom()\ndebugger = Debugger()
file = \\'sample.xml\\'\nxmldoc = xml.dom.minidom.parse(file)\ncomputerNode = xmldoc.getElementsByTagName(\\'computer\\')\nfor computerChild in computerNode:\n    for parts in computerChild.childNodes:\n        for partsChild in parts.childNodes:\n            if partsChild.nodeType == xml.dom.Node.ELEMENT_NODE:\n                if partsChild.tagName == \\'text\\':\n                    pass
for b in a:\n    pass
bucket = [None] * 100\nfor i in range(100):\n    pass
sidx = np.argsort(cols)\nIDs = sidx[np.searchsorted(cols, query_cols, sorter=sidx)]
url = (\n    \\'http://www.example.com/action?c=1&v=3&c=4&d=%3A%24%23%40%3D%3F%25%5EQ%5E%24\\'\n    )\nurl = urlparse(url)\nparams = url.query.split(\\'&\\')
for j in range(1, length):\n    o = choices[j]
import re
p_len = np.linalg.norm(p)\np_hat = p / p_len\nred_len = p_hat.dot(b_hat) * p_len\nred_point = s + red_len * b_hat
global TOTALPAGES\nif doc.page > TOTALPAGES:\n    TOTALPAGES = doc.page\nelse:\n    canvas.drawString(270 * mm, 5 * mm, \\'Seite %d/%d\\' % (doc.page, TOTALPAGES))
from selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait
class Customer(models.Model):\n    pass
\\"\\"\\" Overload the run method and remove all .py files after compilation\n\\"\\"\\"
\\"\\"\\" Overload the get_outputs method and remove any .py entries in the\nfile list \\"\\"\\"
myfile = open(\\'C:\\...\\testboostexample.txt\\', \\'w\\')\noutput = (\n    \\'First variable is {0}, second variable is {1} and finally the addition is {2}\\'\n    .format(instance.Value1, instance.Value2, result))\nmyfile.write(output)\nmyfile.close()
import ast\nmy_code = \\"\\"\\"\nprint \\"Hello\\"\ny = [x ** 2 for x in xrange(30)]\n\\"\\"\\"\nmodule = ast.parse(my_code)\nfor node in ast.walk(module):\n    if type(node) == ast.ListComp:\n        print(node.lineno)\nprint(node.col_offset)\nprint(node.elt)
step = -1 if b < a else 1\nfor x in range(a, b + step, step):\n    pass
class SliceExample(object):\n\n    def __getitem__(self, key):\n        if isinstance(key, slice):\n            return key.start, key.stop
from datasets import XORDataSet
def __mod__(self, other):\n    pass
if n < 100:\n    return comb(n, k) * p ** k * p ** (n - k)
g = gt.load_graph(\\'flow-example.xml.gz\\')\ncap = g.edge_properties[\\'cap\\']\nsrc, tgt = g.vertex(0), g.vertex(1)\nres = gt.boykov_kolmogorov_max_flow(g, src, tgt, cap)\nres.a = cap.a - res.a\nmax_flow = sum(res[e] for e in tgt.in_edges())\nprint(max_flow)\npos = g.vertex_properties[\\'pos\\']\ngt.graph_draw(g, pos=pos, pin=True, penwidth=res, output=\n    \\'example-kolmogorov.png\\')
m = str(d.month).rjust(2, \\'0\\')\nprint(m)
results = []\nfor result in pool_results:\n    results.extend(result)
AA = pd.DataFrame(d)\nprint(AA)
a = array((5, 2))\nb = ones((10, 2))
def multi(fn):\n    pass
import pytz\ntz = pytz.timezone(\\'US/Pacific\\')\nnaive_dt = datetime(2020, 10, 5, 15, 0, 0)
import datetime
import random, string\ndigits = \\'\\'.join(random.sample(string.digits, 8))\nchars = \\'\\'.join(random.sample(string.letters, 15))
pass
class ModelNameInlineFormSet(BaseInlineFormSet):\n    pass
(1)(2, 3, 4)\n(2)(1, 3, 4)\n(3)(1, 2, 4)\n(4)(1, 2, 3)
def put_wall_post(self, message, attachment=None, profile_id=\\'me\\'):\n    pass
class MyHandler(RequestHandler):\n\n    def initialize(self, database):\n        pass
from nltk.grammar import ContextFreeGrammar, Nonterminal
response[\\'Content-Disposition\\'\n    ] = \\'attachment; filename=%s\\' % fileModel.FileName\nresponse[\\'Accept-Ranges\\'] = \\'bytes\\'\nresponse[\\'X-Accel-Redirect\\'\n    ] = settings.MEDIA_URL + \\'/\\' + fileModel.FileData.MD5\nresponse[\\'X-Accel-Buffering\\'] = \\'no\\'\nreturn response
def every6(sin, c=\\'#\\'):\n    pass
class MySerializer(serializers.Serializer):\n    id = serializers.ReadOnlyField()\nfield1 = serializers.ReadOnlyField()\nfield2 = serializers.ReadOnlyField()\n\ndef to_representation(self, data):\n    pass
def sub_k_list(a, k):\n    p = len(a) // k\nreturn a if not p else [sub_k_list(a[:p], k), sub_k_list(a[p:], k)]
def crc(fileName):\n    pass
if authreq:\n    web.header(\\'WWW-Authenticate\\', \\'Basic realm=\\"Auth example\\"\\')
lst = lst.rest
def myvalidator(form, field):\n    if not form.some_checkbox_field.data:\n        pass
for i in prange(length):\n    if arr_view[i] >= thresh:\n        total += 1\nreturn total
class HistoryEventFieldLevel(db.Model):\n    date = db.DateTime()\nmodel = db.StringProperty()\nproperty = db.StringProperty()\naction = db.EnumProperty([\\'insert\\', \\'update\\', \\'delete\\'])\nold = db.PickleProperty()\nnew = db.PickleProperty()\n\n\nclass HistoryEventModelLevel(db.Model):\n    date = db.DateTime()\nmodel = db.StringProperty()\naction = db.EnumProperty([\\'insert\\', \\'update\\', \\'delete\\'])
from selenium.common.exceptions import NoSuchElementException
import subprocess\ncmd = [\\'/usr/bin/python\\', \\'/path/to/my/second/pythonscript.py\\']
train = df[msk]\ntest = df[~msk]
def fib(k=100):\n    \\"\\"\\" Generate fibonacci numbers up to k. \\"\\"\\"\na, b = 1, 2\nwhile a <= k:\n    yield a\na, b = b, a + b
if not distance >= kms:\n    cities.append((city.name, int(distance)))\ncities.remove(cities[0])\nreturn cities
from urllib.parse import urljoin\nfrom django.conf import settings
import datetime\n\ndef getUtcNow():\n    return datetime.datetime(*time.gmtime()[:6])
doc1 = \\'<p>Here is some text.</p>\\'\ndoc2 = \\'<p>Here is <b>a lot</b> of <i>text</i>.</p>\\'
driver.port._reconfigurePort()
run(workon + \\'git pull\\')\nrun(workon + \\'do other stuff, etc\\')
\\'john\\', \\'bob\\'\n\\'john\\', \\'bob\\'
start_token = \\"if pseudo_type == \\'nth-of-type\\':\\"\nend_token = \\'else\\'
from datetime import datetime, timedelta\n\ndef from_excel_ordinal(ordinal, epoch=datetime(1900, 1, 1)):\n    if ordinal > 59:\n        ordinal -= 1\ninDays = int(ordinal)\nfrac = ordinal - inDays\ninSecs = int(round(frac * 86400.0))\nreturn epoch + timedelta(days=inDays - 1, seconds=inSecs)\nexcelDT = 42548.75001\npyDT = from_excel_ordinal(excelDT)
a = np.array(elements, dtype=int)\na\na.max(axis=0)
unit = 40
result = sorted(sub_lst)[0]\nprint(sub_lst)\n[\\'ALLIGATOR\\', \\'BEAR\\', \\'ANTEATER\\', \\'DOG\\', \\'CAT\\']
inf = open(\\'data.txt\\')\nfor line in inf:\n    pass
break\nprint(\\'Got element:\\', elem)
def func(x):\n    \\'\x00\\'\nprint(func.__doc__)\n\ndef func(x):\n    pass
s = Solver()\ns.add(x <= x)\nprint(s.check())\nm = s.model()\nprint(m.evaluate(x))\nprint(m.evaluate(x, model_completion=True))\nprint(m)
for image in images:\n    a_link = image.xpath(\\'../@href\\').extract_first()
default = 0.025\ninput = input(\\'Enter the inputs : \\')
basepath = os.path.join(os.path.dirname(os.path.abspath(__file__)), \\'..\\')\nif basepath not in sys.path:\n    pass
importances = rf.feature_importances_
suite = unittest.TestLoader().loadTestsFromTestCase(MyTester)\nconcurrent_suite = testtools.ConcurrentStreamTestSuite(lambda : ((case,\n    None) for case in suite))\nconcurrent_suite.run(testtools.StreamResult())
def mouseMoveEvent(self, point):\n    if RestrictedHorizontaly:\n        x = point.x()\ny = self.lastPoint.y()
import time\nexample = \\'2013-10-20T00:41:32.000Z\\'\ndatetime.strptime(example, \\'%Y-%m-%dT%H:%M:%S.%fZ\\')
@login_required\n@active_required\ndef foo(request):\n    pass
for i in b:\n    pass
import os
from common import stuff
for col in fit_df.columns:\n    x = fit_df.index.astype(float).values\ny = fit_df[col].values\nparams = curve_fit(func, x, y, guess)\ncol_params[col] = params[0]\nfor col in df.columns:\n    x = df[pd.isnull(df[col])].index.astype(float).values\ndf[col][x] = func(x, *col_params[col])
b = [(a + i) for i in range(3)]\ndis.dis(f.__code__.co_consts[2])\nf.__code__.co_cellvars
my_dict = DictWithPWL(\\'en_US\\', \\'mywords.txt\\')\nmy_checker = SpellChecker(my_dict)\nmy_checker.set_text(\\'This is sme sample txt with erors.\\')\nfor error in my_checker:\n    pass
class SampleViewSet(viewsets.ModelViewSet):\n    queryset = api_models.Sample.objects.all()\nserializer_class = api_serializers.SampleSerializer
from json import dumps\ndriver.execute_script(\\"document.getElementById(\\'text_field\\').value+=\\" +\n    dumps(my_python_variable))
from django.contrib.contenttypes.models import ContentType\ncontent_type = ContentType.objects.get_for_model(Employer)
True = not not True if True else not True
if type(obj).__name__ == \\'Dataset\\':\n    pass
import types
@app.route(\\'/api/v1/account\\', methods=[\\'POST\\'])\ndef create_account():\n    \\"\\"\\"Create user account\\"\\"\\"
@ndb.tasklet\ndef defer_fetch_document(user_key, document_key):\n    pass
test_input = pd.DataFrame(columns=[\\'key\\', \\'value\\'], data=[[1, \\'A\\'], [1, \\'B\\'\n    ], [1, \\'B\\'], [1, np.nan], [2, np.nan], [3, \\'C\\'], [3, \\'C\\'], [3, \\'D\\'], [3,\n    \\'D\\']])
p = Fraction(1)\nfor i in range(1, k + 1):\n    p *= Fraction(n - i + 1, i)
diamond = Jewel()\ncoal = Jewel()
def bitflip(x, pos):\n    fs = pack(\\'d\\', x)\nbval = list(unpack(\\'BBBBBBBB\\', fs))\n[q, r] = divmod(pos, 8)\nbval[q] ^= 1 << r\nfs = pack(\\'BBBBBBBB\\', *bval)\nfnew = unpack(\\'d\\', fs)\nreturn fnew[0]
\\"\\"\\"{0:g}\\"\\"\\".format(FixFloat(1234500000.0))\n\\"\\"\\"1.2345e+09\\"\\"\\"\n\\"\\"\\"{0:g}\\"\\"\\".format(FixFloat(float(\\'nan\\')))\n\\"\\"\\"nan\\"\\"\\"
qs1 = qs.values(\\'b\\', \\'c\\', \\'a_priority\\').annotate(max_priority=Max(\\'a_priority\\')\n    ).distinct()
if name is None:\n    \\"\\"\\"deal with the /rest/users case\\"\\"\\"
step2 = Popen([\\'grep\\', \\'inet6\\'], stdout=PIPE, stdin=step1.stdout)\nstep3 = Popen([\\'sed\\', \\'-e\\', \\'/fe80/d\\', \\'-e\\', \\'s/ *inet6 *//g\\', \\'-e\\',\n    \\'s/\\/64.*$//g\\'], stdout=PIPE, stdin=step2.stdout)\nstep4 = Popen([\\'tail\\', \\'-n1\\'], stdout=PIPE, stdin=step3.stdout)
x = np.array([dt.datetime(2012, 10, 19, 10, 0, 0), dt.datetime(2012, 10, 19,\n    10, 0, 1), dt.datetime(2012, 10, 19, 10, 0, 2), dt.datetime(2012, 10, \n    19, 10, 0, 3)])\ny = np.array([1, 3, 4, 2])\nfig, (ax1, ax2) = plt.subplots(nrows=2, sharex=True)\nax1.plot(x, y, \\'b-\\')
if db_field.name == \\'car\\':\n    pass
for i in range(0, 20):\n    a1.appendleft(next(d))
db.connect()\npool = Pool(processes=fishes, initializer=init)\nif __name__ == \\'__main__\\':\n    pass
\\"\\"\\"\\"\\"\\".join([c for c in origList if c in string.letters or c in string.\n    whitespace])
flow = flow_from_clientsecrets(filename=client_secrets_filename, scope=\n    scope, redirect_uri=redirect_uri)
while r.search(s):\n    s = r.sub(\\'\\', s)
w, h = view.canvas.size
for sent in doc:\n    for token in sent:\n        if token.is_alpha:\n            pass
import re\ns = \\'anything__\\'
def getDict(self):\n    return {\\'myBool\\': self.myBool}\n\ndef setAllBoolsTrue(self):\n    self.myBool = True\nfor key, value in self.getDict().items():\n    pass
value = \\'\x00\x01\x00\x02\x00\x03\\'\nvalue[:2]\nvalue[2:4]
if api_settings.JWT_ALLOW_REFRESH:\n    payload[\\'orig_iat\\'] = timegm(datetime.utcnow().utctimetuple())\nreturn {\\'token\\': jwt_encode_handler(payload)}
if i % chan.period == 0:\n    yield chan
contacts = yield Contact.find()
from google.appengine.api import rdbms\nCLOUDSQL_INSTANCE = \\'\\'
while num != 0:\n    bit = num % 2\nbinary.insert(0, bit)
a is b
win_right = win_geo.right()
try:\n    os.utime(fname, times)\nfinally:\n    fhandle.close()
import numpy as np\nmy_array = np.array([80.6, 120.8, -115.6, -76.1, 131.3, 105.1, 138.4, -81.3,\n    -95.3, 89.2, -154.1, 121.4, -85.1, 96.8, 68.2])
pydoc.ModuleScanner().run(callback=lambda *a: all_mod.append(a[1]), onerror\n    =lambda *a: None)\nprint(all_mod)
if currentSongURI:\n    pass
regular_heights = np.arange(120, 213, 5)\nplot(height, temp, \\'o\\', regular_heights, f(regular_heights), \\'x\\')
import matplotlib.pyplot as plt\nfig, ax = plt.subplots()
return Response(serializer.data)\n\ndef post(self, request, *args, **kwargs):\n    pass
def formfield_for_foreignkey(self, db_field, request, **kwargs):\n    if db_field.name == \\'car\\':\n        kwargs[\\'queryset\\'] = Car.objects.filter(owner=request.user)
df = pd.DataFrame(randint(0, 10, (200, 12)), columns=list(\\'abcdefghijkl\\'))\ngrouped = df.groupby(\\'a\\')\nrowlength = grouped.ngroups / 2\nfig, axs = plt.subplots(figsize=(9, 4), nrows=2, ncols=rowlength)\ntargets = zip(list(grouped.groups.keys()), axs.flatten())\nfor i, (key, ax) in enumerate(targets):\n    sns.heatmap(grouped.get_group(key).corr(), ax=ax, xticklabels=i >=\n        rowlength, yticklabels=i % rowlength == 0, cbar=False)\nax.set_title(\\'a=%d\\' % key)\nplt.show()
def lowercased(word):\n    pass
class MyCommand(BaseCommand):\n\n    def handle(self, *args, **options):\n        if len(args) > 0:\n            pass
result = [None] * (len(data) + len(tweets))\nresult[::2] = data
Package - 1 / namespace / module1 / __init__.py\nPackage - 2 / namespace / __init__.py
def read_nonblock(fd):\n    t = os.read(fd, 4096)\nif t == \\'\\':\n    if os.fstat(fd).st_size == os.lseek(fd, 0, os.SEEK_CUR):\n        raise Exception(\\'EOF reached\\')
sy.init_printing()\nwrf, wlo, t = sy.symbols(\\'\\omega_RF \\omega_LO t\\')\nc = sy.cos(wrf * t) * sy.cos(wlo * t)
log_lines = open(\\'logfile\\', \\'r\\').readlines()\nlast_line = get_last_lineprocessed()\nlast_line = parse_log(log_lines[last_line:])
FR_NOT_ENUM = 32
A
def is_bijection(seq1, seq2):\n    pass
from mock import Mock\nfrom dirBar import bar\nbar.returnBar = Mock(return_value=\\'Foo\\')\nfrom foo import printFoo\nprintFoo()
(0)(1, 40020)\n(1)(1, 40020)\n(2)(1)\n(3)()
a = \\'BarackObama\\'\na[4:]\nb = \\'The world is mine\\'
return K
theta0 = theta0 - step * dEdtheta0 / n\ntheta1 = theta1 - step * dEdtheta1 / n\ntheta2 = theta2 - step * dEdtheta2 / n
numpy.__version__\ndt = numpy.datetime64(\\'2013-03-10T01:30:54+0300\\')\ndt
try:\n    metadata = extractMetadata(parser)\nexcept HachoirError:\n    pass
Gtmp = pgv.AGraph(\\'file.dot\\')
active = User.select().where(User.active == True)\ntry:\n    user = active.where(User.username == request.form[\\'username\\']).get()\nexcept User.DoesNotExist:\n    return make_response(jsonify({\\'error\\': \\'Bad request\\'}), 400)\nelse:\n    pass
import os\nimport sys\ndesired_output_file = open(\\'/path/to/file\\', \\'a\\')\nos.dup2(desired_output_file.fileno(), sys.stdout)\nos.dup2(desired_output_file.fileno(), sys.stderr)
import bisect\nimport dis, marshal\nwith open(bisect.__file__, \\'rb\\') as f:\n    magic_and_timestamp = f.read(8)\ncode = marshal.load(f)\ndis.dis(code)
Ck = [[1], [2], [3], [4], [5]]\nfor tranid in range(10):\n    Ck2 = map(frozenset, Ck)\nfor candidate in Ck2:\n    pass
class MyClass(object):\n    pass
for image in images:\n    a_link = image.xpath(\\'../@href\\').extract_first()\nimage_link = image.xpath(\\'@src\\').extract_first()\nprint(a_link or image_link)
plt.axis(\\'off\\')\nplt.show()
[client]
filename = \\'data.xml\\'\ntotal_size = os.path.getsize(filename)
task = asyncio.ensure_future(asyncio.sleep(5))\ntask.cancel()\nloop.run_until_complete(task)
def clearscreen(numlines=100):\n    \\"\\"\\"Clear the console.\n    numlines is an optional argument used only as a fall-back.\n    \\"\\"\\"\nimport os\nif os.name == \\'posix\\':\n    os.system(\\'clear\\')\nelif os.name in (\\'nt\\', \\'dos\\', \\'ce\\'):\n    os.system(\\'CLS\\')\nelse:\n    print(\\'\n\\' * numlines)
testdata = [(\\'chrome\\',), (\\'firefox\\',)]\n\n@parameterized.expand(testdata)\ndef test_something(self, browser):\n    driver = self.selenium[browser]
import ctypes\nprint(ctypes.windll.cprog.square(4))\nprint(ctypes.CDLL(\\'cprog.so\\').square(4))
Fraction(\\'0.1234\\')\nFraction(\\'1/2\\')\nfloat(Fraction(\\'0.1234\\'))\nfloat(Fraction(\\'1/2\\'))
tracer = trace.Trace(ignoredirs=[sys.prefix, sys.exec_prefix], trace=0, count=1\n    )\ntracer.run(\\'main()\\')
word_list = [(\\'this\\', 4), (\\'in\\', 4), (\\'dedicated\\', 4), (\\'who\\', 3), (\\'us\\', 3\n    ), (\\'they\\', 3), (\\'so\\', 3), (\\'shall\\', 3), (\\'people\\', 3), (\\'is\\', 3), (\n    \\'great\\', 3), (\\'dead\\', 3), (\\'are\\', 3), (\\'It\\', 3), (\\'which\\', 2), (\\'what\\', 2)]\nword_list.sort(key=lambda i: i[1], reverse=True)
from decimal import Decimal\n\ndef format_float(f):\n    d = Decimal(str(f))\nreturn d.quantize(Decimal(1)) if d == d.to_integral() else d.normalize()
for i in range(200):\n    app.processEvents()
for file in files:\n    if file.endswith(\\'.py\\'):\n        pass
names = [\\'Site\\', \\'Epoch\\', \\'TroTot\\', \\'Stdev\\', \\'TgnTot\\', \\'TgnStd\\', \\'TgeTot\\',\n    \\'TgeStd\\']
if hostname:\n    pass
def emitter(target, source, env):\n    \\"\\"\\"\n    Add dependency from target to source\n    \\"\\"\\"\nenv.Depends(target, source)\nreturn target, source\n\ndef generate(env):\n    \\"\\"\\"\n    Add builders and construction variables for the SwigGen builder.\n    \\"\\"\\"\nif \\'SWIGCOM\\' not in env:\n    raise SystemError(\\'SCons build environment could not detect tool: swig\\')\nbld = env.Builder(action=SwigGenAction, emitter=emitter, target_factory=env\n    .fs.File)\nenv[\\'BUILDERS\\'][\\'SwigGen\\'] = bld\nenv[\\'SWIGGENCOM\\'] = env[\\'SWIGCOM\\']\n\ndef exists(env):\n    return env.Detect(\\'swig\\')
s = 0.05
for rec in self:\n    time1 = datetime.strptime(rec.time1, \\'%Y-%m-%d %H:%M:%S\\')
class TimeStampedModel(models.Model):\n    \\"\\"\\"\n    An abstract base class model that provides self-updating\n    ``created`` and ``modified`` fields.\n    \\"\\"\\"\ncreated = AutoCreatedField(_(\\'created\\'))\nmodified = AutoLastModifiedField(_(\\'modified\\'))\n\n\nclass Meta:\n    abstract = True\n\n\nclass Location(TimeStampedModel):\n    pass
import numpy as np\nimport sklearn.tree\nclf = sklearn.tree.DecisionTreeClassifier()\nclf.fit(X, y)
class CommaEndingPrettyPrinter(PrettyPrinter):\n    pass
import matplotlib.pyplot as plt\nweighted_appearances = []\nfor index, row in df.iterrows():\n    weighted_row = [row.ColA] * row.ColA_weights\nweighted_appearances += weighted_row\nplt.boxplot(weighted_appearances)\nplt.show()
if MyArg2 is None:\n    pass
if \\'@\\' in line and line == l and \\'p4port\\' not in line:\n    lineMatch = True
import operator
def read_as_flat(someFile):\n    line_iter = iter(someFile)\ntime_header = None\nfor line in line_iter:\n    words = line.split()\nif words[0] == \\'time\\':\n    pass
time.tzset()\nnumpy.datetime64(0, \\'s\\')
result = re.search(expr, template)\ntry:\n    print(result.group(0))\nexcept IndexError:\n    pass
from django.views.generic.base import View\n\n\nclass Custom500View(View):\n\n    def dispatch(self, request, *args, **kwargs):\n        return HttpResponse(\\'My custom django 500 page\\')
class PhonyHash:\n    _hash = 1
from vtk.util.numpy_support import vtk_to_numpy
def ProcessRawData(RawData):\n    if len(RawData) == 114733:\n        return RawData[1:-44].reshape(-1, 32)\nreturn None
import numpy as np\n\ndef ones_row(row):\n    if np.sum(row) >= 2:\n        inds = np.where(row == 1)[0]\nrow[inds[0]:inds[-1]] = 1\nreturn row
response_headers = [(\\'Content-Type\\', \\'text/plain\\'), (\\'Content-Length\\', str(\n    len(response_body)))]\nstart_response(status, response_headers)
p1 = tform.imap(point_in_front_of_screen_center)
component.append(b)
Point = namedtuple(\\'Point\\', \\'x y\\'.split())\nbetter_d = [Point(1, 2), Point(3, 4), Point(1, 2)]
class Test(object):\n\n    def __init__(self, name):\n        self.name = name\n\ndef __del__(self):\n    print(\\'deleting {0}\\'.format(self.name))\nprint(\\'discarded instance creation\\')
strip = strip.reshape(W, 3, 8)
import numpy as np\na0 = np.random.random((45, 72, 37, 24))\na = a0.copy()\nv = np.random.random(37)\nfor i in range(len(v)):\n    a[:, :, (i), :] *= v[i]\nb = a0 * v[(None), (None), :, (None)]\nnp.allclose(a, b)
fig, axs = plt.subplots(2, 2, figsize=(8, 8))\naxs = axs.flat\nfor n, ax in enumerate(axs):\n    pass
def import_any(*mod_list):\n    pass
def myviews(request):\n    pass
x = np.zeros((3, 3, 3))\ny = [0, 9, 18]\nx\nnp.put(x, y, 1)
from pickle import loads, dumps
self.__argparser.print_help(self)\n\ndef write(self, message):\n    self.help += message
import pwd
import xml.etree.ElementTree as ET\nparent = ET.Element(\\'parent\\')\nmyattributes = {\\'size\\': \\'small\\', \\'gender\\': \\'unknown\\'}\nchild = ET.SubElement(parent, \\'child\\', attrib=myattributes, age=\\'10\\')\nET.dump(parent)
from unittest import TestCase\nfrom mock import patch
results = [res for res in cursor]\ncursor.close()
return rs
class ProxyDatabaseRouter(object):\n    pass
flatten_combinations(word[\\'next\\'], new_current_combo, all_combos)\nreturn all_combos
url = \\'amqp://{0}:{1}@{2}:{3}/{4}\\'.format(user, password, host, port, vhost)
@np.vectorize\ndef diff_if_bigger(x, y):\n    return y - x if y > x else 0\ndiff_if_bigger(np.array([5.6, 7.0]), 8)
file_name, num1, num2 = argv
ctx = multiprocessing.get_context(\\'forkserver\\')\nworker = ctx.Process(target=_job2)\nworker.start()
from sqlalchemy.orm.exc import NoResultFound, MultipleResultsFound
class MyModelChoiceField(ModelChoiceField):\n    pass
mkDict = lambda passwd, hair, name: {\\'passwd\\': passwd, \\'hair\\': hair, \\'name\\':\n    name}\nconfig = {\\'st3v3\\': mkDict(\\'password\\', \\'blonde\\', \\'Steve Booker\\'), \\'blubb\\':\n    mkDict(\\'12345678\\', \\'black\\', \\'Bubb Ohaal\\'), \\'suprM\\': mkDict(\\'kryptonite\\',\n    \\'black\\', \\'Clark Kent\\')}
xl = comDispatch(\\'Excel.Application\\')
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cookies),\n    MultipartPostHandler.MultipartPostHandler)
tags = set([\\'csrf\\', \\'csrf_token\\'])\ntemplate = \\'<input type=\\"hidden\\" name=\\"csrfmiddlewaretoken\\" value=\\"%s\\">\\'\n\ndef parse(self, parser):\n    lineno = next(parser.stream).lineno\nctx_ref = jinja2.nodes.ContextReference()\nnode = self.call_method(\\'_render_csrf\\', [ctx_ref], lineno=lineno)\nreturn jinja2.nodes.CallBlock(node, [], [], [], lineno=lineno)\n\ndef _render_csrf(self, context, caller):\n    csrf_token = context[\\'csrf_token\\']\nreturn jinja2.Markup(self.template % str(csrf_token))\ncsrf = CsrfExtension
a\na += 2\na\nb
return 1\nprctl(PR_SET_PDEATHSIG, SIGHUP, 0, 0, 0)
pairs = {}
scatter_matrix(data, alpha=0.2, figsize=(6, 6), diagonal=\\'kde\\')\nplt.subplot(212)
number1 = 33
import time\npygame.init()
origin.setLocallyAllowedTypes(new_types)
w, h = s.Size.Get()\nb = wx.EmptyBitmap(w, h)\nm = wx.MemoryDCFromDC(s)\nm.SelectObject(b)\nm.Blit(0, 0, w, h, s, 0, 0)\nm.SelectObject(wx.NullBitmap)\nb.SaveFile(\\'screenshot.png\\', wx.BITMAP_TYPE_PNG)
you = [\\'foo@example.com\\', \\'bar@example.com\\']
import os\nphantomjs_path = \\'C:\\Python27\\misc\\phantomjs-1.9.7-windows\\phantomjs.exe\\'\nbrowser = webdriver.PhantomJS(executable_path=phantomjs_path,\n    service_log_path=os.path.devnull)\nbrowser.set_window_size(1400, 1000)\nbrowser.get(\\'http://stackoverflow.com/\\')\nprint(browser.title)
if isinstance(i, (list, tuple)):\n    for j in flatten(i):\n        yield j
message = {\\'default\\': \\'default message\\', \\'APNS_SANDBOX\\': apns_string}\nmessageJSON = json.dumps(message, ensure_ascii=False)\nsns.publish(message=messageJSON, target_arn=device_arn, message_structure=\n    \\'json\\')
rise = np.diff(log_y)\nrun = np.diff(log_x)
if line == \\'\\' or line.startswith(\\'#\\') or docstring and not (line.startswith\n    (\\'\\"\\"\\"\\') or line.startswith(\\"\\'\\'\\'\\")) or line.startswith(\\"\\'\\'\\'\\"\n    ) and line.endswith(\\"\\'\\'\\'\\") and len(line) > 3 or line.startswith(\\'\\"\\"\\"\\'\n    ) and line.endswith(\\'\\"\\"\\"\\') and len(line) > 3:\n    continue\nelif line.startswith(\\'\\"\\"\\"\\') or line.startswith(\\"\\'\\'\\'\\"):\n    pass
id = Column(Integer, primary_key=True)\nlabel = Column(String)\nright_nodes = relationship(\\'Node\\', secondary=node_to_node, primaryjoin=id ==\n    node_to_node.c.left_node_id, secondaryjoin=id == node_to_node.c.\n    right_node_id, backref=\\'left_nodes\\')
conn.connect()\nfor item in list_of_items:\n    pass
@total_ordering\nclass B_ordering(object):\n    __slots__ = ()\n\ndef __lt__(self, other):\n    return self.y < other.y
not a\na = numpy.array([])\nnot a
sst = sst_data(x, y)
def method1():\n    df = DataFrame(columns=list(range(100)), index=list(range(1000)))\nfor i in range(len(df)):\n    df.iloc[i] = row
cssin = open(sys.argv[2])\noutput += cssin.read()
years = [(str(y), y) for y in reversed(list(range(1950, 2013)))]\nyears.insert(0, (\\'\\', \\'year\\'))\nyear = wt.SelectField(choices=years)
def server():\n    p = Process(target=worker)\np.start()\nprint(\\'worker pid: {}\\'.format(p.pid))
import re\nDate = \\'%(month)s %(day)s, %(year)s, %(hourmins)s\\' % types\nDateR = re.compile(Date)
Ctrl + B
from scipy.stats import t\n\ndef StudentTCI(loc, scale, df, alpha=0.95):\n    return t.interval(alpha, df, loc, scale)\nprint(StudentTCI(1, 2, 10))\nprint(StudentTCI(1, 2, 10, 0.99))
def match_new(new_list, old_list):\n    pass
from os.path import commonprefix
return True\n\n\nclass MyLogger(logging.Logger):\n    pass
for word, tag in tagged_sent:\n    if tag not in tag_dict:\n        tag_dict[tag].append(word)
from cust1.proj1.pack1.mod1 import something\nfrom cust3.proj4.pack1.mod4 import something_else\nfrom cust3.proj1.pack4.mod4 import yet_something_else
t = None\nfor fname in download(urls):\n    if t is not None:\n        t.join()
if len(result) == n:\n    yield result\nfor elem in it:\n    pass
t = datetime.datetime.today()\nfuture = datetime.datetime(t.year, t.month, t.day, t.hour, f_minute)
idx2 = idx1.tz_convert(tz=\\'Europe/Dublin\\')\ndf.groupby(idx2).sum()
import operator
x0 = y0 = size // 2
b = \\'The quick brown fox jumped over the lazy dog.\\'\nimport difflib\ns = difflib.SequenceMatcher(None, a, b)\ns.find_longest_match(0, len(a), 0, len(b))
html = response.read()\npattern = \\'(V.+space)\\'\nwordPattern = re.compile(pattern, re.IGNORECASE)
if key == \\'field_two\\':\n    pass
hexdump(fuzz_frame)
from django.core.urlresolvers import reverse\nreverse(\\'foo-direct\\', kwargs={\\'page_slug\\': \\'foo\\'})
concat_clip = mp.concatenate_videoclips(clips)\nconcat_clip.write_videofile(\\'texts.mp4\\')
def buttonclick():\n    pass
if __name__ == \\'__main__\\':\n    import pdb
start = -1\nfor end in (sorted(split_commas) + [None]):\n    splitS.append(s[start + 1:end])\nstart = end
dlist[a][1].append(b)
for i, line_b in enumerate(B):\n    pass
for index, question in enumerate(questions):\n    pass
from shapely.geometry import LineString\nline1 = LineString([(0, 0), (1, 0), (1, 1)])\nline2 = LineString([(0, 1), (1, 1)])
from Xlib import X, display\nfrom Xlib.ext import randr\nd = display.Display()\ns = d.screen()\nwindow = s.root.create_window(0, 0, 1, 1, 1, s.root_depth)
import re
post_save.connect(signals.do_some_stuff_with_mymodel, sender=MyModel)\n\ndef do_some_stuff_with_mymodel(**kwargs):\n    pass
pynamespace[\\'__myCommand\\'] = pyCode\nresult = eval(\\'__myInterpreter.push(__myCommand)\\', pynamespace)
if isinstance(attribute, Callable):\n    return attribute()\nelif isinstance(attribute, str):\n    pass
import serial\nser = serial.Serial(0)\nprint(ser.portstr)\nser.write(\\'hello\\')
history = model.fit(X_train, y_train, batch_size=batch_size, nb_epoch=\n    nb_epochs, validation_data=(X_test, y_test), show_accuracy=True)\nprint((\\'Test score\\', history.history[\\'val_loss\\'][nb_epochs - 1]))\nprint((\\'Test acc\\', history.history[\\'val_acc\\'][nb_epochs - 1]))
n_success, n_fail = ESH.bulk(es, docs, index=\\'test_index\\', doc_type=\n    \\'test_doc\\', stats_only=True)
def deep_annotate(item):\n    if isinstance(item, list):\n        return 1, [deep_annotate(i) for i in item]
def configure(cfg):\n    cfg.load(\\'compiler_c\\')
gradebook = [(\\'Math 212\\', \\'Linear Algebra\\', \\'Fall 2012\\', \\'B\\'), (\\'CS 130\\',\n    \\'Python\\', \\'Spring 2013\\', \\'A\\')]\nfieldwidths = 13, 19, 14, 1\nfor tup in gradebook:\n    pass
import numpy.ma.mrecords as mrecords\ndata = np.ma.array(np.ma.zeros(30, dtype=[(\\'date\\', \\'|O4\\'), (\\'price\\', \\'<f8\\')\n    ]), mask=[(i < 10) for i in range(30)])\nr = data.view(mrecords.mrecarray)\nprint(r.date[0])
a = \\'aaa\\'\npdb.set_trace()\nb = \\'bbb\\'\nc = \\'ccc\\'\nfinal = a + b + c\nprint(final)
def options(opt):\n    opt.load(\\'python\\')
for feature in js[\\'features\\']:\n    pass
pathToOpenSSL = \\'C:\\pysrc\\openssl\\openssl.exe\\'\nopenssl = Popen([pathToOpenSSL, \\'enc\\', \\'-aes-128-cbc\\', \\'-d\\', \\'-nosalt\\',\n    \\'-nopad\\', \\'-K\\', privateKey.encode(\\'hex\\'), \\'-iv\\', privateKey.encode(\n    \\'hex\\')], stdin=PIPE, stdout=PIPE)\ndecryptedString = openssl.communicate(encryptedString)[0].replace(\\'\x04\\', \\'\\')\nreturn decryptedString\ndecrypt(encryptedString, \\'yohoyohoyohoyoho\\')
for text in legend.texts:\n    text.set_font_properties(font)
return obj
while i_should_continue():\n    asyncore.loop(count=1)
import operator
from django.http import HttpResponseRedirect\n\ndef myview(request):\n    pass
while True:\n    pass
def MyOwnSerializer(value):\n    return \\'whatever\\'
for row in range(1, n + 1):\n    pass
for x in range(0, 20):\n    for y in range(0, 20):\n        pass
soup = BeautifulSoup(html, \\'lxml\\')\nfor elm in soup.select(\\'div[class=aa]\\'):\n    pass
BEGIN
class MyTask(PeriodicTask):\n\n    def run(self, **kwargs):\n        logger = self.get_logger(**kwargs)\nlogger.info(\\'Running my task\\')
try:\n    1 / 0\nexcept ZeroDivisionError as err:\n    logger.exception(err)
import pip\nimport pdb
def load_tests(loader, tests, ignore):\n    tests.addTests(doctest.DocTestSuite(my_module_with_doctests))
import file_A\n\ndef something():\n    file_A.do_A_stuff
class TopSearchesSpider(CrawlSpider):\n    name = \\'topSearches\\'
my_data = [list(range(5)) for i in range(5)]\nmy_data\nimport json\njson.dumps(my_data)
group = Group.objects.get(pk=1)\nuser = User.objects.get(pk=1)\ngroup.members.add(user)\ngroup.members.all()
def get_program_time_budget(self):\n    td = self.estimated_duration - self.get_program_duration()
p = re.compile(\\'\\b(?!914)\\d{3}\\b\\')\ntest_str = \\"\\"\\"123\n235\n456\n1000\n910 911 912 913\n  914\n915 916\\"\\"\\"
for point in segment.points:\n    print(\\'Point at ({0},{1}) -> {2}\\'.format(point.latitude, point.\n        longitude, point.elevation))\nfor waypoint in gpx.waypoints:\n    print(\\'waypoint {0} -> ({1},{2})\\'.format(waypoint.name, waypoint.\n        latitude, waypoint.longitude))\nfor route in gpx.routes:\n    pass
tmp, out = \\'\\', \\'\\'
for lib in gtk_libs:\n    include_files.append((os.path.join(include_dll_path, lib), lib))\nbase = None\nif sys.platform == \\'win32\\':\n    base = \\'Win32GUI\\'\nexecutables = [Executable(\\'main.py\\', base=base)]\nbuildOptions = dict(compressed=False, includes=[\\'gi\\'], packages=[\\'gi\\'],\n    include_files=include_files)\nsetup(name=\\'test_gtk3_app\\', author=\\'Gian Mario Tagliaretti\\', version=\\'1.0\\',\n    description=\\'GTK 3 test\\', options=dict(build_exe=buildOptions),\n    executables=executables)
while True:\n    PressKey(17)\ntime.sleep(1)\nReleaseKey(17)\ntime.sleep(1)
def get_active_window_title(self):\n    root = Popen([\\'xprop\\', \\'-root\\', \\'_NET_ACTIVE_WINDOW\\'], stdout=PIPE)\nfor line in root.stdout:\n    pass
\\"\\"\\"Generators have a ``Yields`` section instead of a ``Returns`` section.\nArgs:\n  n (int): The upper limit of the range to generate, from 0 to `n` - 1\nYields:\n  int: The next number in the range of 0 to `n` - 1\nExamples:\n  Examples should be written in doctest format, and should illustrate how\n  to use the function.\n  >>> print [i for i in example_generator(4)]\n  [0, 1, 2, 3]\n\\"\\"\\"
letters.add(\\'x\\')\nletters.add(\\'x\\')
age = 19\nsex = \\'male\\'\nt = name, age, sex\ncursor.execute(\\'insert into table values(%s,%d,%s)\\', t)
import sys\nsys.version_info\n\ndef f(i):\n    print(i)\nreturn i\n{f(1): f(2), f(3): f(4)}
def email_field_init(self, *args, **kwargs):\n    kwargs[\\'max_length\\'] = kwargs.get(\\'max_length\\', 200)\nCharField.__init__(self, *args, **kwargs)\nEmailField.__init__ = email_field_init
for k in empty_keys:\n    pass
class MyCommand(BaseCommand):\n\n    def handle(self, *args, **options):\n        if len(args) > 0:\n            raise CommandError(\\'need exactly zero arguments\\')
def iterphrases(text):\n    pass
raw_ta = tty.tcgetattr(stdin_fileno)
suite.addTest(MyCase(\\'testItIsHot\\'))\nrunner = unittest.TextTestRunner()
appointments = [(datetime(2012, 5, 22, 10), datetime(2012, 5, 22, 10, 30)),\n    (datetime(2012, 5, 22, 12), datetime(2012, 5, 22, 13)), (datetime(2012,\n    5, 22, 15, 30), datetime(2012, 5, 22, 17, 10))]\nhours = datetime(2012, 5, 22, 9), datetime(2012, 5, 22, 18)\n\ndef get_slots(hours, appointments, duration=timedelta(hours=1)):\n    slots = sorted([(hours[0], hours[0])] + appointments + [(hours[1],\n        hours[1])])\nfor start, end in ((slots[i][1], slots[i + 1][0]) for i in range(len(slots) -\n    1)):\n    assert start <= end, \\'Cannot attend all appointments\\'\nwhile start + duration <= end:\n    print(\\'{:%H:%M} - {:%H:%M}\\'.format(start, start + duration))\nstart += duration
path += [d for d in os.environ.get(\\'NLTK_DATA\\', str(\\'\\')).split(os.pathsep) if d\n    ]\nif os.path.expanduser(\\'~/\\') != \\'~/\\':\n    path.append(os.path.expanduser(str(\\'~/nltk_data\\')))\nif sys.platform.startswith(\\'win\\'):\n    path += [str(\\'C:\\nltk_data\\'), str(\\'D:\\nltk_data\\'), str(\n        \\'E:\\nltk_data\\'), os.path.join(sys.prefix, str(\\'nltk_data\\')), os.\n        path.join(sys.prefix, str(\\'lib\\'), str(\\'nltk_data\\')), os.path.join(\n        os.environ.get(str(\\'APPDATA\\'), str(\\'C:\\\\')), str(\\'nltk_data\\'))]\nelse:\n    pass
b = 0.0
import inspect\n\n\nclass Tester(object):\n    pass
import re
class myClass:\n\n    def __init__(self, myFunc=lambda : None):\n        self.doIt = myFunc
import itertools as it\nnew = list(it.imap(int, old))
posts = []\nfor model in models:\n    posts.append(dict(year=model.year, month=model.month, title=model.title))\nreturn render_template(\\'p.html\\', posts=posts)
Newlist = []\nfor x in numList:\n    pass
print(\\'Epoch %05d: early stopping THR\\' % epoch)
for ch in itr:\n    if ch == \\'_\\' or ch.isalpha():\n        yield ch\nbreak\nfor ch in itr:\n    if ch == \\'_\\' or ch.isalpha() or ch.isdigit():\n        yield ch\n\ndef sanitize_identifier(name):\n    return \\'\\'.join(gen_valid_identifier(name))
np.linalg.norm(fromdeg(1) - fromdeg(180))\nnp.linalg.norm(fromdeg(90) - fromdeg(270))
results = allpeople[100 * offset:100 * (offset + 1)]\npeople = results
t1 = timeit.Timer(stmt=stmt1)\nt2 = timeit.Timer(stmt=stmt2)
class SerialPort(serialport.SerialPort):\n\n    def _serialFactory(self, dev, *args, **kwargs):\n        \\"\\"\\" pyserial recommends the following for supporting serial urls \\"\\"\\"\ntry:\n    return serial.serial_for_url(dev)\nexcept AttributeError:\n    pass
class Comment(EntityRef):\n    pass
tuples = list(zip(*[[\\'one\\', \\'one\\', \\'two\\', \\'two\\', \\'three\\', \\'three\\'], [\\'foo\\',\n    \\'bar\\', \\'foo\\', \\'bar\\', \\'foo\\', \\'bar\\']]))\nindex = pd.MultiIndex.from_tuples(tuples, names=[\\'first\\', \\'second\\'])\ndf = pd.DataFrame(np.random.randn(3, 6), index=[\\'A\\', \\'B\\', \\'C\\'], columns=index)
sum(generate() for i in range(1000000))\nsum(generate() for i in range(1000000))
content2 = \\"\\"\\"Units   lastqu  Uperchg lqperchg    fcast   errpercent  nfcast  fctperchg\n2000-12-31   19391   NaN     NaN     NaN     NaN     NaN     NaN    NaN\n2001-12-31   35068   5925    80.85   NaN     32838   -6.79   NaN    NaN\n2002-12-31   39279   8063    12.01   36.08   39750   1.18    42449  NaN\n2003-12-31   47517   9473    20.97   17.49   44309   -7.24   43784  NaN\n2004-12-31   51439   11226   8.25    18.51   49976   -2.93   53594  NaN\n2005-12-31   59674   11667   16.01   3.93    51402  -16.09   52907  NaN\n2006-12-31   58664   14016   -1.69   20.13   58997   0.56    68491  NaN\n2007-12-31   55698   13186   -5.06   -5.92   56313   1.09    55995  NaN\n2008-12-31   42235   11343  -24.17  -13.98   50355   16.13   49805  NaN\n2009-12-31   40478   7867    -4.16  -30.64   39117   -3.48   32809  NaN\n2010-12-31   38722   8114    -4.34   3.14    39915   2.99    41304  NaN\n2011-12-31   36965   8361    -4.54   3.04    40714   9.21    39497  NaN\n2012-12-31   39132   8608    5.86    2.95    41512   5.73    37690  NaN\n2013-12-31   43160   9016    10.29   4.74    42832   -0.77   40376  NaN\n2014-12-31   NaN     9785    NaN     8.53    45318   NaN     45665   5\n\\"\\"\\"\ndf2 = pd.read_table(io.BytesIO(content2))
for row in cxTrx.fetchall():\n    pass
def argsortdup(a1):\n    pass
def get(self):\n    pass
import pandas as pd\nimport pandas.rpy.common as com
sep_char = {\\'.\\': \\',\\', \\',\\': \\'.\\'}[dec_char]\ns = s.replace(sep_char, \\'\\')
import hashlib\nh = hashlib.sha256(\\'something to hash\\')\nh.hexdigest()\nn = int(h.hexdigest(), base=16)\nprint(n)
import csv\nfields = \\'category\\', \\'code\\', \\'price\\', \\'description\\', \\'link\\', \\'picture\\', \\'plans\\'
from django.contrib.auth.models import User\ntest = User.objects.get(username=\\'test\\')
data
return tmp\nimshow(mycmap(Z1), extent=extent)\nimshow(mycmap(Z2), extent=extent)
c = train.eig(xt_, yt_, m - j, m, alpha, \\'cpu\\')
def main():\n    pass
test_f.count\ntest_f()\ntest_f.count
import re
country, country_is_new = UserReportedCountry.objects.get_or_create(\n    country_name=my_country_name)
from numpy import *
if dt2end <= dt1start or dt2start >= dt1end:\n    return False
import requests\nurl = \\'http://httpbin.org/post\\'\nr = requests.post(url, data=[(\\'interests\\', \\'football\\'), (\\'interests\\',\n    \\'basketball\\')])
from py3 import test1\ntest1.foo()
array[array < 0] = 0\narray
class Helloer(object):\n\n    def __init__(self, owner):\n        self.owner = owner\n\ndef hello(self):\n    pass
def test_func(expect):\n    pass
caps[\\'loggingPrefs\\'] = {\\'performance\\': \\'ALL\\'}
encoded_data = urllib.parse.urlencode(data)\ncontent = urllib.request.urlopen(\\'http://www.abc.com/messages.php?action=send\\',\n    encoded_data)
d\nrealData = d[d.Borough != \\'Unspecified\\']\nrealData = pandas.Series(data=realData.Borough.values, index=realData.City)\nd[\\'Borough\\'] = d.City.map(realData)
for el in s.recurse():\n    if \\'Instrument\\' in el.classes:\n        pass
import a\nprint(a.a)
subdirs = [\\'libfoo_subrepo\\', \\'barapp_subrepo\\', \\'test\\']\nenv = Environment()\nfor subdir in subdirs:\n    SConscript(os.path.join(subdir, \\'SConscript\\'), exports=[\\'env\\'])
max_y = max(y_av)\nmax_x = x[y_av.argmax()]
end = np.searchsorted(a, 10, \\'right\\')\nrng = np.arange(start, end)
import numpy
MyConverter = NBConverter(config=config)
rpt_side[\\'txt1\\'] = \\'Updated\\'
def allbutlast(seq):\n    it = iter(seq)\nel = next(it)
profile = LineProfiler()
from datautil.date import parse\nparse(\\'Jan 1890\\')
resp = HttpResponse(s.getvalue(), mimetype=\\'application/x-zip-compressed\\')\nresp[\\'Content-Disposition\\'] = \\'attachment; filename=%s\\' % zip_filename\nreturn resp
for word in fullWords:\n    if word not in stopWords:\n        d[word] += 1\nfinalFreq = sorted(iter(d.items()), key=lambda t: t[1], reverse=True)\nself.response.out.write(finalFreq)
def numbers(n):\n    pass
for i in range(ndata):\n    pass
import math\nx = [1, 2, 3, 4, 5]\ny = [1000, 1002, 1001, 1003, 1005]\nlow = min(y)\nhigh = max(y)\nplt.ylim([math.ceil(low - 0.5 * (high - low)), math.ceil(high + 0.5 * (high -\n    low))])\nplt.bar(x, y)\nplt.show()
import json
win32gui.ShowWindow(HWND, win32con.SW_RESTORE)\nwin32gui.SetWindowPos(HWND, win32con.HWND_NOTOPMOST, 0, 0, 0, 0, win32con.\n    SWP_NOMOVE + win32con.SWP_NOSIZE)
def getWindowText(hwnd):\n    buf_size = 1 + win32gui.SendMessage(hwnd, win32con.WM_GETTEXTLENGTH, 0, 0)\nbuf = win32gui.PyMakeBuffer(buf_size)\nwin32gui.SendMessage(hwnd, win32con.WM_GETTEXT, buf_size, buf)
if sys.platform == \\'linux2\\':\n    import ctypes\nlibc = ctypes.cdll.LoadLibrary(\\'libc.so.6\\')\nlibc.prctl(15, \\'My Simple App\\', 0, 0, 0)
filename = \\'config\\'\nparser = ConfigParser.SafeConfigParser()
import matplotlib.pyplot as plt\nimg = [[0.9, 0.3], [0.2, 0.1]]\ncmap = plt.get_cmap(\\'jet\\')
x_rem = x - x_int\nif x_int % 2 == 1:\n    return round(x)\nelif x_rem - 0.5 < 0.001:\n    return math.floor(x)\nelse:\n    return math.ceil(x)
fileref.setAttribute(\\'type\\', \\'text/javascript\\')\nfileref.setAttribute(\\'src\\', filename)
from rdflib import Graph, URIRef
if defn.name and defn.doc:\n    pass
def conv2(A, size):\n    pass
out_dates.append(idx[iEnd])
d = {\\'foo\\': \\'bar\\'}\nm.__getitem__.side_effect = d.__getitem__\nm.__iter__.side_effect = d.__iter__\nm[\\'foo\\']\n\\'foo\\' in m\nm.__contains__.side_effect = d.__contains__\n\\'foo\\' in m
rank = df.groupby(\\'key1\\').apply(lambda df: rank_multi_columns(df, [\\'data1\\',\n    \\'-data2\\']))\nprint(rank)
def change_view(self, request, object_id, extra_content=None):\n    self.exclude = \\'product\\', \\'description\\'
user[:name]
{\\'T1\\': set([\\'T1\\', \\'T2\\', \\'T5\\', \\'T9\\', \\'TA\\']), \\'T3\\': set([\\'T3\\', \\'T4\\', \\'T6\\',\n    \\'T7\\', \\'T8\\'])}
def iterate_until_timeout(timeout):\n    start = time.time()\nwhile time.time() - start < timeout:\n    yield None\nfor i, _ in enumerate(iterate_until_timeout(10)):\n    print(\\'Iteration Count: {0}\\'.format(count))\ntime.sleep(1)
import py2exe
def get_queryset(self):\n    if not self.request.user.is_authenticated():\n        qs = Gallery.objects.on_site().is_public()
MyClass.LAMBDA = MyClass.ClassMethod
def fftconv(A, size):\n    return signal.fftconvolve(A, np.ones((size, size)), mode=\\'same\\') / float(\n        size ** 2)
Date = \\'%(month)s %(day)s, %(year)s, %(hourmins)s\\' % types
ndim = 60000\nh5file = tb.openFile(\\'test.h5\\', mode=\\'w\\', title=\\'Test Array\\')
if arg:\n    return value / arg
from airflow.operators.bash_operator import BashOperator
filename = secure_filename(form.fileName.file.filename)\nfile_path = os.path.join(app.config[\\'UPLOAD_FOLDER\\'], filename)
master_table = tabulate([list(item) for item in zip(test_table1,\n    test_table2)], master_headers, tablefmt=\\'simple\\')
a = 10
import re\ns = \\"\\"\\"a\n\tb\n\t\tc\n\td\te\nf\t\tg\\"\\"\\"\nprint(re.sub(\\'^\\t+\\', lambda m: \\'  \\' * len(m.group()), s, flags=re.M))
class Wrapper(object):\n\n    def __init__(self, wrapped):\n        self.wrapped = wrapped
IP_PMTUDISC_WANT = 1\nIP_PMTUDISC_DO = 2\nIP_PMTUDISC_PROBE = 3\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\ns.connect((\\'10.0.0.1\\', 8000))\ns.send(\\'Hello World!\\')\ns.setsockopt(socket.SOL_IP, IP_MTU_DISCOVER, IP_PMTUDISC_DONT)\ns.send(\\'Hello World!\\')
class HelloWorld:\n    \\"\\"\\" Sample request handler class. \\"\\"\\"\n\ndef index(self, **params):\n    pass
from decimal import *
import sys\nprint(sys.path[0])\nsys.path.pop(0)
type(a)\n\\'numpy\\' in str(type(a))
rec = \\'\\'\nwhile True:\n    rec += connection.recv(1024)
@property\ndef local_name(self):\n    pass
with open(\\'C:/Users/visc/scratch/scratch_child/test.txt\\') as f:\n    for line in f:\n        drive, path = os.path.splitdrive(line)\npath, filename = os.path.split(path)
if c is None:\n    c_values = self.plt.rcParams[\\'patch.facecolor\\']\nelif c_is_column:\n    c_values = self.data[c].values\nelse:\n    pass
getsizeof(json.dumps(my_dictionary))\nsize = getsizeof(my_dictionary)\nsize += sum(map(getsizeof, list(my_dictionary.values()))) + sum(map(getsizeof,\n    list(my_dictionary.keys())))\nsize
h = os.popen(\\'wget -q -O foo1.txt http://foo.html\\')\nh.close()
print(curr)
return char\ntext = \\"a,b,{\\'c\\',\\'d\\',\\'e\\',\\'f\\'},g,h\\"\nprint(\\'\\'.join(map(str, map(replace_comma_in_curly_brackets, text))))
a = \\'foo\\'\n\ndef my_func(a=\\'bar\\'):\n    pass
if figure_id is None:\n    fig = plt.gcf()
def dummyEncode(df):\n    pass
class TreeNode:\n\n    def __init__(self, value, left=None, right=None):\n        self.value = value\nself.left = left\nself.right = right\n\n\nclass ObjectJSONEncoder(JSONEncoder):\n\n    def default(self, reject):\n        pass
import numpy as np\nA = np.array([[99, 2, 3], [0, 59, 2], [54, 4, 2]])
logging.basicConfig(filename=filename, level=logging.DEBUG, format=\n    \\'%(levelname)s[%(asctime)s]: %(message)s\\')\nsched = Scheduler()\nsched.start()\nsched.add_interval_job(run_job, minutes=30)
import greetings
from operator import or_\nfrom functools import reduce\nresult = reduce(or_, map(Counter, dicts), Counter())
cond1 = df.B.values == 123\na = np.unique(df.A.values[cond1])
cols = [\\'X\\', \\'Y\\', \\'Z\\']\ndf[cols].mean(axis=1)\ndf[cols].sum(axis=1)
import psycopg2\nfrom psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT\ncon = psql.connect(dbname=\\'postgres\\', user=self.user_name, host=\\'\\',\n    password=self.password)
class TestSpeedRetrieval(webapp.RequestHandler):\n    \\"\\"\\"\n  Test retrieval times of various important records in the BigTable database \n  \\"\\"\\"\n\ndef speedTestForRecordType(self, recordTypeClassname):\n    beginTime = time()\nitemList = recordTypeClassname.all().fetch(1000)\nfor item in itemList:\n    pass\nendTime = time()\nself.response.out.write(\\'<br/>%s count=%d Duration=%s\\' % (\n    recordTypeClassname.__name__, len(itemList), duration(beginTime, endTime)))
if result[\\'ResponseMetadata\\'][\\'HTTPStatusCode\\'\n    ] == 200 and \\'Attributes\\' in result:\n    pass
iterate(f, 4, 4)
if getattr(meta, \\'app_label\\', None) is None:\n    pass
import sched\nimport time\n\ndef f(t0):\n    print(\\'Time elapsed since t0:\\', time.time() - t0)\ns = sched.scheduler(time.time, time.sleep)\nfor i in range(10):\n    s.enterabs(t0 + 10 + i, 0, f, (t0,))\ns.run()
model = Picture
if line == \\'\\' or line.startswith(\\'#\\') or docstring and not (line.startswith\n    (\\'\\"\\"\\"\\') or line.startswith(\\"\\'\\'\\'\\")) or line.startswith(\\"\\'\\'\\'\\"\n    ) and line.endswith(\\"\\'\\'\\'\\") and len(line) > 3 or line.startswith(\\'\\"\\"\\"\\'\n    ) and line.endswith(\\'\\"\\"\\"\\') and len(line) > 3:\n    continue\nelif line.startswith(\\'\\"\\"\\"\\') or line.startswith(\\"\\'\\'\\'\\"):\n    docstring = not docstring
def some_complex_algo(list_of_named_tuples):\n    pass
time = 0\nwhile time < 100:\n    pass
if ms != ins:\n    print(self.inputs[in_])\nin_shape = self.inputs[in_][1:]\nm_min, m_max = mean.min(), mean.max()\nnormal_mean = (mean - m_min) / (m_max - m_min)\nmean = resize_image(normal_mean.transpose((1, 2, 0)), in_shape[1:]).transpose((\n    2, 0, 1)) * (m_max - m_min) + m_min\n\\"\\"\\"\n    raise ValueError(\\'Mean shape incompatible with input shape.\\')\n    \\"\\"\\"
remove = [\\'/usr/lib/python2.7\\']
sorted_deltas = np.sort(deltas) / frequency
import json\nuser_code = \\"\\"\\"\nimport json\nmy_data= {\\"a\\":[1,2,3]}\nprint json.dumps(my_data)\n\\"\\"\\"\nwith open(USER_CODE_FILE, \\'wb\\') as f:\n    f.write(user_code)\nuser_result_str = subprocess.check_output([PYTHON_PATH, USER_CODE_FILE])\nuser_result = json.loads(user_result_str)\nprint(user_result)
a = [[1, 2, 3], [4, 5, 6]]\nfor i in a:\n    pass
yield \\'delete\\', item
def letter_cmp(a, b):\n    pass
droid = android.Android()\nlogpath = \\'/mnt/sdcard/testTimer.py.log\\'\ncreateLog(logpath)\ntimer = threading.Timer(DELAY, doStuff)\nlogging.info(\\'timer starting now\\')\ntimer.start()\nlogging.info(\\'doStuff() will be called by timer...Delay=%d\\' % DELAY)
import re
if re.search(\\'done\\', line):\n    break\nprint(\\'waiting\\')\nos.kill(p.pid, signal.CTRL_C_EVENT)
k = np.array([17.0, 225000, 226000])\nb = scipy.stats.binom(n, p)
if isinstance(k, QName):\n    k = k.text
y = -4 + 2 * x - 3 * x ** 2\nmodel = make_pipeline(PolynomialFeatures(2), Ridge(alpha=1e-08,\n    fit_intercept=False))\nmodel.fit(x[:, (None)], y)\nridge = model.named_steps[\\'ridge\\']\nprint(ridge.coef_)
for cs in range(0, cols - 1, cstride):\n    pass
dayoftheweek = 2
for i in t[1:]:\n    dx = dALLdt(X[-1], i)\nx = X[-1] + dt * dx
s = 0\nfor e in l:\n    s += e\ns2 += e * e\nreturn s, s2
n = 0\nwhile n < 1000:\n    if n % 3 == 0 or n % 5 == 0:\n        pass
n = 0\nwhile n < 1000:\n    if n % 3 == 0 or n % 5 == 0:\n        pass
import itertools as it\na = [3, 2, 5, 1]\n[(y - x) for x, y in it.combinations(a, 2)]
for i, (name, grade) in enumerate(zip(nameList, gradeList)):\n    pass
Py_Finalize()\nreturn 0
if count_deals:\n    pass
class MyFormatter(string.Formatter):\n\n    def get_field(self, field_name, args, kwargs):\n        pass
if attr == \\'foo\\':\n    return foo()
class MetaMock(object):\n\n    def fields():\n        pass
li1 = [\\'a.1\\', \\'b.2\\', \\'c.8\\']\n\ndef k(s):\n    if s.startswith(\\'b.\\'):\n        return 1
import re
library(reshape2)
Qt.QWidget
step = Number(1)
for record in records:\n    pass_to_other_process(RecordData(record))
from bs4 import BeautifulSoup\nurl = \\'https://www.dukascopy.com\\'\nsession = dryscrape.Session()\nsession.visit(url)\nresponse = session.body()\nsoup = BeautifulSoup(response)\nprint(soup)
import sys\nsys.stdout = StringIO.StringIO()\nprint(\\'foo\\', \\'bar\\', \\'baz\\')
if invert:\n    mask.negate()\nwith Image(width=image.width, height=image.height, background=Color(\n    \\'transparent\\')) as alpha_image:\n    alpha_image.composite_channel(\\'alpha\\', mask, \\'copy_opacity\\', 0, 0)\nimage.composite_channel(\\'alpha\\', alpha_image, \\'multiply\\', 0, 0)
for prefix in [\\'foo\\', \\'bar\\', \\'spam\\']:\n    for item in inlist:\n        if item.startswith(prefix):\n            new_inlist.append(item.replace(prefix, prefix + separator))\nnew_inlist.sort(key=lambda x: x.split(separator)[1])
return \\'mno\\'\nl[0] += nasty()
\\"\\"\\"<script type=\\"text/javascript\\">\n                       alert(\\'You can only vote once\\');\n            </script>{0}\\"\\"\\"
def __init__(self, location):\n    if os.path.isdir(location):\n        for infile in glob.glob(os.path.join(directory, \\'*.png\\')):\n            pass
mi\nmi.tolist()\nind = pd.Index([(e[0] + e[1]) for e in mi.tolist()])\nind\ndf.columns = ind\ndf
def item_completed(self, results, item, info):\n    pass
df_smooth = df.reindex(index=index_hourly).interpolate(\\'cubic\\')\ndf_smooth = df_smooth.rename(columns={\\'value\\': \\'smooth\\'})\ndf_smooth.plot(ax=axs, alpha=0.7)\ndf.plot(ax=axs, alpha=0.7)
def page(request, num=\\'1\\'):\n    pass
def server():\n    pass
b = splinter.Browser()\nb.visit(\\'http://www.google.com\\')\nelems = b.find_by_tag(\\'a\\')\nfor e in elems:\n    pass
workbook = xlsxwriter.Workbook(\\'money_format.xlsx\\')\nworksheet = workbook.add_worksheet()\nmoney_format = workbook.add_format({\\'num_format\\': \\'[$R]#,##0.00\\'})
for j in range(N):\n    pass
import csv\nc = \\'a,b,c,\\"d,e\\",f,g\\'\nprint(next(csv.reader([c])))
excel.XlFormatConditionType.xlCellValue\nexcel.XlFormatConditionOperator.xlGreaterEqual
imp.filter.add(\\'http://domain3.com/url\\')\nimp.filter.add(\\'http://domain4.com/url\\')\nimp.filter.add(\\'http://domain5.com/url\\')\nd = ImportDoctor(imp)\noc = ObjectCache()\noc.setduration(days=360)\nurl = \\'http://domain.com/wsdl\\'\nclient = Client(url, doctor=d, cache=oc, timeout=30)
def __setattr__(self, *args):\n    raise TypeError(\\"can\\'t modify immutable instance\\")\n__delattr__ = __setattr__\n\ndef __init__(self, value):\n    pass
import re\nimport string\nremove = string.punctuation\nremove = remove.replace(\\'-\\', \\'\\')\npattern = \\'[{}]\\'.format(remove)\ntxt = \\")*^%{}[]thi\\'s - is - @@#!a !%%!!%- test.\\"\nre.sub(pattern, \\'\\', txt)
if rv:\n    yield rv
from datetime import timedelta, datetime\ntry:\n    offset = int(\\'Tue, 22 Jul 2008 08:17:41 +0300\\'[-5:])\nexcept:\n    print(\\'Error\\')\ndelta = timedelta(hours=offset / 100)\nfmt = \\'%a, %d %b %Y %H:%M:%S\\'\ntime = datetime.strptime(\\'Tue, 22 Jul 2008 08:17:41 +0200\\'[:-6], fmt)\ntime -= delta
v = numpy.linspace(0, numpy.pi, 100)\nself.x = A * numpy.outer(numpy.cos(u), numpy.sin(v))\nself.y = A * numpy.outer(numpy.sin(u), numpy.sin(v))\nself.z = A * numpy.outer(numpy.ones(numpy.size(u)), numpy.cos(v))\nself.ax = Axes3D(self.fig)
endif\nendif\nendwhile
import regex
from joblib import Memory
import clr\nimport System\nclr.AddReference(\\'YourDLLAssemblyName\\')\nfrom System.Runtime.Serialization.Formatters.Binary import BinaryFormatter\nfrom System.IO import FileStream, FileMode, FileAccess, FileShare\nfilepath = \\'<PathToYourDataFile>\\'\nserializer = BinaryFormatter()\nreader = FileStream(filepath, FileMode.Open, FileAccess.Read, FileShare.None)\ndata = serializer.Deserialize(reader)\nprint((data, data.GetType()))\nreader.Close()
bro.open(\\'http://www.google.com/\\')\nwin.add(bro)
foo = lambda x: dico.index[(dico[1] > x) & (dico[0] <= x)][0]\ndf[\\'col_1\\'].map(foo)
def check_selected():\n    global selected\npost = request.args.get(\\'post\\', 0, type=int)
from past.builtins import execfile\nexec(compile(open(\\'myfile.py\\').read(), \\'myfile.py\\', \\'exec\\'))
if not data:\n    break
layout = cairo_context.create_layout()
def index():\n    raise
plist = dict(NSPrincipalClass=\\'SillyBalls\\')\nsetup(plugin=[\\'SillyBalls.py\\'], data_files=[\\'English.lproj\\'], options=dict(\n    py2app=dict(extension=\\'.saver\\', plist=plist)))
item.elements[\\'apn\\'].text,\nitem.elements[\\'delinquent_year\\'].text,\nitem.elements[\\'apn_old\\'].text,
item.elements[\\'delinquent_year\\'].text,\nitem.elements[\\'apn_old\\'].text,\nitem.elements[\\'description\\'].text,
for line in line_iter:\n    words = line.split()\nif words[0] == \\'time\\':\n    time_header = [words[1:]]\ndescription = next(line_iter)\ntime_header.append(description)
def reduce(function, iterable, initializer=None):\n    it = iter(iterable)\nif initializer is None:\n    value = next(it)\nelse:\n    pass
def generate_until_threshold(iterator, threshold):\n    pass
w = copy.deepcopy(x)\nx[\\'a\\'] = 10\nx
for each in div_class:\n    name, size = each.div.stripped_strings\nprint((name, size))
class my_str(str):\n\n    def strip_inner(self):\n        pass
@client.DataWatch(\\'/path/to/watch\\')\ndef my_func(data, stat, event):\n    print(\\'Data is %s\\' % data)\nprint(\\'Version is %s\\' % stat.version)\nprint(\\'Event is %s\\' % event)
def saturateElements(x):\n    pass
fp = webdriver.FirefoxProfile()\nfp.set_preference(\\'http.response.timeout\\', 5)\nfp.set_preference(\\'dom.max_script_run_time\\', 5)
import ipy_autoreload
class BadFooTests(TestCase):\n    Foo.objects.all().delete()\n\ndef __init__(self):\n    f = Foo.objects.create()\nf.save()\n\ndef test_foo(self):\n    pass
class Shake(Enum):\n    __order__ = \\'vanilla chocolate cookies mint\\'\nvanilla = 7\nchocolate = 4\ncookies = 9\nmint = 3\nfor s in Shake:\n    pass
import fileinput\nimport sys\nfor line in (line.rstrip() for line in fileinput.FileInput(\\'test.txt\\',\n    inplace=1)):\n    if line:\n        print(line)\nprint(line, file=sys.stderr)
fields_desc = [ShortEnumField(\\'tag_type\\', None, {(0): \\'End-Of-List\\', (257):\n    \\'Service-Name\\', (258): \\'AC-Name\\', (259): \\'Host-Uniq\\', (260):\n    \\'AC-Cookie\\', (261): \\'Vendor-Specific\\', (272): \\'Relay-Session-Id\\', (513):\n    \\'Service-Name-Error\\', (514): \\'AC-System-Error\\', (515): \\'Generic-Error\\'}\n    ), FieldLenField(\\'tag_len\\', None, length_of=\\'tag_value\\', fmt=\\'H\\'),\n    StrLenField(\\'tag_value\\', \\'\\', length_from=lambda pkt: pkt.tag_len)]\nbind_layers(PPPoED, PPPoE_Tag, type=1)\nbind_layers(PPPoE_Tag, Padding, tag_type=0)\nbind_layers(PPPoE_Tag, PPPoE_Tag)
mycoord = SpatialReference(22186)\ntrans = CoordTransform(gcoord, mycoord)\npnt = Point(30, 50, srid=4326)\nprint(\\'x: %s; y: %s; srid: %s\\' % (pnt.x, pnt.y, pnt.srid))\npnt.transform(trans)\nprint(\\'x: %s; y: %s; srid: %s\\' % (pnt.x, pnt.y, pnt.srid))
if not some_strng in countries:\n    pass
def input_def(prompt, default=\\'\\'):\n    pass
if collide(t, u):\n    break
_pass = \\'password\\'\n_base = \\'database\\'\nreturn MySQLdb.connect(_host, _user, _pass, _base)
spaces = \\' \\' * 30
if __name__ == \\'__main__\\':\n    root = tk.Tk()\nopts = {\\'from\\': 0, \\'to\\': 10, \\'increment\\': 1}\nsp1 = tk.Spinbox(root, **opts)\nsp1.place(x=5, y=5)\nsp2 = Spinbox(root, **opts)\nsp2.place(x=5, y=30)\nroot.mainloop()
return connnection.fetch(num, rfc)
def read(self, kid):\n    return \\'{0} is reading {1}.\\'.format(kid, self.name)\n\ndef burn(self, library, lighter):\n    pass
thing
myPath = os.path.join(\\'C:\\Users\\Public\\Documents\\year 2013\\testfiles\\',\n    \\'testcode\\rawstringfiles.txt\\')
import netifaces
if reverse:\n    iterable = reversed(iterable)\nfor e in iterable:\n    x = func(x, e) if x is not None else e\nreturn x
from os import urandom\nreturn \\'\\'.join(chars[ord(c) % len(chars)] for c in urandom(length))
import struct
Xy = numpy.genfromtxt(\\'yourfile.csv\\', delimiter=\\',\\')\nskf = KFold(len(Xy))\nfor train_index, valid_index in skf:\n    ind_train, ind_valid = train_index, valid_index\nbreak
import re\ninFile = \\'/adda/adas/sdas/hello.txt\\'\nprint(re.split(\\'\\.|/\\', inFile)[-2])
PyErr_SetString(PyExc_IndexError, \\'tuple index out of range\\')\nreturn NULL
for degree in range(360):\n    x = cos(degree * 2 * pi / 360) * radius * xToYratio
diff = []\nsmall, big = (old, new) if len(old) < len(new) else (new, old)
def load_user():\n    if session[\\'user_id\\']:\n        user = User.query.filter_by(username=session[\\'user_id\\']).first()
avg_val = np.tile(val[:, (None)] / (2 * win + 1), (1, 2 * win + 1))\nunique_idx, _ = np.unique(avg_idx, return_inverse=True)
-build - essential\n-gfortran\n-libatlas - base - dev\n-libatlas3gf - base\n-python - dev\n-libjpeg - dev\n-libxml2 - dev\n-libfreetype6 - dev\n-libpng - dev
from celery.task.schedules import crontab\nfrom celery.decorators import periodic_task\n\n@periodic_task(run_every=crontab(hour=7, minute=30, day_of_week=\\'mon\\'))\ndef every_monday_morning():\n    pass
for i in range(10):\n    pass
tpr = dict()
if \\'Request\\' in dir(test):\n    cls = test.__dict__[\\'Request\\']\ncls(\\'http://test.com\\')
import datetime\nmy_day = datetime.date(2014, 7, 15)
def processItemsNotTwo_case2(list_of_nums):\n    list_of_nums = [x for x in list_of_nums if x != 2]\nlist1 = [1, 2, 2, 3, 4, 5]\nprocessItemsNotTwo_case1(list1)\nlist2 = [1, 2, 2, 3, 4, 5]
watched_keys = [\\'Control_R\\', \\'Control_L\\']\n\ndef handle_event(event):\n    pass
if hasattr(spam, \\'eggs\\'):\n    ham = spam.eggs\nelse:\n    pass
def even_only(lst):\n    evens = []\nfor number in lst:\n    if is_even(number):\n        evens.append(number)
from numpy import *\na = 1, 2, 3\nb = arange(27).reshape(3, 3, 3)\ns = slice(*a)\nb[s]
Py_END_ALLOW_THREADS
s = __import__(\\'conf1\\')\ntemp = \\'server\\'
error_description = strdup(str)
trace1 = Scatter3d(x=[1, 2], y=[1, 2], z=[1, 2])\ndata = Data([trace1])\nlayout = Layout(scene=Scene(xaxis=XAxis(title=\\'x axis title\\'), yaxis=YAxis(\n    title=\\'y axis title\\'), zaxis=ZAxis(title=\\'z axis title\\')))\nfig = Figure(data=data, layout=layout)\nplot_url = py.plot(fig, filename=\\'3d-scatter-with-axes-titles\\')
nan < 1.0
print(mytext)
\\"\\"\\"bytes\\"\\"\\"\n\\"\\"\\"crypto/sha256\\"\\"\\"\n\\"\\"\\"encoding/binary\\"\\"\\"\n\\"\\"\\"fmt\\"\\"\\"
class Test(webapp.RequestHandler):\n\n    def get(self, upload_type):\n        pass
refs = [(\\'1\\', \\'a\\', \\'string1\\'), (\\'1\\', \\'b\\', \\'string2\\'), (\\'1\\', \\'c\\', \\'string3\\'),\n    (\\'1\\', \\'d\\', \\'string3\\'), (\\'2\\', \\'a\\', \\'invalid\\'), (\\'2\\', \\'b\\', \\'invalid\\'), (\n    \\'2\\', \\'c\\', \\'string3\\'), (\\'2\\', \\'d\\', \\'string3\\')]\nlookup = {ref[:2]: ref[2] for ref in refs}\nprint(lookup[\\'1\\', \\'d\\'])
import numpy as np\nx = np.arange(100, dtype=np.float64)
c.LocalControllerLauncher.controller_cmd = [\\'/usr/bin/python2\\', \\'-m\\',\n    \\'ipyparallel.controller\\']\nc.LocalEngineLauncher.engine_cmd = [\\'/usr/bin/python2\\', \\'-m\\',\n    \\'ipyparallel.engine\\']\nc.LocalEngineSetLauncher.engine_cmd = [\\'/usr/bin/python2\\', \\'-m\\',\n    \\'ipyparallel.engine\\']
def getLetterObject(n):\n    if n == 1:\n        pass
from string import Template
from operator import itemgetter\n{k: sum(map(itemgetter(k), dict1)) for k in dict1[0]}\ndict((k, sum(map(itemgetter(k), dict1))) for k in dict1[0])
LogEntry.objects.log_action(user_id=request.user.id, content_type_id=\n    ContentType.objects.get_for_model(model_object).pk, object_id=object.id,\n    object_repr=str(object.title), action_flag=ADDITION if create else\n    CHANGE)
A = M.eigenvects()\nA[0][2][0].simplify()
def is_even(x):\n    pass
ranked = []\nfor item in a1:\n    pass
np.fix(np.array(-0.4)).tostring().encode(\\'hex\\')\nnp.fix(np.array(-0.0)).tostring().encode(\\'hex\\')
return NULL\nprintf(\\'%s %s\n\\', bar, baz)\nPy_INCREF(Py_None)
a = {}\na[1, 2, \\'bob\\'] = \\'hello!\\'
3
setting.INSTALLED_APPS = 10\napp.autodiscover_tasks(settings.INSTALLED_APPS, force=True)
if names.count() > 0:\n    pass
\\"\\"\\" Decorator for ignoring exception from a function\ne.g.   @ignore_exception(DivideByZero)\ne.g.2. ignore_exception(DivideByZero)(Divide)(2/0)\n\\"\\"\\"
for item in flatten(el):\n    pass
astring = sys.argv[1]\nif not astring.startswith(\\'(\\'):\n    astring = \\'(\\' + astring + \\')\\'
def main():\n    pass
import pandas as pd\nimport numpy as np\nfile_loc = \\'path.xlsx\\'\ndf = pd.read_excel(file_loc, index_col=None, na_values=[\\'NA\\'], parse_cols=\n    \\'A,C:AA\\')
chunk = struct.unpack_from(fmt, self.recv_buf, self.recv_buf_i)\nself.recv_buf_i += sz
for ind in range(len(myList)):\n    if ind == len(myList) - 1:\n        pass
bottom_points = r[\\'fliers\\'][2].get_data()[1]\nplot(np.ones(len(top_points)), top_points, \\'x\\', color=\\'blue\\', markersize=1)
def __init__(self, items=[]):\n    \\"\\"\\"\n        Create a new PriorityQueueSet.\n        Arguments:\n            items (list): An initial item list - it can be unsorted and\n                non-unique. The data structure will be created in O(N).\n        \\"\\"\\"\nself.set = dict((item, True) for item in items)\nself.heap = list(self.set.keys())\nheapq.heapify(self.heap)\n\ndef has_item(self, item):\n    pass
print([(int(col) if type(col) == float else col) for col in df.columns])\n[\\'a\\', \\'b\\', 2006, 2005, 1995]\ndf.columns = [(int(col) if type(col) == float else col) for col in df.columns]\n[\\'a\\', \\'b\\', 2006, 2005, 1995]
signals.py\n\n@receiver(post_save, sender=Sender_model)\ndef crud_log(sender, created, **kwargs):\n    obj = kwargs.get(\\'instance\\')
from core.models import *\nfrom core.serializers import *\ntiger = Lady(firstname=\\'Tiger\\', lastname=\\'Lily\\')\nserial = LadySerializer(tiger, many=False)\nserial.data
with youtube_dl.YoutubeDL(ydl_opts) as ydl:\n    pass
colormap.SetHueRange(0.667, 0.0)\ncolormap.SetVectorModeToMagnitude()\ncolormap.Build()
d[\\'className\\'] = \\'MyCPlusPlusClassName\\'\nwith open(yourTemplateFile, \\'r\\') as ftemp:\n    templateString = ftemp.read()
def btnclick(btn):\n    pass
img = plt.imshow(haha)\nprint(img.get_array())\nhaha[1, 1] += 1\nimg.set_data(haha)\nimg = plt.imshow(haha)\nprint(img.get_array())\nplt.show()
from tastypie.models import create_api_key\nmodels.signals.post_save.connect(create_api_key, sender=User)
import argparse\nparser = argparse.ArgumentParser(description=\\'My desc\\')\nsub_parsers = parser.add_subparsers()\nparser_a = sub_parsers.add_parser(\\'a\\', help=\\'a help\\')\nparser_b = sub_parsers.add_parser(\\'b\\', help=\\'b help\\')\nparser_b.add_argument(\\'-c\\', dest=\\'c\\', action=\\'store_true\\', default=False,\n    help=\\'c help\\')\nparser.parse_args()
import math, struct\nmult4 = lambda n: int(math.ceil(n / 4)) * 4\nmult8 = lambda n: int(math.ceil(n / 8)) * 8\nlh = lambda n: struct.pack(\\'<h\\', n)\nli = lambda n: struct.pack(\\'<i\\', n)\n\ndef bmp(rows, w):\n    h, wB = len(rows), int(mult8(w) / 8)\ns, pad = li(mult4(wB) * h + 32), [0] * (mult4(wB) - wB)\ns = li(mult4(w) * h + 32)\nreturn \\'BM\\' + s + \\'\x00\x00\x00\x00 \x00\x00\x00\x0c\x00\x00\x00\\' + lh(w) + lh(\n    h) + \\'\x01\x00\x01\x00\xff\xff\xff\x00\x00\x00\\' + \\'\\'.join([bytes(row +\n    pad) for row in reversed(rows)])
print((d.Caption, d.FreeSpace, d.Size, d.DriveType))
theOnlySlot = pkcs11.getSlotList()[0]
t = env.SharedLibrary(target=\\'abstract_classes\\', source=[\n    \\'/home/roman/language-binding/sources/pyplusplus_dev/unittests/temp/abstract_classes.cpp\\'\n    ], LIBS=[\\'boost_python\\'], LIBPATH=[\\'\\', \\'/home/roman/include/libs\\'],\n    CPPPATH=[\\'/home/roman/boost_svn\\', \\'/usr/include/python2.6\\',\n    \\'/home/roman/language-binding/sources/pyplusplus_dev/unittests/temp\\',\n    \\'/home/roman/language-binding/sources/pyplusplus_dev/unittests/data\\',\n    \\'/home/roman/boost_svn\\'], CCFLAGS=[], SHLIBPREFIX=\\'\\', SHLIBSUFFIX=\\'.so\\')
test = [it for it in l for _ in range(2)]\ntest\ntest[6].append(5)\ntest
if ind.any():\n    pass
university = django_filters.NumberFilter(name=\\'poster__university\\',\n    lookup_type=\\'exact\\')
if len(fields) != 5:\n    raise argparse.ArgumentTypeError(\\'String must have 5 fields\\')\nelif not 1 <= int(fields[2]) <= 10:\n    raise argparse.ArgumentTypeError(\n        \\'Field 3 must be between 1 and 10, inclusive\\')\nelse:\n    return v
import requests
def get_cnt(lVals):\n    d = dict(zip(lVals, [0] * len(lVals)))
import dis
integrate(g, t)\ng = 1 / (1 + exp(c * b - c * t))\nintegrate(g, t)
for row in m:\n    pass
class config:\n    option = 3
for kw, value in kwargs.items():\n    if kw in names:\n        params[kw] = value
with app.producer_or_acquire() as producer:\n    pass
def execute(script, args):\n    driver.execute(\\'executePhantomScript\\', {\\'script\\': script, \\'args\\': args})\ndriver = webdriver.PhantomJS(\\'phantomjs\\')\ndriver.command_executor._commands[\\'executePhantomScript\\'\n    ] = \\'POST\\', \\'/session/$sessionId/phantom/execute\\'\ndriver.get(\\'http://stackoverflow.com\\')\npageFormat = \\'this.paperSize = {format: \\"A4\\", orientation: \\"portrait\\" };\\'\nexecute(pageFormat, [])
if re.search(\\'done\\', line):\n    break
from lxml import etree\nXML = \\'<some_tag class=\\"abc\\"><strong>Hello</strong> World</some_tag>\\'
force[iParticle + 1:, :][(ind), :] -= ljdist
res = n._forward(a)\nprint(res._size())
try:\n    socket.gethostbyname(i.strip())\nexcept socket.gaierror:\n    print(\\'unable to get address for\\', i)
preferred_name = models.CharField(max_lengths=100)\n\ndef delete(self, *args, **kwargs):\n    pass
SYN = 2\nRST = 4
ax.hist([data.ix[low:high, (\\'values\\')] for low, high in [(0, 70), (70, 85),\n    (85, 90)]], bins=15, stacked=True, rwidth=1.0, label=[\\'first70\\',\n    \\'next15\\', \\'last5\\'])
f = open(client_secrets_filename, \\'r\\')\nclient_secrets = json.loads(f.read())
if item.checkState() == QtCore.Qt.Checked:\n    item.setCheckState(QtCore.Qt.Unchecked)
result = A[rows, column_indices]\nprint(pd.DataFrame(result, df.index, df.columns))
def merge_sort(m):\n    l = [[x] for x in m]\nwhile len(l) > 1:\n    pass
def __init__():\n    self.output_box = Text(fourth_frame, width=160, height=25, background=\n        \\'black\\', foreground=\\'white\\')\nself.output_box.configure(state=\\'disabled\\')\n\ndef somefunction():\n    self.output_box.configure(state=\\'normal\\')
from tkinter import *\nroot = Tk()\nroot.filename = filedialog.askopenfilename(initialdir=\\'E:/Images\\', title=\n    \\'choose your file\\', filetypes=((\\'jpeg files\\', \\'*.jpg\\'), (\\'all files\\',\n    \\'*.*\\')))\nprint(root.filename)\nroot.withdraw()
def knapsack(i, W):\n    global weights, values, table, counter\nif i < 0:\n    return 0\nif weights[i] > W:\n    table[i][W - 1] = knapsack(i - 1, W)
min_x, max_y, minloc, maxloc = cv2.minMaxLoc(result)\nx, y = minloc\nresult2 = np.reshape(result, result.shape[0] * result.shape[1])
class Meta(type):\n\n    def __new__(cls, clsname, bases, dct):\n        bases = tuple(dct.pop(\\'bases\\'))\nreturn type.__new__(cls, clsname, bases, dct)
def hankel1_imcut(n, z):\n    pass
width = istop - istart
import textwrap\ns = \\'aaaaaaaaaaaaaaaaaaaaaaa\\'\ntextwrap.wrap(s, 4)
for word in phrase.split():\n    pass
inserter = table_object.insert().prefix_with(\\'OR REPLACE\\')
def func(d1, Bo):\n    return d1 * Bo\nprint(optimization.curve_fit(func, xdata, ydata, x0, sigma))
arr[1]\narr[2]\narr[3]
x = np.array({\\'x\\': 1})\nx\nx[()]
def myround(x, prec=2, base=0.05):\n    pass
view_2_noblock.block = False\nview_3_noblock = rc[[0, 1]]\nview_3_noblock.block = False
df = pd.DataFrame(np.random.normal(0, 1, (4, 4)), index=[\\'a\\', \\'b\\', \\'c\\', \\'d\\'\n    ], columns=[\\'e\\', \\'f\\', \\'g\\', \\'h\\'])\ncolumn_dict = {}\nfor col in [{col: {True: col}} for col in df.columns]:\n    column_dict.update(col)
user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.\n    CASCADE, related_name=\\'post\\')
fstr = \\'def f(%s): pass\\' % \\', \\'.join([(\\'arg%d\\' % i) for i in range(5000)])\nexec(fstr)
doc[\\'priority\\'] = \\'high\\'\ndoc[\\'recipient\\'] = \\'Joe User\\'
def k_fold_generator(X, y, k_fold):\n    subset_size = len(X) / k_fold\nfor k in range(k_fold):\n    X_train = X[:k * subset_size] + X[(k + 1) * subset_size:]\nX_valid = X[k * subset_size:][:subset_size]\ny_train = y[:k * subset_size] + y[(k + 1) * subset_size:]\ny_valid = y[k * subset_size:][:subset_size]\nyield X_train, y_train, X_valid, y_valid
from pyspark.sql.types import StringType\nname = \\'target_column\\'
for k, v in all_occ.items():\n    kw_lengths.append((v[0][1] - v[0][0], k))\nkw_lengths.sort()
import itertools\na = [1, 2, 3]\nb = [4, 5, 6]
s = 0\nfor e in l:\n    s += e
json_format_string = json.dumps(definitions.objects.values_list(\\'title\\',\n    flat=True))
def put(self, params):\n    pass
transact_time = fix.TransactTime()\ntransact_time.setString(\\'20160404-03:52:24.824\\')
auth_encoded = base64.encodestring(\\'%s:%s\\' % (username, password))[:-1]\nreq = urllib.request.Request(\\'https://somewebsite.com\\')\nreq.add_header(\\'Authorization\\', \\'Basic %s\\' % auth_encoded)
import csv\nreader = csv.reader([\\'foo, bar, \\"one, two\\", three four\\'], skipinitialspace=True\n    )
sgn = npy.sign(q)
tz = pytz.timezone(\\'America/St_Johns\\')\nutc_time = utc_time.replace(tzinfo=pytz.UTC)\nst_john_time = utc_time.astimezone(tz)
x = 1 << 30\nx\ntype(x)\nx += 1 << 30\nx\ntype(x)
del z[2:-1]\nreturn z
fp.close()\ncall([\\'python\\', basename])
max_time, num_batches, num_labels = 3, 4, 6
user_options = install.user_options[:]\nuser_options.extend([(\\'manprefix=\\', None, \\'MAN Prefix Path\\')])
def convert_or_coerce_timestamp_to_utc(timeobj):\n    out = timeobj
df\nres = df.groupby(\\'month\\')\nres[\\'qualified\\'] = df.groupby(\\'month\\')
M = csc_matrix(np.random.rand(5, 5))\nB = np.random.rand(5, 4)\nX, info = bicg_solve(M, B)\nprint(X.shape)
t = np.arange(0, 10, 0.005)\nx = np.sin(2 * np.pi * t)\nf = 30 * (np.random.rand(t.size) + 0.225)\nN = t.size\ni = 1j\nW = np.exp(-2 * math.pi * i * np.dot(f.reshape(N, 1), t.reshape(1, N)))\nX = np.dot(W, x.reshape(N, 1))\nout = X.reshape(f.shape).T\nplt.plot(f, out, \\'ro\\')
f_no_opt = types.FunctionType(code, globals())\nt_no_opt = min(timeit.repeat(f_no_opt, repeat=10, number=10))\nt_opt = min(timeit.repeat(f_opt, repeat=10, number=10))\nt_opt / t_no_opt
req = urllib.request.Request(\\'http://www.python.org/\\')\nreq.headers[\\'Range\\'] = \\'bytes=%s-%s\\' % (18000, 19000)\nf = urllib.request.urlopen(req)\nrange = f.headers.get(\\'Content-Range\\')
raise
total_quantity = 0\ntotal_price = 0\nfor item in l:\n    pass
a = [1, 0, 1, 1, 0, 0, 1]\nb = [1, 0, 1, 1, 0, 1, 1]\nfor x in range(0, 7):\n    pass
b = container.GetBase()\nd = c.CastToDerived(b)\nd.f()
mybytes = bytearray()\nwhile True:\n    x = read_next_byte()\nif x == 0:\n    break
class stringer(type):\n    esc_statuses = {\\'RETURNED\\': \\'Returned\\', \\'SUBMITTED\\': \\'Submitted\\',\n        \\'DRAFT\\': \\'Draft\\', \\'CANCELED\\': \\'Canceled\\', \\'ESCALATED\\': \\'Escalated\\'}\nNewEscFieldText = {\\'customer_name\\':\n    \\'The name of the customer who encountered this bug.\\', \\'summary\\':\n    \\'A brief summary of the bug.\\', \\'request\\': \\'The request.\\',\n    \\'customer_impact\\': \\'How the customer is impacted.\\', \\'severity\\':\n    \\'The severity of the bug.\\', \\'component\\': \\'The component of this bug.\\',\n    \\'related_bugs\\': \\'Bugs which are related to this one.\\', \\'logs\\':\n    \\'The logs assosciated with this bug.\\', \\'description\\':\n    \\'A detailed discription of the problem and any work                 put into reproducting it.\\'\n    , \\'documentation\\': \\'Documentation consulted before escalation.\\'}\n\ndef __getattr__(self, name):\n    if name in stringer.NewEscFieldText:\n        pass
columns = [x.name for x in cursor.description]\nfor row in cursor:\n    pass
print(st_john_time)
self.amount_seen += len(data)
def __exit__(self, type, value, traceback):\n    self.output_pipe.close()\nif type is not None:\n    pass
data = \\'temp1:        +31.0\xb0C  (crit = +107.0\xb0C)\\'\ntemp_re = re.compile(\n    \\'(temp1:)\\s+(\\+|-)(\\d+\\.\\d+)\xb0C\\s+\\(crit\\s+=\\s+(\\+|-)(\\d+\\.\\d+)\xb0C\\).*\\'\n    , flags=re.UNICODE)
for subdir in subdirs:\n    SConscript(os.path.join(subdir, \\'SConscript\\'), exports=[\\'env\\'])
bisect.bisect(t3, \\'carves\\')\nbisect.bisect_left(t3, \\'carves\\')\nbisect.bisect == bisect.bisect_right\nbisect.bisect == bisect.bisect_left
def LatestDirectory(d):\n    pass
def upgrade(migrate_engine):\n    pass
arr2.ctypes.data
import fileinput\nfrom glob import glob
finfo(\\'d\\').max\niinfo(\\'i\\').max\niinfo(uint8).max
def saveData(self, image):\n    pass
for traincv, testcv in cv:\n    classifier = nltk.NaiveBayesClassifier.train(training_set[traincv[0]:\n        traincv[len(traincv) - 1]])\nprint(\\'accuracy:\\', nltk.classify.util.accuracy(classifier, training_set[\n    testcv[0]:testcv[len(testcv) - 1]]))
def login():\n    user = eval(input(\\'Username [%s]: \\' % getpass.getuser()))\nif not user:\n    user = getpass.getuser()\npprompt = lambda : (getpass.getpass(), getpass.getpass(\\'Retype password: \\'))
def fetch(url):\n    body = urllib.request.urlopen(url).read()\nreturn url, body
from collections import Counter\ndata = Counter(your_list_in_here)\ndata.most_common()\ndata.most_common(1)
fds = get_open_fds()\nprint(get_file_names_from_file_number(fds))
for i in x.keys():\n    x[i].lowBound = LB_ind[i]\nx[i].upBound = UB_ind[i]
top = Toplevel(root)\ntop.protocol(\\'WM_DELETE_WINDOW\\', root.destroy)\nbut = Button(top, text=\\'deiconify\\')\nbut[\\'command\\'] = root.deiconify\nbut.pack()\nroot.mainloop()
def get(self):\n    pass
print(\\'DEBUG: EDID DTD0: \\' + str((hres, vres)))\nres = hres, vres
def handler(signum, frame):\n    raise IOError(\\'The page is taking too long to read\\')\nsignal.signal(signal.SIGALRM, handler)\nsignal.alarm(5)\ntry:\n    output = read(\\'http://www.google.de/images/nav_logo4.png\\')\nexcept IOError:\n    pass\nsignal.alarm(0)
def func(x):\n    pass
loc = df1.index.get_loc(t)\ndf.irow(loc - 1)
FIND_PACKAGE(PythonInterp)
import warnings\nwith warnings.catch_warnings(record=True) as w:\n    warnings.warn(\\'deprecated\\', DeprecationWarning)\nprint(w)
[t.start() for t in tasks]\n[t.join() for t in tasks]
import random\nPrize = namedtuple(\\'Prize\\', [\\'left\\', \\'right\\'])\nthis_prize = Prize(\\'FirstPrize\\', \\'SecondPrize\\')\nif random.random() > 0.5:\n    choice = \\'left\\'\nelse:\n    choice = \\'right\\'\nprint(\\'You won\\', getattr(this_prize, choice))
executable = \\'path-to-chrome\\'\ncmd = \\' \\'.join([executable, url])
import wave\nw = wave.open(\\'myfile.wav\\', \\'rb\\')
stream.stop_stream()\nstream.close()
a = tf.truncated_normal([2, 3], mean=0.0, stddev=0.02, dtype=tf.float32, seed=1\n    )
a = np.ones(10000000, dtype=np.int64) * 500\nmask = np.random.randint(0, 2, a.size)\nb = np.ma.masked_array(a, mask=mask)\nb[np.invert(b.mask)] = 1000
a = \\'123456789\\'\nb = bytearray(a)\ndel b[3]
debug.setLogger(debug.Debug(\\'msgproc\\'))\nnext(sendNotification(SnmpEngine(), CommunityData(\\'public\\'),\n    UdpTransportTarget((\\'demo.snmplabs.com\\', 162)), ContextData(), \\'trap\\',\n    [ObjectType(ObjectIdentity(\\'1.3.6.1.2.1.1.1.0\\'), OctetString(\n    \\'my string\\')), ObjectType(ObjectIdentity(\\'1.3.6.1.2.1.1.3.0\\'),\n    Integer32(42))]))
test[6].append(5)\ntest
import xml.etree.ElementTree as ET\ne = ET.parse(\\'test.txt\\')\nroot = e.getroot()
tag_weight = {k: int(v) for k, v in list(tag_weight.items())}\ncount = collections.Counter(tag_weight)
val = np.intersect1d(df1.Name, df2.Name)\nprint(val)
while running:\n    start = time.clock()\npoll_twitter()\nanything_else_that_seems_important()\nwork_duration = time.clock() - start\ntime.sleep(polling_interval - work_duration)
bWgt = 0.7\nprint((np.where(a1.mask, 0.0, a1.data * aWgt) + np.where(b1.mask, 0.0, b1.\n    data * bWgt)) / (np.where(a1.mask, 0.0, aWgt) + np.where(b1.mask, 0.0,\n    bWgt)))
a.objectAtIndex_(1)\ntype(a)
if sys.version_info >= (3, 2):\n    install_requires = [\\'threadpool >= 1.2.7\\']\nelse:\n    pass
dfs = pd.read_html(driver.page_source)\ndriver.close()\nprint(dfs)
password = \\'swordfish\\'\nsalt = \\'yourAppName\\'
if \\'\\"\\' not in s:\n    return \\'\\"%s\\"\\' % s\nreturn \\"concat(\\'%s\\')\\" % s.replace(\\"\\'\\", \\'\\\',\\"\\\'\\",\\\'\\')
import xml.etree.ElementTree as ET\ntree = ET.parse(source)\nroot = tree.getroot()
mytype = namedtuple(\\'mytype\\', \\'foo bar baz\\')\na = mytype(1, 2, 3)\na.foo
res = [(not x & 1) for x in t_f_list]\nprint(res)
process = subprocess.Popen(command, stdin=subprocess.PIPE, stdout=\n    subprocess.PIPE, stderr=subprocess.PIPE, cwd=self.cwd,\n    universal_newlines=True, shell=True)\noutput = process.communicate()\nstdout = output[0]\nstderr = output[1]\nprint(stdout)
import cv2\nimport numpy as np\nimage = cv2.imread(\\'testimage.bmp\\')
with open(\\'secrets.yml\\') as f:\n    content = f.read()\nsecret = yaml.load(content)
buffer = cStringIO.StringIO()\ncodecinfo = codecs.lookup(\\'utf8\\')\nwrapper = codecs.StreamReaderWriter(buffer, codecinfo.streamreader,\n    codecinfo.streamwriter)
def chain(*iterables):\n    for it in iterables:\n        pass
word = word.decode(\\'UTF-8\\')\nword\nprint(word)
class Artist(Base):\n\n    def add_reviews(self, review_ids):\n        sess = object_session(self)
self.pid = os.fork()\nif self.pid == 0:\n    if \\'random\\' in sys.modules:\n        import random\nrandom.seed()\ncode = process_obj._bootstrap()\nsys.stdout.flush()\nsys.stderr.flush()\nos._exit(code)
class ProductQuantity(models.Model):\n    pass
w = gtk.gdk.get_default_root_window()\nsz = w.get_size()\nprint(\\'The size of the window is %d x %d\\' % sz)\npb = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, False, 8, sz[0], sz[1])\npb = pb.get_from_drawable(w, w.get_colormap(), 0, 0, 0, 0, sz[0], sz[1])
s = \\'a\\'\ns += \\'b\\'
import urllib.request, urllib.error, urllib.parse\nfrom openpyxl import load_workbook\nimport io\ndata = urllib.request.urlopen(\n    \\'https://content.potatocompany.com/workspaces/PotatoTeam/Shared Documents/XYZ errors/XYZ Errors_Confirm.xlsx\\'\n    )\nxlsx = data.read()\nwb = load_workbook(io.StringIO(xlsx))
\\"\\"\\"Error: Can\\'t find the file \\'settings_local.py\\' in the directory containing %r. It appears you\\'ve customized things.\nYou\\'ll have to run django-admin.py, passing it your settings module.\n\\"\\"\\"
do
platform = sys.platform
exp = pp.Forward()
import suds
with session.begin():\n    pk = 123\nbike = session.query(Bike).filter_by(bike_id=pk).first()\nif not bike:\n    new_bike = Bike(pk, \\'shiny\\', \\'bike\\')\nsession.add(new_bike)
from keras import backend as K
if not byte_s:\n    break\nbyte = byte_s[0]
from functools import reduce\ndf.groupby(\\'A\\').B.apply(lambda x: reduce(set.union, x))\nA
tips[\\'CI\\'] = tips_grouped.total_bill.apply(stats.sem) * 1.96\ntips.reset_index(inplace=True)
from sympy import *\nx = symbols(\\'x\\')\nfrom sympy import roots, solve_poly_system\nsolve(x ** 3 + 2 * x + 3, x)\np = Symbol(\\'p\\')\nq = Symbol(\\'q\\')\nsorted(solve(x ** 2 + p * x + q, x))\nsolve_poly_system([y - x, x - 5], x, y)\nsolve_poly_system([y ** 2 - x ** 3 + 1, y * x], x, y)
extProc = sp.Popen([\\'python\\', \\'myPyScript.py\\'])\nstatus = sp.Popen.poll(extProc)
import datetime\nimport os
input\nlogfile = \\'&logfile\\'
height, width, _ = vtk_image.GetDimensions()\nvtk_array = vtk_image.GetPointData().GetScalars()
fp.seek(environ[\\'HTTP_CONTENT_RANGE\\'])\nstart_response(\\'200 OK\\', (\\'Content-Type\\', \\'file/type\\'))\nreturn fp
import os\nfor file in os.listdir(\\'.\\'):\n    if not fnmatch.fnmatch(file, \\'hello*.txt\\'):\n        pass
8 - 0.311874 - 0.448886\n9 - 0.984453 - 0.755416
import numbers\nimport decimal
v = x.range.values
s = s + 42
cov.start()\nexecute_from_command_line(sys.argv)
10\ndf[df == 0] = np.random.choice(np.arange(2, 100), replace=False, size=df.shape)\nprint(df)
def tc_to_frame(hh, mm, ss, ff):\n    return ff + (ss + mm * 60 + hh * 3600) * frame_rate\n\ndef frame_to_tc(fn):\n    ff = fn % frame_rate\ns = fn // frame_rate\nreturn s // 3600, s // 60 % 60, s % 60, ff
import theano.sandbox.cuda.basic_ops as sbcuda\nimport numpy as np\nimport theano.tensor as T\nT.config.floatX = \\'float32\\'\nGPUFreeMemoryInBytes = sbcuda.cuda_ndarray.cuda_ndarray.mem_info()[0]\nfreeGPUMemInGBs = GPUFreeMemoryInBytes / 1024.0 / 1024 / 1024\nprint(\\'Your GPU has %s GBs of free memory\\' % str(freeGPUMemInGBs))\ntestData = shared(np.random.random((5000, 256 * 256)).astype(T.config.\n    floatX), borrow=True)\nprint(\\'The tasks above used %s GBs of your GPU memory. The available memory is %s GBs\\' % (\n    str(freeGPUMemInGBs - GPUFreeMemoryInBytes / 1024.0 / 1024 / 1024), str\n    (GPUFreeMemoryInBytes / 1024.0 / 1024 / 1024)))
var2 = np.arange(1, 10, 2)\nvar3 = np.arange(20, 50, 5)
stdcpp = cdll.LoadLibrary(\\'libstdc++.so.6\\')\nmyLib = cdll.LoadLibrary(\\'/path/to/test.so\\')\nspam = myLib.CreateInstanceOfClass()\nspam\nvalue = CallMemberTest(spam)
FLAG_3 = 4
import random\na = [\\'Stack\\', \\'Overflow\\', \\'rocks\\']
return \\'%s-%s-%s\\' % (fields[0], fields[2], fields[1])\nfor key, val in b.items():\n    DateK = switch_month_day(key)\nif DateK in d:\n    pass
@register.filter\ndef hash(object, attr):\n    pseudo_context = {\\'object\\': object}\ntry:\n    value = Variable(\\'object.%s\\' % attr).resolve(pseudo_context)\nexcept VariableDoesNotExist:\n    value = None\nreturn value
gradient(A * B * C)
f1 = h5py.File(file_name, \\'r+\\')\ndata = f1[\\'meas/frame1/data\\']\ndata[...] = X1
for row in result:\n    pass
import heapq\nwith open(\\'nums.txt\\') as f:\n    numbers = map(int, f.readlines())\nprint(heapq.nlargest(10, numbers))\nprint(heapq.nsmallest(10, numbers))\n\\"\\"\\"\n[1132513251, 13252365, 23512, 2000, 1251, 1235, 324, 100, 82, 82]\n[1, 1, 7, 13, 15, 21, 22, 22, 33, 82]\n\\"\\"\\"
def run(command, shell=True, pty=True):\n    \\"\\"\\"\n    Helper function.\n    Runs a command with SSH agent forwarding enabled.\n    Note:: Fabric (and paramiko) can\\'t forward your SSH agent. \n    This helper uses your system\\'s ssh to do so.\n    \\"\\"\\"\nreal_command = command\nif shell:\n    cwd = env.get(\\'cwd\\', \\'\\')
TestUser = User(\\'John\\', \\'Doe\\')\nquery_stat = str(session.query(User))
dumpchar = oneOf(list(printables) + [\\' \\']).leaveWhitespace()
def paragraph(lines):\n    for group_separator, line_iteration in groupby(lines.splitlines(True),\n        key=str.isspace):\n        if not group_separator:\n            yield \\'\\'.join(line_iteration)\nfor p in paragraph(\\"\\"\\"p1\np2\t\n\tstill p2\t   \n\tp\\"\\"\\"):\n    print(repr(p))\n\\"\\"\\"p1\n\\"\\"\\"\n\\"\\"\\"p2\t\n\tstill p2\t   \n\\"\\"\\"
from elementtree import SimpleXMLTreeBuilder\nElementTree.XMLTreeBuilder = SimpleXMLTreeBuilder.TreeBuilder
df = pd.DataFrame(np.random.randn(100, 2))\nmsk = np.random.rand(len(df)) < 0.8\ntrain = df[msk]
from itertools import chain
teststring = \\'48, \\"one, two\\", \\"2011/11/03\\"\\'\nfor line in csv.reader([teststring], skipinitialspace=True):\n    pass
def connect(self):\n    \\"\\"\\"Connect to a host on a given (SSL) port.\\"\\"\\"\nsock = socket.create_connection((self.host, self.port), self.timeout, self.\n    source_address)\nif self._tunnel_host:\n    pass
credentials = gce.AppAssertionCredentials(scope=\n    \\'https://www.googleapis.com/auth/bigquery\\')\nclient = bigquery_client.BigqueryClient(credentials=credentials, api=\n    \\'https://www.googleapis.com\\', api_version=\\'v2\\', project_id=GetMetadata(\n    \\'project/project-id\\'))
resource = xrc.XmlResource(\\'resource.xrc\\')\nresource.AddSubclassFactory(scf)
for actor in self.actors:\n    if actor.name == actorName:\n        pass
if \\':\\' not in buffer:\n    pass
time_header = None\nfor line in line_iter:\n    words = line.split()\nif words[0] == \\'time\\':\n    pass
def format(value, arg):\n    \\"\\"\\"\n    Alters default filter \\"stringformat\\" to not add the % at the front,\n    so the variable can be placed anywhere in the string.\n    \\"\\"\\"
for i in range(2, 4):\n    x = Popen(\\'python\\' + str(i) + \\' --version\\', shell=True, stdout=PIPE,\n        stdin=PIPE, stderr=STDOUT)\nwhile x.poll() == None:\n    sleep(0.025)
data_stack = numpy.empty((321, 720, 1000), dtype=numpy.float32)
v = numpy.linspace(0, numpy.pi, 100)\nself.x = A * numpy.outer(numpy.cos(u), numpy.sin(v))\nself.y = A * numpy.outer(numpy.sin(u), numpy.sin(v))\nself.z = A * numpy.outer(numpy.ones(numpy.size(u)), numpy.cos(v))\nself.ax = Axes3D(self.fig)\n\ndef draw_fig(self):\n    pass
parser.add_option(\\'--my-option\\', help=\n    \\"\\"\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nb\nc                            d\ne\nf\\"\\"\\"\n    )\nparser.print_help()
action2.long_press(x=xx, y=yy).move_to(x=0, y=-50).wait(500).release()\nm_action.add(action1, action2)
import hashlib\nencoded = hashlib.sha1(\\'abcdef\\')\nencoded.hexdigest()
part_num = random.randint(0, len(l) - 1)\npartition = l[part_num]\nstart = random.randint(0, len(partition) - k)
from sklearn.pipeline import Pipeline\nimport numpy as np
for x in strs:\n    if x in new_strs:\n        new_strs.append(new_strs[new_strs.index(x)])\nelse:\n    new_strs.append(x)\nprint([id(y) for y in new_strs])
if some_error:\n    pass
with open(self.dir + \\'/img/img1.jpg\\', \\'rb\\') as img1:\n    img1StringIO = StringIO(img1.read())
def is_domain(d):\n    for suffix in suffixes:\n        if d.endswith(suffix):\n            pass
def default(self, obj):\n    pass
df\ns = df.a[:5]\ndfa, sa = df.align(s, axis=0)
cov.save()\ncov.report()
user = cache.get(\\'user_id_%s\\' % user_id)\nif user is None:\n    pass
def process_id(item):\n    pass
def block_mean(ar, fact):\n    assert isinstance(fact, int), type(fact)\nsx, sy = ar.shape\nX, Y = np.ogrid[0:sx, 0:sy]
state = (1.0 - rel_coeff) * sample + rel_coeff * state
import platform\nprint(platform.python_implementation())
multiples = ((a, b) for a, b in product(range(100, 999), repeat=2) if\n    is_palindrome(a * b))\nprint(max(multiples, key=lambda a_b: a_b[0] * a_b[1]))
if out is None:\n    pass
def get(self):\n    response = {}\nresponse[\\'message\\'] = \\'This is an instruction object\\'
quote_swap = functools.partial(string.translate, table=string.maketrans(\n    \\'\\\'\\"\\', \\'\\"\\\'\\'))
@contextlib.contextmanager\ndef cd_change(tmp_location):\n    cd = os.getcwd()\nos.chdir(tmp_location)\ntry:\n    yield\nfinally:\n    os.chdir(cd)
import numpy as np\nrawdata = [(1, 0.4, 4), (1, 0.6, 6), (2, 2.6, 6)]
strf = lambda v: \\'%%.%ig\\' % max(np.ceil(np.log10(v)), 7) % v\nstrf(123.456789)
p = subprocess.Popen([\\'/bin/bash\\', \\'-i\\'], preexec_fn=libc.setsid, stdin=\n    slave, stdout=slave, stderr=slave)\nos.close(slave)
for url in url_list:\n    pass
def measure_none():\n    start = time.time()\nfor i in range(0, int(math.pow(10, 8))):\n    a = \\'123\\'\na = None\nend = time.time()\nprint(end - start)
if not PYSOLR_PATH in sys.path:\n    pass
import csv\nwith open(\\'output_file_name\\', \\'w\\', newline=\\'\\', encoding=\\'utf-8\\') as csv_file:\n    pass
for x1, y1, x2, y2 in lines:\n    for index, (x3, y3, x4, y4) in enumerate(lines):\n        pass
from urllib.parse import quote\nquote(\\'/test\\')
t = Test()\nt2 = [4, 5, 6]
right_now = datetime.datetime.now()\nright_now_utc = right_now.replace(tzinfo=pytz.timezone(\\'America/New_York\\')\n    ).astimezone(pytz.utc)
foo = \\'Bs12 3ab\\'\nfoo[:-3]\nfoo[:-3].strip()\nfoo[:-3].strip().replace(\\' \\', \\'\\')
def chunk_str(str, chunk_size):\n    pass
corr = df.corr()\nfig, ax = plt.subplots(figsize=(size, size))
import os, sys\nsys.path.append(\\'d:/projects/mysite\\')\nos.environ[\\'DJANGO_SETTINGS_MODULE\\'] = \\'mysite.settings\\'
def nop(x):\n    pass
if cv2.waitKey(1) & 255 == ord(\\'q\\'):\n    break
soup4 = BeautifulSoup(\\'<div><b>soup 4</b></div>\\')\nif soup4.body:\n    return soup4.body.__next__\nelif soup4.html:\n    pass
class Listener(ListenerBase):\n\n    def OnRecognition(self, _1, _2, _3, Result):\n        \\"\\"\\"Callback whenever something is recognized.\\"\\"\\"\n\ndef OnHypothesis(self, _1, _2, Result):\n    \\"\\"\\"Callback whenever we have a potential match.\\"\\"\\"
con = pyodbc.connect(\n    \\'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=Z:\\Data\\Instruments\\testDB.accdb; Provider=MSDASQL;\\'\n    )\ncur = con.cursor()\nstring = (\n    \\"\\"\\"CREATE TABLE TestTable(symbol varchar(15), leverage double, shares integer, price double)\\"\\"\\"\n    )\ncur.execute(string)
f = lambda m, n: [(i * n // m + n // (2 * m)) for i in range(m)]\nf(1, 20)
f.buffer\nf.buffer.raw\nf.seek(0, os.SEEK_END)
for list in s:\n    if len(list) == 0:\n        list.append(number)
lg.string.lower\nlg.string.lower(\\'Hello world!\\')
def any_func(name, age, sex=\\'M\\', capital_letters=()):\n    print(\\'name \\', name)\nprint(\\'age \\', age)\nprint(\\'sex \\', sex)
import sys
import theano.tensor as T\nfrom theano import function\nx = T.dmatrix(\\'x\\')\nlinmax = function([x], T.maximum(x, 0))
for d in glob.glob(p):\n    if os.path.isfile(d):\n        files.append(d)\nrec_glob(\\'%s/*\\' % d, files)\nfiles = []
if entry.mygroup == mygroup:\n    pass
__author__ = \\'spouk\\'
f = open(textfile, \\'r+\\')\nrow_list = []\nfor row in f:\n    row_list.append(row.split(\\'|\\'))\ncolumn_list = zip(*row_list)\nworkbook = xlwt.Workbook()\nworksheet = workbook.add_sheet(\\'Sheet1\\')\ni = 0\nfor column in column_list:\n    for item in range(len(column)):\n        value = column[item].strip()\nif is_number(value):\n    worksheet.write(item, i, float(value), style=style)\nelse:\n    worksheet.write(item, i, value)\ni += 1\nworkbook.save(textfile.replace(\\'.txt\\', \\'.xls\\'))
items = re.findall(\\'token.*$\\', s, re.MULTILINE)\nfor x in items:\n    pass
setup(name=\\'LSD\\', version=\\'0.0.1\\', description=\n    \\'Python bindings for the LSD line segment detector.\\', long_description=\n    readme, author=\\'Geoff Hing\\', author_email=\\'geoffhing@gmail.com\\', url=\n    \\'https://github.com/ghing/python-lsd\\', packages=[\\'lsd\\'], package_data={\n    \\'lsd\\': [\\'liblsd.so\\']}, include_package_data=True, classifiers=[\n    \\'Development Status :: 1 - Planning\\', \\'Intended Audience :: Developers\\',\n    \\'License :: OSI Approved :: MIT License\\',\n    \\'Operating System :: OS Independent\\', \\'Programming Language :: Python\\',\n    \\'Programming Language :: C\\'])
property = db.StringProperty()\naction = db.EnumProperty([\\'insert\\', \\'update\\', \\'delete\\'])
import ast
def sleep(self, delay):\n    self.now += delay\nmytimer = FakeTime()
if s.compare(chunk[0], someFileId) > threshold:\n    chunk.append(someFileId)
im = imread(\\'0RqUd-1.jpg\\')
subscriptions = filters.get(word)\nif subscriptions is not None:\n    pass
\\'MC_OLD_M>18\\', \\'MC_OLD_F>18\\', \\'MC_OLD_18>M>5\\', \\'MC_OLD_18>F>5\\'\n\\'MC_OLD_M_Child<5\\', \\'MC_OLD_F_Child<5\\', \\'MC_OLD_M>0<=1\\'
def squeeze(char, s):\n    pass
if database not in existing_databases:\n    mysql_engine.execute(\\'CREATE DATABASE {0}\\'.format(database))
for attribute in e.attrs:\n    if attribute[0] not in whitelist:\n        pass
def foo(a, b):\n\n    def bar(c):\n        pass
for y, row in enumerate(CELL_MAP):\n    for x, v in enumerate(row):\n        pass
import statsmodels.api as sm\nmodel = sm.OLS()\nresults = model.fit(train_X, train_Y)
from flask import Flask\nfrom flask.ext.restful import Api
clean_users = shelve.open(\\'clean_users.dat\\')\ninfected_users = shelve.open(\\'infected_users.dat\\')\nfor iteration in range(1, N):\n    new_infected_users = dict()\nfor an_infected_timestamp in list(infected_users.keys()):\n    current_infected_users = infected_users[an_infected_timestamp]\nfor a_clean_timestamp in list(clean_users.keys()):\n    if time_stamp_in_delta(an_infected_timestamp, a_clean_timestamp):\n        current_clean_users = clean_users[a_clean_timestamp]\ninfected_users.close()\nclean_users.close()
def reduce(function, iterable, initializer=None):\n    it = iter(iterable)\nif initializer is None:\n    value = next(it)\nelse:\n    value = initializer
import matplotlib as mpl
def register():\n    pass
library(lubridate)
import pandas as pd\nend_date = dt.datetime.now().date()
readRequest += chr(startOffset % 256)\nreadRequest += chr(0)\nreadRequest += chr(2 * nToRead)\nsockOutfile.write(readRequest)
import numpy\nimport skimage\nimport skimage.io\nimg = skimage.io.imread(\\'uY173.png\\')\nimport skimage.transform\nimg50_order0 = skimage.img_as_ubyte(skimage.transform.rescale(img, 0.5,\n    order=0, clip=True))\nimg50_order1 = skimage.img_as_ubyte(skimage.transform.rescale(img, 0.5,\n    order=1, clip=True))\nimg50_lm = numpy.rint(skimage.transform.downscale_local_mean(img, (2, 2, 1),\n    clip=True))\nimport scipy.ndimage.interpolation\nimg50_nd = scipy.ndimage.interpolation.zoom(img, (0.5, 0.5, 1))\nplot(img50_order0[(50), :, (1)])\nplot(img50_order1[(50), :, (1)])\nplot(img50_lm[(50), :, (1)])\nplot(img50_nd[(50), :, (1)])
def getFiletime(dt):\n    microseconds = int(dt, 16) / 10\nseconds, microseconds = divmod(microseconds, 1000000)\ndays, seconds = divmod(seconds, 86400)\nreturn datetime.datetime(1601, 1, 1) + datetime.timedelta(days, seconds,\n    microseconds)\nprint(format(getFiletime(hex(13024882639633631 * 10)[2:17]),\n    \\'%a, %d %B %Y %H:%M:%S %Z\\'))
def __getstate__(self):\n    state = self.__dict__.copy()\ndel state[\\'_sa_instance_state\\']
(2)(1, 3, 4)\n(3)(1, 2, 4)\n(4)(1, 2, 3)
client = paramiko.SSHClient()\nclient.load_system_host_keys()\nclient.set_missing_host_key_policy(paramiko.WarningPolicy)
def f(a, L=[]):\n    L.append(a)\nreturn L\nprint(f(1))\nprint(f(2))\nprint(f(3))
import ctypes\ntestlib = ctypes.CDLL(\\'/full/path/to/testlib.so\\')\ntestlib.myprint()
def onchange_time(self):\n    for rec in self:\n        time1 = datetime.strptime(rec.time1, \\'%Y-%m-%d %H:%M:%S\\')\ntime2 = datetime.strptime(rec.time2, \\'%Y-%m-%d %H:%M:%S\\')
ret = []
c.execute(\\'insert or ignore into blah values (?, ?)\\', (cid, buffer(zlib.\n    compress(html))))
data_obj = conn.modules.lazyme.AwesomeObject(\\'ABCDE\\')
bin_range = np.arange(-200, 1000 + step, step)\nout, bins = pd.cut(s, bins=bin_range, include_lowest=True, right=False,\n    retbins=True)
r = re.compile(\\"\\'(\\d+)\\'\\")\nresult = r.findall(\\"\\'1\\', \\'2\\', \\'345\\'\\")\nresult
b = 112233\nz = zip(str(a), str(b))
something
multiply = a * b
class vehicle(object):\n\n    def __init__(self, name):\n        self.name = name\nself.kinds_list = [\\'tank\\', \\'car\\', \\'motorbike\\', \\'bike\\', \\'quad\\']\n\n@property\ndef kind(self):\n    return self._kind\n\n@kind.setter\ndef kind(self, x):\n    pass
import os\nsys.path.append(os.path.join(\\'..\\', \\'src\\'))
from sys import argv, version
while s:\n    pass
MyStruct = namedtuple(\\'MyStruct\\',\n    \\'ThreadInstance ThreadName Mnemonic IpAddr IpGW Status Mode\\')
class myClass:\n\n    def __init__(self, myFunc=lambda : None):\n        pass
df = pd.DataFrame({\\'a\\': [1, 2, 3, 4, 5], \\'b\\': [\\'yes\\', \\'no\\', \\'yes\\', \\'no\\',\n    \\'absent\\']})
csvfile = file(out_file, \\'w\\')
lists = [[\\'Sometimes\\'], [\\' \\'], [\\'I\\'], [\\' \\'], [\\'love\\', \\'hate\\'], [\\' \\'], [\n    \\'pizza\\', \\'coke\\']]\nfor s in sentences(lists):\n    pass
def vec_sort2(input_li):\n    bv = bitarray(len(input_li))\nbv.setall(0)\nfor i in input_li:\n    bv[i] = 1
for n in range(i + 1):\n    if n % 2:\n        new.append(a[i])
w, vr = eig(L)\nprint(vr)
primes = set(primes_to_one_million_however_you_want_to_get_them)
inputTbl.close()\noutputTbl = dbf.Table(\\'c:\\temp\\output.dbf\\', \\'tid N(17.0), zones C(20)\\')\nfor tid in sorted(taxIdZoning):\n    record = outputTbl.append()\nrecord.tid = tid\nrecord.zones = \\',\\'.join(sorted(taxIdZoning[tid]))\noutputTbl.close()
m = Mock(spec=[])
if len(bar) > 1:\n    return bar
for path in paths:\n    pass
def __init__(self, dataSample):\n    pass
for stmt in sqlparse.split(queries):\n    sql = sqlparse.parse(stmt)[0]\nprint(sqlparse.sql.TokenList([t for t in _filter(sql)]))
df = DataFrame(Y)\ndf[1] = df[0].diff() > 600000000000.0\ndf[1] = df[1].apply(lambda x: 1 if x else 0).cumsum()
l_index = 0\nfor d in dict1:\n    pass
from lxml import etree\nfrom copy import deepcopy\nxml = \\"\\"\\"<root xmlns=\\"default_ns\\">\n    <subelement>\n        <!-- here we can have an element of any namespace  -->\n        <some_prefix:a xmlns:some_prefix=\\"some_namespace\\">\n            <some_prefix:b/>\n        </some_prefix:a>\n    </subelement>\n</root>\\"\\"\\"\nroot = etree.fromstring(xml)\nevaluator = etree.XPathEvaluator(root, namespaces={\\'def\\': \\'default_ns\\'})\nchild = evaluator.evaluate(\\'//def:subelement/child::*\\')[0]\nchild = deepcopy(child)\na_string = etree.tostring(child)\nprint(a_string)
d2 = {(3): \\'three\\'}\nds = [d1, d2]
quality = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nthreshold = 4\nvalue = 17\nvalues[quality < threshold] = value
row_sums = numpy.zeros_like(img)\nfor i in range(img.shape[0]):\n    if i > K:\n        row_sums[(i), :] = row_sums[(i - 1), :] - img[(i - K - 1), :] + img[(\n            i), :]
def merge_sort(m):\n    l = [[x] for x in m]\nwhile len(l) > 1:\n    for x in range(len(l) >> 1):\n        pass
import scipy as sp\nimport scipy.sparse\nx = np.arange(10)
_lock_services = threading.Lock()\ntmp_file = \\'/tmp/txt.json\\'
d = SortedDict({(1): 5, (2): 5, (4): 5})\nd\nd[3] = 5
tmp = self.field.toPlainText()\nprint(\\'field.toPlainText: \\', tmp)\ncodec0 = QtCore.QTextCodec.codecForName(\\'UTF-16\\')\ncodec1 = QtCore.QTextCodec.codecForName(\\'ISO 8859-2\\')\nprint(\\'UTF-16: \\', str(codec0.fromUnicode(tmp), \\'UTF-16\\'))
observer = startLogging(stdout, setStdout=False)
for sock in ready_socks:\n    pass
isColor = 1\nfps = 25\nframeW = 256\nframeH = 256\nwriter = cvCreateVideoWriter(\\'video.avi\\', -1, fps, cvSize(frameW, frameH),\n    isColor)\nnFrames = 70\nfor i in range(nFrames):\n    img = cvLoadImage(\\'image_number_%d.png\\' % i)\ncvWriteFrame(writer, img)\ncvReleaseVideoWriter(writer)
import sys\nimport urllib.request, urllib.parse, urllib.error
emit(\\'scenario.Add(new DelayCommand(\\' + length + \\'))\\')
if __name__ == \\'__main__\\':\n    pass
for k, v in list(self._members_.items()):\n    if v == value:\n        pass
mx = ma.masked_array(x, mask=[0, 0, 0, 1, 0, 0, 0])\nz, pval = mstats.normaltest(mx)\nif pval < 0.055:\n    pass
parser.add_argument(\\'word\\', help=\\'word to count\\')\nargs = parser.parse_args()\nr = requests.get(\\'http://www.google.com/search\\', params={\\'q\\': \\'\\"\\' + args.\n    word + \\'\\"\\', \\'tbs\\': \\'li:1\\'})
model.add(SimpleRNN(2, init=\\'normal\\'))\nadam = Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-08)\nmodel.compile(loss=\\'mean_squared_error\\', optimizer=\\'rmsprop\\')
from collections import Counter\nc = Counter()\nfor letter in \\'here is a sample of english text\\':\n    c[letter] += 1\nc\nc[\\'e\\']\nc[\\'z\\']
from forbiddenfruit import curse\n\n\nclass MyThing(int):\n\n    def __new__(cls, *args, **kwargs):\n        magic_slice = slice(args[0], args[1])\ncurse(slice, \\'otherstuff\\', args[2])\nreturn magic_slice\nthing = MyThing(1, 3, \\'thing\\')\nprint(\\'hello world\\'[thing])\nprint(thing.otherstuff)
def chunks(l, n):\n    pass
sns.set_style(\\'white\\')\nx = np.arange(0, 10, 0.01)\nytrue = np.exp(-x / 5.0) + 2 * np.sin(x / 3.0)
import datetime\nserial = 43111.0\nseconds = (serial - 25569) * 86400.0\ndatetime.datetime.utcfromtimestamp(seconds)
taskbar = cc.CreateObject(\\'{56FDF344-FD6D-11d0-958A-006097C9A090}\\',\n    interface=tbl.ITaskbarList3)
stack.append(n)\nreturn stack[0]
n = 8\ndates = pd.date_range(\\'1/1/2013\\', freq=\\'D\\', periods=n)\ndf = DataFrame({\\'key\\': np.arange(n), \\'date\\': dates, \\'value\\': np.arange(n) * 10}\n    )
foo = \\'Concatenating_\\' + \\'also_helps_if_long_enough\\'\nbar = \\'Concatenating_\\' + \\'also_helps_if_long_enough\\'
yield\nre.compile = re.my_compile
import itertools
return fn, None
do_one()\ndo_two()\ndo_three()
other1, other2, biggest = sorted(num_list)\nsum_of_two = other1 + other2
UseShellExecute = false,
def wrapper_unpickler(factory, cls, reconstructor, *args):\n    pass
\\'%s\\' % [A()]\n\\'%s\\' % [A()]\nprint(\\'%s\\' % [A()])
mutable = [\\'1000\\']\nint_in_place(mutable)
@app.route(\\'/is_logged_in/\\')\ndef is_logged_in():\n    pass
import os\nos.path.basename(f)
from matplotlib import rcParams
player_move = \\'punch\\'\nprint(ai[ai_move][player_move])
try:\n    buffer = os.read(io, BUFFER_SIZE)\nexcept OSError as err:\n    if err.errno == errno.EAGAIN or err.errno == errno.EWOULDBLOCK:\n        buffer = None
data = {}\nfor c in student_courses:\n    pass
from scipy.stats import multivariate_normal as mvnorm\nx = np.random.rand(5)\nmvnorm.pdf(x)
def _batch(self, requests):\n    body = {\\'requests\\': requests}\nreturn self._service.spreadsheets().batchUpdate(spreadsheetId=self.\n    spreadsheetId, body=body).execute()
filename = \\'{}.pid\\'.format(os.getpid())\n\n@app.before_first_request\ndef before_first_request():\n    with open(filename, \\'w\\') as file:\n        file.write(\\'Hello\\')\n\ndef cleanup():\n    pass
class strplus(int):\n\n    def __radd__(self, other):\n        pass
import pandas as pd\nimport numpy as np\nnp.random.seed(1)
mat < -matrix(seq_len(m * n), nrow=m, ncol=n)\nr < -raster(mat, xmn=0, xmx=n, ymn=0, ymx=m)
money = \\'$6,150,593.22\\'
from distutils import sysconfig
import re
accounts[1][\\'calls\\'] = accounts[1][\\'calls\\'] + 1\naccounts[2][\\'calls\\'] = accounts[2][\\'calls\\'] + 1\nprint(accounts[1][\\'calls\\'])
bits = [x.rsplit(\\',\\', 1) for x in bits0]\nbits\nkv = [(bits[i][-1], bits[i + 1][0]) for i in range(len(bits) - 1)]\nkv
{first: \\'John\\', last: \\'Smith\\'},\n{first: \\'Dave\\', last: \\'Smith\\'}
def __eq__(self, other):\n    return type(self) is type(other\n        ) and self.x == other.x and self.y == other.y\n\ndef __ne__(self, other):\n    return not self.__eq__(other)\n\ndef __hash__(self):\n    pass
columns = create_columns(bot)\nvsb = ttk.Scrollbar(bot, orient=\\'vertical\\', command=bot.yview)\nhsb = ttk.Scrollbar(bot, orient=\\'horizontal\\', command=bot.xview)\nbot.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)\nmap(lambda col: col.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.\n    set), columns)
parser = xml.sax.make_parser([\\'xml.sax.IncrementalParser\\'])\nhandler = FooHandler()\nparser.setContentHandler(handler)\ndata = sockfile.readline()\nwhile len(data) != 0:\n    parser.feed(data)
color1 = eval(input(\\'Color 1: \\'))\ncolor2 = eval(input(\\'Color 2: \\'))
continue
d = difflib.Differ()\nl = list(d.compare(\\'hello\\', \\'heXXo\\'))\nl
import netrc\nHOST = \\'mailcluster.loopia.se\\'\nsecrets = netrc.netrc()\nusername, account, password = secrets.authenticators(HOST)\nprint(username, password)
from sqlalchemy import event\n\n@event.listens_for(Engine, \\'connect\\')\ndef set_sqlite_pragma(dbapi_connection, connection_record):\n    cursor = dbapi_connection.cursor()
config.one.key2, type(config.one.key2)\nconfig.get(\\'one\\', \\'key\\'), config.get(\\'one\\', \\'key2\\')
def create_button(self, typ):\n    pass
from xml.etree import ElementTree\nresponse = requests.get(url)\ntree = ElementTree.fromstring(response.content)
csrf = CsrfExtension
def extract_chunk(fn, directory, ix_begin, ix_end):\n    with zipfile.ZipFile(\\'{}/file.zip\\'.format(directory), \\'r\\') as zf:\n        infos = zf.infolist()\nprint(infos)\nfor ix in range(max(0, ix_begin), min(ix_end, len(infos))):\n    zf.extract(infos[ix], directory)\nzf.close()\ndirectory = \\'path\\'\nextract_chunk(\\'{}/file.zip\\'.format(directory), directory, 0, 50)
if not user:\n    user = getpass.getuser()
from lxml.etree import fromstring, tostring\nxml = fromstring(\\'<p id=\\"1\\">text</p>\\')\njson.dumps(xmljson.badgerfish.data(xml))\nxmljson.parker.etree({\\'ul\\': {\\'li\\': [1, 2]}})
import numpy as np\nsamples = l.rvs(size=2 * 10 ** 7)\nprint(\\'mean: %.5f  stddev: %.5f\\' % (np.mean(samples), np.std(samples)))
def uglybuiltinsyntax():\n    pass
def receiveSome(self, bytes):\n    pass
if LIVEHOST:\n    pass
base = base_size ** num.arange(base_size)
c.LocalEngineLauncher.engine_cmd = [\\'/usr/bin/python2\\', \\'-m\\',\n    \\'ipyparallel.engine\\']\nc.LocalEngineSetLauncher.engine_cmd = [\\'/usr/bin/python2\\', \\'-m\\',\n    \\'ipyparallel.engine\\']
def find_packages(path=__path__, prefix=\\'\\'):\n    pass
import numpy as np\nx = np.array([0, 1, 2, 3, 4, 5])
df[\\'b\\'] = df.groupby(\\'a\\')[\\'b\\'].transform(\\'max\\')\ndf
class POINT(Structure):\n    pass
i.thumbnail(size_64)\nout_path = \\'resize/{}_64\\'.format(fn, fext)\ni.save(out_path)\nreturn out_path\ns_jpg_files = s_jpg_list.map(resize_image)\nprint((\\'Converted Images:\\', s_jpg_files.collect()))
import rtmidi_python as rtmidi
@app.route(\\'/api/v1/account\\', methods=[\\'POST\\'])\ndef create_account():\n    pass
_SHGetFolderPath = windll.shell32.SHGetFolderPathW\n_SHGetFolderPath.argtypes = [wintypes.HWND, ctypes.c_int, wintypes.HANDLE,\n    wintypes.DWORD, wintypes.LPCWSTR]
mls = unary_union(lr)
from nltk.classify.naivebayes import NaiveBayesClassifier
pc_dud_ = pc_dud[:]
array_1 = numpy.array([dict_1[key] for key in keylist])\narray_2 = numpy.array([dict_2[key] for key in keylist])
def xmlToDict(element):\n    return dict(field1=element.findtext(\\'tag1\\'), field2=element.findtext(\n        \\'tag2\\'))\n\ndef loadRow(aDict):\n    f = MyObjectLoadForm(aDict)\nif f.is_valid():\n    f.save()\n\ndef parseAndLoad(someFile):\n    doc = ET.parse(someFile).getroot()
@route(\\'(address)@(subdomain).(host)\\', address=\\'.+\\', subdomain=\\'[^\\.]+\\')\ndef START(message, address=None, subdomain=None, host=None):\n    pass
True\nTrue\nFalse\nFalse\nFalse\nFalse
yield\nfor num in range(limit):\n    if list(filter(num)):\n        yield num\nmatched += 1
roc_auc[i] = auc(fpr[i], tpr[i])
add_label = lambda lst, lab: [(x, lab) for x in lst]
2.8786796564403576, 2.8786796564403576\nprint(i.geoms[1].coords[0])\n7.121320343559642, 7.121320343559642
ta.substitute({\\'hi\\': \\'have a nice day\\'})\nta = TemplateAlternative(\\'[--[-hi-]-]\\')\nta.substitute({\\'hi\\': \\'have a nice day\\'})
import os, time
print(a)\n\ndef g():\n    pass
t = 1, 2, 3\nt2 = 4, 5\nl += t + t2\nl
Fs = 1600
adder_node = a + b
datalines_str = DataFrame({\\'rsparid\\': map(str, [1400, 634, 1508, 96, 161, \n    1011, 1007, 518, 1955, 678])})\ndatalines_int\ndatalines_str
for p in s.parts:\n    p.insert(0, instrument.Violin())
from win32com.client import Dispatch\nxl = Dispatch(\\'Excel.Application\\')
class State(object):\n    pass
blurred_grayscale = scipy.ndimage.filters.gaussian_filter(original_grayscale,\n    blur_parameter)\ndifference_image = original_grayscale - multiplier * blurred_grayscale\nimage_to_be_labeled = ((difference_image > threshold) * 255).astype(\\'uint8\\')\nlabelarray, particle_count = scipy.ndimage.measurements.label(\n    image_to_be_labeled)
resp_json_payload = response.json()
def __init__(self):\n    f = Foo.objects.create()\nf.save()\n\ndef test_foo(self):\n    pass
dt\ndt.timestamp()\nparse(\\'16/11/12\\')\ndatetime.datetime(2012, 11, 16, 0, 0)
def stdstring_args(elem):\n    pass
class visdel(object):\n\n    def __del__(self):\n        print(\\'del\\', id(self))\nd = visdel()\na = list()\na.append(d)
high = 4 * np.sqrt(6.0 / (fan_in + fan_out))\nreturn tf.Variable(tf.random_uniform(shape, minval=low, maxval=high, dtype=\n    tf.float32))
def all_permutations_substrings(a_str):\n    pass
token = \\'(TOKEN)\\'\nreplace = \\'foo\\'
def f():\n    a, b = 257, 257
User = {(0): {\\'uid\\': \\' rpatil\n\\'}, (1): {}}\nif User[1] == {}:\n    pass
@patch.object(time, \\'time\\')\ndef test_keep_trying(self, mock_time):\n    mock_time.side_effect = iter([100, 200, 300, 400, 500, 600, 700, 800])
text = \\"\\"\\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam ornare\ntempor lacus, quis pellentesque diam tempus vitae. Morbi justo mauris,\ncongue sit amet imperdiet ipsum dolor sit amet, consectetur adipiscing elit. Nullam ornare\ntempor lacus, quis pellentesque diam\\"\\"\\"\ntokens = nltk.word_tokenize(text)
app.config[\\'SQLALCHEMY_BINDS\\'] = {\\'other_schema\\': \\'your_other_db_uri\\'}\n\n\nclass TableA(db.Model):\n    pass
from IPython.core import prompts\ntermcolors = coloransi.TermColors()
class Asset(models.Model):\n    asset_id = models.AutoField(primary_key=True)\nasset_image = models.ImageField(upload_to=\\'images/temp\\', max_length=255,\n    null=True, blank=True)
import decimal\nd2 = decimal.Decimal(2)
[\\'c\\', \\'d\\', \\'e\\', \\'f\\']\n[\\'e\\', \\'f\\', \\'g\\', \\'h\\']
def remove_zero_rows(M):\n    pass
for ind in range(len(myList)):\n    if ind == len(myList) - 1:\n        break
if kwargs:\n    pass
def range(x, axis=0):\n    pass
from docutils.core import publish_parts\nprint(publish_parts(\\'*anurag*\\', writer_name=\\'html\\')[\\'html_body\\'])
data = np.array(np.random.rand(1000))\ny, binEdges = np.histogram(data, bins=100)\nbincenters = 0.5 * (binEdges[1:] + binEdges[:-1])\np.plot(bincenters, y, \\'-\\')
import operator
a_thing = example.get_thing(b, 0)\nexample.set_thing(b, 0, 999)
class A(object):\n\n    def __new__(cls):\n        return 42\n\n\nclass B(A):\n    pass
a = [1, 2, 3]\nb = [4, 5, 6]\nb.extend(a)
gr = P.OneOrMore(P.Group(key_equal + val))\nprint(gr.parseString(\\'ids = 12, 13, 14 fields = name, title\\'))
g[[\\'Manufacturer\\', \\'OrderNr\\']].first().join(g.Id.agg({\\'Names\\': \\', \\'.join,\n    \\'Count\\': \\'count\\'})).reset_index()
z = \\'\\'
if filename.endswith(\\'.py\\'):\n    pass
z = randn(2048, 2048)
pass
preV = data[\\'x\\'].shift(1)\nnexT = data[\\'x\\'].shift(-1)
import itertools\nX = np.concatenate([np.random.randn(3, 10), np.random.randn(2, 10) + 100])
n[k] = expected[o, k]
port = 5000 + random.randint(0, 999)\nurl = \\'http://127.0.0.1:{0}\\'.format(port)\nthreading.Timer(1.25, lambda : webbrowser.open(url)).start()
[q, r] = np.linalg.qr(np.array([1, 0, 0, 0, 1, 1, 1, 1, 1]).reshape(3, 3))\nmask = np.all(np.abs(r) < 1e-06, axis=1)
model = PageFile
key_string = \\'------\\'\nnot_really_a_file = StringIO.StringIO(key_string)\nprivate_key = paramiko.RSAKey.from_private_key(not_really_a_file)\nnot_really_a_file.close()
original_open = open\n\ndef bin_open(filename, mode=\\'rb\\'):\n    return original_open(filename, mode)
import re\na = \\'This is a testing text and used to test and test and test.\\'\nprint([m.start() for m in re.finditer(\\'\\btest\\b\\', a)])
False and myList.append(\\'myString\\')\nmyList
charttype = \\'pieChart\\'\nchartcontainer = \\'piechart_container\\'\ndata = {\\'charttype\\': charttype, \\'chartdata\\': chartdata, \\'chartcontainer\\':\n    chartcontainer, \\'extra\\': {\\'x_is_date\\': False, \\'x_axis_format\\': \\'\\',\n    \\'tag_script_js\\': True, \\'jquery_on_ready\\': False}}
def getPointTotal(cards):\n    card_scores = [getPoints(card) for card in cards]
return\nmethod_to_be_executed_in_case_of_exception_or_pk_is_false()
with open(\\'file\\') as f:\n    rawtxt = [i.strip() for i in f if i != \\'\n\\']\nl = []\nfor i in [rawtxt[i:i + 2] for i in range(0, len(rawtxt), 2)]:\n    pass
import sys\ntry:\n    raise Exception(\\'Message\\')\nexcept:\n    type, value, tb = sys.exc_info()
mx = np.array([[[1.0, 2.0, 3.0, 4.0, -1.0], [1.0, 2.0, 3.0, 4.0, -1.0], [\n    1.0, 2.0, 3.0, 4.0, -1.0], [1.0, 2.0, 3.0, 4.0, -1.0], [1.0, 2.0, 3.0, \n    4.0, -1.0]], [[1.0, 2.0, 3.0, 4.0, -1.0], [1.0, 2.0, 3.0, 4.0, -1.0], [\n    1.0, 2.0, 3.0, 4.0, -1.0], [1.0, 2.0, 3.0, 4.0, -1.0], [1.0, 2.0, 3.0, \n    4.0, -1.0]]])
grammar = Grammar(\\'example grammar\\')\ngrammar.add_rule(ExampleRule())\ngrammar.load()
import sys\nfrom PyQt4.QtGui import QPixmap, QApplication, QColor
include_dll_path = os.path.join(site_dir, \\'gtk\\')\nmissing_dll = [\\'libgtk-3-0.dll\\', \\'libgdk-3-0.dll\\', \\'libatk-1.0-0.dll\\',\n    \\'libcairo-gobject-2.dll\\', \\'libgdk_pixbuf-2.0-0.dll\\', \\'libjpeg-8.dll\\',\n    \\'libpango-1.0-0.dll\\', \\'libpangocairo-1.0-0.dll\\',\n    \\'libpangoft2-1.0-0.dll\\', \\'libpangowin32-1.0-0.dll\\', \\'libgnutls-26.dll\\',\n    \\'libgcrypt-11.dll\\', \\'libp11-kit-0.dll\\']\nglade_folder = \\'glade\\'\ngtk_libs = [\\'etc\\', \\'lib\\', \\'share\\']\ninclude_files = []\nfor dll in missing_dll:\n    include_files.append((os.path.join(include_dll_path, dll), dll))\ninclude_files.append((glade_folder, glade_folder))\nfor lib in gtk_libs:\n    include_files.append((os.path.join(include_dll_path, lib), lib))\nbase = None\nif sys.platform == \\'win32\\':\n    base = \\'Win32GUI\\'\nexecutables = [Executable(\\'main.py\\', base=base)]\nbuildOptions = dict(compressed=False, includes=[\\'gi\\'], packages=[\\'gi\\'],\n    include_files=include_files)\nsetup(name=\\'test_gtk3_app\\', author=\\'Gian Mario Tagliaretti\\', version=\\'1.0\\',\n    description=\\'GTK 3 test\\', options=dict(build_exe=buildOptions),\n    executables=executables)
a = 1, 2\ntype(a)\nb = 1, 2\ntype(b)
import hashlib\ninp = open(\\'inp.txt\\', \\'r\\')\noutputhash = open(\\'outputhashes.txt\\', \\'w\\')\nfor line in inp:\n    eachpwd = line.strip()\nprint(repr(line))\nsha_1 = hashlib.sha1()\nsha_1.update(eachpwd)\noutputhash.write(sha_1.hexdigest())\noutputhash.write(\\'\n\\')
import subprocess
def create_detail(self, object_list, bundle):\n    pass
class Foo(models.Model):\n    pass
z = x[1]\ndata1 = data[0]
iph = IP(import_hexcap())\niph.ttl = iph.ttl - 1
def _my_render_template(*args, **kwargs):\n    if detect_mobile_browser(flask.request.user_agent.string):\n        args = (\\'m/\\' + args[0],) + args[1:]\nreturn _render_template(*args, **kwargs)
c1[\\'name\\'] = \\'A:0\\'\nprint(c1)\nc1[\\'name\\'] = \\'\\"A:0\\"\\'\nprint(c1)\nc1[\\'name\\'] = \\'\\"\\\\"A:0\\\\"\\"\\'\nprint(c1)
from ..Module_B import Module_B
word\nprint(word)\nword = word.decode(\\'UTF-8\\')\nword\nprint(word)\nword = word.encode(\\'UTF-8\\')
p1 = 0\ndur1 = 1
def get(self):\n    pass
box = 30, 30, 110, 110\nic = image.crop(box)\nfor i in range(10):\n    ic = ic.filter(ImageFilter.BLUR)
import os, glob\nfor filename in glob.glob(\\'mypath/version*\\'):\n    pass
assert number >= 0\nresult = self._square_root(number)\nassert abs(result * result - number) < 0.01\nreturn result\n\ndef _square_root(self, number):\n    \\"\\"\\"\n        Abstract method for implementing L{square_root()}\n        \\"\\"\\"\nraise NotImplementedError()
aList = []\nwith open(self.filename, \\'r\\') as f:\n    pass
def storescores():\n    hs = open(\\'hst.txt\\', \\'a\\')\nhs.write(name + \\' \\')
exceptions[exc_name].append(currentRowIdx)
a = time.clock()\nres = np.array_equal(A, B)
import struct\nsocket.inet_ntoa(struct.pack(\\'>I\\', random.randint(1, 4294967295)))\nsocket.inet_ntoa(struct.pack(\\'>I\\', random.randint(1, 4294967295)))
label, num_label = ndimage.label(array == 0)\nsize = np.bincount(label.ravel())
for i in range(10000):\n    exec (\\'import os as foo%i\\' % i)\nfor i in range(10000):\n    exec (\\'foo%i.getcwd()\\' % i)
A
for upload in uploads:\n    pass
class_weight = \\'auto\\',
import os
test2\ntest2.reshape(-1, 2)[::2].reshape(-1, 4)
alphaDict = dict.fromkeys(s, 0)\nalphaDict
for e in f[\\'entries\\']:\n    pass
from keyring.backends.file import EncryptedKeyring, PlaintextKeyring\nif isinstance(get_keyring(), EncryptedKeyring):\n    set_keyring(PlaintextKeyring())
for alias in aliases:\n    subject_alt_names.append(\\'DNS:{}\\'.format(alias))\nreq.add_extensions([crypto.X509Extension(\\'subjectAltName\\', False, \\',\\'.join(\n    subject_alt_names))])
dll.sqlite3_update_hook(db, c_callback, None)
def finalize_options(self):\n    \\"\\"\\"finalize options\\"\\"\\"\npass\n\ndef run(self):\n    \\"\\"\\"runner\\"\\"\\"
from math import log10
print(hex(bits))
zero_mat
import codecs\ncodecs.open(\\'x.txt\\', \\'r\\', \\'utf-8-sig\\').read()
map(chr, list(range(65, 91)))\nmap(chr, list(range(97, 123)))
d = visdel()\na = list()
for funcname in dir(builtins):\n    f = getattr(builtins, funcname)
import random\ndf = pandas.DataFrame(np.random.randn(100, 4), columns=list(\\'ABCD\\'))
while 1:\n    pass