[int(x) for x in str(num)]
np.array(x._data).reshape(x.size[::-1]).T
itertools.combinations
pygame.display.flip()
print([l[i:i + n] for i in range(len(l)) for n in range(1, len(l) - i + 1)])
max(min(my_value, max_value), min_value)
pd.get_dummies(df)
[x[1] for x in elements]
root.mainloop()
[i for i, e in enumerate(a) if e != 0]
max(a_list, key=operator.itemgetter(1))
[item for item in a if item[0] == 1]
[a[i] for i in (1, 2, 5)]
sum(len(v) for v in food_colors.values())
plt.show()
plt.show()
plt.show()
[[[4, 4, 4], [4, 4, 4], [4, 4, 4]], [[4], [4], [4]]]
sorted(list(myDict.items()), key=lambda e: e[1][2])
sorted(list(tag_weight.items()), key=lambda x: int(x[1]), reverse=True)
max(flatlist, key=lambda x: x[1])
df.sort(axis=1, ascending=False)
[i for i, j in zip(a, b) if i == j]
conn.commit()
sorted(list_of_tuples, key=lambda tup: tup[1])
datetime.datetime.now() - datetime.timedelta(days=1)
{k: v for d in L for k, v in list(d.items())}
a.sort(key=lambda x: b.index(x[0]))
instance.__class__.__name__
sorted(list(data.items()), key=lambda x: x[1])
f.close()
datetime.datetime.now().date()
numpy.array([[0, 1, 0], [0, 0, 0], [0, 0, 0]])
[i[0] for i in a]
sorted(list(data.items()), key=lambda x: x[1][0])
sorted(a, key=foo)
ax.plot_trisurf(XS, YS, ZS)
map(dict, zip(*[[(k, v) for v in value] for k, value in list(d.items())]))
SomeModel.objects.filter(id=id).delete()
print(random.choice(words))
a.sort(key=lambda x_y: b.index(x_y[0]))
zipped.sort(key=lambda t: t[1])
np.where(a == 1)
f.close()
list(itertools.product(*a))
[input[i:i + n] for i in range(0, len(input), n)]
logging.getLogger().setLevel(logging.DEBUG)
sorted(enumerate(a), key=lambda x: x[1])
array([[True, True], [False, False], [False, False], [True, True]], dtype=bool)
random.sample(list(range(100)), 10)
max(abs(x - y) for x, y in zip(values[1:], values[:-1]))
df.unstack()
[dict(y) for y in set(tuple(x.items()) for x in d)]
sum(d.values())
root.destroy()
pandas.concat([df1, df2], axis=1)
[(x, y) for x, y in a if x == 1]
sorted(iter(dict_.items()), key=lambda x: x[1])
xs.sort(key=lambda s: len(s))
len(set(mylist)) == 1
plt.show()
plt.show()
__init__.py
[len(x) for x in s.split()]
sorted(iter(result.items()), key=lambda key_value: key_value[0])
ax.scartter(XS, YS, ZS)
df.sort(df.columns, axis=1, ascending=False)
[(k, v) for k, v in a.items()]
list(range(9))
L.sort(key=operator.itemgetter(1))
plt.show()
dict((k, v) for k, v in parent_dict.items() if 2 < k < 4)
os.path.dirname(os.path.abspath(existGDBPath))
dict([(e[0], int(e[1])) for e in lst])
df.groupby(level=[0, 1]).median()
plt.show()
my_list[-10:]
all(isinstance(x, int) for x in lst)
[[X[i, j] for i in range(X.shape[0])] for j in range(x.shape[1])]
fh1.seek(2)
(i + 1, j), (i - 1, j), (i, j - 1), (i, j + 1), (i + 1, j - 1), (i + 1, j + 1)
[[X[i, j] for j in range(X.shape[1])] for i in range(x.shape[0])]
[(0, 4), (7, 9), (11, 11)]
[x for y, x in sorted(zip(Y, X))]
myFunc(lambda a, b: iadd(a, b))
plt.gca().invert_yaxis()
numpy.where(mask)
sorted(list(dictionary.items()), key=lambda x: x[1])
numpy.array([(x in a) for x in b])
p.stdin.flush()
dict([(k, v) for k, v in zip(keys, values)])
plt.show()
np.outer(a, b)
[x[0] for x in G]
os.kill(process.pid, signal.SIGKILL)
dict((k, v) for k, v in zip(keys, values))
[set(item) for item in set(frozenset(item) for item in L)]
x[(np.arange(x.shape[0]) != 1), :, :]
plt.show()
(i + 1, j), (i - 1, j), (i, j - 1), (i, j + 1), (i - 1, j - 1), (i + 1, j - 1)
dogtail.rawinput.click(100, 100)
sorted(d, key=lambda k: d[k][1])
[item for item in a if 1 in item]
session.query(Entry).join(Entry.tags).filter(Tag.id == 1).count()
list(d.values())
[x[1] for x in L]
df.div(df.sum(axis=1), axis=0)
sum(your_list)
[sum([x[1] for x in i]) for i in data]
[k for k, v in i.items() if v == 0]
dataList.sort(key=lambda x: x[1])
plt.show()
sum(x * y for x, y in list(zip(a, b)))
HttpResponse(status=204)
df.apply(lambda x: x.tolist(), axis=1)
list.sort()
[int(x) for x in bin(8)[2:]]
df.apply(lambda row: label_race(row), axis=1)
sorted(list_of_tuples, key=lambda tup: tup[::-1])
plt.show()
[x for x in items if x[2] == 0]
os.path.split(os.path.abspath(existGDBPath))
l.sort(key=alphanum_key)
[x for x in l if x[1] == 1]
df[~df.index.duplicated()]
print([key for key, value in list(d.items()) if value == 1])
[i for i in y if y[i] == 1]
bar.sort(key=lambda x: (x.attrb1, x.attrb2), reverse=True)
print(soup.get_text())
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
[j for i in zip(a, b) for j in i]
df.groupby(df.index).sum()
plt.gca().invert_xaxis()
s.groupby(grouper).sum()
[4, 5, 5, 6, 6, 6]
self.request.url
logging.basicConfig()
[y for x in list(dict.items()) for y in x]
sorted(lst, reverse=True)
[x for x in a if x != [1, 1]]
print(bool(a))
os.path.dirname(os.path.abspath(__file__))
sorted(a, key=lambda x: (len(x), [confrom[card[0]] for card in x]))
df.sort_values(by=1, ascending=False, axis=1)
list(itertools.islice(it, 0, n, 1))
sys.stdout.flush()
plt.show()
array([[1, 2], [2, 0]])
next(iter(list(dict.values())))
{x[1]: x for x in lol}
plt.show()
a[:] = [x for x in a if x != [1, 1]]
sorted(mylist, key=lambda x: order.index(x[1]))
cv2.destroyAllWindows()
matplotlib.pyplot.show()
sum(map(lambda x: x * x, l))
sorted(lst, key=lambda x: (sum(x[1:]), x[0]), reverse=True)
unittest.main()
sorted(item, key=lambda x: x.id)
np.cumsum(x[::-1])[::-1]
pd.concat([df1, df2], axis=1)
plot([0, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 1], [0.5, 1], [1, 1])
keys.sort(key=lambda k: (k[0], int(k[1:])))
sorted(lst, key=lambda x: (x < 0, x))
[(v, k) for k, v in a.items()]
map(sum, zip(*l))
df[(df.iloc[:, -12:] == -1).any(axis=1)]
fig.add_subplot(1, 1, 1)
print(any(x in a for x in b))
print([key for key, value in d.items() if value == 1])
[i for i in y if y[i] > 1]
getattr(your_obj, x)
np.sum(a)
sorted(unsorted, key=lambda element: (element[1], element[2]))
f.close()
vectorizer.get_feature_names()
pygame.display.update()
your_list.sort(key=lambda x: x.anniversary_score)
time.sleep(1)
[(lst[i], lst2[i]) for i in range(len(lst))]
[x[0] for x in os.walk(directory)]
all(i < j for i, j in zip(a, b))
sorted(lst, key=lambda x: (sum(x[1:]), x[0]))
[sorted(item) for item in data]
print(browser.current_url)
db.session.commit()
sum(j ** i for i, j in enumerate(l, 1))
pygame.display.update()
b = dict(zip(a[0::2], a[1::2]))
pd.concat([df, res], axis=1)
any(np.equal(a, [1, 2]).all(1))
datetime.datetime.now().date()
dict(x[1:] for x in reversed(myListOfTuples))
{key: val for key, val in list(myDict.items()) if val != 42}
[k for k, v in d.items() if v == desired_value]
[[sum([x[1] for x in i])] for i in data]
np.mean(np.array([old_set, new_set]), axis=0)
plt.subplots_adjust(top=0.5)
sorted(list_of_medals, key=lambda x: (-x[1], x[0]))
plt.show()
self.pushButton.clicked.connect(self.showDial)
dict(x[i:i + 2] for i in range(0, len(x), 2))
df.index.values.tolist()
[[int(x) for x in sublist] for sublist in lst]
np.diff(arr[:, (1)])
func(*args)
data[:, ([1, 9])]
lambda a, b: a + b
df.index.get_level_values(0).unique()
plt.show()
map(int, str(num))
[[[x[0]] for x in y] for y in listD]
all(isinstance(x, int) for x in lst)
pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))
df.groupby(df.columns, axis=1).sum()
ax.set_xticks([])
arr[:, (1)]
array([True, False, False, True], dtype=bool)
sorted(list(a_dict.items()), key=lambda item: item[1][1])
dict((k, v) for d in dicts for k, v in list(d.items()))
db.commit()
[x for x in my_list if not any(c.isdigit() for c in x)]
arr[arr != 0].min()
os.chdir(os.path.dirname(__file__))
df.head()
pd.concat([students, pd.DataFrame(marks)], axis=1)
dict(zip(list(range(1, 5)), list(range(7, 11))))
threading.Thread(target=SudsMove).start()
zip(*list_of_tuples)
sum(d.values())
root.mainloop()
plt.show()
plt.show()
deletemy_list[2:6]
sys.stdout.flush()
urlfetch.fetch(url, deadline=10 * 60)
plt.show()
sys.exit(app.exec_())
plt.show()
root.destroy()
plt.show()
l1.sort(key=lambda x: int(x[0]))
my_list.sort(key=lambda x: x[1])
br.select_form(nr=0)
plt.show()
time.sleep(5)
plt.show()
pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
[list(d.keys()) for d in LoD]
df.value.astype(str).apply(list).apply(pd.Series).astype(int)
isinstance(s, str)
a[tuple(b)]
plt.show()
[[[x[0]] for x in listD[i]] for i in range(len(listD))]
[row[0] for row in a]
x, y = np.random.rand(2, 100) * 20
y = str(int(x, 16))
s.sort(key=operator.itemgetter(1, 2))
root.mainloop()
df.head()
any([True, False, False])
np.delete(1, 1)
ax.xaxis.set_major_locator(MaxNLocator(integer=True))
[float(i) for i in lst]
[(x * x) for x in range(10)]
x = numpy.delete(x, 0, axis=0)
[x[0] for x in a]
plt.show()
max(enumerate(a), key=lambda x: x[1])[0]
driver.set_window_size(1400, 1000)
os.path.realpath(os.path.join(root, name))
list(set(frozenset(item) for item in L))
myList = [i for i in range(10) if i % 2 == 0]
vol.extend((volumeA, volumeB, volumeC))
pylab.ylim([0, 1000])
d.stack().groupby(level=0).apply(pd.Series.value_counts).unstack().fillna(0)
plt.show()
any(item[2] == 0 for item in items)
dict((v, k) for k, v in map.items())
plt.show()
[l[i:i + n] for i in range(0, len(l), n)]
Book.objects.filter(author__id=1).filter(author__id=2)
{k: v for d in dicts for k, v in list(d.items())}
[item for item in my_list if 1 <= item <= 5]
pd.DataFrame(d)
sum(my_counter.values())
sorted(list(data.items()), key=lambda x: x[1])
[[X[i][j] for j in range(len(X[i]))] for i in range(len(X))]
dict((k, v) for k, v in hand.items() if v)
sorted(data.values())
__init__.py
getattr(test, a_string)
len(dict_test) + sum(len(v) for v in dict_test.values())
[o.my_attr for o in my_list]
plt.show()
f.close()
[i for i in x if i in y]
plt.show()
gca().get_lines()[n].get_xydata()
df.loc[(df.loc[:, (df.dtypes != object)] != 0).any(1)]
dict((i, i * 2) for i in range(10))
[(x + tuple(y)) for x, y in zip(zip(a, b), c)]
{i: (i * 2) for i in range(10)}
binascii.a2b_hex(s)
s[::2], s[1::2]
plt.show()
[(x1 - x2) for x1, x2 in zip(List1, List2)]
sorted(unsorted_list, key=lambda x: order.get(x, -1))
[l[i:i + n] for i in range(0, len(l), n)]
plt.show()
1j * np.arange(5)
plt.show()
sorted(trial_list, key=lambda x: trial_dict[x])
pd.concat(d, ignore_index=True)
sys.stdout.flush()
plt.show()
file.close()
self.process.terminate()
plt.show()
np.all(np.all(test, axis=2), axis=1)
numpy.ma.array(strided, mask=mask)
plt.show()
df.mean(axis=1)
zip(*np.where(a == 1))
random.sample(range(1, 50), 6)
os.path.abspath(__file__)
plt.show()
dbb.commit()
sys.exit()
fig.subplots_adjust(wspace=0, hspace=0)
setattr(self, attr, group)
np.array([1j])
df.index
session.query(Shots).filter_by(event_id=event_id).count()
requests.post(url, headers=headers, files=files, data=data)
requests.get(url, verify=True)
sum(list_of_nums)
plt.plot(np.unique(x), np.poly1d(np.polyfit(x, y, 1))(np.unique(x)))
[i for i in range(len(a)) if a[i] > 2]
sum(len(x) for x in list(food_colors.values()))
session.query(Shots).filter_by(event_id=event_id)
numpy.delete(a, index)
plt.show()
plt.show()
x = numpy.delete(x, 2, axis=1)
[row[1] for row in A]
sorted(lst, key=lambda x: (-sum(x[1:]), x[0]))
np.where(np.diff(arr[:, (1)]))[0] + 1
win.show()
[(x, y) for x, y in zip(myList, myList[1:]) if y == 9]
sum(sum(x) for x in lists)
sorted(a, key=dict.values, reverse=True)
plt.show()
list(range(10, 0, -1))
np.any(np.in1d(a1, a2))
groupby(tags, key=operator.itemgetter(0))
a = sorted(a, key=lambda x: x.modified, reverse=True)
plt.show()
self.axes = self.figure.add_axes([0, 0, 1, 1])
subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
sum(d * 10 ** i for i, d in enumerate(x[::-1]))
conn.commit()
quadmesh.set_clim(vmin=0, vmax=15)
A(1) + A(2)
somelist.sort(key=lambda x: x.resultType)
mylist.sort()
numpy.concatenate([a, b])
datetime.datetime.now() + datetime.timedelta(seconds=10)
dict((k, v) for k, v in parent_dict.items() if k > 2 and k < 4)
requests.post(url, headers=headers, data=data, files=files)
a[[[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]]]
cv2.destroyAllWindows()
unittest.main()
os.walk(directory)
pd.DataFrame(df.values - df2.values, columns=df.columns)
d = dict((k, v) for k, v in d.items() if v > 0)
writer.writerows(A)
pd.concat([df_slcd, signs], axis=1)
df.apply(lambda x: x.fillna(x.mean()), axis=0)
root.destroy()
time.sleep(1)
np.nonzero(np.any(a, axis=0))[0]
[x[0] for x in l1 if any(x[0] == y[0] for y in l2)]
sum(d.values())
a = [0] * 10000
admin.site.register(Blog, BlogAdmin)
plt.show()
sorted(s, key=float)
gtk.main()
ax.set_ylim((-10, 80.0))
np.delete(a, list(range(0, a.shape[1], 8)), axis=1)
plt.show()
plt.show()
df.groupby(df.index.year).sum().head()
a[np.argsort(a[:, (1)])]
itertools.permutations([0, 0, 0, 0, 1, 1, 1, 1])
plt.show()
plt.show()
plt.show()
plt.show()
print(x[0], x[1])
lst.append(map(int, z))
app.run()
jsonify(my_list_of_eqtls)
[x for y, x in sorted(zip(Y, X))]
f.write(g.read())
zip(*sorted(enumerate(a), key=operator.itemgetter(1)))[0][-2:]
np.array([fnan, pinf, ninf]) < 0
print(arr[1, 1])
sorted(zipped, key=lambda x: x[1])
ax2.legend(loc=0)
[elem.tag for elem in a.iter() if elem is not a]
plt.show()
plt.show()
dict((v, k) for k, v in my_dict.items())
dict(zip(keys, zip(*data)))
deletemylist[:]
list(df.index)
db.close()
root.mainloop()
plt.show()
root.mainloop()
[sum(x) for x in zip(*l)]
print([key for key in d if d[key] == 1])
app.run()
photo.put()
plt.show()
x = x[~numpy.isnan(x)]
np.sqrt(((A - B) ** 2).sum(-1))
app.run()
plt.show()
platform.system()
[(a, b, c) for a, (b, c) in l]
a.index(max(a))
plt.show()
list(set(listA) & set(listB))
[i for i in a if i.isdigit()]
os.system(command)
plt.show()
[tup[0] for tup in A]
plt.show()
plt.show()
list(itertools.combinations(a, 2))
ax.xaxis.tick_top()
json.dumps(your_data, ensure_ascii=False)
plt.show()
writer.writerow(A)
d.apply(pd.Series.value_counts, axis=1).fillna(0)
sparse.coo_matrix(([6], ([5], [7])), shape=(10, 10))
writer.writerow([item[0], item[1], item[2]])
root.lift()
numpy.where(x == x.min())
plt.show()
plt.show()
list(zip(a, b))
mercury(1, 1, 2)
list(itertools.product(*arrays))
np.dot(np.atleast_2d(a).T, np.atleast_2d(b))
[dict(t) for t in set([tuple(d.items()) for d in l])]
df.values.tolist()
cur.execute(sql, list(d.values()))
sum([True, True, False, False, False, True])
plt.show()
plt.show()
plt.show()
[[0, -1, -2], [1, 0, -1], [2, 1, 0]]
np.sqrt(tangent[:, (0)] * tangent[:, (0)] + tangent[:, (1)] * tangent[:, (1)])
pd.to_datetime(pd.Series(date_stngs))
sorted(list(y.items()), key=lambda x: (x[1], x[0]), reverse=True)
[list(i) for i in set(tuple(i) for i in testdata)]
plt.show()
numpy.array([[key, val] for key, val in result.items()], dtype)
window.destroy()
matplotlib.pyplot.show()
driver = webdriver.PhantomJS()
df.values.flatten()
multiprocessing.Process(target=foo, args=(x,)).start()
dict((k, v) for k, v in parent_dict.items() if 2 < k < 4)
sum(df.apply(lambda x: sum(x.isnull().values), axis=1) > 0)
numpy.array([(key, val) for key, val in result.items()], dtype)
plt.show()
datetime.date(2010, 6, 16).isocalendar()[1]
df.isnull().values.any()
pd.concat([x] * 5)
sorted(a, key=lambda i: list(i.values())[0], reverse=True)
print(func.__name__)
[x for x in lst if fn(x) != 0]
list(itertools.chain(*a))
Book.objects.create(**d)
x = [int(i) for i in x.split()]
pd.concat([distancesDF, datesDF.dates], axis=1)
img.show()
ax.set_ylim(0, 5)
plt.show()
pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T
[map(int, sublist) for sublist in lst]
plt.show()
print(list(itertools.chain.from_iterable(a)))
[list(x) for x in zip(*sorted(zip(list1, list2), key=lambda pair: pair[0]))]
sorted(unsorted_list, key=presorted_list.index)
M.sum(axis=0).sum(axis=0)
sorted(list(range(len(a))), key=lambda i: a[i], reverse=True)[:2]
[value for pair in zip(a, b[::-1]) for value in pair]
app.run()
grouped.filter(lambda x: len(x) > 1)
[(lambda x: x * x)(x) for x in range(10)]
app.run()
sorted(list(d.items()), key=lambda k_v: k_v[1])
yourdatetime.date() == datetime.today().date()
df.groupby(df.index.map(lambda t: t.minute))
plt.show()
self.showMaximized()
[(i, j) for i, j in zip(lst, lst2)]
conn.commit()
np.where(out.ravel())[0]
df.round()
a[np.all(a != 0, axis=1)]
[(x + y) for x in l2 for y in l1]
A[(np.random.randint(A.shape[0], size=2)), :]
plt.show()
pd.concat([a, b], ignore_index=True)
table.sort(key=lambda t: t.points)
df.iloc[:, (np.r_[1:10, (15), (17), 50:100])]
foo()
[item[0] for item in queryresult]
plt.show()
[(a * b) for a, b in zip(lista, listb)]
array([[0, 0], [1, 1], [2, 2]])
server.serve_forever()
numpy.nonzero(m.mask)
Motifs.append(Motif)
range(10, 0, -1)
plt.show()
plt.show()
[max(len(a), len(b)) for a, b in zip(*x)]
zip(list(range(10)), list(range(10, 0, -1)))
df.groupby(level=0, axis=1).mean()
time.sleep(5)
{k: v for k, v in list(hand.items()) if v}
duck.quack()
next((idx, x, y) for idx, (x, y) in enumerate(zip(list1, list2)) if x != y)
pd.concat([x] * 5, ignore_index=True)
my_string.splitlines()[0]
dfts.groupby(lambda x: x.month).mean()
(a.T * b).T
[key for item in lst for key, value in list(my_dict.items()) if item in value]
pd.read_json(elevations)
plt.show()
hash(pformat(a)) == hash(pformat(b))
np.all(a == a[(0), :], axis=0)
plt.show()
plt.show()
df2 = pd.DataFrame(index=df1.index)
[s for s in (square(x) for x in range(12)) if s > 50]
sys.exit(0)
plt.show()
[max(abs(x) for x in arr[i:i + 4]) for i in range(0, len(arr), 4)]
sys.exit()
plt.show()
plt.show()
df = df.reset_index()
plt.show()
[sum(map(int, s)) for s in example.split()]
plt.show()
response = requests.get(url, headers=HEADERS)
any(e in lestring for e in lelist)
plt.show()
Blog.objects.filter(pk__in=[1, 4, 7])
self.canvas.create_image(0, 0, image=image1, anchor=NW)
plt.show()
root.mainloop()
pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)
df.sort_index(ascending=False)
datetime.timedelta(-1, 86100).total_seconds()
sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)
fig.add_subplot(111)
plt.show()
[(y - x) for x, y in zip(L, L[1:])]
[a for c in Cards for b in c for a in b]
plt.show()
[j for i in zip(a, b) for j in i]
pd.concat((df1, df2), axis=1).mean(axis=1)
map(lambda x: max(x, key=lambda y: y[1]), lists)
list_.sort(key=lambda x: [x[0], len(x[1]), x[1]])
next((key, value) for key, value in list(c.items()) if value > 1)
df.loc[(df.index < start_remove) | (df.index > end_remove)]
sorted(s, key=str.lower)
np.linalg.solve(np.dot(a.T, a), np.dot(a.T, b))
os.chdir(path)
[int(x) for x in regex.findall(filename)]
zip(*l)
A[:, -2:]
plt.show()
a.append(b).reset_index(drop=True)
print(np.array(list(mystr), dtype=int))
ax.get_yaxis().set_ticklabels([])
plt.show()
dict(zip(l[::2], l[1::2]))
dfts.groupby(lambda x: x.year).std()
root.destroy()
[(v, k) for k, v in d.items()]
[f(x) for x in list]
plt.show()
plt.show()
dict((key, sum(d[key] for d in dictList)) for key in dictList[0])
plt.show()
plt.show()
plt.show()
x = x[numpy.logical_not(numpy.isnan(x))]
plt.show()
cv2.destroyAllWindows()
any(isinstance(el, list) for el in input_list)
func(*args, **kwargs)
csvwriter.writerow(row)
l = [[x for x in range(5)] for y in range(4)]
[[y for x, y in sublist] for sublist in l]
cb.ax.xaxis.set_major_formatter(plt.FuncFormatter(myfmt))
list(range(11, 17))
numpy.in1d(b, a)
list(range(1, 11))
plt.show()
plt.show()
plt.show()
plt.show()
db.commit()
sum(x[1] for x in structure)
result = min(max_value, max(min_value, result))
func(*args)
os.kill(pid, signal.SIGUSR1)
[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]
all(value == 0 for value in list(your_dict.values()))
plt.show()
sorted(map(list, list(totals.items())))
pylab.setp(_self.ax.get_yticklabels(), fontsize=8)
numpy.dstack((your_input_array, numpy.zeros((25, 54))))
plt.show()
__init__.py
new_list = [x.split()[-1] for x in Original_List]
min([x for x in num_list if x > 2])
pd.concat([good, new], axis=0, ignore_index=True)
plt.show()
print(hex(new_int)[2:])
print(proc.communicate()[0])
a[a != 0]
dict(my_object)
plt.show()
hex(sum(b << i for i, b in enumerate(reversed(walls))))
my_list == list(range(my_list[0], my_list[-1] + 1))
Book.objects.filter(pk=pk).update(**d)
print(urllib.request.urlopen(request).read())
[[Foo() for x in range(10)] for y in range(10)]
yourdatetime.date() < datetime.today().date()
print(collections.Counter(s).most_common(1)[0])
np.concatenate(input_list).ravel().tolist()
km.fit(x.reshape(-1, 1))
plt.show()
max(alkaline_earth_values, key=lambda x: x[1])
sorted(subjects, operator.itemgetter(0), reverse=True)
plt.figure(figsize=(1, 1))
[(x + y) for x, y in zip(first, second)]
Gtk.main()
numpy.array(b).reshape(5, 5)
plt.show()
dic.setdefault(key, []).append(value)
df = pd.DataFrame(np.random.random((1000, 100)))
plt.show()
result = [sum(b) for b in a]
print([word for word in words if word[0].isupper()])
df.loc[:, ((df != 0).any(axis=0))]
plt.show()
s[0].upper() + s[1:]
[y[1] for y in sorted([(myDict[x][2], x) for x in list(myDict.keys())])]
p1.communicate()[0]
cherrypy.quickstart()
People.objects.all().order_by()
dict(pair for d in L for pair in list(d.items()))
json.dumps({str(k): v for k, v in data.items()})
sheet.write(1, 1, 2)
alist.sort(key=lambda x: x.foo)
all(a_list)
plt.show()
plt.show()
plt.show()
unittest.main()
map(list, zip(*main_list))
plt.show()
plt.show()
plt.show()
B[np.argsort(A)] = np.sort(B)
np.random.uniform(0, cutoffs[-1])
[f.name for f in br.forms()]
conn.commit()
self.request.get_all()
np.savez(tmp, *[getarray[0], getarray[1], getarray[8]])
[k for k, v in sorted(list(mydict.items()), key=lambda k_v: k_v[1][1])]
list(i[0] == i[1] for i in zip(list1, list2))
plt.show()
lambda x, y: x + y
print(all(word[0].isupper() for word in words))
sorted(li, key=operator.itemgetter(1), reverse=True)
sys.exit(main())
plt.show()
time.sleep(0.1)
plt.show()
print([y for x in list(dict.items()) for y in x])
[x for x in list_of_nums if x != 2]
pygame.display.flip()
new_list = [x[:] for x in old_list]
plt.scatter(*zip(*li))
ax.scatter(XS, YS, ZS)
numpy.dot(numpy.dot(a, m), a)
[(a + i.reshape(2, 2)) for i in np.identity(4)]
plt.show()
plt.show()
plt.show()
self.sock.connect(self.url, header=self.header)
urllib.request.urlopen(url).read()
Activity.objects.filter(list__topic__user=my_user)
mylist.sort(key=str.lower)
plt.show()
[(i, max(j)) for i, j in list(d.items())]
sum(i * j for i, j in zip(a, b))
ax.contour(x, y, z, levels, cmap=cmap, norm=norm, antialiased=True)
os.path.join(*x.split(os.path.sep)[2:])
time.sleep(1)
plt.show()
get_client_ip(request)
sorted(list(d.items()), key=lambda x: (x[1], x[0]))
sum(isinstance(x, int) for x in a)
list(zip(a, b, zip(c[0::2], c[1::2]), d))
df = df.reset_index(drop=True)
plt.show()
result = {k: d2.get(v) for k, v in list(d1.items())}
ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
plt.cla()
set(d.keys())
args[-1] + mySum(args[:-1])
[False, False, True]
plt.show()
threading.Timer(delay, self.update).start()
df.columns = df.columns.get_level_values(0)
archive.write(pdffile, os.path.basename(pdffile))
plt.show()
t = tuple(x[0] for x in s)
root.mainloop()
plt.show()
{{car.date_of_manufacture | datetime}}
x[::-1]
sorted(list(u.items()), key=lambda v: v[1])
len(set(a)) == len(a)
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
sys.exit()
a = np.array(a)
print(re.findall(pattern, x))
df.sub(df.mean(axis=1), axis=0)
[j for i in x for j in i]
plt.show()
self.assertEqual(response.status_code, 200)
next(iter(dictionary.values()))
os.read(f.fileno(), 50)
np.split(a, [-1])
plt.subplots_adjust(wspace=0, hspace=0)
[i for s in [list(d.keys()) for d in LoD] for i in s]
self.myList.extend([0] * (4 - len(self.myList)))
[[i, i * 10] for i in range(5)]
sorted(list(range(len(a))), key=lambda i: a[i])[-2:]
random.randint(100000000000, 999999999999)
np.sqrt(np.square(df).sum(axis=1))
link.click()
[(x[i] == y[i]) for i in range(len(x))]
[list(t) for t in zip(*list_of_tuples)]
string[0].isdigit()
[[0, 0, 0], [1, 1, 1], [0, 0, 0]]
np.array([0.0, pinf, ninf]) < 0
{(x ** 2) for x in range(100)}
connection.commit()
numpy.dstack(numpy.meshgrid(x, y)).reshape(-1, 2)
numpy.array(your_list)
[x[0] for x in rows]
plt.figure(figsize=(8, 8))
array([True, True, True, True, True, True, True, True, True, True], dtype=bool)
file.close()
np.apply_along_axis(mahalanobis_sqdist, 1, d1, mean1, Sig1)
sum(ord(c) for c in string)
sorted(a, key=lambda x: x[1])
logging.disable(logging.CRITICAL)
np.cumsum(a[::-1])[::-1] - np.cumsum(a)
sum(i * i for i in l)
[dict(zip(k, x)) for x in v]
df.drop_duplicates()
urllib.parse.unquote(string)
lista_elegir[np.random.choice(len(lista_elegir), 1, p=probabilit)]
x[[0, 1, -2, -1]]
screen.blit(img, (0, 0))
(now - datetime.datetime(1970, 1, 1)).total_seconds()
plt.show()
plt.show()
c[np.logical_or(a, b)]
[(x, lst2[i]) for i, x in enumerate(lst)]
plt.show()
plt.show()
ax.yaxis.set_visible(False)
data[i][j][k]
reverse(str1[1:] + str1[0])
a[-1:] + a[:-1]
plt.show()
self.show()
np.where(np.in1d(A, B))[0]
map(lambda x: heapq.nsmallest(x, 2)[1], list_of_lists)
Group.objects.get(id=1).members.all()[0]
plt.show()
driver.current_url
AtB.loc[:2, :2]
plt.show()
pd.get_dummies(s.apply(pd.Series).stack()).sum(level=0)
itertools.product([False, True], repeat=5)
[x for x in a if x not in b]
gtk.main()
np.count_nonzero(~np.isnan(data))
df.iloc[:, ([2, 5, 6, 7, 8])]
merged.reset_index()
f.write(makeGrayPNG([[0, 255, 0], [255, 255, 255], [0, 255, 0]]))
A = np.array(sorted(A, key=tuple))
os.stat(filename).st_mtime
plt.show()
[func(a, b) for a, b in zip(arrA, arrB)]
np.diag(np.rot90(array))
lambda a, b: (a, b)
set(a).intersection(b)
datetime.datetime.combine(my_date, datetime.time.min)
plt.show()
[(v, k) for k, v in list(d.items())]
[int(i) for i in str_list]
sorted(l, key=asum)
np.array(x).reshape(2, 2, 4)[:, :, (0)]
df[df.columns[df.max() > 0]]
[([0] * width) for y in range(height)]
ax.legend()
root.mainloop()
fig.canvas.draw()
the_list.sort(key=lambda item: (-len(item), item))
time.sleep(0.5)
float(math.factorial(171))
len(set(list1).intersection(list2)) > 0
df.index.to_series().diff()
sorted(matrix, key=itemgetter(1))
threading.Thread(target=play2).start()
birthdays.sort(key=lambda d: (d.month, d.day))
len(set(lst)) == len(lst)
len(list(dictionary.values())) == len(set(dictionary.values()))
plt.show()
[x.lower() for x in words]
df.groupby(key_columns).size()
dict(zip(x, y))
print(sum(map(int, x[num - n:num])))
f.close()
plt.show()
A[np.ix_([0, 2], [0, 1], [1, 2])]
np.column_stack(np.where(b))
list(accumulate(list(range(10))))
plt.show()
Group.objects.filter(member__in=[1, 2])
entity.key.id()
plt.show()
sorted(list_of_dct, key=lambda x: order.index(list(x.values())[0]))
df = df.ix[:, 0:2]
regex.findall(string)
[y for y in a if y not in b]
a = a[:n] + k + a[n:]
y = [i[0] for i in x]
int(Decimal(s))
plt.scatter(x, y, color=color)
plt.show()
df.isnull().sum()
name[0].firstChild.nodeValue
list(permutations(list(range(9)), 2))
list(range(10))
print(repr(data))
numpy.sort(arr, axis=0)
cb.ax.yaxis.set_major_formatter(plt.FuncFormatter(myfmt))
plt.show()
print(response.read())
plt.show()
a = [mynamedtuple(*el) for el in a]
element.click()
{{json.key1}}
list(itertools.product(list(range(-x, y)), repeat=dim))
do_something()
a = sorted(a, key=lambda x: float(x))
numpy.concatenate(LIST, axis=0)
any(substring in string for substring in substring_list)
np.in1d(b, a).nonzero()[0]
len(myArray)
data[:, ([1, 2, 4, 5, 7, 8])]
sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)
[item for innerlist in outerlist for item in innerlist]
plt.show()
a[i] += 1
pygame.display.set_mode(size, FULLSCREEN)
User.objects.filter(userprofile__level__gte=0)
list_of_lists = [[try_int(x) for x in lst] for lst in list_of_lists]
ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)
sorted(t, key=lambda i: (i[1], -i[2]))
app.run(debug=True)
pyplot.show()
sys.stdout.flush()
plt.show()
plt.show()
plt.show()
print([u for v in [[i, i] for i in range(5)] for u in v])
sys.stdout.flush()
sorted(itertools.chain(args), cmp)
plt.legend(frameon=False)
cv2.waitKey(0)
min(myList, key=lambda x: abs(x - myNumber))
pd.DataFrame(d)
A[[0, 1], [0, 1]]
sorted(yourdata, reverse=True)
pd.DataFrame(df.values * df2.values, columns=df.columns, index=df.index)
list(itertools.combinations(L, 2))
[item for item in my_list if any(x in item for x in bad)]
list(x * y for x, y in list(zip(a, b)))
b = np.concatenate((a, a), axis=0)
[[int(x)] for y in list_of_lists for x in y]
gtk.main()
result = sys.stdin.read()
pickle.loads(s)
figure(figsize=(11.69, 8.27))
[list(v) for k, v in itertools.groupby(mylist, key=lambda x: x[:5])]
str1.split()
legend(numpoints=1)
root.mainloop()
any(x in string for x in search)
df1.groupby([df1.index.year, df1.index.hour]).mean()
len(max(i, key=len))
sorted(iter(d.items()), key=lambda x: x[1])
plt.show()
y = map(operator.itemgetter(0), x)
dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())
vobj.adr
np.equal.reduce([1, 0, 0, 1])
i = np.array([[0], [1]])
plt.show()
xs.sort(lambda x, y: cmp(len(x), len(y)))
df_result.apply(get_col_name, axis=1)
uinfo.save()
arr[[0, 1, 1], [1, 0, 2]]
set([i for s in [list(d.keys()) for d in LoD] for i in s])
[x for b in a for x in b]
sorted(a.items()) == sorted(b.items())
plt.grid(True)
[int(d) for d in str(bin(x))[2:]]
Reporter.objects.all().delete()
df.groupby(level=[0, 1]).quantile()
{{value | safe}}
{k: int(v) for k, v in d.items()}
df[[1]]
[max(len(str(x)) for x in line) for line in zip(*foo)]
a.fromlist([int(val) for val in stdin.read().split()])
session.query(Tag).distinct(Tag.name).group_by(Tag.name).count()
c = [[(i + j) for i, j in zip(e, b)] for e in a]
plt.show()
np.corrcoef(x)
[sublist[::-1] for sublist in to_reverse[::-1]]
[str(wi) for wi in wordids]
os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)
[[] for _ in range(n)]
win.show_all()
cursor.execute(sql, list(myDict.values()))
len(s.split())
pd.concat([df, df.dictionary.apply(str2dict).apply(pd.Series)], axis=1)
plt.colorbar(im, ax=ax)
df.reset_index(inplace=True)
print([obj.attr for obj in my_list_of_objs])
dates_dict.setdefault(key, []).append(date)
[[-1, 2, 0], [0, 0, 0], [0, 2, -1], [-1, -2, 0], [0, -2, 2], [0, 1, 0]]
next(iter(dict.values()))
sorted(zip(a, b))
max(len(word) for word in i)
df.to_pickle(file_name)
sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
isinstance(a, dict)
aapl.groupby((aapl.sign.diff() != 0).cumsum()).size()
self.view.header().setModel(model)
np.where((vals == (0, 1)).all(axis=1))
pd.concat([A, B], axis=1)
root.quit()
sum(map(ord, string))
l = (int(x) for x in s.split())
time.sleep(1)
root.mainloop()
datetime.now() - datetime.now()
connection.close()
msglist = [hextotal[i:i + 4096] for i in range(0, len(hextotal), 4096)]
text.config(state=DISABLED)
new_list = my_list[-10:]
array([[-1, -1], [0, 0], [1, 1]])
y = [row[:] for row in x]
datetime.datetime.combine(dateobject, datetime.time())
mylist.sort(key=lambda x: x.lower())
plt.show()
sum(1 for i, j in zip(a, b) if i != j)
sorted(set(my_list))
p.properties()[s].get_value_for_datastore(p)
np.random.randn(5) * 10
db.session.commit()
df.ix[:-1]
Toy.objects.filter(toy_owners__parents=parent)
A.ravel()[A.shape[1] * i:A.shape[1] * (i + A.shape[1]):A.shape[1] + 1]
plt.show()
plt.show()
ax.axes.get_yaxis().set_visible(False)
df.stack().groupby(level=0).first()
sck.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
sorted(sorted(s), key=str.upper)
[line.split() for line in f]
plt.show()
plt.show()
print(zip(my_list[0::2], my_list[1::2]))
file.close()
json.dumps([dict(list(row.items())) for row in rs])
[k for k, v in User._fields.items() if v.required]
d = {t[0]: t[1:] for t in l}
ax2.set_ylim([0, 5])
sys.exit(0)
browser.submit()
sorted(Profile.objects.all(), key=lambda p: p.reputation)
writer.writerows(zip(*[d[key] for key in keys]))
sum(len(y) for y in x if len(y) > 1)
b = np.delete(a, -1, 1)
some_func(*params)
app.run()
((25 < a) & (a < 100)).sum()
sum(x * y for x, y in zip(a, b))
[k for d in list(foo.values()) for k in d]
self.assertEqual(response.status_code, 200)
itertools.product(list(range(2)), repeat=4)
time.sleep(1)
{k: v for k, v in enumerate(range(10)) if v % 2 == 0}
b.update(d)
[s[:5] for s in buckets]
a[np.in1d(a, b)]
[x for x in j if x >= 5]
d = pd.DataFrame(0, index=np.arange(len(data)), columns=feature_list)
sorted(d, key=d.get)
[m.group(1) for l in lines for m in [regex.search(l)] if m]
sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)
plt.plot(x, y)
plt.show()
df.iloc[:, ([2, 5, 6, 7, 8])].mean(axis=1)
plt.show()
plt.draw()
tuple(sorted(a.items()))
plt.show()
time.sleep(5)
A[(np.random.choice(A.shape[0], 2, replace=False)), :]
lst.sort(key=lambda x: x[2], reverse=True)
output.append(max(flatlist, key=lambda x: x[1]))
y = sorted(set(x), key=lambda s: s.lower())
list(itertools.product(*a))
str(n) == str(n)[::-1]
db.session.commit()
root.mainloop()
[(lambda x: x * x) for x in range(10)]
[1, 1, 1, 10, 10, 5, 5, 5, 5, 5, 5]
window.set_position(Gtk.WindowPosition.CENTER)
df.iloc[:, ([2, 5, 6, 7, 8])].mean(axis=0)
np.array(arr[:, (1)], dtype=np.float)
time.sleep(10)
reactor.run()
np.array(arr[:, (1)])
plt.show()
plt.show()
random.choice([k for k in d for x in d[k]])
session.commit()
zip(*main_list)
(e == np.array([1, 2])).all(-1)
plt.show()
logger.setLevel(logging.DEBUG)
random.sample(range(1, 50), 6)
ssh.close()
a = a[-1:] + a[:-1]
df.columns[df.max() > 0]
df.info()
list_of_tuples[0][0] = 7
plt.show()
print([[l[:i], l[i:]] for i in range(1, len(l))])
{k for d in LoD for k in list(d.keys())}
sorted(lst, key=lambda x: (-1 * c[x], lst.index(x)))
networkx.draw_networkx_labels(G, pos, labels)
x = [i[0] for i in x]
p.terminate()
b = np.where(np.isnan(a), 0, a)
plt.show()
cv2.destroyAllWindows()
webbrowser.open_new(url)
db.session.delete(page)
df[df.applymap(isnumber)]
sum(1 for x in list(d.values()) if some_condition(x))
root.mainloop()
app.exec_()
plt.show()
Group.objects.get(id=1).members.all()[0]
m[~m.mask]
[item for item in a if sum(item) > 10]
sorted(list(dictionary.items()), key=operator.itemgetter(1))
[(x, f(x)) for x in iterable if f(x)]
app.run(debug=True)
glfw.Terminate()
print(select([my_table, func.current_date()]).execute())
element.click()
plt.show()
process.stdin.close()
session.commit()
a = np.concatenate((a, [0]))
app.run(threaded=True)
pd.concat([df.head(1), df.tail(1)])
app.debug = True
model.predict(X_test)
time.sleep(1)
np.flatnonzero(x).mean()
print(template.render())
np.array(list(arr[:, (1)]), dtype=np.float)
map(sum, zip(*lists))
CustomPK._meta.pk.name
[next(it) for _ in range(n)]
cursor.close()
driver.implicitly_wait(60)
[1, 1, 0, 0, 1, 0]
df.T.apply(tuple).apply(list)
root.mainloop()
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
plt.show()
os.remove(filename)
plt.show()
df.reindex_axis(df.mean().sort_values().index, axis=1)
print(sorted(xs, key=len))
pdb.set_trace()
df.groupby(by=df.columns, axis=1).mean()
plt.show()
numpy.apply_along_axis(numpy.linalg.norm, 1, a)
plt.show()
df = df.reset_index()
my_list[:]
d.setdefault(x, []).append(foo)
obj.save()
driver.page_source
list(chain.from_iterable(a))
ForkedPdb().set_trace()
sum(v for v in list(d.values()) if v > 0)
writer.writeheader()
print(max(x, key=sum))
plt.show()
plt.show()
dict((k, v * dict2[k]) for k, v in list(dict1.items()) if k in dict2)
math.cos(math.radians(1))
logger.setLevel(logging.DEBUG)
zip(it, it, it)
{_key: _value(_key) for _key in _container}
[list(x) for x in list(results.values())]
cv2.waitKey()
np.where((a[0] == 2) & (a[1] == 5))
data = [[0, 0], [0, 0], [0, 0]]
fig.set_size_inches(w, h, forward=True)
df.groupby(level=0, as_index=False).nth(0)
df.iloc[2, 0]
self.buttonBox.button(QtGui.QDialogButtonBox.Reset).clicked.connect(foo)
s.reset_index(0).reset_index(drop=True)
con.commit()
plt.show()
plt.show()
app.run(debug=True)
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
db.close()
pygame.display.flip()
[i for i, v in enumerate(a) if v > 4]
cv2.waitKey()
[(i, j) for i, j in zip(a, x)]
plt.show()
files.sort(key=file_number)
df[pd.isnull(df).any(axis=1)]
conn.commit()
plt.show()
a[1::2] = -1
print(pattern.search(url).group(1))
self.SetSizerAndFit(bsizer)
print(sorted(student_tuples, key=lambda t: (-t[2], t[0])))
sum(x == chosen_value for x in list(d.values()))
plt.show()
process.start()
plt.show()
arr[arr[:, (2)].argsort()]
grouped.reset_index(level=0).reset_index(level=0)
isinstance(s, str)
plt.show()
arr[-2:2]
signal.signal(signal.SIGCHLD, signal.SIG_IGN)
datetime.utcnow() + timedelta(minutes=5)
[elem.tag for elem in a.iter()]
[(x, y) for x, y in zip(myList, myList[1:]) if y == 9]
app.mainloop()
self.root.destroy()
[0, 2, 4, 5]
c[np.logical_and(a, b)]
numpy.append(a, a[0])
win.setWindowFlags(QtCore.Qt.WindowMinimizeButtonHint)
[element for i, element in enumerate(centroids) if i not in index]
np.isnan(np.array([np.nan, 0], dtype=np.float64))
os.system(my_cmd)
app.run()
new_list = [d[key] for key in string_list]
root.mainloop()
os.path.join(root, name)
plt.show()
[{key: dict(value)} for key, value in B.items()]
plt.show()
pprint(dict(list(o.items())))
print((a, b, c, d))
plt.show()
pd.concat([d1, df1], axis=1)
(set(x) for x in d.values())
unittest.main()
datetime.datetime(2010, 7, 26, 0, 0)
plt.show()
pygame.display.flip()
pd.concat([df2, df1], axis=1)
sorted(s, key=str.upper)
[item for item in my_list if some_condition()]
my_list.pop(2)
datetime.utcnow()
pd.concat([df[:start_remove], df[end_remove:]])
lines.sort()
df.applymap(lambda x: isinstance(x, (int, float)))
server.serve_forever()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
sort()
(e == np.array([1, 2])).all(-1).shape
app.run(debug=True)
plt.show()
plt.clf()
deletemy_list[index]
[(myList[i - 1], myList[i]) for i in range(len(myList)) if myList[i] == 9]
sum([(i * j) for i, j in list(itertools.combinations(l, 2))])
plt.figure()
logging.getLogger().setLevel(logging.DEBUG)
sys.hash_info
text_file.close()
plt.show()
numpy.in1d(b, a).all()
array([True, False, False, True, True, False], dtype=bool)
[key for key, value in list(my_dict.items()) if set(value).intersection(lst)]
sys.stdout.flush()
plt.show()
Book.objects.filter(id=id).update()
zip(*a)
ax.yaxis.set_label_coords(0.5, 0.5)
unittest.main()
int(math.ceil(x)) - 1
[dict(d, count=n) for d, n in zip(l1, l2)]
cv2.waitKey()
sys.exit(0)
{{grains.fqdn_ip}}
sorted(data, key=data.get)
scipy.spatial.distance.euclidean(A, B)
proc.terminate()
plt.show()
plt.show()
d = {(a.lower(), b): v for (a, b), v in list(d.items())}
s.split()
[np.unravel_index(np.argmin(a), (2, 2)) for a in A2]
a.insert(0, k)
list(map(list, set(map(lambda i: tuple(i), testdata))))
plt.show()
plt.show()
plt.show()
max(list(MyCount.keys()), key=int)
numpy.fft.fft([1, 2, 1, 0, 1, 2, 1, 0])
x = map(int, x.split())
plt.show()
a.contains(b)
print(my_string[0:100])
[lambda x: (x * x for x in range(10))]
array([0, 1, 4, 5, 6, 1, 7, 8, 8, 1])
a[np.in1d(a[:, (1)], b)]
arr[mask] = arr[np.nonzero(mask)[0], idx[mask]]
root.mainloop()
df.sort(inplace=True)
plt.show()
df.stack()
print_tree(shame)
tuple(zip(*t))
datetime.datetime.fromtimestamp(calendar.timegm(d.timetuple()))
print(response.geturl())
plt.show()
locals()[x]
f.read()
next((i for i, j in enumerate(lst) if j == 2), 42)
dict(d)
driver.current_window_handle
f.close()
df.unstack(level=1)
np.concatenate((np.sort(a[~np.isnan(a)])[::-1], [np.nan] * np.isnan(a).sum()))
a.where(~np.isnan(a), other=b, inplace=True)
f.write(chr(i))
50 - list1[0][0] + list1[0][1] - list1[0][2]
[x for t in zip(list_a, list_b) for x in t]
sorted(list(d.items()), key=lambda x: x[::-1])
plt.show()
plt.show()
plt.show()
df.iloc[:, (0)]
random.choice(list(d.keys()))
list(set(a).union(b))
z = zip(x, y)
locals()[x]
a = list(a)
A = [i for i in A if i not in B]
unittest.main()
plt.show()
my_list = [item for item in my_list if item.isalpha()]
plt.show()
len(re.findall(pattern, string_to_search))
driver.close()
a[0:0] = k
{k: [lookup[n] for n in v] for k, v in list(my_dict.items())}
np.amin(V, axis=0)
b.append(c)
setattr(test, attr_name, 10)
pg.mixer.init()
zip(*a)
f(*((1, 4), (2, 5)))
np.array(list(itertools.product([0, 1], repeat=n ** 2))).reshape(-1, n, n)
plt.show()
print(etree.tostring(root, pretty_print=True))
l.sort(key=alphanum_key)
plt.show()
sorted(timestamp, reverse=True)
l[-1:] + l[:-1]
str.isdigit()
unittest.main()
df.apply(pd.Series.nunique, axis=1)
MyClass().mymethod()
list(joined_dataset.values())
plt.show()
MyModel.objects.get(id=1).my_field
model.fit(X_train, y_train)
df.to_pickle(file_name)
ax1.xaxis.get_major_formatter().set_powerlimits((0, 1))
sum(1 for i in range(1, len(a)) if a[i - 1] * a[i] < 0)
plt.show()
plt.show()
plt.show()
getattr(foo, bar)(*params)
{k: list(v) for k, v in groupby(sorted(d.items()), key=itemgetter(0))}
a[np.in1d(a[:, (2)], list(b))]
print(max(list(d.keys()), key=lambda x: d[x]))
y = str(int(x, 16))
[(i + j) for i, j in zip(x[::2], x[1::2])]
y = np.cumsum(x)
print(max(d, key=d.get))
multiprocessing.Process.__init__(self)
root.mainloop()
self.submenu2.menuAction().setVisible(False)
y[:, (cols)].sum()
[(item for sublist in list_of_lists) for item in sublist]
[i for i in d for j in range(d[i])]
writer.writerows(zip(*list(d.values())))
sorted(L, key=itemgetter(1), reverse=True)
b = a[:, :-1, :]
sum(v[1] for d in myList for v in d.values())
len(s)
print(df.to_string(index=False))
plt.draw()
ax.scatter(xs, ys, zs, c=cs, marker=m)
sorted(a, key=lambda x: x[1], reverse=True)
[y for sublist in l for x, y in sublist]
plt.show()
res.drop_duplicates()
numpy.prod(a)
urlfetch.set_default_fetch_deadline(60)
session.commit()
db.commit()
np.dot(x, y)
[[j for j in families[i] if i != j] for i in range(len(families))]
[i[0] for i in e]
array([[1, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 0]])
file.close()
print(soup.prettify())
self.est.fit(X, y)
a = [[(0) for y in range(8)] for x in range(8)]
numpy.apply_along_axis(numpy.linalg.norm, 1, dist)
getpass.getuser()
d.update((k, frozenset(v)) for k, v in d.items())
plt.show()
plt.show()
np.vstack(a)
dict(map(lambda a: [a[1], a[0]], iter(d.items())))
plt.show()
deletedct[key]
ctypes.addressof(bufstr)
app.run()
plt.show()
(df.notnull().cumsum(axis=1) == 4).idxmax(axis=1)
entry_list.extend([entry.title.text for entry in feed.entry])
plt.show()
plt.legend()
app = Flask(__name__)
df = df.loc[:, ((df != 0).any(axis=0))]
[line[2:] for line in lines]
list([a for a in A if a not in B])
[max(len(b) for b in a) for a in zip(*x)]
app.exec_()
next((i for i, v in enumerate(L) if v != x), -1)
zip(*l)
df.stack().groupby(level=0).first().reindex(df.index)
pd.concat([s1, s2], axis=1).reset_index()
app.MainLoop()
app.run(debug=True)
map(float, i.split()[:2])
plt.figure().canvas.draw()
[item for pair in zip(a, b) for item in pair]
logging.getLogger().setLevel(logging.DEBUG)
p.start()
y = [s for s in x if len(s) == 2]
top_n.sort(key=lambda t: (-t[1], t[0]))
deletemylist[:n]
int(str1.split()[0])
Employee.objects.select_related()
b[a].shape
print(json.dumps(data))
test_rec[(test_rec.age == 1) & (test_rec.sex == 1)]
match.group(1)
list({(x[0], x[1]): x for x in L}.values())
sys.stdout.isatty()
btn.grid(column=x, row=y, sticky=N + S + E + W)
plt.show()
root.mainloop()
f.read()
pd.concat([df, df.sum(axis=1)], axis=1)
np.searchsorted(A, np.intersect1d(A, B))
session.commit()
np.resize([1, -1], 10)
plt.show()
plt.show()
equal([1, 2], a).all(axis=1)
fig.subplots_adjust(wspace=0, hspace=0)
print(sorted(d.keys()))
plt.show()
new_list = copy.deepcopy(old_list)
np.linspace(0, 5, 10, endpoint=False)
somelist.sort(key=lambda x: x.resultType)
f.close()
array[itemindex[0][0]][itemindex[1][0]]
type(ham).__name__
tuple([(10 * x) for x in img.size])
plt.show()
root.mainloop()
root.mainloop()
plt.show()
[(x, y) for x, y in zip(myList, myList[1:]) if y == 9]
print(os.path.abspath(__file__))
urllib.request.install_opener(opener)
scipy.stats.hypergeom.pmf(k, M, n, N)
btn.clicked.connect(self.close)
plt.show()
cv2.destroyAllWindows()
np.array([a, a, a])
a[:, :2]
[item for sublist in list_of_lists for item in sublist]
main.mainloop()
plt.show()
pd.value_counts(d.values.ravel())
np.tensordot(ind, dist, axes=[1, 1])[0].T
plt.show()
[4957, 4957, 1945]
plt.show()
[2, 4, 6, 8]
plt.show()
n = int(input())
sorted(my_tuple, key=lambda tup: tup[1])
ftp.quit()
plt.show()
xs.sort(key=len)
mylist.sort()
[sum(x, []) for x in zip(L1, L2)]
lst.sort(reverse=True)
workbook.close()
list(sorted(iter))[-10]
i = 5 + Tup()[0]
numpy.concatenate((a, b))
driver.quit()
list(dict.items())
lst = [[] for _ in range(a)]
[(1, 4), (4, 8), (8, 10)]
zip(*heapq.nlargest(2, enumerate(a), key=operator.itemgetter(1)))[0]
[mystr[i:i + 8] for i in range(0, len(mystr), 8)]
logging.Logger.__init__(self, name, logging.DEBUG)
StreetCat._meta.get_parent_list()
plt.show()
B = np.split(A, np.where(A[:, (0)] == 0.0)[0][1:])
plt.show()
list(dict(((x[0], x[1]), x) for x in L).values())
numpy.nonzero(numpy.in1d(a2, a1))[0]
list(zip(s[::2], s[1::2]))
sys.stdout.flush()
l = [(x * 2) for x in l]
list(your_iterator)
new_dict = dict(zip(keys, values))
[dict(zip(r.dtype.names, x)) for x in r]
[x for x in L if x >= 0]
plt.show()
[0, 1, 0, 1, 0, 0, 1, 0]
time.sleep(2)
app.mainloop()
random.shuffle(a)
isinstance(s, str)
plt.show()
data[(np.where(masks)[1]), :]
next((x for x in range(10) if x > 5))
YourApp().run()
a = datetime.datetime.now().year
[row[2:5] for row in LoL[1:4]]
cursor.close()
rates.sub(treas.iloc[:, (0)], axis=0).dropna()
values = [d[k] for k in a]
csv_file.close()
d2 = {k: f(v) for k, v in list(d1.items())}
sorted(list(mydict.values()), reverse=True)
plt.show()
mylist[0][0]
lst.sort(key=lambda x: (-x[2], x[0]))
Gtk.main()
f.close()
logging.disable(logging.NOTSET)
plt.show()
[len(x) for x in a[0]]
ax.auto_scale_xyz([0, 500], [0, 500], [0, 0.15])
plt.show()
print(etree.tostring(f, pretty_print=True))
[item for sublist in [[i[1:], [i[0]]] for i in l] for item in sublist]
l = [(ord(a) ^ ord(b)) for a, b in zip(s1, s2)]
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
df.set_index(s.index).sort()
plt.show()
pd.Series(np.concatenate([a, b]))
df.to_csv()
C = [i for i in A if i not in B]
sum(map(sum, a))
list(range(max(x[0], y[0]), min(x[-1], y[-1]) + 1))
sorted(((v, k) for k, v in d.items()), reverse=True)
transaction.commit()
np.resize([1, -1], 11)
plt.show()
df.plot(x=df.index.astype(str))
[(x - y) for x, y in zip(a[1:], a)]
plt.show()
list(zip(keys, values))
plt.colorbar()
set([1, 2, 2]).issubset([1, 2])
plt.show()
list(itertools.chain(*[item.split() for item in lst]))
pygame.display.flip()
np.isnan(a).any(1)
models.PositiveSmallIntegerField(default=0)
set(a).intersection(b, c)
plt.show()
sorted(dct, key=dct.get)
x, y = zip(*[(i, -1 * j) for i, j in enumerate(range(10))])
np.where(np.any(a == 2, axis=0) & np.any(a == 5, axis=0))
ax.set_ylim([0, 5])
splitlists[-1].append(splitlists[0][0])
plt.show()
a = [a[i] for i in range(1, len(a)) if a[i][1] > a[i - 1][1]]
wb.save(file)
[i for i, (a, b) in enumerate(zip(vec1, vec2)) if a == b]
driver = webdriver.Firefox()
list(SomeModel.objects.filter(id=instance.id).values())[0]
y = list(x)
np.where(np.triu(np.ones(A.shape[0], dtype=bool), 1), A.T, A)
f.close()
list(dict.keys())[0]
random.choice(string.ascii_letters[0:4])
df.groupby(df.columns, axis=1).agg(numpy.max)
numpy.array([v for v in vals if len(set(v)) == len(v)])
np.where(~a.any(axis=1))
plt.show()
df = pd.read_pickle(file_name)
workbook.close()
plt.show()
[1, 1, 2, 2]
sorted(trial_list, key=lambda x: trial_dict[x])
app.run()
plt.hist(x, bins=list(range(-4, 5)))
np.array([j for i in arr for j in np.arange(i - 0.2, i + 0.25, 0.1)])
CB.lines[0].set_linewidth(10)
sum(map(sum, my_list))
handler.setLevel(logging.DEBUG)
print(np.split(a, b, axis=0))
app.run(debug=True)
np.diag(np.fliplr(array))
[x[0] for x, y in zip(l1, l2) if x[0] == y[0]]
ax.yaxis.set_major_formatter(formatter)
logger = logging.getLogger(__name__)
plt.show()
tuple(l)
writer.writerows([val])
json.dump(data, f)
a[i:j] = sorted(a[i:j])
len(set(new_words))
df = pd.concat([df1, df2], ignore_index=True)
fig.legend(lines, labels, loc=(0.5, 0), ncol=5)
[i for i in a if i not in b]
f.close()
[row for row in listOfLists if row[x].isdigit()]
plt.show()
set(data1).intersection(data2)
time.sleep(1)
__init__.py
df.values.max()
(f(x) for x in list)
df.drop(grouped.get_group(group_name).index)
ax.xaxis.set_major_formatter(plt.NullFormatter())
sys.stdout.write(msg)
workbook.close()
np.kron(np.eye(n), a)
df[0].values.tolist()
plt.show()
[(index, row.index(val)) for index, row in enumerate(mymatrix) if val in row]
plt.show()
np.take(a, idx, axis=1)
foo(n - 1) + [1]
zip(*data)
ssh.close()
df1.apply(lambda x: x.asof(df2.index))
c = dict(list(a.items()) + list(b.items()))
numpy.array([v for v in vals if len(numpy.unique(v)) == len(v)])
[(0, 0), (0, 1), (1, 0), (1, 1)]
[key for key, values in list(rev_multidict.items()) if len(values) > 1]
cv2.waitKey()
plt.show()
reversed(x)
print(list(set(chain(*array))))
plt.show()
s1.dropna(inplace=True)
plt.show()
a, b = (int(x) for x in s.split())
listener.close()
plt.show()
sys.exit()
matplotlib.pyplot.scatter(x, y)
rows_list.sort(key=operator.itemgetter(0, 1, 2))
round(1.679, 2)
ax = plt.gca()
my_logger.setLevel(logging.DEBUG)
[name for name in starring if name.strip()]
{i: np.where(arr == i)[0] for i in np.unique(arr)}
func(*r)
plt.show()
plt.show()
plt.show()
df.head(10)
len(my_list)
isinstance()
root.mainloop()
S2[:len(S1)] == S1
Counter(v for sublist in list(d.values()) for v in sublist)
server.serve_forever()
set([a, b, c, a])
np.where(x == 5)
map(ord, hex_data)
time.sleep(1)
[y for y in x for x in data]
tornado.ioloop.IOLoop.instance().start()
plt.show()
[list(zip(a, p)) for p in permutations(b)]
print([y for x in l for y in (x, x + 1)])
print(dict(zip(keys, [list(i) for i in zip(*data)])))
any(i.isdigit() for i in s)
list(range(1, 6)) + list(range(15, 20))
a = [0] * 10
bucket.copy_key(new_key, source_bucket, source_key)
window.destroy()
root.mainloop()
print([x[0] for x in data])
clf.fit(X, y)
c[:] = b
pdb.set_trace()
a.argmax(axis=0)
plt.show()
df[self.target].str.contains(t).any()
User.objects.filter(userprofile__level__lte=0)
ma.array(np.resize(b, a.shape[0]), mask=[False, False, True])
len(set(a))
a = list(set(a))
list(itertools.product(*s))
set(d1.items()).issubset(set(d2.items()))
db.session.query(Printer).all()
plt.draw()
plt.show()
p.wait()
plt.show()
os.rename(file, new_name)
my_model.save()
match.group(1)
img.save()
plt.show()
dict((m.get(k, k), v) for k, v in list(d.items()))
lst.sort()
[x[0] for x in listD[2]]
value.isdigit()
[tuple(l) for l in nested_lst]
my_array[:, ([0, 1])] = my_array[:, ([1, 0])]
s.reset_index().drop(1, axis=1)
x = all((a, b, c, d, e, f))
python - -version
cursor.commit()
random.seed()
[(a + b) for a, b in zip(s[::2], s[1::2])]
test[numpy.apply_along_axis(lambda x: x[1] in wanted, 1, test)]
numpy.apply_along_axis(sum, 1, X)
v.dot(np.rollaxis(a, 2, 1))
print(sys.path)
pygame.display.flip()
x = [i for i in x if len(i) == 2]
[word for word in words if any(not char.isdigit() for char in word)]
plt.show()
[(x + y) for x, y in zip(L1, L2)]
[(e in lestring) for e in lelist if e in lestring]
plt.figure(figsize=(6, 6))
plt.draw()
datetime.datetime.fromtimestamp(1284286794)
plt.legend(numpoints=1)
o.save()
print({word: word_list.count(word) for word in word_list})
pdf.close()
print(Event.objects.filter(date__lt=datetime.datetime.now()).delete())
[elem for x in list for elem in (x, 0)][:-1]
list(itertools.product(*list(mydict.values())))
[int(n) for n in bin(21)[2:].zfill(8)]
{key: list(set(a[key]).difference(b.get(key, []))) for key in a}
sys.exit(1)
pd.to_datetime(pd.Series(date_stngs))
list(next(it) for _ in range(n))
plt.show()
plt.show()
result.extend(item)
plt.show()
array[itemindex[0][1]][itemindex[1][1]]
plt.show()
Person.objects.filter(**kwargs)
myfile.write(c_uncompData_p[:c_uncompSize])
df[df.index.map(lambda x: x[0] in stk_list)]
plt.show()
[(2, 1, 1), (1, 2, 1), (1, 1, 2)]
isinstance(s, str)
set(L[:4])
plt.show()
f.close()
ind[np.argsort(a[ind])]
df1.reset_index()
os.path.dirname(sys.executable)
plt.draw()
transmission_array.extend(zero_array)
all(x == mylist[0] for x in mylist)
plt.show()
a[:] = [x for x in a if x <= 2]
json.dumps(list)
plt.show()
myList = sorted(set(myList))
a[0:1][0][0] = 5
df.A.apply(lambda x: pd.Series(1, x)).fillna(0).astype(int)
zip(a, b, c)
plt.scatter(list(range(len(y))), y, c=z, cmap=cm.hot)
app.run(debug=True)
df.loc[ii, cols]
plt.show()
np.exp(-x)
print(json.dumps(foo))
{k: (v() if callable(v) else v) for k, v in a.items()}
df.drop(x[x].index)
hehe()
Book.objects.create(**d)
plt.show()
dist = math.hypot(x2 - x1, y2 - y1)
1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0
sorted([-5, 2, 1, -8], key=abs)
out = np.concatenate(input_list).ravel().tolist()
[(i, j) for i, j in zip(a, x) if i >= 4]
ax1.set_xticks([int(j) for j in range(-4, 5)])
datetime.datetime(d.year, d.month, d.day)
s = s[:pos] + s[pos + 1:]
sorted(d, key=d.get)
np.cumsum(a, axis=1, out=a)
sorted(a, key=len)
pd.concat((df1, df2), axis=1)
len(d[obj]) == 2 and isinstance(d[obj][0], int) and isinstance(d[obj][1], int)
inspect.getfile(C.__class__)
sorted(x) == sorted(y)
print(os.path.dirname(os.path.abspath(sys.argv[0])))
pd.concat(series_list, axis=1)
sum([x for x in list if isinstance(x, (int, float))])
numpy.where(a <= 2, a, 2)
pd.DataFrame(s).T
[[4], [5, 5], [6, 6, 6]]
i = np.indices(B.shape)[0]
a[-2:] + a[:-2]
re.findall(pat, s)
d = dict([(y, x) for x, y in enumerate(t)])
x = Dish.query.filter(Dish.restaurants.any(name=name)).all()
driver.implicitly_wait(10)
dict((d1[key], value) for key, value in list(d.items()))
np.tile(b, (2, 2, 2))
result = [d[key] for key in d if key.startswith(query)]
zip(*it)
y = numpy.unique(x)
set(x[0] for x in zip(a, a[1:]) if x[0] == x[1])
sys.exit(0)
root.mainloop()
d = dict((m.get(k, k), v) for k, v in list(d.items()))
app.run()
np.kron(a, np.ones((B, B), a.dtype))
a = zip(list(range(10)), list(range(10)))
plt.show()
f.write(bytes((i,)))
server.serve_forever()
plt.show()
random.choice(mylist)
a[i:j].sort()
some_action.triggered.connect(functools.partial(some_callback, param1, param2))
json.dump([], f)
self.assertTrue(issubclass(QuizForm, forms.Form))
session.query(Shots).filter_by(event_id=event_id).order_by(asc(Shots.user_id))
f.write(hex(i))
decimal.Decimal(str(random.random()))
next(g)
OrderedDict(sorted(list(d.items()), key=d.get))
plt.show()
sorted(a, key=lambda x: b.index(x[0]))
plt.show()
plt.show()
db.commit()
plt.xlim([0, bins.size])
A.sum(axis=0, skipna=True)
df.groupby(df.index).mean()
numpy.argwhere(numpy.in1d(a, b))
plt.show()
datetime.datetime.utcfromtimestamp(1284286794)
a.nonzero()
bool(value)
plt.show()
time.sleep(1)
set(a).intersection(b)
urllib.request.install_opener(opener)
plt.show()
[[word, len(word), word.upper()] for word in sent]
logger.setLevel(logging.DEBUG)
pdb.set_trace()
np.array([[int(i[0], 2)] for i in a])
plt.show()
[str(item[0]) for item in x if item and item[0]]
df = df.reset_index()
{k: v for k, v in list(points.items()) if v[0] < 5 and v[1] < 5}
f.close()
json.dumps(c, default=lambda o: o.__dict__)
sck.setproxy()
list(range(N, -1, -1)) is better
print(tuple(my_list))
set(aa.items()).intersection(set(bb.items()))
rows = [i for i in range(0, len(a)) if a[i][0] == value]
HttpResponse(status=500)
plt.show()
plt.show()
[(x + i * y) for i in range(1, 10)]
len(df.columns)
np.savez(tmp, *getarray[:10])
sys.stdin.read(1)
np.hstack([np.arange(i, j) for i, j in zip(start, stop)])
app.run(threaded=True)
n = int(input())
A.ravel()[:A.shape[1] ** 2:A.shape[1] + 1]
[(x + y) for x in l2 for y in l1]
plt.show()
time.sleep(spacing)
plt.show()
np.fromiter(a, dtype=np.float)
~np.isnan(a).any(1)
matplotlib.pyplot.show()
dict(set.intersection(*(set(d.items()) for d in dicts)))
s * (a + b) == s * a + s * b
some_func(**mydict)
my_list = sorted(list(dict.items()), key=lambda x: x[1])
c = a.flatten()
any(i in a for i in b)
log.start()
sum(x * y for x, y in zip(a, b))
[0, 1, 0, 1, 2, 5, 6, 7, 8, 9]
round(random.uniform(min_time, max_time), 1)
A.ravel()[i:max(0, A.shape[1] - i) * A.shape[1]:A.shape[1] + 1]
app.run()
print([i for i in range(5)])
df
plt.show()
logging.basicConfig(level=logging.WARNING)
plt.show()
plt.show()
itertools.repeat(0, 10)
ax.set_xlim([0, 100])
dct[key].append(some_value)
[ord(c) for c in s]
os.makedirs(newpath)
results.sort(key=lambda r: r.person.birthdate)
response = urllib.request.urlopen(req, json.dumps(data))
a, b = np.sin(x), np.cos(x)
form.save()
b = a[:-1] + (a[-1] * 2,)
plt.show()
a = [str(wi) for wi in wordids]
print(np.unravel_index(result.argmax(), result.shape))
fcntl.ioctl(s.fileno(), SIOCSIFFLAGS, ifr)
dir()
auth.set_access_token(access_token, access_token_secret)
zip(*[[5, 7], [6, 9], [7, 4]])
df2 = df.astype(float)
img.save()
root.mainloop()
d[i[0]] = int(i[1])
foo[:, (1)]
datetime.combine(date.today(), time()) + timedelta(hours=2)
root.mainloop()
a = np.array(a, dtype=np.float128)
[[random.random() for i in range(N)] for j in range(N)]
c = [(x | y) for x, y in zip(a, b)]
input()
print(list(enumerate(words)))
pdb.set_trace()
cnxn.commit()
print(os.path.join(dirpath, filename))
cursor.execute(query, data)
root.quit()
[(i, j) for i in range(10) for j in range(i)]
results = [t[1] for t in mylist if t[0] == 10]
driver.quit()
zip(iter(x.items()), iter(y.items()))
heapq.nlargest(6, your_list, key=itemgetter(1))
plt.show()
os.path.relpath(subdir2, subdir1)
[[], [], [], [], [], [], [], [], [], []]
sys.stdout.flush()
df.ix[idx]
setattr(self, key, value)
[l[i::5] for i in range(5)]
operator.itemgetter(*b)(a)
[(m.start(0), m.end(0)) for m in re.finditer(pattern, string)]
any(map(eval, my_list))
df.values.T.tolist()
[i for i in range(len(s1)) if s1[i] != s2[i]]
[list(e) for e in zip(*[fl[i::2] for i in range(2)])]
plt.show()
l[1:]
y[argrelmax(y)[0]]
root.mainloop()
cv2.waitKey()
plt.show()
my_list.sort()
a[~(a == 5).any(1)]
dict([(m.get(k, k), v) for k, v in list(d.items())])
forminstance.is_valid()
plt.show()
socket.gethostname()
np.repeat(a, [2, 2, 1], axis=0)
done = [(i, x) for i in [a, b, c, d]]
plt.setp(axs[1].xaxis.get_majorticklabels(), rotation=70)
array([0, 100, 100, 100, 4, 5, 100, 100, 100, 9])
plt.show()
[i for i, x in enumerate(testlist) if x == 1]
dict((key_from_value(value), value) for value in values)
p.start()
self.submenu2.setVisible(False)
array([0, 0, 2, 1, 0, 1])
np.vstack((np.cos(theta), np.sin(theta))).T
pdb.set_trace()
equal([1, 2], a).all(axis=1).any()
[v for k, v in self.items() if v == value]
len(set(d.values())) == 1
min(L, key=lambda theta: angular_distance(theta, 1))
img.seek(1)
l = [(x * x) for x in range(0, 10)]
plt.show()
plt.show()
plt.show()
df.applymap(time.isoformat).apply(pd.to_timedelta)
df.groupby(by=df.columns, axis=1).apply(gf)
l = map(lambda x: x * 2, l)
new_list = [seq[0] for seq in yourlist]
app.run(port=port)
map(lambda x: x + 1, L)
sys.stdout.flush()
s[::-1]
ip.iptype()
a[list(np.ogrid[[slice(x) for x in a.shape]][:-1]) + [i]]
plt.show()
self.layout.addWidget(self.button)
img.save(sys.argv[2])
db.session.commit()
list(chain.from_iterable(zip(list_a, list_b)))
{i: j for i, j in zip(list(range(1, 5)), list(range(7, 11)))}
plt.show()
results = cursor.fetchall()
m[m.mask]
x[np.where(x == 5)]
int(time.mktime(dt.timetuple()))
plt.show()
{k: v for k, v in list(mydict.items()) if k >= 6}
plt.show()
plt.show()
app.run()
[(x * 2 if x % 2 == 0 else x) for x in a_list]
browser.close()
pygame.display.update()
root.mainloop()
root.mainloop()
x = [x for x in b.split() if x in a.split()]
wx.Frame.__init__(self, parent)
multiprocessing.cpu_count()
plt.show()
map(self.queryQ.put, self.getQueries())
sorted(s, key=lambda x: int(x[-1]))
func(1, *args, **kwargs)
float(a)
list(globals().keys())[2]
d = dict.fromkeys(string.ascii_lowercase, 0)
root.mainloop()
plt.show()
cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
plt.show()
result = [(x + dx, y + dy) for x, y in points for dx, dy in offsets]
array([[True, True], [True, True]], dtype=bool)
gca().xaxis.set_major_formatter(FuncFormatter(formatter))
list(d.keys())
min([x[::-1] for x in a])[::-1]
plt.show()
x = (x + y) % 48
[ord(x) for x in letters]
plt.show()
zip((1, 2), (40, 2), (9, 80))
r = dict((v, k) for k, v in d.items())
self._bar()
plt.show()
plt.show()
print([(x[0], x[-1]) for x in l])
time.sleep(1)
df.loc[(df == 1).any(axis=1)]
newsampledata.reindex(newsampledata.index.repeat(n)).reset_index(drop=True)
plt.show()
time.sleep(1)
a.sort(key=Counter(a).get, reverse=True)
len(os.walk(path).next()[2])
df.dtypes
results = sorted(list(results.items()), key=lambda x: x[1], reverse=True)
sorted((sorted(item) for item in data), key=lambda x: (len(x), x))
sorted(os.listdir(whatever_directory))
[i for i in x if 60 < i < 70]
lst.sort()
[(x[i] + x[i + 1]) for i in range(0, len(x), 2)]
plt.show()
self.grid_rowconfigure(1, weight=1)
plt.show()
sys.exit(app.exec_())
json.loads(s)
driver.quit()
plt.show()
[v[0] for v in sorted(iter(d.items()), key=lambda k_v: (-k_v[1], k_v[0]))]
functools.reduce(np.logical_or, (x, y, z))
d = {int(k): [int(i) for i in v] for k, v in list(d.items())}
cursor.execute(sql)
sys.exit()
[[(k, x[k], y[k]) for k in x if x[k] != y[k]] for x, y in pairs if x != y]
linalg.svd(a[:, :, (1)])
print(dict(new_dict))
[int(s) for s in str.split() if s.isdigit()]
np.moveaxis(np.indices((4, 5)), 0, -1)
list({e.id: e for e in somelist}.values())
plt.show()
time.sleep(0.1)
max(A, key=A.get)
a[i, j] = x
app.run()
model.fit([X])
plt.show()
[dict(zip(keys, a)) for a in zip(values[::2], values[1::2])]
[item for sublist in l for item in sublist]
[item for sublist in list_of_lists for item in sublist if valid(item)]
plt.show()
df.index
plt.show()
f.write(doc.render())
plt.show()
shutil.copyfileobj(from_file, to_file)
main()
df.apply(lambda x: sum(x.isnull().values), axis=1)
{k: v for k, v in points.items() if v[0] < 5 and v[1] < 5}
myFunc(lambda a, b: iadd(a, b))
pl.show()
main()
s.getsockname()[0]
array([4, 5, 5, 6, 6, 6])
os.killpg(self.process.pid, signal.SIGTERM)
fh.close()
list(range(0, 100, 5))
[x for x in foo]
plt.show()
[x for x, y, z in G]
b = np.delete(a, i, axis=0)
root.mainloop()
my_list = [col for row in matrix for col in row]
list(set(dict_a.values()) & set(dict_b.values()))
a = datetime.date.today().year
map(list, list(totals.items()))
np.argmax(np.max(x, axis=1))
cursor.close()
my_list = list(set(my_list))
plt.show()
f.close()
Student.objects.filter(studentgroup__level__pk=1)
self.window.keypad(1)
a.flatten()
files.sort(key=lambda x: os.path.getmtime(x))
df[df.columns[2:5]]
Farm.objects.filter(tree__in=TreeQuerySet)
t.start()
plt.show()
df.replace(0, np.nan).bfill(1).iloc[:, (0)]
root.mainloop()
cherrypy.quickstart(Root())
p.terminate()
set([1])
plt.draw()
sys.stdout.flush()
print(calendar.monthrange(now.year, now.month)[1])
client.transport.write(message)
cell.value = statN
[row[i] for row in matrix]
[(a - int(a)) for a in l]
cbar.ax.tick_params(labelsize=10)
[[[(0) for _ in range(n)] for _ in range(n)] for _ in range(n)]
plt.show()
A = np.squeeze(np.asarray(M))
root.mainloop()
pd.Series([np.array(e)[~np.isnan(e)] for e in x.values])
curses.endwin()
User.objects.filter(Q(income__gte=5000) | Q(income__isnull=True))
random.choice(string.letters)
[dict(zip(keys, values[i:i + n])) for i in range(0, len(values), n)]
(local_dt - datetime.datetime.utcfromtimestamp(timestamp)).seconds
res = np.zeros((arr.shape[0], m), arr.dtype)
np.where(np.in1d(values, searchvals))
logger.setLevel(logging.DEBUG)
dictionary = dict(zip(List[0::2], List[1::2]))
data = {tuple(sorted(item)) for item in lst}
df.apply(lambda x: np.all(x == 0))
{v[0]: data[v[0]] for v in list(by_ip.values())}
sys.stdout.flush()
Kid.objects.filter(id__in=toy_owners)
os.stat(path).st_birthtime
data = [[int(v) for v in line.split()] for line in lines]
[list(l[0]) for l in mylist]
json.dumps(s)
datetime.datetime.combine(dateobject, datetime.time.min)
numpy.array(list(c))
hash(frozenset(list(my_dict.items())))
original[::-1]
root.mainloop()
sum([(x * y) for x, y in zip(*lists)])
result = np.zeros(b.shape)
c = [tuple(x + b[i] for i, x in enumerate(y)) for y in a]
keys, values = zip(*list(dictionary.items()))
db.commit()
dict([i for i in iter(d.items()) if i[0] in validkeys])
plt.colorbar()
bin(10)
s.split()
z = dict(list(x.items()) + list(y.items()))
plt.show()
plt.show()
print(sys.path)
sys.stdout.flush()
plt.show()
df2.reset_index()
len(df.index)
plt.show()
np.corrcoef(x[0:len(x) - 1], x[1:])[0][1]
rows.sort(key=itemgetter(1), reverse=True)
sorted(lst, key=lambda x: (c[x], x), reverse=True)
pd.DataFrame(s).T
[i for i in range(10) if i % 2 == 0]
__init__.py
t.start()
plt.gca().xaxis.set_major_formatter(FixedFormatter(ll))
thread.exit()
d = {k: frozenset(v) for k, v in list(d.items())}
root.mainloop()
sorted(data, key=itemgetter(1))
print(json.dumps(data, indent=2, sort_keys=True))
reactor.run()
[1, 2]
cv2.waitKey(0)
x = np.maximum(x, y)
list(flatten(elements))
time.sleep(1)
f.close()
self._socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
word[1:]
print(date.today().year + 1)
df.apply(lambda x: np.sqrt(x.dot(x)), axis=1)
print(str(2) + str(1))
d = dict((y, x) for x, y in enumerate(t))
zip(*s)[0]
list(chain.from_iterable(list_of_lists))
MyApp().run()
server.serve_forever()
np.concatenate((a, val))
map(partial(f, x), y) == map(f, [x] * len(y), y)
a, b, c = (int(i) for i in line.split())
f.close()
sys.path.insert(1, os.path.dirname(os.path.realpath(__file__)))
map(list, zip(charlist, numlist))
time.sleep(5)
np.hstack(b)
test[numpy.logical_or.reduce([(test[:, (1)] == x) for x in wanted])]
results = [s for s in strings if any(m in s for m in matchers)]
s.sendmail(FROMADDR, TOADDR + CCADDR, msg.as_string())
ndb.StringProperty(repeated=True)
ax1.set_xticklabels([])
deletelist[-n:]
np.where(np.in1d(a, b))
dict(zip(*([iter(l)] * 2)))
L[:] = new_list
strg[n:] + strg[:n]
df[~df.applymap(np.isreal).all(1)]
b = [int(i != 0) for i in a]
driver = webdriver.Firefox()
print(proc.communicate()[0])
names = [description[0] for description in cursor.description]
plt.show()
plt.show()
plt.show()
dict((k, v) for k, v in list(points.items()) if all(x < 5 for x in v))
inlinkDict[docid] = adoc[1:]
(x * x for x in range(10))
main()
singleitem = mylist[-1]
len(dict[key])
array.append([int(x) for x in line.split()])
[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
pd.DataFrame(df.to_records())
{k: v for k, v in zip(range(1, 5), count(7))}
cursor.execute(sql)
main(sys.argv[1:])
sys.exit(app.exec_())
A = [[(0) for i in range(n)] for j in range(2 ** n)]
x = float(x)
sorted(test, key=lambda x: isinstance(x, list) and len(x) or 1)
root.mainloop()
fig.show()
((a[:, (np.newaxis), :] - v) ** 2).sum(axis=-1).shape
plt.show()
print(datetime.datetime.now(EST()))
(array_2d == row).all(-1).sum()
sorted([True, False, False])
random.sample(range(len(mylist)), sample_size)
array([[0, 1, 0], [1, 1, 1], [0, 1, 0]])
np.argmax(np.max(x, axis=0))
plt.show()
df[df.index.levels[0].isin([int(i) for i in stk_list])]
df.show()
process.stdin.flush()
np.vstack(counts_array)
ax.xaxis.set_major_locator(ticker.LogLocator(numticks=6))
datetime.datetime(2012, 4, 1, 0, 0).timestamp()
[list(x) for x in zip(*sorted(zip(list1, list2), key=itemgetter(0)))]
os.makedirs(path_directory)
m[:, (0)].reshape(5, 1).shape
ax.set_axis_off()
queryset.filter(created_at__gte=datetime.date.today())
os.getpid()
next((i for i, v in enumerate(l) if is_odd(v)))
smtp.sendmail(send_from, send_to, msg.as_string())
print(list(sk.d.items()))
plt.scatter(x, y, color=c)
settings.py
print(pd.Series(df.values.tolist(), index=df.index))
[[random.random() for x in range(N)] for y in range(N)]
set(alllists).difference(set(subscriptionlists))
plt.show()
[values for key, values in list(rev_multidict.items()) if len(values) > 1]
plt.tight_layout()
pd.concat([df_current, df_future]).sort_index()
bin(_)
a = a.reshape((m, n)).T
result = [list(someListOfElements) for _ in range(x)]
x = list(set(x))
plt.show()
print(all(lst[i].lower() < lst[i + 1].lower() for i in range(len(lst) - 1)))
max(l, key=lambda x: (x[1], random.random()))
bin(6)[2:].zfill(8)
dict(zip(it, it))
data.apply(lambda r: sorted(r), axis=1).drop_duplicates()
sum(int(c) for c in strs if c.isdigit())
arr[np.maximum.accumulate(np.isnan(arr), axis=1)] = np.nan
writer.writerow([val])
cursor.execute(sql_and_params[0], sql_and_params[1:])
df.sort_index(inplace=True)
print(df.head())
print(os.path.basename(sys.argv[0]))
plt.show()
self.somevalue = somevalue
plt.show()
[x for i in range(len(l)) for x in l[i]]
np.vstack(dat_list)
max(l, key=lambda x: x[1] + random.random())
self.date = d.replace(tzinfo=pytz.utc)
a.insert(0, a.pop())
min(list(range(len(values))), key=lambda i: (values[i], -i))
timestamp = dt.replace(tzinfo=timezone.utc).timestamp()
print([x for x in A if all(y in x for y in B)])
plt.show()
ax.set_xticklabels(xlbls)
type(iter(d.values()))
conn.commit()
plt.show()
[(lambda x: x * i) for i in range(4)]
df = pd.read_sql(sql, cnxn)
test.__name__
plt.show()
os.isatty(sys.stdin.fileno())
scipy.optimize.leastsq(residuals, p_guess, args=(x, y))
print(decrement())
df.corr().mask(np.equal.outer(df.index.values, df.columns.values))
random.choice(mylist)
{{OBJNAME.get_FIELDNAME_display}}
p.stdin.close()
f.write(s)
text_file.close()
sys.setrecursionlimit()
root.mainloop()
{k: (v * dict2[k]) for k, v in list(dict1.items()) if k in dict2}
json.dumps(fu)
map.put(key, new_value)
root.mainloop()
plt.show()
arr[[1, 4, 5]]
logger = logging.getLogger(__name__)
fig.tight_layout()
cherrypy.engine.start()
root.mainloop()
df.columns = pd.MultiIndex.from_tuples(df.columns.to_series())
somelist[:] = [x for x in somelist if not determine(x)]
{x[0]: len(list(x[1])) for x in itertools.groupby(sorted(mylist))}
(lambda x, f: list(y[1] for y in f(x)))(lst, lambda x: (sorted(y) for y in x))
connection.commit()
sum(a)
pdb.set_trace()
np.split(a, np.nonzero(np.diff(a))[0] + 1)
self.button.clicked.connect(self.calluser)
blog.comment_set.all()
[array([0]), array([47, 48, 49, 50]), array([97, 98, 99])]
ax.set_xticklabels(x)
ma.array(a, mask=np.isnan(a)).mean(axis=0)
pd.DataFrame([record_1])
app.run(debug=True)
scipy.stats.hypergeom.cdf(k, M, n, N)
[np.nonzero(np.in1d(x, c))[0] for x in [a, b, d, c]]
pd.DataFrame(np.where(df, 1, 0), df.index, df.columns)
f = lambda x, y: x + y
data = json.load(f)
tuple(tup[0] for tup in A)
datetime.fromtimestamp(1268816500)
plt.show()
len(set(a)) == len(a)
np.isnan(a)
np.cov(x)
np.linalg.norm(x, ord=1)
[1, 4, 5, 6, 7]
inspect.getmembers(my_module, inspect.isclass)
s.map(lambda x: x[:2])
ioloop.IOLoop.instance().start()
[list(g) for k, g in itertools.groupby(iterable)]
np.equal.reduce([False, 0, 1])
f.write(json.dumps(data, ensure_ascii=False))
Counter(map(tuple, list1))
os.path.dirname(fullpath)
list(range(len(strs) - 1, -1, -1))
csv_file.writerows(the_list)
python - -version
np.cumsum(np.concatenate(([0], np.bincount(v))))[v]
[k for k, g in groupby(sorted(chain.from_iterable(iter(content.values()))))]
np.asarray([func(i) for i in arr])
numpy.in1d(a, b).nonzero()
df.fillna(0)
ax.set_yticks([])
server.starttls()
np.hstack([X, Y])
plt.figure()
sys.exit(1)
env.skip_bad_hosts = True
not any(my_list)
map(max, zip(*alist))
Book.objects.filter(Q(author__id=1) & Q(author__id=2))
Thread(target=cherrypy.quickstart, args=[Root()]).start()
app.mainloop()
f = os.path.join(path, f)
df[last_row.argsort()]
dict(zip(l[::2], l[1::2]))
[(i ** 2) for i in list]
numpy.where(mask, 1, numpy.where(numpy_array == 0, 0, 2))
QApplication.desktop()
plt.show()
sys.exit()
server.serve_forever()
numpy.empty((10, 4, 100))
{k: v for k, v in list(dict.items()) if v > something}
admin.site.register(User, UserAdmin)
fig.autofmt_xdate()
plt.show()
[k for k, count in list(Counter(L).items()) if count > 1]
plt.show()
etree.tostring(e, pretty_print=True)
admin.site.register(Person, PersonAdmin)
pygame.display.set_mode((1, 1))
sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)
y.astype(int)
print(m.group(1))
data = numpy.genfromtxt(yourFileName, skiprows=n)
localtime(now()).replace(hour=0, minute=0, second=0, microsecond=0)
df2.reindex(df.index)
plt.show()
plt.show()
np.random.random((N, N))
app = Flask(__name__)
setattr(i, x, f(getattr(i, x)))
max(x, key=x.get)
plt.show()
zip(*sorted(zip(x, y), key=ig0))
[dictio for dictio in dictlist if dictio[key] in valuelist]
sum(abs(x - y) for x, y in zip(sorted(xs), sorted(ys)))
[[int(y) for y in x] for x in values]
[OrderedDict((k, d[k](v)) for k, v in l.items()) for l in L]
l = np.array([list(method().values()) for _ in range(1, 11)])
ax.xaxis.set_major_locator(locator)
sys.stdout.flush()
outfile.write(infile.read())
os.path.dirname(sys.argv[0])
button.clicked.connect(self.commander(command))
__init__.py
print(re.findall(pattern, x))
[i for i, item in enumerate(a) if item in b]
[tuple(l) for l in nested_lst]
[transform(x) for x in results if condition(x)]
min(x for x in lst if isinstance(x, str))
server.serve_forever()
os.path.abspath(math.__file__)
sum(map(int, l))
list_.sort(key=lambda x: x[0])
do_something()
[[(i * j) for i, j in zip(*row)] for row in zip(matrix1, matrix2)]
result = sorted(iter(promotion_items.items()), key=lambda pair: list(pair[1].items()))
sys.exit(app.exec_())
print(getpass.getuser())
getattr(model, fieldtoget)
output.close()
sorted(list(d.items()), key=operator.itemgetter(1, 0))
foo()
[int(i) for i in str(number)]
plt.show()
os.system(cmd)
pd.DataFrame(a, df.index, df.columns)
(a1[:, (numpy.newaxis)] == a2).all(axis=2).astype(int)
gtk.main()
s1.reset_index(drop=True) * s2.reset_index(drop=True)
df.applymap(np.isreal)
[(i * y + x) for i in range(10)]
df.reindex_axis(sorted(df.columns), axis=1)
l = list(set(l))
p = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
logging.basicConfig(level=logging.WARN)
logging.Formatter.__init__(self, msg)
plt.show()
datetime.utcfromtimestamp(float(self.timestamp))
curses.doupdate()
A = A - A.multiply(B)
plt.show()
sys.exit(0)
zip(*lists)
plt.show()
plt.show()
dict((k, 2) for k in a)
a[:, ::2] + a[:, 1::2]
np.array(list(g))
win.show_all()
plt.show()
list1.sort(key=convert)
[a for a in s if s.count(a) == 1][0]
numpy.nonzero(numpy.in1d(a, b))
browser.quit()
plt.subplots_adjust(top=0.75)
session.commit()
dict([(t.__name__, t) for t in fun_list])
sorted(temp, key=itemgetter(1), reverse=True)
l = [x for x in l if x.strip()]
a[np.arange(np.shape(a)[0])[:, (np.newaxis)], np.argsort(a)]
root.mainloop()
b.sort(key=lambda x: a.index(x))
np.put(arr, np.where(~np.in1d(arr, valid))[0], 0)
b[a[1, 1]]
z = arr[:, (5)].sum()
ftp.quit()
ast.literal_eval(reclist)
sorted(d, key=lambda x: (-x[1], x[0]))
df.append(new_df, ignore_index=True)
df.sort_index(inplace=True)
set(x[0] for x in list1).intersection(y[0] for y in list2)
print(etree.tostring(root, pretty_print=True))
string.split(pattern, 1)[0]
root.mainloop()
sys.stdin.isatty()
os.kill(pid, signal.SIGTERM)
os.path.join(directory, filename)
RotatingFileHandler(filename, maxBytes=10 * 1024 * 1024, backupCount=5)
plt.legend()
sympy.sstr(_)
plt.show()
[x for d in thedict.values() for alist in d.values() for x in alist]
pd.concat([data, ts]).sort_index().interpolate().reindex(ts.index)
print(repr(the_string))
list({len(s): s for s in jones}.values())
np.tile(np.arange(y), x)
print(list(itertools.combinations(a, i)))
ax.set_ylim(0, 1)
python - mserver
sum(jdcal.gcal2jd(dt.year, dt.month, dt.day))
User.query.join(User.person).filter(Person.id.in_(p.id for p in people)).all()
Project.objects.filter(action__person=person)
x = min(float(s) for s in l)
threading.Thread.__init__(self)
sorted(list(c.items()), key=itemgetter(0))
np.polyfit(x, y, 4)
sorted(a, key=lambda v: (v, random.random()))
[i for i, x in enumerate(lst) if x < a or x > b]
plt.show()
np.count_nonzero(boolarr)
y = (i[0] for i in x)
plt.show()
queryset.filter(created_at__range=(start_date, end_date))
QtCore.Qt.ItemIsEnabled
time.sleep(10)
datetime.datetime(1970, 1, 1) + datetime.timedelta(seconds=-2082816000)
data = numpy.loadtxt(yourFileName, skiprows=n)
a.transpose(2, 0, 1)
df.to_dict()
b = np.fill_diagonal(np.zeros_like(a), value)
python - pip
f(tup1[0], tup1[1], tup2[0], tup2[1])
print(bytes.decode(encoding))
sys.stdout.flush()
plt.show()
plt.show()
plt.setp([ax.get_xticklines(), ax.get_yticklines()], color=color)
z = merge_two_dicts(x, y)
f(*args)
cursor.close()
a.index(max(a))
p.wait()
ma.vstack([a, ma.array(np.resize(b, a.shape[0]), mask=[False, False, True])])
__init__.py
G[i, j] = C_abs[i, j] + C_abs[j, i]
{x: (0) for x in string.printable}
tuple(s[i:i + 2] for i in range(0, len(s), 2))
[map(int, x) for x in values]
app.mainloop()
browser = webdriver.Safari()
print(math.ceil(4.2))
tf.sqrt(tf.reduce_mean(tf.square(tf.sub(targets, outputs))))
gtk.main()
[(s + mystring) for s in mylist]
ser.readline()
result = sum(x for x in range(1, 401, 4))
doctest.testmod()
os.chmod(path, mode)
[[0.4, 0.6, 0.0, 0.0], [0.2, 0.4, 0.4, 0.0], [0.0, 0.0, 0.4, 0.6]]
df.corr().iloc[:-1, (-1)]
[0] * 4
sorted(l, key=lambda i: hypot(i[0] - pt[0], i[1] - pt[1]))
frozenset(list(a.items()))
norm.ppf(norm.cdf(1.96))
plt.show()
root = tree.getroot()
sorted(set().union(*input_list))
plt.gca().set_position([0, 0, 1, 1])
d = {k: [] for k in keys}
f.close()
forms.ModelForm.__init__(self, *args, **kwargs)
socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
file.read(1)
f.seek(0)
print(nat.index(nat.Germany))
plt.show()
plt.subplots_adjust(bottom=0.2)
random.choice(string.ascii_letters + string.digits)
a = [map(int, row.split()) for row in stdin]
list(itertools.accumulate(lst, lambda a, b: tuple(map(sum, zip(a, b)))))
plt.show()
main()
simplelist.append(x)
[word for line in f for word in line.split()]
print(arr[[1, 4, 5]])
plt.show()
p = ax.scatter(xs, ys, zs, c=cs, marker=m)
list(itertools.chain.from_iterable(list(d.values())))
collections.Counter(a)
self.show()
[numbers[i % len(numbers)] for i in range(start, start + len(numbers))]
plt.show()
json.dumps([dict(mpn=pn) for pn in lst])
plt.imshow(cv2.cvtColor(cube, cv2.COLOR_BGR2RGB))
print(list_end_counter([1, 2, 1, 1, 1, 1, 1, 1]))
map(itemgetter(1), elements)
root.deiconify()
test.reshape((4, 4))[:, :2].reshape((2, 4))
dt = tz.localize(naive, is_dst=True)
print(json.dumps(result))
print(applejuice.__name__)
sys.path.append(module_path)
d += datetime.timedelta(1)
subprocess.call(cmd, stdin=f)
map(lambda y: [np.mean(y[i:i + length]) for i in range(0, len(y), length)], a)
bool(random.getrandbits(1))
(arr == arr[0]).all()
[(0, 0, 1, 1), (0, 1, 0, 1)]
test.__defaults__
sys.exit(main(sys.argv[1], sys.argv[2]))
A = np.delete(A, 50, 1)
print(json.dumps(result))
my_dictionary = dict(map(lambda k_v: (k_v[0], f(k_v[1])), iter(my_dictionary.items())))
zipfile.ZipFile(path)
[sum(zip(*x)[1]) for x in data]
data.groupby(level=[0, 1]).sum()
plt.show()
sys.exit(1)
res_list = [i[0] for i in rows]
sys.exit(1)
plt.show()
plt.show()
np.polyfit(X, Y, 1)
b = [i for sub in a for i in sub]
os.close(fh2)
plt.show()
cursor.commit()
[[y for y in x if y not in to_del] for x in my_list]
print(sum(map(ord, my_string)))
a[key].append(1)
c.most_common(1)
sum(d.values())
[(int(i) if i.isdigit() else float(i)) for i in s]
plt.show()
plt.minorticks_off()
output.close()
ax.get_xaxis().get_major_formatter().set_scientific(False)
app = Flask(__name__)
tree.delete(*tree.get_children())
[n for i, n in enumerate(xs) if i == 0 or n != xs[i - 1]]
plt.show()
r = np.ptp(a, axis=1)
d.update((b, a[:, (i)]) for i, b in enumerate(a))
cbar.set_ticklabels([mn, md, mx])
next((i for i, val in enumerate(lst) if np.all(val == array)), -1)
reactor.run()
root.mainloop()
x = [[foo for i in range(10)] for j in range(10)]
self.response.out.write(self.request.body)
plt.show()
Category.objects.filter(category__isnull=True)
ax.w_yaxis.set_ticklabels([])
[len(x) for x in a[0]]
plt.show()
os.path.join(mydir, myfile)
plt.show()
plt.show()
driver.quit()
list1[0][2]
[v for i, v in enumerate(myList) if i not in toRemove]
(df == 1).sum()
asyncio.get_event_loop().run_forever()
np.flatnonzero(x[:-1] != x[1:]).mean() + 0.5
datetime(date.year, date.month, date.day)
plt.show()
map(lambda f: f(*args), funcs)
numpy.zeros((i, j, k))
y = [i[0] for i in x]
plt.show()
df.ix[:5, :10]
[x for x in a if x <= 1 or x >= 4]
proc.communicate()
f(*args, **kwargs)
c = [item for pair in zip(a, b) for item in pair]
ax.lines.pop(0)
sorted(Thing.objects.all(), key=lambda t: t.name)
ssh.close()
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
root.mainloop()
a[:, (0)][mask]
plt.plot(x[i:i + 2], y[i:i + 2])
l = [i.split() for i in l]
reactor.run()
ax.set_yticklabels([])
self.searchqueryset.filter(group__isnull=True)
some_list.remove(thing)
[x for x in l if x % 2 == 0]
logger.setLevel(logging.DEBUG)
np.cross(a, b, axis=0)
c = dict(list(a.items()) | list(b.items()))
self.canvas.pack()
root.mainloop()
plt.show()
[1, 1, 1] < [1, 1, 2]
df.iloc[i]
df[df.apply(lambda x: min(x) == max(x), 1)]
app.run(debug=True)
logger = logging.getLogger(__name__)
my_list.sort(key=nonesorter)
__init__.py
assertTrue(math.isnan(nan_value))
sum(v for k, v in c.items() if v > 1)
s.send(my_bytes)
pylab.show()
np.place(a, np.isnan(a), 0)
writer.writerows(cursor.fetchall())
array([[0, 1, 2], [0, 2, 0], [0, 1, 2], [1, 2, 0], [2, 1, 2]])
y.mean(axis=1).mean(axis=-1)
ZipFile.write(a, compress_type=zipfile.ZIP_DEFLATED)
sys.stdout.flush()
pylab.show()
setattr(self, k, v)
x.reshape(2, 2, 5).transpose(1, 0, 2).reshape(4, 5)
l = [item.lower() for item in l]
[item for item in my_list if some_condition()]
session.query(q).limit(10)
tuple([tuple(row) for row in myarray])
help(my_func)
p1.start()
Post.objects.filter(createdAt__lte=datetime.now() - timedelta(days=plan.days))
sorted(lst, key=lambda L: (L.lower(), L))
plt.show()
time.mktime(time.gmtime(0))
plt.show()
getattr(foo_obj, command)()
df = pd.DataFrame.from_dict(data)
print(result.group(0))
time.sleep(1)
form = MyModelForm(instance=someinst)
self.Bind(wx.EVT_PAINT, self.OnPaint)
{l[1]: l for l in lol}
any(k in s for k in keywords)
len(a) == len(b) and all(a.count(i) == b.count(i) for i in a)
a[a == 2] = 10
sorted(lst, key=operator.itemgetter(1), reverse=True)
cols = list(df.columns.values)
ax.legend()
Gtk.main()
myscript.py
nx.draw(G)
signal.signal(signal.SIGINT, signal_handler)
root.mainloop()
df = df.append(pd.read_sql(querystring, cnxn, params=[i]))
n = sum([(len(v) + 1) for k, v in list(dict_test.items())])
[random.choice(list_of_lists) for _ in range(sample_size)]
mySet = set((x, y) for x in range(1, 51) for y in range(1, 51))
numpy.intersect1d(a, b)
A[np.ix_([0, 2], [0, 1], [1, 2])]
spDF.rdd.first()
[i for i, (a, b) in enumerate(zip(vec1, vec2)) if a == b]
root = Tk()
json.loads(s)
dict(j for i in L for j in list(i.items()))
ax.set_xticks([])
outfile.write(line)
df = pd.DataFrame(data=matrix.toarray(), columns=names, index=raw)
plt.show()
print([s[i] for i in index])
print((i, [round(255 * x) for x in rgb]))
[-2, -2, -2, -2, -8, -8, -8, -8, -8, -8]
ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
plt.show()
cv2.waitKey(0)
list(range(11, 17))
Thread(target=fct).start()
[len(x) for x in s.split()]
[y for y in a if y not in b]
df.insert(idx, col_name, value)
[(x + 1) for x in y]
defaultdict(lambda : defaultdict(dict))
db.session.add(query)
Group.objects.get(id=1).members.filter(is_main_user=True)[0]
sqs.filter(has_been_sent=True)
plt.show()
plt.show()
df.sort_index()
np.linspace(0, 5, 10)
numpy.transpose([numpy.tile(x, len(y)), numpy.repeat(y, len(x))])
np.array(x).reshape(2, 2, 4)
admin.site.unregister(Site)
plt.figure(figsize=(5, 6))
{i: (0) for i in range(0, 10)}
os.setsid()
drawPropagation(1.0, 1.0, numpy.linspace(-2, 2, 10))
[item for sublist in (list_of_lists for item in sublist)]
[a for a in A.objects.all() if a.b_set.count() < 2]
z = merge_dicts(a, b, c, d, e, f, g)
logging.basicConfig(level=logging.DEBUG)
os.path.splitext(os.path.basename(f))
[x[0] for x in a]
plt.show()
list(my_dict.items())
plt.show()
array([0, 1, 0, 0, 0, 0, 0, 0, 0, 0])
plt.show()
numpy.argwhere(a.max() == a)
lines.sort()
np.random.seed(1)
plt.show()
(lambda x, y: x + y)(1, 2)
plt.show()
array([0, 0, 1, 0, 0, 1, 0])
ax.set_xticks([])
doctest.testmod()
max(enumerate(props), key=lambda tup: len(tup[1]))
(M == 0).T.nonzero()
a[np.lexsort(a[:, ::-1].T)]
plt.plot(x, y)
numpy.mean(gp2)
a[key].append(2)
my_dict2 = {y: x for x, y in my_dict.items()}
func(*args, **kwargs)
df.iloc[:, ([0])]
sum([True, True, True, False, False])
[key for key, val in list(dct.items()) if val]
root.mainloop()
[heapq.nsmallest(x, 2)[1] for x in list_of_lists]
a = [(b + 4 if b < 0 else b) for b in a]
b = a[:]
assert rdd.squares().collect() == rdd.map(lambda x: x * x).collect()
L.append([7, 8, 9])
zipfile.ZipFile(zipbytes)
np.allclose(a, b)
fig = plt.figure()
any(np.array_equal(np.array([[0, 0], [0, 0]]), x) for x in my_list)
[(x, y) for x, y in numpy.ndindex(a.shape)]
admin.site.register(User, UserAdmin)
l = ast.literal_eval(s)
plt.draw()
self.process.terminate()
sorted(chain(a, b), key=lambda x: x.name)
pd.DataFrame(s.groupby(level=0).apply(list).to_dict())
Gtk.main()
admin.site.register(YourModel, YourModelAdmin)
a[i, j] = 5
sum(1 for row in rows for i in row if i)
c.bin[2:]
gtk.main()
[0] * 10000
locals().update(my_dict)
plt.show()
{k: sum(v) for k, v in list(trimmed.items())}
time.sleep(1)
print(getattr(somemodule, class_name))
plt.show()
time.sleep(1500)
print(pdf_file.read())
(dist ** 2).sum(axis=1) ** 0.5
print(sys.stdin.read())
p.wait()
sheet.write(1, 0, 1)
lst = [os.path.splitext(x)[0] for x in accounts]
odeint(func, y0, t, a, b, c)
np.dot(I, np.ones((7,), int))
fig.colorbar(p)
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
df.to_csv(f, index=False, header=False)
bids.append(int(bid))
connection.close()
Some_Model.objects.filter(id__in=ids_list).delete()
platform.architecture()
plt.show()
sum(1 for c in string if c.islower())
[1505]
pickle.dumps(threading.Lock())
open(f.name).read()
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.jet)
df.loc[(df.isnull().any(axis=1)), :] = np.nan
df.toPandas()
int(sum(jdcal.gcal2jd(dt.year, dt.month, dt.day)))
{tuple(x) for x in l1}.intersection(map(tuple, l2))
print(celery.current_task.task_id)
sum(zip(*structure)[1])
x.reshape(2, 2, 5).transpose(1, 0, 2)
locals()[4]
S1.intersection(S2)
plt.gca().invert_yaxis()
[list(itertools.chain(*x)) for x in zip(L1, L2)]
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
plt.show()
{k: [(a + b) for a, b in zip(*v)] for k, v in list(d.items())}
datetime.datetime.combine(birthdate, datetime.time())
A * B[:, (np.newaxis)]
np.dot(np.dot(I, np.ones((7,), int)), mat)
z = int(str(x) + str(y))
np.mgrid[0:5, 0:5].transpose(1, 2, 0).reshape(-1, 2)
list(dict.keys())
plt.show()
cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 2)
[(2 * x) for x in some_list if x > 2]
Toy.objects.filter(owner__parent__id=1)
random.uniform(-1, 1)
plt.show()
B = numpy.array([A[0, 0, 1], A[2, 1, 2]])
json.dump(data, outfile, ensure_ascii=False)
data = [[int(i) for i in line.split()] for line in original]
plt.show()
self.response.out.write(key)
plt.show()
print(os.path.join(subdir, file))
greet_selves()
plt.show()
[next(iter(s)) for _ in range(10)]
response = requests.post(url, data=data)
ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
[os.path.split(r)[-1] for r, d, f in os.walk(tree) if not d]
pprint([OrderedDict(zip(names, subl)) for subl in list_of_lists])
(df != 0).any(axis=0)
plt.show()
tornado.ioloop.IOLoop.instance().start()
plt.show()
re.findall(rx, st, re.VERBOSE)
max(a, key=sum)
plt.show()
root.mainloop()
plt.show()
a[([i for i in range(a.shape[0]) if i != 1]), :, :]
myfile.close()
f.subs(x, 1)
[(x, y) for x in a for y in b]
sys.stdout.buffer.write(pdf_file.read())
webbrowser.open(filename)
print(requests.get(url, data=data, cookies=cookies).text)
datetime.datetime(ddd.year, ddd.month, ddd.day)
sorted(list(range(len(s))), key=lambda k: s[k])
plt.show()
reactor.run()
foo()
sys.stdout = sys.__stdout__
[str(n) for n in range(10)]
print(os.path.join(directory, file))
plt.show()
filtered_dict = {k: v for k, v in list(d.items()) if filter_string in k}
set(dic1.keys()) == set(dic2.keys())
MyMIDI.addNote(track, channel, pitch, time, duration, volume)
root.mainloop()
int(float(s))
msg.attach(MIMEText(text))
reactor.run()
print(doctree.toprettyxml())
print(line.rstrip())
list(l) == [0] * len(l)
dict(mylist)
np.concatenate((A[::-1, :], A), axis=0)
mylist[0][:1]
fig.autofmt_xdate()
[random.random() for _ in range(0, 10)]
print(numpy.array([X()], dtype=object))
plt.show()
plt.show()
plt.show()
map(truediv, a, b)
a = np.frombuffer(Data)
df[(df <= 2).all(axis=1)]
np.allclose(ans1, ans2)
f.write(e8)
[i for i in range(len(word)) if word[i] == letter]
print(soup.prettify())
d = collections.defaultdict(lambda : [0, []])
thing.save()
plt.show()
[random.sample(s, 1)[0] for _ in range(10)]
app.run()
max(PlayerList, key=lambda p: max(p[1:]))[0]
set(a) & set(b)
sys.exit(0)
plt.show()
db.session.commit()
np.linalg.norm(A - B, axis=-1)
[0, 16, 17, 18]
random.shuffle(array)
json.dumps({str(k): v for k, v in list(data.items())})
sorted(d, key=d.get, reverse=True)
c = [(i, 0) for i in a]
Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
np.isnan(np.array([np.nan, 0], dtype=object))
result = (list_[0][0] + list_[1][0]) * (list_[0][1] + list_[1][1])
zip(*elements)[1]
print(df.applymap(lambda x: str(x).isdigit()))
q = Model.objects.filter(Q(field1=f1) | Q(field2=f2)).distinct()
sum(sum(1 for i in row if i) for row in rows)
zip(keys, values)
repr(s)
plt.show()
ax.legend()
time.sleep(1)
time.sleep(0.1)
sys.stdout.flush()
ax.set_xlim(0, 7)
plt.hist(b, bins)
[(m.get(k, k), v) for k, v in list(d.items())]
[(mylist[i:] + [newelement] + mylist[:i]) for i in range(len(mylist), -1, -1)]
x.pop(random.randrange(len(x)))
plt.show()
df.reset_index(level=0, inplace=True)
plt.show()
sorted(lst, reverse=True, key=operator.itemgetter(0))
np.argwhere(a[:, (1)] == -1)[np.argmin(a[a[:, (1)] == -1, 0])]
print([tryeval(x) for x in L])
python - mplatform
[(m + str(n)) for m, n in zip(b, a)]
sum(int(n) for n in str(2 ** 1000))
new_list.append(fruit)
random.choice(words)
time.sleep(1)
myfunc(*args)
time.sleep(1)
foo()
s.dropna()
br.set_handle_robots(False)
plt.show()
[int(s) for s in I.split() if s.isdigit()]
random.shuffle(l)
df_example.iloc[([1, 4]), :-1].T.corr()
max(d, key=d.get)
print(first_list + list(set(second_list) - set(first_list)))
ax.legend()
lambda i: i[0]
np.array(m2)[:, (1)] > 10
np.concatenate((A[::-1, :], A[1:, :]), axis=0)
np.mean(a, axis=1)
array([True, True, True, False, False, False, False], dtype=bool)
app.run()
do_something_with(line)
r = requests.post(url, data=json.dumps(data), headers=headers)
[x[0] for x in tuple_list]
new_list = [(a, new_b) for a, b in tuple_list]
A = np.random.randn(1000, 1000)
ax.set_xlim([0, 1])
sorted(list(a.items()), key=itemgetter(1), reverse=True)
time.sleep(1)
fig.show()
plt.show()
sorted(l, key=lambda s: (s.isdigit(), s))
ax.plot_wireframe(T, z, abs(U), cstride=1000)
root.mainloop()
max(x, key=lambda i: x[i])
arr = np.append(arr, np.array([[4, 5, 6]]), axis=0)
[list(map(int, x)) for x in values]
r = requests.post(url, files=files)
code.interact(local=locals())
_w()
pdb.set_trace()
matplotlib.pyplot.show()
np.isclose([10000000000.0, 1e-07], [10000100000.0, 1e-08])
_cxn.commit()
gtk.main()
set.intersection(*(set(x) for x in d.values()))
sum(i for i in a)
pygame.display.set_mode(size)
df.sub(df.a, axis=0)
dict((k, mydict[k]) for k in keys_to_select if k in mydict)
str(1).zfill(2)
print(line.rstrip())
out = [a, b, c, d, e, f]
reactor.run()
list1.sort(key=int)
plt.show()
ax.plot(x, y)
sorted(lst, key=lambda x: (-counts[x], firstidx[x]))
sys.stdout.write(chr(x))
sorted(lst, key=str.lower)
set(zip(*[lst[i:] for i in range(n)]))
A = [(A[i + 1] + A[i]) for i in range(len(A) - 1)]
[numbers[i] for i in range(len(numbers)) if i not in indices]
print(os.path.join(path, filename))
[i for e in bad for i in my_list if e in i]
(s * 5).tolist()
myDict[item[1]] += item[2]
scipy.sparse.csr_matrix(df.values)
bin(0)
time.sleep(1)
plt.show()
db.rollback()
np.any(my_array[:, (0)] == value)
os.getpid()
list([x for x in l if x not in f])
lst = [int(i) for i in str(num)]
obj.save()
res = list(set(a) ^ set(b))
sys.stdout.write(str(x))
l.sort(key=sum_nested)
np.fill_diagonal(df.values, 0)
__init__.py
cherrypy.quickstart(HelloWorld())
[i for i, j in enumerate(a) if j == m]
mySet = set([myString])
self.matches = [s for s in self.options if s and s.startswith(text)]
MyModel.objects.all()
plt.show()
length = len(list(clusterList))
data.append(json.loads(line))
sorted(zipped, key=operator.itemgetter(1))
c = sum(1 for word in words if word[0] == word[-1])
cnx.commit()
np.eye(foo.shape[1]) * foo[:, (np.newaxis)]
app.run()
plt.show()
[map(dict.get, list(range(1, 6))) for _ in range(10)]
re.sub(reg, rep, text)
Py_Finalize()
conn.commit()
self.cdr = cdr
x = np.array([(1, 0), (0, 1)])
plt.show()
gtk.main_iteration()
new = [int(i) for i in old]
any(x in set(b) for x in a)
print(settings.BASE_DIR)
requests.get(url, params=query)
A[B == x].sum()
ax.set_xticklabels([])
sys.stdin.isatty()
ax.xaxis.set_major_formatter(xfmt)
sys.stdout.flush()
np.where(np.eye(A.shape[0], dtype=bool), A, A.T + A)
self.Bind(wx.EVT_LEFT_DCLICK, self.OnDoubleClick)
datetime.datetime.now() - datetime.timedelta(minutes=15)
sys.stdout.flush()
app.exec_()
ma.array(a, mask=np.isnan(a))
[(j - i) for i, j in zip(t[:-1], t[1:])]
writer.writerow(row)
all(b >= a for a, b in zip(the_list, it))
zip(*A)
plt.show()
plt.show()
[word for word in l if word.isalnum()]
c = [x for x in b if x in _auxset]
[list(x[1]) for x in itertools.groupby(data, lambda x: x == 0) if not x[0]]
list(itertools.chain(*[([k] * v) for k, v in list(d.items())]))
self.save()
print(time.mktime(d.timetuple()))
np.roll(a, 1)
pprint(sys.path)
A[i, j]
print(doc.toprettyxml())
app.logger.setLevel(logging.DEBUG)
random.shuffle(lst)
data_slices.sort(key=lambda s: s[-1].start)
reactor.run()
sorted(mydict, key=lambda key: mydict[key])
plt.show()
results = list(map(int, results))
df.where((df > df.shift(1)).values & DataFrame(df.D == 1).values)
user.put()
cv.WaitKey(0)
dfrm.drop(dfrm.index[len(dfrm) - 1])
df.stack().reset_index(level=[0, 1], drop=True)
img.show()
t1start <= t2start <= t1end or t2start <= t1start <= t2end
df.iloc[indexers]
plt.legend(loc=4)
Foo.foo()
json_string = json.dumps(list_name, default=obj_dict)
[x for b in a for x in b]
unittest.main()
plt.show()
br.select_form(nr=1)
ax.xaxis.set_visible(False)
plt.show()
{key: val for key, val in parent_dict.items() if 2 < key < 4}
cursor = db.cursor(dictionary=True)
numpy.in1d(a, b)
plt.show()
sorted(mylist, key=cmp_to_key(locale.strcoll))
np.array([(arr + i) for i in np.arange(-0.2, 0.25, 0.1)]).T.ravel()
tf.constant(1) + tf.constant(2)
min([t for t in l if not math.isnan(t[1])], key=itemgetter(1))
sorted(l1 + l2)
zeros = [([0] * M) for _ in range(N)]
driver.switch_to_alert().accept()
sys.exit()
dict([k_v for k_v in list(d1.items()) if k_v[0] in d2 and d2[k_v[0]] == k_v[1]])
random.sample(list(range(1, 10)), 5)
c = np.unique(a, return_inverse=1)[1]
Series([str(x) for x in htmldata])
print([(lst[i], lst[i + 1]) for i in range(0, len(lst), 2)])
session.commit()
ftp.quit()
a.transpose(2, 1, 0)
lst.append(os.path.splitext(x)[0])
re.split(seperator, f.read())
myTextCtrl.SetFont(font1)
a == a[(0), :]
plt.show()
zip(l, l[1:])
print([(s, s in st1) for s in re.findall(pat, st2)])
df.idxmax(axis=1)
plt.show()
[x for y in l for x in y]
list(range(x1, x2 + 1))
root.mainloop()
method()
writer.writerow([])
pd.concat([df_a, df_b], axis=1)
time.sleep(0.1)
{tuple(key): value for key, value in zip(bins, count)}
p.start()
map(int, bin(6)[2:])
[10, 9, 8, 4, 7]
calendar.timegm(time.gmtime())
conn.commit()
{key: list(set.difference(set(a[key]), b.get(key, []))) for key in a}
print(file_contents)
print(list(chain.from_iterable((x, x + 1) for x in l)))
nx.draw_spring(G)
df.index
[[[x, y] for x in list1] for y in list2]
ssh.connect(IP[0], username=user[0], pkey=mykey)
df[(df.iloc[:, -12:] == -1).all(axis=1)]
a.__init__(*args, **kwargs)
a[~np.isnan(a).any(1)]
plt.show()
list(StreetCat._meta.parents.keys())[-1]
print(f.read())
sorted(a) == sorted(b)
set(data1) & set(data2)
pl.show()
ax.get_xticklines()[i].set_visible(False)
time.sleep(0.5)
df.dot(weight)
chr(128512)
array[(i[0]), (i[1]), (i[2]), ..., (i[n - 1])]
plt.show()
[6, 7, 8, 9]
len([x for x in frequencies if x > 0])
x[:, 1::2]
df[0].apply(lambda x: (0, 0) if x is np.nan else x)
plt.show()
app.run()
inlinkDict[docid] = adoc[1:] if adoc[1:] else 0
C = np.hstack((A, B[:, 1:]))
sys.exit(1)
print(date(today.year + 1, today.month, today.day))
sum(Decimal(n) * Decimal(10) ** Decimal(i) for i, n in zip(count(0, -1), a))
plt.show()
MyClass.__dict__
df = pd.DataFrame([df.sum()] * len(df))
pd.crosstab(df.saleid, df.upc)
plt.show()
print(data.reshape(-1, 2).mean(axis=1))
max(n for n in range(1000) if str(n) == str(n)[::-1] and is_prime(n))
np.maximum.accumulate(Q[:, ::-1], axis=1)[:, ::-1]
clf.fit(X_train, y_train)
np.random.seed(1)
main()
datetime.time()
test.f(0)
df.stack().between(2, 10, inclusive=False).unstack()
y = [j for i in x for j in i]
hex(x)[2:]
im = Image.open(image_file)
session.delete(instance)
result.append(b[index])
server.starttls()
np.concatenate(counts_array).reshape(len(counts_array), -1)
plt.show()
name = sys.argv[1:]
plt.show()
s.groupby(level=0).apply(list)
df.convert_objects(convert_numeric=True)
pobj.stdin.flush()
plt.show()
plt.show()
foo()
multiprocessing.Process.__init__(self)
[sum(x) for x in zip(*lists_of_lists)]
pd.concat([pd.Series(initial_value), cum_growth]).reset_index(drop=True)
np.concatenate(input_list).ravel()
a[0]
app.run()
mp.Process(target=foo, args=(x,)).start()
sys.stdout.write(line)
df.drop(df.columns[i], axis=1)
plt.show()
ax.xaxis.set_major_locator(locator)
A.ravel()[np.in1d(A, B)] = 0
my_list.sort(key=my_key)
cv2.waitKey(0)
os.path.expanduser(path)
time.sleep(1)
plt.show()
df.ix[:5, :10]
a.ravel()
ax.set_xticklabels(nonRepetitive_x)
deletepkt[TCP].chksum
[x for i, x in enumerate(numbers) if i not in indices]
A[0][0:4]
conn.rollback()
a[[0, 1], [1, 2], [2, 2]]
set.intersection(*map(set, d))
df.columns.droplevel(1)
[2, 6, 8, 7, 9, 6, 5, 4, 2]
[[]] * 10
time.sleep(0.1)
print(r.dtype)
ax.axes.get_xaxis().set_visible(False)
str.isalpha()
sys.exit(app.exec_())
{i: functools.reduce(dict.__getitem__, keys, d[i]) for i in d}
os.chown(path, uid, gid)
set(map(tuple, listB)) <= set(map(tuple, listA))
(x for x in List)
print(sum(num for num in numbers if num % 2 == 1))
dict(zip(i, i))
np.array([a, a]).shape
[[], [], []]
instance.__class__.__name__
json.dump(data, outfile)
time.sleep(60)
print(max(group, key=lambda k: len(list(k[1]))))
f.close()
some_func(*params)
numpy.clip(x, 0, 255)
x.reshape(2, 2, 5)
lines.sort(key=itemgetter(2), reverse=True)
sorted({x for v in content.values() for x in v})
set(tuple(i) for i in l)
set([1, 2])
self.ham = dict()
unravel_index(a.argmax(), a.shape)
[e for i, e in enumerate(main_list) if i in indexes]
cv2.rectangle(image, (x, y), (x + w, y + h), (255, 255, 0), 5)
self.ui.closeButton.clicked.connect(self.closeIt)
sum(int(x) for x in digit if x.isdigit())
app.run()
r = requests.post(url, files=files, data=data, headers=headers)
plt.plot(x, y)
root.mainloop()
[k for k, v in colour.items() if v == min_val]
plt.show()
[y for y in a if y not in b]
np.fft.fft(xfiltered)
root.mainloop()
matplotlib.pyplot.plot(raw_audio_data)
root.grid_rowconfigure(1, weight=1)
palette.append((0, 0, 0))
today + datetime.timedelta(days=1)
[peaks([x, y]) for x, y in zip(xscat, yscat)]
print(json.dumps(dict(table_data)))
sorted(li1, key=k)
list(range(0, 6, 2))
admin.site.register(Foo, FooAdmin)
plt.axvline(x=2.20589566)
df.column_A.apply(to_binary)
df.max()
plt.show()
yacc.yacc(debug=0, write_tables=0)
nx.draw_networkx_edges(G, pos, edgelist=black_edges, arrows=False)
sys.exit()
good_data = [data[(n), :][flag == 1].tolist() for n in range(data.shape[0])]
img[:, :, (0)] = 0
self.SetSizer(sizer)
sum(x > 0 for x in frequencies)
json.dumps(geodata)
print(A.reshape(-1, k)[np.arange(n * m), B.ravel()])
np.in1d(A, B).any()
plt.show()
y = set(x.flatten())
date.today() > self.date
pygame.init()
plt.show()
canvas.create_image(0, 0, anchor=NW, image=displayPlantImage)
root.mainloop()
[(key, len(list(it))) for key, it in itertools.groupby(list_one)]
df.isnull()
df1.apply(lambda s: df2.corrwith(s))
self.response.out.write(html)
plt.plot(list(range(10)))
[int(x) for line in data for x in line.split()]
ax.plot(x, y, color=uniqueish_color())
QtGui.QMainWindow.__init__(self, parent)
print(etree.tostring(root, pretty_print=True))
sdb.close()
np.mgrid[[slice(row[0], row[1], n * 1j) for row, n in zip(bounds, n_bins)]]
results = [r for k in keywords for r in re.findall(k, message.lower())]
getattr(this_prize, choice)
root.mainloop()
time.sleep(0.2)
int(bin(n)[:1:-1], 2)
plt.show()
requests.post(url, data=body, headers=headers)
print([hex(x) for x in numbers])
zip(string, string[1:], string[2:])
win.show_all()
sum(Decimal(i) for i in a)
np.split(x.reshape(x.shape[0], -1), 9, axis=1)
conn.close()
process.terminate()
f.close()
xxxxx.yyyyy.zzzzz
d = os.path.dirname(os.getcwd())
list2 == sorted(list2, key=lambda c: list1.index(c))
dict((y, x) for x, y in t)
myothermodule.py
print(repr(s))
plt.show()
print(list(range(n, (m + 1) * n, n)))
type(theobject).__name__ in dir(__builtins__)
root.mainloop()
func()
[[cell for cell in row] for row in X]
s[::-1]
text_file.close()
print([[x for x in a if len(x) == i] for i in set(len(k) for k in a)])
y = x.astype(int)
plt.show()
root.mainloop()
signal.signal(signal.SIGINT, quit_gracefully)
self.request.user
Mainscreen()
ax.xaxis.set_major_formatter(myFmt)
ax.set_yticklabels([])
sys.stdout.flush()
self.assertEqual(my_patch_method, patch_my_lib().target_method.__func__)
logging.getLogger().setLevel(logging.INFO)
pgdb.paramstyle
time.sleep(5)
[L[i] for i in [2, 1, 0]]
fig.tight_layout()
plt.show()
plt.show()
self.f.close()
x[1::2, 1::2]
arr[arr > 0].min()
etree.tostring(div)
painter.restore()
zlib.decompress(data)
plt.show()
array([[0], [7], [1], [0], [4], [0], [0], [0], [0], [1], [0], [0], [0]])
out = mat[0] * (len(ixs) - len(nzidx)) + mat[ixs[nzidx]].sum(axis=0)
[str[start:start + num] for start in range(0, len(str), num)]
np.asarray(V).min(0)
[[0, 0], [1, 1]]
ax2.set_xlim([0, 5])
plt.show()
x = dict(zip(list(range(0, 10)), itertools.repeat(0)))
list(item[1] for item in pkgutil.iter_modules())
datetime.datetime.date(2011, 1, 1)
i, = np.where(a == value)
cv2.destroyAllWindows()
b = numpy.append(a, numpy.zeros([len(a), 1]), 1)
A[np.random.choice(A.shape[0], num_rows_2_sample)]
fig, ax = plt.subplots(figsize=(6, 1))
pil_im.show()
mlab.show()
ax.set_yticks([])
pd.concat([s1, s2], axis=1)
file.write(str(m))
sys.stdout.flush()
Activity.objects.filter(list__topic=my_topic)
app.exec_()
np.logical_or.reduce((x, y, z))
writer.writerow([item])
print(rawstr(test7))
{{settings.MY_SETTING_NAME}}
[s.strip() for s in data_string.splitlines()]
fo.write(fp.read())
sess.run(assign_op)
ts.reindex(pd.date_range(min(date_index), max(date_index)))
print(alphs[:i] + alphs[i::-1])
plt.show()
[dict(zip(d, v)) for v in product(*list(d.values()))]
self.text.pack()
a = numpy.frombuffer(buffer, float)
mylist = list(set(mylist))
print(sorted(list(a.items()), key=lambda t: get_key(t[0])))
np.in1d(a, b).reshape(a.shape).any(axis=1)
self.assertEqual(my_patch_method, patch_my_lib().target_method.__func__)
deletemy_dict[k]
plt.show()
threading.Thread(target=play1).start()
x = np.random.rand(5, 1)
plt.show()
os.path.sep
csv_writer.writerows(cursor)
app.run()
df2.reset_index(drop=True)
print(lxml.etree.tostring(order, pretty_print=True))
globals()
print(max(result, key=lambda a: a[1]))
all_data.append(data)
matplotlib.pylab.show()
input_file.close()
self.setWindowFlags(PyQt4.QtCore.Qt.WindowStaysOnTopHint)
deleteL[index]
print(f.read())
d = dict((v[0], v[1:]) for v in arr)
print(lxml.etree.tostring(tree))
pygame.init()
list(d.values())
[item for item in lis if item[1] not in seen and not seen.add(item[1])]
any(([1, 2] == x).all() for x in a)
[(x + b[i]) for i, x in enumerate(a)]
[(tuple[a], tuple[a + 1]) for a in range(0, len(tuple), 2)]
np.array(a).reshape(-1, 100)[::2].ravel()
df.index.values
zip(*([iter(l)] * 2))
os.kill(os.getppid(), signal.SIGHUP)
len(sum4) - np.count_nonzero(sum4)
gtk.gdk.pixbuf_new_from_array(arr, gtk.gdk.COLORSPACE_RGB, 8)
print(etree.tostring(e, pretty_print=True))
print(equations((x, y)))
ham.__class__.__name__
os.kill(12765, 0)
calendar.timegm(dt.utctimetuple())
sum(int(i) for i in data)
pdb.set_trace()
plt.show()
results = [int(i) for i in results]
func(*args, **kwargs)
[m.group(1) for m in (re.search(regex, l) for l in lines) if m]
print(sum(sum(map(int, r.findall(line))) for line in data))
[x[1] for x in L]
plt.tight_layout()
df.genres.apply(pd.Series).stack().drop_duplicates().tolist()
nms.dropna(thresh=2)
admin.site.register(Person, PersonAdmin)
ax1.set_xticklabels([])
result = copy.deepcopy(source_dict)
soup = BeautifulSoup.BeautifulSoup(urllib.request.urlopen(url).read())
[([0.0] * 10) for _ in range(10)]
a[1, 1]
eliminated.append(x)
print(etree.tostring(x, pretty_print=True))
emp.delete()
[myDictionary.get(key) for key in keys]
urllib.parse.unquote(url)
max((t for t in yourlist if t[2] >= 100), key=itemgetter(1))
urllib.parse.unquote(urllib.parse.unquote(s))
app.exec_()
list(sys.modules.keys())
code.interact()
range(N, -1, -1)
ws.cell(row=i + 2, column=1).value = statN
plt.show()
a = a.reshape((a.shape[0], -1, n))
procs.append(multiprocessing.Process(target=worker))
setattr(current_module, new_name, func)
print(f.read())
groupby(a, [0, 1])
list(metadata.tables.keys())
webbrowser.open_new_tab(url)
plt.show()
s.reset_index(drop=True, inplace=True)
reactor.run()
dict((item[0], (item[1], z[item[0]])) for item in l)
process.terminate()
soup.body.insert(len(soup.body.contents), yourelement)
json.loads(_)
x.do_something()
total = sum([int(i) for i in cost])
writer.writerows(all)
random.shuffle(lst)
n ^= (1 << upper) - 1 & ~((1 << lower) - 1)
my_series.sort()
time.sleep(1)
deletemyList[i]
session.commit()
max(x, key=sum)
[(x ** 2) for x in range(10)]
sum(a * b for a, b in zip(it, it))
example2()
time.sleep(1)
self.assertEqual(4, 2 + 2)
user.save()
window.after(1, lambda : window.focus_force())
time.sleep(1)
[list(t) for t in set(tuple(element) for element in xx)]
print(et.tostring(tree, pretty_print=True, xml_declaration=True))
root.mainloop()
sys.stdout.flush()
np.cos(-1.5)
time.time() * 1000
ctypes.cast(s, ctypes.c_void_p).value
df.ix[pd.to_datetime(df.Date).order().index]
sorted(l, key=lambda x: (x[:-1], x[-1].isdigit()))
result = array[:, (idx)]
print(os.path.join(root, name))
sys.exit(0)
sum(map(int, str(n)))
q.T.reshape(-1, k, n).swapaxes(1, 2).reshape(-1, k)
sys.exit(0)
round(math.degrees(math.asin(0.5)), 2)
min(enumerate(a), key=itemgetter(1))[0]
print(list(sampleDict.values())[0].keys()[0])
initgstreamer()
time.sleep(4)
test_df.where(~(test_df < 4))
l = list(map(lambda x: 2 * x, l))
plt.show()
im.show()
app.run()
myShelvedDict.update(myDict)
{v: (v ** 2) for v in l}
im = Image.open(tempimg)
plt.show()
app.run()
[[try_int(x) for x in lst] for lst in list_of_lists]
subprocess.Popen(executable, creationflags=DETACHED_PROCESS, close_fds=True)
app.run()
np.array(my_list, dtype=np.float)
{{request.session.foo}}
driver.quit()
plt.show()
n.index(min(n))
t.start()
x = [(0) for i in range(10)]
file_handle.close()
a.__setitem__(slice(0, 1), [1])
[data[i:i + n] for i in range(0, len(data), n)]
server.serve_forever()
a.take(np.arange(start, end), axis=axis)
plt.xticks(ticks, labels)
sum(map(float, s.split()))
print(ET.tostring(newdom, pretty_print=True))
array([0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0])
f.set_size_inches(11.69, 8.27)
df._get_numeric_data()
circle1.set_visible(False)
ast.literal_eval(a)
logging.getLogger().handlers[0].setLevel(logging.DEBUG)
pyplot.draw()
df.iloc[:, (your_col_index)]
plt.show()
items = [some(a.split(), d, n) for a, d, n in (list(m.values()) for m in dl)]
isinstance(now, datetime.datetime)
ax.set_xticklabels([])
server.serve_forever()
np.repeat(np.arange(x), y)
df1.ix[0, 1]
plt.show()
a_lower = {k.lower(): v for k, v in list(a.items())}
your_list = map(int, your_string)
plt.show()
[list(g) for k, g in itertools.groupby(sorted(iterable))]
sys.stdout.flush()
cv2.findContours(img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
User.objects.filter(active=True)
[key for key, val in list(dct.items()) if val == True]
data = np.concatenate((im, indices), axis=-1)
mimetypes.init()
cv2.destroyAllWindows()
random.randrange(1, 10)
numpy.histogram(a, bins=(25, 100))
my_list = my_list[:8] + new_array
dictionary[key] = value
app.run()
print(list(range(0, (m + 1) * n, n))[1:])
df.columns = [strip_non_ascii(x) for x in df.columns]
L.grid(row=6, column=0)
cv2.waitKey(0)
sorted(A, key=operator.itemgetter(2, 0, 1))
df = pd.concat([df, s1, s2], axis=1).reset_index(drop=True)
[[int(j) for j in i] for i in a]
[0, 0, 0, 0, 0, 0, 0, 0, 0],
db.commit()
madata.mean(axis=1)
a = np.array([[1, 2], [10, 20], [100, 200]])
set(list1).intersection(list2)
np.bincount(accmap, weights=a)
isinstance(d[obj], list)
time.sleep(1)
self.canvas.pack(fill=BOTH, expand=YES)
plt.show()
plt.scatter(x, y)
verts = [(0) for x in range(1000)]
[(1) for _ in range(6)]
np.linalg.norm(x)
connection.connect()
time.sleep(100)
[(1, 2, 2), (5,), (1, 1, 1, 1, 1), (1, 1, 1, 2)]
sorted(Author.objects.all(), key=lambda a: a.full_name)
jsonify(eqtls=[e.serialize() for e in my_list_of_eqtls])
sum(len(i) for i in x if len(i) > 1)
[[k for k in x if x[k] != y[k]] for x, y in pairs if x != y]
admin.site.register(Product, ProductAdmin)
df.iloc[[2, 4]]
next(s for s in list_of_string if s)
Gtk.main()
[x for x in mylist if x in pattern]
fcntl.flock(fd, fcntl.LOCK_EX)
plt.show()
[x[:] for x in [[foo] * 10] * 10]
root = tk.Tk()
arr = arr[:, :, 0::2]
df[(df.A == 0) & (df.B == 2) & (df.C == 6) & (df.D == 0)]
[set(i) for i in OrderedDict.fromkeys(frozenset(item) for item in L)]
MyModel2.mymodel1.through.objects.all()
_.sum()
df.groupby(df.index.year)
[i for i in range(4) if i <= 1 or i >= 4]
plt.show()
time.sleep(10)
df.mean(axis=1)
sorted(a, key=lambda x: aux.index(x[0]))
np.where(a == a.max())
hasattr(Dynamo, key) and callable(getattr(Dynamo, key))
[math.log10(i) for i in x]
do_something()
np.where(condition(zeta), func1(zeta), func2(zeta))
numpy.array(list(result.items()), dtype)
a.mean(axis=-1).mean(axis=-1)
pdb.set_trace()
sys.modules
plt.show()
np.argwhere(arr)
im = Image.open(BytesIO(base64.b64decode(data)))
print(json.dumps(json_output, indent=4))
print(a.pop(0))
data = np.atleast_2d(np.loadtxt(filename))
Employee.objects.active()
[(not x) for x in some_list]
print(hex(int(string, base=16)))
df.dropna(thresh=len(df) - 7)
session.query(Location, func.count(Work.id)).outerjoin(Work).group_by(Location)
cursor.execute(sql, args)
plt.show()
plt.hist(x, bins=n, range=(a, b))
plt.show()
plt.show()
[(x + 1 if x >= 45 else x + 5) for x in l]
reactor.run()
list(chain(*(i if isinstance(i, tuple) else (i,) for i in l)))
print(chr(1081))
print(cursor.fetchall())
crypthash.hexdigest()
[func(x, y) for x, y in zip(xs, ys)]
pygame.mixer.music.play()
[filterList(numbers, ranges[i], ranges[i + 1]) for i in range(len(ranges) - 1)]
f.close()
int(value or 0)
MyModel.objects.filter(name__exact=models.F(title)).exists()
{{my_num | intcomma}}
map(set, list(d.values()))
list(df.index.values)
plt.show()
plt.draw()
[k for k, v in numbers.items() if v == max(numbers.values())]
f.write(os.linesep.join(data))
dictionary[new_key] = dictionary.pop(old_key)
root.mainloop()
[i for i, (m, n) in enumerate(zip(bool_array[:-1], bool_array[1:])) if m != n]
fh.close()
sys.stdout.flush()
plt.figure()
print((key, value))
sys.modules
lst[0] in lst[1:]
the_list.sort(key=len, reverse=True)
filtered_dict = {k: v for k, v in d.items() if filter_string in k}
plt.show()
str(chr(97))
myList.append(i)
globals()[name] = 10
Model.__table__.create(session.bind)
time.sleep(1)
df.index = list(range(len(df)))
conn.commit()
print(np.sort(np.partition(x, -10)[-10:]))
[list(group) for k, group in groupby(l, bool) if k]
good_data = [data[(n), :][flag == 1] for n in range(data.shape[0])]
input()
np.cumsum(a)
datetime.datetime.now() + datetime.timedelta(days=1)
[l for l in a if l in b]
df1.loc[(df1 > s).any(axis=1) == True].index.tolist()
list([a for a in x if a != 2])
plt.show()
ar.reshape(ar.shape[0], -1)
[random.uniform(lbound, rbound) for i in range(n)]
sys.path.append(root)
list(double([1, 2]))
any(key.startswith(mystr) for key in mydict)
Py_Finalize()
{{form.as_table}}
plt.show()
webdriver.Firefox(firefox_profile=fp)
[1, 0, 1, 1]
server.serve_forever()
[int(digit) for digit in bin(n)[2:]]
a = a + [0] * (maxLen - len(a))
list(d.keys())
signal.signal(signal.SIGCHLD, signal.SIG_IGN)
plt.show()
[True] * 5000
d.sort(key=itemgetter(1), reverse=True)
sorted(items, key=cmp_to_key(comparer))
self.setupUi(self)
br.select_form(nr=0)
np.asarray(map(func, arr))
x, y = -y, x
print((cities[0][1], cities[1][1]))
plt.show()
a, b, c
f(*((1, 4),))
__init__.py
Achievement.objects.get(name=str(b))
np.ma.array(np.tile(arr, (cond.shape[0], 1)), mask=~cond).argmax(axis=1)
plt.imshow(lena, cmap=plt.cm.gray)
server.serve_forever()
array2[:, :, :, :] = array1.copy()
gtk.main()
df.T
[item for item in my_list if item not in to_be_removed]
df.loc[(df != 0).any(axis=1)]
f.close()
requests.get(url, auth=auth)
browser.quit()
cherrypy.request.params.get(key_name)
((a == b) | numpy.isnan(a) & numpy.isnan(b)).all()
plt.show()
np.random.permutation(arr)
conPG.commit()
[item for item in my_list if 1 <= item <= 5]
print([next(c) for _ in range(10)])
ax.set_xlim([0, len(df)])
app.MainLoop()
plt.show()
ax.yaxis.set_visible(False)
not set(list1).isdisjoint(list2)
time.sleep(60)
shutil.copy(filename, dest_dir)
_(a + b * c)
f.close()
csv_output.writerows(zip(*rows))
my_list.sort(key=lambda x: order.index(x[0]))
np.sin(-1.5)
__init__.py
list(string.ascii_lowercase)
simulation.someloop()
conn.close()
arr[arr < 0] = 0
plt.show()
sys.stderr.write(str(e))
session.query(RssFeed).all()
server.serve_forever()
buffer1[:] = buffer2
A = np.array([C[:, (B == i)].sum(axis=1) for i in range(M)])
plt.show()
math.hypot(p2[0] - p1[0], p2[1] - p1[1])
plt.show()
dic = {x: i for i, x in enumerate(al, 1)}
f.close()
np.where(a == a.max(axis=1, keepdims=True), a, 0)
mlab.show()
self.est.fit(X, y)
os.makedirs(dirname)
self.Bind(wx.EVT_LEFT_DOWN, self._onMouseDown)
tar.close()
plt.show()
pygame.display.update()
__init__.py
tuple(l)
ax.scatter(x, y, z, depthshade=0)
plt.show()
unittest.main()
timediff.total_seconds()
[abs(a - b) for a, b in zip(l, l[1:] + l[:-1])]
self.d.setdefault(index, []).append(value)
plt.show()
df.mean().sort_values()
pygame.display.update()
[-2, -1, 0, 1, 2]
sorted(li, key=operator.itemgetter(1))
random.choice(string.ascii_lowercase)
window.mainloop()
plt.close()
[(k, list(g)) for k, g in groups]
app.exec_()
sum(my_list)
{{model.datetime | time}}
tuple(map(tuple, arr))
plt.show()
list(itertools.combinations(list(range(6)), 2))
plt.show()
s.sort(key=operator.itemgetter(1, 2))
roundrobin(my_list, my_list)
root.mainloop()
sys.exit()
today = date.today()
json.dumps(result)
pyplot.close()
plt.show()
br.submit()
log.start()
list(map(len, s.split()))
print(item.strip())
plt.show()
sys.stdout = sys.stdout.detach()
[(items[:i] + items[i + 1:]) for i in range(len(items))]
np.arange(a.shape[0])[~np.in1d(a, b)].tolist()
df.apply(lambda x: x.value_counts()).T.stack()
app.run()
np.argwhere(M == 0)
out_file.close()
x = dict((i, set()) for i in range(10))
reactor.run()
s = s[0].lower() + s[1:]
picturetags.py
map(list, df.values)
list(set(list1 + list2))
plt.step(x, y)
C = np.dot(A, B)[:, :, (0), :]
sorted(iter(adict.items()), key=itemgetter(1), reverse=True)
func(*args, **kwargs)
driver.close()
(df == 0).sum(axis=1)
s.isnull().sum()
[item for item in my_list if any(x in item for x in bad)]
output.append([items[0], int(items[1]), int(items[2])])
ax.annotate(str(j), xy=(i, j + 0.5))
word in wordList[:4]
pprint.pprint(filtered)
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
forms.ModelForm.__init__(self, *args, **kwargs)
es.refresh()
conn.rollback()
np.insert(a, 1, np.array((1, 1)), 1)
df.apply(np.prod, axis=1)
p.pattern
df.T.drop_duplicates().T
self.thread.start()
p.stdout.close()
self.figure.canvas.draw()
[key for key, group in groupby(li) if all(i == 0 for i, j in enumerate(group))]
matrix.append([0] * columns)
a[:] = []
os.path.dirname(sys.argv[0])
ax.set_ylim([-0.5, 0.5])
print(os.getcwd())
transaction.commit()
lst.append(z)
a[0:1] = [[5]]
sorted(counter.items())
[0, 0, 0, 0, 1, 0, 0, 0, 0],
df_with_x7.show()
datetime.timestamp()
a[2:10] = []
driver.quit()
map(str.upper, letters)
plt.show()
pkg_resources.get_distribution(name).activate()
sum(map(lambda x, y: bool(x - y), [1, 2], [1]))
zip(t[::2], t[1::2])
time.sleep(1)
parts = [s[indices[i]:indices[i + 1]] for i in range(len(indices) - 1)]
[4, 5, 5, 6, 6, 6]
list(chain.from_iterable((i, i ** 2) for i in range(1, 6)))
{{add(a, b)}}
time.sleep(1)
a.sort(axis=1)
plt.show()
f.close()
f.close()
hash(frozenset(iter(self.__dict__.items())))
len(a[0])
plt.show()
cv2.bitwise_and(gray, gray, mask=mask)
fig, ax = plt.subplots()
plt.show()
np.hstack((a, b, c)).ravel()
plt.show()
lowest_dirs.append(os.path.split(root)[-1])
print(soup.get_text().strip())
ax.set_xlim(-5, 5)
time.sleep(1)
data = OrderedDict(sorted(list(data.items()), key=lambda x: x[1][0]))
time.sleep(1)
db.close()
min(max_val, max(min_val, val))
{key_for_value(value): value for value in values}
tuple(list(x[0]) + [x[1]])
np.take(A, np.arange(ncols) % A.shape[1], axis=1)
my_list2, my_list1 = zip(*my_list)
Gtk.main()
all(key in dict_obj for key in properties_to_check_for)
Clock.schedule_once(partial(self.update, message), 0)
random.uniform(1.5, 1.9)
datetime.timedelta(seconds=10) + datetime.timedelta(hours=5)
np.equal.reduce([True, 1])
[[x, y] for x in list1 for y in list2]
[x for x in lelist if lestring.count(x)]
termios.tcsetattr(fd, termios.TCSAFLUSH, old_settings)
L = [bytes_obj[i:i + 1] for i in range(len(bytes_obj))]
a.transpose(0, 2, 1).ravel()
pickle.loads(pickle.dumps(PickalableC()))
random.shuffle(thelist)
print(a if b else 0)
self.appExeCB.addItems(list(self.items.keys()))
plt.xticks(xvalues, xlabels)
[(x * 0.1) for x in range(0, 10)]
np.argwhere(np.all(e - array([1, 2]) == 0, axis=2))
help(my_list)
[int_or_float(el) for el in lst]
shutil.copy2(file, dest_dir)
self.Center()
print(sys.argv)
plt.show()
cv2.imwrite(name, imagem)
toolz.unique(obj_list, key=lambda x: x.my_attr)
operator.itemgetter(1)(row)
a[np.argsort(ma[:, (1)])]
my_array = numpy.array(my_list, dtype=numpy.float64)
app.run(port=port, debug=False)
x[:] = [value for value in x if len(value) == 2]
os.startfile(filename)
plt.show()
sys.argv[2]
not any(dict.values())
[(item, value) for item, value in config.items(section)]
np.hstack(a.flat)
my_list.sort(key=operator.itemgetter(1))
globals()
self.thread.start()
app.run()
json.load(request.body)
{c: s.count(c) for c in chars}
tk.mainloop()
pdb.set_trace()
B_p.to_csv(sys.stdout, index=False)
{str(k): convert_value(v) for k, v in list(d.items())}
QtCore.Qt.ItemIsEnabled
data = [map(int, line.split()) for line in f]
urllib.parse.urlencode(f)
d = dict(zip([o.name for o in object_list], object_list))
writer.writerows(lines)
keys = [i for i, v in scores.items() if v == max_value]
[i[0] for i in x]
plt.show()
session.commit()
map(lambda frame: frame.query(expr), [df, df2])
prod(list(range(1, 5)))
keys.update(list(d.keys()))
(df != 0).dot(df.columns)
print(object.__repr__())
thread.start()
self.x += STEP
plt.show()
plt.show()
int(b, 2)
f = figure(figsize=(5, 1))
ssh.close()
fp.close()
list({x.tag: x for x in myList}.values())
p.delete()
all(i.count(1) == n for i in l)
df.reset_index()
result = np.arange(20, dtype=np.float).reshape((2, 10))
datetime.datetime.fromtimestamp(0) + datetime.timedelta(seconds=2147570047)
pd.crosstab(df.A > 0, df.B > 0)
self.get()
plt.show()
app.exec_()
ContactForm.get_reason_display()
len(x) >= 4
my_list = [json.loads(line) for line in f]
session.query(func.count(User.id)).scalar()
l.append(elt2)
all(v == 0 for v in values)
plt.show()
result.wait()
ssh.close()
zip(*([iter(L)] * 2))
img = Image.open(file)
df2.show()
(dict(zip(dicts, x)) for x in itertools.product(*list(dicts.values())))
[x for x in strings if x]
sum(v) == sum(v + [n])
df.eq(df.iloc[:, (0)], axis=0).all(1)
list(d.values())
module1.Relay()
print(arg, getattr(args, arg))
[word for word in words if not word.isdigit()]
plt.show()
data2 = sorted(data, key=operator.itemgetter(1))
plt.show()
plt.show()
ax.set_xticklabels(labels)
print(etree.tostring(root))
df = pd.DataFrame(data[1:], columns=data[0])
im2.putdata(list_of_pixels)
np.sqrt(s.multiply(s).sum(1))
np.tile(data, 5)
[0, 0, 1, 1, 1, 1, 1, 0, 0],
plt.show()
w.writerow(my_dict)
pdb.set_trace()
QtGui.QMainWindow.__init__(self, parent)
print(output.stdout.read())
show()
print(tuple(itertools.chain.from_iterable(product)))
l.sort(key=key)
df.groupby([df.a.apply(tuple)])
c.save()
plt.show()
d = dict(zip((o.name for o in object_list), object_list))
plt.show()
np.repeat(data, 5)
pd.concat([df[col].apply(pd.Series) for col in cols], axis=1, keys=cols)
pprint.pprint(a, width=1)
sum((Counter(d) for d in list(data.values())), Counter())
test.__kwdefaults__
print(sum(1 for x in arr if x is False))
cherrypy.engine.start()
plt.show()
db.session.add(product_obj)
df.iloc[-6:-1, (2)]
extmodule.dontoverride()
sum([[False, False, True], [True, False, True]])
np.linalg.lstsq(A.T, y)
[0, 0, 0, 1, 1, 1, 0, 0, 0],
plt.show()
random.shuffle(temp)
d2 = dict((k, f(v)) for k, v in list(d.items()))
np.putmask(elevation, elevation > 0, np.nan)
plt.draw()
sorted(vec, key=itemgetter(1), reverse=True)[:5]
gtk.main()
func(*args, **kwargs)
[name for name, age in list(mydict.items()) if age == search_age]
somelist.sort(key=predefined_list.index)
df = df.apply(myfillna)
signal.signal(signal.SIGINT, signal.SIG_DFL)
pyplot.show()
func.__code__.co_code
cursor.execute(sql)
self.canvas.draw()
deletemyList[-2:], myList[:2]
print(np.allclose(sola, solb))
zip(*l)
df.iloc[:5, :5]
set(a) & set(b) & set(c)
datetime.datetime(2010, 9, 29, 11, 15)
gevent.monkey.patch_all(httplib=True)
plt.show()
cursor.execute(query, l)
self.actionthread.start()
instance.instance_method()
dict((x, i) for i, x in enumerate(t))
pygame.init()
app.register_blueprint(someappmod)
sum(int(x) for x in s if x.isdigit())
sys.stdout.flush()
[x for y in collection for x in y]
frame.grid(row=0, column=0)
os.path.dirname(sys.argv[0])
outfile.close()
[(i, [j for j in L if j != i]) for i in L]
remote_file.close()
np.sum(my_list)
[int(i) for i in str(bin(x))[2:]]
list(itertools.chain(*list(d.values())))
moo.py
d = dict((x.key, x) for x in object_list)
((x, y) for x in a for y in b)
select(L, [2, 5])
transposed_l.sort(key=lambda x: x[1], reverse=True)
nonVarargMethod(args[0], args[1], args[2])
f(*list(range(5000)))
print(line)
(dict(zip(dicts, x)) for x in product(*iter(dicts.values())))
plt.show()
shutil.copy(full_file_name, dest)
random.seed([x])
array([1.05206154, 1.96929465, 0.94590444]), 1
plt.show()
plt.show()
server.stop()
ax.yaxis.set_visible(False)
{f(k): v for k, v in d.items()}
a = [t[1] for t in enumerate(a[1:]) if t[1][1] > a[t[0] - 1][1]]
doctest.testmod()
[[2, 4, 6], [8, 10, 12], [6, 8, 12]]
session.rollback()
[i for i, d in enumerate(lod) if 2 in d]
OrderedDict(sorted(list(d.items()), key=lambda t: t[0]))
file.write(str(formatted))
plt.show()
DataFrame(values, columns=columns)
--system - site - packages
os.chdir(path)
ax.plot_surface(X, Y, Z, facecolors=cm.Oranges(V))
sorted(qs, key=lambda x: x.id == id)
self.assertEqual(5, self.testme)
float(math.factorial(170))
pdb.set_trace()
[item for sub_list in a[1:] for item in sub_list].count(1)
kethread.start()
json.loads(s)
df1.reset_index()
B = A[[0, 2], [0, 1], [1, 2]]
writer.writerow(row)
edges.append((m.group(1), m.group(2)))
set.intersection(*map(set, p))
print(repr(line))
sys.exit()
[main_list[x] for x in indexes]
df.apply(func, axis=1)
sys.exit()
f.newmethod()
os.remove(filename)
print(top[0][1])
{k: v for k, v in list(d.items()) if k.startswith(s)}
root.mainloop()
conn.commit()
s = sum(a * b for a, b in zip(list_1, list_2))
list(range(10, 0, -1))
l1.sort()
plt.show()
df.drop_duplicates()
db.session.commit()
main()
list(my_dataframe.columns.values)
a[:, :, ::-1, ::-1]
C = np.sum(A[:, :, :, (np.newaxis)] * B[:, (np.newaxis), :, :], axis=2)
ax1.set_xticklabels([])
b = [x[:] for x in a]
datetime.utcfromtimestamp(timestamp1)
plt.show()
self.button.clicked.connect(self.handleButton)
np.repeat(np.repeat(a, 2, axis=0), 2, axis=1)
new_list.append(f(x))
plt.show()
plt.show()
QtGui.QFrame.__init__(self)
pycurl_connect.perform()
list(g)
plt.show()
(vals == (0, 1)).all(axis=1)
np.unravel_index(np.argmax(corr_img), corr_img.shape)
element.click()
plt.show()
writer.writerow(map(quote, row))
time.sleep(0.25)
deletemy_dict[x]
Entry.objects.filter(weekdays=HasBit(WEEKDAYS.fri))
any(a_list)
ftp.set_pasv(False)
d = dict(zip(l, t))
__init__.py
{i[0]: i[1:] for i in list1}
foo(*t)
array = np.fromiter(iter(result.items()), dtype=dtype, count=len(result))
dict(my_list)
ea.Reload()
sorted(items, cmp=comparer)
plt.show()
pd.value_counts(d.values.ravel())
int(list(filter(str.isdigit, str1)))
[(x, y) for x, y in pairs if x != y]
q = Model.objects.filter(Q(field1=f1) | Q(field2=f2))
result[k].append(v)
process.terminate()
print(sys.argv[1])
plt.plot(dat0[:, (0)], dat0[:, (1)])
output = [value for value, count in list(counts.items()) if count > 1]
app.exec_()
plt.figure()
time.sleep(1)
A[0] is A[0]
singleitem = mylist.pop()
data = np.loadtxt(filename, ndmin=2)
min(timeit.repeat(lambda : dict((k, v) for d in (x, y) for k, v in list(d.items()))))
writer.writerows(data)
brr[:] = brr[::-1]
ax.set_xlim(0, 10)
list2b == sorted(list2b, key=lambda c: list1.index(c))
print(sys.argv[1].lower())
A[:, (2)]
plt.show()
ctypes.addressof(bufstr)
sys.stdout.write(RESET)
q = Queue(maxsize=0)
np.concatenate([a[a == i][:2] for i in np.unique(a)])
root.mainloop()
unittest.TextTestRunner().run(suite)
nodebox.__version__
[(x + y) for x, y in l]
urllib.parse.quote(item.url)
new_dict = dict((k, v) for k, v in list(old_dict.items()) if v in allowed_values)
ax.yaxis.tick_left()
func(that, session, *args, **kwargs)
reactor.run()
sum(letterGoodness.get(c, 0) for c in yourstring.upper())
self.button.grid(row=2, column=2, sticky=W)
cs.collections[0].get_paths()
np.any(a == 2, axis=0) & np.any(a == 5, axis=0)
f.pack_propagate(0)
n * factorial(n - 1)
{k: v for k, v in list(metadata.items()) if v}
self.axes = self.figure.add_subplot(111)
k, v = list(d.items())[0]
session.query(JT.aID).filter(not_(JT.bID.in_(ids))).all()
datetime.datetime.today().replace(hour=0, minute=0, second=0, microsecond=0)
plt.show()
arr.sum(axis=0, keepdims=True)
print((date_string, dt.date()))
[sum(l) for l in l_o_l]
np.average(list(map(float, meanNumbers.split())))
fig.canvas.draw()
result = set(d[0]).intersection(*d)
plt.show()
self.after(100, self.periodiccall)
df.fillna(0, inplace=True)
instance.__class__.__name__
plt.show()
threading.Thread.__init__(self)
A.shape
d = dict(zip(keys, values))
client.close()
np.repeat(data, data[:, (-1)], axis=0)
print(now.year, now.month, now.day, now.hour, now.minute, now.second)
plt.show()
l = [(2 * x) for x in l]
outfile.write(line)
connection.commit()
line = ser.readline()
self.setLayout(self.layout)
plt.tight_layout()
ax.set_xlim(0, 1)
len(your_list) != len(set(your_list))
ax2.set_zorder(-1)
foo = [{} for _ in range(n)]
list(s)
dict((k, [v[1] for v in itr]) for k, itr in grob)
lambda x: np.dot(A, x) - b
getattr(foo, bar)(*params, **keyword_params)
Html_file.close()
(a > 1) & (a < 5)
f(*args, **kwargs)
ax1.set_xlim(-4, 4)
list(accumu([4, 6, 12]))
plt.show()
np.multiply(a, b[:, (np.newaxis)])
app.run(debug=True)
dev.leds()
df = pd.concat(list_of_dataframes)
y = [int(val) for val in x]
plt.plot(x, y)
np.where(np.any(a == 2, axis=0) & np.any(a == 5, axis=0))
my_list = list(range(1, 1001))
sorted(L, key=operator.itemgetter(1))
threading.Timer(2, interrupt).start()
list(itertools.chain(*lst))
np.arange(new[0]) % old[0]
app.run()
driver.quit()
print(len(path) - 1)
print(b[0])
[(2, 5), (12, 17)]
print(df.loc[i].reset_index())
B = np.reshape(A, (-1, ncols))
writer.writerows(a)
df = df.drop_duplicates()
mylist.insert(0, mylist.pop(5))
f = lambda x: x * 2
f.close()
ax.plot(x, y)
plt.show()
answer.extend(map(str, list(range(int(start), int(end) + 1))))
make_adder(5)
pyplot.show()
list(filter(func, data))
plt.show()
df = pd.DataFrame(data)
{k: d1[k] for k in set(d1).intersection(l1)}
nx.topological_sort(G)
x = x.split()
sys.stdout.close()
f.close()
[(x, y) for x in L for y in L]
c = random.choice(a)
d = datetime.today() - timedelta(days=days_to_subtract)
L.sort()
time.sleep(60)
driver.quit()
plt.show()
print(ZipFile(path).namelist())
assertTrue(text in self.driver.page_source)
np.in1d(a[:, (2)], list(b))
df.loc[mask]
{k: v for k, v in list(d1.items()) if k in l1}
help(bar)
setattr(self, key, kwargs[key])
L[i:i + 2] = reversed(L[i:i + 2])
user.save()
pylab.text(max_x, max_y, str((max_x, max_y)))
deletefoo.fields[-1]
df = pd.read_csv(filename, error_bad_lines=False)
results.setdefault(i, []).append(benchmark(i))
pivoted.cumsum()
plt.show()
list(str(n) for n in range(10))
pool = mp.Pool(processes=1)
A[B == 1.0].sum()
print(s[1:])
br.set_handle_referer(True)
plt.show()
l = [dict(zip([1], [x])) for x in range(1, 100)]
cv2.destroyAllWindows()
sys.exit(app.exec_())
pkl_file.close()
list(gen_items())
any(map(lambda v: v in list2, list1))
print(some_object.__repr__())
np.where((A > 2) & (A < 8))
print(et.tostring(tree))
HttpResponse(json.dumps(data))
sys.exit(0)
app.debug = True
s.getvalue()
ax.set_yticks(ax.get_yticks()[:-1])
pool.terminate()
a, b, c = func()
[(1, 2)]
numpy.logical_not(array)
json.dumps(dict(foo=42))
print(sorted([Card(c[0], c[1]) for e in a for c in e]))
print(json.dumps(data, indent=4))
myf.close()
plt.scatter(x, y, color=next(colors))
root.mainloop()
len(s) - len(s.lstrip())
map(s.__setitem__, a, m)
plt.show()
f([1, 1, 2], [1, 1])
cls.dosomethingelse()
ax.set_ylim(ylim)
WSGIApplicationGroup % {GLOBAL}
yourmodule.py
plt.show()
unittest.main()
fig.subplots_adjust(hspace=0.5)
output.write(new_line)
a = numpy.array(b)
painter.restore()
globals()
driver.switch_to_window(window_after)
f.close()
ax2.set_rlim([0, 1])
ax.xaxis.set_major_formatter(formatter)
total = sum(int(v) for name, v in table)
plt.show()
sys.exit(0)
np.hstack(np.meshgrid(*L)).swapaxes(0, 1).reshape(ndims, -1).T
print(os.lseek(fd, 0, os.SEEK_CUR))
plt.show()
list(product([a, b, c, d], [x]))
webdriver.Firefox(firefox_profile=fp)
sum(1 for x in l if x)
plt.show()
print(chr(4))
sys.stdout.flush()
pd.concat([data, ts]).sort_index().interpolate()[ts.index]
math.sqrt(x)
lambda x, y: (x + y, x - y)
json.dump(data, fp, sort_keys=True, indent=4)
ax.xaxis.set_minor_locator(mdates.MonthLocator())
print((lbl.winfo_width(), lbl.winfo_height()))
a[np.mod(np.arange(a.size), 4) != 0]
pass
np.where(np.isclose(a, val, tol))
ax.plot(x, y)
do_stuff()
root.mainloop()
print(p.communicate(answer)[0])
session.commit()
widget.show()
plt.show()
[p for p in process_list if all(e not in p for e in exclude_list)]
plt.show()
num_list[-9:]
map(f, my_list)
plt.tight_layout()
self.redirect(newurl)
np.vstack([np.array(u) for u in set([tuple(p) for p in points])])
d = dict((m.get(k, k), v) for k, v in list(d.items()))
[rex.split(i) for i in sequence_list]
D[(idx), :]
db.session.commit()
hash(repr(d))
unittest.main()
{d[0]: d[1:] for d in data}
np.delete(a, list(range(0, a.shape[0], 8)), axis=0)
list(reversed(sorted(a.keys())))
dict((v, v ** 2) for v in l)
ax.xaxis.set_minor_locator(minor_locator)
print(today.replace(year=today.year + 1))
pd.concat([s, pd.rolling_mean(s, window=4, min_periods=1)], axis=1)
self.button[i].grid(sticky=W + E + N + S, row=row, column=col, padx=1, pady=1)
time.sleep(5)
np.tensordot(a, b, axes=1)
(df - 0.2).round()
print(etree.tostring(root))
plt.show()
im = Image.open(f)
df.mask(np.random.choice([True, False], size=df.shape, p=[0.2, 0.8]))
[x for x in l1 if tuple(x) in intersection]
a, b = 5, 8
subprocess.Popen(cmd, shell=True, stdout=f, stderr=f)
ct.reindex_axis(a_x_b, axis=1).fillna(0)
print(a[1][1])
sum(1 + count(i) for i in l if isinstance(i, list))
print(func(*args))
np.random.shuffle(dataset)
map(dict, list(dict(sorted(map(sorted, map(dict.items, s)))).items()))
plt.show()
df.fillna(df.mean())
app.run(threaded=True)
a.split()
plt.show()
sys.exit(1)
print(m.group())
max(index for index, value in data if value == max_value)
mylist.sort(key=lambda val: SORT_ORDER[val[1]])
row.append(row[0])
[name for name in names if any([(p in name) for p in pattern])]
count = np.all(listScore == np.array([2, 0]), axis=1).sum()
plt.show()
list(filter(func, data))
arr = np.arange(10).reshape(5, 2)
random.shuffle(data)
plt.show()
f.seek(0)
max(s, key=lambda x: x.arity())
writer.writerow(row + [row[0]])
x = np.fromfile(f, dtype=np.int)
sys.stdout = old_stdout
pd.to_timedelta(df)
sys.exit(1)
np.all(a == b)
a.take(np.arange(1, 2), axis=1)
f.close()
dict((x, a.get(x, 0) + b.get(x, 0)) for x in set(a) | set(b))
base64.urlsafe_b64decode(uenc)
my_func.__doc__
b.widget().deleteLater()
dis.dis(withlocals)
np.isclose(a, b)
cleaned_list = [_f for _f in some_list if _f]
self.matches = [s for s in self.options if text in s]
pylab.show()
lst = [float(x) for x in lst]
[tuple(g[1]) for g in itertools.groupby(enumerate(l), lambda i_x: i_x[0] - i_x[1])]
wr.writerows(RESULTS)
ax.set_ylim([-10, 10])
np.hstack((test, test[:, ([0])]))
cursor.execute(sql, args)
result = list([_f for _f in orig if _f])
self.root.after(1, self.openfile)
functools.partial(self, obj)
matrix[0].pop()
foo()
plt.show()
file.close()
deleteL[:]
next(g)
[(a + b) for a, b in zip(A, B)]
time.sleep(0.1)
time.sleep(interval)
time.sleep(1)
buckets = [[(0) for col in range(5)] for row in range(10)]
load_source(module_name, path_to_file)
1, 0, 0, 1, 0, 0, 1, 0, 0
set(map(frozenset, lst))
print(list(csv.reader(f)))
bin(8)
plt.show()
g0.plot()
a[:1000] = [0] * 1000
items.sort()
s1.combine_first(s2)
A[tuple(rc1)], A[tuple(rc2)] = A[tuple(rc2)], A[tuple(rc1)]
plt.legend()
[list(g) for _, g in groupby(bool_array)]
df = df.divide(df.sum(axis=1), axis=0)
sys.stdout.flush()
[word for word in l if word.isalpha()]
np.array([np.where(np.in1d(array, matched))[0] for array in arrays])
print(len(set(map(len, my_lists))) <= 1)
sys.stdout.flush()
dict(d)
process.close()
list = [(str(a[i]) + str(b[i])) for i in range(len(a))]
deleted[max(d, key=d.get)]
ax.margins(0.1, 0.1)
[i for i, (l1, l2) in enumerate(zip(list1, list2)) if l1 >= 1 and l2 == 0]
db.session.commit()
plt.show()
{k: list(g) for k, g in groupby(sorted(l, key=len), len)}
x[np.isnan(x)] = 0
fig.subplots_adjust(wspace=0)
ax2.set_xticklabels([])
df.drop_duplicates()
a[[[0] * 5, [1] * 5], index]
button.click()
ax.set_ylim((valmin, valmax))
np.delete(a, [2, 4, 5])
im.show()
cv.CvtColor(img, gray, cv.CV_BGR2GRAY)
x[2:6] = []
driver = webdriver.Chrome(chrome_options=chromeOptions)
sys.exit(main(sys.argv))
self.assertEqual(json.loads(call_args[0]), expected)
plt.show()
a[numpy.nonzero(numpy.in1d(a, b))]
pickle.dumps(data, 0)
self.Bind(wx.EVT_LEFT_DOWN, self.OnLeftDown)
exit(0)
any(c.isalpha() for c in string_2)
sum(map(int, zip(*table)[-1]))
self.legend.figure.canvas.draw()
[[] for _ in range(2)]
{k: mylist.count(k) for k in set(mylist)}
sum(val for val in l1 if isinstance(val, numbers.Number))
sum(counter_list, Counter())
plt.show()
x.astype(int)
sys.executable
sys.stdout.flush()
con.commit()
logging.Handler.__init__(self)
pdb.set_trace()
ax.xaxis.set_major_locator(ScaledLocator(dx=6))
result = sum(timedeltas, datetime.timedelta())
ts[datetime(2011, 1, 8):][0]
cv.CvtColor(cv_img, cv_img, cv.CV_RGB2BGR)
sys.stdout.flush()
session.commit()
cv2.destroyAllWindows()
[a for a, b in zip(nums, nums[1:] + [not nums[-1]]) if a != b]
django.setup()
ax.bar(list(range(len(dates))), values)
plt.show()
sys.exit(0)
bool(list(someDict.keys()) & set(someSet))
dist = math.hypot(x2 - x1, y2 - y1)
rdd1.cartesian(rdd2)
someclassname.ask()
plt.show()
a.sort(key=lambda x: x[0])
[e for e in lelist if e in lestring]
pygame.draw.circle(screen, (0, 0, 0), (100, 100), 15, 1)
np.where(np.all(np.all(win_img == pattern, axis=-1), axis=-1))
MyModel.objects.filter(pk=instance.id).update(**data)
log.setLevel(logging.DEBUG)
d = dict(zip([o.name for o in object_list], object_list))
f.read()
time.sleep(10)
subprocess.call(args, stdout=FNULL, stderr=FNULL, shell=False)
[t for t in enumerate(l)]
plt.xlim(-2 * np.pi, 2 * np.pi)
[np.ma.array(arr, mask=~c).argmax() for c in cond]
a = [1, 2]
print(cls.__name__)
lst.sort()
dict((k, v) for k, v in dictionary.items() if begin <= k <= end)
FO.close()
print(args)
[y for y in x for x in data]
y = [x for x in list(dict.keys()) if dict[x] > 0.0]
print(a[key])
qs.distinct()
b = [a.ix[i] for i in a.index if sorted1[i] >= sorted2[i]]
bids.sort(key=int, reverse=True)
[v for k, v in enumerate(mylist) if k % 2 == 0]
mydict[new_key] = mydict.pop(old_key)
setattr(self, key, value)
a = dict.fromkeys(list(range(n)))
plt.show()
np.in1d(data, np.hstack(test)).reshape(data.shape)
(len(word) for word in wordslist)
self.data += self.ser.read()
main()
ws.add_image(img)
df.reset_index(level=1, drop=True, inplace=True)
df.stack()[df.stack().values == 1].reset_index()
urllib.parse.quote_plus(a)
any(char.isdigit() for char in s)
ax.yaxis.set_ticks([0, 2, 4, 8])
bttn_0.grid(row=5, column=0, pady=5, columnspan=2)
driver = webdriver.Firefox(firefox_profile=profile)
d = dict((str(n), list(range(20))) for n in range(1000000))
df.T.drop_duplicates().T
pylab.show()
lines.sort(key=lambda x: int(x.split()[0]))
[0] + [(i + 1) for i in [4, 9, 12, 14, 18]] + [len(bool_array)]
datetime.datetime.combine(tdate, datetime.time())
subprocess.call(my_cmd, stdout=outfile)
x = np.random.randint(0, 20, 1000000)
pd.isnull(df).any(1).nonzero()[0]
plt.plot(x, y)
print(pix[x, y])
app.debug = True
os.path.abspath(checkIP.__file__)
pprint.pprint(obj)
client.set_option(new_url)
A[0:4][1]
re.sub(pattern, replacement, text)
master.grid_columnconfigure(0, weight=1)
root.mainloop()
plt.show()
ast.literal_eval(some_string)
a.__getitem__(slice(0, 1)).__setitem__(0, 5)
bids.append(bid)
os.path.dirname(os.path.dirname(file))
Thread(target=p.start).start()
list(foo)
os.remove(f)
((m.get(k, k), v) for k, v in list(d.items()))
ax.xaxis.set_major_formatter(tkr.FuncFormatter(formatter))
y = x.subs({a: b, b: a}, simultaneous=True)
writer.writerow(row)
OrderedDict((k, queue[key]) for k in key_order)
my_model.save()
[{y: x[y].lower()} for x in messages for y in x]
integer.setParseAction(lambda t: int(t[0]))
[list(x) for x in a_strpadded]
print(np.where(a == a.min()))
[item for item in l for repetitions in range(2)]
[x for x in matrix if x[2] == 1.0]
[min(j) for i, j in itertools.groupby(A, key=lambda x: x[:7])]
urllib.request.urlretrieve(stream_url, target_path)
d.update((k, v * 0.5) for k, v in list(d.items()))
plt.show()
res = os.system(sys.argv[1], sys.argv[2])
signal.signal(signal.SIGINT, signal_handler)
self.Bind(wx.EVT_PAINT, self._onPaint)
fcntl.flock(g, fcntl.LOCK_UN)
print(json.dumps(json.loads(json_string)))
[listofLines[i] for i in sortedIndex]
plt.show()
numpy.zeros((10, 4, 100))
br.set_response(resp)
[b.append(item) for item in a if item not in b]
time.mktime(d.timetuple())
(n + 1) ** 2 == n ** 2 + (2 * n + 1)
sys._getframe().__code__.co_argcount
gems.add(gem)
dict(zip(keys, values))
session.close()
sys.exit(app.exec_())
split_str.groupby([0, 1])[2].apply(fnc)
sys.stdout.flush()
myfile.write(buffer(c_uncompData_p.raw, 0, c_uncompSize))
np.asarray(t)
pd.DataFrame(series_data, columns=series_name)
plt.show()
sys.getsizeof(x)
myl[:] = [(x if x != 4 else 44) for x in myl]
df.mycolumn.map(func)
appcfg.py
app.MainLoop()
cmap(np.linspace(0.2, 0.8, 100))
self._driver.quit()
len(a) - len(a.lstrip())
plt.show()
self.append(x)
sorted(l) == list(range(min(l), max(l) + 1))
file_obj.seek(0)
print(get_ip())
plt.show()
grouped.apply(wavg)
results = cursor.fetchone()
s.lower()
map(ord, s)
app.run(port=0, debug=True)
plt.show()
a[:, (b)]
sorted(L, key=operator.itemgetter(1))
len(mylist) - mylist[::-1].index(myvalue) - 1
len(s)
plt.show()
self.grid_columnconfigure(0, weight=1)
n = str(input())
map(sum, l) == [n] * len(l)
f.write(content)
mratings.mean(axis=1)
plt.show()
plt.show()
fu_list = [(k, fus_d.get(k), fus_s.get(k)) for k in s]
np.sum(c[:, 1:] == c[:, :-1], axis=1)
p[0], p[1]
MyClass.Property1
a = [int(x) for x in input().split()]
p.getfitness()
[6, 5, 1]
json.dumps(list)
f(*args, **kwargs)
df_test.iloc[0]
pdb.set_trace()
cv2.drawContours(image, [ctr], 0, (255, 255, 255), 1)
np.random.seed(0)
df.head()
sorted(iter(d.items()), key=operator.itemgetter(1))
list(range(0, 100 + 1, 5))
sorted(a, key=lambda x: order_dict[x[0]])
plt.show()
plt.draw()
plt.show()
p.terminate()
root.config(menu=menu)
np.argwhere(np.isnan(x))
assert response.status_code == 200
[ks[i] for i in range(len(ks)) if i == 0 or ks[i] != ks[i - 1]]
print(df.applymap(lambda x: str(x).isdigit()).T)
re.findall(p, test_str)
sum(x ** 2) * (x[1] - x[0])
json.dump(data, jsonFile)
(x * 2 for x in [2, 2])
a = [i[0] for i in sorted(zip(a, ind), key=lambda x: x[1])]
plt.show()
json.dumps(cls=MyEncoder)
do_stuff()
print(a[:, (0)])
template.render(context)
workbook.close()
arr[np.argsort(arr[:, (1)])]
result = datetime.datetime.now() - datetime.timedelta(seconds=X)
list.__setitem__(index, value)
test_df.where(test_df >= 4)
zip([a, b, c, d], repeat(x))
session.query(RssFeed).get(1)
new_list
plt.show()
sorted(set(mylist), key=lambda x: mylist.index(x))
random.shuffle(x)
os.system(cmd)
lasts.append(bpos)
df.agg(*[count(c).alias(c) for c in df.columns]).show()
array([0, 2, 1], dtype=int64)
m.group(1)
logging.getLoggerClass().root.handlers[0].baseFilename
np.digitize([1.5], a, right=True)[0]
math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)
result = max(iter(your_dict.items()), key=operator.itemgetter(1))[0]
items = sorted(list(ipCount.items()), key=lambda item: socket.inet_aton(item[0]))
myA[(myA > val).nonzero()[0][:2]] = 0
isinstance(a, Test1)
server.quit()
dict((k, mydict[k]) for k in keys_to_select)
[((index % 8 + 2) * item) for index, item in enumerate(range(1, 21))]
df.convert_objects(convert_numeric=True)
(lambda a, b: a(a, b))(lambda a, b: b * a(a, b - 1) if b > 0 else 1, num)
sys.getsizeof(s)
list(itertools.chain.from_iterable(a))
df
app.mainloop()
writer.writerows([[item] for item in new_text_list])
list(set(dict_a.values()).intersection(list(dict_b.values())))
[my_tuple[isinstance(x, str)].append(x) for x in a_list]
[[f for f in family if f != i] for i, family in enumerate(families)]
print(f())
ax.yaxis.set_major_locator(yloc)
os.path.dirname(str(__file__, encoding))
plt.show()
print(p.communicate()[0])
numpy.dstack((A, B)).transpose(0, 2, 1).reshape(A.shape[0] * 2, A.shape[1])
{{request.META.HTTP_NAME}}
all(x == mylist[0] for x in mylist)
ax.xaxis.set_major_locator(ticker.LogLocator(base=1000.0))
Counter(elem[0] for elem in list1)
time.sleep(1)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
slice = arr[0:2, 0:2]
df.append(row, ignore_index=True)
bin(1)[2:].zfill(8)
result = sum(some_list[1:])
res = [(i if i < 4 else 0) for i in range(1, 6)]
print(ET.tostring(root))
plt.show()
indices = np.where(np.in1d(x, y))[0]
get_keyring()
print([x for x in a if x in b])
new_dict.setdefault(v, []).append(k)
np.sum(boolarr)
form = UserForm(user=request.user)
file.close()
my_dataframe.columns.values.tolist()
[k for k in seq if counts[k] == 1]
result = [r for r in x if not any(z in r for z in y)]
sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)
df.applymap(np.isreal).all(1)
self.Bind(wx.EVT_SIZE, self.OnSize)
print(f.readlines())
db.CommitTrans()
list(im.getdata())
plt.show()
[(x + y) for x, y in zip(string, string[i:])]
np.array(a)
cherrypy.session.regenerate()
list_of_lists = [[] for _ in columns]
print(recursive_dict_eval(my_dict))
plt.tight_layout()
list(conn.execute(query).keys())
nf.write(str(random.randint(0, 1000)))
plt.show()
set(itertools.permutations(lst))
pipe.close()
datetime.timedelta(0, 540)
t.start()
f = lambda x, y: x[0] + x[1] + (y[0] + y[1])
os.path.abspath
df = pd.concat(dfs)
ax.set_xticks(xticks)
db.session.commit()
numpy.array([sub_array for sub_array in counts_array])
mysocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
self.Bind(wx.EVT_CHAR_HOOK, self.onKey)
t = s.reshape(-1, 2)
{{(news.description | truncatewords): 50}}
sum(map(sum, input))
plt.show()
list(range(2, 2))
list1.sort(key=int)
sys.stdout.flush()
cluster.fit(X)
print(et.tostring(tree, pretty_print=True))
print({k: v for k, v in mime_types.items()})
fig.tight_layout()
QtWidgets.QMainWindow.__init__(self, parent)
list(filter(os.path.isdir, [os.path.join(d, f) for f in os.listdir(d)]))
print(np.array(list(mystr)))
conn.close()
print(json.dumps(info))
print(list(range(n, (m + 1) * n, n)))
set(mylist)
plt.colorbar()
pyplot.show()
print(is_cardano_triplet(2, 1, 5))
btn.grid(column=x, row=y, sticky=N + S + E + W)
a.__class__.print_x(b)
model.fit(X, y)
keep.update(yoursequenceofvalues)
df.groupby(lambda x: x, axis=1).sum()
ax.xaxis.set_major_formatter(mdates.AutoDateFormatter(locator))
image.save(image_out_path)
main()
res = pd.DataFrame(json.loads(out))
l = list(gen_items())
mymodel.objects.get(pk=a[i])
[int(t) for t in (True, True, False)]
config.write(configfile)
frame.pack()
logger.setLevel(logging.DEBUG)
df[df.columns[2]]
sorted(x) == sorted(y)
plt.show()
logging.getLogger().addHandler(logging.StreamHandler())
time.sleep(1)
data = [([0] * cols) for i in range(rows)]
s.start()
urllib.request.urlopen(req)
frw.close()
plt.show()
pool.apply_async(test, (t,), dict(arg2=5))
profile.save()
np.logical_or(np.logical_or(x, y), z)
df = df.astype(str)
good_data = data[:, (data[0] == 1)]
(x.count(item) for item in set(x))
[_f for _f in lis if _f]
df = pd.read_sql(query.statement, query.session.bind)
w.pack()
con.commit()
root.mainloop()
list(OrderedDict.fromkeys(my_list))
arr[np.isnan(arr).cumsum(1) > 0] = np.nan
y = numpy.r_[0, x[:-1]]
[item for item in full_list if all(x not in omit for x in item)]
df = df[df.line_race.notnull()]
self.thread.start()
time.sleep(1)
isinstance(s, str)
img[..., ::-1]
app.mainloop()
(x * sin(y)).subs([(x, y), (y, x)], simultaneous=True)
df.append(duplicates).sort_index()
set(second_list).difference(map(f, first_list))
df.drop(remove, axis=1, inplace=True)
f.apply(clean, axis=1)
max((v, i) for i, v in enumerate(a))[1]
self.a, self.b = a, b
self.grid_columnconfigure(1, weight=1)
conn.commit()
print(datetime.now())
pylab.show()
logging.getLogger().addHandler(handler)
cnxn.commit()
datetime.date(2015, 8, 9).isocalendar()[1]
br.set_handle_equiv(True)
combs.extend(els)
ax.set_ylim(0, 1)
datetime.datetime.now() - datetime.timedelta(minutes=15)
np.random.uniform(-10, 10, size=(1, 5, 1))
dict((key, getattr(self, key)) for key in keys)
df = pd.concat([pd.read_sql_query(q, connection) for q in queries])
np.array([x for x in set(tuple(x) for x in A) & set(tuple(x) for x in B)])
{{d.content}}
np.array([[0], [1]])
bytearray(100)
[0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
conn.commit()
results = [int(match.group(1)) for match in matches]
root.mainloop()
os.uname()[1]
f.write(etree.tostring(root, pretty_print=True))
[val for i, val in enumerate(values) if i not in indices]
[some_string[i:i + 2] for i in range(0, len(some_string), 2)]
termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)
ds.to_netcdf(new_file)
cython.uchar
plt.show()
zf.close()
a[:, :, ([5])].shape
tuple(x for sublist in base_lists for x in sublist)
expense.save()
urllib.parse.unquote(url)
pygame.display.flip()
plt.show()
conn.commit()
pd.DataFrame([data])
admin.site.register(User, UserProfileAdmin)
list(groupings.values())
np.argmin(df.applymap(np.isreal).all(1))
list(flatten(a))
df.max() > 0
plt.show()
print(et.tostring(tree, pretty_print=True))
max(array.flatten())
df.append([df_try] * 5, ignore_index=True)
result = [i for k, g in groupby(lst, bool) for i in ((sum(g),) if k else g)]
plt.show()
my_process.kill()
print(linalg.solve(A, x))
[s[i:i + 2] for i in range(0, len(s), 2)]
data = request.stream.read()
data = (float(row[1]) for row in incsv)
[1, 2, 1, 1, 2, 1, 2, 2, 1, 2]
time.sleep(0.001)
db.session.commit()
sys.exit(app.exec_())
ax2.yaxis.set_major_locator(matplotlib.ticker.LinearLocator(nticks))
plt.show()
sys.stdout.write(line)
time.sleep(0.1)
print(new_func.__name__)
plt.show()
lambda x, i=i: x % i == 0
obj = result.json()
root.mainloop()
exit()
self.view.setModel(model)
conn.commit()
np.dot(a, b)
print(json.loads(json_string))
a[np.arange(a.shape[0])[:, (np.newaxis)], i]
pyplot.plot([point[0], point2[0]], [point[1], point2[1]])
MyApp().run()
c = b[1:]
pool = multiprocessing.Pool(2)
ax1.set_yticklabels([])
subprocess.call(cmd)
set(pd.DataFrame(df.genres.tolist()).stack().tolist())
array([0, 7, 1, 0, 4, 0, 0, 0, 0, 1, 0, 0, 0])
np.ravel_multi_index(X.T, dims)
[x for t in zip(*lists) for x in t]
print(np.sort(np.partition(y, -10, axis=1)[:, -10:], axis=1))
df.index.get_loc(ds)
[entry for tag in tags for entry in entries if tag in entry]
outputfile.close()
pd.concat([s1, s2], axis=1)
cipher.decrypt(base64.b64decode(text))
len(set(map(len, (a, b, c)))) == 1
list(bin(6)[2:])
self.Bind(wx.EVT_ENTER_WINDOW, self._onMouseEnter)
sorted(top_n, key=lambda t: (-t[1], t[0]))
setattr(self, key, initial_data[key])
b.__class__.__class__
soup = BeautifulSoup.BeautifulSoup(html_string)
[item for item in l for _ in range(r)]
yaml.dump(dataMap, f, default_flow_style=False)
rdd = df.rdd.map(list)
d += dt.timedelta(days=1)
root.destroy()
[1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
ax6.set_yticks(np.linspace(0, 1, 7))
print(df.to_html())
requests.post(url, params=params, data=json.dumps(data), headers=headers)
c = dict(a, **b)
array([[[4, 5], [12, 14], [24, 27]], [[0, 0], [6, 7], [-8, -9]]])
plt.show()
df[(df.a > 0) & df.index.isin([0, 2, 4])]
f.close()
plt.show()
sort(data, key=datekey, reverse=True)
time.sleep(1)
profile.save()
plt.show()
sys.stdout = self._stdout
session.commit()
c = [x[0] for x in A]
json.dumps(o)
sorted(unsorted_list, key=order.__getitem__)
self.lc.Bind(wx.EVT_LIST_BEGIN_DRAG, self.onDrag)
[(A[x], B[x % len(B)]) for x in range(len(A))]
value = list(d.values())[index]
plt.show()
pattern.match(string)
g.add_nodes_from(l)
br.set_cookiejar(cj)
plt.show()
time.sleep(2)
l[len(l):-len(l) - 1:-1]
sum(1 for _ in iterable)
df = pd.DataFrame(list_of_series, columns=cols)
d = {k: (lambda s, k=k: s * A[k]) for k in range(n)}
ax1.set_xlim([0, 5])
signchange[0] = 0
plt.show()
set(a).intersection(b)
df.merge(s.to_frame(), left_index=True, right_index=True)
[[i for i in sublist if counts[i] == 1] for sublist in mylist]
np.matmul(a, b)
buckets = [[0] * 100] * 100
ax.set_ylim(-5, 5)
next((a for a in s if s.count(a) == 1))
bigList.sort(key=operator.itemgetter(*args))
print(sum(1 for elem in list1 if elem[0] == entry[0]))
map(tuple, map(flatten, zip(a, b, c)))
print(etree.tostring(root, pretty_print=True))
finder.score_ngrams(bigram_measures.pmi)
print(np.nanmean(arr, axis=0))
ivd = dict((v, k) for k, v in list(d.items()))
a[np.arange(np.shape(a)[0])[:, (np.newaxis)], np.argsort(a)]
keys = set(l1).intersection(d1)
df = pd.concat([df, dummy_df], axis=1)
doc.toxml()
isinstance(fn, collections.Callable)
df.reindex(prev_dates.union(df.index))
foo.save()
len(words)
MainWindow.show()
map(centroids.__delitem__, sorted(index, reverse=True))
a = [0, 1]
testDf.iloc[:, 1:].stack().groupby(level=0).nunique()
np.where(np.all(a == b, axis=1))
s = set(lst)
plt.show()
print([item for item, count in list(collections.Counter(a).items()) if count > 1])
outfile.writelines(lines)
iqr = np.subtract(*np.percentile(x, [75, 25]))
product([[1, 2], [4, 5]])
print({k: round(v) for k, v in x.items()})
array([[1, 0, 1], [2, 0, 1]])
Foo.allocate_ids(max=26740080011050)
sys.exit(test())
hex(random.randint(0, 16777215))[2:].upper()
numpy.vstack((a, b, c)).T
server.serve_forever()
B = list(A[0])
b = [x for x in a if x not in itemsToRemove]
plt.show()
df = pd.DataFrame(df_dict)
root.mainloop()
args = parser.parse_args()
plt.show()
d.setdefault(x, []).append(y)
json.JSONEncoder.default(self, obj)
(x - y for x, y in it.izip(a[1:], a))
c = a[(np.searchsorted(a[:, (0)], b)), :]
np.concatenate([[88], a, [77]])
plt.show()
plt.show()
pylab.show()
time.sleep(0.01)
plt.show()
r.setdefault(key, []).append(lst2dct(val))
admin.site.register(Email, EmailAdmin)
len(arr)
print(element.tag, element.text, element.tail)
app.exec_()
reactor.run()
help(assign2)
d = dict([(k, v) for k, v in zip(l[::2], l[1::2])])
np.array([[d[str(i)], d[str(j)]] for i, j in A])
self.response.out.write(simplejson.dumps(data))
tst.save()
list(range(0, 10, 2))
df[(df[[0, 1]] > 0).all(1)]
cnxn.commit()
df.where(~outliers_low, down_quantiles, axis=1)
datetime.datetime(*d.timetuple()[:6])
GC.remove_edge(clique[0], clique[1])
ax1.set_ylim(0, 1)
gca().xaxis.set_major_formatter(xfmt)
myMethod(myVariable, *myTuple)
print(np.unravel_index(result.argmax(), result.shape))
ipdb.set_trace()
plt.show()
cursor = conn.cursor(MySQLdb.cursors.DictCursor)
np.fill_diagonal(out, np.diag(A))
b = [list(x) for x in b_set]
ax.plot(x, y)
json.dumps(o)
x ** 2 + 1
ax.yaxis.set_major_formatter(mpl.ticker.FuncFormatter(mjrFormatter))
msg.send()
print(somefake.readlines())
C = [[(0) for row in range(len(A))] for col in range(len(B[0]))]
db.Close()
ax.get_xaxis().set_minor_locator(mpl.ticker.AutoMinorLocator())
pd.DataFrame(data, tid1, ucat)
file = forms.FileField(required=False)
logging.getLogger(__name__).setLevel(logging.WARNING)
my_dict = {k: [] for k in keys}
input_seq[ix1], input_seq[ix2] = input_seq[ix2], input_seq[ix1]
math.sqrt((p0[0] - p1[0]) ** 2 + (p0[1] - p1[1]) ** 2)
app.mainloop()
ax.scatter(x, y)
d = {c: i for i, c in enumerate(ascii_lowercase, 1)}
conn.commit()
self.assertTrue(issubclass(QuizForm, forms.Form))
cursor.execute(sql, args)
conn.execute(sql, list)
dict_compare(dict_a, dict_b)
np.arange(new[1]) % old[1]
root.mainloop()
shapesMatch([(0, 0), (1, 0), (1, 1), (2, 1), (2, 2), (0, 2)], l_shape)
(my_array[:, (np.newaxis)] == my_array).all(axis=2).sum(axis=1)
[d[k] for k in lst]
[i for i, x in enumerate(t) if x]
traceback.print_stack()
time.sleep(1)
Entry.objects.bulk_create([Entry(id=x) for x in list])
jsonify(json_list=qryresult.all())
dict(a)
print(soup.prettify())
{{myexample}}
b = dict(zip(i, i))
self.transport.write(self.message.encode())
np.sort(m)[:, -N:]
array([[4, 5], [1, 4]])
foo.__class__.__class__
set(listA) & set(listB)
dict(list(x.items()) | list(y.items()))
[e for l in lst for e in l]
[y for y in listOfLists if y[x].isdigit()]
result.append(os.path.join(root, name))
setattr(self, pointer, group)
plt.ylim(-6, 6)
a[[0, 1], [1, 2], 2]
raise NotImplementedError()
sum(1 for _ in takewhile(lambda x: x == a[0], a))
i = int(math.floor(x) - 1)
[(x, y) for x, y, label in data_one]
pprint(dict(grouped_by_soundex))
portalocker.lock(file, flags)
print(m.group(1))
hand = {k: v for k, v in hand.items() if v != 0}
ftp.quit()
nx.draw_networkx(G)
pl.show()
f = open(os.path.join(sub_dir, file))
[[copy.deepcopy(foo) for x in range(10)] for y in range(10)]
dict((x1, (x0, x2)) for x0, x1, x2 in zip(x[:-2], x[1:-1], x[2:]))
df.div(df.sum(1), axis=0)
image = cv2.cvtColor(image, cv2.cv.CV_BGR2RGB)
dill.pickles(f)
plt.show()
sys.stdout.close()
df.reindex(df.index.drop(1))
x[index] if len(x) > index else default
self.show()
cursor.execute(query_insert, data * 2)
canvas.config(scrollregion=canvas.bbox(ALL))
list(itertools.chain(*list(foo.values())))
plt.show()
logging.handlers.pop()
result = [numbers[i] for i in indices]
Hsub = H[1:H.shape[0] - 1, 1:H.shape[1] - 1]
logging.config.stopListening()
ax.plot(list(range(10)), list(range(10)))
[0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1]
app.run(debug=True)
random.seed(SEED)
plt.show()
print(proc.stdout.readline())
pd.DataFrame(L)
plt.show()
cursor.execute(sql, (val1, val2))
random.choice(string.ascii_letters)
User.query.filter_by(**kwargs)
array([0, 1, 0, 0])
df.drop(df.columns[[1, 69]], axis=1, inplace=True)
a = np.delete(a, zero_row, 0)
file_writer.writerow([x[i] for x in lol])
g.filter(lambda x: len(x) > 1)
df.T.groupby(level=0).first().T
[[0, 1, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [0, 1, 0]]
tornado.ioloop.IOLoop.instance().start()
[sympy.diff(sum(m * m.T), i) for i in m]
arr[[2, 1]]
t.start()
np.in1d(fake, [0, 2, 6, 8]).reshape(fake.shape)
thread.start_new_thread(interrupt_user, ())
requests.post(url, data=data)
sys.stdout.flush()
5.55 % 1
json_string = json.dumps(row)
s.flush()
sys.stdout.flush()
plt.show()
len(os.listdir(directory))
print(socket.gethostbyname_ex(socket.gethostname())[2])
cgi.parse_qs(qs)
all(0 < n < 50 for n in thetuple)
list_of_nums[:] = [x for x in list_of_nums if x != 2]
lambda m: replacement_dict.get(m.group(), m.group())
sum([i for i in l1 if isinstance(i, int)])
[[k, len(list(g))] for k, g in groupby(strs)]
ax1.set_yticks([int(j) for j in range(0, 4)])
plt.subplot(122), plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
im = cv2.imread(path, -1)
zip(xnew[1:], ynew[1:])
f = lambda x, a=a: x ** a
pygame.mixer.music.play()
django.setup()
datetime.date.today()
zip(*filterer(list1, list2))
max(l1, l2, key=len)
numpy.sqrt(numpy.sum((A - B) ** 2))
ax.plot(x, y, z)
__init__.py
np.argsort(K)[-5:]
getattr(module_a, mod)()
c[a & b]
output_file.close()
GPIO.output(4, False)
[2, 5, 7, 8, 9, 12]
min(alist, key=itemgetter(1))[1], max(alist, key=itemgetter(1))[1]
main()
setattr(self, k, v)
a[~np.isnan(a).any(axis=1)]
scipy.signal.ltisys.lti
dfUnstacked2.columns
meta.Session.commit()
self.layout.addWidget(self.button)
np.tensordot(A, B, axes=[[0, 1], [0, 2]])
root.mainloop()
result = set(d[0]).intersection(*d[:1])
self.root.mainloop()
gevent.wait()
sess.run(y, feed_dict={i: d for i, d in zip(inputs, data)})
c = list(chain(*zip(a, b)))
response = requests.post(url, data=json.dumps(payload), headers=headers)
math.isnan(x)
logger.setLevel(logging.INFO)
255, 255, 255
{k: v for k, v in d.items() if k.startswith(s)}
plt.show()
(dict(x=x[ii], y=y[ii], z=z[ii]) for ii in range(10))
time.sleep(1000)
driver.quit()
print(my_list)
result = json.dumps(response[1])
s = map(sum, zip(*([s] * 2)))
max_index = max(max_index, index)
print(repr(input()))
timeit(lambda : list(test(12, 5)), number=1)
root.mainloop()
test.dosomethingelse()
time.sleep(1)
plt.show()
np.exp(2j * np.pi * np.random.rand(n, 1)).view(dtype=np.float64)
setattr(self, k, kwargs[k])
d.setdefault(k, []).append(v)
b2[np.in1d(b1, a)]
[x for t in a for x in t]
root.mainloop()
f.close()
s * a == s * a + s * 0
plt.plot(*zip(*a))
dict.fromkeys(my_list)
plt.show()
ax.axes.get_yaxis().set_visible(False)
myList[:] = [x for x in myList if x not in totoss]
time.sleep(60)
dict(lst)
a = a[0:100]
parser.parse_args()
workbook.close()
__init__.py
numpy.random.seed(42)
canvas.pack(side=LEFT, expand=True, fill=BOTH)
self.write(jsonp)
conn.commit()
self.grid_rowconfigure(0, weight=1)
Foobar.objects.filter(Q(blah=1) ^ Q(bar=2))
deletemylist[-2:]
plt.show()
time.sleep(5)
s = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
plt.show()
worker.start()
plt.figure()
child.kill()
[item for item in yourlist if item % 2]
[int(i in locs) for i in range(size)]
time.sleep(2)
s.groupby(s.index.weekday).transform(lambda x: pd.rolling_mean(x, window=n))
plt.show()
[x for x in matrix if x[2] == 0.0]
ax.xaxis.set_major_formatter(ScaledFormatter(dx=6))
s.quit()
time.time()
set(a[i] for i in range(1, len(a)) if a[i] == a[i - 1])
A[np.isnan(A)] = 0.0
new_list = [dict((transform[k], v) for k, v in list(d.items())) for d in old_list]
sys.path.append(root)
plt.show()
max(t, key=lambda e: (-e[1], e[2]))
regex.findall(s)
f.seek(0)
display.sendstop()
input.close()
driver.implicitly_wait(secs)
data.groupby([lambda x: x.year, lambda x: x.time])
plt.show()
plt.xticks(list(range(10)), labels)
res = service.cse().list(q=search_term, cx=my_cse_id).execute()
os.rmdir(temp_dir)
plt.show()
subprocess.call(cmd, shell=True)
cur.execute(query, (sortname, limit1, limit2))
print([d.isoformat() for d in get_week(datetime.datetime.now().date())])
root.mainloop()
bisect.bisect_left(mylist, compareValue)
ax.set_xlim([0, N])
fh4.close()
plot(x, y)
np.vstack({tuple(row) for row in a})
ser.read(5)
random.sample(list(range(1, 10)), 10 - 1)
l = L[1::2]
plt.show()
b = a[:, :, ::-1]
parser.parse_args()
[(a % 1) for a in l]
se2.commit()
[j for i in x for j in i]
print(np.allclose(cols, cols2))
data.sort(key=lambda entry: entry[1], reverse=True)
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
db.session.commit()
time.sleep(1)
l[::-1]
rolling_corr.iloc[-200:].mean(axis=0)
list(itertools.permutations(set([1, 1, 2, 2])))
[t for t in mylist if t[0] == 10]
df.isnull().values.ravel().sum()
unittest.main()
a[a < 0] += 1
new_list = [foo for foo in foos if foo.location == 2]
socket.setdefaulttimeout(15)
print(list(chain.from_iterable(A)))
[hex(ord(c)) for c in chars]
HttpResponse(response.content)
os.startfile(file)
Gtk.main_iteration()
A = [operation(A[i], A[i + 1]) for i in range(len(A) - 1)]
print(etree.tostring(builder, pretty_print=True))
root.mainloop()
sys.stdout.flush()
array([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]])
plt.show()
a = set()
print(etree.tostring(new_root, pretty_print=True))
a = list(set(a))
A.sort(key=lambda x: B.count(x))
my_dict = {x[0]: {k: v for k, v in zip(my_headers, x[1:])} for x in my_list}
random.sample(the_list, 50)
a, b, c, d = [x[i:i + step] for i in range(0, len(x), step)]
x, y = y, x
wx.Frame.__init__(self, parent, ID, title, pos, size, style)
df_new.head()
min(li, key=lambda x: x.number)
datetime.fromtimestamp(timestamp2)
df.ix[idx]
rest = text.split(sep, 1)[0]
cursor.executemany(sql, rows)
a.append(s)
df.replace(d)
unique_a.view(a.dtype).reshape((unique_a.shape[0], a.shape[1]))
f.close()
self.Bind(wx.EVT_LEAVE_WINDOW, self._onMouseLeave)
plt.show()
set(range(1, 101)) - s
list1.sort(key=natural_sort_key)
sns.kdeplot(x, shade=True)
set(list2).issubset(list1)
local_file.close()
json_string = json.dumps(foo.__dict__)
self.queue.pop()
list = map(str.strip, list)
session.flush()
[list(t) for t in zip(*l)]
res_list = [x for x, _ in rows]
x[5:]
plt.show()
shutil.rmtree(name)
np.flipud(your_array)
p.wait()
df.apply(lambda row: row[1] if row[0] > 0 else row[2], 1)
vbar.pack(side=RIGHT, fill=Y)
set(a[i] for i in range(1, len(a)) if a[i] == a[i - 1])
np.multiply(np.arange(1, 5), np.cumprod([1, 2, 2, 2])[np.newaxis].T)
timestamps.sort()
QtCore.QObject.__init__(self)
list(k for k, g in itertools.groupby(x for x in numbers if x != 0))
fvtool(Hd1, Hd2)
[int(i) for i in x[num - n:num]]
res = cv2.matchTemplate(img, template, cv2.TM_CCORR_NORMED)
a = datetime.datetime.today().year
self.setWindowState(QtCore.Qt.WindowMinimized)
cv2.destroyAllWindows()
datetime.datetime(1890, 1, 1, 0, 0)
pd.read_csv(Reader(gen()))
plt.show()
session.query(MyTable.col1).count()
array([[18, 6], [19, 5], [17, 9], [10, 5]]),
df.iloc[:, ([1])]
plt.show()
signal.signal(signal.SIGQUIT, handler)
self.top_frame.grid_columnconfigure(1, weight=1)
sorted((i, j) for i, j in zip(x, y))
args = parser.parse_args()
plt.show()
lambda x, y: x + y
open(location, mode).write(content)
db.commit()
((0, 1),) * 5
[False] * 10
x2[:, (0)] = np.roll(x2[:, (0)], -2)
plt.show()
self.root.mainloop()
ax1.plot(x[i:i + 2], y[i:i + 2])
f(*args, **kw)
datetime.datetime.today().weekday()
os.path.dirname(file)
stream.close()
added.sort(key=lambda x: os.stat(os.path.join(path_to_watch, x)).st_mtime)
f.close()
my_model.save()
c.ravel()
ctx.Process(target=foo, args=(x,)).start()
obj.refresh_from_db()
[i for i in my_list if my_counter[i] > 1]
infile.close()
client.images.data(img)
np.random.seed(1977)
df.iloc[df.index.get_indexer([2, 7])]
df.stack()
numpy.array(list(c))
self.frame.pack()
G.remove_nodes_from(to_remove)
reactor.run()
print(line)
df.apply(lambda f: to_number(f[0]), axis=1).sum()
plt.xlim(0, 10000)
matplotlib.pyplot.plot_date(dates, values)
wx.Frame.__init__(self, *args, **kwargs)
arr = arr[:, :, ::2]
df = pd.DataFrame.from_dict(map(dict, df_list))
func(*args, **kwargs)
self.checkqueue()
print(rdd.collect())
np.all(a == 0)
process_file(sys.argv[1])
ax1.yaxis.set_visible(False)
time.time()
plt.show()
NOT_DONE_YET
inspect.signature(datetime.datetime.now)
print(np.allclose(rows, rows2))
time.sleep(0.5)
f()
{t[0]: t[1:] for t in s}
con.commit()
df1.ix[:, (1)]
admin.site.register(Session, SessionAdmin)
new_lst.sort()
print([v for v in simplex.vertices])
os.kill(cpid, signal.SIGKILL)
tiffiles.sort(key=getint)
arr.argsort()[:n]
random.shuffle(lst)
my_array.pop()
fliplr(m.swapaxes(0, 1))
dict(map(lambda l: l.split(), s.splitlines()))
df.index = pd.to_datetime(df.index)
[sum(e) for e in zip(*data)]
time.sleep(10)
plt.show()
doc = lxml.html.parse(url)
pd.DataFrame(list(d.items()))
C = [[(0) for col in range(len(B[0]))] for row in range(len(A))]
pd.value_counts(list(concat(df.categories.values.tolist())))
fh.close()
random.shuffle(x)
result = sorted(mylist, key=lambda x: d[x[0]])
list_of_hets.append(hets)
np.unravel_index([0, 18, 26], a.shape)
urllib.request.urlopen(url).geturl()
np.where((a >= 6) & (a <= 10))
print(a.dtype)
df[df.isnull().any(axis=1)]
index = numpy.clip(index, 0, len(my_list) - 1)
[i for i in range(10) if i == 9]
input()
plt.subplot(212, sharex=ax1, sharey=ax1)
list(s)[0]
glOrtho(self.left, self.right, self.bottom, self.top, 1, -1)
time += datetime.timedelta(hours=1)
main()
[random.random() for _ in range(100000)]
driver = webdriver.Chrome(chrome_options=chrome_options)
getpass.getuser()
f.close()
app.mainloop()
ax.plot(x, y)
plt.show()
df.stack().apply(pd.Series).unstack().swaplevel(0, 1, 1).sort_index(1)
plt.show()
out_file.write(replace_all(text, spelling_dict))
ax1.set_ylim([0, 5])
f.close()
list_2 = [i for i in list_1 if isinstance(i, (int, float))]
plt.show()
G = nx.DiGraph()
out = np.linalg.norm(row.data)
np.array(_)
self.listbox.selection_set(first=0)
np.fromiter((row[index] for row, index in zip(X, Y)), dtype=int)
sorted(l, key=lambda x: (x[:-1], x[-1].isdigit()))
help(func)
np.subtract.outer(a, b)
min(a, key=lambda t: t[1])
self.check_object_permissions(self.request, obj)
plt.show()
list(tuple(mydata.transpose()))
a[..., (numpy.newaxis)] * b[(numpy.newaxis), ...]
self.lock.acquire()
self.value = value
theproc.communicate()
[item for item in theList if item in theDict]
user.save()
df1.count()
setattr(self, k, v)
print(sorted(set(my_list)))
s = pd.Series([1, 5, 20, -1])
self.Bind(wx.EVT_MOTION, self.OnMouseMove)
user.save()
do_it_lots()
np.where((vals[:, (0)] == 0) & (vals[:, (1)] == 1))[0]
numpy.array([[elem for elem in x_row] for x_row in X])
lst.extend(data)
request.remote_addr
round(1.5145, 2)
print([m.start(1) for m in matches])
time.sleep(0.5)
ax.set_xlim([datetime.date(2014, 1, 26), datetime.date(2014, 2, 1)])
some_class(*os.path.split(somefile))
set(word_list).intersection(a_string.split())
plt.pause(1)
self.baseDict[key]
cl.getlevel(2)
ordered = OrderedDict((k, mydict[k]) for k in myorder)
np.MAXDIMS
time.sleep(0.2)
zip(s, s[1:], s[2:])
__init__.py
plt.show()
decimal.Decimal(1.1)
self.__dict__.update(*args, **kwargs)
x = x[:50]
z = dict(list(x.items()) + list(y.items()))
ax.margins(0.05)
[a[i:i + 2] for i in range(0, len(a), 2)]
sys.exit(0)
logging.basicConfig()
plt.show()
[_f for _f in lst if _f]
sys.exit(1)
[y for x in list(d.values()) for y in x]
sorted([(0, 0, 0, int(random.getrandbits(4))) for x in range(10)])
self.client.post(url, data=post_data)
d = {t[0]: t[1:] for t in arr}
plt.show()
admin.autodiscover()
x, y, z = (v + 2 for v in l)
min(list(d.items()), key=lambda x: x[1])
print(pix[x, y])
curses.endwin()
words_list.extend(contents[i].split())
plt.show()
os.path.normpath(os.path.join(os.getcwd(), os.path.dirname(__file__)))
f.close()
d = pd.concat([d, temp])
rows = session.query(func.count(Congress.id)).scalar()
self.label.pack()
file = models.FileField(blank=True, null=True)
text_area.pack()
plt.plot(list(range(5)))
[tuple(zip(*x)) for x in lst]
root.mainloop()
plt.show()
print(Foo.bar)
[a.index(item) for item in b]
writer.writerow(list(d.keys()))
sock.bind((MCAST_GRP, MCAST_PORT))
shutil.copy(file, dest_dir)
map(lambda x: x ** 2, list)
update_fitness()
new_list = [f(x) for x in it.takewhile(lambda x: condition(x), l)]
tk.Tk.__init__(self, *args, **kwargs)
plt.show()
[i[0] for i in list(zip(listOfTuples, bools)) if i[1] == True]
os.path.dirname(__file__)
ax.plot_surface(X, Y, Z)
cv2.waitKey(0)
arbiter.run()
__init__.py
screen.fill((255, 255, 255))
data.append([int(v) for v in line.split()])
pygame.display.flip()
list(map(fs.format, sum(map(str.split, l), [])))
plt.xticks([])
plt.show()
sys.exit(1)
[b for a in ((x, -x) for x in range(1, 10 + 1)) for b in a]
print(soup.get_text())
list(r.keys())
plt.show()
df.reset_index(inplace=True)
[item for item in my_list if any(x in item for x in bad)]
[[10, 6, 45, 18, 49], [5, 6, 45, 6, 14]]
time.sleep(1)
csv_writer.writerow([x for x in line])
mars.circle(228, 1)
print([len(x) for x in partition(list(range(105)), 10)])
[4, 4, 2, 1, 2]
plt.ylim([-4, 2])
foo.__getitem__(slice(a, b, c))
plt.show()
plt.show()
plt.contour(xi, yi, zi, 20, linewidths=1)
math.modf(x)
pfile.seek(0)
time.sleep(5)
f = np.vectorize(f, otypes=[np.float])
func(*args, **kwargs)
new_list = sorted_set(my_list)
base64.b64decode(coded_string)
a[(a != 5).all(1)]
plt.figure()
[(i, sublist.index(item)) for i, sublist in enumerate(list)]
[v for k, v in d.items() if k not in (2, 5)]
filtered_list = list([x for x in input_list if x % 2 == 0])
server.serve_forever()
data = np.array([float(f) for f in file(filename).read().split()])
main()
result = [r for r in x if all(z not in r for z in y)]
any(kidname == row[ct] for row in csv.reader(file))
plt.show()
--honour - stdin
[[int(i) for i in line.split()] for line in data]
logger = logging.getLogger(__name__)
sum(1 for _ in itertools.takewhile(str.isspace, a))
con.commit()
test.reshape(-1, 2)[::2].reshape(-1, 4)
w.show_all()
JsonResponse(list(data), safe=False)
[(k, v)] = list(d.items())
driver.refresh()
{}
time.sleep(1)
result.stack()
app.run()
plt.show()
type(d.copy())
grouped.boxplot()
tuple(sum(z) for z in zip(a, b))
ax.add_patch(circ)
[[True, False], [False, True]]
plt.imshow(rotate_lena, cmap=plt.cm.gray)
sum(strat(line) for line in f)
[[10, 6, 45, 18, 49], [5, 6, 45, 6, 14]]
print(pd.concat([d1, df], axis=1))
cv2.waitKey(0)
nx.draw(G, pos)
float_to_hex(17.5)
[x[0] for x in listD[1]]
print(sorted(list(d.items()), key=lambda x: x[1], reverse=True)[0])
result = [a for a in A if a not in subset_of_A]
main()
a, b = map(int, sys.stdin.readline().split())
[(x * y) for x, y in zip(lis[0], cyc)]
app.run()
Toy.objects.filter(owner__parent=parent)
np.in1d(arr1, arr2)
plt.figure()
sock.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)
json.dump(feeds, feedsjson)
data[:, (set_col)] = val
time.sleep(1)
Mailbox.quit()
all(word[i + 1] >= word[i] for i in range(len(word) - 1))
plt.show()
list(sum(list(dict.items()), ()))
parser = argparse.ArgumentParser()
sorted(l, key=alphanum_key)
list.focus_set()
df.values[:] = df.sum()
[m.group(0) for m in matches]
os.makedirs(dir_path)
logging.basicConfig(level=your_level)
locale.setlocale(locale.LC_ALL, saved)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
A.a.__get__(a, A)
vf(numpy.outer(phases, numpy.arange(1, 4)))
print(date.isoformat())
plt.show()
df.a.value_counts()
mydict = default.copy()
Y[:, (1)]
df = df.loc[:, (~df.columns.duplicated())]
np.where(idx)
plt.show()
array([0, 0, 0, 0])
logger.setLevel(logging.DEBUG)
session.commit()
[[w for w in L if len(w) == num] for num in set(len(i) for i in L)]
hex(291)
setattr(c, key, value)
result_list = [elements[i] for i in indices]
os.kill(pid, signal.SIGTERM)
plt.show()
A[np.arange(A.shape[0]), (A != 0).cumsum(1).argmax(1)] = 0
sys.exit(0)
SomeModel.objects.filter(id__in=ids_list).delete()
plt.show()
con.commit()
{{a.name}}
y = [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0]
unittest.main()
print(response.content)
np.dot(a, b)
gtk.main()
plt.show()
sum(x > i for i in x)
map(itemgetter(0), G)
print(getattr(test, a_string))
plt.figure(figsize=(4, 4))
{i: words.count(i) for i in set(words)}
sys.setrecursionlimit(10000)
res = df - df.shift()
df = df.reset_index()
sum((doSomething(x) for x in originalList), [])
[([0] * cols) for x in range(rows)]
[pair for pair in itertools.combinations(li, 2) if sum(pair) == 10]
print(max(max(x) if isinstance(x, list) else x for x in my_list))
root.update_idletasks()
shuffle(x)
plt.show()
plt.show()
Reporter.objects.all().delete()
conn.commit()
ax = fig.add_subplot(111)
d = {k: [] for k in keys}
stack[-1]
some_list.append(dic)
blogpost.tags[:] = []
plt.show()
result[np.lexsort((result[:, (0)], result[:, (0)]))]
[i for i in range(10) if i not in digits]
root.mainloop()
loop.run_forever()
print(json.dumps(data))
dateutil.parser.parse(date_string)
plt.show()
new_string, np.tensordot(tensor1, tensor2, axes)
last = df.index[-1]
writer.writerow([latlon])
parser = parse_args(sys.argv[1:])
output = proc.communicate()[0]
args = parser.parse_args()
itertools.chain(*lists)
fout.writelines(data[1:])
root.mainloop()
ax.xaxis.set_major_locator(mdates.YearLocator())
time.sleep(1)
sys.stdout.flush()
self.send(data)
pygame.display.flip()
plt.show()
[i for i in zip(narrative, subject, activity, filer)]
self.progressbar.pack(padx=10, pady=10)
chain.from_iterable(combinations(s, r) for r in range(len(s) + 1))
print(f.read())
OrderedDict(itertools.islice(iter(d.items()), 500))
sheet.merge(top_row, bottom_row, left_column, right_column)
resultlist.append(M[:])
outfile.write(line)
df1.date = pd.to_datetime(df1.date)
figure(1, figsize=(6, 6))
self.timer.cancel()
writer.writerow([val])
print(matrix.data)
os.remove(filename)
a[np.argpartition(-a, np.arange((~np.isnan(a)).sum()))]
ws0.write(row, col, value, style)
print(line.strip())
unittest.main()
x, y = map(list, zip(*[(e, -e) for e in range(10)]))
writer.writerow([word])
ax.legend(handles, labels)
session.query(SomeClass).all()
[p[0] for p in datapoints[0:5]]
admin.site.unregister(User)
threading.Thread.__init__(self)
np.sum(M, axis=(0, 1))
bool(np.where(np.array([0, 0])))
print(Temperature.value)
result = [x for x in orig if x]
istr.close()
scipy.stats.chi2_contingency(data)
[True, True, False].count(True)
df.loc[df.Col4.isin(target_array)].index
list(chain.from_iterable(zip_longest(d, reversed(e))))
deletemydict[key]
print(cls.__base__)
root.mainloop()
sys.stdout.flush()
list_1, list_2 = list(list_1), list(list_2)
my_dictionary = dict(line.split() for line in f)
objs.append(MyClass())
[len(max(i, key=len)) for i in tableData]
msg.attach(html_text)
smtp.sendmail(send_from, send_to, msg.as_string())
[int(s[x[1]:x[2]]) for x in parser.parse(s)[1]]
setattr(self, attr, val)
np.arange(1000000).dtype
f.seek(0)
label.destroy()
out = [(1 if num & 1 << 7 - n else 0) for n in range(8)]
np.pi
n.append(float(row[8]))
my_list.remove(item)
file.close()
a[:5, :5]
time.sleep(1)
sys.exit(app.exec_())
time.sleep(0.1)
df[(df <= 2).any(axis=1)]
Counter(words).most_common(10)
list(wrapper(raisinggenfunc()))
plt.show()
ax1.set_xlim(0, 1)
root.mainloop()
do_something()
root.mainloop()
urllib.request.build_opener(HTTPCookieProcessor).open(url)
df2.reset_index(drop=True, inplace=True)
plt.show()
sys.exit(app.exec_())
row.save()
list_of_tuples
logging.basicConfig(level=logging.INFO)
print(self.request.body)
plt.colorbar(im, cax=cax)
shutil.copy(str(my_file), str(to_file))
plt.show()
print(d[key])
response = urllib.request.urlopen(req)
buffer.append(np.ndarray((len(my_buf),), buffer=my_buf, dtype=datatype))
func1(1, 2)
[(i ** 2) for i in l]
myDict[x] += 1
pylab.show()
s.sendmail(me, to, msg.as_string())
ax.set_yticks([])
p = [(i + 1) for i, (x, y) in enumerate(zip(a, a[1:])) if x > y]
plt.show()
c = (a + b)[:len(b)]
plt.colorbar()
time.sleep(1)
json.dumps(new_D)
printx2()
sys.exit(0)
map(list, list_of_tuples)
delta.total_seconds()
list(k for k, _ in itertools.groupby(k))
str(dec)
top.mainloop()
MyModel.filter(id__in=ids)
df.loc[~(df == 0).all(axis=1)]
img.putalpha(alpha)
plt.show()
self.__class__(os.path.expanduser(str(self)))
plt.show()
plt.subplots_adjust(left=0.2, top=0.8)
QtCore.Qt.ItemIsEditable | QtCore.Qt.ItemIsEnabled
pd.DataFrame(df.values.reshape(-1, 2, df.shape[1]).mean(1))
sys.path.append(submod_path)
wM.reset()
A.stack(0).dot(twos).unstack()
print(parser.parse_args())
now.replace(hour=0, minute=0, second=0, microsecond=0)
print(df.sort_index(axis=1))
file.write(content)
a, b, c, d, e = my_string.split()[:5]
dir(__builtins__)
forms.ModelForm.__init__(self, *args, **kwargs)
connection.close()
window.show_all()
word[1:]
sys.exit(app.exec_())
root.mainloop()
model.objects.filter(id=i[1]).update(order=i[0])
x.ravel().tolist()[0]
socket.getfqdn()
rows = csv.reader(f1, delimiter=dialect.delimiter)
A[np.arange(A.shape[0]), A.shape[1] - 1 - (A[:, ::-1] != 0).argmax(1)] = 0
pd.DataFrame(zip(a, b), columns=[a.name, b.name])
db.commit()
p1 = Process(target=func1)
content = urlopen(url).read()
main()
imshow(data)
pylab.plot(x, y)
[x for x in collection]
browser.implicitly_wait(10)
canvas.save()
logging.getLogger().handlers[0].setFormatter(formatter)
root.mainloop()
bit_array.setall(0)
app.run(debug=False)
2 ** np.arange(m)
[(2 ** i) for i, v in enumerate(bin(109)[:1:-1]) if int(v)][::-1]
map(sum, data)
cursor.execute(query)
x[0][0].append(value1)
A[:, (np.arange(ncols) % A.shape[1])]
screen.blit(transsurface, (0, 0))
sum(1 for x in frequencies if x > 0)
con.close()
plt.figure()
len([_f for _f in a_list if _f]) > 0
os.unlink(filename)
transmission_array.append(1)
sorted(lst, key=lambda L: (L.lower(), L))
yvalues[idx]
print((k, v))
print(os.path.dirname(os.path.realpath(sys.argv[0])))
yticks[-1].set_visible(False)
x = np.delete(a, zero_row, 0)
User.objects.create_user(**data)
b = [(n >> i & 1) for i in range(7, -1, -1)]
logger.setLevel(logging.INFO)
ax.invert_yaxis()
locals()
OrderedDict(sorted(list(d.items()), key=lambda t: len(t[0])))
B = [i for i in A]
sys.stdout.flush()
logging.basicConfig(stream=sys.stdout, level=logging.INFO)
{x: 1, y: 2}
data[i][0] = math.sin(data[i][0])
signal.pause()
os.path.join(*choices[:-1])
a[:, (np.newaxis), :] - v
[tuple(y for y in x if y) for x in a]
print(max(flatten(l)))
functools.reduce(operator.add, map(collections.Counter, dict1))
setattr(A, the_name, classmethod(func))
max([l1, l2], key=len)
f.seek(0)
cv2.destroyAllWindows()
random.shuffle(shufflethis)
ax.xaxis.set_major_formatter(ticks)
next(i for i, j in enumerate(lst) if j)
pd.concat([total, xtabs], axis=1)
list(set(tuple(sorted(s)) for s in all_the_ways))
np.sum(arr, axis=0)
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
[x for i, x in enumerate(myList) if i not in toRemove]
solve(eqs, [x, y])
np.intersect1d(A, B)
sys.path.append(os.path.abspath(path))
admin.site.register(Item, ItemAdmin)
conv.ravel()
ax1.imshow([[0, 1], [2, 0]])
e[np.all(e - np.array([1, 2]) == 0, axis=2)]
sc.parallelize(List(line)).collect()
time.timetuple()
A[:] = [1, 2]
print(sum(i == 1 for i in flatten_list(x)))
obj.save()
print(str(socket.gethostbyname(socket.getfqdn())))
np.std(sample)
os.path.abspath(os.path.dirname(__file__))
plt.show()
np.isnan(y), lambda z: z.nonzero()[0]
b = np.array([list(word) for word in a])
help(parrot.Norwegian)
(lambda a, b: a(a, b))(X, b)
plt.grid()
A[0:2, 0:2]
round(2606.89579999999, 2)
model.fit(S)
output.write(bytearray(int(i, 16) for i in yoursequence))
np.take(a, b, axis=1)
data.sort(key=lambda x: sorted(tally[i] for i in x))
(np.cumsum(np.bincount(v, minlength=u.size)) - 1)[v]
cursor.close()
pipeline.fit_transform(data)
ax.plot_surface(X, Y, Z)
lambda i: isinstance(i, (int, float))
{x: (x + 6) for x in range(1, 5)}
np.concatenate([[0.2], linspace(1, 60, 60), [60.8]])
print(sys.argv[0])
a.shape = a = a.reshape((a.shape[0], -1, n))
all(x > limit for x in my_list)
a[1:] -= a[:-1]
ax.plot_trisurf(triang, z_refi, cmap=cm.jet, lw=0.0)
plt.show()
_cache.clear()
plt.show()
all(getattr(self, key) == val for key, val in list(kwargs.items()))
a[:, ::2] + a[:, 1::2]
{k: v}
s.close()
pdb.set_trace()
df.apply(lambda x: x.argmax(), axis=1)
a = [[], [], [], []]
sys.stdout.flush()
list(starmap(add, zip(lst, lst[1:])))
b = [(n >> i & 1) for i in range(0, n.bit_length() - 1)]
plt.show()
{tuple(x) for x in l1} & {tuple(x) for x in l2}
time.sleep(0.5)
plt.pcolormesh(x, y, z, cmap=mpl.cm.Reds)
label.pack(fill=BOTH, expand=1)
np.isnan([nan, nan]).any()
list(y)
cb.ax.xaxis.set_ticks(minorticks, minor=True)
result = requests.get(LOGIN_URL, auth=(USERNAME, PASSWORD))
plt.show()
self.canvas.pack()
root.mainloop()
MPI_Finalize()
posts = Post.objects.filter(tags__in=tags)
cursor.execute(sql)
file.close()
form.save()
plt.plot(x_list, y_list)
sorted(zip(listofTimes, listofLines))
set(list1 + list2)
A = np.array(A)
session.commit()
df2.T.drop_duplicates().T
plt.show()
pipe.stdin.close()
(a[n:n + 1] + [default])[0]
pprint.pprint(obj, compact=True)
A.sum(axis=0)
ax.get_yaxis().set_minor_locator(mpl.ticker.AutoMinorLocator())
ts[datetime(2011, 1, 8):]
b = numpy.vstack((numpy.zeros(a.shape, int), a))
print(list(map(lambda x, y: x + [y], A, list(range(1, len(A) + 1)))))
conn.commit()
pylab.show()
sum(functools.reduce(operator.mul, data) for data in zip(*lists))
sys.exit(1)
[(i, lst.count(i)) for i in set(lst)]
line[5:]
sorted(a, key=my_key)
arr = np.array(list_of_arrays)
print(match.group(2))
session.commit()
sum(i for i in range(a, b + 1) if i % 2 == 0)
nx.draw_networkx_labels(G, pos_higher, labels)
conn.escape_string()
os.path.dirname(f)
random.shuffle(migrant)
numpy.setxor1d(a, b)
df.cumsum()
plt.show()
arr.sum(axis=(0, 1)).shape
[x for x in x if x[id] == 20]
plt.show()
repr(a)
f.seek(0)
sort(arr, arr.size)
plt.show()
element = ET.parse(fp).getroot()
df.drop(df.columns[11:], axis=1)
2 ** 2 ** numpy.arange(5)
pl.show()
a.insert(0, a.pop())
root.mainloop()
r.mainloop()
app.run()
print(MyClass())
self.show()
data = numpy.array(f.read().split(), dtype=float).reshape(7000, 8)
df.mean(axis=1)
new_dict[key].extend(value)
print(get_lists_with_sum(11, 8))
session.expunge_all()
A[::-1, :]
ax = fig.add_subplot(1, 1, 1)
itertools.chain.from_iterable(lists)
np.mean(t, axis=1)
root.mainloop()
session.query(WhateverClass).filter(WhateverClass._containerClassId == 5).all()
driver.quit()
h.setLevel(logging.DEBUG)
np.cos(np.pi * x) * np.sin(np.pi * y)
self.clickcursor.execute(query)
pd.value_counts(list(chain(*df.categories.values.tolist())))
plt.show()
A[A == NDV] = numpy.nan
print(any(l[i:i + len(pat)] == pat for i in range(len(l) - len(pat) + 1)))
pygame.init()
x[np.r_[0:2, -2:0]]
print(s.tell())
time.sleep(5)
print(my_new_list)
df.loc[row, key] = data[key]
pipeline.steps[1][1]
dir(request.body)
df[(df > 16) & mask]
xvfb.wait()
print(new_string)
files = [f for f in os.listdir(dirToScreens) if path.isfile(f)]
[random.randrange(1, 10) for _ in range(0, 4)]
root.mainloop()
sys.stdout.flush()
plt.show()
sum(1 for i in x if i)
x = (x + y) % 48
[l[i:i + n] for i in range(0, len(l), n)]
pprint.pprint(obj, depth=1)
req.close()
hash(self.__key__())
a.__getitem__(slice(0, 1)).__getitem__(0).__setitem__(0, 5)
app = create_app()
len(set(a)) == len(a) == max(a) and min(a) == 1
time.sleep(1)
print(etree.tostring(page, pretty_print=True))
sess.run(train_op)
label.pack()
site.delete(os.path.join(path, ftpfile.name))
(dt - datetime(1970, 1, 1)).total_seconds()
ax1.set_zorder(1)
np.any((0 < x) & (x < 1))
gtk.main()
[a for a, b in zip(aa, bb) if a == b]
issubclass(C, A)
fig.tight_layout()
df = pd.concat([df, pd.DataFrame(new_data)])
matplotlib.get_backend()
conn.commit()
[s[i:i + 2] for i in range(0, len(s), 2)]
os.path.basename(f.name)
p.start()
any(x[1:] == x[:-1] for x in zip(*arr))
df.stack().reset_index(1)
self.assertEqual(0, os.getpid())
my_array[:, (0)], my_array[:, (1)] = my_array[:, (1)], my_array[:, (0)].copy()
df.shape[1]
len(df)
cts.minute == 0 and cts.second == 0
[0] * 10
pyplot.show()
fragments
sys.stdout.flush()
root = tree.getroot()
ax.xaxis.set_major_locator(myLocator)
print(min(Mylist, key=lambda x: x[1]))
tup[0] = tup[0].__iadd__((4, 5, 6))
Gtk.main()
python - devel
ax.set_xlim(1, 11)
plt.draw()
{i: a[i] for i in np.nonzero(a)[0]}
[i.strip() for i in txt.split(default_sep)]
p.wait()
tmp[:, :-1] += a[:, 1:]
plt.show()
plt.show()
newD = dict(zip(list(d.keys()), [round(v) for v in list(d.values())]))
self.save()
gtk.main_quit()
A[((0,), (1,)), B]
print([(int(i) + 1) for i in s.split()])
df.apply(calculateC2, axis=1)
window.show()
pdb.set_trace()
str = str[:1].upper() + str[1:]
collections.OrderedDict(sorted(result.items()))
(10)()
f.close()
plt.show()
x = (x + y) % 48
df_with_x5.show()
t2c.main()
sorted(get, key=sortkey)
plt.show()
sys.exit(app.exec_())
requests.get(url)
os.remove(filename)
watchout()
skycake()
plt.show()
func(self, *args, **kwargs)
show()
foo.update(list(range(2, 6)))
pg.mixer.set_num_channels(50)
df.mask(np.arange(df.shape[0]) >= np.arange(df.shape[1])[:, (np.newaxis)])
[os.path.join(root, *choices[:i + 1]) for i in range(len(choices))]
print(iter2(A.copy(), rc1, rc2))
df.loc[target_index]
b = a[0:2]
dsp.close()
root.mainloop()
np.nanmean(data, axis=0)
Counter(test.split()).most_common()
print(df.sum().sum())
isinstance(dates, pd.DatetimeIndex)
df.columns = [str(i) for i in df.columns.values.tolist()]
canvas.pack()
(my_array[:-1] * my_array[1:] < 0).sum()
reactor.run()
isdeployed.strip()
print(a[0][0])
list(set(a) & set(b))
ws.write(rowi, coli, converters[coli](value))
array([[-1, -2, -1, 2], [1, 0, 1, 4]])
plt.show()
sys.exit()
do_something()
x[::2, 1::2]
[a[i] for i in np.argsort(a)[-2:]]
plt.show()
np.allclose(r1, r2)
emp.save()
f.seek(0)
os.makedirs(dir)
os.makedirs(mypath)
pygame.joystick.init()
plt.gcf().canvas.get_supported_filetypes_grouped()
df.reindex(stk_list, level=0)
deletec[0]
plt.show()
os.remove(i)
plt.show()
func()
print(etree.tostring(root, pretty_print=True))
d = dict(map(str.split, list1))
np.array([arr[([0, n]), :], arr[:, ([0, n])].T]).ravel()
random.choice([True, False])
[x for x, _ in lst]
cgi.parse_qsl(qs)
dict1.update([(key, dict2[key]) for key in list(dict2.keys())])
pd.read_csv(StringIO(s), parse_dates=[0], date_parser=parser)
blogpost.tags[:] = new_tags
redirect(request.path)
sys.path.append(os.path.normpath(os.path.join(SCRIPT_DIR, PACKAGE_PARENT)))
root.mainloop()
dict(zip(range(1, 5), count(7)))
plt.show()
x, y = zip(*[l.split() for l in f])
len(set(map(tuple, M))) == len(M)
Superlist.__init__
plt.show()
admin.site.register(Product, padmin)
test()
plt.show()
s = sorted(s, key=operator.itemgetter(1, 2))
y[(1 < x) & (x < 5)]
pg.init()
ax.set_zlim(-10, 0)
writer.writerow(row)
result.extend(list(t))
logger.setLevel(logging.DEBUG)
time.sleep(1)
plt.show()
[tuple(x) for x in data_set.to_records(index=False)]
plt.show()
plt.show()
a.add([1, 2])
os.path.join(os.path.dirname(parent), template)
time.mktime(datetime_object.timetuple())
employee.license_set.all()
inspect.getargspec(g)
cherrypy.quickstart(Root())
conn.close()
ax = fig.add_subplot(111)
os.close(f)
[j for i in sequence_list for j in rex.split(i)]
result[:a.shape[0], :a.shape[1]] = a
func()
widget2.grid(row=0, column=1)
numpy.linalg.norm(A - B, numpy.inf)
f.seek(0, 0)
nx.draw(G)
QtNetwork.QSslSocket.supportsSsl()
p = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)
plt.show()
set(map(itemgetter(0), l1)) & set(map(itemgetter(0), l2))
etree.fromstring(s, parser=utf8_parser)
m2[np.array(m2[:, (1)] > 10)[:, (0)]]
request.user_agent
pckl_file.close()
shutil.rmtree(sub_folder)
[(my_array + [i]) for i in input_elements]
pygame.font.init()
sympy.solve(l - r, c)
np.random.seed(0)
self.worker.start()
a = [[(0) for _ in range(ROWS)] for _ in range(COLUMNS)]
print(sys._getframe().f_code.co_name)
[(x ** 2) for x in range(10) if x < 7]
thingy1.f()
self.panel = wx.Panel(self)
f = anotherdecorator(lambda x: x * 2)
np.ma.array(a, mask=mask)
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
json.dump(data, sys.stdout, indent=2)
[x for x in lst if float(x.split()[-1]) not in s]
StringIO()
ax2.set_ylim([0, 1])
r.destroy()
str1.replace(str2, str2.upper())
self.transport.write(data.encode())
np.array(lists)
[(y if y not in b else other_value) for y in a]
array([[100, 200], [255, 255]], dtype=uint16)
np.in1d(a, [14, 16, 18])
t.start()
parser.parse_args(read_my_file(sys.argv[1:]))
root.mainloop()
plt.show()
browser.get(url)
measure.grid(row=0, column=0)
root.mainloop()
session.commit()
os.close(fh2)
value = next(v for i, v in enumerate(d.values()) if i == index)
m[:, :1].shape
pl.show()
{x[0] for x in list1} & {y[0] for y in list2}
out_im.putpalette((0, 0, 0, 255, 0, 0, 0, 255, 0, 255, 255, 0))
tmp[:, 1:] += a[:, :-1]
os.path.abspath(os.path.expanduser(path))
fwrite.close()
f = lambda X, model, **kw: cost(X, model, sparse=np.random.rand(10, 10), **kw)
e = next(iter(S))
plt.show()
self.main()
(df * weight[0]).sum(1)
pygame.draw.rect(screen, black, (0, 0, width, height), 0)
int(n)
test()
dest = dict(chain.from_iterable(map(dict.items, list_of_dicts)))
self.__dict__.update(b)
pickle.load(f)
df[df.apply(pd.Series.nunique, axis=1) == 1]
sorted(l1)
driver = webdriver.Firefox(capabilities=caps, firefox_profile=profile)
msg.send()
plt.hist(a, bins)
p.poll()
logger.setLevel(logging.DEBUG)
f.close()
f.close()
x = Example()
file.write(port.read())
pygame.quit()
210.184175597721, 210.184175597721, 210.184175597721, 210.184175597721
print(test())
QtGui.QWidget.__init__(self)
time.sleep(5)
metadata.reflect(engine)
map(lambda x: f(x, fixed), srclist)
f.close()
br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)
os.path.getsize(path)
plt.show()
f.close()
os.unlink(path)
ax.add_patch(circle1)
df.columns = col_list
gtk.main()
QTcpSocket.__init__(self)
A = dot(A, R.T)
[(x + y) for x, y in grouper(2, q)]
ssh.close()
{(x, y) for x in r for y in r if x + 2 == y}
date = models.DateTimeField()
wx.Icon(sys.argv[0], wx.BITMAP_TYPE_ICO)
[([0] * 8) for x in range(8)]
unittest.main(argv=[sys.argv[0]])
array2 = [int(x == 4) for x in array1]
plt.show()
root.mainloop()
html.escape(string)
max(item[1] for item in alkaline_earth_values)
sorted(list(d.items()), lambda a, b: b[1] - a[1] or a[0] - b[0])
[(next(z) if i < 0 else i) for i in y]
proc.wait()
arr.tolist()
print(Model.objects.get(pk=1).ranking)
equation1(**dict_of_parameters)
n = np.apply_along_axis(np.linalg.norm, 1, a)
[(x, y) for x, y in zip(it, it1)]
my_list.insert(index, item)
set([(4, 5), (2, 2, 5), (1, 20), (2, 10)])
f2.close()
writer.writerow(row)
self.assertEqual(2, 0)
f1.writelines(lines)
A.extend(B)
connection.close()
root.deiconify()
cv2.rectangle(eroded, (0, 0), (x, y), (255, 255, 255), 1)
df = pandas.concat([df1, df2], axis=1)
a[a.argsort()[-10:]]
QtGui.QTableView.__init__(self, *args, **kwargs)
[[4, 2, 6], [8, 10, 12], [6, 8, 6]]
list(x)
test[1].index + pd.DateOffset(hours=16)
print(input[indices[(0 <= indices) & (indices < 5)]])
f.close()
d.pop(your_key)
plt.show()
result = (M[:, :9] * N[:9, :].T).sum(1)
queue.Queue(maxsize=0)
(lambda i: lambda x: x % i)(i)
session.query(inc_type_md_col).filter(cnt_col > 0)
zip(itertools.repeat(ls[0]), ls[1:])
plt.colorbar()
window.show_all()
ax.set_ylim([0, 5])
self.process.start()
result = [key for key, value in dict.items() if value == min_value]
dict.fromkeys(list(range(2)), object())
plt.plot(x, y1)
main()
f.flush()
plt.show()
[v[0] for v in sorted(list(dict.items()), key=lambda k_v: (-k_v[1], k_v[0]))]
print(template.render())
print(json.dumps(jsonobj))
string.ascii_uppercase + string.digits
any((myrow1 == x).all() for x in myarray)
pandas.read_csv(s)
x, y = y, x + y
y = [i[j] for i in x for j in range(len(i))]
my_list = list(my_set)
first_type if all(type(x) is first_type for x in iseq) else False
time.sleep(5)
any(t.isupper() for t in month[1:])
random.choice(string.ascii_letters + string.digits)
list([x for x in mylist if x in pattern])
sum(i * j for i, j in zip(v1, v2))
sum(map(lambda x, y: bool(x - y), a, b))
print(list(Counter(l).items()))
s = sum(b for a, b in zip(list_1, list_2) if a)
sys.exit(1)
model.objects.all()
data = np.random.randint(0, 10, size=(100000, 2))
print(sys.version)
a.append((1, 2, 4))
df = df.reindex(columns=cols)
exp.evalf(subs={a: 6, b: 5, c: 2})
settings.__dict__
A.data = np.array([10, 6])
master.mainloop()
dict(list(i.items())[0] for i in L)
A = P * D.sum(axis=1) - D.dot(P)
plt.hist(x, bins=20)
subprocess.Popen(cmd).communicate()
test()
map(max, arr)
mail.Send()
data = np.arange(-50, 50, 10)
df.eq(df.iloc[:, (0)], axis=0)
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
plt.show()
sorted(d, key=lambda i: int(d[i]))
self._droplock()
new_foo.append(item)
e = [x[0] for x in eagles]
[key for key, group in groupby(li) if len(tuple(group)) == 1]
np.unravel_index(match_indices, result.shape)
pd.DataFrame(res)
session.commit()
[(val, np.sum(A[B == val])) for val in np.unique(B)]
plt.show()
plt.show()
itertools.product(list(C.items()), repeat=2)
instance.save()
hey()
hist(b.ravel().astype(np.uint8), bins=255, range=(0, 255))
{k: v for k, v in list(dictionary.items()) if begin <= k <= end}
first = l.pop(0)
tkmc.close()
cleaned = [i for i in (word.strip() for word in words) if i]
f.close()
G.data = np.ones(G.nnz)
time.sleep(1)
ax = fig.add_subplot(111)
lambda a, b: b * a(a, b - 1) if b > 0 else 1, b
sys.getsizeof(s)
[list(s) for s in sets]
ser.close()
clf.fit(X, y)
plt.subplots_adjust(bottom=0.17)
bool(my_list)
os._exit(1)
__init__.py
[(x + 1 if x >= 45 else x + 5) for x in l]
tornado.ioloop.IOLoop.instance().start()
print(list(mydict.keys())[list(mydict.values()).index(16)])
plt.show()
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
id(copy_my_list[0]) == id(my_list[0])
x.append(i)
df1.sort(axis=1) == df2.sort(axis=1)
my_list = list(my_set)
solve(my_func, 16)
int(a)
df.groupby(df.columns.tolist(), as_index=False).size()
frame.show()
__init__.py
setattr(self, name, number)
a = db.ReferenceProperty(A)
d + datetime.timedelta(hours=8)
sys.path.pop(0)
b.remove(i)
print([x for x in words if len(x) > average])
sorted(text, key=lambda x: (str.lower(x), x))
plt.show()
distance[0][1][2]
fig.set_size_inches(18.5, 10.5, forward=True)
{k: v for k, v in zip(list(range(1, 5)), list(range(7, 11)))}
p.start()
self.setWindowFlags(QtCore.Qt.Tool)
print([x for x in a if counts[x] >= 2])
sys.stderr = sys.__stderr__
__init__.py
QMainWindow.__init__(self, parent)
x2[:, (4)] = np.roll(x2[:, (4)], 2)
print(is_list_of_strings(i))
time.sleep(5)
subprocess.Popen(cmd)
plt.show()
x = x[:-1]
__builtins__.set
ax = fig.add_subplot(111)
not set(a).isdisjoint(b)
br.submit()
print(w.readline().strip())
l.sort(key=lambda x: x[1])
ax2.set_ylim(0, 10)
platform.system()
setattr(obj, prop_list[0], something)
centroids.append((x, y))
plt.show()
random.sample(list(enumerate(a)), 5)
plt.show()
sys.version
soup = BeautifulSoup(page)
line = line[2:]
main.run()
p.start()
lst[:] = [v for v in lst if pred(v)]
[x for x in L if not any(set(x) <= set(y) for y in L if x is not y)]
plt.subplots_adjust(wspace=0.001)
n[:] = [[(b - 1) for b in a] for a in n]
urllib.request.urlopen(request).read()
self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
logger.setLevel(logging.DEBUG)
np.random.uniform(5, 10)
plt.show()
clf.fit(X)
reactor.run()
unittest.main()
df = df.loc[mask]
plt.show()
main()
df.head()
time.sleep(0.5)
rf.merge_arrays((arr, x), flatten=True)
set(x) == set(y)
X_test = sc.transform(X_test)
json.dumps(d)
form = MyForm(questions=your_list_of_questions)
print(Matrix[x][y])
ser.close()
isinstance(b, Test2)
normal_dist.set_shape([input_data.get_shape()[1], labels.get_shape()[1]])
sys.stdout.write(REVERSE + CYAN)
a = np.array([d])
IOLoop.instance().start()
print([obj.name for obj in gc.get_objects() if isinstance(obj, potions)])
QtCore.Qt.ItemIsEditable | QtCore.Qt.ItemIsEnabled
csv_writer.writerow([i[0] for i in cursor.description])
values = [max(x, 0) for x in values]
HttpResponse(simplejson.dumps(data_dict))
list(csv.reader(s, skipinitialspace=True))
[x[0] for x in listD[0]]
workbook.close()
print(hex(new_int))
df
mylist[:] = [(not x) for x in mylist]
ax.set_axis_bgcolor((1, 0, 0))
random.sample(s, 1)[0]
c = [item for t in zip(a, b) for item in t]
ax.margins(0.2)
setup.py
ssh.connect(server, username=username, password=password)
ordered = [item for item in ordered if item in unordered]
[OrderedDict(row) for i, row in df.iterrows()]
c = dict.fromkeys(s, 0)
print(datetime.utcfromtimestamp(tai_timestamp))
a[:, (0), (0)], b[:, (0), (0)] = b[:, (0), (0)], a[:, (0), (0)].copy()
fout.close()
data.reset_index(drop=True)
[sum(int(c) for c in str(num)) for num in list1]
list(map(hash, list(range(1, 6))))
nx.has_path(G, 1, 5)
user.save()
date = models.DateTimeField(default=datetime.now, blank=True)
df1.combine_first(df2)
s.tolist()
wx.Frame.__init__(self, parent, id, title)
plt.show()
A - mean.reshape(mean.shape[0], 1)
app.run()
plt.show()
plt.show()
len(alist) - alist[-1::-1].index(value) - 1
file.write(unicode_text)
root.mainloop()
regr.fit(Xtrain, ytrain)
plt.show()
df.rolling(window=10).mean().applymap(round).shift()
os.kill(process.pid, signal.SIGINT)
circular()
[i for i in range(len(bv)) if bv[i]]
plt.draw()
f.write(line)
self.process.terminate()
sorted(A, key=A.get)
df = pd.DataFrame(data, columns=columns)
plt.figure(figsize=[6, 6])
driver = webdriver.Chrome(chrome_options=options)
hist(b.ravel().astype(np.uint8), bins=255)
my_list = list(the_tuple)
ax1.xaxis.set_visible(False)
self.root.mainloop()
login(request, user)
result = re.sub(regex, subst, file_contents)
Foo._bar()
[random.shuffle(x) for x in workList]
plt.show()
l = l[0] + (l[1],)
plt.show()
df.to_excel(ew)
a[..., ([1, 1])]
[(s[i], i) for i in indices]
d = dict(list(row.items()))
ax.xaxis.set_ticks(x)
a - a.min(axis=0)
infloop()
sys.exit(app.exec_())
root.mainloop()
np.minimum(arr, 255, out=arr)
sorted(list(range(len(K))), key=lambda x: K[x])[-5:]
plt.xlim(-1, 1)
tf.multiply(x, y).eval()
elements.append(table)
pdb.set_trace()
app.MainLoop()
form = CModelForm(UPOST(request.POST, c_instance), instance=c_instance)
time.sleep(1)
zip(np.nonzero(starts)[0], np.nonzero(ends)[0])
print(pandas.concat([s1, s2], axis=1).min(axis=1))
my_dict.clear()
xlbook.close()
[seq[i:i + n] for i in range(len(seq) - n + 1)]
[len(list(group)) for key, group in groupby(a)]
do_something()
ax.set_xlim(ts.index.min(), ts.index.min() + 24)
df.fillna(0, inplace=True)
all(x <= y for x, y in zip(L, L[1:]))
time.sleep(1)
plt.show()
y = int(x, 16)
layout.setContentsMargins(20, 0, 20, 0)
[8, 5, 6]
root.mainloop()
os.rename(tmpFile, myFile)
lst.sort(key=itemgetter(1), reverse=True)
admin.site.register(TestModel, TestModelAdmin)
print(etree.tostring(tag, pretty_print=True))
root = Tk()
plt.tight_layout()
os.killpg(os.getpgid(p.pid), signal.SIGTERM)
sys.exit(app.exec_())
((a[:, (np.newaxis), :] - v) ** 2).sum(axis=-1).min(axis=0).sum()
time.sleep(x)
[index[start:end] for start, end in zip(slices[::2], slices[1::2])]
df.append(dm2)
df = df.reset_index()
(1 for i in x if 60 < i < 70)
plt.plot(x, y)
a, b, c = do_something()
bane.astype(np.float).view(np.complex64)
self.configure(width=width, height=height)
plt.clabel(cs, inline=1, fontsize=9)
keys.sort(lambda x, y: cmp(dict[x], dict[y]))
[0, 1, 2, 4]
time.sleep(1)
random.sample(zip(xs, ys), 1000)
app.MainLoop()
[j() for j in [(lambda i=i: i) for i in range(10)]]
line = sys.stdin.readline()
time.sleep(1)
logger.setLevel(logging.DEBUG)
plt.show()
print(numpy.round(dataAC, 10)[:, :4])
lst = []
[y for x in data for y in x]
a[0].append(1)
obj = PageModel.get_by_id(page_id)
M = np.column_stack((x ** 2, x, np.ones_like(x)))
solve(eqs2, [x, y])
[item for item in mylist if item[0][0] == letter]
plt.show()
fh.close()
ax.set_yticklabels([])
df.append(data)
print(Foo.bar.__get__(f, Foo))
all(e == a[0] for e in a)
next(x for x in (f(y) for f in hundreds) if x)
self.process.wait()
pygame.joystick.quit()
worksheet.save()
d[i[i < d.shape[0]]]
self._socket.bind((self._host, self._port))
f.write(text)
print(str(n)[::-1])
b = [(n >> i & 1) for i in range(n.bit_length() - 1, -1, -1)]
[sorted(item, key=priority.get) for item in my_lists]
test[n:]
sys.stdout.flush()
zip(*[(lst[i:] + lst[:i]) for i in range(n)])
print([(x - i) for i, x in enumerate(a)])
lists[0].append(1)
Image.fromarray(result).save(sys.argv[2])
dict(zip(l[::2], l[1::2]))
sess.close()
result = [r[0] for r in result]
plt.show()
plt.show()
any([(x[1:] == x[:-1]) for x in zip(*arr)])
doctest.testmod()
logging.getLogger().getEffectiveLevel()
df
MyThread().start()
round(2.607, 2)
[k for k, n in Counter(seq).items() if n == 1]
root.mainloop()
indices = [i for i, x in enumerate(myList) if re.search(regex, x)]
np.abs(A[:, (np.newaxis)] - B)
self.timer.stop()
pd.read_csv(f, **kwargs)
soup = BeautifulSoup.BeautifulSoup(html)
sys.path.append(path)
deletemy_list[1]
foo((noniterable,))
app.root.mainloop()
print(sorted(iter(counter.items()), key=lambda x: x[::-1]))
s.find_longest_match(0, len(a), 0, len(b))
{k: v for k, v in list(dict.items()) if v > something}
db.session.commit()
results = sorted(list(results.items()), cmp=lambda a, b: b[1] - a[1])
[k for k, g in groupby(data)]
my_func(*arr.T)
sys.exit(app.exec_())
sum(map(len, [s for s in x if len(s) > 1]))
test_rec[indices]
Color(*Color2.as_list())
xbook.close()
plt.colorbar()
combined = [item for sublist in lists for item in sublist]
deletec[:]
root.mainloop()
ws.cell(row=index, column=2).value = x1
datetime(1970, 1, 1)
my_dict = json.load(f)
dot(x, y)
print(match.groups())
Y = X - X.mean(axis=1, keepdims=True)
df.where(df.eq(df.max(1), 0), -1)
f_out.close()
plt.show()
data = pickle.load(f)
Response(serializer.data, status=status.HTTP_201_CREATED)
sum(map(r, v)) == -n
np.cross(c, d).reshape(5, 4)
e = Example(size=10)
result.append(x[:2].tolist())
method()
self.ProgressBar.SetValue(0)
func(*args, **kwargs)
df.loc[df.index.tolist() + missing]
result[:-1]
df.loc[set(df.index) - set(blacklist)]
time.sleep(1)
np.where(a == a.max())
[f(a) for f in funcs for a in args]
current_module = sys.modules[__name__]
response = mechanize.urlopen(request, data=data)
sys.path.append(path)
print(f.stdout.readline())
tup = tuple([(element.foo, element.bar) for element in alist])
sys.exit(app.exec_())
print(c.most_common()[0])
plt.show()
main()
df.iloc[np.argmin(np.abs(df.index.to_pydatetime() - dtObj))]
a[:] = [s.strip() for s in a]
p[s] == np.arange(n)
random.shuffle(newcolors)
t + np.roll(t, -1)
l.sort(operator.itemgetter(0), reverse=True)
al[0], al[1] = float(strs[0]), float(strs[1])
str(random.random())[2:]
r = requests.post(URL, data=payload)
list(set().union(a, b, c))
main()
self.graph = self.ax.hexbin(self.xData, self.yData)
csvwriter.writerow(row)
c.setopt(c.HEADERFUNCTION, storage.write)
admin.site.unregister(Group)
sys.stderr = sys.__stderr__
numpy.invert(array)
sum(1 for x in gen)
print(a[x][y])
a[1].append(2)
L = [[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 1, 1, 0]]
make_adder(5)(10)
cbar.set_ticks([mn, md, mx])
np.random.seed(1977)
lol = [list(range(10)), list(range(2, 12)), list(range(5, 15))]
split_curve(np.array([0, 1]), np.array([0, 1]), 2)
sys.stderr.close()
print(my_new_list)
Base.metadata.create_all(engine)
window.show_all()
a.append(str(wi))
plt.show()
logging.Handler.__init__(self)
ax7.yaxis.set_label_coords(-0.2, 0.5)
ax2.set_xlim(0, 10)
t.date()
len(set(perms))
np.random.choice(array1, 5, replace=False)
getattr(module, class_name)
plt.imshow(crop_lena, cmap=plt.cm.gray)
plt.show()
con.close()
df = pd.DataFrame(data)
data = [tuple(line) for line in csv.reader(f)]
wx.Panel.__init__(self, parent)
a[-9:]
ax.grid(True)
plt.show()
df.reindex(s.index)
a.repeat(2, axis=0).repeat(2, axis=1)
signal.signal(signal.SIGALRM, signal_handler)
a.reshape(-1, 100)[::2].ravel()
a[np.arange(len(a)), [1, 0, 2]]
sys.exit()
Project.objects.all()
isinstance(f, float)
plt.plot(x, y2)
form = MyForm(request.user)
print(df.astype(float).sum().astype(int).astype(str))
entry.focus_set()
[myfunc(a, b) for a, b in zip(data[::2], data[1::2])]
plt.show()
pd.DataFrame(a.reshape(A.shape[0], -1), A.index)
mask = np.in1d(a[:, (0)], b)
time.sleep(0)
y[y.nonzero()]
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
driver = webdriver.Firefox()
print(list(f()))
list(Blog.objects.values())
ax.xaxis.set_major_formatter(dates.AutoDateFormatter(locator))
tornado.ioloop.IOLoop.instance().start()
print(cmod.greet(a))
print(random.choice(a))
writer.writerows(new_data)
np.array_split(a, 2, axis=1)
f.write(leds[0])
(vals[:, (0)] == 0) & (vals[:, (1)] == 1)
{key: data[key] for key in one_by_ip}
ax.xaxis.set_major_locator(mdates.YearLocator())
tk.mainloop()
item_labels.sort(key=lambda t: c[t[1]])
br.title()
list(set(theList).intersection(theDict))
heapq.nsmallest(l, 2)
max(i[0] for i in oceans[regcode - 1])
sorted(a, key=lambda x: (x[0].isdigit(), x))
plt.show()
a.dot(v)
set([x for x in l if l.count(x) > 1])
f.seek(0, 2)
root = Tk()
admin.site.register(User, UserAdmin)
logging.basicConfig(level=logging.DEBUG)
orcl.close()
root.grid_columnconfigure(0, weight=1)
df.apply(lambda s: s.value_counts().get(0, 0), axis=1)
plt.colorbar()
ax.set_xticklabels(x_labels)
dict(form=form)
plt.xlim(0, data.shape[0])
df = df[df.line_race != 0]
plt.contourf(xi, yi, zi, v, cmap=plt.cm.jet)
zip(*data)
print(row[0].read())
L.append(l)
any(i.isdigit() for i in string)
f.seek(-len(line), os.SEEK_CUR)
QtGui.QWidget.__init__(self)
sum(s[i:].startswith(subs) for i in range(len(s)))
logging.getLogger().addFilter(Aggregator)
len([x for x in myList if x in myDict]) > 0
print(date.isoformat())
table.create()
HttpResponse(status=500)
sys.exit(0)
my_dict[key].append(value)
df.drop(drops, inplace=True)
writer.writerow(dict(zip(fieldnames, row)))
print({k: [d[k] for d in dd if k in d] for k in all_keys})
sys.stdout.flush()
layout.addWidget(btn)
sorted(a.keys())
A[np.lexsort((A[:, (0)], A[:, (1)]))]
session.commit()
plt.hist(np.clip(values_A, bins[0], bins[-1]), bins=bins)
plt.show()
time.sleep(0.1)
lst[:] = [word for words in lst for word in words.split()]
requests.delete(url, data=json.dumps(data))
earth.speed(0)
mars.speed(0)
df.stack().value_counts()
b.sort(key=float)
autoreconf - i
hdf5.close()
reactor.run()
dict(i=i, j=j, k=k)
sorted(lst, key=lambda x: (counts[x], -firstidx[x]), reverse=True)
changewriter.writerow([productcode, amountentered] + changecoins)
os.system(cmd)
plt.gcf().canvas.get_supported_filetypes()
plt.show()
threading.Thread.__init__(self)
s.setsockopt(socket.SOL_SOCKET, socket.SO_LINGER, linger_struct)
main()
sys.stdout.write(line)
x[y.nonzero()] = y[y.nonzero()]
self.assertEqual(response.status_code, 200)
pd.concat([pd.DataFrame(out, df.index, a), df], axis=1)
urllib.request.urlopen(req)
self.__getitem__(slice(start, stop))
itertools.chain(*([i] * i for i in range(1, 5)))
[range(2, 5), range(12, 17), 20]
time.sleep(1)
mySet = {x[0] for x in TUPLES}
print(os.listdir(path))
cursor.execute(sql, args)
extra_logger.setLevel(logging.INFO)
pylab.show()
v = int(float(s)) if int(float(s)) == float(s) else float(s)
deletefoo.fields[index]
fig.canvas.draw()
print((char, char.isalpha()))
plt.show()
plt.draw()
getattr(someobject, foostring)
np.append(a, z, axis=1)
map(str.strip, my_list)
list(ordered_dict.values())[2]
np.concatenate((arr[([0, n]), :].ravel(), arr[1:-1, ([0, n])].ravel()))
np.random.seed(1)
f.close()
list(set(a))
[int(i) for i in bin(x)[2:]]
HttpResponse(line)
br.set_cookiejar(cj)
plot_data = [[] for _ in positions]
a = np.array([np.array(list()) for _ in y])
(np.abs(a - val) <= tol).argmax()
plt.show()
__init__.py
[seen[c] for c in list]
QApplication.restoreOverrideCursor()
plt.show()
sys.stdout.flush()
QtGui.QWidget.__init__(self)
widget.destroy()
pd.concat([df.iloc[:, :1], df.shift(1), df.shift(2).iloc[:, 4:]], axis=1)
transmission_array.append(0)
app = Flask(__name__)
np.insert(B, np.arange(len(A)), A)
plt.show()
df
ax.set_ylim((0, 10))
mylist.append(item)
df.show()
button1.config(height=WHATEVER, width=WHATEVER2)
a[-1]
[x for x in ls if ls.count(x) == 1]
ones = [x for x in l if x[1] == 1]
main()
f.close()
fout.close()
json_data = json.loads(response.text)
self.fig.canvas.draw()
termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)
reverse_dict.setdefault(value, []).append(keypath)
mlab.show()
list(itertools.chain(*l2))
new_list.append(item[1])
out = [l for l in out if l]
json.loads(text)
nltk.tokenize.sent_tokenize(text)
self.response.out.write(photo.imageblob)
time.sleep(2)
(x[i:j] for i, j in itertools.combinations(range(len(x) + 1), 2))
[i for i, j in zip(x, y) if i == j]
driver.switch_to_window(driver.window_handles[0])
ts.ix[ts.index.indexer_between_time(datetime.time(9), datetime.time(18))]
max(max(p[1:]) for p in PlayerList)
print(os.walk(DIR_PATH).next()[1])
pool = Pool(processes=4)
plt.show()
print(aslocaltimestr(datetime.utcnow()))
plt.show()
ser.read(bytesToRead)
aa = [d[k] for k in f]
np.transpose(arr, [2, 0, 1]).reshape(5, -1)
f(lambda x, y: x + y, 1, 2)
print(etree.tostring(bar, pretty_print=False, with_tail=True))
results[i].append(benchmark(i))
unique_list.append(sorted(item))
plt.show()
db.close()
plt.gca().add_artist(myline)
plt.show()
plt.show()
isinstance(n, int)
img = cv2.cvtColor(img, cv2.COLOR_BGRA2BGR)
pylab.show()
[x[0] for x in G]
result = [y for y in (expensive(x) for x in mylist) if y]
self.connection.commit()
np.concatenate([a[(np.newaxis), :], b[(np.newaxis), :]], axis=0)
tekstboks2.pack()
plt.subplot(211)
list(permutations(list_of_tuples))
self.ax.set_xlim(0, R + pR)
deleted[k]
httpd.serve_forever()
x.shape
ts1.corr(ts2)
pkgutil - -pkgs
res.reset_index()
z = [x] + (y if isinstance(y, list) else [y])
formatdate(time.mktime(dt.timetuple()))
np.array_equiv(A, B)
myArray[1][1] == 2.71828
fro.close()
zip(*([s] * 2))
list(itertools.chain.from_iterable(L))
x = str(something)
print((value, count))
[(len(list(g)), k) for k, g in itertools.groupby(l)]
test.append(pd.Series(200, index=[101]))
[1] * 5
str(int(value))
Dataset.objects.filter(i_end_int__gte=x, i_begin_int__lte=x)
zip(a, x)
plt.plot(x, y)
next(gen)
print(first.lower() <= second.lower() <= third.lower())
list(chain.from_iterable(a))
[(x * (2 - x % 2)) for x in a_list]
ax.plot(x, y)
instance.save()
random.shuffle(array)
X_train, y_train, X_val, y_val, X_val, y_val
p.wait()
list1 = [_f for _f in list1 if _f]
print(len(unique_values))
ax.set_xticks(np.arange(data.shape[1]) + 0.5, minor=False)
self.__init__(*args, **kwargs)
Response(status=204)
plt.figure(figsize=plt.figaspect(1))
sys.stdout.flush()
plt.draw()
print(self.bar)
nlargest(5, vector, key=itemgetter(1))
random.shuffle(s)
bin(10)
list(product(x, chain.from_iterable(y)))
msg.attach(MIMEText(text))
BillboardTracker.objects.filter(expiry_date__le=datetime.now())
func2(**locals())
bsizer.Add(yourTxtCtrl, 1, wx.EXPAND)
sum(n for _, n in structure)
ssh.close()
do_something()
a[index] += 1
matplotlib.pyplot.show()
handler.setLevel(logging.DEBUG)
json.dumps(data, ensure_ascii=False)
a.add(2)
zip(s, s)
x[np.isnan(x)] = something_not_nan
self.grid_columnconfigure(2, weight=1)
B = np.linalg.inv(A.T).T
df1[df1 == 1].count()
os.getlogin()
process.wait()
sys.exit(1)
words = f.read().split()
cursor.close()
b += int(a)
br.add_handler(PrettifyHandler())
reactor.run()
writer.writerow(csvdata)
a = np.hstack(([0.2], np.linspace(1, 60, 60), [60.8]))
current_command()
pylab.hist([random_triangular(1, 6, 5) for t in range(10000)])
moving_average(a, n=4)
tf.py_func(func, inp, Tout, stateful=stateful, name=name)
result = set(x for l in array for x in l)
plt.show()
timeit([x for x in a if x in b])
ax = fig.add_subplot(111)
plt.show()
QtGui.QMainWindow.__init__(self)
d = dict((k, v) for k, v in list(d.items()) if k)
sys.exit(app.exec_())
print(soup.prettify())
fh.close()
plt.show()
df.apply(lambda x: x.apply(lambda x: [] if math.isnan(x) else x))
app.run(server=server)
arr.sum(axis=1).shape
r = [[] for i in range(4)]
df.append(df.sum(numeric_only=True), ignore_index=True)
a.get() + b.get()
lst.append(lambda x: f(x, i))
app.root.mainloop()
[x for x in L if x >= 0]
print(key, value)
setattr(module, name, value)
print(df.applymap(lambda x: x > 1))
[x[1] for x in sorted(random.sample(enumerate(myList), K))]
logging.set_up_done = True
np.hstack(results)
(a == b).sum()
newsampledata.sample(n, replace=True).reset_index(drop=True)
[sum(map(f, x)) for x in data]
sns.heatmap(data, ax=ax)
tornado.ioloop.IOLoop.instance().start()
time.sleep(0.1)
list(dict((tuple(x[:2]), x) for x in L).values())
[wordList[i] for i in indexList]
print(s.recv(1024))
sum(a[i] != b[i] for i in range(len(a)))
do_something_with(lines)
window.Minimize()
fig.canvas.draw()
fig.canvas.draw_idle()
dict.__init__(self, *args, **kwargs)
self.table.setColumnCount(5)
root.destroy()
signal.signal(signal.SIGINT, signal.SIG_DFL)
ax.pcolormesh(x, y, z, cmap=mpl.cm.Reds)
unittest.main(*args, **kwargs)
result = map(sum, a)
pd.concat([pd.DataFrame(a), pd.DataFrame(b)], axis=1)
lst.extend([5, 6, 7])
col.find_one()
numbers = iter(list(range(100)))
my_queue.put(x)
len({s[i:i + n] for i in range(len(s) - n + 1)})
shutil.copyfileobj(buf, fd)
ftp.cwd(path)
[x for item in l for x in repeat(item, 2)]
dict(zip(headers, zip(*sdata)))
pattern.format(s)
random.shuffle(x)
virtualenv
pd.isnull(df).any()
tasklist.append(newtask)
[x for x in lst if x.lower() not in seen and not seen.add(x.lower())]
array([[1, 0, 0], [0, 1, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0], [0, 1, 0]])
log = logging.getLogger(__name__)
app.run()
sys.exit(0)
list(takewhile(lambda x: x < 5, list(range(5))))
p.kill()
np.array_equal(A, B)
plt.show()
Base.metadata.create_all(engine)
new_array = np.array(df.index.to_pydatetime(), dtype=numpy.datetime64)
output.close()
nodes.CallBlock([call], [], [], [])
requests.post(url, data=data, headers=headers)
lambda i: isinstance(i, int)
any(isinstance(e, list) for e in my_list)
time.sleep(5)
{{value | unlocalize}}
test[(1), :]
df[0].to_json()
s.getvalue()
t = tuple(lst)
print(ET.tostring(graph, pretty_print=True))
zip(*[s, s])
im = Image.open(StringIO.StringIO(buffer))
test[:, (0)]
c = list(itertools.chain.from_iterable(zip(a, b)))
[item for item, flag in zip(s, b) if flag == 1]
reactor.run()
_draw_point(renderer, position, j, i)
os.path.dirname(sys.executable)
print(min(strings, key=len))
ax.set_xlim(0.5, 5)
[(x + (y,)) for x, y in zip(a, h)]
self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
sorted(mydict.items())
self.log.setLevel(logging.INFO)
np.multiply(np.arange(1, 5), 2 ** np.arange(0, 4)[np.newaxis].T)
[0, 1, 2]
plot(x, y, color=color)
Image.open(file).verify()
[x for pair in zip(l, l) for x in pair]
func(*args, **kwargs)
reactor.run()
{randint(0, 9): (v + 1) for v in list(mydict.values())}
R = np.array(mean_data[:, (0)])
layout.addWidget(QtGui.QLineEdit(self))
fcntl.flock(self.__lock_file.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
sys.exit(0)
r.grid(sticky=(N, E, S, W))
cv2.destroyAllWindows()
plt.show()
matches.append(os.path.join(root, filename))
my_package.py
regex.findall(filename)
a + b
print((m.span(), m.group(0)))
list(s)
[a for a, b in list(params.items())]
cur.close()
datetime.datetime.combine(tdate, datetime.time.min)
c = tuple(x - y for x, y in zip(a, b))
plt.show()
[e for sub in a for e in sub]
pygame.quit()
p.start()
dall.update(d)
X - np.dot(A, B)
Blender.Redraw()
im.wcs[::2, ::2]
server_socket.close()
print([key for key, group in groupby(x) if len(list(group)) > 1])
app.run(debug=True)
func()
requests.get(url, verify=path_to_bundle)
all(x[i] - x[i - 1] == x[i + 1] - x[i] for i in range(1, len(x) - 1))
app.run()
s.seek(0, os.SEEK_END)
pd.__version__
mainwin.mainloop()
plt.show()
map(tuple, np.array(list(combinations(list(range(N - 1, -1, -1)), M)))[::-1])
print(f.read())
plt.bar(x, y)
widget.deleteLater()
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
df.columns = df.columns.str.lower()
size = fields.IntegerRangeField(min_value=-100, max_value=100)
pd.concat([df, dict_col.apply(pd.Series)], axis=1)
main()
app.run()
ax2.xaxis.set_visible(False)
now = datetime.datetime.now()
app.MainLoop()
os.remove(os.path.join(dir, f))
(dt - datetime.datetime.utcfromtimestamp(0)).total_seconds()
func(that, session=session, *args, **kwargs)
print(np.mgrid[:5, :5])
sys.stdout.flush()
root.mainloop()
numpy.random.seed(0)
window.mainloop()
pprint(stiff)
wx.Frame.__init__(self, *args, **kwargs)
plt.subplot(2, 1, 2)
sys.exit(app.exec_())
a[np.array(n1)[:, (np.newaxis)], np.array(n2)[(np.newaxis), :]]
plt.legend(loc=0)
f_in.close()
print(a[s])
[[y for y in x if y not in to_del] for x in my_list]
time.sleep(0.05)
[t for t in tuples if all(f(t) for f in filters)]
json.loads(json.loads(b))
plt.show()
[(1, 5), (8, 11), (200, 202)]
my_dict = {k: (v if len(v) > 1 else v[0]) for k, v in list(tmp.values())}
dict1.update((k, dict2[k]) for k in keys)
list(itertools.combinations(items, 2))
pid, stdin, stdout, stderr
time.mktime(datetime.datetime.now().timetuple()) * 1000
ax.collections
data = [float(fractions.Fraction(x)) for x in data]
doc = lxml.etree.parse(xml)
(s[i:j] for i in range(length) for j in range(i + 1, length + 1))
my_list.remove(4)
scipy.array(x).ravel().tolist()
name = models.CharField(max_length=255)
itertools.chain.from_iterable([i] * i for i in range(1, 5))
l.append(x[:len(x) - k])
b = a[0][:]
data = p.stdout.readline()
plt.show()
[element for tupl in tupleOfTuples for element in tupl]
GC.remove_edge(clique[0], clique[1])
new_list = [{transform[k]: v for k, v in list(d.items())} for d in old_list]
pylab.show()
np.place(arr, ~np.in1d(arr, valid), 0)
conn.send(stranza)
fig.canvas.draw()
plt.show()
(A == B).all()
startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
date += datetime.timedelta(days=1)
cbar.set_clim(newimg.min(), newimg.max())
writer.writerows(sheet.row_values(row) for row in range(sheet.nrows))
f = (lambda a, b, c: lambda x: a + b * c - x)(a, b, c)
[a for a in x if a != 2]
s1[s1.isin(s2)]
pygame.event.poll()
data = json.loads(resp.text)
sorted(lst)[-20:]
pptable(x_axis, y_axis, a.tolist())
exec(open(filename).read())
s.reset_index()
list(set([(a, l.count(a)) for a in l]))
b = np.fill_diagonal(np.zeros((N, N)), value)
QtCore.QThread.__init__(self)
session = request.session
numpy.matrix(numpy.identity(n), copy=False)
list(itertools.product(*arrays))
bytearray(random.getrandbits(8) for _ in range(size))
fig.subplots_adjust(bottom=0.2)
a.A * ~mask.A
sorted(array, key=lambda x: x[:24])
print(mirror([mirror(sublist) for sublist in inputs]))
deletemydict[k]
object_list.sort(key=lambda x: string_list.index(x.key))
list(itertools.zip_longest(fillvalue=0, *lists))
driver.find_element_by_id(tc.value).click()
cherrypy.engine.block()
plt.draw()
pprint({k: getattr(f.__code__, k) for k in dir(f.__code__)})
[x for x in lst if x % 2]
plt.scatter(x, y, c=t, cmap=cm.jet)
deletemy_dict[key[-1]]
time.sleep(0.1)
print(uuid.uuid4())
A[~np.isnan(A)].mean()
P[np.arange(n), x, y]
form = ContactForm()
numbers.append(random.randint(a, b))
client.close()
s.index(t.lower())
pygame.mouse.get_pos()
t = s.reshape(-1, k)
random.shuffle(l, random.random)
temp.iloc[[0, 1, 4]].index.tolist()
urlfetch.set_default_fetch_deadline(60)
print([(x - empty) for x in test])
sys.exit(0)
float(s)
time.sleep(1)
plot(x, sin(x) * cos(x))
[x for x in range(m) for y in range(n)]
request = client.read_holding_registers(0, 4, unit=1)
zlib.decompress(data)
print(line.rstrip())
sorted(list(counts.items()), reverse=True, key=lambda tup: tup[1])[:top]
df.stack(0).reset_index(1)
app.exec_()
datetime.now()
time.sleep(1)
log.start()
out = (m[1:] > m[:-1]).sum() + m[0]
plt.show()
list(filter(os.path.isdir, os.listdir(os.getcwd())))
df.columns[df.isnull().any()].tolist()
ax.scatter(x, y, zflat)
tk.Text.__init__(self, *args, **kwargs)
df.groupby(df.index).max()
a = np.arange(10)
d = ast.literal_eval(some_string)
dict(list(dict1.items()) + list(dict2.items()))
plt.show()
obj = session.query(ObjectRes).order_by(ObjectRes.id.desc()).first()
plt.ylim([-0.5, 1.5])
indices = [i for i, x in enumerate(myList) if re.match(regex, x)]
Series(df.values.ravel()).unique()
plt.ylim(-1, 1)
driver.close()
pyodbc.connect(connect_string, autocommit=True)
self.widget_name.deleteLater()
len(set(len(x) for x in l)) <= 1
val = img.getpixel((x, y))
a = [a]
D()
foo = decorator(foo)
time.sleep(2)
a = [0] * 10000000
df.reindex(columns=cols)
A = map(lambda t: list(t), A)
img = client.images.get(IMAGE_ID)
text.splitlines()[0]
self.response.out.write(template.render(path, template_values))
raise FileNotFoundError(errno.ENOENT, os.strerror(errno.ENOENT), filename)
file.close()
time.sleep(0.01)
print(getglobals(f))
max(set(lst), key=lst.count)
ExampleApp().run()
author = models.CharField(max_length=60)
sys.stdout.flush()
plt.axis([min(x_arr), max(x_arr), max(y_arr), 0])
[myfunc(x, y) for x, y in myiter(data)]
all(bb[k] == v for k, v in aa.items() if k in bb)
plt.show()
datetime.date.fromordinal(datetime.date.today().toordinal() - 1)
plt.plot(x, y)
root.destroy()
set(x)
x[:, (i)] = np.roll(x[:, (i)], i)
p1.stdout.close()
print(cmp(list1, list2))
self.main.show()
plt.show()
Gtk.main()
dict(zip(unique, counts))
sorted(lst, key=str.lower, reverse=True)
sorted(myList, key=itemgetter(1))
p.wait()
results = dict.fromkeys(inputs, [])
[indexes[x] for x in l]
f = x ** 2 + 1
self.list_of_strings.append(str_to_add)
words[word[0] + word[-1]].append(word)
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
self.a = a, self.b = b
sock.setsockopt(socket.IPPROTO_TCP, TCP_KEEPALIVE, interval_sec)
plt.show()
plt.show()
(i * i for i in range(5))
call([command, parameter])
pyplot.show()
d[key][0] = x
(dt.replace(month=dt.month % 12 + 1, day=1) - timedelta(days=1)).day
plt.close()
driver = webdriver.PhantomJS()
print(match.group(0))
time.sleep(float(sys.argv[1]))
np.where(~a.any(axis=1))[0]
[z0] * len(seconds)
50 - List1[0][0] + List[0][1] - List[0][2]
ax.plot(x, y)
shutil.copy2(src, dst)
client.disconnect()
df = df.loc[mask]
m.save()
[i for i, _ in itertools.groupby(ks)]
entity.key().id_or_name()
ax.set_ylim([-1, 10])
self.Bind(wx.EVT_ERASE_BACKGROUND, self._onEraseBackground)
1, 0, 1, 0, 0, 0, 0, 0, 1, 0
plt.show()
pd.rolling_mean(aapl, 200).plot()
df[~pd.isnull(df[list_of_cols]).all(axis=1)]
df.apply(lambda x: x.apply(lambda x: [] if isnan(x) else x))
min(t, key=lambda i: (i[1], -i[2]))
ax.autoscale()
response = br.submit()
string_list.sort(key=lambda s: len(s), reverse=True)
plt.show()
next((i, d) for i, d in enumerate(lod) if 1 in d)
sorted(l, key=lambda name_score: int(name_score[1]), reverse=True)
rows = table.tbody.find_all(True, recursive=False)
time.sleep(0.1)
replace(my_dict)
json.dumps(c.__dict__)
response = urllib.request.urlopen(req).read()
np.random.shuffle(arr)
f.write(data)
foo = Foo()
root.mainloop()
next([i for i in userInput if i in wordsTask])
QtGui.QDialog.__init__(self, parent)
numpy.linalg.lstsq(a, b)
browser.submit()
[(entry if tag in entry else []) for tag in tags for entry in entries]
plt.show()
element.clear()
conn.commit()
A.test()
QMainWindow.__init__(self)
s.sendmail(sender, recipients, msg.as_string())
map(id, a)
proc.stdin.close()
y *= np.hanning(len(y))
a.shape
np.where(np.triu(np.ones(A.shape[0], dtype=bool), 1), A.T, A)
print(sum(iter(lambda : len(sys.stdin.read(4096)), 0)))
contents = self.view.substr(sublime.Region(0, self.view.size()))
sorted(new_lst, reverse=True)
gevent.sleep(5)
print(expr.evalf(subs=dict(a=2, b=4, n=5)))
np.where(arr == arr.min())
a.__getitem__(slice(0, 1)).__setitem__(0, 1)
os.lseek(fd, 0, os.SEEK_SET)
logging.getLogger().setLevel(logging.DEBUG)
parser = argparse.ArgumentParser()
dict.fromkeys(my_list, 0)
plt.show()
pool.join()
bin(int(binascii.hexlify(st), 16))
np.sqrt(((A - B) ** 2).sum(-1))
print(json.dumps(out))
plt.show()
list({t[1]: t for t in reversed(l)}.values())
ax.add_artist(rect)
web.HTTPError.__init__(self, status, headers, data)
ax.set_xticks(list(range(0, 11)))
img = cv2.imdecode(nparr, cv2.CV_LOAD_IMAGE_COLOR)
value.Increament()
df1.merge(df2)
[(((x - 1) % 8 + 2) * x) for x in range(1, 21)]
pyl.draw()
ax[1].autoscale(True)
time.sleep(1)
{k: d1[k] for k in d1.keys() & l1}
plt.show()
x.loc[(x.B >= 111.0) & (x.B <= 500.0)]
dict(y, **x)
list_.sort(key=lambda x: len(x[1]))
server.login(user, password)
array([[1, 2], [0, 2]])
Note.objects.filter(created__year=years.year)
np.nonzero(starts)[0], np.nonzero(ends)[0]
plt.show()
print(p.stdout.read())
print(handle.read())
[el for el in lst if isinstance(el, collections.Iterable) and st in el]
random.shuffle(keys)
print(test[numpy.in1d(test[:, (1)], wanted)])
int(numberA), int(numberB)
np.linalg.lstsq(a, b)
somelist.sort(cmp=lambda x, y: cmp(x.resultType, y.resultType))
set(df.Col1).union(set(df.Col2))
s.decode(encoding)
[c for c in words if not c.isalpha() and not c.isdigit() and not c.isspace()]
[d[x] for x in a]
float(1.001).is_integer()
foo()
self.user.get_full_name()
self.Bind(wx.EVT_CHAR_HOOK, self.hotkey)
arr[1, -2]
image[idx] = chex[idx]
print([tuple(t[1] for t in v) for k, v in groupby(myList, key=itemgetter(0))])
p.kill()
ax1.legend(loc=2)
f.close()
list(my_dataframe)
root.mainloop()
[k for k, v in list(my_counter.items()) if v > 1]
df = pd.concat(list_of_series, axis=1).transpose()
driver.switch_to_window(driver.window_handles[1])
sys.stdout.write(chr(c + 48))
equation1(*list_of_parameters)
bool(set(a) & set(b))
os.kill(pid, 0)
self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
print(line)
Player.objects.filter(Q(games1__pk=self.pk) | Q(games2__pk=self.pk))
values = json.loads(data)
np.triu(A.T, 1) + A
x = rnorm(n=100, mean=0, sd=1)
l.append((4, 5))
ax.set_xlim([-1, 10])
[[j.span() for j in rex.finditer(i)] for i in sequence_list]
browser.set_window_size(1400, 1000)
map(math.log10, x)
sorted(tuples, key=lambda x: (x[0], x[2]))
A[np.isnan(A)] = 0
froms[p[0]].append(p)
result = np.array([list(g) for _, g in groupby(a)])
BeautifulSoup(r.content).title.text
out = np.concatenate(input_list).ravel()
urlparse.urljoin(url, urlparse.urlparse(url).path)
mrg.drop(drops, axis=1)
list(compress(seq, criteria))
x = 256 * ord(pS[0]) + ord(pS[1])
xvfb.terminate()
pylab.show()
[0, 1, 0, 9, 0, 25, 0, 49, 0, 81]
quit_gracefully()
a += b[idx].sum(0)
d = np.array(dataPoints.tolist())
posts = TodaysObject.objects.filter(datafilter)
first2vals = [v for v in list(mydict.values())[:2]]
np.random.shuffle(A)
plt.legend()
data[0]
s.close()
cls.objects.get(pk=self.pk)
d2 = dict((k, v) for k, v in list(d1.items()) if v > 0)
[1, 1]
z = dict(itertools.chain(iter(x.items()), iter(y.items())))
np.median([2, 0, 1, 0, 0])
B[X.ravel()] = A.ravel()
print([k for k, v in d.items() if v == 1])
draw()
runserver.py
plt.plot(x, f(x), zorder=1)
redirect(client.authorize_url)
urllib.request.urlopen(url, postData)
plt.show()
df[df.ix[:, 2:].abs().lt(1).all(1)]
k.set_contents_from_string(data_file.readlines())
df.reindex(idx)
subprocess.Popen([name], stdout=devnull, stderr=devnull).communicate()
reactor.run()
gtk.main()
print(dt.year, dt.month, dt.day)
assert Implementation().frobnicate()
self.modules = []
df1.merge(df2)
setattr(self, k, v)
os.unlink(path)
plt.show()
sys.exit(app.exec_())
l[i].append(j)
ax.plot(list(range(10)))
np.argwhere(M.T == 0).squeeze()
print(list(set(tuple(i) for i in a)))
browser.get(url)
x.reshape(2, 2, 2, 2).swapaxes(1, 2).reshape(4, -1)
mpl_plt.show()
con.close()
locals().update(parm)
result = DataFrame(result).reset_index(drop=True)
type(b) is Test1
map(list, set(map(tuple, k)))
d = {t.key: t for t in [t0, t1, t2]}
b.shape
any(x in someDict for x in someList)
d = dict((k, tuple(v)) for k, v in d1.items())
time.sleep(0.5)
plt.show()
array1.reshape(array2.shape)
l.pop(0)
b = map(lambda x: x[:9], g)
os.path.join(path, format)
app.mainloop()
plt.clf()
np.random.choice(np.flatnonzero(b == b.max()))
instance.save()
print(np.allclose(r[1], b))
list(d.keys())
parse_freebase_quadruple_tsv_file(file_name)
first2pairs = {k: mydict[k] for k in list(mydict.keys())[:2]}
writer.close()
[(i, z) for i in [1, 2] for z in zs_i]
((x, y) for x in range(width) for y in range(height))
pylab.show()
ax.set_yticks([])
cursor.execute(sql, args)
d[cols[0]] = dict((headers[idx], v) for idx, v in enumerate(cols[1:]))
sys.exit(app.exec_())
group[group.apply(lambda x: len(x) > 1)]
root.mainloop()
random.shuffle(itrange)
winfile.close()
self.exec_()
result[i].append(j)
avgs[np.where(binplace == 1)]
self.user_set.all()
sys.exit()
sess.run(train_op)
random.randint(1, 6)
server.mainloop()
a = numpy.nan_to_num(a)
my_file.copy(to_file)
Py_Finalize()
find_eulerian_tour(cg4)
df[-mask.any(axis=1)]
deletetest[2]
b += [c]
plt.gcf().axes[0].xaxis.set_major_formatter(formatter)
rdd = df.rdd
plt.show()
print(doc.toxml())
plt.plot(xs, density(xs))
numpy.column_stack((a, b, c))
A - mean[:, (np.newaxis)]
grid[[a[second_mask] for a in np.where(mask)]] = 100
func()
fcntl.ioctl(s.fileno(), SIOCGIFFLAGS, ifr)
auth_login(request, user)
a[0, 1, 2]
print((key, values))
frame.axes.get_xaxis().set_ticks([])
ax2.contour(theta_edges[:-1], r_edges[:-1], H)
print(t.total_seconds())
map(len, s.split())
max(set(list), key=list.count)
ax1.yaxis.tick_left()
foo = _log_error(logger)(partial(bar, someparam))
urllib.request.install_opener(opener)
self.box.grid(column=0, row=0)
sys.exit(0)
request.session.set_expiry(request.session.get_expiry_age())
dict([(an_object.name, an_object) for an_object in object_list])
sys.exit()
render_to_response(your_custom_template, ctx)
df.ix[0]
draw.text((10, 0), txt, (0, 0, 0), font=font)
layout.addWidget(self.lineedit)
ax.add_patch(polygon1)
a.split()
[9.444064187694842, 1.2256912728995506]
{{jsonData | safe}}
not seen.add(x)
f.close()
{x: (x * x) for x in range(10)}
sys.stdout.write(data)
plot(X, Y)
wx.Dialog.__init__(self, *args, **kwds)
datetime.timedelta(hours=-5)
time.mktime(now.timetuple())
time.sleep(10)
tuple(l.T)
mngr.window.setGeometry(newX, newY, dx, dy)
isinstance(b, Test1)
my_file.seek(0, os.SEEK_END)
[s[i:j] for i, j in zip_longest(start, end)]
np.random.shuffle(b)
writer.writerows(new_rows)
print(list(matdata.keys()))
con.close()
reverse(str1[1:]) + str1[0]
fig.canvas.draw()
print(simplejson.loads(json_string))
__init__.py
self.canvas.draw()
{{form.certification()}}
[ComVisible(true)]
df = pd.concat(list(pd.read_csv(Reader(gen()), chunksize=10000)), axis=1)
len(haystack) - len(parts[-1]) - len(needle)
sorted(l, key=lambda x: (x[:-1], x[-1].isdigit(), x))
dict(widget_set.pop())
plt.show()
s.group(0)
list(q)[0]
print(lilfoo.baaz)
sorted(l, key=lambda x: float(x[1]))
self.button.pack()
print(regex.search(data).groups())
sys.exit()
ax.plot_surface(X, Y, Z)
plt.show()
print([n for n in (x.giveMyNum() for x in q) if n > 1])
L2.sort(key=lambda x: L.index(x))
int(log10(x)) + 1
mySet = set(x[0] for x in TUPLES)
os.kill(9999999999999, 0)
user.profile.save()
Foo.__init__.__self__.__class__
print(track.permalink_url)
a, b = int(a), a - int(a)
plt.show()
newlist.append(i)
np.frombuffer(test)
dict([(k, v) for k, v in list(mydict.items()) if k >= 6])
l[:1] + [b for a, b in zip(l, l[1:]) if a != b]
left.remove(left[0])
local_file.write(f.read())
[seq for seq in my_list if [item for item in seq if some_condition()]]
[(2 ** i) for i, v in enumerate(bin(109)[:1:-1]) if int(v)]
server.serve_forever()
print(key, d[key])
model_to_dict(instance, fields=[field.name for field in instance._meta.fields])
sys.exit(0)
{k: min(h1.get(k) or h2[k], h2.get(k) or h1[k]) for k in list(h1.keys()) + list(h2.keys())}
platform.system()
sorted(A, key=A.get, reverse=True)[:5]
stdout, stderr = p.communicate()
[age] = [t[1] for t in mylist if t[0] == 10]
Publication.objects.all().delete()
[(a, b) for a in A for b in B if a in b]
number = random.randint(5, 20)
some_queue.get()
re.findall(s, text)
np.min(np.nonzero(np.hstack((B, 1))))
m = coo_matrix((v, (l - 1, c - 1)), shape=(l.max(), c.max()))
func(func, *args, **kwargs)
pygame.display.flip()
reactor.run()
c.setopt(pycurl.WRITEFUNCTION, lambda bytes: len(bytes))
unsure_rows[key].append(row[key])
(item for sublist in list_of_lists)
numpy.digitize(b, a)
cleaned = [_f for _f in map(str.strip, words) if _f]
ax.set_xlim(-10, 10)
app.MainLoop()
numpy.array([0.24])[0] == 0.24
type(list(d.values()))
self.assertEqual(content, expected_content)
s = pd.Series([0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1])
glob.glob(name)[0]
result_dict = [u.__dict__ for u in my_query.fetchall()]
curses.endwin()
time.sleep(1)
getattr(filters, method)(**options)
driver.switch_to_window(driver.window_handles[-1])
{k: map(sum, zip(*v)) for k, v in list(d.items())}
a[:, (1)]
reactor.run()
newNums = [i for i, x in enumerate(nums) if x == 12]
os.close(fh1)
fig = plt.figure(figsize=(6, 6))
now = datetime.now()
s.play()
werte[1:-1][(diff(werte)[:-1] > 0) * (diff(werte)[1:] < 0)]
numpy.unravel_index(A.argmin(), A.shape)
f.__dict__.update(b)
sys.stdout.buffer.write(pdf_file.read())
ax.xaxis.set_minor_locator(MultipleLocator(0.2))
df = df[df.columns[:11]]
[True, True, False, True, True]
f = lambda *x: sum(x) - 1
print(dir(__builtins__))
contents = urllib.request.urlopen(request).read()
print(args)
ax.yaxis.set_ticks([16, 8, 4, 2, 1, 0])
numpy.reshape(array, array.shape + (1,))
min(timeit.repeat(lambda : dict((k, v) for k, v in zip(keys, values))))
deletex[i + 1:]
self.setWindowFlags(Qt.FramelessWindowHint)
list[0].pop(0)
req.close()
[x[0] for x in sorted(data, key=lambda x: x[1], reverse=True)[0:6]]
pdb.set_trace()
[elem[:12] for elem in g]
plt.show()
setattr(module_obj, method_name, func)
self.clickcnx.close()
df.reindex(approach1(df.A.values, df.B.values))
re.findall(pattern, s)
pd.tslib.repr_timedelta64
app.run(debug=True)
next((x for x in lst if x % 2 == 0))
self.assertDictEqual(a, b)
b.insert(bisect(b, a), a)
union([(10, 12), (9, 16)])
f.write(line)
build_stylus()
br.set_response(response)
[k for k, v in list(mydict.items()) if list(mydict.values()).count(v) > 1]
pygame.init()
dev.leds(verbose=True)
[sum(sublist) for sublist in zip(*myListOfLists)]
pygame.init()
ax = fig.add_subplot(111)
res = cv2.bitwise_and(closex, closey)
print(__file__)
plt.show()
eval(x)
cv2.destroyAllWindows()
c = [[(x + b[i]) for i, x in enumerate(y)] for y in a]
funkytown._asdict()
fig, ax = plt.subplots()
print(read_records(data))
Foo().bar()
glUniform1i(self.tex2D, 0)
list.__getitem__(self, index)
print(parser.parse(treebank.sents()[0]))
numpy.vstack((x, y))
[[], []]
ax.set_xticks(xticks)
button.clicked.connect(lambda : self.commander(command))
l[0][0] += 1
tree.removeItemWidget(i, 0)
fig.canvas.draw()
sys.getsizeof(i)
print(fibonacci(int(eval(input()))))
ax = fig.add_subplot(1, 1, 1)
d = {b: a[:, (i)] for i, b in enumerate(a)}
tk.mainloop()
f.write(content)
TextCtrlInstance.GetValue()
np.flatnonzero(~a[:-2] & a[1:-1] & a[2:])
asdf.save()
plt.ylim(10, 40)
libdl.dlclose(handle)
Z = func(X, Y)
plt.show()
ax.set_yticklabels(y_label, fontsize=20)
cursor.execute(qry, list(myDict.keys()) + list(myDict.values()))
os._exit(0)
random.shuffle(r)
my_treeview.setEditTriggers(QAbstractItemView.NoEditTriggers)
total = value[c1 - 1] + value[c2 - 1]
plt.show()
df.groupby(level=0, sort=False).transform(lambda x: sorted(x, key=pd.isnull))
print(lxml.etree.tostring(doc))
m.mask = np.repeat(i == j, k.size, axis=2)
subversion.search(s).group()
raise AssertionError(expression2)
calendar.monthrange(2012, 2)[1]
frames.append(pandas.DataFrame(row))
np.sqrt((a * a).sum(axis=1))
QtGui.QWidget.__init__(self)
print(os.path.abspath(my_module.__file__))
plt.show()
self.view.setModel(self.model)
random.shuffle(word)
data.setdefault(k, []).append(v)
self.func(*args, **self.kwargs)
print(y.max())
df.apply(OrderedDict)
print(list(date_range(5, 2)))
QMainWindow.__init__(self, *args)
phrase.strip().capitalize()
min_keys = [k for k in d if d[k] == min_value]
list(choice(json_obj[k]).values())[0]
df.head()
df.plot(subplots=True)
[tuple(d.values()) for d in l]
time.sleep(1)
sys.path.insert(0, p)
plt.show()
sys.stdout.write(next(spinner))
new_lst.append(x)
sys.stdout.flush()
curses.endwin()
PyErr_Clear()
np.asarray(np.bmat([[A, Z], [Z, B]]))
ax.add_patch(polygon2)
sock.bind((UDP_IP, UDP_PORT))
nodeenv - -python - virtualenv
p.wait()
list(itertools.product(*l))
helloworld.helloworld()
plt.show()
pd.to_numeric(s)
sum(x > 7 for x in a)
abs(n)
df = pd.read_csv(io.StringIO(string), delim_whitespace=True)
ax = pylab.gca()
p.stdin.close()
file.close()
threading.Timer(60, f).start()
plt.show()
self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
x[0].append([])
l = list(t)
obj.func1()
HttpResponse(html)
sys.stdout.flush()
sum(bool(x) for x in l)
c = np.in1d(a, b)
diag = [row[i] for i, row in enumerate(mat)]
[0, 0, 0, 0, 1, 1],
x.most_common(1)[0][0]
pygame.quit()
self.sections.clear()
all(a % i for i in range(2, a))
sys.stderr = logger
sys.exit(100)
time.sleep(10)
[[item for item in seq if some_condition] for seq in my_list]
list(range(start, end, step))
conn.close()
proc.wait()
plt.plot()
plt.show()
PyObject_HEAD_INIT(NULL)
age = models.IntegerField()
print(response.status_code)
main()
sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][0], reverse=True)
f.write(bytes(bin_array))
sum([i for i in l1 if isinstance(i, int)])
np.meshgrid(x, x, sparse=True)
df.iloc[0:2, :]
logging.getLogger().addHandler(console_handler)
app.MainLoop()
max([x for x in ls if x < 0])
data = numpy.arange(5 * 4).reshape(5, 4)
all(x * y > 0 for x, y in zip(l1, l2))
app.MainLoop()
f = lambda x: x[0] * x[0] * x[0] + x[1] * x[1]
datetime.datetime.date(2011, 1, 1)
self.grid_columnconfigure(0, weight=1)
sleep(1)
plt.xlim(0, 125)
logger = logging.getLogger(__name__)
print([int(x) for x in T1])
A[~np.in1d(A.dot(cumdims), B.dot(cumdims))]
[x for x, y in groupby(L) if len(list(y)) < 2]
plt.scatter(x, y)
TimeModel.objects.create(time=td.total_seconds())
__init__.py
df.columns[pd.isnull(df).any()].tolist()
a = [([0] * 8) for _ in range(8)]
print(binascii.hexlify(content))
now.replace(minute=0, hour=0, second=0, microsecond=0)
p.wait()
plt.show()
sys.exit()
writer.writerows(rows)
time.sleep(5)
float(x)
sys.path.append(dirname(__file__))
all(x == L[0] for x in L)
[a for a in s if s.count(a) == 1]
fig, ax = plt.subplots()
np.multiply(a, b)
result = [separator.join(map(str, x)) for x in product(*lists)]
[name for name in data1 if name in data2]
df.drop_duplicates()
server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
writer.close()
print(imap_conn.list())
plt.show()
os.path.dirname(sys.argv[0])
json.dumps(data)
[[random.random() for i in range(N)] for j in range(M)]
src.close()
gtk.main()
datetime.date.fromtimestamp(ts).month
df.apply(lambda x: sum(x.isnull().values), axis=0)
print(json.dumps(e, cls=new_alchemy_encoder(), check_circular=False))
print(d.get(frozenset((2, 1))))
time.sleep(5)
l = [d for d in days if d.weekday() in [1, 2]]
barbar.py
[x for i, x in enumerate(y) if i != 1]
s.lstrip(punctuation)
data = urllib.request.urlopen(url).read()
wav_file.close()
ax.legend()
x()
os.rename(os.path.join(base, old_name), os.path.join(base, new_name))
plt.show()
ax.scatter(x, y, c=c, cmap=cmap)
chain.from_iterable(combinations(s, r) for r in range(1, len(s) + 1))
np.vstack(a)
ftpc.close()
fig.tight_layout()
ax.set_ylim(0, 10)
Response(serializer.data)
ax.set_xlim(0, 20)
plt.legend()
kNN1.fit(data, class_labels)
df.index
a = a[(a >= -100) & (a <= 100)]
datetime.datetime.fromtimestamp(1004256400)
self.finish()
p.terminate()
a.reshape(-1, np.prod(a.shape[-2:]))[:, ::-1].reshape(a.shape)
df.max(1)
matches.append([os.path.join(root, filename), error])
sock.connect((address, port))
func()
__init__.py
fig.close()
time.sleep(5)
R2a.__init__(self)
map(int, sum(map(lambda x: list(str(x)), lst), []))
plt.plot(x, x)
app.mainloop()
Series(df.Letter.values, index=df.Position).to_dict()
df.prod(axis=1)
l.sort()
dicts.flatMap(lambda x: list(x.items()))
sorted(li, key=lambda x: x[1])
[myfunc(a, b) for a, b in zip(idata, idata)]
root.overrideredirect(True)
[np.max(arr) for arr in np.split(v, np.where(mask)[0] + 1)]
r = client.post(URL, data=login_data, headers=dict(Referer=URL))
setattr(self, name, value)
print(top[0][1][2])
random.seed(1)
np.histogramdd(data, bins=(2, 2, 2))[0]
numpy.count_nonzero((25 < a) & (a < 100))
a += numpy.histogram(b, numpy.arange(len(a) + 1))[0]
sorted(arr[ind])
response = view(request)
a[np.isfinite(a)]
ax.xaxis.set_major_locator(MultipleLocator(20))
np.eye(d.shape[1]) * d[:, :, (np.newaxis)]
time.sleep(1)
plt.show()
dict(d1, **d2)
clf.fit(X_train, y_train)
[(0) for _ in range(10000)]
string.format_map({k: Pluralizer(v) for k, v in list(data.items())})
[c for c in df]
ax.set_navigate(False)
data = json.loads(response.body)
dict((c, string.count(c)) for c in string)
sys.path.insert(0, p)
self.stdout.write(data)
temp[::-1].sort()
[peaks([x, y]) for x, y in zip(xscat, yscat)]
[1, 4, 7]
fig.tight_layout()
sys.exit(app.exec_())
df.loc[df.A.isin(a)]
list(_)
print(output[0])
[[1, 5], [6, 11]]
time.sleep(5)
print(argparse._sys.argv[0])
pd.DataFrame(data)
root.mainloop()
driver.manage().timeouts().pageLoadTimeout(15, TimeUnit.SECONDS)
matches.extend(isbn.findall(line))
y[:, ::2]
OrderedDict(items)
time.sleep(0.1)
a = np.array(a)
application = wsgi.WSGIHandler()
a = a.clip(min=0)
threading.Thread.__init__(self)
lambda x, y: set([x]) == (y if b else lambda x, y: x in y)
main()
plt.show()
random.randrange(100, 20001, 100)
plt.figure(figsize=(10, 7))
print(m.group(1))
cv2.waitKey(0)
f.close()
results.append((url, urlopen(url).read()))
ax2.set_xlim([0, repeat_length])
root.mainloop()
array = list(range(numCase))
list(solve(4))
plt.show()
convertfile.write(line)
match.start(1)
plt.show()
np.put(a, np.ravel_multi_index(idx.T, a.shape), 5)
stackless.run()
np.argmax(np.random.multinomial(1, a, 1))
lin.split()
print(dict(zip(keys, zip(*data))))
result = [dishes[key] for key in list(crucial.keys()) & list(dishes.keys())]
df
A.dot(B).dot(C)
sorted(points)
solution.sort_index()
df.isnull().any()
data = data.groupby(data.index).sum()
memory2.clear()
numpy.hstack((x, y))
name.ljust(15)[:15]
[datetime.date(2010, 2, 27), datetime.date(2010, 2, 28)]
f2.write(lines[i + 2])
print(os.walk(DIR_PATH).next()[2])
sys.stdout.write(os.read(stdout.fileno(), 1024))
[line[i:i + n] for i in range(0, len(line), n)]
Point(x, y)
ax = fig.add_subplot(211)
db.session.add(new_provider)
threading.Thread(target=play_audio).start()
Counter(words).most_common(10)
np.where(np.array([0, 1]))
[100, 10, 20]
cur.execute(query, args)
df = df.sort()
max(l_one + l_two)
gnuplot.stdin.flush()
ppf(q, loc=0, scale=1)
to_file.write(replacement_line)
ax.yaxis.set_major_locator(MultipleLocator(0.5))
pylab.show()
hatch_path_stroke.width(1.0)
ctypes.c_void_p(offset)
__init__.py
s.apply(pd.to_datetime, dayfirst=True)
locals()[string1 + string2]()
print ()
np.mean(gp)
df[df.groupby(level=0).transform(np.size).gt(1).values]
combo.focus_set()
ws.write(rowi, coli, float_if_possible(value))
sys.exit(app.exec_())
fig.canvas.draw()
df.sort_index(inplace=True)
np.count_nonzero(a[:2, :2])
df[cols] = np.where(df[cols] < 0, np.nan, df[cols])
remove_extras_and_sort(my_list)
signal.signal(signal.SIGINT, signal_handler)
d[len(lst)] += 1
time.sleep(10)
new_instance.save()
br.set_handle_redirect(True)
p[i:j] = list(sorted(p[i:j]))
text_classifier.fit(X_vectorized, y_train)
salesdata.Outlet_Size.dropna().unique()
l.extend(map(int, (w for w in line.split() if w.isdigit())))
{{person.get_gender_display}}
instance.save()
files.extend(glob(os.path.join(dir, pattern)))
[os.path.splitext(os.path.basename(fn))[0] for fn in a]
ppp_data.rename(columns=dict(zip(columns[2:], names)), inplace=True)
lines = random.sample(f.readlines(), 5)
f.write(text)
sumlog([5, 4, 1, 0, 2]) < sumlog([5, 1, 4, 0.0001, 1])
LOGNORM.DIST(x, Ln(mean), standard_dev, FALSE)
LOGNORM.DIST(x, Ln(mean), standard_dev, TRUE)
self.attr2 = attr2
bottle.run()
a.any(axis=1)
array([2, 2, 2, 2, 1, 2, 1, 2])
print(file(path).read())
nx.draw(G, pos=pos, with_labels=True)
open_smbus.restype = ctypes.c_void_p
expit(0.458)
a.max(axis=0)[0]
time.sleep(1)
letter2, letter1, letter4, letter5
cur.close()
os.path.split(s)
ax.add_patch(rect1)
sys.path.append(path)
time.sleep(1)
any(char.isdigit() for char in inputString)
Py_Finalize()
out_file.write(line)
print(xls.sheet_names())
list(itertools.product(*l))
bool(np.array([0, 0]))
(1, 2)[0:1]
pickle.loads(pickle.dumps(C()))
list(itertools.chain.from_iterable(a))
DBSession.close()
output_stream.close()
plt.show()
cherrypy.engine.exit()
os.execl(sys.executable, sys.executable, *sys.argv)
queryset.filter(mycolname__len__gte=10)
file_out[-1] = file_out[-1][:-1]
A[(0, 1, 2), (0, 1, 0)]
reactor.run()
list_.sort(key=lambda x: float(x[1]))
[0.0, 0.0, 0.0, 0.4, 0.6]
print(match.group(), match.start(), match.end())
e = Example()
ipshell()
values[np.where((coo == [1, 2]).all(1))].mean()
list(adjacent_tuples(list(range(8)), 4))
self.Bind(wx.EVT_LEFT_UP, self.OnLeftUp)
app.run()
base = df.index.get_indexer_for(df[df.A == 2].index)
self._tree = (lambda f: f(f))(lambda t: defaultdict(lambda : t(t)))
print(json.dumps(data, ensure_ascii=False))
doctest.testmod()
logging.basicConfig(level=logging.DEBUG)
(m[1:] > m[:-1]).sum() + m[0]
cords_set.add((x, y))
print(list(message.keys()))
t = dt.time(0, 0, 0)
df.tail(1).index
syncdict.update([(key, 0)])
plt.show()
f.close()
self.window2.show()
(s + mystring for s in mylist)
other_list.remove(other_list[index])
(a[n:] + [default])[0]
maxlen = max(len(sublist) for sublist in a)
x, y = zip(*lst)
run()
str(dt)
[(x - 1) for x in perm_index[i][1:]]
s.sendmail(from_email, emails, msg.as_string())
self.entry.pack()
True
sent_detector.tokenize(your_text)
tuples = [tuple(x) for x in subset.values]
app.exec_()
time.sleep(1)
layout.addWidget(grview)
A[0:4, (1)]
module.workflow_set.filter(trigger_roles__in=[self.role], allowed=True)
do_something_with(wrapper[0])
[([0] * len(row) if 0 in row else row) for row in matrix]
plt.show()
datetime.time(0)
r = requests.delete(URL_delete, params=mydata)
app.register_blueprint(heysyni)
print(os.getcwd())
plt.subplots_adjust(right=0.75)
any(sublst == lst[i:i + n] for i in range(len(lst) - n + 1))
out.remove(x)
winsound.Beep(Freq, Dur)
print(sorted(inputWords, key=lambda word: [alphabet.index(c) for c in word]))
urllib.parse.unquote(s)
testit()
task.cancel()
bothlists[x[0]].append(x)
request.data
requests.delete(url, **kwargs)
ax.autoscale()
new_list = map(operator.itemgetter(1), old_list)
glVertex2i(10, 10)
zip(*lis)
df.ix[:, ((df == 0).all())]
cv2.destroyAllWindows()
print(np.where(~mask)[0])
ax.legend()
plt.imshow(im2, cmap=plt.cm.gray)
p = Process(target=fn)
popen.wait()
self.periodiccall()
plt.ylim([-400, 400])
[Teaser(Context(result)) for result in self.post.results]
mp.Process(target=run, args=(_QUEUE, cb, func, args, kwargs)).start()
print((dt.datetime.combine(dt.date(1, 1, 1), t) + delta).time())
len([_f for _f in a_list if _f]) == len(a_list)
plt.show(block=True)
sys.stdout.flush()
os.path.exists(my_path)
ax.set_ylim([-2, 2])
mp.Process.__init__(self)
m[:, ([0])].shape
self.button.clicked.connect(self.testMethod)
print((m.group(1), m.group(2)))
a.reshape(2, 2, 2, 2).sum(axis=1).sum(axis=2)
x.reshape(4, 2, 2)
raise ValueError
sorted(s1, key=prefixed_digits())
plt.show()
df.index = pd.DatetimeIndex(df.index)
list(range(1, 6)) + list(range(15, 20))
df.index.level_map
br.select_form(nr=0)
pd.rolling_apply(df, 12, lambda x: np.prod(1 + x) - 1)
temp.append(sub_list[0])
admin.site.register(Employee, EmployeeAdmin)
i += 1
print(np.sqrt(np.sum((p[:, (np.newaxis)] - p[(np.newaxis), :]) ** 2, axis=-1)))
set(x for x, count in common if count == common[0][1])
print(my_list)
signal.signal(signal.SIGALRM, handler)
plt.show()
pd.DataFrame(MM, dtype=int, columns=Col)
db.session.add(region2)
time.sleep(2)
print_matrix(spiral(5, 5))
map(list, list(result.items()))
mylist = [(w[0] + w[1]) for w in words]
img.fill(255)
random.randrange(5, 10)
max(iter(stats.items()), key=operator.itemgetter(1))[0]
args = parser.parse_args()
print(line)
some_module.py
list(obj.children)
print(map(str, young_fellas))
do_something()
sorted(list(the_dict.items()), key=lambda x: x[1], reverse=True)[:10]
a = [two for one, two in zip(a, a[1:]) if two[1] > one[1]]
f.close()
df = df[dupemask]
cursor = db.cursor()
plt.xlim(x.min(), x.max())
os.remove(temp_file)
app.MainLoop()
pd.concat([df, df1], axis=0, ignore_index=True)
ax.grid()
tuple.__new__(cls, (x, y))
sessions.append(sessionmaker(bind=engine)())
f.geturl()
v, b, n = j[4:7][::-1]
np.array([[x] for x in a1])
log.start()
print(test2())
form.save()
plt.subplots_adjust(bottom=0.1)
df
app.run(debug=True)
sometuple + (someitem,)
x[x.columns[0]]
driver.quit()
id = Column(Integer, primary_key=True)
app.MainLoop()
knapp.pack(pady=10)
QMainWindow.__init__(self, parent)
func(*args)
int(n ** 0.5) + 1
main()
list(chain.from_iterable((i, i * i) for i in range(1, 10)))
L += [4] * 10
ufunc.reduceat(mat.data, mat.indptr[:-1])
pygame.init()
response.set_data(json.dumps(d))
df[col_values] = df[col_values].astype(float)
f.write(text)
df.to_json()
print(time.mktime(new.timetuple()))
session.add(obj)
plt.show()
termios.tcsetattr(sys.stdin, termios.TCSADRAIN, new_settings)
self.entry.focus()
k.reshape(k.shape + (1,))
reactor.run()
a, b, c
result = first_date + np.arange(24) * datetime.timedelta(hours=1)
dictionary[next(iter(dictionary))]
deletec[:2]
input()
print(int(date[:4]) + 1)
__main__()
QtGui.QMainWindow.__init__(self)
df.mean()
print(sys.path)
t = threading.Thread(target=task, args=(data,))
pd.DataFrame.from_dict(d)
yx.sort()
window.show_all()
f.close()
browser.quit()
filtered_list = [x for x in input_list if x % 2 == 0]
newdf.head()
d = datetime.date.today()
d = dict((t.key, t) for t in [t0, t1, t2])
print(list(tb_notes.select().execute()))
writer.writerow(row)
result.append(([key] * len(values), values))
plt.axis([0, 10, 0, 1])
pickle.load(f)
p.communicate()
sys.path.append(os.path.dirname(__file__))
time.sleep(1)
get_object_or_404(Book, pk=id)
inspect.stack()[2]
fig.canvas.draw()
dists.shape
plt.xlim(0, 20)
list(_)
time.mktime(dt.timetuple())
plt.draw()
print(txtrecord.to_text())
HttpResponse(status=410)
ax.set_xlim(0, 6)
name[0][0][-1][-1]
pool.append(Process(target=pool_func, args=(q,)))
sys.stdout.writelines(sorted_lines)
p.terminate()
thestring[:-len(ending)]
output_list = [x for x in input_list if isinstance(x, list)]
dftmtx(2)
img = pygame.image.load(filename)
socket.close()
last_lines.append(line)
X.dot(A.T)
foo()
blob.delete()
zeros = [([0] * N) for _ in range(M)]
list(chain.from_iterable(ls[:1] + ls[2:]))
root.mainloop()
[item for item in sequence if item < value]
sys.exit(0)
lock.acquire()
v.setdefault(value, []).append(key)
dict_setitem(self, key, value)
[1][0][0]
res = requests.post(url, files=files, data=data, headers=headers)
items = SomeModel.objects.all()
user.save()
plt.tight_layout()
pylab.xlim([-2.5, 2.5])
sudo(command, user=sudouser)
plt.show()
dict([(k, v) for k, v in d.items() if k >= begin and k <= end])
Dataset.objects.filter(i_begin_int__lte=170, i_end_int__gte=170)
data.append(sheet1.cell(i, 1).value)
not sum([(not i in A) for i in B]) if len(A) == len(B) else False
plt.show()
ax = fig.add_subplot(1, 1, 1)
df.reset_index(inplace=True)
[a.join(b) for a, b in zip(df.a[10:20], df.b[10:20])]
plt.ylim(0, 5)
print(sys.argv[0])
top.mainloop()
[[i for i, n in enumerate(li) if n == x] for x in sorted(set(li))]
print(k, d2.get(k, 0))
reactor.run()
sheet.set_portrait(False)
simplejson.JSONEncoder.default(self, obj)
plt.pcolor(data, vmin=0.01, vmax=0.99, cmap=my_cmap)
df.Group.value_counts()
foo()
df.a.sort_values()
Number(randint(1, 100))
result = [makedict(elem) for elem in yourlist]
plt.show()
pass
server.serve_forever()
regex.findall(s)
any((a[:] == [1, 20]).all(1))
plt.gcf().show()
iter(self.books.values())
listbox.pack()
ax.add_patch(rect2)
tuple(map(operator.add, a, b))
s.replace(d)
pd.DataFrame(stdf.tolist())
print([element for element, count in Counter(list1).most_common()])
plt.gcf().autofmt_xdate()
[(next(car) if item else next(a)) for item in lyst]
pd.concat(g for i, g in grouped if len(g) > 2)
proc.stdin.close()
alist = [arr[(0), :], arr[1:, (-1)], arr[(-1), :-1], arr[1:-1, (0)]]
main()
app.mainloop()
cherrypy.engine.start()
extra_logger.setLevel(logging.DEBUG)
[match for match in matches]
s[::-1]
toarchive.filter(date__gt=interval).delete()
root = tk.Tk()
plt.show()
data.pop()
fig = plt.figure()
[(x + 1) for x in L]
sum(i for i in range(a, b + 1) if not i % 2)
z = dict(x, **y)
np.sum(a), np.nonzero(np.any(a, axis=0))[0]
conn.close()
rect.set_visible(True)
[vali[i] for i, vali in enumerate(f(*vals))]
pd.melt(piv)
urllib.request.install_opener(my_opener)
obj = json.loads(json_string)
s = s.lower()
globals()[module_name] = __import__(module_name)
sys.stdout.flush()
results.extend(re.findall(key, message, re.IGNORECASE))
print([list(v) for k, v in groupby(sorted_list, key=move)])
print(dumps(a.__dict__))
plt.show()
weekly.append(sum(visitors[x:x + 7]))
df[column_list].iloc[row_index_list].mean(axis=0)
func()
L4 = [n for n in L1 if n not in tmpset]
shutil.copyfile(path, os.path.join(*path_rel))
counter_list = [item for item in counter_list if len(item) != 0]
{{f.following_set.count()}}
plt.show()
np.isclose([10000000000.0, 0], [1.00001e-10, 0])
workbook.close()
print(df2.set_index([0, 1]))
df
ax.imshow(pawprint)
g.plot()
df[(df != 0).all(1)]
list.remove(item_to_be_removed)
set(x[0] for x in zip(a, a[1:]) if x[0] == x[1])
print(os.path.getmtime(os.path.join(SOME_DIR, filename)))
plt.show()
ctypes.cast(x, ctypes.POINTER(ctypes.c_ulong))
vec.fit_transform(measurements).toarray()
map(bool, a).index(True)
l[0][1]
print(a[:-10:-1])
bottleneck.partsort(a, a.size - 10)[-10:]
l = list(zip_longest(x, x, fillvalue=[]))
draw.ellipse((x - r, y - r, x + r, y + r), fill=(255, 0, 0, 0))
__init__.py
[(A[k], B[k]) for k in A if k in B]
p.stdout.close()
min(items, key=lambda item: p1.compute_distance_to(item.loc))
arr = numpy.random.randint(2, size=(n,))
list(chain.from_iterable(l))
round(random.random() * (m_time - min_time) + min_time, 1)
plt.show()
cv2.destroyAllWindows()
np.allclose(C0, C2)
ax.plot(data)
mydog.findall(s)[0]
uniq_animal_groups = set(map(tuple, animal_groups))
ax.set_xticklabels([])
QtCore.Qt.ItemIsEnabled
writer.writerow(the_list)
logger.setLevel(logging.DEBUG)
A[1], A[0], A[1] = A[0], A[1], A[1]
next(e in lestring for e in lelist if e in lestring)
print(np.all(norm1 == norm2))
canvas.pack()
django.setup()
print(df2.reindex(df.index[df.index.isin(df2.index)]))
ii = np.nonzero(a == 4)
subprocess.Popen(command, stdout=subprocess.PIPE).communicate()[0]
json.loads(data, object_hook=_json_object_hook)
sys.stdout.flush()
a[::2] = 1
value = my_dic.get(100, 0)
fig = plt.figure()
numpy.isnan(myarray).any()
b = a[:]
do_something_with(result)
ax.set_yticks([0.5, 1.0])
cnx.sendInitPresence()
np.average(a, axis=-1).repeat(a.shape[-1]).reshape(a.shape)
classifier.fit(X, y)
log.setLevel(logging.DEBUG)
print(trks.name())
plt.draw()
a.setdefault(key, [])
axcut.set_visible(False)
array([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0, 0.0]])
reactor.run()
pd.isnull(df).any(axis=1)
win.run()
new_list.extend(i)
text_file.close()
A.objects.filter(id=some_a.id).update(hidden=True)
s.apply(lambda x: Series(1, index=x)).fillna(0)
self.SetSizerAndFit(sizer)
pkl_file.close()
print(m.group(1))
resp.text, resp.status_code, list(resp.headers.items())
self.tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
X_train = scaler.fit_transform(X_train)
f.close()
request.user.get_profile().token
session.commit()
self.frame.pack(fill=BOTH, expand=YES)
count = sum(1 for line in myfile)
fig = plt.figure()
time.sleep(10)
random.choice(list(range(100, 20100, 100)))
[f(aItem, bItem) for aItem, bItem in zip(a, b)]
G = nx.Graph()
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
match.group(0)
print(sum(map(lambda x: x * x, l)))
resp = urllib.request.urlopen(req)
all_data = []
a.extend(a, b)
dict((k, sum(d[k] for d in dict1)) for k in dict1[0])
urllib.request.urlopen(url).read()
datetime.timedelta(0)
M = scipy.sparse.csr_matrix(M)
runserver.py
dict(itertools.islice(iter(dictionary.items()), begin, end + 1))
main1()
[a for a, a in list(params.items())]
tk.Tk.__init__(self, *args, **kwargs)
{{(user | hash): item}}
len(set(sum(sl) for sl in L)) == 1
[id(x) for x in test]
[x for x in L if x not in delitems]
sum(i != j for i, j in zip(a, b))
a.reshape(-1, R)
random.shuffle(myList)
conn.commit()
self.thisptr.clone()
np.average(df.y - df.x, weights=df.index.asi8)
[line for time, line in sorted(zip(listofTimes, listofLines))]
frame.axes.get_yaxis().set_ticks([])
e.pack()
self.window1.show()
foo()
resp.peercert
df.iloc[0]
cursor.execute(insert_query, data)
pygame.display.flip()
spherical_dist(locations_1, locations_2[:-1])
plt.show()
G = nx.Graph()
print(repr(line))
sock.connect((host, port))
possibles.update(locals())
fh.write(base64.decodestring(imgData))
fig = plt.figure()
re.compile(regex).groups
[(v * v) for v in vals]
MyApp().run()
print(self.time)
[char for char in yourstring]
sum(1 for item in arr if item == 0 and type(item) is type(0))
time.sleep(1)
np.stack(np.nonzero(df.values)).T
user.user_trips.all()
list(map(lambda f, a: f(a), *zip(*itertools.product(funcs, args))))
print(result.group(1))
app = wx.App(False)
browser.select_form(nr=0)
print(r.data())
print(sorted(a, key=Counter(a).get, reverse=True))
pandas.DataFrame.from_records([s.to_dict() for s in signals])
df.groupby(level=0, as_index=False).nth(2)
proc.stdin.flush()
dictionary = json.loads(cur.fetchone()[0])
proc.wait()
ax.set_title(title)
[0][0][0]
field.setAlignment(QtCore.Qt.AlignCenter)
__init__.py
a.func(**kwargs)
bool(number % 2)
A[np.lexsort(A.T)]
sample(10, [2, 4, 8, 16])
sum(a, b)
len(np.atleast_1d(a))
df = pd.DataFrame(data.tolist(), columns=data.dtype.names)
tornado.ioloop.IOLoop.instance().start()
os.makedirs(dst)
list(map(len, s.split()))
user.put()
a = sorted(list(a.items()), key=lambda x: x[1])
plt.xlim(X[0] - day, X[-1] + day)
plt.plot(list(range(10)))
a = numpy.tile([1, -1], 15)
server.quit()
plt.show()
plt.show()
mylist = [mylist[i] for i in myorder]
name = models.CharField(max_length=100)
p1.join()
new_array = map(list, old_array)
infile.close()
Base.metadata.bind = engine
plt.show()
print(key, sum(r[2] for r in rows))
content = content_file.read()
ax.set_ylim(0, 10)
conda - -version
Page.query.get(page_id).query.delete()
np.allclose(result_data, result_data2)
time.sleep(1800)
c.fetchall()
print(len(unicode_string))
pl.plot(X, Cosine)
plt.show()
hex(15)
[0, 1, 1, 0, 0, 0],
Peak()
app.MainLoop()
ax = fig.add_subplot(111)
plt.subplot(122)
mylist.count(mylist[0]) == len(mylist)
p.join()
r = requests.post(url, files=files, headers=headers)
scrapyd
new_dict[v].append(k)
list(merge(list1, list2))
urllib.request.install_opener(opener)
{{form.content()}}
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
df.dropna(thresh=df.shape[1] - 7)
lines.sort(key=extract_time, reverse=True)
fig, ax = plt.subplots()
sleep(1)
plt.show()
a = np.array(df.C)
plt.show()
lambda name: (name[0], -len(name), name)
print(nodes[0].firstChild.nodeValue)
__init__.py
sorted(list(d.items()), key=foo)
bytearray(hex_data)
final_data[cnames[i]] = np.zeros((nalpha, nmach, nbeta, nalt))
hello.helloworld()
Motifs.insert(x, Motif)
main()
tree = ET.fromstring(msg)
list(zip(foo, bar))
[x for x in range(LOW, HIGH) if len(set(str(x))) == len(str(x))]
db.session.commit()
self._file.close()
request.user
logging.setLoggerClass(ColoredLogger)
d > timedelta(minutes=1)
print(json.dumps(obj, indent=2))
time.sleep(5)
np.allclose(omega, slicing_summing(a, b, c))
Popen(cmd, shell=True, cwd=newpath)
rdd.collect()
window.show()
[a for b, b in list(params.items())]
hex(int(time.time()))
response = requests.get(url, headers=headers)
mlab.show()
type(a)(b)
ax.plot(x, y)
plt.plot(x, y)
print(bcrypt.hashpw(password, bcrypt.gensalt()))
print(team.__dict__ == team2.__dict__)
w.pack()
sum(len(word) for word in wordslist)
ax.plot(x, y)
df.TIMESTAMP.dt.hour
ax.margins(0.1)
time.sleep(1)
PyArray_ENABLEFLAGS(arr, NPY_ARRAY_OWNDATA)
sum(num for num in numbers if num % 2 == 1)
np.append(xs, arr[i])
layout.addWidget(self.button)
[k for k, v in list(self.__class__.__dict__.items()) if type(v) is property]
urllib.request.urlopen(url)
counts.sort(key=operator.itemgetter(1))
transaction.commit()
ax.set_yticks([1, 2, 8])
my_array = my_array.reshape((50, 50))
test.pop()
int(x)
p.close()
plt.xlim([-400, 400])
print(my_list[1::2])
ax2.yaxis.set_visible(False)
len(x) >= 4
process.stdin.flush()
app.ActiveWorkbook.ActiveSheet.Cells(r, c).Formula
[(0 if i < 0 else i) for i in a]
subprocess.check_call(cmd, startupinfo=startupinfo)
smagnoni
d.setdefault(year, []).append(value)
[0, 0, 0, 0, 0],
plt.show()
[child for child in soup.td.children if isinstance(child, str)]
dg.Items.Add(value)
ax.get_xaxis().set_ticklabels([])
s.save()
app.register_blueprint(mod)
divtd(datetime.timedelta(hours=12), datetime.timedelta(hours=2))
time.sleep(1)
sum(map(operator.mul, vector1, vector2))
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
df.T.squeeze()
dict((x, data.count(x)) for x in data)
B in (A[i:i + len(B)] for i in range(len(A)))
buf.seek(0)
sum(itertools.starmap(operator.mul, itertools.combinations(l, 2)))
my_shelf.close()
strat2.execute()
main()
yourProcess.terminate()
x2 = sorted(x1, key=lambda t: t[1])
conn.close()
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
np.diagonal(np.dot(b, a)).T
plt.subplots_adjust(top=0.85)
pygame.display.flip()
writer.UpdatePipeline()
A[([0, 2]), :, 1:]
plt.show()
ax1.plot(X, Y)
do_something()
data.columns = [x.lower() for x in data.columns]
mlab.show()
[doSomethingWith(ch) for ch in s]
df.values.tolist()
s.sum()
plt.draw()
matplotlib.pylab.show(block=False)
xcode - select - -install
img.putdata(data)
max([a for a in yourlist if a[2] >= 100], key=itemgetter(1))
(df == 1).any(axis=1)
args = main_parser.parse_args()
plt.close()
ax.set_yticks(np.arange(data.shape[0]) + 0.5, minor=False)
eval(input())
bar()
df = DataFrame(data)
random.shuffle(list(range(n)))[:k]
time.sleep(20)
pdb.set_trace()
self.response.out.write(zipstream.getvalue())
parse_qs(urlparse(url).query)
set([1, 2]) in {1, 2, frozenset([1, 2])}
gtk.gdk.notify_startup_complete()
numpy.where(your_array_name != 0, 1, 0).sum()
setattr(self, property, getattr(self, property) + amount)
self.cursor.execute(query)
random.choice(states.split())
pyplot.show()
random.sample(list(D.items()), K)
self.foo.kill()
results = [[1, 0, 1], [0, 1, 0], [1, 1, 0]]
classifier.classify(test_sent_features)
scipy.signal.filtfilt
p.stdout.close()
results = map(int, results)
cursor.close()
a = forms.CharField(max_length=20)
sum(p) * (c[1] - c[0])
self.process.stdin.flush()
pipeline.fit(X, y)
f.write(response.content)
im.save(newpathname)
Counter(chain.from_iterable(map(set, listOfLists)))
window.SetFocus()
mask1 &= ~mask2
self.grid_columnconfigure(0, weight=1)
evt.Skip()
(idx[1::2] - idx[::2]).max()
inv.fill((255, 255, 255, 255))
print(collections.Counter(words))
pd.concat([T, df])
getattr(obj, name)
session.commit()
line = line.rstrip()
someMethod.__code__.co_argcount
sorted(li, key=itemgetter(1))
plt.clf()
serve_pil_image(img)
cursor = db.test.find(timeout=False)
solution.loc[df.index]
foo[i], foo[j] = foo[j], foo[i]
plt.show()
find_majority([1, 1, 1, 1, -1, -1, -1, 0])
clf.fit(X, y)
driver.manage().window().maximize()
matches = [x for x in a if x in str]
sorted(templist, key=int, reverse=True)
unittest.main()
d = defaultdict(lambda : defaultdict(lambda : defaultdict(list)))
cursor.close()
plt.draw()
y[:][::2]
logger.setLevel(logging.DEBUG)
commands[com](*args)
file.flush()
np.add.reduceat(X[:, (idx0)], cut_idx, axis=1)
logger.setLevel(logging.DEBUG)
dict(zip(tokens[0::2], tokens[1::2]))
len(set(items)) == 1
setattr(self, name, value)
pd.DataFrame([s1, s2]).min()
time.sleep(0.1)
cnxn.close()
args = parser.parse_args()
plt.show()
df.astype(int)
ax.legend()
l1.append([4, 5, 6])
time.sleep((future - t).seconds)
signal.signal(signal.SIGALRM, original_handler)
x, y = a[0:2]
print(response.text)
min(items, key=lambda x: abs(x - pivot))
time.sleep(1)
root.mainloop()
print(f.getvalue())
numpy.all(product1 == product2)
User.query.get(id)
plt.draw()
values = [d[k] for k in keys]
df.where(df.a.isNull()).count()
a.symmetric_difference(b)
{v: k for k, vs in list(extension_to_type_mapping.items()) for v in vs}
cv2.waitKey(0)
self.request.query_string
new = str[:1] + new + str[6:]
print(sys.exit.__doc__)
im.show()
print(f(4))
json.dumps(data)
plt.show()
x[(list(range(0, i)) + list(range(i + 1, x.shape[0]))), :, :]
main()
proc.stdin.close()
pygame.sprite.Sprite.__init__(self)
testdataframe2.plot(style=styles2, ax=ax)
np.log(absd, absd)
plt.contour(data)
ax.patch.set_visible(False)
server.login(username, password)
print(Digit[i])
{{car.date_of_manufacture | strftime}}
df.iloc[:, (n)]
ax.get_xaxis().set_ticks([2, 4, 6, 8])
xprt.excel()
run()
data.append(ruamel.yaml.load(open(file_name)))
~a.any(axis=1)
subprocess.Popen(cmd_str, shell=True)
pool.terminate()
process.terminate()
Test.__init__()
con.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER)
print(line)
result = self.cur.executemany(sql, data)
plt.figure()
np.argwhere((Ax == Bx.min()) & (Ay == By.min()))
s.stack().reset_index(level=1, drop=True)
plt.show()
plt.ylim(0, 20)
cv2.destroyAllWindows()
print(datetime.fromtimestamp(timestamp))
obj.save()
time.sleep(wtime)
ax = fig.add_subplot(111)
plt.show()
plt.ylim(-1, 1)
d = [(0.25 * math.sin(math.radians(i))) for i in range(0, 1024)]
os.path.join(dir_name, base_filename + suffix)
sizer.Add(buttons, 0, wx.EXPAND | wx.ALL, 5)
plt.figure()
m = re.search(reg, s)
cherrypy.tree.mount(root)
print(hash.hexdigest()[:10])
smtp.starttls()
pd.to_datetime(dte.stack()).unstack()
msg.attach(body)
cax.get_xaxis().set_visible(False)
plt.xticks([])
a = [x for x in names if any(pat in x for pat in pattern)]
sys.exit(0)
indices = tf.where(where)
print(link.text)
plt.show()
plt.show()
arr.T.reshape(5, -1)
ax.set_xlim(0, 24)
print(x[np.unique(a)])
errf.close()
proc.terminate()
ax.set_ylim(-40, 40)
abort(404)
print((a, b, c))
connection.commit()
df = df2.transpose()
c.py
bmp.Bind(wx.EVT_ENTER_WINDOW, onWindow)
[(not i) for i in mylist]
pdfkit.from_string(html_text, output_filename)
issubclass(A, A)
u = Union(a, b)
pygame.display.update()
s += str(n)
df.rename(index=lambda x: tup)
seaborn.voilinplot(ax=ax, data=df, **violin_options)
ax.set_xlim([-0.5, 4.5])
[x for y in zip(list, list) for x in y]
df1.corr()
initpyxmod()
plt.show()
map(f, list(range(10)))
line = line.rstrip()
self.assertEqual([attr, val], [attr, getattr(self.nu, val)])
filename = sys.argv[-1]
Base.metadata.create_all(engine)
fig.savefig(os.path.join(my_path, my_file))
instance.__dict__
sum(tuples, ())
df
sys.argv[1:]
k = lambda x: x[1]
list(k for k, g in itertools.groupby(numbers))
ax.set_xlim((0, 10))
ax.yaxis.set_major_locator(ticker.MultipleLocator(1))
object.__getattribute__(self, name)
cmp(x.lower(), y.lower())
print ()
logger.addHandler(handler)
dict(zip_longest(x, y))
df.apply(update_vals, axis=1)
cleared, dominated
fill_between(x.values, y.min(), y.values, alpha=0.5)
plt.show()
print(name.lower())
sys.stdout.write(line)
b.doSomething()
sock.connect((host, port))
bulk.execute()
gevent.wait()
libxslt - devel
(OrderedDict(row) for i, row in df.iterrows())
mylist[:]
menu.remove(i)
logger.setLevel(logging.INFO)
globals()[n] = 1
new_array = list(set(main_array) - set(second_array))
np.corrcoef(df1.s1, df1.s2)
row.delete()
[[ix.upper() for ix in x] for x in nested_list]
array2 = np.tile(array1, (20, 20, 1, 1))
cv2.destroyAllWindows()
req.close()
s[-1].isdigit()
print(arr[idx])
pd.Series(*zip(*((b, a) for a, b in data)))
conn.close()
df.iloc[:5, :4]
app.run(threaded=True)
l.sort(key=asum)
print(etree.tostring(document, xml_declaration=True))
print(unicode_text.encode(sys.getfilesystemencoding()))
root.overrideredirect(True)
sys.exit(1)
{key: list(set(a[key]) - set(b.get(key, []))) for key in a}
time.sleep(0.01)
time.sleep(5)
Fraction(*(0.25).as_integer_ratio())
pass
signal.signal(signal.SIGINT, self.handler)
np.may_share_memory(a, a[:, 1::2])
o = numpy.delete(n, deletions, axis=0)
sum(r(i)) == -n
foo.bar()
unittest.main()
np.linspace(x[0], x[-1], 10)
B[:, :, (2)] = 0
df.values
s1[s1.index.isin(s2.index) & s1.isin(s2)]
nobj.__dict__ = oobj.__dict__.copy()
sys.exit(0)
(a > 2).sum()
df.ix[d1:d2]
print(oct(9))
norm.ppf(0.95, loc=10, scale=2)
[(s % x) for x in itertools.product(l1, l2)]
r.json()
print(re.search(find, l).group(0))
max(self.left.depth(), self.right.depth()) + 1
print(os.name)
cv2.FONT_HERSHEY_SIMPLEX
self.root.mainloop()
qdict.update(dict)
df.stack(level=1).reset_index(level=1, drop=True).reset_index()
writer.writerow(row)
root = Tk()
print(s.group())
root.mainloop()
etree_to_dict(tree.getroot())
np.repeat(np.arange(4), 4)
img_io.seek(0)
data.columns = map(str.lower, data.columns)
df.groupby(diff_to_previous.cumsum())
print(ElementTree.tostring(xmlET))
button.pack()
parser.feed(data)
new_list
ax2.yaxis.get_major_ticks()[0].label1.set_visible(False)
{data[k].append(v) for k, v in list(line_dict.items())}
[s[i:j] for i in range(length) for j in range(i + 1, length + 1)]
list(split_on_members(l, s))
sorted(the_list, key=splitter)
music.play()
db.session.commit()
my_func(*my_list)
a[idx[:, (0)], idx[:, (1)], idx[:, (2)]] = 5
classifier.fit(X, Y, sample_weight=weights)
indices = np.arange(len(arr))
r = requests.post(url, data=json.dumps(payload))
plt.show()
add_matrices(c, d)
sns.set()
data.reshape(2, -1).mean(0)
random.shuffle(x)
d[tup[0]][tup[1]] = [tup[2]]
np.dot(a, b) == np.tensordot(a, b, axes=([-1], [2]))
lcmm(*list(range(1, 21)))
len(list(d.items())[0][1])
y.do_something()
QtGui.QWidget.__init__(self, parent)
df.values is df.values
ax.set_yticks([0.2, 0.55, 0.76])
print(evil_vals[0] in list(dict_with_evil_keys.keys()))
woduplicates = set(lseparatedOrblist)
df[(df == pd.Series(conditions)).all(axis=1)]
ax.legend()
self.clslength()
Books.objects.exclude(authors__in=bad_authors)
thread.start()
round(2.615, 2)
admin.site.register(Game, MyModelAdmin)
self.proc.wait()
reactor.run()
output = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
self.linenumbers.config(state=DISABLED)
matrix = [list(line.strip()) for line in matrixfile]
zlib.decompress(decrypt(data))
shapely.ops.unary_union(list(shapely.ops.polygonize(lines)))
print(df.values.tolist())
print(list(d.values()))
[x for x in library if terms.issubset(x)]
out = proc.communicate()[0]
counter += 1
plt.show()
assert expression1, expression2
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
todb.commit()
args = parser.parse_args()
fig, ax = plt.subplots()
db.session.remove()
sleep(1)
Gtk.Entry.__init__(self)
sys.stdout.flush()
print([type(x) for x in htmldata])
model.fit(X)
pl.pop()
process.wait()
workbook.close()
print(sys.version)
x.total_seconds()
os.path.dirname(sys.executable)
(dict(zip(keys, row)) for row in zip(nums, chars))
im.shape
any(1 in x for x in d)
multiprocessing.Process.__init__(self)
plt.show()
data = numpy.asarray(im)
df.columns = columns
map(len, s.split())
sorted(s)
checkbox.Click()
pdb.Pdb.interaction(self, *args, **kwargs)
data = json.loads(mtext)
self.func(*args, **kwargs)
print(buffalo)
time.ctime()
zip(it, it)
model.fit(X_train, y_train)
do_something()
bytes(10)
msg.attach(attachment)
redirect(redirect_url())
list(itertools.chain(*[([k] * v) for k, v in sorted(d.items())]))
lki.sort(key=itemgetter(1))
app = Flask(__name__)
name = models.CharField(max_length=100)
x[~np.any(np.isnan(x), axis=1)]
min(itertools.product(*lists), key=distance)
df.AC = df.AC.astype(float)
result = json.dumps(d, ensure_ascii=False)
df.plot(subplots=True, layout=(1, 2))
print(match.groups())
df2 = df.stack().reset_index(1)
[0, 1, 1, 1, 1],
User.objects.count()
json.dump(LoL, myfile)
random.sample(deq, 10)
print(dt - datetime.fromtimestamp(s))
q, bins = pd.qcut(a, 2, retbins=True)
ax.set_xlim(-40, 40)
app.url_map
ax1.set_ylim(0, 1.2)
ax.xaxis.set_visible(False)
sys.exit(0)
deletel[100:]
self.response.out.write(simplejson.dumps([p.to_dict() for p in photos]))
array.tolist()
a.flat[np.abs(a - a0).argmin()]
object.__getattribute__(self, attr)
plt.show()
session.commit()
df.reset_index(drop=True).T
fig.subplots_adjust(wspace=0.5)
self.transport.write(data)
out = [(1 if num & 1 << bits - 1 - n else 0) for n in range(bits)]
mainloop()
tuple(A[:, (0)])
ssh.close()
print(connection.getresponse().read())
is_cardano_triplet(2, 1, 5)
random.shuffle(new_lst)
max(i + 1 for i in range(20) if n % (2 << i) == 0)
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
new_data = [float(n) for n in data]
L[-1:], L[:-1] = L[:1], L[1:]
request.resolver_match.app_name
[6, 7, 8]
df.columns = df.columns.str.strip()
pylab.show()
plt.pause(0.05)
image = cv2.imread(image_path, cv2.IMREAD_UNCHANGED)
fig.canvas.draw()
linregress(X, Y)
image = tk.PhotoImage(data=b64_data)
np.fill_diagonal(corrs.values, -2)
f.close()
a.remove(x)
ax.plot(x, y)
sess.run(init_op)
print(channel.recv(1024))
r = requests.post(url, data=json.dumps(payload), headers=headers)
numpy.count_nonzero(boolarr)
np.random.shuffle(x)
print(etree.tostring(root, pretty_print=True))
p.stdin.close()
[a for b, a in list(params.items())]
time.sleep(2)
Y == np.array([6, 7, 8, 9])
MM().__dict__
l1.extend([4, 5, 6])
self.assertEqual(a, b)
logger.addHandler(mh)
shutil.copyfileobj(source_file, target_file)
input()
user.save()
lookup.setdefault(key(item), []).append(item)
f.close()
skrift2.pack(pady=10)
writer.save()
df.col2.replace(-1, np.nan).interpolate().astype(int)
isinstance(a, Test2)
session2.add(obj1)
dff.drop(c, axis=1, inplace=True)
array([8.0, 5.5])
m.groups()[0]
do_something()
wr.writerow([item])
product(list(range(2)), repeat=k)
x + ((0, 0),)
[chr(ord(uc)) for uc in udata]
np.take(mat, ixs, axis=0).sum(axis=0)
int_arr[-2, -2] + int_arr[0, 0] - int_arr[-2, 0] - int_arr[0, -2]
self.socket.close()
conn.set_timeout(self.timeout)
result = func()
main()
print(round(a, 2))
sys.getsizeof(10 ** 10 ** 7)
all(x == items[0] for x in items)
df2 = df.transpose()
label.mainloop()
proc.wait()
ax.set_xticklabels(dates, rotation=90)
plt.plot(x, y)
self.response.out.write(row)
y.astype(int)
db.collection.find().limit(1).skip(Math.floor(Math.random() * N))
dlg.ShowModal()
main()
signal.signal(signal.SIGALRM, handler)
datetime.date(2011, 1, 1)
fig.subplots_adjust(bottom=0.2)
abs(A[0] - B[0]) + abs(A[1] - B[1])
np.any((x, y, z), axis=0)
set_trace()
form.populate_obj(user)
app.run()
os.path.dirname(filepath)
max(map(len, tup))
plt.axvline(x=0.22058956)
a.f4(1)
set([1])
ax.add_patch(patch)
sum(1 for _ in assignments(12, 5))
time.sleep(10)
print(OpenSSL.crypto.dump_certificate(OpenSSL.crypto.FILETYPE_TEXT, x509))
QtGui.QFrame.__init__(self)
sys.path.insert(0, self.install_lib)
setup()
np.median(x, axis=0)
np.where(cond, arr, -inf).argmax(axis=1)
newstr = oldstr[:midlen] + oldstr[midlen + 1:]
db.close()
print((a, b, c, d))
set_contents_from_string(data_file.read())
decorator_to_enhance(func, *args, **kwargs)
plt.show()
np.random.seed(seed)
df.show()
A.view(dtype=np.complex64)
l.sort()
x.pop(0)
self.__dict__.update(d)
d.setdefault(k, []).append(v)
frame.pack()
A[:, (np.mod(np.arange(ncols), A.shape[1]))]
print([x for x in p.findall(s) if x])
plt.close()
data = json.loads(input_str)
self.assertEqual(callresult, [xargs, yargs])
list(metadata.tables.keys())
print(datetime.datetime.utcfromtimestamp(dt))
mlab.show()
print(clf.coef_)
fopen.close()
setattr(someobject, name, user)
op.worksheet.Worksheet.iter_rows()
set([2, 1]) in list
db.close()
urllib.request.install_opener(opener)
(list(g) for k, g in grouped)
res = np.array(sorted(a, key=lambda x: -x[0]))
plt.figure(figsize=(5.15, 5.15))
d.copy()
self.thread.start()
ax.set_ylim([177, 196])
c = numpy.linalg.lstsq(b.T, a.T)[0].T
QtGui.QWidget.__init__(self)
plt.show()
result = dict(setup1)
g.add_edge(a[0], a[1])
signal.signal(signal.SIGINT, signal_handler)
os.setsid()
self.response.out.write(str(datetime.datetime.now() - starttime))
isinstance(obj, ModuleType)
[(x * x) for x in range(10)]
[x for x in ls if c[x] == 1]
y = dict((k.lower(), v) for k, v in x.items())
os.isatty(sys.stdout.fileno())
np.isnan(np.nan)
config.write(configfile)
d = eval(some_string)
display.flush()
min(s.find(i) for i in a if i in s)
f(a, b)
images.reshape((images.shape[0], -1))
self.assertEqual(len(result), 2)
javasphinx - apidoc - -help
self.response.out.write(row)
self.d = self.d + 1
formset.save()
np.random.seed(1977)
keys = [k for k, v in list(dict.items()) if v == maxval]
lines = tuple(lines)
map(tuple, (N - 1 - np.array(list(combinations(list(range(N)), M))))[::-1])
os.path.relpath(filename, blog_images)
batch.execute(http=http)
bin(1)
d.dot(d.T)
setattr(namespace, dest, value)
ax.set_ylim([0, 2])
pd.Series(dict(col1=a, col2=b))
data = np.array(data)
plt.show()
y = r * np.sin(t)
print(any(x in regx.split(string) for x in search))
ent2.grid(row=1, column=1)
[tuple(chain.from_iterable(prod)) for prod in product(*lists)]
{{mywidget.script()}}
{{item}}
dateutil.parser.parse(date_string)
app.run()
print(etree.tostring(elem))
[0, 1, 1, 0, 0, 1],
ax.get_yticklabels()[i].set_visible(False)
sys.modules[__name__] = Foo()
l.append([])
app.run(debug=True)
plt.close()
backup.close()
t5.start()
fro.readline()
view_func(request, *args, **kwargs)
lines = sorted(shopping.readlines())
a = dict((key, value) for key, value in a.items() if key not in exclusion)
s[0].lower() + s[1:]
csum = np.cumsum(a[:, (1)])
pkgutil.iter_modules()
ax.set_yticks(np.linspace(0, 200, 11))
Tablename.objects.filter(fieldname__lt=value)
map(list, my_array)
float(x)
print(data.split())
set(d[0]).intersection(*d[1:])
np.full((200, 20, 10, 20), 0)
plt.setp(ax.get_xticklabels()[-1], visible=False)
str(0.1)
setattr(self, key, dictionary[key])
plt.subplots_adjust(hspace=0.001)
dict(zip(headers, sdata))
termios.tcsetattr(fd, termios.TCSADRAIN, old)
func(*parameters)
plt.tight_layout()
parser = argparse.ArgumentParser()
PrintLn(Abs(vf))
image.show()
os.remove(path)
print(urlparse.urlunparse(url_parts))
list(chain(*x))
np.array(list(itertools.zip_longest(fillvalue=np.nan, *ll))).T
logging.getLogger().addHandler(handler)
root.mainloop()
a[len(a) - 1:-len(a) - 1:-1]
foo(*t)
numpy.random.shuffle(ids)
my_list.append(int(i))
df.loc[~df.index.isin(t)]
ax.set_xticklabels(x_labels)
set(my_list) - {i for e in bad for i in my_list if e in i}
list(x[x > 0].stack().index)
dll.add.restype = c_double
numpy.where(M == 0)
[(x + 1) for x in mylist]
assert not os.path.exists(f.name)
pprint([(my_array + [i]) for i in input_elements])
mydict[key].append(line.strip())
server.serve_forever()
x[x & x - 1 == 0]
random.choice(files)
deletesys.path[0]
model4.py
scipy.signal.lfilter
Department._objects.filter(group__exact=self.group)
next(i for i, j in list(enumerate(s))[::-1] if j == x)
result = json.loads(result)
server.close()
driver.close()
outer_list.sort(key=MyOrdering)
plt.plot(y)
fig = plt.figure(figsize=(5, 5))
reactor.run()
r = random.choice(numbers)
logging.disable(logging.CRITICAL)
ax2.imshow([[0, 1], [2, 0]])
time.sleep(5)
the_sum += A[k] * B[k]
type(a.tolist()[0])
[(slice(*map(int, a)) if len(a) > 1 else int(a[0])) for a in ranges]
np.random.seed(seed)
ftp.login()
[(x < 0 and x + 4 or x) for x in [1, -2, 2]]
maze_dict[r, c] = [(r - 1, c), (r, c + 1)]
e.update()
sys.stdout.flush()
simplejson.JSONEncoder.default(self, obj)
mylist.sort(key=lambda v: v.x ** 2 + v.y ** 2)
ax.imshow(data)
figure(figsize=(4, 4))
time.time()
asin(2).evalf()
f.close()
plt.plot(x, y)
fxn()
dict(zip(x, map(x.count, x)))
session.commit()
painter.setPen(Qt.QColor(100, 100, 100))
self.assertEqual(1, 0)
connection.close()
wx.Yield()
[i for i, j in c.most_common()]
plt.clf()
print(json.load(json_file))
os.remove(os.path.join(parent, fn))
l = list(t)
np.dot(a, a)
r = requests.post(url, files=files, data=values)
threading.Thread.__init__(self)
array([[24, 20, 21], [4, 0, 1], [9, 5, 6]])
os.remove(os.path.join(dirpath, file))
fib = lambda n: n if n < 2 else fib(n - 1) + fib(n - 2)
root.columnconfigure(0, weight=1)
Image.open(path)
dx, dy = 1, 0
gluLookAt(eX, eY, eZ, cX, cY, cZ, 0, 1, 0)
set([])
np.diagonal(np.dot(np.rollaxis(a, 2), a), 0, 2).T
res = [([x] * len(y), y) for x, y in d.items()]
func(*posargs, **fkwargs)
print(rawstr(test4))
b[x, y] = z
self.sftp.putfo(fileobj, path)
[n.name for n in tf.get_default_graph().as_graph_def().node]
im.show()
inset.set_ylim(axis.get_ylim())
screen.blit(background, (0, 0))
dict.__setitem__(self, key, value)
print(str(names)[1:-1])
ssh.close()
res.cluster.value_counts()
list(itertools.chain(pat.split(line) for line in data))
[(i * j) for i, j in combinations(array, 2)]
my_objects.append(MyClass(i))
plt.draw()
[[0.4, 0.6, 0.0, 0.0], [0.2, 0.4, 0.4, 0.0], [0.0, 0.0, 0.4, 0.6]]
self.setLayout(self.layout)
a.writerows(data)
df.values - df2.values
json.dump(data, f, ensure_ascii=False)
theano.printing.debugprint(f)
fig, ax = plt.subplots()
ax.lines.remove(lines[0])
test.py
smtp.sendmail(from_addr, to_addr, m.as_string())
ch.setLevel(logging.DEBUG)
mask = cv2.cvtColor(mask, cv2.COLOR_GRAY2BGR)
db.create_all()
ax = fig.add_subplot(111)
help(dir)
plt.show()
button.pack()
T = map(lambda i: L[i], Idx)
f = lambda x, y: x if x > 100 and y < 50 else y
line[len(prefix):]
proc.stdin.flush()
{{a}}
self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
print(s, s[-1].isdigit())
t.pack()
self.Layout()
app.logger.handlers[:] = []
data.split()
today.day
plt.show()
do_something()
result[key] += int(row[0])
ax.xaxis.set_visible(False)
names = pd.concat(names, frame, ignore_index=True)
print(my_list)
scores.close()
Response(serializer.data)
writer.writerow(row)
threading.Timer(1, greeting, (oh_hi,)).start()
[row[s] for row in LoL[r]]
np.random.choice(np.squeeze(a))
list(dict1.items()) ^ list(dict2.items())
blowfish()
np.in1d(a, b)
(k, v), = list(d.items())
pass
output.append(float(row[4]))
log = logging.getLogger(__name__)
sys.argv[i]
a.remove(set([2]))
self.table.setRowCount(5)
array([1, 1, 1, 1, 0])
y = np.hsplit(x, np.arange(10, 129, 10))
self.queue.add(item)
print(list(a[b]))
print(b.__class__.__name__)
int(n) == n
x[::2]
plt.plot(data)
{{form.as_div}}
files = list(filter(path.isfile, os.listdir(dirToScreens)))
pd.to_datetime(df.Date).order().index
func(func, *args, **kwargs)
{str(key): value for key, value in zip(bins, count)}
m.put()
skrift1.pack(pady=5)
tekstboks.pack(pady=5)
t.start()
plt.show()
time.sleep(5)
os.system(cmd)
plt.show()
self.add(record)
subprocess.call(args)
f.close()
right.remove(right[0])
time.sleep(1)
main()
admin.site.register(ItemPending, ItemAdminPending)
out.extend(map(str, list(range(a, b + 1))))
pygame.init()
ax.invert_yaxis()
a.xaxis.set_major_formatter(ticker.NullFormatter())
foo.__class__
id = models.AutoField(primary_key=True)
threading.Thread(target=play_audio).start()
sum(isinstance(i, int) for i in a)
print(map(lambda x, y: x + [y], A, list(range(1, len(A) + 1))))
sys.stdout.write(message)
pylab.plot(x, y)
proc = subprocess.Popen(command, startupinfo=startupinfo)
print(conn.notices[-1])
self.method()
df.index.values
bmp.Bind(wx.EVT_LEAVE_WINDOW, onWindow)
data = np.loadtxt(f)
screen = pygame.display.set_mode(size)
instance.save()
ax.plot(xx, yy)
sum(map(pow, l, count(1)))
print(map(hex, a))
logging.basicConfig(level=logging.INFO)
res = urllib.request.urlopen(req)
(myset - (myset - set([b]))).pop() is a
app.MainLoop()
app.logger.addHandler(stream_handler)
f.read()
self.root.after(1000, self.update_clock)
min(s.find(i) for i in a)
session.query(Foo).filter(tuple_(Foo.a, Foo.b, Foo.c).in_(items))
data = f.readframes(chunk)
QtCore.QVariant()
[2, 5, 6, 7, 8, 10]
time.sleep(1)
print(pd.concat([df, df1]))
sys.exit(2)
plt.show()
board[i].append(0)
f(*args, **kwargs)
print(datetime.timedelta(days=1))
[item for item in my_list if item not in to_be_removed]
items = sorted(list(d.items()), key=keyfunc)
plt.scatter(x, y, c=z, s=20)
query_set.filter(deleted_at__isnull=True)
plot(data)
a = set(a)
self.bottom_frame.grid_columnconfigure(0, weight=1)
y = np.arange(10, 20)
settings.py
mech.set_handle_robots(False)
df = df.sortlevel(level=1, axis=1)
file.seek(-len(line), 1)
[k for k in x if type(k) == str]
list1.sort()
app.root.mainloop()
a = [row for row in a if all(row[j] <= 0 for j in range(0, len(row), 2))]
loop.run()
exit(0)
cv2.waitKey()
zip(list_a, list_b)
print(dss)
ax.set_xticks([])
plt.show()
string[0].isdigit()
application = django.core.handlers.wsgi.WSGIHandler()
data = response.json()
sys.stdout = FlushFile(sys.__stdout__)
d = {x: y for x, y in zip(m[::2], m[1::2])}
app.exec_()
app = QtGui.QApplication([])
x[np.ix_(np.arange(x.shape[0]), x_range, y_range)]
a = np.where(np.eye(7), np.nan, 1)
opener = urllib.request.build_opener()
areas.apply(multiply_by_demand).unstack(0)
btn.pack()
df[(df.values > 1.5).any(1)]
[([k] * v) for k, v in list(Counter(L).items())]
os.listdir(base)
yourcode()
indices = np.where(a >= 1.5)
window.show()
x = list(x)
plt.subplot(122)
content = urllib.request.urlopen(req).read()
unittest.main()
np.where(np.isnan(a), ma.array(a, mask=np.isnan(a)).mean(axis=0), a)
{k: v for k, v in somedict.items() if key_criteria_func(k)}
print(df)
np.roll(a, -1)
[(new_element if i in indices else e) for i, e in enumerate(lst)]
plt.show()
map(int, list(bin(YOUR_NUMBER)[2:]))
d = {name: int(value) for name, value in splitstrs}
plot(x, y)
plt.ylim(1, 0)
print(np.may_share_memory(a, b))
plt.show()
pd.DataFrame(d)
print(datetime.datetime.fromtimestamp(dt))
gevent.joinall([job1, job2])
plt.show()
shutil.rmtree(self.name)
b.shape
elementwiseApply(add, [[0, 0, 0], [0, 0], 0], [[4, 4, 4], [4, 4], 4])
[x for x in list_1 if isinstance(x, numbers.Number)]
f.write(mytext)
set([0, 9, 4, 6, 7])
apps.get_models()
print(match.group(0))
time.sleep(1)
ax.scatter(x, y, z)
list(set(q) & set(w))
user.save()
response
self.frame.Show()
root.mainloop()
plt.show()
np.count_nonzero(np.bitwise_xor(a, b) & r != 0)
list[:10]
run_cmd()
file.writelines(data)
self.show()
sys.stdout.flush()
example1()
assertDictEqual(dict1, dict2)
df.sort(axis=1, inplace=True)
text = sys.stdin.read()
min(max(num, start), end)
index_list.append([(i + temp) for i in range(items)])
plt.show()
df.Cat1 = np.where(df.Cat1.isnull(), df.Cat2, df.Cat1)
df = pd.DataFrame.from_records(data)
Tkinter.Frame.__init__(self, root)
logger = logging.getLogger(__name__)
(lambda : 1)() == (lambda : 1)()
app.jinja_env.filters.update(my_filters)
startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
data.append(row)
[LoL[i][s] for i in range(len(LoL))[r]]
df[df.index.levels[0].isin(stk_list)]
plt.pause(0.5)
print(time.mktime(datetime.datetime.now().timetuple()))
getattr(parent, collection).append(child)
result.append(b[index - 1])
row = [item[0] for item in cursor.fetchall()]
plt.show()
B, C = A[::2], A[1::2]
proc.communicate()
np.arange(1, a.shape[1], 2)
plt.show()
ax.lines = []
df1.ix[0,]
x = all(list_of_bools)
print([(k, len(index[k])) for k in sorted(index.keys())])
my_model.duration = datetime.timedelta(days=20, hours=10)
np.argwhere(np.in1d(a, np.intersect1d(a, b)) == False).flatten().tolist()
print((len(s), len(data), data))
sorted(qs, key=lambda n: (n[0], int(n[1:])))
dict(enumerate(google_price_data, start=1))
json.load(f)
print(decoded.strip())
[k for k, v in list(d1.items()) if v == max(d1.values())][0]
print(row.get_text())
process.exit()
sys.stdout.flush()
gtk.main()
[x for x in seq if x not in seen and not seen.add(x)]
p.start()
print(socket.gethostname())
driver.close()
loop.close()
weekdays[datetime.now().weekday()]
getattr(obj, name)
np.unique(a.round(decimals=4))
set(x * x for x in range(10))
sys.exit(1)
d.setdefault(item[0], []).append(item[1:])
plt.show()
[dict(zip(keys, row)) for row in zip(nums, chars)]
f.seek(old_file_position, os.SEEK_SET)
mylist.pop(0)
df = df.applymap(str)
df = pd.DataFrame([])
fig.autofmt_xdate()
a.append(1)
q = {(i, j): (0) for i in range(5) for j in range(4)}
print(request.get_message().request_body.flatten().data)
models.py
func()
plt.plot(x, g(x), zorder=1)
set(d2.items()).issubset(set(d1.items()))
session.query(BlogPost).filter_by(visible=True)
Gtk.main_quit()
twrv.start()
tasks[sys.argv[1]]()
users = db.session.query(User).all()
random.shuffle(items)
f.close()
self.show()
subprocess.call(row, shell=True)
print([columns[0] for column in cursor.fetchall()])
np.minimum.accumulate(a)
int(input(msg))
print(json.dumps(somedict))
time.sleep(1)
pl.show()
sys.exit(0)
name.__class__.__class__
session.query(ZKUser).filter(ZKGroup.id.in_([1, 2])).all()
len([char for char in unistr if unicodedata.combining(char) == 0])
x.as_matrix()
[elem for elem in some_iterable]
imshow(gray1, cmap=cm.gray, alpha=0.5)
dict(dict_list)
c.flatten()
plt.show()
matched[0]
zipDocment.extractall()
np.sort(reference)
v = data[row][col]
list_2 = [num for num in list_1 if isinstance(num, (int, float))]
sys.stdout.write(alphabet[bisect.bisect(f_list, random.random()) - 1])
session.rollback()
map(numpy.random.shuffle, a)
[item for item in x if not y.intersection(item)]
x[index] if -len(l) <= index < len(l) else default
result = [r for r, in result]
app.MainLoop()
list_of_tuples = [(x, y) for x, y, label in data_one]
bisect.bisect(grid, value)
print(Matrix[0][0])
frame.grid(row=0, column=0, sticky=N + S + E + W)
print(sys.argv[0])
a.deiconify()
self.conn.send(msg)
print(calendar.timegm(d.timetuple()))
keys = set().union(*all_dicts)
Py_Finalize()
x ** 2
ax.grid()
shutil.move(name, dst)
text = dlg.ui.lineEdit.text()
plt.show()
sys.exit(app.exec_())
app.logger.setLevel(logging.DEBUG)
start_server()
np.random.shuffle(a.flat)
shutil.copytree(from_path, to_path)
cogrouped.mapValues(lambda x: (list(x[0]), list(x[1]))).collect()
curses.endwin()
l.sort(key=itemgetter(1), reverse=True)
pd.DataFrame(data)
[10, 40, 60, 90, 100]
np.random.choice(array1, 5)
{k: (p[k] - m[k] ** 2) for k in m}
f = open(fpath)
t.start()
plt.figure()
object.__setattr__(self, name, value)
[[m[row][col] for col in range(0, width)] for row in range(0, height)]
json_data.close()
self.setSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Fixed)
os.isatty(sys.stdout.fileno())
list(b)
logging.Handler.__init__(self)
os.killpg(process.pid, signal.SIGKILL)
print(f())
Photo.objects.filter(tags=t1).filter(tags=t2)
data = [[eval(x) for x in y] for y in data]
list(s)
writes.writerows(mygen(reader))
QtCore.Qt.ItemIsEnabled
plt.pcolormesh(X, Y, Z)
assert f([[0, 100], [0, 10], [10, 20], [15, 40]]) == [[0, 10], [15, 40]]
ser.close()
primes = {x for x in range(2, 101) if all(x % y for y in range(2, min(x, 11)))}
email.send()
print(r.url)
list(chain.from_iterable(sorted(sub) if len(sub) > 1 else sub for sub in G))
row.remove(row.getchildren()[1])
Py_Finalize()
x = np.linspace(-np.pi, np.pi, 100)
print(model.summary())
result = sorted(iter(dictionary.items()), key=lambda k_v: (k_v[0].field, k_v[1]))
ax.set_xticks(np.arange(0, 6, 1))
math.isnan(b)
df2.plot(ax=axes[0, 1])
json.dumps(a, default=encode_b)
pd.end_time = pandas.to_datetime(pd.end_time)
x = tf.Variable(tf.constant(0, shape=[2, 2]))
int((value - epoch).total_seconds())
ax.xaxis.set_visible(False)
a = dict.fromkeys(a, 0)
self.root.destroy()
self.Acceuil.show()
lst.append(st[i:i + 10])
current_module.new_name = func
self.configure(image=self.image)
animals.sort(key=lambda name: (name[0], -len(name), name))
HttpResponse(status=204)
array([1]), array([0])
print(datetime.now() - datetime.combine(bday, time()))
[k for k, v in sorted(iter(d.items()), key=lambda k_v: (-k_v[1], k_v[0]))]
plt.show()
np.where(a > 0)
isinstance(y, float)
zip(*a)
classifier.fit(X_train, y_train)
ax.set_xlim([-2, 2])
sys.exit(0)
np.split(data, np.where(np.diff(data) != stepsize)[0] + 1)
conn.commit()
[self[n] for n in range(start, stop)]
parser = argparse.ArgumentParser()
sys.argv[1]
d = make_defaultdict(2, list)
print((x, y))
sum(dict[i] for i in range(1, 5))
subprocess.call(cmd, shell=True)
arr.sum(axis=(0, 1))
shutil.copy(src, dst)
b.remove(e)
dict(MyClass(5, 6, 7))
new_file.close()
dict(itertools.chain.from_iterable(list(dct.items()) for dct in dicts))
plt.show()
A[i, j] = D[i, j]
self._body
self.setLayout(layout)
[k for k in itertools.chain(*(list(d.keys()) for d in list(foo.values())))]
pyplot.show()
s = pd.Series(np.random.randn(5))
main()
array([[1.0, 0.0, 0.0, 1.0], [0.0, 1.0, 0.0, 1.0], [0.0, 0.0, 1.0, 1.0]])
form = waypointForm(user)
app.MainLoop()
sys.stdout.write(mystdout.get_text())
l.index(d)
[list(x) for x in dt.T.itertuples()]
df.apply(func, axis=1)
print([x for x in range(2, 100) if not [t for t in range(2, x) if not x % t]])
soup = BeautifulSoup(f)
A[1:1] = B
np.diff(m.tocsr().indptr)
db.session.commit()
foo()
self.ax.axis([-10, 10, -10, 10])
[j() for j in [create_lambda(i) for i in range(10)]]
print(list_end_counter([1, 2, 1, 1, 1]))
df = pd.DataFrame(data[1:], columns=data[0])
ax.get_yticklines()[i].set_visible(False)
unittest.main()
Clock.schedule_interval(self.update, 2)
foo = d.get(x, bar)
plot_df.plot(subplots=True)
plt.draw()
[(ix, iy) for ix, row in enumerate(a) for iy, i in enumerate(row) if i == 0]
self.set_tab_reorderable(tab.child, True)
df.apply(pd.value_counts)
self.origstream.write(self.escape_char)
p1.start()
s = set(A() for i in range(1000000))
images[idx].reshape(90, 90)
cv2.destroyAllWindows()
writer.writerow(row)
dict((key, value) for key, value in a.items() if key == 1)
results = map(lambda x: (x[0], x[1:]), reader)
session.commit()
axis.set_major_formatter(ScalarFormatter())
response = serializers.BooleanField(required=True)
df = df.iloc[:, ([j for j, c in enumerate(df.columns) if j != i])]
date = models.DateTimeField(default=datetime.now, blank=True)
x, y = (val - delta for val, delta in zip((x, y), (1, 2)))
[np.argmin(a) for a in A2]
df
query = query % conn.escape(args)
setattr(Foo, v, 0)
process.start()
np.abs(a - b) < atol + rtol * np.abs(b)
map(list.__add__, L1, L2)
cnxn.commit()
list(range(x1, x2 + 1))
np.delete(arr, 2, axis=1)
plt.scatter(X, Y)
cls(a, b)
jsonFile.close()
ax.set_xticklabels(alphab)
__init__.py
scipy.linalg.cython_blas
admin.site.register(Contest, ContestAdmin)
files_list.sort(key=operator.itemgetter(1))
l2 = [l1.index(x) for x in sorted(l1)]
plt.show()
print(list(db.keys()))
lowess(y, x)
print(time.time())
y = tuple([(z * 10) for z in img.size])
mydict = {x[0]: x[1]}
pumpedThread.start()
Fraction(0.185).limit_denominator()
c.update(line.split())
b = cosfromsin(x, a)
map(str, numbers)
lbl7.grid(row=1, column=0)
np.where(cond, arr, -100).argmax(1)
threading.Thread.__init__(self)
app.run(processes=2)
time.sleep(0.1)
send_file(tempcreator.somePath)
grequests.map(rs)
print(neigh.predict_proba([[0.9]]))
directory_list.append(os.path.join(root, name))
foo(a[:, :, (np.newaxis)] - b[:, (np.newaxis)])
tree.write(filename, pretty_print=True)
timestamp = (utc_naive - datetime(1970, 1, 1)).total_seconds()
i += 1
abc = dict((c, string.count(c)) for c in set(string))
timestamp = dt.timestamp()
tree = html.fromstring(page)
plt.show()
__init__.py
axe.set_xticklabels(df.index, rotation=0)
self._dynprop
dict[array[i][0]] = array[i][1]
subprocess.call(command.split(), shell=False)
print(_[0][0].decode(_[0][1]))
[c for c in col_names if not any(f in c for f in filter_array)]
b = word in wordList[:1] + wordList[2:]
scatter([(a, b) for a, b in zip(x, y) if a > 0 and a < 10])
ZipFile.write(os.path.basename(a), compress_type=zipfile.ZIP_DEFLATED)
mydict = dict.fromkeys(string.printable, 0)
int(math.log(n, 2))
print([a[i], a[i + 1]])
v.split()
json.dumps(pyDict)
self.Bind(wx.EVT_LEFT_UP, self._onMouseUp)
fig.autofmt_xdate()
results = cur.fetchall()
MyApp().run()
self.assertEqual(response.status_code, 200)
A[(0, 2), :, 1:]
[a[row, col] for row, col in enumerate(col_index)]
popt, pcov = curve_fit(goal, xdata, ydata, p0=[1] * 5)
metadata.create_all(engine)
plt.show()
self.setupUi(self)
print((name, val))
[hex(ord(c)) for c in data]
[2, 1, 0]
sm[(np.random.sample(sm.shape[0], K, replace=False)), :]
ax = fig.add_subplot(1, 1, 1)
time.sleep(60)
list(filterer(list1, list2))
data = {tuple(item) for item in map(sorted, lst)}
con.close()
sorted(gen)
my_handler.setLevel(logging.INFO)
plt.close()
session2.commit()
np.fill_diagonal(a, 0)
[item for t in tuples for item in t]
qs.filter(name__startswith=self.kwargs.name)
(foo().bar() if condition else foo()).baz()
hscrollbar.grid(row=1, column=0, sticky=E + W)
time.sleep(2)
pd.concat([df.T[x] for x in df.T], ignore_index=True)
round(0, 4)
cor.loc[:, :] = np.tril(cor.values, k=-1)
logging.getLogger(my_module.__name__).setLevel(logging.DEBUG)
print(df.groupby(ind).head())
np.where(a == a.max())
print(map(joiner, sixgrams))
time.mktime(time.strptime(time1, format))
a[(0), :, :], a[(1), :, :], a[(2), :, :]
plt.show()
f.close()
asyncio.get_event_loop().run_until_complete(hello())
ax.yaxis.set_minor_locator(MultipleLocator(0.2))
[(i in fruit_dict2) for i in fruits]
workbook.close()
plt.show()
print(my_list[-1])
html = driver.page_source
fig = PLT.figure()
fruitdict[i] = locals()[i]
plt.show()
ax = fig.add_subplot(1, 1, 1)
your_method()
np.sum(arr[1:-1, 1:-1])
plt.colorbar()
print(flatten_count(x, 1))
np.getbufsize()
self.decorator(func)
item_set[category].append(item)
plt.xticks()
list(zip(lst[:-2], lst[1:-1], lst[2:]))
ax = fig.add_subplot(111)
result = [(x * P) for x in S]
bar[a:b:c].foo()
json.JSONEncoder.default(self, obj)
pl.clf()
data = [(line[0], line[1:]) for line in csv.reader(f)]
writer.writerow(row)
print(cv2.__version__)
[log(y, 10) for y in x]
df
[x for i, x in enumerate(unculledlist) if i % 6 % 2 == 0 if i % 5 % 2 == 0]
time.sleep(delay)
startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
[x for x in lst if x % 2 == 0]
new_df.iloc[0, 0] = 1
s.setsockopt(SOL_SOCKET, SO_BROADCAST, 1)
min(l1, l2)
os.remove(file_list.pop())
self.crawler.engine.unpause()
ax2.set_yticklabels(y_label2, fontsize=20)
self.driver.quit()
ax.legend(numpoints=1)
con.commit()
soup = BeautifulSoup(html)
threading.Thread.__init__(self)
string[start:end]
tuple(d[k] for k in keys)
etree.fromstring(xml_response)
conn.close()
subprocess.call(cmd, stdin=subprocess.PIPE)
{k: d1[k] for k in list(d1.keys()) & l1}
plt.show()
df.columns[np.argsort(df.values)]
df.groupby(level=0, group_keys=False).apply(first_last)
plt.show()
g.sum()
[[400, 200]]
df1.loc[df2.index[0]] = df2.iloc[0]
get_color(1)
fig.set_figwidth(24)
[a[x:x + seg_length] for x in range(0, len(a), seg_length)]
ax = fig.add_subplot(111)
print([zip(A, item) for item in product(B, repeat=len(A))])
print(sys.stdin.readline())
random.shuffle(data)
self.layout().addWidget(self.child)
logger.setLevel(logging.DEBUG)
np.count_nonzero(df.isnull())
start_time = time.time()
intbids.append(int(bid))
[dict(template, **{k: value}) for value in add]
print(time.mktime(d.timetuple()))
[Request(self.start_url, callback=self.parse_listings, follow=True)]
time.sleep(20)
ws.cell(row=1, column=1).style.border.top.border_style = borders.BORDER_MEDIUM
[(x + y) for x, y in zip_longest(reversed(P), reversed(Q), fillvalue=0)][::-1]
unittest.main()
x[mask] = np.nan
table.append(row)
len()
workbook.close()
nsolve([x * y - 1, 4 * x ** 2 + y ** 2 - 5], [x, y], [1, 1])
reactor.run()
example[4:1]
out = [np.sum(data[c]) for c in contribs]
plt.show()
conn.rollback()
next(x for x in list_of_tuples if value in x)
screen.blit(image, (0, 0))
arr.resize((arr.shape[0] * 2, arr.shape[1]))
b.close()
a[tuple(idx.T)] = 5
fig = plt.figure()
libc.cprogram(wts, res, kks, byref(n), ex)
c = np.concatenate((a, b))
time.sleep(1)
df.reindex([2, 0, 1])
np.array(map(str, a))
buff += sys.stdin.read(1)
lst.sort()
{{a.some_other_field}}
datetime.datetime(2001, 12, 11, 0, 0)
ax.set_aspect(2)
[len(list(group)) for value, group in itertools.groupby(b_List) if value]
output = stdout.read()
do_stuff()
sum(len(v) for v in d.values())
print(new_list)
result.append((btoa[k], k))
admin.site.unregister(User)
[0, 1, 1, 1, 0],
self.assertEqual(response.status_code, 200)
pixels.append(((x, y), pixel[:-1]))
dist = numpy.linalg.norm(a - b)
x.reshape(-1, np.prod(x.shape[-2:])).shape
data.append(json.loads(line))
y = set(x.flat)
[sum(int(i) for i in num) for num in list]
time.sleep(1)
print(np.allclose(coeffs1, coeffs2))
np.random.seed(seed)
kOUT = np.zeros(N + 1, dtype=object)
cython.ushort
cython.longlong
cython.ulonglong
[(i - 1) for i in l]
plt.show()
urllib.request.install_opener(opener)
browser._update_state(response)
OrderedDict(lla[::-1])
self.close()
image.close()
df[~df.index.isin(df_a.index + df_b.index)]
ent.grid(row=0, column=1)
i.setGridIntersection(i.pos())
main()
coords.reshape(-1, 2)
cv2.waitKey(0)
df.groupby(dr5minute.asof).agg(ohlcsum)
sum(1 for _ in iter)
self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
seen.add(i)
plt.imshow(rotate_lena_noreshape, cmap=plt.cm.gray)
s.send(data)
[tuple(sequence[i:i + n]) for i in range(count)]
c = copy.deepcopy(a)
print(sys.path)
list(d.items())
urllib.parse.quote(a)
[dict(template, z=value) for value in add]
wrapped()
sorted(lst, key=lambda x: x[1], reverse=True)
df.iloc[:, 2:] = a
print(int(Nationality.PL))
as_strided(a, shape=(2, 2, 2, 2), strides=(2 * s, 0, s, 0)).reshape(4, 4)
f.read()
root.destroy()
map(min, zip(*alist))
dict(lst)
main()
print(ET.tostring(tree))
driver = webdriver.Chrome(chrome_options=options)
[token for token in text.split() if token.isdigit()]
print(np.fft.fft(x))
d[k].append(v)
main()
a_unique_max[np.argsort(perm[last])]
lst.sort(key=lambda x: x[1])
ax.scatter(x, y, z)
print((cities[0][0], cities[1][0]))
p.Start()
dict(zip(keys, values))
user = models.ForeignKey(User)
reversed(sorted(a.keys()))
signal.signal(signal.SIGALRM, _handle_timeout)
[1, 1, 0, 1, 0, 1]
ax = fig.add_subplot(1, 1, 1)
cv2.waitKey(0)
self._s.get(k.lower())
lst[1::2]
lots_list.sort(mycmp)
f1.write(line)
self.socket.close()
len(df.columns)
print(get_drives())
res = [s[i - 2:i + 1] for i in range(2, len(s)) if s[i] == s[i - 2]]
str(float(your_string_goes_here))
df[~df.field.isin(ban_field)]
__init__.py
gtk.main()
test()
self.send_response(200)
pl.figure(1)
result = cursor.fetchall()
np.concatenate((a1, b1))
my_list2 = [i[0] for i in my_list]
[1][0][1]
print(line)
m.create_all()
sys.exit(1)
self.button.clicked.connect(self.handleButton)
result.update((k, dol1[k] + dol2[k]) for k in set(dol1).intersection(dol2))
sys.stdout.flush()
response = requests.delete(url, data=json.dumps(payload), headers=headers)
a[0:1][0] = 1
df = pd.DataFrame([series])
print(nplats[index], nplons[index])
print([tuple(x for x in y if x) for y in a])
history.append(next(sequence))
zip(t[::2], t[1::2])
print(max(foo))
sys.modules[__name__].__file__
test()
itertools.zip_longest(fillvalue=fillvalue, *args)
Z[(raw[:, 0:2] - minimum(raw[:, 0:2], axis=0)).T.tolist()] = raw[:, (2)]
sns.kdeplot(x, shade=True)
c.save()
plt.close()
Counter(words).most_common(10)
df.plot()
app.mainloop()
celery.config_from_object(celeryconfig)
time.sleep(random.random())
dic.setdefault(key, []).append(item[-1])
list(itertools.product((0, 1), repeat=4))
print(find_nearest(array, value))
logfile.close()
plt.legend()
pygame.sprite.Sprite.__init__(self, self.groups)
print(len(someList))
d[pair[0]] = int(pair[1])
items = sorted(list(ipCount.items()), key=my_key)
page = html.fromstring(urllib.request.urlopen(url).read())
list = x.split()
nic.EnableDHCP()
map(id, a[1:])
logging.basicConfig(level=logging.ERROR)
lst.count(1) > 1
msg.send()
sorted(adict, key=adict.get, reverse=True)
convert_file(sys.argv[1], sys.argv[2])
wb.save(filename=dest_filename)
sorted(l1, key=lambda id_and_name: id_and_name[0])
[0, 0, 0, 0, 0, 0, 1, 1],
beat(app=app).run()
new_dic.setdefault(1, {})[2] = 5
matrix.append([0] * ncols)
print(f(2))
random.shuffle(values)
pd.DataFrame(dfN, columns=wordlist).fillna(0)
print(line)
next(key for key, value in d.items() if value == my_value)
data = File.read(16 * 1024 * 1024)
plt.show()
time.sleep(sleep_time)
dict(((a, b, c), 1) for a in A for b in B for c in C)
pygame.display.set_mode((infoObject.current_w, infoObject.current_h))
os.path.dirname(foo.__file__)
plt.contour(r * np.cos(t), r * np.sin(t), z)
nx.draw_networkx(G, pos)
plot(b[:, (0)], b[:, (1)])
label.pack()
len(gc.get_referrers(my_obj))
data.get(num, data[min(list(data.keys()), key=lambda k: abs(k - num))])
np.random.seed(0)
json.dumps(row)
print(line)
mod == __import__(module_name)
self.assertEqual(res, 7)
file1.close()
A = (B == np.arange(M)[:, (np.newaxis)]).dot(C.T)
lst.attr.get(idx, default_value)
screen.fill((0, 0, 0))
df = df.merge(df.apply(calculate, axis=1), left_index=True, right_index=True)
[(1, 4), (6, 8), (10, 10)]
lbl6.grid(row=0, column=0)
np.empty((M, N, L))
sorted(lst)
Route.objects.filter(stops_forwards__contains=[285])
plt.show()
random.shuffle(random_order)
sess.run(train_op)
items.sort()
writer.writerow([test_data[0][1]])
signal.signal(signal.SIGINT, self.old_handler)
dir(settings)
python - V
print(etree.tostring(root, pretty_print=True))
pprint.pprint(list(cursor))
QtGui.QWidget.__init__(self, parent)
df.stack().dropna().reset_index(drop=True)
pygame.display.list_modes()
list(chain(repeat(0, a.count(0)), compress(a, a)))
file_date_tuple_list.sort(key=lambda x: x[1], reverse=True)
plt.gcf().canvas.draw()
sum(totals.values())
data = json.loads(result.text, object_pairs_hook=OrderedDict)
myscript.py | xclip
np.random.seed(0)
pg.display.flip()
[[next(b) for _ in range(x)] for x in l]
webbrowser.open(url)
simplejson.JSONEncoder.default(self, obj)
dict.__init__(self, *args, **kwargs)
print(match.group(1))
d.save()
ax.legend()
csv.writer(f, quoting=csv.QUOTE_NONE).writerows(cursor)
self.driver.implicitly_wait(20)
writer.writerows(data)
df.join(s)
s[s == 12].index
all(x != y for x, y in itertools.combinations(objs, 2))
test_f()
ax.patch.set_visible(False)
fh.write(h.hexdigest())
time.sleep(1)
writer.writerows(zip_list)
sys.path
bar.sort(reverse=True)
app.mainloop()
a.reshape(-1, R).mean(axis=1)
np.where(np.logical_and(a >= 6, a <= 10))
pool = Pool(processes=5)
{{my_json | safe}}
root.grid_rowconfigure(0, weight=1)
writer.writerow(reorderfunc(row))
print(my_file.read())
fib(n - 1) + fib(n - 2)
platform.architecture()
min(x, key=lambda t: (t[1], -t[0]))
ax.plot(list(range(10)))
[x for x in A if x not in subset_of_A]
subprocess.Popen(cmd)
greeter.greet()
sys.maxsize + 1
self._handle.close()
output, err = process.communicate()
base64.b64encode(chr(255))
list(ordered_dict.keys())[2]
np.diag(A.dot(B.T))
pylab.show()
keys.add(parts[1])
myreportscode.py
plt.xlim(0, 4)
main()
buff.seek(0)
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
time.sleep(0.5)
any(first == c for c in letter)
wx.Frame.__init__(self, wx.GetApp().TopWindow, title=self.title)
sorted(list(some_dict.items()), key=operator.itemgetter(1), reverse=True)[:10]
array([[11.4, 4.0], [12.0, 5.0]]),
self.text.focus()
[e.value for e in Color]
path, file = os.path.split(path_and_file)
writer.writerow(row)
f.write(file_str)
copy.copy()
load_documentation()
{{toctree(collapse=False)}}
g[:] = (elem[:12] for elem in g)
print((i, p))
df = pd.DataFrame({i: list(range(1000)) for i in range(100)})
fig = plt.figure()
sum(1 for i in set(list_of_purple_items) if i not in main_set)
users = User.objects.filter(event__in=events)
int(utc_mktime(dt.timetuple()))
f2.close()
datetime.timedelta(2.5)
ax = fig.add_subplot(1, 1, 1)
norm.cdf(norm.ppf(0.95))
not float(your_number).is_integer()
arr.append([0, 0, 0, 0])
df.as_matrix(columns=df.columns[1:])
self.setdefault(key, self.default_factory(key))
array([[1, 1], [2, 2]])
common_keys = [k for k in dict1 if k in dict2]
l.last_index()
collections.Counter(dictionary).most_common(2)
[0, 0, 0, 1, 1, 1, 0, 0],
set(tuple(element) for element in xx)
f.close()
time.sleep(2)
ax1.plot(list(range(2)), list(range(2)), linewidth=2)
c[tuple(list1[0])]
tornado.ioloop.IOLoop.instance().start()
all(item1 == item2 for item1, item2 in zip(list1, list2))
sorted_rows[i[0]].append((i[1], i[2]))
Response(serializer.data, status=status.HTTP_200_OK)
AC_SUBST([PYTHON_CFLAGS])
some_list.append(some_list)
imagedata.put()
a[~b] = np.nan
conn.commit()
pool = Pool(processes=1)
p = numpy.vstack([p, q])
transaction.commit()
np.random.seed(seed)
ax.xaxis.set_major_formatter(hfmt)
deletemylist[:]
pyplot.show()
p.start()
os.path.join(expanded, filename)
opener = urllib.request.build_opener(MyHTTPHandler)
win.set_app_paintable(True)
app.exec_()
IOLoop.instance().start()
l = [y for x, y in sorted(zip([key(i) for i in l], l))]
fsock.close()
QtGui.QWidget.__init__(self, parent)
plt.draw()
[(x + y) for x, y in zip_longest(P, Q, fillvalue=0)]
MPI_Finalize()
s.close()
print(x.apply(lambda a: list([v for v in a if v == v])))
ax.add_patch(rect)
array([[0], [0], [0], [1], [1], [0]])
sorted(trial_list, key=trial_dict.get)
inspect.getouterframes(inspect.currentframe())[1][1:4][2]
set(a_list).intersection(a_string.split())
cv2.waitKey(0)
app.run(debug=True)
sys.stdout.flush()
print(soup.prettify())
object.__getattribute__(self, name)
pfile.close()
zin.close()
x == y and type(x) == type(y)
print(hashlib.sha1(json.dumps(b, sort_keys=True)).hexdigest())
print(line)
[(4 if x == 1 else x) for x in a]
sys.stdout.flush()
list(chain(*zip_longest(d, e[::-1])))
colorbar()
p.terminate()
new_list
float.hex(8.25)
layout.addWidget(self.button)
np.hstack([np.repeat(a, len(a), 0), np.tile(b, (len(b), 1))])
server.quit()
a.sort()
json.dumps(dict)
self.layout.addWidget(self.button)
a[slice(*b)]
reactor.run()
s[start:end]
sys.exit(app.exec_())
rank = models.IntegerField(default=0)
xax.setTicks(ticks)
pd.stats.moments.rolling_std(timeseries, periods, ddof=0)
sorted(list(a_dict.items()), key=lambda k_v1_v2: k_v1_v2[1][1])
df.T.apply(lambda x: x.nunique(), axis=1)
print(cls.__name__)
print(request.LANGUAGE_CODE)
self.cls.instances[key]
q = Queue.Queue()
self.save_m2m()
self.show()
[random.random() for i in range(N)]
requests.get(url, cookies=load_cookies(filename))
id = db.Column(db.Integer, primary_key=True)
[(i[0] + j[0], i[1] + j[1]) for i, j in zip(a, b)]
[i for i in L1 if i in L2]
admin.site.register(User, UserAdmin)
os.path.basename(fullpath)
main()
a[1:4].sort()
np.where(detected_minima)
sorted(s1, key=trailing_digits)
ssc.awaitTermination()
ax = fig.add_subplot(111)
ax.w_xaxis.set_major_formatter(ticker.FuncFormatter(format_date))
myFunction()
response = subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT)
text = text.translate(replace_punctuation)
print(now - dateutil.relativedelta.relativedelta(months=1))
main()
root.clear()
Article.objects.all().delete()
sqlContext.createDataFrame(rdd)
self.lc.Bind(wx.EVT_MOTION, self.OnMouseMotion)
a = [x[:] for x in [[0] * cols] * rows]
[f(x) for x in l if f(x)]
result = child.communicate()[0]
test.myfun(f)
args = parser.parse_args()
mylogger.setLevel(logging.INFO)
foo.mymethod(1, 2)
df.loc[df.loc[:, (columns)].eq(value).all(axis=1)]
data.groupby(data.date.dt.year)
dir()
df.groupby([times.hour, times.minute]).value_col.sum()
df = DataFrame(np.random.randn(1000, 2))
plt.show()
app.run()
[dict(items) for items in product(*flat)]
print(sum(1 for _ in f))
r = np.hypot(x, y)
print(cts.minute == 0)
reactor.run()
mydict = {rows[0]: rows[1] for rows in reader}
pprint(d, width=40)
dict(a)
d = d.replace(tzinfo=tz)
a.sum(axis=0)
proc.kill()
p = Process(target=f, args=(arr,))
main()
plt.show()
random.uniform(0, numpy.nextafter(0, 1))
[e for e in lelist if e in lestring]
ax.grid(True)
plt.show()
print(iorf.fup(2))
x.pop()
random.shuffle(idx)
ax0.yaxis.set_ticks(np.arange(70000, 80000, 2500))
response = requests.post(url, files=files)
plt.show()
source.close()
curses.endwin()
mpmath.besselk(0, 1714)
self.a, self.b = a, b
name = models.CharField(max_length=64)
deleteglobals()[name]
plt.figure()
df.subtract(df2, fill_value=0).reindex_like(df).astype(int)
[x for x in lst if x % 2 == 0]
print(z[k.astype(int)])
bigfloat.exp(5000, bigfloat.precision(100))
con.commit()
[(), (0,), (1,), (2,), (0, 1), (0, 2), (1, 2), (0, 1, 2)]
ax.add_patch(polygon)
plt.imshow(np.array(img.tolist()))
sys.exit(start_ipython())
time.sleep(timeout)
set.union(*lis)
__init__.py
sorted(a, key=a.count, reverse=True)
driver.add_cookie(cookie)
{{count}}
sys.exit()
itertools.chain(*itertools.zip_longest(*iters))
[i for i, j in mylist]
self.show()
ax = fig.add_subplot(111)
mylist.sort(key=sort_func)
client.close()
self.__dict__[key]
thread.start()
requests.post(url, params=params, json=data)
d[k].append(v)
os.chdir(os.path.dirname(__file__))
grid.cbar_axes[1].colorbar(im1)
main()
main()
root.withdraw()
plt.plot(y)
np.split(indices, np.where(np.diff(args))[0] + 1)
tree.xpath(xpathselector)
Bar.objects.filter(pk=foo.id).update(a=bar.id)
simplejson.loads(_)
q.queue.clear()
msg = email.message_from_string(msgtxt)
{{a.some_field}}
gc.collect()
f.write(g)
[tup[0] for tup in mylist]
df = pandas.read_csv(filename, skiprows=skip)
session2.commit()
app.mainloop()
l = nx.topological_sort(g)
np.insert(a, 1, np.array((1, 1)), 0)
len(zdumps(z))
dir(MyClass)
list(dict((len(i), i) for i in l).values())
calendar.day_name[1]
time.sleep(0.1)
main()
HttpResponseRedirect(user.redirect_to())
df.dictionary.apply(str2dict).apply(pd.Series)
f.save()
[woman for woman in list(graph.keys()) if woman not in list(match.keys())]
stream.close()
time.sleep(0.5)
text = str(combobox1.currentText())
timeout.cancel()
plt.gcf().autofmt_xdate()
a[[0, 1], [1, 1], [2, 2]]
a = [[]] * 2
pass
plt.show()
outfile.close()
time.sleep(0.02)
w.start()
myfile.write(template.format(**context))
self.foo.wait()
arr = np.empty((N, M))
print(list(mydict.keys())[list(mydict.values()).index(16)])
foo(a=1, b=2)
return_equals(a, b, d, c)
items = [item.time for item in objects]
{k: v for k, v in list(d.items()) if k.startswith(s)}
words.add(line.strip())
ax.add_line(Line2D([-50, 0, 50], [-50, 0, 0], linewidth=80))
print(i, repr(binify(i)))
screen.blit(picture, rect)
server.sendmail(FROM, TO, message)
entryFrame.grid(row=0, column=1)
[l[:1], l[1:]]
curses.endwin()
output.close()
time.sleep(1)
range(-20, 0, -1)
tree = etree.HTML(result.read(), etree.HTMLParser())
window.show_all()
plt.plot(x, y)
plt.clf()
X.argmin(axis=1)
nf.write(str(random.randint(0, 1000)))
isinstance(x, collections.Iterable)
reduce(lambda d, key: d[key], path, aDict).update(aSecondDict)
plt.show()
locale.currency(188518982.18, grouping=True)
os.unlink(self.dest)
func(*args, **kwargs)
int(round(2606.89579999999, 2) * 100)
x.append(1)
x.astype(int)
inspect.getmembers(MyClass, lambda a: not inspect.isroutine(a))
pass
output.close()
lpr.stdin.write(your_data_here)
plt.show()
print({key: a[key] for key in a if key not in keys})
sys.exit(app.exec_())
ModelA.objects.filter(Q(instance_of=ModelB))
profile.save()
map(dict.fromkeys, l)
call_with_dict(some_func, my_dict)
self.SetSize((self.Size[0], self.figurecanvas.Size[1]))
{c.name: getattr(self, c.name) for c in self.__table__.columns}
out = np.vstack((lats, lons, vals))
ax.axis([0, 10, 0, 10])
s[0].astype(int)
json.dumps(recursive_asdict(data))
root.mainloop()
f()
tuple([x[0] for x in G])
print(requests.post(target_url, data=xml, headers=headers).text)
RichIPythonWidget.__init__(self, *args, **kw)
((a + a[:0:-1]) * len(a))[::len(a)][:len(a)]
print(document.text_content())
self.newargument = myarg
first_element = myList[i[0]]
f.flush()
[[m[row][col] for row in range(0, height)] for col in range(0, width)]
series.dt.date.astype(str).to_json()
plt.colorbar()
mask[::4] = 0
a.append(2)
x = {k: v for k, v in spec1.items() if k in spec2 and spec2[k] == v}
[entry for tag in tags for entry in entries if tag in entry]
p.Start()
plt.subplot(121)
urllib.request.install_opener(opener)
screen.blit(surf1, (100, 100, 100, 100))
print(urlparse.parse_qs(qs))
combo.pack()
path = path.to.module.__file__
a = numpy.array([Register() for _ in range(4)])
sorted(list(mydict.items()), key=itemgetter(1))
[0][1][0]
bar = dict(foo)
reverse(text[1:]) + text[0]
DELTAFETCH_ENABLED = True
Py_Finalize()
ws.cell(row=2, column=2).value = 2
df.rename(columns=lambda x: int(x) if type(x) == float else x)
sys.exit(app.exec_())
link.click()
entry.pack()
np.allclose(C0, C1)
sys.stdout.flush()
plt.plot(x, density(x))
f.write(bin_array)
ax.yaxis.set_major_formatter(mpl.ticker.ScalarFormatter())
plt.hist(data, bins=bins, alpha=0.5)
ax.get_xaxis().set_minor_locator(mpl.ticker.AutoMinorLocator())
urlfetch.set_default_fetch_deadline(60)
ax2.get_position()
any([(i in fruit_dict2) for i in fruits])
os.chdir(path_dir)
dt = datetime.fromtimestamp(mktime(struct))
plt.show()
a = sps.csr_matrix((a.data, a.indices, a.indptr), shape=(10000, 10020))
tk.Tk.__init__(self)
set(itertools.combinations(S, m))
self.grid_columnconfigure(1, weight=1)
xs.intersection(y)
my_file.seek(0, 0)
time.sleep(remain)
value = cache.get(key) or cache.setdefault(cache, func(key))
{k: mylist.count(k) for k in set(mylist)}
obj.foo42()
proc.wait()
a, b, c = [(lambda n=n: n * n) for n in l]
x.__add__(x)
np.frombuffer(ftdi.read(RXcount), dtype=np.uint8)
self.ax = self.fig.add_subplot(111)
plt.close()
setattr(someobject, key, value)
plt.axvline(x=xc)
zip(*args)
frame.values[0][0]
itertools.cycle(list(range(2, 10)))
conn.close()
time.sleep(1)
print({v[0]: v[1:] for v in list(d.values())})
indices = np.where(a == a.max())
d = np.diag(a[:, (0)])
time.sleep(1)
plt.colorbar()
s.reset_index().groupby(s.index.names).first()
ax.add_collection(coll)
self.__class__.__name__
[(v + 1 if i % 2 != 0 else v) for i, v in enumerate(list1)]
k, v = list(d.items())[0]
uuid.UUID(int=rd.getrandbits(128))
deletethe_dict[key]
df.groupby(by=[df.index.year, df.index.month]).sum().transpose()
__init__.py
[x for x in lst if [(x[A], x[C]) not in seen, seen.add((x[A], x[C]))][0]]
A[(2), (2), :, :]
cvuint8.dtype
self.__dict__.update(s)
admin.site.register(TwitterUser, TwitterUserAdmin)
new_list
do_something_with_frame(frame)
[0, 0, 0, 1, 0, 1, 0, 0],
data = json.loads(contactFile.read())
ciao.ciao()
server.starttls()
pprint(sorted(flatten(THIS)))
signal.alarm(0)
numpy.apply_along_axis(lambda row: numpy.linalg.norm(row, ord=1), 1, a)
numpy.where(numpy.all(a_view == may_b, axis=1))[0]
[x for x in a if x not in b]
next(x for x in lst if matchCondition(x))
queryset.filter(id__in=articles)
modernthingy = datetime.datetime.fromtimestamp(zopethingy.timeTime())
session.query(Page.url).filter(tuple_(Page.url_crc, Page.url).in_(keys))
f.write(str(x))
solve([5, 10], [1, 4])
[j for i in powerset(s) for j in permutations(i)]
list(chain(*a))
pd.DataFrame(x.T).T.drop_duplicates(keep=False).as_matrix()
lines = lines[:-1]
transaction.rollback()
lst.sort(key=lambda c: POS[c])
ax.xaxis.set_major_locator(locator)
C = np.dot(A, B)
ip_list
time.sleep(1)
ax.w_xaxis.set_major_locator(ticker.FixedLocator(some_dates))
root.mainloop()
[sum(x) for x in zip(*lis)]
time.sleep(1)
result = json.load(urllib.request.urlopen(url))
name = models.CharField(max_length=100)
-r72 - g595x842
plt.figure()
pd.options.display.max_colwidth
ax.set_rmax(1)
[1][1][0]
np.random.seed(5)
next(iter(q))
libxml2 - devel
file_2.write(file_1.read())
[x for y in z if sum(y) > 10 for x in y if x < 10]
locale.setlocale(locale.LC_ALL, saved)
tuple(itertools.chain.from_iterable(t))
[hex(i) for i in data]
ax.plot_surface(x, y, z, rstride=4, cstride=4, facecolors=bm)
plt.show()
modules[module] = sys.modules[module]
sys.getsizeof(string_drawer)
doc = yaml.load(f)
plt.subplot(121)
df = df[(df.one > 0) | (df.two > 0) | (df.three > 0) & (df.four < 1)]
max(im.getcolors(im.size[0] * im.size[1]))
root.mainloop()
pd.Series(a, a._fields)
l = [max(g, key=lambda x: x[1])[0] for _, g in groups]
True
__init__.py
chain.delay()
x.reshape((x.shape[0], -1)).mean(axis=1)
list(dd.values())
ax.plot(x)
logging.basicConfig(filename=settings.log_file, level=logging.DEBUG)
app = application(urls, globals())
deletex[:N]
fh.seek(0)
etree.fromstring(goodxml)
newdict = {x: [] for x in range(10)}
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
app.run(debug=True)
xl.Quit()
urllib.request.install_opener(opener)
a.func(b=b, c=c)
window.show()
print(Outputstring)
self.y += STEP
np.random.seed(1)
{i: [] for i in x}
diag = [row[-i - 1] for i, row in enumerate(mat)]
os.makedirs(savedir)
maxLPFt = max(lpfData, key=operator.itemgetter(1))
data = np.random.rand(10, 15, 5)
type(f).__str__ is not object.__str__
(-avgDists).argsort()[:n]
lambda x, i=i: x % i == 0
~pd.isnull(df[list_of_cols]).all(axis=1)
text.collocations(num=20)
plt.show()
s += timedelta(minutes=minutes, seconds=seconds * 100)
L.append([])
tqdm_notebook().pandas(*args, **kwargs)
np.array([[int(i) for i in line.split()] for line in data])
ax.clear()
basemodule.dontoverride()
pdb.set_trace()
[zip(x, main2) for x in itertools.combinations(main1, len(main2))]
my_failing_task()
ax1.imshow(source, cmap=plt.cm.gray)
key in self.__dict__
pool.close()
complete_path = os.path.join(root_path, sanitised_filename)
type(plain_string), type(unicode_string)
self.rect.set_xy((self.x0, self.y0))
[(x[0], len(x[1]), x[1][0][0]) for x in l]
browser.close()
m.dot(m.T)
[0][0][1]
Decimal(math.factorial(171))
Base.metadata.create_all()
fliplr(matrix)
tornado.ioloop.IOLoop.instance().start()
matrix[0][1]
app.run()
berlin.delete()
ax.plot(xp, yp, zs=zp)
UserProfile.objects.create(user=instance)
dict((c, string.count(c)) for c in set(string))
plt.imshow(data, vmin=-10, vmax=10)
pd.concat([price, vol], axis=1)
all([(xdiff[0] == xdiff[n]) for n in range(1, len(xdiff))])
print(len(japanese))
master.mainloop()
s[::-1].replace(old[::-1], new[::-1], count)[::-1]
print(im.size)
plusone.append(int(value))
DialApp().run()
a_b = [e for e in a if not e in b]
print(sys.exc_info()[0])
extension = os.path.splitext(filename)[1]
df.rename(columns, inplace=True)
l[1::2] = [(x * 2) for x in l[1::2]]
plt.show()
ts.index.freq
np.nonzero(np.all((lower_bound < m2D) & (higher_bound > m2D), axis=1))[0][0]
file.seek(0)
self.data.columnconfigure(0, weight=1)
d = ordereddict(dic, relax=True)
plt.plot(x, y)
p.start()
[len(t) for t in tuples]
file.write(line)
self.window.unfullscreen()
df1.to_sparse().info()
self.capture = cv.CaptureFromCAM(0)
print(zed())
layout.setSpacing(10)
func(parameters[0], parameters[1], parameters[2])
sheet1.write(i, 0, n, fmt)
dic[keys[-1]] = value
cbar = fig.colorbar(im)
count.most_common()[:10]
plt.subplots_adjust(bottom=0.2)
random.shuffle(l)
conn = pyodbc.connect(odbc_conn_str)
heapq.nsmallest(1, ((k, i) for i, k in enumerate(s)))
models.py
answer = [v for v in itertools.product(*ranges) if sum(v) == 100]
s = c.connect()
fig = plt.figure()
[i for i, v in enumerate(list1) if v >= 1 and list2[i] == 0]
print([(num if num > 0 else z.pop(0)) for num in y])
print([i for i in results])
print(np.argmax(counts))
data[:5]
print(rsp.content)
[id(x) for x in l2]
sys.modules[module_name]
moduleA.py
ScrolledText(root).pack()
content = f.read()
pygame.display.flip()
len(max(sum(tableData, []), key=len))
list_of_lists
counter.save()
f.close()
sys.exit()
my_list.remove(new_dict)
complete_path = os.path.join(root_path, sanitised_path, sanitised_filename)
b = copy.deepcopy(a)
self.queue.pop()
list(df.T.to_dict().values())
show()
window.show_all()
print(line)
root.mainloop()
zip(*(x[i:] for i in range(n)))
flask.jsonify(**course_list)
[1] * 6
ax.set_xticklabels(final_labels)
print(list(map(int, chain.from_iterable(line.split() for line in f))))
json_data = json.dumps(data)
x.reshape(x.shape[:-2] + (-1,)).shape
response.render()
not any(el == 0 for sublist in maze for el in sublist)
button.pack()
{{message | safe}}
min(s, key=lambda c: (-s.count(c), s.index(c)))
False
libfoo.dylib
t.grid(sticky=(N, E, S, W))
ax.set_xticklabels(label_text)
os.remove(os.path.join(dir, file))
ax.imshow(im, *args, **kwargs)
fp.close()
random.shuffle(temp)
p.stdin.write(cmd)
data = urllib.request.urlopen(req).read()
[]
ofimg[0].getHomography()
main.show()
t.start()
self.write(response.content)
txt_frm.grid_columnconfigure(0, weight=1)
sys.path.append(package2_path)
df.sort_index(inplace=True)
answer = msvcrt.getch()
x, y = zip(*xy)
soup.contents[0]
httpd.serve_forever()
n.show()
print(instance.name)
figure.canvas.draw()
httpd.serve_forever()
Thread.__init__(self)
p.stdin.flush()
json_object = json.loads(json_raw[0])
df.append(s)
sys.exit()
writer.writerow([date, value])
ax.set_axis_off()
threading.Thread(target=run_all).start()
(2 - N) % 7
df.A.apply(pd.value_counts).fillna(0).astype(int)
print(sys.exc_info())
d = [a, b, c]
self.__dict__.update(adict)
np.allclose(D0, D2)
df_b.combine_first(df_a)
print(sum([i[list(i.keys())[0]][1] for i in myList]))
fig = plt.figure()
[item for item in full_list if not omit & set(item)]
datetime.datetime(now.date(), datetime.time(tzinfo=now.tzinfo))
plt.figure(figsize=(5, 5))
self.canvas.configure(yscrollcommand=self.vsb.set)
result.write(new_text)
p = subprocess.Popen([cmd_list], shell=False)
print(list_of_hets)
print(df.to_string())
A.T[B == 1].T
foo = (x ** 2 for x in count())
execution.history()
x[x].index
Row(**row_dict)
root.mainloop()
TotSize[:] = map(sum, data)
print(parse_qsl(urlparse(url)[4]))
print(list(d.values()))
max(values[i + 1] - values[i] for i in range(0, len(values) - 1))
random.shuffle(l)
result = [split_result[0], split_result[1], [i for i in split_result[2:] if i]]
print(list_end_counter([1, 2, 1, 1]))
plt.show()
deletex[index]
print(parse_python_source(os.path.join(d, f)))
hello(sys.argv[1], sys.argv[2])
object_list.sort(key=lambda x: key_precedence[x.key])
ax = fig.add_subplot(111)
i = max(i - 1, 0)
file.close()
map(sum, zip(*([iter(q)] * 2)))
list(set(A).intersection(B))
pl.show()
np.where(x == np.max(x))
ax.set_ylim(y_min, y_max)
print([attr.get(idx, default_value) for attr in attrs])
self.y = math.sin(a) * original_x + math.cos(a) * original_y
subprocess.Popen([file], shell=True)
sys.setrecursionlimit(10000)
my_array[:, (1)] = temp
sorted(l, key=lambda *args: random.random())
[[[0] * n] * n] * n
fig = plt.figure(figsize=(4, 4))
response = DeviceView.as_view()(request, pk=1)
path = os.path.abspath(args.file.name)
pyplot.show()
fig.canvas.draw()
S.pop()
a = set([1])
len(list(flatten(mylist[0:1])))
ax.add_patch(angle_plot)
__init__.py
plt.xlim((-1, 4))
invite_reason = models.CharField(max_length=64)
time.mktime(time.localtime(calendar.timegm(utc_time)))
sys.stdout = sys.__stdout__
app.mainloop()
s.listen(1)
pylab.show()
B.sendall(A.recv(4096))
br.set_cookiejar(cookiejar)
y = np.array([2, 1, 5, 2])
conn.autocommit = True
plt.plot(z, t)
time.sleep(1)
set(dict1.items()).symmetric_difference(list(dict2.items()))
pygame.init()
os.dup2(si.fileno(), sys.stdin.fileno())
print((item, value))
tree = etree.parse(filename, parser)
datetime.now(timezone.utc).isoformat()
plt.show()
rdd.zipWithIndex().filter(lambda tup: tup[1] > 0).map(lambda tup: tup[0])
tuple(lines[0])
serializer.save()
map(lambda x: x.title(), s)
{{post.tags}}
time.sleep(5)
time.sleep(0.01)
df.drop(df[df.amount == 0].sample(frac=0.5).index)
print(l[x][y])
words = sorted(set(stream.read().split()))
YourModel.objects.filter(query)
arr[[1, 1]]
f.close()
etree.XMLParser(recover=True)
f(x=100)
insert_ids.append(cur.lastrowid)
result = np.concatenate((a, val))
datetime.datetime.strptime(dt, fmt)
myRoundedList.sum()
ax.add_patch(rectangle)
pygame.init()
tuple.__new__(*args, **kwargs)
A[A == pinf] = 0.0
print(calendar.monthrange(2012, 1)[1])
dict((k, D[k] - v) for v, k in enumerate(albums_today))
z = np.ones((5, 1, 1))
(b - b[0] == 0).all()
help(foo.__name__)
print([_ for _ in range(5)])
a[slice(1, 2)]
fig.canvas.draw()
plt.show()
print(sp.communicate()[0].split())
QtGui.QWidget.__init__(self)
driver = webdriver.Firefox(firefox_profile=firefoxProfile)
DataFrame(dict([(k, Series(v)) for k, v in d.items()]))
print(line)
plt.imshow(img, cmap=plt.cm.gray)
np.split(np.asarray(quaternion0), 4, -1)
os.remove(path)
con.commit()
json.loads(json.dumps(my_dict))
d[k].setdefault(kk, 0)
df = pd.concat(pool.map(process, links), ignore_index=True)
threading.Thread(target=post_request, args=(q,)).start()
ax2.xaxis.set_visible(False)
button.configure(bg=colour)
result = np.sum(product, axis=1)
a.extend(memoryview(b)[14:20])
plt.show()
a = a.ravel().view((np.str, a.itemsize * a.shape[1]))
np.hstack((x, np.prod(x, axis=1, keepdims=True)))
sum(dct.get(k, 0) for k in lst)
print(json.dumps(dict(r.headers)))
pd.DataFrame(data=[l])
app.run()
c = list(map(operator.or_, a, b))
B = np.random.rand(2, 4)
server.starttls()
tk.mainloop()
unittest.main()
results.sort(key=lambda x: x[0], reverse=True)
getattr(obj, name)
os.sysconf(2)
pygame.quit()
data = pd.DataFrame(list(data.items()))
self.progbar.pack()
self.Bind(wx.EVT_CLOSE, self._on_close)
self.Bind(wx.EVT_TEXT, self.OnFiltr, self.filtr)
pylab.show()
button.clicked.connect(myFunction)
user = models.ForeignKey(User, unique=True)
session.sendmail(sender, recipients, message)
{k: list(map(add_element, v)) for k, v in list(dicty.items())}
df = pd.DataFrame.from_dict(d)
cur.close()
signal.signal(signal.SIGINT, signal.SIG_DFL)
t.start()
print(type(Foo.__dict__))
__init__.py
plt.colorbar(im, cax=cax)
self.log = logging.getLogger(self.__class__.__name__)
browser = webdriver.Firefox()
canvas.pack()
output = process.stdout.read()
result = np.minimum(arr, 255)
x = x or y
plt.bar(idx, c[0], color=hexencode(c[1]), edgecolor=hexencode(c[1]))
f(a, b)
numpy.linalg.norm(a - b, ord=1)
plt.show
out = a[np.sort(sidx[np.searchsorted(a, b, sorter=sidx)])]
[1, 1, 0, 1]
file.write(html)
print(int(s))
df = df.append(data)
ax1.scatter(X, Y, Z)
p.start()
main()
os.kill(8861, 0)
list(zip(*itertools.zip_longest(*ll)))
curses.endwin()
list(set(a) & set(b))
s.diff().fillna(0)
[(row if all(row) else [0] * len(row)) for row in matrix]
widget.setWindowFlags(QtCore.Qt.Window)
update_list(l, [4, 5, 6])
traceback.print_stack()
args[0].__disown__()
not any(data)
match(a, b)
print(whisper())
plt.show()
time.sleep(120)
Response(serializer.data)
cnx.commit()
t + np.r_[t[1:], t[0]]
request.add_data(edata)
userProfile.save()
[a for a in alphastartgen(8)]
{i[0]: map(int, j) for i, j in p}
lines = f.readlines()
self.fig.canvas.draw()
cursor.fetchall()
dockerpty.PseudoTerminal(client, container).start()
canvas.grid()
pyflakes - -version
root.mainloop()
json.dumps(arrays)
plt.show()
fun()
plt.show()
datetime.datetime.strptime(date_string, format1).strftime(format2)
json.dumps(my_dict)
dict(zip(freq[1::2], freq[0::2]))
[(l[i], l[(i + 1) % n]) for i in range(n)]
plt.colorbar(sm)
self.autocomplete()
my_list
numbers[start:] + numbers[:start]
__init__.py
plt.show()
last_row.argsort()
C = 1 - np.prod(D, axis=1)
fp.close()
simplejson.dumps(d, ignore_nan=True)
app.MainLoop()
w.show()
o.write(line)
fox.quit()
plt.show()
A = coo_matrix((values, coords.T))
person.put()
Base.metadata.create_all()
module.main()
sys.stdin.readline()
name = db.StringProperty()
display(w)
sys.path.append(path)
sys.stdout.close()
foo.bar
view_func(request, *args, **kwargs)
plt.legend()
self._build_data()
parser.print_help()
from_file.readline()
HttpResponse(escape(repr(request)))
plt.show()
ax.get_yaxis().set_label_coords(-0.1, 0.5)
list(chain(*a))
print(cursor.lastrowid)
all(not X for X in dict.values())
transmission_array.extend([1] * 400 * slot_duration)
plt.setp(cg.ax_heatmap.yaxis.get_majorticklabels(), rotation=0)
result = bytes.fromhex(some_hex_string)
app.mainloop()
print(sorted(sub_strings, key=lambda x: levenshtein_distance(x, s))[0])
f.close()
input_file.close()
PLT.show()
self.sock.bind((self.host, self.port))
path = os.path.realpath(path)
deserialized_object.save()
app.logger.setLevel(logging.ERROR)
logger.setLevel(logging.DEBUG)
Counter(list(d.values()))
a[0] = 5
my_tuple = tuple(my_list)
[(v1 * list1[j]) for i, v1 in enumerate(list1) for j in range(i)]
random.randint(10 ** (x - 1), 10 ** x - 1)
writer.writerows(out_data)
client.connect()
plt.show()
df[df.a < df.a.quantile(0.95)]
list_of_lists
new_list = list(set([date for date in dates if dates.count(date) > 1]))
time.mktime(dt_obj.timetuple())
len(buf.read())
df[0:2]
df.mean()
func()
print((lambda x: chr(ord(x) + 1))(i))
tkinter.deletefilehandler(file)
time.sleep(random.randint(1, 4))
unittest.main()
client.load_system_host_keys()
app = QtGui.QApplication([])
(index for index, value in enumerate(obj))
vbox.setContentsMargins(0, 0, 0, 0)
df = np.dot(df, p_value)
pool.apply_async(test2, (t,), [dict(arg2=5)])
type(b)(a)
Session.objects.filter(pk__in=user_sessions)
object.save()
print(rawstr(test6))
[sum(g) for b, g in itertools.groupby(bits) if b]
sys.exit(app.exec_())
print(subg.edges())
[it for it in l for _ in range(2)]
a = df.iloc[:, 2:].values
pickle.dump(data1, output)
server.quit()
plt.show()
len(tested) == len(input)
pool = mp.Pool(processes=4)
plt.gcf().set_size_inches(10, 10)
pygame.draw.circle(surf1, (0, 0, 200, 100), (100, 100), 100)
print([b(5, 8) for b in bases])
cv.Remap(image, remapped, mapX, mapY, cv.CV_INTER_LINEAR)
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print(df.loc[mask])
im.show()
a[tuple(idx)] = 5
root.grid_columnconfigure(0, weight=1)
info = collection.find_one(obj_id)
a = np.array([[1, 1], [2, 2], [4, 4]])
plt.show()
logger.removeHandler(hdl)
euclid(nums[1], gcd(nums[:2]))
fig = plt.figure()
df[(df.foo == 222) | (df.bar == 444)]
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
plt.clabel(CS, inline=1, fontsize=10)
plt.ylim(plt.ylim()[0], 1.0)
plt.show()
br.submit()
plt.show()
sys.stdout.write(os.read(fd, 1024))
sys.exit(1)
df = pd.concat([df, market], axis=1)
func(*args, **kwargs)
all(v in value for v in input_list)
gc.garbage
numpy.kron(a, [[1, 1], [1, 1]])
print(d[k])
self.top.destroy()
plt.show()
plt.show()
print(list(range(len(words))))
cf.insert(uuid.uuid4(), [{k: str(v) for k, v in d.items()} for d in x])
np.isfinite(b)
json.dumps(object())
time.sleep(1)
pickle.dumps(defdict)
a[b[:, (0)], b[:, (1)]]
isinstance(v, type(LAMBDA)) and v.__name__ == LAMBDA.__name__
map(set, powerset(s))
layout.addWidget(self.browser)
ax.set_yticklabels([])
s.fill((255, 255, 255))
(dist ** 2).sum(axis=2) ** 0.5
l1.extend([7, 8, 9])
any(isinstance(e, list) for e in my_list)
solve(eqn, Rsense)
t.start()
a.execute(sql)
self.label.pack()
f.close()
any(thelist.count(x) > 1 for x in thelist)
help(list)
self.add_tag(tag)
listening_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
j2 = [x for x in j if x >= 5]
np.reshape(x, (-1, 1))
[i for i, letter in enumerate(s) if letter == ch]
self.worker.start()
df.stack()
sum(map(mul, a, b))
[datetime.datetime(2012, 1, 5, 0, 0)]
app = Flask(__name__)
fun(ctypes.c_void_p(indata.ctypes.data), ctypes.c_void_p(outdata.ctypes.data))
ent6.grid(row=1, column=1)
admin.site.register(Group, GroupAdmin)
self.send_response(200)
plt.show()
scipy.optimize
df.to_csv(f, header=False, index=False)
print(hex(-1 & 4294967295))
deletel[0]
win.show_all()
print((i, line))
this_array[indices[0]:indices[-1] + 1].fill(new_v)
plt.show()
dropped_copies = [(lambda i: (x[i] for x in copies[i]))(i) for i in range(2)]
df_subset.apply(lambda x: x.C * x.E, axis=1).sum()
os.kill(pid, 0)
pass
os.isatty(0)
print(re.findall(p, test_str))
res = cv2.bitwise_and(img, img, mask=mask)
result = p.communicate()[0]
cursor.fetchall()
serializer = CommentSerializer(comment, data=request.data, partial=True)
[entry for tag in tags for entry in entries if tag in entry]
shelf.close()
graph = facebook.GraphAPI(access_token)
self.ax.set_ylim(0, R + pR)
s.connect((HOST, PORT))
a[(0), :, :]
cdf1.update(cdf2, overwrite=False)
print(os.path.abspath(__file__))
sys.stdout.flush()
self.pack(fill=BOTH, expand=1, padx=5, pady=5)
print(br.response().read())
characters += sum(len(word) for word in wordslist)
print(df.loc[:, (~mask)])
datetime.now(timezone.utc).astimezone().isoformat()
any(np.allclose(row, x) for x in myarray)
f.seek(0)
Companies.objects.filter(q)
print(s.getvalue())
ind[np.where(np.diff(ind) == 0)]
server.sendmail(self.EMAIL_FROM, self.EMAIL_TO, msg.as_string())
p.stdout.close()
l.extend(map(int, r.findall(line)))
dict.__setitem__(self, keys[-1], value)
app.run(debug=True)
a[0]
sum([i for i in l1 if isinstance(i, numbers.Number)])
t.start()
{k: min(i for i in (h1.get(k), h2.get(k)) if i) for k in list(h1.keys()) | h2}
lst.sort(key=operater.itemgetter(2), reverse=True)
app = QtGui.QApplication([])
result = [sum(el) for el in itertools.zip_longest(fillvalue=0, *lists)]
unittest.main()
d = {r[0]: tuple(r[1:-1]) for r in reader}
self.instance.status
signal.signal(signal.SIGINT, signal_handler)
plt.show()
virtualenv - -help
f = lambda r: r * (sp.j0(r) + sp.jn(2, r))
pygame.display.init()
a = np.loadtxt(stdin, dtype=np.int)
random.shuffle(lis)
x[0] + x[-1]
a = k + a
sizer.Add(text, 0, wx.ALL, 5)
sys.exit(app.exec_())
people_list.append(person)
ax = fig.add_subplot(111)
plot(tmp.max(axis=0))
mat = sparse.coo_matrix(points, (I, J))
im.show()
admin.site.register(LocationCode, LocationAdmin)
config.write()
self.initUI()
siympify(y)
A[i, j] = C[j, B == i].sum()
ax.xaxis.set_major_locator(mdates.AutoDateLocator())
logging.Handler.__init__(self)
text.pack()
print(table.ascii_table(data, has_header=True))
jsonify(json_list=[i.serialize for i in qryresult.all()])
self.schedule.run()
plt.colorbar()
plt.draw()
max(0, min(a[1], b[1]) - max(a[0], b[0]))
json.dumps(o)
df.head()
{(x, x + 2) for x in r if x + 2 in r}
cherrypy.quickstart(HelloWorld())
calendar.timegm(dt.utctimetuple())
temp_list = (x * x for x in range(0, 10))
cv.WaitKey(0)
sc.addFile(some_path)
print(len(a) - a.index(min(a)) - 1)
PyMem_DEL(self)
sys.path.insert(0, lib_path)
tk.Label(frame, text=t).grid(row=row, column=1)
any(v > 0 for v in pairs.values())
help(pyudt)
self.pack()
data = pd.DataFrame(json.loads(line) for line in f)
print(line, file=file)
[1, 1, 1],
trainer.trainEpochs(1000)
g.filter(lambda x: len(x) >= 10)
self.grid_rowconfigure(0, weight=1)
list(range(len(sent)))
link.click()
print(v, type(v))
webbrowser.open(whatever)
[0, 0, 0, 1, 0, 1]
np.arange(x[0], x[0] + 60, 10)
np.allclose(a, b)
plt.ion()
ax.imshow(im)
model1.objects.all()
print(json.dumps(df.T.as_matrix().tolist(), indent=4))
getattr(module, name)
os.chdir(currdir)
self._autosave()
QAbstractTableModel.__init__(self, parent)
print(template.render())
plt.figure()
self.factories.append(factory)
mpl.pyplot.legend(**dict(list(defaults.items()) + list(kwargs.items())))
plt.savefig(file_path, dpi=80)
httpd.serve_forever()
(numpy.diff(numpy.sign(a)) != 0) * 1
thread.start()
max(knapsack(i - 1, W), values[i] + knapsack(i - 1, W - weights[i]))
timedelta(hours=6)
ax.set_ylim([-2, 2])
numpy.transpose(matrix7, axes=(1, 0, 2)).tolist()
plt.draw()
b = a[..., ::-1]
paramdata.columns
setattr(self, key, value)
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
sum(v[1][1] for v in itertools.chain(*[list(d.items()) for d in myList]))
browser.close()
f.close()
all([])
max(b, key=inverse)
setpath(d.setdefault(p[0], {}), p[1:], k)
df.groupby(date).mean()
val, _ = funky_func()
wrpcap(OUTFILE, paks)
ax1 = fig.add_subplot(2, 1, 1)
ax.yaxis.set_major_locator(mtick.LinearLocator(5))
f.write(bin_data)
set(tuple(sorted(elt)) for elt in example)
b = [dict(a)]
plt.plot(x, y)
fact = lambda x: 1 if x == 0 else x * fact(x - 1)
main()
conn.request()
cax.get_yaxis().set_visible(False)
a[:len(bbins)] += bbins
f()
Entry.objects.filter(created__range=(start_date, end_date))
y = x.astype(np.float)
np.hstack(x).shape
plt.show()
cursor.execute(sql, [id])
data = [(item + 256 if item < 0 else item) for item in data]
x[0] + x[-1]
MyDiccoSorted = sorted(list(MyDicco.items()), key=lambda s: s[1][2])
time.sleep(5)
self.label.setAlignment(QtCore.Qt.AlignCenter)
sorted(sentence, reverse=True)[0]
list(list(zip(r, p)) for r, p in zip(repeat(a), permutations(b)))
self.transport.write(line)
np.array_equal(np.asarray(foo_cv), foo_np_view)
self.timer.join()
plt.show()
sys.exit(0)
screen.blit(surf, (100, 100))
print(list(iter(root.children[1])))
np.hstack((vector1.reshape(-1, 1), matrix2))
out_file.write(line)
unittest.main()
root.mainloop()
self.post(*args, **kwargs)
ax2 = fig.add_subplot(2, 1, 2)
imshow(np.asarray(pil_im))
circle.grid(row=1, column=1)
df.apply(lambda x: x[np.where(x > 0)[0][0]], axis=1)
Fraction.from_float(0.25)
max(sum(1 for i in g) for k, g in groupby(L))
pyl.show()
self.stream.close()
array ^= numpy.random.rand(len(array)) < prob
plt.show()
shutil.copyfileobj(f_in, f_out)
f()
plt.show()
self.__dict__.update(state)
matplotlib.pyplot.show()
time.sleep(2)
df.groupby[di.month].Category.apply(pd.value_counts)
[next(gen) for _ in range(6)]
plt.show()
print(sorted(list(globalHotItems.items()), key=lambda x: x[1])[-4:])
abs(x=5)
plt.subplots_adjust(right=0.85)
float(s)
main()
list(IT.izip_longest(*readers))
self.foo()
dot(A, x)
webapp2.RequestHandler.dispatch(self)
s.listen(1)
a.max(axis=1)
seq[::2], seq[1::2]
sys.exit(app.exec_())
print([r.lower() for r in row])
df.apply(print_row, axis=1)
pyplot.show()
r = np.sqrt(x * x + y * y)
queryset = queryset.filter(full_name__icontains=string)
plt.subplots_adjust(top=0.9)
document.close()
plt.show()
element.clear()
server.serve_forever()
Thread.__init__(self)
ax.xaxis.set_major_locator(MultipleLocator(1.0))
s == s[::-1]
ax.plot_surface(x_surf, y_surf, z_surf, cmap=theCM)
reactor.run()
A = np.array(mean_data).mean(axis=0)
new_rows.append([str(elt).expandtabs() for elt in row])
s = requests.Session()
t.start()
Image.fromarray(imarray)
[(i, sum(j)) for i, j in list(d.items())]
sys.stdout.flush()
item = singlet_list[0] if len(singlet_list) == 1 else False
figure(figsize=(5, 10))
self.Bind(wx.EVT_PAINT, self.OnPaint)
cbgen(int(x), base, iexps), cbgen(x - int(x), base, fexps)
root.mainloop()
shutil.rmtree(temp_dir)
dataframe.iloc[:, ([0, 1, 4])]
curses.curs_set(0)
QtCore.QVariant()
b = a * (a > 0)
os.nice(1)
result.drop(0, axis=1, inplace=True)
sorted(dictionary, key=dictionary.get, reverse=True)[:10]
response = requests.get(url)
self.show_all()
[x.time for x in list_of_objects]
pd.MultiIndex.from_tuples(list(product(*categories)), names=names)
Acut[np.isnan(Acut)] = np.nanmean(Acut)
total += float(current_number)
s[~s.isnull()]
[0, 0, 0, 0]
changes.setdefault(k, []).append(v)
pd.read_excel(filename)
[0] * (len(a) - len(c)) + c
logger.addHandler(handler)
plt.figure(1, figsize=(size_x, size_y), dpi=98)
aobj.__class__
django.contrib.auth.middleware.AuthenticationMiddleware
b.swapaxes(0, 1)
serializer.save()
themod.__dict__.update(thedict)
logger.setLevel(logging.DEBUG)
np.searchsorted(np.sort(x), x)
plt.axvline(x_position)
mylist.insert(0, mylist.pop(mylist.index(targetvalue)))
ax.plot_surface(X, Y, F)
Done
min(map(lambda x: string.index(x) if x in string else len(string), specials))
random.shuffle(all)
now = datetime.datetime.utcnow().replace(tzinfo=utc)
subprocess.Popen(cmd).wait()
threading.Thread.__init__(self)
plt.scatter(x, y, c=t, cmap=cm.cmap_name)
driver = webdriver.PhantomJS()
filter_func(parent_dict, lambda x: 2 < x < 4)
response
[1][0][2]
sorted(A, key=lambda e: e not in B)
sys.path.append(os.path.abspath(scriptpath))
tuple(numpy.subtract((10, 10), (4, 4)))
image.image.save(file_name, files.File(lf))
seq2str(img.getdata())
b.sort()
threading.Thread.__init__(self)
list(compress(list_a, fil))
moduleA.py
moduleB.py
ar = [[str(item) for item in results] for results in cur.fetchall()]
plt.show()
x = EqM_list(someiter)
data = [x for x in data if type(x) == float]
sorted(set(a_list))
service.files().delete(fileId=dir_id).execute()
gtk.main()
f.close()
plt.show()
f.close()
str1.split()
ax.set_xlim(-0.5, 1.5)
print(mystring[2:4])
[i for i in l for r in range(2)]
x = f.readlines()
tree = etree.parse(StringIO(your_xml_string), magical_parser)
map(f, tuple_list)
[(x - y) for x, y in it.izip(a[1:], a)]
b = word in (w for i, w in enumerate(wordList) if i != 1)
self.assertEqual(actual, expected)
ax2.set_ylim(0, 1.2)
print(map(itemgetter(0), next(bykey)[1]))
subA.tick_params(labelsize=6)
queryset = User.objects.all()
fun(**{b.decode(): v for b, v in list(dic.items())})
x = EqM_list(iter(d.keys()))
app.run()
sympy.solve([sympy.Eq(b - a ** 2.552 - c), sympy.Eq(b, 2)], rational=False)
globals().update({name: module_dict[name] for name in to_import})
np.random.seed(seed=0)
zip(*(s[i:] for i in range(n)))
print(r.status_code)
new_list.append(temp_list)
object.__new__(cls, *args, **kwargs)
list(itertools.product(a, b))
[0.00148820116, 0.000295700572, 0.00441516179],
df.iloc[:, (0)]
getattr(self, name)
ax1 = fig.add_subplot(1, 2, 1)
print(ruamel.yaml.dump(d, Dumper=ruamel.yaml.RoundTripDumper))
np.sum(x, axis=-1)[:, (np.newaxis)] - np.cumsum(x, axis=-1)
ax.yaxis.set_major_locator(MultipleLocator(1.0))
b, g, r = img[:, :, (0)].copy(), img[:, :, (1)].copy(), img[:, :, (2)].copy()
smtp.sendmail(from_addr, to_addr, message.as_string())
lst.sort(key=lambda x: x[2], reversed=True)
process.kill()
views.py
conn.send(data)
session.add(p)
c.append(quad(f, -1, 1, args=list(range(1, n + 1)))[0])
content = some_file.read()
print([result.get(timeout=10) for result in results])
print(lxml.html.tostring(doc))
df = df.append(df)
[11, 11, 11, 1, 18, 14, 14, 9, 9]
logging.getLogger().addHandler(setupcon.ColoredHandler())
arr[indices[:, (0)], indices[:, (1)]]
users.create()
getpass.getuser()
parrot(**d)
ax = fig1.gca()
app.mainloop()
self.pack()
itertools.count(1000000000000)
sum(a)
time.sleep(2)
os._exit(0)
print(sess.run([x, y]))
self.queries.append(a[1])
json.dumps([str(nparray.dtype), base64.b64encode(nparray), nparray.shape])
ax.set_zticks(np.arange(0, 9, 0.5))
print(list(itertools.chain(*kana)))
sys.stdout.flush()
img = np.empty((100, 100, 1), dtype=np.uint16)
k.append(j)
client.send(message)
newobjs._register(obj)
p.kill()
math.exp(-np.logaddexp(0, -x))
ax.boxplot(data)
win.show_all()
args = parser.parse_args(get_xyz_cmd_line(sys.argv[1:]))
reactor.run()
json.dumps()
master.mainloop()
pandas.merge(df.stack(0).reset_index(1), id, left_index=True, right_index=True)
time.sleep(1)
plt.gcf().show()
os.symlink(linkto, dst)
print(yaml.dump(data, Dumper=yaml.RoundTripDumper, indent=4))
mainloop()
numpy.array([network.activate(x) for x, _ in train])
print(os.path.join(path, file))
Thread.__init__(self)
np.dstack(np.nonzero(df.values))[0]
hash(str(d))
print(response.read())
QtGui.QTabWidget.addTab(self, widget, title)
result_list = list(result.values())
print(cls.__name__)
X, Y = np.meshgrid(XB, YB)
print(icon_info.get_filename())
pylab.draw()
print(celery.AsyncResult.task_id)
a.argsort()[-10:]
window.activateWindow()
print(f.read())
deleteL[::2]
arr[1, -1]
print(sum(a))
np.argsort(b)[c]
time.sleep(0.5)
[(x * 2) for x in [2, 2]]
console.setFormatter(color_formatter)
ax = fig.add_subplot(111)
signal.signal(signal.SIGINT, old_action)
silhouette_score(iris.data, iris.target, sample_size=50)
print(fout.read())
plt.ylim([0, 1])
sys.exit()
map(lambda x: group(x, a), sum_vals)
reactor.run()
root.mainloop()
view.configure_traits()
M.reshape(-1, 2, 2).sum(axis=0)
a = np.random.randint(0, 9, 10)
tuple(l)
admin.site.register(Session, SessionAdmin)
row[0, col.argsort()]
ax.add_artist(circle)
wb.Close()
np.where(np.diff(x) > 0.5)[0]
self.text_ent.grid(row=1, column=0)
5 + np.random.sample(10) * 5
ax.xaxis.set_major_formatter(formatter)
math.radians(45.0)
max(depth(self.left), depth(self.right)) + 1
flask.request.user_agent.string
print(list(reader))
next(iter(list(c.items())))
sorted(2 * list(range(5)))
session.query(Action).filter_by(name=name).one()
ShowAppsView.as_view()(self.request)
df.to_excel(writer)
name = models.CharField(max_length=64)
df.loc[cond1 | cond2]
ax.legend(loc=0)
print(list_end_counter([1, 1, 2, 2, 2, 2]))
os.chown(path, uid, gid)
app.exec_()
[(int(lst[x]) if x in indices else lst[x]) for x in range(len(lst))]
my_dictionary_list
x.__enter__()
a % b
i = [int(x) for x in s.split()]
dict(zip(x, y))
webbrowser.open(url, new=0, autoraise=True)
ax.set_xlim(-10, 10)
show()
df.apply(fillnull)
[k for k in list(mydict.keys()) if k >= 6]
show(p)
rows = [[field[k][i] for k in list(field.keys())] for i in range(2)]
window.show()
clientsocket.send(p)
process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
a + b
print(os.path.join(dir, file))
datetime.datetime.utcfromtimestamp(seconds)
self.y = 0
e.toxml()
[ast.literal_eval(el) for el in lst]
next(y)
Thread.__init__(self)
plt.draw()
print(np.partition(x, -10)[-10:])
plt.plot(x)
req.get_method()
t.start()
time.sleep(1)
print([abs(v - l[(i + 1) % len(l)]) for i, v in enumerate(l)])
print(df)
[(k, adict[k]) for k in sorted(adict, key=adict.get, reverse=True)]
s.replace(0, np.nan).dropna().astype(s.dtype)
sp.wait()
test.ix[i::4]
sock.settimeout(5)
pd.DataFrame(data, df.index, u)
file.seek(0, os.SEEK_END)
parser.parse(open(filename))
a[0][0]
str(f)
sizer.Add(input, 1, wx.EXPAND | wx.ALL, 5)
ax.plot_surface(Rnew * np.cos(Tnew), Rnew * np.sin(Tnew), Znew)
result = np.average(_array[::][1:], axis=1)
imgc = cv2.imread(file)
plt.legend()
any(map(my_dict.__contains__, my_list))
mpl.rcParams.update(manager._rcparams)
list(_)
np.dot(W, B)
[[z[i] for z in foo] for i in (0, 1)]
ax.plot(list(range(10)))
plt.show()
B = A[::2, :, 1:2]
os.chdir(path)
ab[x].sort()
arr[20:] = [0] * (len(arr) - 20)
S2.startswith(S1)
self.initialized = True
np.clip(arr, 0, 255, arr)
{{forloop.counter0}}, {{j}}
new_column.index
{t: [next(it) for _ in range(next(it))] for t in it}
app.mainloop()
br.set_handle_gzip(True)
plt.show()
df.apply(lambda x: x.between(2, 10, inclusive=False))
s.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)
plt.subplot(111)
time.sleep(2)
all(item[2] == 0 for item in items)
self._background_task()
ax.set_xticks(numpy.arange(0, 1, 0.1))
c.showPage()
theproc.communicate()
plt.subplots_adjust(left=0.25, bottom=0.25)
myApp.setWindowFlags(QtCore.Qt.Tool)
driver = webdriver.Firefox(firefox_profile=profile)
s.bind((HOST, PORT))
main()
df.rename(columns=lambda x: x[1:], inplace=True)
print(html.tostring(table, pretty_print=True))
sys.excepthook = info
results = [t.age for t in mylist if t.person_id == 10]
mat.data -= numpy.repeat(vec.toarray()[0], numpy.diff(mat.indptr))
i = int(round(float(s)))
subprocess.Popen.communicate()
sys.modules.pop(module_name)
[x for i, x in enumerate(y) if i != 0 and x != 6]
d.execute()
print(todayDate.replace(day=1))
f.close()
socket.setdefaulttimeout(60)
[t for t in my_set if my_list.count(t) > 1]
bar()
A = numpy.array([[2, -1, 0], [-1, 2, -1], [0, -1, 2]], numpy.float)
{{value.name}}
child_process.kill()
L1.sort(key=lambda x: L.index(x))
func(*args, **kwargs)
list(filter(f, list(range(2, 25))))
map(operator.add, a, b)
self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
main()
layout.addWidget(self.de)
print(r.content)
[(seen.add(obj.id) or obj) for obj in mylist if obj.id not in seen]
multiprocessing.cpu_count()
plt.boxplot(boxes, vert=0)
self.setGridIntersection(self.pos())
self.layout.addWidget(self.view)
Entry.objects.bulk_create(aList)
[a.join(b) for a, b in zip(df.a, df.b)]
show()
s.close()
C = map(sub, A, B)
func()
sys.stdout.flush()
np.maximum.reduceat(v, idx)
window.show()
my_list = [dict(out[v]) for v in sorted(out)]
[k for k, g in groupby(a) if len(list(g)) >= 2]
output.close()
print(cur.fetchall()[0])
tree = ET.ElementTree(ET.fromstring(xmlstring))
type.__new__(cls, name, bases, dct)
time.sleep(0.11)
sorted(list(x.items()), key=lambda kv: kv[1])
ctypes.c_ulong(-1)
result = [line.upper() for line in lines]
f.axes[0].set_position([0.05, 0.05, 0.4, 0.4])
t = [x for x in q if x in w]
print(match.group(1))
self.set.remove(d)
the_list.sort()
names = [row[0] for row in curs.fetchall()]
time.sleep(1)
python - -version
Py_Finalize()
1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0
w.writerow(row)
rfecv.fit(X_train, y_train)
df[~((df.A == 0) & (df.B == 2) & (df.C == 6) & (df.D == 0))]
[df.loc[list(p)] for p in permutations(age.get_group(21).index)]
print(sess.run(Z))
label.pack()
self.__dict__.update(kwargs)
db.close()
ssh.close()
fatal.setLevel(logging.FATAL)
process.stdin.write(data)
gtk.main_iteration(block=False)
solve(do_something(something))
clf = pickle.load(f)
a = MyClass()
reactor.run()
df[sheet] = pd.read_csv(csv)
df[df.duplicated(keep=False)]
pyplot.show()
data = json.loads(elevations)
deletelist1[:]
data.sort(key=keyfunc)
array([[1, 0], [1, 2]])
x.shape
s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_IP)
print(im.format, im.size, im.mode)
br.set_handle_robots(False)
wx.Panel.__init__(self, parent)
sys.exit(app.exec_())
root.mainloop()
model = get_object_or_404(Customer, id=id, user=1)
Py_Initialize()
ax.xaxis_date()
print(f(a))
A = np.zeros((6, 6))
s.logout()
set(range(1, 101)) - s
list_one.append(list_two)
classroom.py
(l[i:i + n] for i in range(0, len(l), n))
o = [(l[i], l[i + 1]) for i in range(0, len(l), 2)]
rreverse(s[1:]) + s[0]
os.waitpid(p.pid, 0)
FI.close()
session.commit()
frame.groupby([pd.DatetimeIndex([x.date() for x in frame.index])]).sum()
q.filter(or_(*conditions))
query = Session.query(Table).filter(clauses)
zip(range(1, 7, 2), range(2, 8, 2))
response = urllib.request.urlopen(req)
any(np.array_equal(np.array([a, a]), x) for x in my_list)
uuid.UUID(value)
[1, 2, 2]
f = Foo()
res.append(lst[i])
json.dumps(self.json)
time.sleep(0.5)
any(len(set(x)) == 1 for x in zip(*arr))
struct.pack(new_format, *args)
server.set_debuglevel(1)
plt.show()
[[0], [1], [2], [42], [4]]
(u + x) * (a + d + g) + (v + y) * (b + e + h) + (w + z) * (c + f + i)
print(cur.fetchall())
np.vstack(j).T
zcat.wait()
time.sleep(0.25)
df[df.Phrase.str.len() != 0]
f.close()
sys.exit(app.exec_())
print(my_list)
sys.getsizeof(a)
f2.close()
plt.draw()
self.canvas.pack()
signal.signal(signal.SIGINT, signal.SIG_IGN)
sys.getsizeof(n.__dict__)
out.extend(map(str, list(range(r[0], r[-1] + 1))))
QtCore.QAbstractItemModel.__init__(self)
gtk.main_quit()
numpy.atleast_2d(x[x[:, (2)] == 1])
sum(int(x) for x in s if x.isdecimal())
__init__.py
plt.xticks(rotation=70)
cur.connection.close()
test.myfun(test.f)
self.assertEqual(r, a)
cur.execute(sql, list(values.values()))
pygame.display.flip()
[prod(x) for i in range(2, len(lst) + 1) for x in combinations(lst, i)]
instance.save()
rdd.mapPartitions(f).collect()
q = Queue.Queue()
{b.pop(0): {b.pop(0) for _ in range(1)} for _ in range(1)}
a[::-2]
test_handler()
print(in_nested_list(x, [1, 2]))
id = Column(Integer, primary_key=True)
root.quit()
data[abs(data - np.mean(data)) < m * np.std(data)]
pip2 - -version
print(A[idx])
zip(a, b, c)
result.append([list[index][0], list[index + 1][1]])
plt.scatter(x, y, c=t)
list(Counter(words).values())
ax.set_axis_off()
xDate = sys.argv[1]
caketaste()
timedelta(seconds=_diff.total_seconds())
ctx.set_font_size(font_size)
admin.site.unregister(User)
Foo.allocate_ids(max=26740080011040)
fig.canvas.draw()
max((len(v), k) for k, v in flows.items())
set(a).intersection(b)
ax.spines[direction].set_visible(True)
sys.exit(exit_code)
len(self.children) == 0
sorted(_, key=lambda x: sum(x))
[([x] * i) for i, x in zip(A, B)]
plt.figure()
sys.path
plt.imshow(Z)
sys.exit(0)
PyInit_gstreamer()
[bar() for i in range(10)]
foo(1, 2)
app.run(extra_files=extra_files)
sys.stdout.flush()
t, z, y, x = np.indices(temp.shape)
file(filename).read()
np.where((abcd <= data2a) & (abcd >= data2b), 1, 0).sum()
print(len(letters) > len(no_rep))
print([[x for x in a if len(x) == i + 1] for i in range(m)])
ax.set_aspect(1)
i += 1
ax.set_xlim(0, 10)
print([A[p][i] for i, p in enumerate(P)])
filtered_list = list(filter_list(full_list, excludes))
json.JSONEncoder.__init__(self, *args, **kwargs)
sys.exit(app.exec_())
list_of_lists = [list(elem) for elem in list_of_tuples]
s = random.randint(0, 2 ** 10000 - 1)
pd.concat(pd.read_html(url), ignore_index=False)
urllib.parse.urlencode(a)
np.array(__, dtype=float)
curses.echo()
urllib.parse.urlencode(url_dict, True)
conn.close()
s1.reset_index(drop=True)
f.close()
time.sleep(1)
loop.close()
np.where(a[:, (1)] == 2)
tokenize.sent_tokenize(p)
print(f(1))
login()
keys = set(chain.from_iterable(dicts))
plt.show()
min(iList, key=lambda i: i.number)
tk.Label(self.frame, text=t).grid(row=row, column=1)
QtWidgets.QGraphicsScene.mouseMoveEvent(self, event)
zip((x.count(item) for item in set(x)), set(x))
print(f.read())
start_date + relativedelta(months=2)
pygame.quit()
response.close()
first, rest = seq[0], seq[1:]
root.mainloop()
print(repr(f.readline()[:1]))
QtCore.QVariant()
msg = msg.rstrip()
list(map(itemgetter(0), G))
results = sorted(list(results_dict.items()), key=lambda x: abs(x[0]))
logger.setLevel(logging.DEBUG)
[list(islice(b, x)) for x in l]
pprint.pprint(row)
connect.commit()
self.Bind(wx.EVT_KEY_DOWN, self.OnKey)
pickle.dump(a, f)
items = [[1, 2, 0], [1, 2, 1], [1, 2, 0]]
time.sleep(2)
pprint(sys.path)
list(itertools.dropwhile(math.isnan, reversed(r)))[::-1]
isinstance(obj, int)
print(select([func.count()]).select_from(table))
time.sleep(1)
a + b
ax.set_xlim(0, 25)
plt.show()
deletex[2]
fig = plt.figure()
a = b
result.setdefault(column, []).append(value)
next(x for x in range(10) if x == 7)
str(tdo)
bisect.bisect_left(l, 4)
list(df.T.to_dict().values())
signal.signal(signal.SIGTERM, signal_handler)
o5.method()
self.crawler.start()
[np.insert(j, 0, i) for i, j in product(a, np.array((b, c)).T)]
df.groupby(df.index)
date -= timedelta(days=5)
result = [el.text_content() for el in result]
selfref_list.append(selfref_list)
plt.figure(figsize=(7.15, 5.15))
os.path.split(fullpath)
celery.control.revoke(uuid, terminate=True)
{{42.55 | round}}
print(user.username, user.get_full_name(), user.email)
cls(*args, **kwargs)
[(x ** 2) for x in range(5)]
yourThread.daemon = True
print(pattern.search(text).group(1))
label.pack()
plot.show()
sys.stdout = sys.__stdout__
df.ix[row.name]
numpy.array(strings, dtype=float)
my_dict[key] += 1
writer.writerow(keys)
deleteall[max(current - 2, 0):current]
value = int(value)
print(num)
f.read()
wb = load_workbook(filename=BytesIO(input_excel.read()))
sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))
a[[ind]]
list(enumerate(reversed(test)))
pdb.set_trace()
any(c.isalpha() for c in string_1)
neurons.append(neuron)
f.close()
print([tuple((a, b + 1) for a, b in group) for group in t])
print(numpy.argmax(a_by_a, axis=1))
do_something(my_object)
controller1.py
np.dot(a, weights)
tar.close()
deletea[k]
plt.show()
print(np.where(mask)[0])
d2 = copy.deepcopy(d)
deletesys.argv[1]
len([x for x in str_.split() if x in list(dict_1.values())])
cur.close()
r = urllib.request.urlopen(req)
logging.getLogger()
media_frame.stack().map(m).unstack()
DataFrame.mode()[0]
d = dict(l)
app.test_request_context().push()
np.split(index[sort_idx], np.cumsum(cnt[:-1]))
df
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
mylist.pop()
return_equal(a, b, c)
c = b[index]
pass
[do_stuff(a, b) for a, b in itertools.permutations(A, 2)]
sys.exit(app.exec_())
a = numpy.arange(25).reshape(5, 5)
self.figurecanvas.draw()
df = pd.read_csv(StringIO(text), parse_dates=[0])
followers_df.reset_index()
print(sys.version)
set(yourString) & set(badChars)
np.arange(10)[::-1]
plt.yticks(np.arange(y.min(), y.max(), 0.005))
arr = np.empty(dims, dtype=kerneldt)
[e for e, g in groupby(sorted(my_list))]
heapq.heappush(heap, (-prod, n, n))
unittest.main()
foo(*values)
self.__dict__.update(cls.__dict__)
matched[1] += 1
bucket.delete()
sys.stderr.write(str(prompt))
plt.subplots_adjust(bottom=0.2)
writer.writerow(item)
pdb.Pdb.__init__(self)
df.CITY
self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
foo()
print(json.dumps(OrderedDict(table_data)))
plt.show()
d = {key: value for key, value in zip(keys, values)}
fig.clf()
id = Column(Integer, primary_key=True)
root = tk.Tk()
result = op_func(a, b)
sns.kdeplot(np.array(data), bw=0.5)
deletedictionary[old_key]
plt.show()
parser.parse_args(f.read().split(), namespace)
Thread(target=run, args=(args.arg1, args.arg2))
newList
pkt[TCP].payload = send_hdr
termios.tcsetattr(fd, termios.TCSAFLUSH, new_settings)
threading.Thread.__init__(self)
socket.connect((HOST, PORT))
myList.index([x for x in myList if x != 0][0])
loop.run_forever()
print(msg.as_string())
lambda partition: target == sum(map(int, partition))
classifier.classify(featurized_test_sentence)
setattr(self, Properties_Pointers[i], group)
sorted(lst, key=lambda x: -x[1])
plt.scatter(list(range(len(y))), y, s=60, c=z, cmap=cm.hot)
plt.gca().add_artist(circle)
help(uuid.UUID.__init__)
fly.set_data([fdata[0][0], fdata[0][-1]], [fdata[1][0], fdata[1][-1]])
fig.show()
pandas.DataFrame(data).groupby(0).mean()
self.id = self.get_next_id()
_to.update(_from)
print(difflib.get_close_matches(target_word, list_of_possibles))
[(x + y) for x, y in zip(*([iter(q)] * 2))]
do_something()
s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
custom_API()
np.delete(x, indx)
QtWidgets.QListView.__init__(self, parent)
[(1 if p < 0.5 else 2) for p in classifications]
result = map(lambda x: x * P, S)
a = a[:]
print(os.read(f.fileno(), 50))
len(mylist)
p.terminate()
f.close()
abs((10 ** 0.5) ** 2 - 10) < 1e-10
vals[idx].tolist()
[np.argmin(a) for a in A1]
logger.setLevel(logging.WARNING)
oname.text
signal.signal(signal.SIGUSR1, handler)
np.sum(np.dot(xdiff, L_inv.T) ** 2, axis=1)
plt.subplot(212)
my_string.split()[:5]
ax.xaxis_date()
time.sleep(0.5)
fig.autofmt_xdate()
MyClass.__init__(a)
cursor.execute(sql, data)
threading.Thread.__init__(self)
thread.start()
main()
geoms.append(p)
np.argsort(x, axis=1)[:, 0:k]
threads.setdefault(row[2], []).append(row)
array([[11], [12]])
plt.pause(1)
pd.rolling_mean(data, window=5, center=True)
main()
[x for x in tokenize(txt)]
print(d[key])
soup.prettify()
df.drop(idx)
termios.tcsetattr(fd, termios.TCSADRAIN, new)
b = (x ** 2 for x in a)
x = x[:50]
lst.sort(key=itemgetter(1))
results[i].append(benchmark(i))
f.close()
yourlist.append(yourdict.copy())
self.socket.connect((server_ip, server_port))
threading.Thread(target=listen_to_audio).start()
merge(DataFrame(tmp, index=[0]), data)
zip(*lst)[0]
tick_params(labeltop=True, labelright=True)
parser = argparse.ArgumentParser()
client.load_system_host_keys()
np.vstack([get_col(col) for col in cols]).T
time.sleep(0.5)
a = np.array([0, 0, 0, 0, 0, 0])
sorted(set(val for row in content.values() for val in row))
msg.attach(part)
r = redis.Redis(connection_pool=pool)
pl.xlim(0, df2.shape[1])
QWidget.__init__(self)
plt.show()
data = list(datareader)
form = UserForm(request.POST, user=request.user)
sum(dict(structure).values())
driver.set_window_position(0, 0)
np.unpackbits(b)[:n].reshape(shape).view(np.bool)
copy.deepcopy()
l.sort(key=itemgetter(0))
id = Column(Integer, primary_key=True)
os.startfile(d)
pg.QtGui.QApplication.exec_()
f.write(doc.toxml())
ax1.yaxis.set_major_locator(matplotlib.ticker.LinearLocator(nticks))
plt.show()
python - config - -cflags
python - config - -ldflags
main()
br.select_form(nr=0)
min_keys = [k for k in d if all(d[m] >= d[k] for m in d)]
print(zip(*p))
itertools.product(universe, repeat=2)
ax = fig.add_subplot(1, 1, 1)
sys.path.append(os.path.basename(os.path.dirname(__file__)))
list(zip_longest(*([iter(chain([0], *liPos))] * 2)))
plt.figure(1)
f.seek(0)
df = pd.read_csv(yourdata, dtype=dtype_dic)
plt.show()
ax = fig.add_subplot(1, 1, 1)
gen.__code__.co_name
df.columns = df.iloc[1]
sys.stdout.flush()
session.add_all([a, b])
Foo.__str__ is not object.__str__
QtGui.QWidget.__init__(self)
app.logger.setLevel(logging.INFO)
signal.signal(signal.SIGUSR1, debug)
HttpResponseRedirect(url)
fig = plt.figure()
l = [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1]
list(product(*iterables))
parser.parse(some_file)
print(max(path.nodes, key=lambda item: item.y))
requests.get(url, cookies=load_cookies_from_lwp(filename))
time.sleep(60)
tf.matmul(x, tf.transpose(y))
self.someSignal.connect(self.someSlot)
a2.ravel()[:] = m.reshape(2, -1).T.tolist()
np.where(binplace == 1)
pprint.pprint(value)
print([list(g[1]) for g in groupby(sorted(l, key=len), len)])
instance = form.save(commit=False)
fig, ax = plt.subplots()
fig, ax = plt.subplots()
Books.objects.filter(q)
datetime.time(0, 0, 0)
sys.path.append(lib_path)
print(my_list)
ax.set_aspect(1)
input.close()
p.terminate()
print(numpy.linalg.norm(x))
plt.close()
myfunc(*mylist)
fig.show()
fig.autofmt_xdate()
f = sys.stdin
input()
dis.dis(lambda : i)
root.mainloop()
blobs = BlobInfo.all().fetch(500)
first_elements, second_elements = zip(*data)
sorted([i for i in lst if i > 0]) + sorted([i for i in lst if i < 0])
s = math.sqrt(max(radius * radius - i * i, 0.0))
print(urllib.request.urlopen(ipcheck_url).read())
c.execute(query)
cs.send(c + 1)
timestamp.sort(reverse=True)
fig = plt.figure()
base64.b64encode(stream.getvalue()).decode()
out_file.write(indata)
print([num for num in a if counts[num] > 1])
QtGui.QWidget.__init__(self, parent)
[np.where((B == x).sum(axis=1))[0] for x in A]
file.write(line)
d.update([a, b, c])
results = Orchard.objects.filter(**options)
plt.show()
(v1 == v2).all()
self.timer.start(10)
reactor.run()
[c for c in col_names if all([(f not in c) for f in filter_array])]
f.axes[5].set_position([0.95, 0.05, 0.05, 0.4])
df2 = df[df.Group.isin(groups)]
out.shape
clp.CloseClipboard()
self.crawler.install()
np.count_nonzero(A == B)
pipe.communicate()
plt.imshow(data.T)
ax.plot_wireframe(X, -Y, Z, rstride=1, cstride=1)
df.shape[0] - df.dropna().shape[0]
str(self.person)
fstools.py
args = parser.parse_args()
f(*args, **kwargs)
ax.set_ylim(bot, top)
f = lambda x: 2 * x
os.waitpid(cpid)
SumLine.extend(ast.literal_eval(x))
print(list(Counter(L).items()))
x[np.lexsort((x[:, (0)], x[:, (1)]))]
ax.set_xlim(x_min, x_max)
print(cert.get_issuer().as_text())
p.terminate()
plt.show()
Base.metadata.create_all(engine)
root.destroy()
self.f(*args, **kwargs)
infile.close()
self.graph, = self.ax.hexbin(self.xData, self.yData)
i += 1
array([[0, 0, 1, 1], [0, 1, 1, 0]])
result.append(myDict)
plt.draw()
time.sleep(0.01)
sys.stdout.write(out)
zip(a[0], a[1])
globals().update(test.__dict__)
log.start()
foo()
np.ma.median(y, axis=0).filled(0)
[0, 1, 0, 2, 1, 1, 1, 0],
object.__new__(cls, x)
sandboxed()
inspect.getargspec(func)
np.where(np.in1d(a, b))[0]
max(depth(d[k], level + 1) for k in d)
result = [_f for _f in map(expensive, mylist) if _f]
sys.stdout.flush()
results = cursor.fetchall()
print(r.cookies)
x.append(y)
list(itertools.chain(*a))
socket.close()
time.sleep(5)
f.close()
print([(dotted[n][:-1] + (i,)) for s in signs for n, i in enumerate(s)])
n, bins, patches = plt.hist(x, histedges_equalN(x, 10), normed=True)
signal.signal(signal.SIGINT, signal.SIG_DFL)
next(g)
repr(self.contained)
web.show()
hasattr(obj, name) and type(getattr(obj, name)) == types.MethodType
time.sleep(1)
pool.terminate()
time.sleep(self.interval)
ftp.close()
fig = plt.figure()
plt.tight_layout(rect=[0.05, 0.15, 0.95, 0.95])
hex(x)[2:]
matplotlib.get_backend()
plt.draw()
unittest.TextTestRunner().run(suite)
p = Pool(5)
layout.addWidget(self.button)
pygame.mixer.init()
bytearray(os.urandom(1000000))
chain.from_iterable(combinations(s, r) for r in range(1, len(s) + 1))
wrapper_object.blink()
self.progress.pack()
self.output.append(data)
lst[0].append(1)
print([(k, len(d[k])) for k in sorted(d.keys())])
print(x.apply(lambda y: list(filter(np.isfinite, y))))
sorted(list(dct.items()), key=lambda p: p[1], reverse=True)
os.dup2(cat.stdin.fileno(), sys.stderr.fileno())
plt.colorbar()
min(data, key=lambda t: t[1])
print(tuple([k] + [v for d in L for v in list(d.values())]))
f.write(bytes(int(x, 0) for x in L))
my_tuple[isinstance(x, str)].append(x)
ax = fig.add_subplot(1, 1, 1)
self.window.set_default_size(self.width, self.height)
a[len(a)]
df[~df.isnull().all(axis=1)]
event_box.set_events(gtk.gdk.BUTTON_PRESS_MASK)
list2 = [dict2[k] for k in commons]
smtpObj.sendmail(sender, receivers, message)
f.read()
top.mainloop()
browser = webdriver.Firefox()
main()
img = Image.open(BytesIO(response.content))
[int(elem) for elem in testList]
[functools.reduce(dict.__getitem__, keys, d[i]) for i in d]
plt.show()
datetime.time
diags.sum(axis=1)
MySQLdb.connect(server, username, password, database, local_infile=1)
m.groups()[0].strip()
input_file.close()
plt.show()
[myFunc(p, additionalArgument) for p in pages]
inspect.ismethod(d.__setitem__)
plt.show()
a = np.arange(100).reshape(2, 50)
d = json.loads(s)
sys.exit(1)
a, b = divmod(a, 1)
p.terminate()
doctest.testmod()
lists[1].append(url)
np.random.shuffle(a)
pdb.set_trace()
Job.fetch(job_id, connection=conn)
HttpResponse(status=500)
print(s, len(s))
self.SetClientSize((self.bmp.GetWidth(), self.bmp.GetHeight()))
foo.wait()
plt.show()
id = models.CharField(max_length=255, default=create_id)
x = np.linspace(0, 1, 20)
main()
QtGui.QMainWindow.__init__(self)
array_proxy()
os.kill(int(pid), signal.SIGTERM)
print(ET.tostring(dom))
main()
signal.signal(signal.SIGUSR2, lambda sig, frame: code.interact())
f(*args, **kwargs)
ax.scatter(X[:, (0)], X[:, (1)], s=s)
plt.show()
self.a = a
[np.bincount(xs, minlength=10) for xs in itertools.combinations(list(range(10)), 2)]
numpy.linalg.norm(A - B)
plt.subplots_adjust(0, 0, 1, 1, 0, 0)
self.driver.close()
max(lengths(l))
x = {i: set() for i in range(10)}
print(line)
args[-1] + mySum(*args[:-1])
myDict[name]
len(s)
arr = numpy.array([(base + datetime.timedelta(hours=i)) for i in range(24)])
fig = plt.figure(1)
df.replace(to_remove, np.nan, inplace=True)
data.sort()
255, 255, 255
ax2.set_xlim(ax1.get_xlim())
self.calendar.pack()
some_list[:target_len] + [0] * (target_len - len(some_list))
ax2.plot(x2, x2, alpha=0)
a = str(datetime.now())
time.sleep(1)
object.__repr__(self)
max(len(str1), len(str2))
t.start()
print(func_name)
plt.contour(xi, yi, zi, con_levels, linewidths=1)
cv2.circle(cimg, (i[0], i[1]), i[2], (0, 255, 0), 2)
df.sort_index(inplace=True)
result = map(f, [x, y, z])
utc_dt = local_dt.astimezone(pytz.utc)
df = pd.concat([df1, df2], ignore_index=True)
axcut.set_visible(True)
np.random.seed(0)
file_out.write(line)
json.loads(page_detail_string)
sys.__stdin__ = dummyStream()
ax.clear()
nan in np.array([nan])
list1.append(i)
self.data.append(data)
set(b.items()) ^ set(a.items())
print(response.status, response.reason)
s.dt.to_pydatetime()
dictionary[round(a, 4)]
meta.create_all()
app.exec_()
data[data[data[:, (0)] == 0, 1] == 0]
f.close()
df2.fillna(0, inplace=True)
dill.pickles(f)
list(set(a) - set(b))
rdd = df.rdd.map(tuple)
all([(len(i) == len(set(i))) for i in zipt])
stock_vals[stock_name][day_index]
myDict = dict(list(element.attributes.items()))
np.hstack([R, phase])
{{test | tojson | safe}}
out = ohc.fit_transform(X)
print(repr(a))
np.where(np.diff(x) > 0.5)[0] + 1
zip(a, b)
0j
x[nonzeros].dot(mat[nonzeros])
pygame.init()
found = any(word == line.strip() for line in file)
A[:, (0)]
self.file.close()
ContentType.objects.get_for_model(obj)
np.bmat([[A, D], [C, B]]).A
self.panel.SetSizer(main_sizer)
os.chdir(curdir)
fig, ax = plt.subplots(1, 1, figsize=(12, 5))
array([1, 2])
p4in.close()
pp.sort(key=lambda p: math.atan2(p[1] - cent[1], p[0] - cent[0]))
Py_DECREF(v)
l[:] = [(x * 5) for x in l]
l1.append([7, 8, 9])
min(dictionary.values())
[elem for i, elem in enumerate(inputlist) if i not in excluded_indices]
Bar.objects.foo_active()
df.index + pd.offsets.MonthEnd(0)
print(list(locals().keys()))
server.quit()
plt.xticks(x)
list(replaceiniter(range(11), lambda x: x % 2))
np.any(a == 5, axis=0)
[list(g) for k, g in groupby(a, lambda x: x != 0) if k]
cursor.execute(*sql_and_params)
session.query(User, User.entries_count(Entry.date > start_date))
root.mainloop()
df1.groupby(level=0)[cols].apply(find_window)
k += 1
a.shape
plt.show()
d = {m.get(key, key): value for key, value in list(d.items())}
pool = Pool(processes=2)
map(dictionary.__delitem__, lst)
reduce(dict.get, path, aDict).update(aSecondDict)
n * n
LOGGER.setLevel(logging.WARNING)
self.root.mainloop()
cookiejar.set_cookie(cookie)
np.power(df, 2)
GC.remove_edge(*clique[0:2])
a[::-1]
random.shuffle(b)
plt.show()
time.sleep(1)
sum(map(lambda x, y: x * y, l1, l2))
print(thingy.attrib)
min(a, key=itemgetter(1))
ax = fig.add_subplot(111)
vscrollbar.grid(row=0, column=1, sticky=N + S)
time.sleep(1)
print(np.loadtxt(io.BytesIO(trace.text)))
os.nice(20)
df = pd.read_csv(filename, skiprows=lines2skip)
array([nan + 0j, nan + nanj, nan + nanj, nan + nanj, nan + nanj])
dis.dis(f)
sys.excepthook = handle_exception
f.close()
dis.dis(lambda x: x)
logging.Handler.close(self)
ax.set_yticks(list(range(0, 90, 10)))
main()
found = re.findall(regex, my_txt)
print(f.decorator)
df.matches.sum()
print(numpy.sum(c * a))
plt.show()
plt.pcolormesh(X[i - 2:i], Y[i - 2:i], C[i - 2:i])
sys.path.insert(0, self.path)
random.shuffle(thelist)
module1.Relay(1, 1)
User.objects.filter(id=self.request.user.id)
time.sleep(5)
[list(i) for i in set([tuple(sorted(i)) for i in a])]
lbl8.grid(row=2, column=0)
ao[:, :-1] += ai[:, 1:]
fpid.close()
f(1, 2)
print(sys.path)
print(np.allclose(a2, a))
sorted(templist, key=int)
tt = np.linspace(0, 19, 20)
ord(chars[0])
func(arg)
print(a[:, (1)])
(d1.year - d2.year) * 12 + d1.month - d2.month
self.children = {}
queryset = Model.objects.all()
show()
input.close()
plt.draw()
user.save()
parser = argparse.ArgumentParser()
my_func()
show()
result = bool_indices.apply(lambda x: df.loc[x, col_values].sum())
cv2.cv.CreateMat(500, 500, template.dtype)
conn.close()
df.loc[lhs, column] = rhs
callback(self)
plt.clf()
response
np.vstack((a, a, a))
height = img.shape[0]
zip(list(range(len(a))), a)
os.path.join(root, file)
output.close()
print(self.__name__)
canvas.grid(row=1, column=1, sticky=Tkconstants.NSEW)
obj.save()
decorator
x = [(bah * 2) for bah in buh]
self._socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s.connect((ip_addr, port))
a.py
list(results.values())
Counter(A.flat).most_common(1)
scores.append(clf.score(X[outer_test], Z[outer_test]))
plt.show()
jsonFile.seek(0)
sorted(lst, key=lambda x: (x < 0, x))
lis.append(lambda i=i: i)
(get_comments.s(url) | render_template.s()).apply_async()
a = numpy.empty([210, 8])
communication_set.save()
self.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.Popup)
words = sorted(wordset)
plt.gca().yaxis.set_major_locator(MaxNLocator(nbins=6))
pivoted.cumsum() + (pivoted == -1)
pd.isnull(np.array([np.nan, 0], dtype=object))
C = A * B
time.sleep(1)
ax = fig.add_subplot(111, frameon=False, xticks=[], yticks=[])
pygame.display.quit()
file.flush()
print(Y.transpose())
root.mainloop()
self.create(request, *args, **kwargs)
type(li)(map(double, li))
plt.legend()
p = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE)
category = forms.ChoiceField(choices=CATEGORIES, required=True)
pygame.display.set_mode()
arr[arr > 255] = x
cursor.execute(sql)
test_moduleB.py
main.py
plt.gca().add_artist(leg2)
plt.gca().add_artist(leg4)
plt.gca().add_artist(leg6)
[1][1][1]
x.pattern
zip([iter(l)] * 2)
len(set(hashlib.sha256(str(i)).hexdigest()[:5] for i in range(0, 2000)))
name = models.CharField(max_length=200)
print(time.time())
Counter(list(c.values()))
results = pbex.run()
data = json.load(f)
ax = fig.add_subplot(1, 1, 1)
ax.set_xlim(0, m.shape[1])
numpy.random.rand(count)
result = next(x for x in my_list if works(x))
ts = pd.Series([2, 1, 2, 1, 5], index=date_index)
np.savetxt(s, x)
s.close()
t = datetime.datetime(2009, 4, 1)
ax2.xaxis.set_visible(False)
Gtk.main()
root.mainloop()
img.write(pdf_path)
self.entry.focus_set()
print(result.groups())
worker.send(msg, zmq.NOBLOCK)
{{(request.user.username | multiply): 5}}
AB = np.matmul(A, B)
list(itertools.product(list(range(5)), list(range(5))))
a.insert(len(a), 5)
self.stateChanged.connect(self.handleStateChanged)
temp = tuple(map(sorted, zip(*alist)))
print(x[0], len(list(x[1])))
somelist.sort(key=ordering.get)
assert text in self.driver.page_source == True
isinstance(value, list)
population = [a for n, a in zip(pops, alleles) for _ in range(n)]
__import__(module)
etree.tostring(tree)
a[:2, (2)] = 0
app.run(debug=True, use_reloader=False)
out = np.sort(idx[np.unique(my_arr[idx], return_index=1)[1]])
self._dealer = dealer
func(*args, **kwargs)
shutil.copyfileobj(key, rsObject.stream())
tk.Tk.__init__(self, *args, **kwargs)
--Commentasfkjaskfj
fig, ax = plt.subplots(1, 1)
resultqueue.join()
np.isnan(a[2]).nonzero()
setattr(obj.a, p, value)
add_something(l)
plt.show()
res = (list(range(s, s + step + 1, step)) for s in range(start, stop, step))
app.MainLoop()
type(())
L.sort()
print(contruct.__version__)
print(m.group())
array([[100, 200], [255, 255]], dtype=uint16)
print(json.dumps(parsed, indent=4, sort_keys=True))
ent7.grid(row=2, column=1)
list(zip(*(d[k][n] for k in keys for n in d[k])))
MyObject.objects.bulk_create(my_objects)
value = models.CharField(max_length=240, db_index=True)
np.mean([0, 1, 2])
theclass.run()
signal.signal(signal.SIGINT, s)
u = np.random.random(100)
[(key, list(val)) for key, val in itertools.groupby(lst, lambda x: x[0:5])]
self.x.pack(side=LEFT)
find_majority([-1, -1, 0, 0, 0])
print(dom.toxml())
sorted(xs, key=len)
[func(elem) for elem in lst]
ax.add_patch(polA)
ax.add_patch(polB)
out.close()
df.head(5)
df.iloc[:, (0)]
pylab.show()
my_category.category.all()
window.unfullscreen()
ax.xaxis.set_ticks_position(direction)
plt.figure()
lxml.html.tostring(root)
os.unlink(f.name)
excel.Quit()
(A + B).min(axis=1)
connection.close()
task.AsyncResult(task.request.id).state
numbers = list(map(int, s.split()))
df
model.fit_transform(X, y)
list(range(0, n + 1, 2))
main()
time.sleep(1)
results.sort(key=lambda x: x[1])
listmatrixMap(lambda val, r, c: ((r, c), val), a, indices=True)
yaml.dump(self.__dict__)
parser = argparse.ArgumentParser()
app.run()
ax.set_yticklabels(row_labels, minor=False)
diff_file.write(difftext)
diff(unwrap(phase(hilbert(filtered_data))))
data.depth * len(data.getbands())
t.start()
ntxt.write(rline)
server.quit()
QtGui.QApplication.sendEvent(clipboard, event)
pd.groupby(b, by=[b.index.month, b.index.year])
some_file.seek(0)
ssh_client.connect(host, username=user, password=password)
df[~df.index.isin(dropThis)]
token.save(force_insert=True)
browser.close()
strange_sandwich()
[lst[indices[i]:indices[i + 1]] for i in range(n)]
idx = np.argsort(a[1])
pygame.display.flip()
self.f.make_a_doo()
b = copy.deepcopy(a)
df.round()
self._rooms = dict()
itertools.chain(*zip(*iters))
sizer.Add(notebook, 1, wx.EXPAND)
list()
s = urllib.request.urlopen(form_url)
os.getpid()
set([4, 5, 6])
output.append(acids[0])
np.diff(m.tocsc().indptr)
yacc.errok()
print(locals())
print(repr(tokzr_SENT(inp1)))
plt.xlim(np.log10(ilim))
print(ET.tostring(f))
f.write(ip)
main()
func(*parameters)
main()
app.run()
label.pack()
[a for i in items if C]
fo.close()
plt.show()
session.add(stud)
data = json.loads(response.get_data(as_text=True))
logger.setLevel(logging.DEBUG)
print(item)
foo(*params)
df.sort_index(inplace=True)
logger.setLevel(level)
p.start()
globals[key] = value
df[~df.field.isin(ban_field)]
plt.show()
QApplication.restoreOverrideCursor()
ax2 = fig.add_subplot(1, 2, 2)
items.remove(item)
db.session.commit()
installer.uninstall()
plt.show()
dict(heapq.nlargest(5, list(names_dict.items()), key=itemgetter(1)))
arr[idx[:, (0)], idx[:, (1)]]
main()
self.data[column].add(row)
df.isnull().sum()
GL.glOrtho(-1.0, 1.0, -1.0, 1.0, -1.0, 1.0)
widget.show()
print(A.T)
b.swapaxes(0, -1)
stream.Close()
C.objects.create(a=a1, b=b)
inputElement.submit()
os.unlink(tmpfile_name)
print(G.nodes())
data = re.findall(pattern, line)
root.mainloop()
parser = etree.XMLParser(remove_blank_text=True, strip_cdata=False)
datetime.datetime.fromtimestamp(0) + datetime.timedelta(seconds=2047570047)
ax = fig.add_subplot(111)
print(df)
pass
self.filelist.append(zinfo)
mlab.axes()
gtk.main()
self.setCentralWidget(self.button)
type(a)
newprefix = prefix[:]
lstbox.grid(column=0, row=0, columnspan=2)
map(lambda *x: sum(x), list(range(10)), list(range(10, 0, -1)), list(range(0, 20, 2)))
wx.Button.__init__(self, *a, **k)
matrix = np.random.randint(2, size=(row, col))
development.py
p.wait()
f.write(line)
pool.close()
ax = fig.add_subplot(111)
sum(map(doSomething, originalList), [])
result.append(func(e))
self.Bind(wx.EVT_BUTTON, self.OnClick, b)
exit(0)
[False, False, False, False, False],
tk.Tk.__init__(self, *args, **kwargs)
__init__.py
self.buttonStart.clicked.connect(self.worker.run)
Base.metadata.create_all(bind=db.engine)
foo(n - 1) + [1]
connection.start()
webdriver.ActionChains(driver).move_to_element(el).click(el).perform()
app.run()
driver.quit()
f.writelines(file_lines)
np.where(self == value)
root.mainloop()
session.commit()
y[0] = 0
print(response.read())
time.sleep(10)
searchfile.close()
[add_number(xi) for xi in my_list]
ax.add_line(line_2)
sys.path
plt.gca().add_patch(rect)
f.close()
A, = np.array(M.T)
sys.path.pop(0)
int(bin(n)[:1:-1], 2)
doc = etree.parse(url)
optimize.fmin(func, x0=[y_estimate, z_estimate], args=data)
assert diff_month(datetime(2010, 10, 1), datetime(2009, 8, 1)) == 14
session.query(Workflow).get(id)
filtered_output.write(line)
psutil.cpu_times()
msglist.append(hextotal[start:start + 4096])
data.write(c + n)
b1.insert(END, item)
x.append((i, j))
dict(zip(fields, row))
True
test[:, ([0])]
y = np.array([-1, 1, 1, 1, -1, 1])
controller2.py
controllerapi.py
utilities.py
extfoo.py
array = np.ones((n, n))
words = {line.strip() for line in file_a}
Cmd.cmd.__func__()
Base.metadata.create_all(engine)
data = pd.concat([data, stock_data], axis=1)
self.window.fullscreen()
data = cursor.fetchone()[0]
math.degrees(math.atan(1.18))
Category.objects.get(pk=2).get_descendants(include_self=True)
client.close()
self.root.mainloop()
cv.SetCaptureProperty(video2, cv.CV_CAP_PROP_FRAME_WIDTH, 800)
print(open(my_module.__file__).read())
L.pop(i)
self.image.show()
text = Tkinter.Text()
fin.close()
df.loc[g.groups[1]]
[(x[0:index] + x[index + 1:]) for x in L]
s.groupby(s.index).first()
[x for x in seq if not (x in seen or seen_add(x))]
dt.replace(microsecond=int(parts[1]))
plt.gca().add_artist(mynewline)
sys.maxunicode
Counter(L).most_common(1)[0]
new_list = [foo for foo in foos if foo.location == 2]
fig, ax = plt.subplots(figsize=(8, 8))
f.seek(0, 0)
dict_of_lists[key].append(val)
[next(generator) for _ in range(n)]
ax.set_xticks(np.linspace(0, 2 * np.pi, 5))
ax1.xaxis.set_major_locator(xloc)
x.append(sublist[0])
L4 = list(item for item in L1 if item not in unwanted)
time.sleep(duration)
foo.module_method()
os.path.normpath(path1) in (os.path.normpath(p) for p in list_of_paths)
list(chain.from_iterable(zip(a, reversed(a))))[:len(a)]
np.finfo(np.float).eps
self.finish()
arr[(arr[:, (0)] >= xmin) & (arr[:, (0)] <= xmax)]
Thaidump(text)
plt.show()
a[0] = np.nan
data = [(b[1], p, b[0], b[2]) for p, b in list(rays_starters.items())]
plt.show()
image.show()
print(term.move(term.height - 1, 0))
a[i1, i2, i]
msvcrt.get_osfhandle(a.fileno())
pd.Series(np.nanmean(val.reshape(-1, k), axis=1))
msg.send()
os.makedirs(final_path)
time.sleep(0.01)
math.factorial(n)
[(i - set.union(*[j for j in allsets if j != i])) for i in allsets]
text.pack()
dict((k.lower(), v) for k, v in d.items())
df.reset_index(inplace=True)
s.groupby(idx).mean()
module.myif.__init__(self)
cur.execute(query, parameters)
set(tuple1).issubset(tuple2)
sum(itervalues(d))
instance = YourModel(name=value, image=self.get_image_file())
value = np.ctypeslib.as_array(value).tolist()
r.json()
tree = scipy.spatial.cKDTree(array_of_coordinates)
abs(a - b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)
dict(d2, **d1)
df2 = pd.DataFrame(index=df1.index.copy())
image = Image.open(file)
df = df[df.line_race != 0]
np.unravel_index(np.ravel_multi_index((10, 1, 2), arr1.shape), arr2.shape)
time.sleep(10)
all(not element for element in data)
min([s for s in lst if isinstance(s, str)])
root = tk.Tk()
id = Column(Integer, primary_key=True)
plt.show()
arr = np.array(arr_ip, dtype=dtyp)
[[[1]][[2]]]
logger.setLevel(logging.DEBUG)
sys.exit(app.exec_())
df.sum()
signal.signal(signal.SIGINT, handler)
a = np.empty((15,))
mymodel.objects.filter(pk=a[i]).update(attr=i)
[i for i, v in enumerate(a) if v in b_set]
print(name.title())
df_both.swaplevel(0, 1).sort_index().swaplevel(0, 1)
x = list(y)
self.pot.temperatureRaisedSignal.connect(self.temperatureWarning)
plt.show()
{{post.text | markdown}}
self.user.username
self.get_solr_results()
df
widget.setWindowFlags(QtCore.Qt.Widget)
print(et.tostring(tree))
plt.show()
button.show()
a2.append(float(s))
[0][0][2]
repo.push()
lexobj.writetab(lextab, outputdir)
(lst[i] for i in indices)
resolve(request.path).app_name
b[a] = 10
f.close()
len([x for x in a_list if x[0] == 1]) > 0
fig.subplots_adjust(bottom=0.2)
ax2.set_xticklabels(new_labels)
plt.imshow(Z)
datetime.utcfromtimestamp(timestamp1)
plt.show()
args = parser.parse_args(sys.argv[1:])
(lambda : 1) == (lambda : 1)
g = nx.Graph()
foo.x
print(sum(i * i for i in l))
print(max(b - a for a, b in pairwise(values)))
plt.legend()
w.show_all()
pcap_lookupnet(dev, ctypes.byref(mask), ctypes.byref(net), errbuf)
server.serve_forever()
setattr(cls, attr_name, prop)
list(nx.weakly_connected_component_subgraphs(G))
ax0b.plot(x, y)
ax0c.plot(x, y)
mysignal.connect_via(app)(print_howdy)
fig = plt.figure()
app.run()
root = Tk()
logging.Handler.__init__(self)
serializer = NewModelSerializer(data=request.data, context=context)
win.show_all()
zip(*elements)
any(1 in d for d in lod)
urlparse(request.url).query
{(1, 1): something}
post_save.connect(create_user_profile, sender=User)
process.kill()
print(y.shape)
raise TypeError(node)
func(*args, **kw)
m.toarray()
d.setdefault(y, []).append(x)
pd.DataFrame({n: c.apply(lambda x: x.get(n, 0)) for n in wordlist})
session = requests.Session()
fid.close()
[0] * A + [1] * B
binascii.hexlify(bytearray(array_alpha))
wavf.write(out_wav, fs, out_data)
print(p.stdout.read())
[(car.pop(0) if item else a.pop(0)) for item in lyst]
dic[g][y] = df[(df[Gender] == g) & (df[Year] == y)]
validate(yaml.load(bad_instance), yaml.load(schema))
new_list = [v for v in a if v not in b]
app.start()
form = PostForm(obj=post)
sizer.Add(self.canvas, 1, wx.EXPAND)
np.put(out, np.ravel_multi_index(idx.T, dims), vals)
cb = plt.colorbar(sc, ax=ax1, aspect=10, format=Myfmt())
gs1.update(wspace=0.025, hspace=0.05)
yylex()
admin.site.register(User, UserProfileAdmin)
row = cursor.fetchmany(10)
root.mainloop()
sorted(a) == sorted(b)
math.floor(math.log(n, 2)) + 1
f.write(sio.getvalue())
num_fatals += 1
server.run()
blogpost.tags[:] = new_tags
writer.writerow(row)
isinstance(amodule, __builtins__.__class__)
HTMLParser.HTMLParser.__init__(self)
ax = fig.add_subplot(111, polar=True)
QtGui.QFrame.__init__(self, parent)
print(m.group(1).rstrip())
gtk.main()
print(hashlib.sha512(password).hexdigest())
cv2.__version__
qs.filter(map(operators.or_, [Q(k=v) for k, v in list(request.GET.items())]))
L[idx].append(item)
cashflow[-1] += 100
ax.get_yaxis().set_minor_locator(mpl.ticker.AutoMinorLocator())
runner.run()
np.mean([0, 0, 1])
file.seek(0)
urllib.request.urlretrieve(url, filename)
print((word, count))
s1.reset_index()
b = a[:]
list(unique_everseen(lst, key=len))
isinstance(obj, collections.Callable)
df.columns = new_cols
time.sleep(1)
time.sleep(1000)
self.send_response(200)
root.columnconfigure((0, 2), weight=1)
element = max(myset)
[x for x in myTuple if foo(1, x, 4)]
[(elem + func()) for elem in myList]
d[k].append(v)
results = sorted(list(results_dict.items()), key=lambda x: x[1])
db.session.add(post)
self.y = [self.x for i in range(1)]
ax.plot_surface(X, Y, Z)
nodes = [node() for _ in range(100)]
popt, pcov = curve_fit(lambda x, a: func(x, a, b), x1, x2)
User.objects.get(id=uid)
plt.gcf().subplots_adjust(hspace=0.5, wspace=0.5)
plt.show()
msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)
cmp(A[adiff], b[bdiff])
network.draw()
np.sqrt((w * q * q).sum())
np.allclose(np.dot(A, B), A * sparse_B)
threading.Thread.__init__(self)
[[df.columns[j] for i, j in grp] for k, grp in groups]
foo(*x, **y)
time.sleep(1)
session.commit()
FOUT.close()
root.mainloop()
ax1 = fig.add_subplot(111)
ax.minorticks_off()
df1.index & df2.index
print(process.returncode)
print(x.apply(lambda y: [a for a in y if pd.notnull(a)]))
[(sum([(i * i) for i in vec]) ** 0.5) for vec in x]
proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, env=initial)
(value for key, value in sorted(dictobj.items()))
list.__setitem__(self, index, value)
d.sort(key=itemgetter(0))
pd.DataFrame({n: c.apply(lambda x: x[n]) for n in wordlist})
[x for x, y in groupby(L) if sum(1 for i in y) < 2]
b[1:] = b[1:] - b[:-1]
driver = webdriver.Chrome(chrome_options=opts)
df
ax.xaxis.set_visible(False)
np.delete(x, 1, 1)
conn.close()
pylab.show()
driver.get(url)
a = np.hstack((a, b))
d = {k: list(v) for k, v in groupby(tags, key=lambda x: x[0])}
-tox
fsizer.Add(self.filtr, 1, wx.EXPAND)
tfile.seek(0)
print(chr(i))
parser = argparse.ArgumentParser()
os.dup2(w, sys.stderr.fileno())
[numpy.all(-2), numpy.all(-1), numpy.all(0), numpy.all(1), numpy.all(2)]
sorted(population, key=keyfun)
td_series.astype(pd.Timedelta).apply(lambda l: l.days)
GPIO.output(4, True)
formset.save_m2m()
soup = BeautifulSoup(page)
pattern = re.compile(re.escape(motif))
id(df._data.blocks[0].values)
writer.writerow(row)
df.loc[df.isin([1, 2]).any(1)]
os.path.join(base_path, relative_path)
array[mask] = 255
sftp.close()
print(temp_df.apply(lambda x: x - temp_arr[x.index], axis=1))
[k for k, v in list(d1.items()) if v == m][0]
cmds.ls(sl=1, fl=1)
pygame.draw.circle(surf2, (200, 0, 0, 100), (100, 100), 100)
writer = csv.writer(f)
exit()
ax1 = fig.add_subplot(111)
s = s[117:]
b.extend(map(ord, s))
text = nltk.Text(tokens)
run()
subprocess.call([PLAYERPATH, FILEPATH])
yaml.add_representer(OrderedDict, represent_ordereddict)
ax.imshow(im)
main()
print(br.response().read())
self.create(request, *args, **kwargs)
all(starmap(lt, zip(a, b)))
signal.pause()
y = list(x)
print([(y - x) for x, y in l])
df = df[colnames]
results = [do_smth(slurp_file(f)) for f in filenames]
print((k, v))
plt.colorbar(pc, cax=axes)
math.isnan(a)
df.iloc[sort_slice]
Base.metadata.create_all(engine, checkfirst=True)
plt.plot([0, 1])
sys.stdout.close()
print(zip(*(zip(itertools.repeat(ls[0]), ls[1:]) for ls in data)))
ax.scatter(xs, ys, zs)
self.response.out.write(xml)
print(list(d.keys()))
formset.save()
neuron.draw()
self.textEdit.setPlainText(mytext)
image = Image.open(io.BytesIO(bytes))
df.rdd.map(lambda r: r.zip_code).collect()
server.quit()
time.sleep(1)
tf.div(x, y)
print([data[id == i].max() for i, _ in groupby(id)])
fh.close()
sys.path.append(path)
df.iloc[:, 1:]
f.write(line)
a.sort(key=len)
soup = BeautifulSoup(data)
time = datetime.strptime(time, DATETIME_FORMAT)
self.ax.figure.canvas.draw()
f.close()
window.add(vbox)
s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_IP)
plt.pause(0.001)
func(*args, **kwargs)
df.comments.dropna()
img = f.read()
groups.sortlevel([0, 2], sort_remaining=False)
pool = Pool(processes=2)
warnings.resetwarnings()
imshow(skeleton, cmap=cm.Greys_r)
q = Post.query.options(db.joinedload(Post.tags)).all()
yacc.errok()
s[s.index.dayofweek < 5]
df.applymap(lambda x: (0, 0) if x is np.nan else x)
self.mthread.start()
print(zip(*lists))
browser.get(url)
print(soup.html.string)
cursor = conn.cursor()
timestamp = (aware - datetime(1970, 1, 1, tzinfo=pytz.utc)).total_seconds()
plt.tight_layout()
time.sleep(1)
eyear1.grid(row=1, column=1)
layout.removeWidget(self.widget_name)
mc.__dict__
draw = ImageDraw.Draw(im)
ax.patch.set_alpha(0.5)
self.__getattribute__(name)
df
df2
plt.figure()
print(list(words))
[1][2][0]
plt.show()
a = numpy.array(a)
pylab.show()
bin(int(my_hexdata, scale))[2:].zfill(num_of_bits)
print(repr(data))
s = chr(i)
plt.ylim((-5, 5))
func(*args, **kwargs)
df.tail(1).T.assign(passes=lambda x: x.iloc[:, (0)] > 1)
f()
locale.setlocale(locale.LC_ALL, lang)
(counts == 1).all(axis=1)
fig.autofmt_xdate()
df = pd.DataFrame.from_dict(data)
f()
plt.show()
ax.set_ylim(0, m.shape[0])
a.shape
session.add(inst)
Representative.objects.create(**dict(zip(fields, row)))
turtle.forward(100)
a.tolist()
self.sprockets.add(spr)
print(ord(s[0]))
data.get(num) or data[min(list(data.keys()), key=lambda k: abs(k - num))]
model.fit(X, y)
table.cols.key.createIndex()
p.terminate()
print(char, char.isalpha())
printRecurrence()
ax.axis((x1, x2, y1 - 1, y2 + 1))
square(double(Maybe(5)))
driver = webdriver.Firefox(firefox_binary=binary)
ax.yaxis.set_major_formatter(formatter)
dict(enumerate(grouper(numbers), 1))
x = [[] for i in range(4)]
f = open(fd, closefd=True)
bar.name
[id(v) for v in list(d.values())]
problems
[1][1][2]
[0][1][1]
mydict[index] += 1
moobar()
print(json.dumps(data, indent=4))
df[g.cumcount() == n - 1]
dict((k, dict(v)) for k, v in list(r.items()))
plt.show()
[word for words in lst for word in words.split()]
ax.set_rlim([0, 5])
session.add(feed)
User.name.property.columns[0].type.length
r = requests.get(url, params=payload_str)
i += 1
list(filter(my_filter, my_iterable))
image.save(savepath)
print(pd.concat([df, pd.DataFrame(D, index=df.index)], axis=1))
np.random.rand(5) < 0.8
a.tolist()
chain.apply_async()
fd.close()
print(f.getvalue())
t.start()
ent5.grid(row=4, column=1)
data = {}
1.0 - scipy.stats.hypergeom.pmf(0, N, M, Q)
print(r.json())
[(i, mylist.count(i)) for i in set(mylist)]
__init__.py
print(func())
lst[:] = (v for v in lst if pred(v))
time.sleep(0.5)
x = list(itertools.islice(list(d.items()), 0, 4))
proc.stdout.close()
unittest.main()
image[(mask[:] == 0), ...] = chex[(mask[:] == 0), ...]
wr.writerow(list1)
[subword for word in list for subword in word.split()]
self.thisptr.myBMethod(dereference(a.thisptr), getAMethod())
m.group(1)
n = np.clip(n, minN, maxN)
ax.set_xticklabels(column_labels, minor=False)
spherical_dist(locations_1[0], locations_2[0])
raise NotImplementedError
f2.write(lines[i + 1])
plt.scatter(_x, _y, marker=_s, c=c)
L[1][:]
inset.xaxis.set_tick_params(labelsize=INSET_TICK_FONTSIZE)
tuple(x + y for x, y in zip(xs, ys))
(value[i:i + n] for i in range(0, len(value), n))
[i for v, i in sorted((v, i) for i, v in enumerate(x))]
ws = base.add_sheet(k.upper())
mycanvas.pack(fill=BOTH, expand=YES)
mylist.remove(min(mylist))
img.size
np.broadcast(x, y, z).shape
cols_to_use = df2.columns - df.columns
find_majority([1, 1, -1, -1, 0])
[ord(uc) for uc in udata]
plt.legend(handles, labels)
twitterDataFile.close()
self.panel.SetSizer(sizer)
np.concatenate([a[:k] for k in x])
time_list[np.arange(5, 7)]
lst.append(4)
b = a.copy()
print(line)
pprint(a)
get_proc_name()
l = list(map(lambda x: f(indices=x), itertools.product(x, y, z)))
print(checktype(i))
(x for x in full_list if x not in s)
sorted(l, key=lambda x_y: (-x_y[1], x_y[0]))
ax.set_ylim(0, 5)
answer[pk].append({sk: L[i][1]})
row = dict(zip(list(row.keys()), row))
[2, 0, 1, 0, 1, 0]
index_list.append(last_index)
csv_file.writerows(mylist)
self._reverse_mocks()
self.Bind(wx.EVT_RIGHT_UP, self.OnExit)
module_name.__file__
np.array(avgDists).argsort()[::-1][:n]
sys.stdout.write(line)
fig = plt.figure()
name_in_module()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
Gtk.main()
self.ax.clear()
{k: (D[k] - v) for v, k in enumerate(albums_today)}
itertools.combinations()
max((len(v), v, k) for k, v in flows.items())[1:]
tz.fromutc(utc_time)
transaction.commit()
result.append(message)
fig, ax = plt.subplots()
print(hex_to_datetime(s), dt)
array[i:i + size] + array[:max(0, i + size - len(array))]
fcntl.flock(g, fcntl.LOCK_EX)
h.encode()
t = threading.Thread(target=get_url, args=(q, u))
self.send_response(200)
data = line.split()
print(2 * math.asin(1))
pak.show2()
value = a_lower[key.lower()]
signal.signal(signal.SIGINT, signal.SIG_DFL)
os.chdir(directory)
np.repeat(arr, rep.flat).reshape(2, -1)
data = {foo: foo_value, bar: bar_value}
[alist[i:i + sublen] for i in range(0, len(alist), sublen)]
self.name = name
print(frame.f_lineno)
sys.exit(1)
point.x, point.y
obj = MyModel.objects.create(val=1)
print(url)
print(m[0])
self.ShowModal()
list(data.keys())
process_url(a)
jsonFile.write(json.dumps(data))
self.assertEqual(yargs[0], yexpected)
my_list = list(my_set)
[8, 8, 8, 8, 8, 8, 8, 8, 8, 8]
self.main_app(environ, start_response)
pl.plot(X, Sine)
reactor.run()
ax1.plot(s1.index, s1)
p.communicate()
print(sys.builtin_module_names)
cur.execute(query, (limit1, limit2))
collatz(10)
data = sys.stdin.read()
self.assertEqual(xargs[0], xexpected)
plot.colorbar(im, cax=ax2)
ax.set_ylim(-0.5, 1.5)
driver.set_window_size(1120, 550)
app.logger.addHandler(file_handler)
jsonify(d)
self.redis = Redis()
L.sort()
isinstance({}, dict)
sin(x) * cos(x)
s.rstrip(punctuation)
plt.show()
sys.stdout.flush()
{{request.user.pretty_username}}
plt.show()
sp.sourceslist.save()
pd.DataFrame(X, columns=v.get_feature_names(), index=grouped.index)
fig = plt.figure()
os.system(mycommand)
worker.start()
cmp(x, y)
os.chmod(path, 511)
a[:] = [(x, mapping[x]) for x in b]
soup = BeautifulSoup(html)
map(list, a)
signal.signal(signal.SIGINT, signal_handler)
sys.exit(12)
min(filtered, key=lambda x: x.last - x.first)
[i for i, x in enumerate(a) if x in list_duplicates(a)]
tk.Tk.__init__(self, *args, **kwargs)
zip(MONTHS, MONTHS)
x = X.objects.get(id=x.id)
bisect.bisect_left(list_, item)
np.log(sample_df).diff()
some_list == sorted(some_list)
QApp().run()
e1.pack()
res = func(*args, **kwargs)
n = clamp(n, 7, 42)
print(random.choice(data))
os.chdir(random.choice([d for d in os.listdir(os.curdir) if os.path.isdir(d)]))
json.dumps(doc, sort_keys=True, indent=4, default=json_util.default)
subprocess.Popen(smart_cmd)
plt.xlim((-5, 5))
os.kill(2405, 0)
b[indices] = a[indices]
layout.addWidget(self.button)
print(map(lambda x, y: abs(x - y), l[1:] + l[:1], l))
plt.figure(figsize=(12, 8))
self.after(1000, self.countdown)
reshaped2.show()
my_list.sort()
app = Flask(__name__)
data = json.load(json_data)
screen.blit(temp_surf, (0, 0))
self.app(environ, custom_start_response)
print(list(get_week(datetime.datetime.now().date())))
plt.setp(ax.get_xticklabels(), visible=False)
__init__.py
last_inner_append(x[-1], y)
self.driver.quit()
driver.get(url)
ax.xaxis.grid(True)
signal.signal(signal.SIGALRM, signal_handler)
L = [(x + [0]) for x in L]
colorbar()
time.sleep(0.1)
[2.0, 2.0017]
app.debug = True
client.put_file(dropbox_path, f)
sorted([(i, j) for j in range(10) for i in range(10) if j > i])
df.xs(1)
print(f.bar)
cursor = conn.cursor()
temp.append(data.tolist())
app.MainLoop()
func_to_call()
pylab.show()
list(filter(bool, l))
dt.microsecond
print(json.dumps(t, cls=MyEncoder))
self._numberButtons[i].clicked.connect(partial(self._number, i))
df2.apply(lambda x: df2.loc[~x.isin(df1[x.name]), x.name])
df = df.sort_index(axis=1)
False
logger.setLevel(logging.DEBUG)
plt.ylim(0, 8)
btn5.grid(row=4, column=0)
[r for r in x if not any(s in r for s in y)]
client.set_options(wsse=security)
user.get_all_permissions()
counterpart.sendall(data)
print(Photo.objects.filter(tags=t1).filter(tags=t2).query)
reactor.run()
plt.show()
event.wait()
A - A.multiply(BisBigger) + B.multiply(BisBigger)
id = Column(Integer, primary_key=True)
browser.quit()
{k1: d2[d1[k1]] for k1 in d1 if d1[k1] in d2}
db.session.commit()
[arr[max(0, idx - 1):idx + 2] for idx in range(0, len(arr), 2)]
np.where(x & x - 1 == 0)
local_dt.replace(microsecond=utc_dt.microsecond)
newgrid.append([x[i] for x in grid])
ax.set_yticks([])
enemy1 -= punch
func(*args, **kwargs)
date = datetuil.parser.parse(string, tzinfos=tzd).astimezone(pytz.utc)
sess.run([init_op])
engine.execute(createview)
ax0b.set_xticklabels([])
seen.add(item.lower())
float_array.fromstring(input_file.read())
app.MainLoop()
self.grid_rowconfigure(1, weight=1)
timer.timeout.connect(self.move_towards)
fig = plt.figure()
print(response.content)
df.columns = list(resoverall.keys())
reactor.run()
print(df2[[15, 16, 17, 18, 19, 8]])
texts[0].set_fontsize(4)
fig = plt.figure(figsize=(xinch, yinch))
ws.cell(row=i, column=j)
sys.exit(0)
ax.set_zlim(0, 5)
main()
[0, 0, 0, 0, 1, 1, 1]
p.wait()
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
df[col] = df[col].sum()
ng.run()
lambda : [func() for _ in range(n)]
pattern = re.compile(pattern_string)
fout.close()
df[~df.From.str.contains(ignorere)]
sstd.on_changed(update)
__builtins__.set
plt.legend()
e.shape
random.choice(my_list)()
alist.append(string[i:j + 1])
all((x > 0) == (y > 0) for x, y in zip(l1, l2))
print(response.text)
ax = fig.add_subplot(111)
np.array(list(chain(*[np.arange(20).reshape(4, 5)[i::2] for i in range(2)])))
ax.xaxis.set_minor_locator(MultipleLocator(5))
dict.__setitem__(self, x, value)
ax.figure.show()
Tkinter.mainloop()
s.between(0, 1).any()
self.data[attr]
np.random.shuffle(arr[:, (i)])
X, Y = np.meshgrid(X, Y)
print(len(s), len(data), repr(data))
print(img.shape)
r.read()
pylab.ylim([0, 1000])
plt.plot(c[0], c[1], c[2])
list(intermix([1, 0, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2]))
proc.wait()
np.fill_diagonal(out, 1)
redirect(login_url)
frame = cv.QueryFrame(self.capture)
print(s.read())
msg = MIMEMultipart()
D = np.r_[np.c_[A, B], np.c_[B.T, C]]
print(list(itertools.islice(arith(10, 2), 100)))
bool(_digits.search(d))
L[item][0]
manual_wcwidth(data)
pass
a = np.append(a, i)
response = json.loads(jsonResponse)
final_l.append((p[0], visit(p)))
tmp.append([X[i, j] for i in X])
sys.exit(app.exec_())
BabyDataSet = list(zip(names, births))
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
foo()
pool = multiprocessing.Pool()
print(df.iloc[:, (0)].tolist())
ax.set_zlim(-100, 100)
ax = plt.gca()
a[i, j]
self.clip.disconnect(self.signal_id)
server.ehlo()
deleterow[1]
axes.set_ylim([ymin, ymax])
Y[(1), :]
time.sleep(0.1)
do_stuff()
x = x[1:]
quit()
time.sleep(1)
cur.execute(sql, params)
plt.show()
fig, ax = plt.subplots()
sw.pack(fill=tk.BOTH, expand=1)
l.extend(t + t2)
print(token.access_token)
dict((k, bigdict[k]) for k in wanted_keys if k in bigdict)
NameRank.sort(key=lambda x: int(x.split()[1]))
set(x) == set(y)
print(save_data.get())
{{i}}, {{j}}
cls.__new__()
list(OrderedDict.fromkeys(t).keys())
a, b = b, a + b
plt.show()
self.setCentralWidget(self.window)
random.choice(list(dictionary.values()))
lbl5.grid(row=4, column=0)
n * factorial(n - 1)
[_ for _ in itertools.compress(d, map(lambda x: x >= 4, a))]
df.stack().map(m).unstack()
d += timedelta(days=7)
conn.send(data)
a, b = 1, 1
c.mymethod2()
str(User.query.filter_by(role_id=user_role))
view.show()
ax.set_ylim(0, 10)
df.iloc[np.sort(np.concatenate([idx[~iszero], keep_these]))]
new_pressures.append(0)
x = ast.literal_eval(x)
ser.write(str(d))
table[1][2]
plt.xticks(list(range(len(x))), x)
func()
(myarray[i] for i in myindex)
collections.deque(itertools.islice(iterator, n), maxlen=0)
fig = plt.figure()
driver.set_window_size(1024, 768)
A.shape
[o.specific_attr for o in objects]
x = list(someiter)
[(a if a else b) for a in sequence]
df.reindex(ind & ind2)
test[2] = new_value
o4.method()
X.__setitem__(0, 2)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
plt.show()
dict((k, int(v)) for k, v in d.items())
names = self.__class__.__dict__
Ainv = np.zeros_like(A)
func(*args, **kwargs)
df2.apply(lambda x: df2.loc[~x.isin(df1.values.ravel()), x.name])
df
fig.set_size_inches(11.7, 8.27)
math.hypot(y[0] - x[0], y[1] - x[1])
next(decfa)
arr = (ctypes.c_int * len(pyarr))(*pyarr)
os.kill(self.pid, signal.SIGKILL)
Response(token, status=200)
plot_df.plot()
ftp.quit()
print([(k, v) for k, v in list(dupl.items()) if len(v) > 1])
json.dump(row, outfile)
f.seek(0)
j2 = sorted(i for i in j if i >= 5)
suffix_array.sort(key=lambda a: buffer(content, a))
sess = tf.InteractiveSession()
Py_Finalize()
sys.stdout.flush()
ao[:, 1:] += ai[:, :-1]
self.predictions_.append(classifier.predict_proba(X))
driver.switch_to.window(driver.window_handles[1])
print(list_of_dict)
result = [tuple([ai, bi] + ci) for ai, bi, ci in zip(a, b, c)]
main()
subprocess.call(command, shell=True)
ancestors_descendents.add(descendent)
par2.xaxis.set_ticklabels([i[0] for i in data])
proc.wait()
sys.exit(app.exec_())
ax.clear()
print([list(g) for g in group([], lambda x: x % 5 == 0)])
mark_safe(simplejson.dumps(data))
loader.load_module()
map(lambda x, y: x + y, itertools.repeat(x), y)
print([w for w in txt.split() if not w in s])
test.py
list(d.items())
literal_eval(s)
random.shuffle(items)
trace.main()
pylab.show()
xl.Workbooks.Close
df = df.T.stack().reset_index()
pd.concat([d1, df], axis=1)
Py_INCREF(interned)
df.dtypes
IOLoop.instance().start()
fig = plt.figure(figsize=(4, 10))
print(sys.argv)
time = time - datetime.timedelta(microseconds=time.microseconds)
[indicies[elements == i] for i in range(1, N)]
print(re.findall(p, test_str))
Sample.objects.filter(date__range=[startdate, enddate])
L[i] = sorted(L[i], key=operator.itemgetter(1, 2))
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
examplemod.do_stuff()
os.unlink(filename)
d = collections.defaultdict(dict)
session_list.delete()
[right for left, right in pairwise(a) if right[1] > left[1]]
fig = plt.figure()
plt.show()
db.session.add(c)
do_stuff()
line.set_ydata(r[:, (1)])
form = ExcludedDateForm(user=request.user)
globals()[funcname](**argsdict)
driver = webdriver.Firefox(p)
f.close()
my_list
(i for i, j in zip(seq, shift) if (i, j) != (x, x))
app.exec_()
a, b = b, a + b
sum(value for _, value in list(a.items()) if value > 0)
foo()
data = json.dumps(myobject.__dict__)
print(powercheck([1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1]))
ax.set_position(pos2)
id(lines[0]), id(ax.lines[0])
draw.ellipse((x1, y1, x2, y2), fill=background_color)
hasattr(obj, method_name) and callable(getattr(obj, method_name))
foo(2)
cursor = collection.find(spec={}, snapshot=True)
sorted(d, key=sorting)
df[new_columns]
data = myfile.read()
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
d.setdefault(t[0], {})[t[1]] = t[2]
handle.close()
writer = csv.writer(f)
out = np.asarray(np.bmat([[A, Z], [Z, B]]))
x[0] = x[0] + 1
run()
adder(10)
plt.show()
curses.noecho()
print(soup.prettify())
np.array(result)[::-1]
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
sys.maxunicode
master.grid_rowconfigure(0, weight=0)
b.foo()
include(GenerateExportHeader)
db.session.commit()
[(arg + 1) for arg in args]
d = [list(map(int, x)) for x in DATA]
hi()
mylist.sort(key=lambda x: x[1])
TaskBase.__call__(self, *args, **kwargs)
self.assertTrue(mock.called)
t.start()
foo.name
func(*args, **kwargs)
admin.site.register(User, CustomUserAdmin)
parser = argparse.ArgumentParser()
[lst[i::n] for i in range(n)]
admin.site.register(CherryTomato, TomatoAdmin)
self.session.execute(count_query).scalar()
user2 = forms.ChoiceField(choices=choices)
ActionChains(driver).move_to_element(element).perform()
json.dumps(convert(d))
sys.exit()
writer.writerow(row)
message.save()
self.grid_rowconfigure(0, weight=1)
i, j = np.indices(a.shape)
time.sleep(0.5)
fig = plt.figure()
{k: add_element(v) for k, v in list(dicty.items())}
json.loads(x)
self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file)
time.sleep(1)
globals()
func.__code__.co_consts
float(element)
x.isoformat()
y.compute()
tt = np.linspace(0, 20, 201)
sys.exit(1)
fout.close()
foo = set(range(0, 4))
__init__.py
[x[0] for x in G]
list(s) == sorted(s)
sum(ord(c) << i * 8 for i, c in enumerate(mystr))
list(roundrobin(l1, l2))
a, b = b, a + b
res = urllib.request.urlopen(req)
ax.add_line(line_1)
spstereo.scatter(x, y)
n11.add(n111)
datetime.timedelta(seconds=seconds)
str(a)
x = x + a + b + c
im.show()
s1.reset_index(inplace=True, drop=True)
self.canvas.update_idletasks()
os.remove(filename)
print(me.toJSON())
loggerCent.setLevel(logging.DEBUG)
new_list = [(a + b) for a, b in zip(a_list, b_list)]
type([])
all(c in gram.lower() for c in string.ascii_lowercase)
module.workflow_set.filter(trigger_roles__in=[self.role.id], allowed=True)
form.rate.queryset = Rate.objects.filter(company_id=the_company.id)
pool = multiprocessing.Pool(4)
sys.exit(1)
cls.recalc_mro()
os.kill(os.getppid(), 0)
{w: counts[w] for w in word_list}
new = map(int, old)
d2 = {k: (v * 0.5) for k, v in list(d.items())}
(A.stack(0) << np.arange(10)).sum(1).unstack()
plt.show()
print({k: (x.get(k, 0) + y.get(k, 0)) for k in set(x) | set(y)})
ax.figure.canvas.draw()
key[:2].upper() + key[2:]
deletelist[index]
cur.execute(query, (b,))
self.button.pack(padx=10, pady=10)
m = re.search(pat, t)
persons = Person.objects.all().order_by(birthday, anniversary)
r.status_code
a.index(4)
dff[[c for c in dff if dff[c].isnull().sum() < 2]]
dropped_copies = [(lambda j: (x[j] for x in copies[j]))(i) for i in range(2)]
print([value for value in x if not math.isnan(value)])
otest.sort(key=lambda x: int(x))
df.tail(5)
print(text[i])
s == len(s) * s[0]
sys.getsizeof(Bar.__dict__)
plt.show()
plt.plot(data.index, data.amount)
[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
fig.subplots_adjust(left=0.25, bottom=0.25)
json.loads(obj)
query = users.select().order_by(-users.c.id.desc()).limit(5)
bucket.configure_lifecycle(lifecycle_config)
x.digits(10, 0, -1, 1)
np.array_equal(a, b)
self.temperatureRaisedSignal.emit()
raise web.notfound()
df.head()
self._task.cancel()
a[:, (idx)]
logger.addHandler(file_handler)
out = [x for x in a if x in b and x in c]
plt.xlim([0, len(data)])
dropped_copies = [make_gen(i) for i in range(2)]
main()
f(**{str(k): v for k, v in list(kwargs.items())})
ax.plot_surface(grid_x, grid_y, grid_z, cmap=plt.cm.Spectral)
reactor.run()
print(files[0])
print(json.dumps(output, indent=4))
main()
req.read()
df.loc[:, (msk)]
[y for x in data for y in x]
logger.setFormatter(logFormatter)
plt.subplot(1, 2, 2)
np.ma.array([[1, 0, 0, 1], [1, 0, 1, 0]], mask=[[0, 0, 0, 1], [1, 1, 0, 1]])
enumerate(list(range(2000, 2005)), 1)
self.transport.write(data)
s.update(list(fus_s.keys()))
browser = webdriver.Firefox()
print(cmp(memoryview(test1), memoryview(test2)))
signal.signal(signal.SIGQUIT, dumpstacks)
output = urllib.request.urlopen(url).read()
[mm_fib(i) for i in range(20)]
fig.canvas.draw_idle()
data.append([w.getparams(), w.readframes(w.getnframes())])
app = flask.Flask(__name__)
request.user.get_myuser().pretty_username()
[i for n, i in enumerate(d) if i not in d[n + 1:]]
new_dict = {k: v for k, v in my_dict.items() if v >= threshold_value}
ax.scatter(a.real, a.imag)
self.previewImage.show()
print(arr_list)
df = pd.DataFrame()
array([1, 2, 4, 5, 6, 7, 8])
regr.fit(chntrain, austrain)
print(response.read())
tk.Tk.__init__(self)
p.start()
container.grid_columnconfigure(0, weight=1)
ax.set_xticks(np.arange(len(df.columns)) + 0.5)
print(df)
df.fillna(1, inplace=1)
list(product())
imshow(gray2, cmap=cm.gray, alpha=0.5)
imshow(gray2b, cmap=cm.gray, alpha=0.5)
db.init_app(app)
app = Bottle()
string1.join(string2)
fileObj.close()
loader.construct_yaml_str(node)
decorator
foo(params[0], params[1])
fileinput.close()
sys.stdin.close()
background_label.place(x=0, y=0, relwidth=1, relheight=1)
layout.addWidget(self.label)
[0, 1, 0, 2, 1, 0]
print((i, os.path.join(dir, file)))
python - -version
plt.figure()
sys.exit(2)
deletesys.modules[name]
a = [a]
worksheetObject.portrait = False
d = dict(t for t in zip(m[::2], m[1::2]))
{c.name}
app.mainloop()
plt.plot(signal)
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
plt.scatter(R, P, s=150, color=c, zorder=2)
l2.append([x[1] for x in zip(pattern, facs) if not x[0]])
print(key[index].reshape(a.shape))
args = parser.parse_args()
myData.dtype.names
socket.close()
MyModel.objects.all().delete()
data = [[([0] * h) for _ in range(w)] for _ in range(d)]
traceback.print_exc()
min(timeit.repeat(lambda : {k: v for d in (x, y) for k, v in list(d.items())}))
mainloop()
deleteself.__dict__[key]
max(max(l_one), max(l_two))
any(child.contains(other_node) for child in self.children)
regressor.fit(X, y)
print(x)
plt.show()
__init__.py
do_your_thing_with(item)
self.close()
thread.start()
im.show()
map(join, zip(s, drop(s, 1)))
newlist += mylist[i:i + 22]
[i for i in userInput if i in wordsTask]
f.close()
print(d[1] + f.split(d)[1])
instance.__init__(cls, *args, **kw)
pd.concat([df, df.shift(-1)], axis=1, keys=[0, 1]).dropna()
admin.site.register(Example, MyAdmin)
list(itertools.product(l1, l2))
x[np.argmin(abs(f2 - f1))]
json_data = json.load(StringIO(json_str))
a = map(float_or_string, mylist)
data = dict((key, request.form.getlist(key)) for key in list(request.form.keys()))
f.close()
fig.show()
[(next(it), next(it1)) for _ in range(10)]
os.makedirs(expanded)
print(key, value)
str(d)
browser.get(googleURL)
self.app.run()
out.close()
help(parrot)
sys.stderr.close()
ax.axis([-1, 10, -1, 10])
ax.transData.transform([(0, 1), (1, 0)]) - ax.transData.transform((0, 0))
zf.close()
setup.py
num2words(10000000000000000000000000)
time.sleep(10)
root.mainloop()
self.__dict__.update(dictionary)
print(Board([1, 2]))
fig, ax = plt.subplots()
pyglet.app.run()
cache.update()
print(instance.Variable)
root = tree.getroot()
print(root.winfo_height())
tree = ET.fromstring(xmlstr)
l.extend(list(range(1, n + 1)))
reactor.run()
print(list(roundrobin(*l)))
np.partition(x, -10)[-10:]
smtp.close()
timestamp.sort(reverse=True)
print(find_eulerian_tour(graph))
df1 = df1.fillna(0)
time.sleep(1)
[list(g) for k, g in groupby(inp, key=lambda i, j=count(): i - next(j))]
plt.show()
reactor.run()
myTreeView.setEditTriggers(QAbstractItemView.NoEditTriggers)
plt.show()
base.rhyme()
do_something_special()
array([1, 1])
workbook.close()
webdriver.ActionChains(driver).move_to_element(el).click(el).perform()
outputfile.close()
[k for k, v in list(mydict.items()) if c[v] > 1]
layout.addWidget(self.connectButton)
str1_list.sort()
selenium_logger.setLevel(logging.WARNING)
plt.hold(True)
a[ainb]
df.isnull().sum().sum()
print(time.time() - start)
offset += datetime.timedelta(days=1)
pygame.draw.circle(screen, (0, 0, 0), (250, 250), 125)
rs = urllib.request.urlopen(req.to_url())
[x[start:end] for start, end in slices if end - start > 1]
td.findAll(text=True)
r = requests.delete(URL_delete, data=json.dumps(mydata))
print(bool([]))
list(intermix([1, 0, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 1, 2]))
sys.stdin.close()
t[0][0]
any(i in array2 for i in array1)
fig, ax = plt.subplots()
traceback.print_exc(file=sys.stdout)
self.openBtn.clicked.connect(self.openClicked)
[x[1] for x in Counter(n).most_common() if x[0] > 1]
y = arr[29].sum()
df[1].plot(ax=axes[0, 1])
listbox.config(width=0)
TestApp().run()
y[(1), :, (2), :]
simplejson.load(f)
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(jar))
pylab.show()
axborder.set_xlim(0, binimg.shape[1] - 1)
any(np.array_equal(b, x) for x in my_list)
ax.set_ylim(-20, 100)
admin.site.register(CMSMediaDocument)
cj = cookielib.LWPCookieJar()
sys.exit(0)
pygame.image.save(Surface, filename)
plt.pause(0.0001)
lst = [x for x, in mysql_rows]
do_something()
self.text.configure(yscrollcommand=self.vsb.set)
sm.OLS(df[ycol], df[xcols]).fit().predict()
response = urllib.request.urlopen(url).read()
time.sleep(0.1)
OrderedDict.__setitem__(self, key, value)
u.save()
any(e[1] == search for e in data)
F(n - 1) + F(n - 2)
[day for day in range(len(day_list)) if day_list[day] == inp][0]
Py_DECREF(arr)
logging.StreamHandler.__init__(self)
unique[maxsort], counts[maxsort]
df_out = pd.DataFrame(out, index=df_index)
list(itertools.dropwhile(lambda x: x == r[-1], reversed(r)))[::-1] + r[-1:]
somelist = [i for j, i in enumerate(somelist) if j not in remove_indices]
writer.close()
self.server.serve_forever()
fig.subplots_adjust(hspace=0.5, wspace=0.001)
plt.show()
cPickle.loads(_)
l.append((floar(row[0]), float(row[1])))
main()
sorted_list == list(range(sorted_list[0], sorted_list[-1] + 1))
y = [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0]
dict(a)
app = Flask(__name__)
d = collections.defaultdict(int)
net.build()
plt.scatter(x, y)
nmf_model.fit(A)
plt.tight_layout()
browser.set_handle_robots(False)
libc.cprogram(wts, res, kks, pointer(n), ex)
print([(a, b, z[a]) for a, b in l])
server.listen(5)
res.append(copy.deepcopy(l))
gb.apply(lambda x: dict(zip(*x))).unstack()
[97, 98, 114, 97, 107, 97]
pylab.show()
f.close()
lst.append(lambda x, z=i: f(x, z))
plt.show()
print(list(chain(*listOfTuples)))
print((x, y))
[ord(b) for b in bytestr]
s.set_xticklabels(group_labels)
{i: str(i) for i in range(5)}
unittest.main()
self.emitter.start()
followers_df.index = list(range(20))
blocklist.append(line)
plt.scatter(t, x, c=y)
root.mainloop()
writer = csv.writer(out_file)
layout.addWidget(self.label)
reversed_arr = arr[::-1]
simplejson.dumps(object())
QObject.__init__(self)
hist = np.histogram(img.flatten(), 256, [0, 256])[0]
self.left.extend(self.right[0:x])
print(list(d))
count.most_common(2)
p1.join()
process = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
sorted(iter(x), key=lambda k: random.random())
glTranslatef(100, 100)
legobj.set_linewidth(2.0)
self.response.set_status(401)
items.append(self.listWidget.item(index))
plt.show()
threading.Thread.__init__(self)
response = requests.get(url, auth=(username, password), verify=False)
signal.signal(signum, sighandler)
df[0][0]
PyMODINIT_FUNC
numpy.where(a != 0, 1, 0).sum()
x.sort()
arr = numpy.array(((2, 2), (2, -2)))
f()
next(x for x in range(10) if x == 11)
print(repr(object))
sorted(list(mydict.items()), key=itemgetter(1, 0))
res.fillna(0)
np.diff(a)
output = defaultdict(lambda : defaultdict(int))
print(bar.__name__)
image.set_from_pixbuf(pixbuf)
self.img.set_from_file(fname)
app.setStyleSheet(stylesheet)
server.NOT_DONE_YET
b = [(sl + [0] * (len(max(a, key=len)) - len(sl))) for sl in a]
[t[i:i + n] for i in range(0, len(t), n)]
json.dump(data, f)
unittest.main(verbosity=2)
df.C.plot(ax=plt.gca())
print(line)
submodule2.py
np.linspace(0, 1, 10, endpoint=False)
size = fields.IntegerRangeField(list(range(1, 50)))
map(ord, os.urandom(10))
logger = logging.getLogger()
do_something_with(name)
x.sort()
urllib.request.install_opener(opener)
pd.read_csv(io.StringIO(t), header=False)
print(list(iterable))
widget.lift()
user.save()
self.fitness = 2 * self.i
plt.gcf().add_subplot(422)
self.render_to_response(self.get_context_data(form=form))
stdin.flush()
ax.bar(x, y, width=10)
form = ContactForm(request.POST)
myscript.py
tornado.ioloop.IOLoop.instance().start()
time.tzset()
float(output_string)
list_2 = [item for item in list_2 if f(item)]
x = pickle.load(f)
x = foo[index]
a = np.arange(729).reshape((9, 9, 9))
browserify()
A[i, j] += C[j, k]
hash.update(line)
par1.set_ylim(0, 4)
sorted(l1)
[day for day in range(len(day_list)) if day_list[day] == inp][0]
stats.weibull_min.fit(data, floc=0)
sorted((k, ordered(v)) for k, v in list(obj.items()))
float(value)
self.matplotlibWidget.canvas.draw()
os._exit(1)
cv2.destroyAllWindows()
sys.exit(1)
msg.attach(part1)
f.tell() == os.fstat(f.fileno()).st_size
[item[0] for item in tl]
p.start()
app.run()
data = np.random.uniform(-1, 1, 44100)
plt.show()
print(value[:min(len(value), size)].ljust(size))
list(remove_reversed_duplicates(a))
self.ui_web_view.installEventFilter(self)
p.join()
time.sleep(0.1)
clf.fit(X, y)
a.setLevel(logging.DEBUG)
deletearray[0]
pd.get_dummies(df.apply(tuple, 1)).groupby(level=0).sum()
app.run()
gtk.main_quit()
self.finish()
main()
{{mydocimage.property.date_added}}
plt.plot(x2, my_curve2)
foo.bar()
a()
all(x > y for x, y in zip(L, L[1:]))
QtGui.QWidget.__init__(self, parent)
percentages.append(temp)
pyplot.show()
l.append(i)
self.mainframe.columnconfigure(0, weight=1)
QtGui.QDialog.__init__(self)
fig.subplots_adjust(wspace=0)
self.socket.bind((server_ip, server_port))
self.common1()
results[i].append(benchmark(i))
h.append({k: d.get(k) for k in get_keys})
sorter[np.searchsorted(b, a, sorter=sorter)]
grid_1.AddMany(wx.StaticText(self.panel, label=str(i)) for i in range(24))
x[row_idx.reshape(-1, 1), col_idx]
sys.stdout.flush()
f(Foo(1))
print(next(zip(*s)))
print(row.column_name)
l.append([x, y])
a = A()
df.loc[all_days]
dates.sort()
self.filelist.append(zinfo)
np.equal(a, tgt).all(1).any()
length = sum(1 for x in clusterList)
ax.set_xticklabels(df.columns, rotation=90, size=15)
d = tf.constant([[1.0, 1.0], [0.0, 1.0]])
self.rect.set_width(self.x1 - self.x0)
lines = [line for line in infile][:N]
bananaxxxxxxxxxgestrawberryxxxxxxxar
df.hist(layout=(1, 2))
df = pd.concat([df.ix[:, :5], x], axis=1)
rconsole.spawn_server()
pycurl_connect.setopt(pycurl.URL, your_url)
cv2.waitKey()
item.setCheckState(QtCore.Qt.Unchecked)
f.seek(0)
ax.set_axis_off()
print(df.loc[:, (mask)])
time.sleep(1)
scored.sort()
d = dict(urlparse.parse_qsl(qs))
print(word)
gtk.main()
sorted(set(chain.from_iterable(iter(content.values()))))
s = ax.scatter(X, Y, c=C)
self.button.clicked.connect(self.createTab)
process.wait()
print((k, v))
tuple([x for sublist in base_lists for x in sublist])
print(widget.GetName())
label.pack()
sum(range(a[0], a[-1] + 1)) - sum(a)
b = [ord(x) for x in s]
driver = webdriver.Chrome()
[group for group in groups if a.isdisjoint(group)]
print(json.dumps([1, a, b]))
a = csc_matrix([[1, 0, 0, 0], [0, 0, 10, 11], [0, 0, 0, 99]])
t = tuple(s)
os.system(cmd)
numpy.linalg.norm(a - b, ord=1)
process.kill()
os.makedirs(directory_name)
[idx for idx, el in enumerate(foo) if np.array_equal(el, arr)]
sys.exit(1)
ax = plt.gca()
dict(c)
p.stdin.flush()
main()
[False] * 20
app = QtGui.QApplication(sys.argv)
time.gmtime(0)
self.Bind(wx.EVT_PAINT, self.on_paint)
thread.start()
x.g(2)
wx.Frame.__init__(self, parent, title=title, size=(200, 100))
m.drawcoastlines()
i += 1
print(objectify.dump(root))
browser.back()
map(lambda x: 0.4 if 7 <= x <= 22 else 0.2, hourOfDay)
json.dumps(object())
zip(A, B + B)
ax.set_xticks(np.arange(25))
sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_KEEPCNT, max_fails)
[id(x) for x in list(dic.values())]
w.readline()
str2_list.sort()
n += 1
fig = plt.figure()
time.sleep(10)
print(a.get())
print(np.percentile(map(int, i), 95))
foo(a, b)
((i, o) for i in l)
p.plot()
result.append(item)
plt.draw()
f(2)
lists.append(pickle.load(infile))
a * b
plt.show()
etree.LXML_VERSION
item.lower()
print(doc.text_content())
pd.concat(dfs, ignore_index=True)
proc.terminate()
b[static_indices[0], static_indices[1], static_indices[2]]
codeErr.close()
r = sum(compress(list_2, list_1))
self[key].add(value)
np.allclose([np.nan], [np.nan])
yy = np.concatenate((y, [0] * 10 * len(y)))
lines.append(line)
writer.writeheader()
positionsList.sort(key=lambda p: howCentric(p, boardLength))
p.terminate()
main()
sorted(zip(unique_rows, counts), key=lambda x: x[1], reverse=True)
fixed.write(line)
log.setLevel(logging.INFO)
cv.SetCaptureProperty(video2, cv.CV_CAP_PROP_FRAME_HEIGHT, 600)
app.exec_()
sys.stdout.buffer.write(TestText2)
server.serve_forever()
sample_df.apply(np.log).diff()
[a, b, c, d]
print(re.findall(pattern, string))
my_method()
print(browser.title)
img = cv2.imread(sys.argv[1])
fig = plt.figure()
r.reset_index()
proc.start()
br.set_handle_equiv(False)
a.foo = new_foo.__get__(a, type(a))
test_file.close()
add_column(engine, table_name, column)
d2 = [k for k, v in sorted(d.items()) for _ in range(v)]
foo()
nums = map(lambda x: x * 2, nums)
divtd(datetime.timedelta(hours=12), 2)
element.click()
root.withdraw()
d[row[0]].append(row[1:])
print(sorted(list(mydict.items()), key=lambda k_v: ordering[k_v[0]]))
settings.name
sum(x[1] for x in divs)
csv2.close()
print(res[1])
my_foo.echo_bar()
f.seek(0, 2)
wx.ListCtrl.__init__(self, *args, **kwargs)
QWidget().setLayout(self.layout())
imobj.set_data(np.zeros((100, 100)))
np.piecewise(a, [a > 80, (40 < a) & (a <= 80), a <= 40], [funcA, funcB, funcC])
Funny.dynprop
self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
yaml.dump(data, ff, allow_unicode=True)
time.sleep(1)
X, Y = np.meshgrid(np.linspace(xmin, xmax, 100), np.linspace(ymin, ymax, 200))
{e: str1.count(e) for e in set(str1)}
time.mktime(ts)
clips.Run()
fig = plt.figure()
print(dom.toprettyxml())
m = m.multiply(m >= 10)
[1, 1, 1, 1, 1, 1, 1, 1],
w.show()
pd.DataFrame.from_records(records_from_json(fh))
mydict = dict((k, v) for k, v in mydict.items() if k != val)
sys.getsizeof(sys.getsizeof)
temp = temp.reshape(-1, 1)
pygame.quit()
id = Column(Integer, primary_key=True)
ax.xaxis.set_label_position(direction)
main()
tuple(zip(*ii))
unittest.main()
print(regex.group(1))
ax2.yaxis.set_major_locator(mtick.LinearLocator(5))
prettyp([1] * 100)
print((x.eval(), y.eval(), tf.gradients(y, [x])[0].eval()))
new_dict = nested_dict(2, float)
l = [(x * (2 if i % 2 == 1 else 1)) for i, x in enumerate(l)]
plt.xlim(xmin, xmax)
QWebView.__init__(self)
frame.Show(True)
df.shape
legend.draggable(state=True)
urllib.request.Request.__init__(self, *args, **kwargs)
burger.save()
wilma.save()
myList[:] = [(a, b) for a, b in myList if myDict.get(a, sentinel) != b]
regex.findall(string)
df = pd.read_sql_query(query.statement, engine)
random.shuffle(tmp)
text = tk.Text()
print(my_list_of_objs)
ax.plot_wireframe(xp, yp, zp)
map(sum, a)
json.dumps(data)
df2.fillna(0, inplace=True)
help(func)
t.start()
plt.show()
print(CreateTable(Model.__table__).compile(engine))
queue = Queue()
Af.reshape(A.shape)
file_handler.setLevel(logging.INFO)
self.setLevel(logging.INFO)
sys.__stdout__.write(s)
df.iloc[:, (np.lexsort(v.T[::-1]))]
[a for v, a in sorted((x[a], a) for a in y)]
df1.reindex(index)
[m.group(1) for m in matches if m]
self.my_list.extend(repeat(0, 4 - len(self.my_list)))
pprint.pprint(l)
plt.figure()
os.setsid()
name = models.CharField(max_length=50)
id = Column(Integer, primary_key=True)
[(i, z) for i in [1, 2] for z in zs_i]
s.quit()
compressed_table.append((istart, i, table[i]))
print(subprocess.list2cmdline(sys.argv[1:]))
ax.clear()
df.groupby(1)
root = Tk()
b = [a, a]
plt.show()
sys.stdout
print(data.splitlines())
sum_yearly_data(*list(data.values()))
axes.set_xlim([xmin, xmax])
dict.get(self, key)
pdb.set_trace()
output.close()
numcount[num] += 1
next(g, default_value)
axm.xaxis.set_visible(False)
print(etree.tostring(root, xml_declaration=True))
tuples = [(1, 1), (0, 1), (1, 0), (0, 0), (2, 1)]
datetime.datetime(*eut.parsedate(text)[:6])
print((1, 2, get_nesting_level()))
layout.addWidget(self.buttons)
year = datetime.date.today().year
signal.signal(signal.SIGINT, on_interrupt)
ax.invert_yaxis()
shm_test()
driver = webdriver.Firefox(firefox_profile=profile)
os.close(fd)
self.builder.get_name(widget)
l.sort(key=int)
myModule.printX()
db.put(models)
[0, 1, 1, 2, 2, 2, 1, 0],
argparse.ArgumentParser.__init__(self, *args, **kwargs)
sorted(list(range(len(K))), key=lambda x: K[x])
X, Y = np.meshgrid(x, y)
tar.close()
df = pd.DataFrame(d)
[subl for subl in _itersplit(l, splitters) if subl]
p.wait()
show_windows()
x[0] + np.arange(0, 60, 10)
do_sth()
x = Bunch(d)
sio.seek(0)
paramdata.index
lst.sort(key=POS.get)
int(p.stdout.read())
mcastsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
[(x * y) for x, y in zip(list(range(1, 21)), cycle(list(range(2, 10))))]
print(repr(tokzr_QA(inp1)))
numpy.full((2, 2), True, dtype=bool)
s.map(Timestamp.date)
data.groupby([a, b]).count()
np.split(b.indices, b.indptr[1:-1])
print(str(item[0:])[1:-1])
show()
np.fromiter(a, dtype=np.float)
numpy.median(numpy.array(lst))
list(d.keys())
any(b == a[i:i + len(b)] for i in range(len(a) - len(b) + 1))
button.clicked.connect(self.make_calluser(name))
lst.sort(key=lambda x: x[0])
plt.tight_layout()
result = json.loads(line)
con.close()
b.append(i + 1)
1 in set([l[0] for l in a_list])
data = cur.fetchone()[0]
[_f for _f in sequence if _f]
pygame.draw.rect(x, y, width, length)
sys.stdout = sys.__stdout__
clf.fit(Xs, ys)
countvec.fit_transform(df.title)
do_stuff()
other_list.append(obj)
min(list(range(len(L))), key=L.__getitem__)
pickle.dump(my_list, f)
writer.writerow([i[0] for i in cursor.description])
print(repr(arr))
result = [convert(i, j) for i, j in enumerate(tlist)]
print(list(map(replace, a)))
x, y
foo()
[dishes[x] for x in crucial if x in dishes]
time.sleep(10)
os.dup2(copied.fileno(), stdout_fd)
response = br.submit()
writer.close()
setattr(self, name, val)
df2 = df[(df.a != -1) | (df.b != -1)]
items = [[1, 2, 0], [1, 2, 0], [1, 2, 0]]
app.run()
print(first.lower() <= second.lower() <= third.lower())
np.unique(struct)
print(cur.fetchone())
unittest.TextTestRunner().run(suite)
admin.site.register(Group, GroupAdmin)
self.dg.Items.Add(self.value)
xl.ActiveWorkbook.ActiveSheet.Columns(1).AutoFilter(1)
p.start()
print(list(value.keys())[0])
axclust.imshow(clustimg)
print(df[c].value_counts())
tags = Tag.objects.all()
anims.append(f)
root.setLevel(logging.DEBUG)
db.close()
fout.close()
axr.yaxis.set_major_locator(yrloc)
dict_x.setdefault(key, []).append(value)
exit(0)
plt.show()
[remove_cruft(s) for s in sites]
context
app = QtWidgets.QApplication(sys.argv)
f.write(value)
b.save()
sess = tf.Session()
data = pd.DataFrame(list(collection.find()))
ret[line.strip()] = parse_message_to_tree_helper(buf, index)
app = Flask(__name__)
matplotlib.pyplot.show()
screen.blit(pygame.transform.scale(pic, (500, 500)), (0, 0))
name = models.CharField(max_length=100)
deleted[key_to_delete]
floor_float(10.8976540981, 8)
numpy.median(d, axis=0)
self.SetSizer(sizer)
self.logentry.append(line)
os.path.dirname(str(sys.executable, encoding))
map(list, iter(c.items()))
df.sub(df2, fill_value=0)
gtk.main()
dosomething()
self.layout = QtGui.QHBoxLayout()
print(df[df.Name.isin(val)].reset_index(drop=True))
func2(**locals())
ax = fig.add_subplot(2, 1, 1)
np.isclose(arr_f, a, atol=0.01).any()
numpy.prod(a)
([next(it) for _ in _range(s)] for s in count(1))
sys.stdout.flush()
1 in [len(set(i)) for i in zip(*arr)]
my_strings.sort(key=last_part)
print([sum(daily[x:x + 7]) for x in range(0, len(daily), 7)])
[x for x in lst if x % 2 == 0][0]
main()
print(args)
MyApp().main(sys.argv[1:])
print(a.sum())
plt.xticks(list(range(len(D))), list(D.keys()))
args = parser.parse_args()
print((key, value))
df[(df.a < df.b) & (df.b < df.c)]
print(random.random())
form = ContactForm(request.POST)
{{django_version}}
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
arr.sum(axis=0)
[s for n in range(12) for s in [square(n)] if s > 50]
f.seek(0, 2)
pygame.init()
print(df.iloc[:, (0)].values.tolist())
output.writelines(data)
m * c[:, (np.newaxis)]
time.sleep(5)
proc.kill()
tuple(totuple(i) for i in a)
sorted([15, 8])
self.grid_columnconfigure(2, weight=1)
frame.Show()
self.assertEqual(cm.exception.code, 1)
img = Image.open(image_path)
app = Flask(__name__)
np.vstack(a) - b
cv2.waitKey(0)
[0][2][0]
print(get_authoritative_nameserver(sys.argv[1], log))
a = np.arange(5)
isinstance(s, string_types)
q = multiprocessing.Queue()
func_to_cache()
f.close()
ax1 = fig.add_subplot(111)
file = models.FileField(upload_to=content_file_name)
np.maximum(X.A, Y.A)
[x for x in l if x is not 0] + [x for x in l if x is 0]
shutil.copy2(os.path.join(dirpath, file), dstdir)
t.date.dt.to_pydatetime()
L.append(L[-1][:] + [L[-1][-1] + 1])
list(itertools.zip_longest(*ll))
plt.hist(val, weights=weight)
con.commit()
nx.draw(G, node_size=1000)
id(a[0:2])
L[:start] + L[start + n:i] + L[start:start + n] + L[i:]
c = MyClass()
id = Column(Integer, primary_key=True)
{0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1}
cv2.waitKey(0)
do_something()
Response(serializer.data, status=status.HTTP_201_CREATED)
lines[-n:]
s.fill((255, 255, 255, 128))
pl.show()
sum(j << i for i, j in enumerate(reversed(l)))
b.T
dfile.close()
s = json.dumps(foo.__dict__)
df.loc[idx]
print(np.cross(a, b))
root.winfo_children()
s = s[::-1]
x[:5]
scipy.misc.imshow(im_out)
list({len(x): x for x in reversed(lst)}.values())
print(a[i, j])
fig = plt.figure(figsize=(15, 10))
python - -version
0, 1, 1, 0, 0, 0, 0, 1, 0
self.frame.destroy()
printx()
show()
item in self.queue
l + [pad] * (n - len(l))
s.close()
next(f)
a = np.arange(27)
os.unlink(file_path)
[2, 0, 1, 0, 1, 0]
signal.signal(signal.SIGINT, handler)
list(chain(*zip(list(range(1, 7)), list(range(-7, 0))[::-1])))
widget.show()
cv.CvtColor(vis0, vis2, cv.CV_GRAY2BGR)
dict.__setitem__(self, keys, value)
obj.save()
columns.setdefault(column, []).append(row)
soup = BeautifulSoup(html_text)
grouped.JobNos.sum().order(ascending=False)
btn.grid(row=0, column=tabslen, sticky=W + E)
b.shape
f.close()
ax.set_yticklabels(df.index)
matches = (x for x in lst if x > 6)
session1.add(item)
color = models.CharField(max_length=2)
setattr(self.obj, self.attr, val)
con.commit()
plt.clf()
not set(a).isdisjoint(b)
inner(myList, [])
tornado.ioloop.IOLoop.instance().start()
isinstance(x, tuple) and isinstance(x.__dict__, collections.abc.Mapping)
b = np.lib.stride_tricks.as_strided(a, (1000, a.size), (0, a.itemsize))
df = pd.DataFrame(rows_list)
s.value_counts().index[2:]
reactor.run()
session.commit()
obj if isinstance(obj, dict) else range(len(obj))
outf.flush()
apsched.start()
bit[::-1]
ax.set_yticks(y_tick * np.pi)
self.mc.Play()
list(filter(pattern.search, strings))
conn.sendmail(sender, destination, msg.as_string())
_.view(data.dtype)
self.handle_request()
[(a + b) for a, b in x]
expander.py
shell.interact()
not bool
ax = fig.add_subplot(111)
MyClass.call_me()
new_d = dict((val, d[val]) for val in reverse_d.values())
func()
numpy.sum(boolarr)
(np.cumsum(np.bincount(v)) - 1)[v]
cls._instances[cls].__init__(*args, **kwargs)
reactor.run()
requests.status_codes._codes[200]
myList[:] = [x for x in myList if myDict.get(x[0], sentinel) != x[1]]
[0, 0, 0, 0, 0, 0, 0, 0],
im.set_clim(vmin, vmax)
final.append(compound[x])
np.linalg.lstsq(A.T.dot(A) + lamb * np.identity(n_col), A.T.dot(y))
Employee.__init__(self, name, salary)
plt.show(block=True)
im = Image.open(imgfile)
s.bind((host, 8080))
list(range(min((a, b)), max((a, b)) + 1))
conn.send(filepath)
arr.dtype.names
print(doCombine(target, x, len(target), 0, 0))
tk.Canvas.__init__(self, *args, **kwargs)
x[np.logical_and(x > -2, x < 2)]
args = parser.parse_args()
sys.exit(0)
plt.show()
[x for x in lst if x % 2 == 0][:1]
a + b == c or a + c == b or b + c == a
admin.site.unregister(User)
a[slice(*b)]
time.ctime()
set([zip(perm[::2], perm[1::2]) for perm in permutations(list(range(9)))])
any(np.array_equal(a, x) for x in my_list)
fig.autofmt_xdate()
np.random.choice(keys, size=n, replace=True, p=prob)
f_out.write(i)
self.panel.SetSizerAndFit(self.sizer)
plt.plot(data)
print([d.__name__ for d in foo.bar._decorators])
[v for v in x if v == v]
sys.exit(app.exec_())
thread.start()
show_firm_url.allow_tags = True
print(list_end_counter([1, 1, 2]))
ax.bar(arange(len(grosses)), grosses)
data = json.loads(json_string)
get_max(dicts)
b = np.array([[5, 6], [7, 8]])
raise ValueError
print(solve([2, 0, 1]))
version.search(s).group()
dir(module)
os.waitpid(-pid)
self.assertTrue(settings.DEBUG)
child.widget().deleteLater()
plt.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=0, hspace=0)
fp.close()
ax.set_xlim(0, len(changes) + 1)
items = list(yourdict.items())
PLT.show()
my_dict[len(data)].append(id)
r = requests.get(url, cookies=cd)
obj = MyClass()
sys.getrecursionlimit()
fig.autofmt_xdate()
b = map(bool, a)
soup.find_all(text=is_comment)
result.append(x)
plt.show()
datetime.datetime.strptime(date_txt, DATE_FORMAT)
fig.show()
format_timedelta(timedelta(minutes=-5))
self.graphicsView.setScene(scene)
datetime.fromtimestamp(0)
test[start:end]
self.socket.listen(1)
plt.plot(x, 2 * x)
browser.get(url)
all(val == testval for val in list(d.values()))
contact_form.save()
acc.setdefault(key, []).append(value)
sbtn.click()
myList.sort(key=extractNum)
df.columns = [c_name.strip() for c_name in df.columns.values.tolist()]
image = Image.open(buffer)
__init__.py
Foo.class_method()
mat[ixs].sum(axis=0)
tuple(map(sum, zip(a, b)))
plt.draw()
pool.join()
idx = numpy.argmin(numpy.abs(A - target))
cursor.execute(sql)
self.assertTrue(users.is_current_user_admin())
print(myString[len(myString) - 1])
self.save()
id = Column(Integer, primary_key=True)
s[len(start):-len(end)]
match.groups()
app.run()
print(repr(b))
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
runserver.py
print(soup)
writer = csv.writer(outfile)
print(line)
plt.setp(list(ax.spines.values()), color=color)
bins = np.array([0, 1, 10, 60, 60 * 10, 60 * 60, 24 * 60 * 60])
turtle.forward(size)
host.close()
self.board[y][x]
sys.path.append(PYSOLR_PATH)
d = dateutil.parser.parse(s)
[False, False, True, False, False],
print(os.path.join(root, name))
s[4]
pd.concat([c.series for c in [France, Germany]], axis=1)
os.remove(os.path.join(root, file))
ax.set(xticks=np.arange(dates.size), xticklabels=datelabels)
dialog.setLayout(some_layout)
ax.set_xlim(0, 5)
time.sleep(1)
img.putdata(data)
fig = plt.figure()
a = numpy.empty_like(b)
ws.cell(row=r, column=1).value = statN
print(soup.li.findAll(text=True, recursive=False))
xl.Application.Quit()
ser.setDTR(False)
sum(b[i] << i * 8 for i in range(4))
np.meshgrid(x, x)
os.unlink(path)
np.subtract.at(dW, np.s_[:, (y)], masked.sum(axis=2))
len(tup)
ax1.set_xlim([0.1, 10])
commands[command](*sys.argv[1:])
s.commit()
plt.hlines([0], -10, 20)
QtDBus.QDBusConnection.sessionBus().send(msg2)
map(lambda a_b: a_b[1] - a_b[0], pairwise(L))
result = dict(result)
sets = [set(i + j) for i in g for j in g if i != j and set(i) & set(j)]
collections.deque.__getitem__(self, index)
draw = ImageDraw.Draw(img)
set(bell).issubset(printset)
frame.columnconfigure(1, weight=1)
self.a[-1]
plt.xticks(rotation=25)
plt.contourf(X, Y, Z)
setattr(object, name, value)
my_dict[item] = a[index + 1]
print(max(len(s) for s in row))
datetime.datetime(2012, 11, 16, 0, 0)
print(output)
random.shuffle(x)
all(map(lambda x: x == items[0], items))
k = np.arange(n)
sys.path.append(SYS_PATH)
main()
sys.maxsize
random.shuffle(thelist)
s.get_text()
backend.setsockopt(zmq.XPUB_VERBOSE, True)
logger.setLevel(logging.ERROR)
logging.shutdown()
np.array(zip(*(A[i:] for i in range(n))))
time.sleep(1)
pd.concat([i for _, i in df.items()]).dropna().reset_index(drop=True)
[_f for _f in map(func, x) if _f]
ax = fig.add_subplot(111)
li2 = [y for x in li for y in x]
root.mainloop()
plt.xlim(0, 4)
br.select_form(nr=0)
cursor = db.cursor()
len(x)
self.verticalLayout.addWidget(self.label)
df = pd.concat([df1, df2])
MY_SORTED_TUPLE = tuple(sorted(MY_TUPLE, key=itemgetter(1)))
root = Tk()
print(g.reset_index(drop=True))
data_dict[regNumber].append(details)
plt.figure()
raise KeyError(request.POST)
__init__.py
print(find_nearest(x))
output.sort()
df.loc[mask.any(axis=1)]
pd.__version__
os.makedirs(dir)
[int(any(full.endswith(last) for last in B)) for full in A]
self.est.predict_proba(X)[:, (1)][:, (numpy.newaxis)]
date = models.DateTimeField(auto_now_add=True, blank=True)
locals().update({col: df[col]})
django.setup()
[item for item in my_iterable if my_filter(item)]
re.findall(p, test_str)
client.send(msg)
str(b)
plt.annotate(labls[i], xy=(x[i, 2], y[i, 2]), rotation=rotn[i, 2])
jsonFile.close()
do_many_amazing_things(a, b)
math.isnan(x)
plt.show()
sys.exit(1)
X, Y = np.mgrid[:bignum, :bignum]
df[col].replace(to_remove, np.nan, inplace=True)
channel.basic_consume(callback_func, queue, no_ack=True)
df.ix[df.index.indexer_between_time(datetime.time(10), datetime.time(14))]
mratings.mean(axis=0)
store.put(key, value, table=True, append=False)
tk.Tk.__init__(self)
plt.yticks(np.arange(y.max() + 1), labels)
outfile.write(file2.read())
do_something()
area1 + area2
type(a[0])
sum(map(len, primes))
main()
[(x % 2 == 0) for x in t_f_list]
a.childNodes[0].nodeValue
[val for val in a for _ in (0, 1)]
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
test[:, (0)]
sys.stdout.write(RED)
template.render()
gevent.killall([obj for obj in gc.get_objects() if isinstance(obj, greenlet)])
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
getdict(x)
list(range(1, 11))
printArray([str(x) for x in row])
self.send_blob(blob_info, save_as=True)
x.sort(key=str.lower)
output.close()
a[:0] = b
os.symlink(linkto, dstname)
im.file.save(img_filename, File(img_temp))
print(repr(t[1]))
p[np.argsort(p)]
int(b[::-1], 2)
root.mainloop()
app.run()
setHatchThickness(1.0)
self.queue.add(item)
[(item + (z[item[0]],)) for item in l]
sess = tf.Session()
time.sleep(5)
y.mean()
datetime.fromtimestamp(time.mktime(time_tuple))
np.sin(2 * np.pi * freq * t)
s.replace(d, regex=True)
sound.play()
df
pprint(dict_to_etree(d))
YourModel.objects.filter(some_datetime__date=some_date)
[item for item, count in Counter(a).items() if count > 1]
ax.scatter(a, b, c, c=[use_colours[x[0]] for x in d], s=50)
suite.addTest(unittest.TestLoader().loadTestsFromModule(module))
ax.set_xlim(xlim)
a.itemset((i, j), x)
df.loc[[(df.iloc[(i), 1:].duplicated().sum() == 0) for i in df.index]]
path = sys.modules[self.__module__].__file__
app.register_blueprint(post_blueprint)
df[k] = df[k].astype(v)
type(json.loads(data))
[k[1] for k in d]
button.grid(row=1, column=4)
str(165).zfill(4)
img = Image.open(stream)
np.linalg.norm(A[1:] - A[:-1], axis=1)
locals().update(d)
fobj.close()
{{page.get_title}}
sum(np.array(a) > 7)
time.sleep(4)
Py_Finalize()
Table.query.filter(Table.name == con.name).first()
array2[:] = [e for e in array2 if e not in set1]
lucky.append(L[0])
r = np.exp(np.sqrt(x * x + y * y))
[1, 2] in a.tolist()
self.mainloop()
args = parser.parse_args()
args = parser.parse_args()
ax.plot([1, 1, 1])
str(self.as_date())
print(len(list(group)), key)
int(True)
table.sort(functools.cmp_to_key(team_cmp))
G.add_edge(prereq, target)
driver = webdriver.PhantomJS(desired_capabilities=dcap)
obj.save()
con.close()
QtGui.QWidget.__init__(self, parent)
df.loc[:, ((df != df.ix[0]).any())]
iter(self._data)
cv2.waitKey(0)
my_list = [False for i in range(n)]
[s for s in perms if valid(s)]
main()
canvas.pack()
plt.show()
plt.subplot(154)
numpy.random.seed(x)
fig = plt.figure()
painter.rotate(90)
plt.ion()
fh.close()
values[i] = struct.unpack(endian, f.read(bytes))[0]
os.chdir(whatever)
f.close()
pass
df = df.sample(frac=1).reset_index(drop=True)
driver = webdriver.Firefox(firefox_binary=binary)
time.sleep(0.1)
[s.index(x) for x in lst]
sys.getrefcount(object)
plt.show()
bar = foo.copy()
print(line)
module.run_pool()
sum(A, [])
ast[([0, 1, 2]), ([0, 1, 0]), ([0, 2, 2]), (0), :2, :2]
same_structure(a[0], b[0]) and same_structure(a[1:], b[1:])
a * x ** 2 + b + c * np.sin(x)
indices = np.split(sidx, np.flatnonzero(np.diff(arr[sidx]) > 0) + 1)
list(s)
dict((k, dol1.get(k, no) + dol2.get(k, no)) for k in keys)
M.A.diagonal(2)
Py_Finalize()
time.sleep(0.5)
A[:, (1)].sum()
wx.StaticBitmap(panel, -1, jpg, (10, pos), (jpg.GetWidth(), jpg.GetHeight()))
map(complex, row)
[(item, the_list.count(item)) for item in sorted(set(the_list))]
s.splitlines()
master.grid_rowconfigure(1, weight=1)
[(x + 1) for x in l]
zip(a[::2], a[1::2])
[val for sublist in mylist for val in sublist]
df.set_index(df.merged_ix, inplace=True)
a[np.ix_(*[list(range(0, i, 2)) for i in a.shape])]
fig = plt.figure()
time.sleep(0.1)
ax.plot(x, y)
y.shape
sorted(listofLines, key=extract_time)
np.random.uniform(-10, 10)
deletemydict[k]
store.close()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
deleterecursive_dict[key]
X.T
fp.seek(0)
lines.sort(key=second_column)
print(ame_to_bre(text))
b = [i for i in a]
func(*args, **kwargs)
imresize(np.ones((1000, 1000)), 50).shape
wx.Frame.__init__(self, parent, id, title, size=(600, 600))
root.mainloop()
any([(sorted(sub) in range(min(l), max(l) + 1)) for sub in subs])
ldap.set_option(ldap.OPT_DEBUG_LEVEL, 0)
k, _, _, _ = np.linalg.lstsq(M, y)
dta.co2.interpolate(inplace=True)
a[i:j]
connlisten_thread.start()
print(foo.bar())
self.yet = True
A[np.arange(m), idx]
print(line.strip())
np.dot(X, np.dot(M, X.T)).trace()
ax.set_xlim([x[0], x[1]])
(220922000, 2428),
(220922001, 2429),
(220922564, 2992),
(220922566, 2994),
(220924161, 4589),
lines = ax.plot(list(range(10)), np.random.randn(10), list(range(10)), np.random.randn(10))
print(is_shifted_copy([1, 1, 1], [1, 1, 1]))
HttpResponse(status=400)
text.pack()
df = pd.concat(series, axis=1)
pipeline.fit(X[:, (np.newaxis)], y)
time.sleep(0.05)
y = np.array([0, 0, 1, 1])
plt.plot(x, y)
a.repeat(2, axis=1)
True
b = tuple(a)
obj.save()
sess.query(Tag.name).distinct()
im.save(sys.argv[2])
bool([1, 2])
plt.plot(x, y)
self.Bind(wx.EVT_MOTION, self.on_motion)
pub_dict[p.key].append(p)
print(data)
[j for j in range(2, n) if isprime(n)]
c = itertools.chain(a, b)
df1.plot(ax=axes[0, 0])
tar.close()
dict(re.findall(pattern, json_string))
df.ix[df.Col1.isin(search_list)]
self.app = app.app.test_client()
lock = threading.Lock()
ax2.get_yaxis().set_animated(True)
[cube(i) for i in range(1, 11)]
ax1.yaxis.set_major_locator(y1loc)
func(a)
img.save(filename=output_destination)
prettyp(CrazyClass())
myfunc(a, b, c, d, e, f)
next((x for x in seq if predicate(x)))
ftp.cwd(path)
self.multlineCommands = Forward()
fig = plt.figure()
execlist[i][4] = mydelay
x, y = zip(*points)
x.append([])
Z[xidx, yidx] = raw[:, (2)]
temp = temp[1:]
self.model.objects.filter(active=True)
df.iloc[2:6]
print(map(itemgetter(1), g))
print((r.status_code, r.reason))
chain.from_iterable(combinations(xs, n) for n in range(len(xs) + 1))
np.diagonal(np.rollaxis(np.tensordot(a, a, (1, 1)), 1), 0, 2).T
Gtk.main()
f.close()
dict(d1, **d2)
signal.pause()
[(k, len(list(g))) for k, g in groupby(s)]
serverSocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
Counter(item for lst in listOfLists for item in set(lst))
self.canvas.after(50, self.check_queue)
str(numpy.array([0.24])[0])
self.assertEqual(resp.status_code, 200)
[0][1][2]
print(recursive_lambda(lambda a, b: b * a(a, b - 1) if b > 0 else 1)(6))
list(set(a) & set(b))
cursor.execute(query)
root.mainloop()
sys.getsizeof(b)
data.append(item)
np.moveaxis(np.indices(dims), 0, -1)
a = dict.fromkeys(list(range(4000000)))
ax1 = fig.add_subplot(111)
b = [6, 7, 8, 9, 0]
soup = BeautifulSoup(browser.page_source)
m.close()
self.httpd.stop()
{x for x in a if x == x}
dictionary = dict(zip(keys, values))
process.stdout.close()
list(itertools.chain.from_iterable([l[x] for x in lslice]))
sys.stdout.write(s)
print(json.dumps(foo))
os.startfile(filename)
QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEditable
cv2.waitKey(0)
cv2.destroyAllWindows()
(x + 1 for x in l)
numpy.ndarray((5, 5))
user = models.OneToOneField(User)
pyglet.app.run()
self._stack.pop()
time.sleep(1)
b.py
webtail
list(range(m, (count + 1) * m, m))
main()
func(x)
print(sys.exc_info()[2].tb_next.tb_frame.f_locals)
datetime(2015, 12, 2, 0, 0), datetime.datetime(2015, 12, 8, 0, 0)
f.write(text)
d.update(locals())
Notify.uninit()
celery.config_from_object(app.config)
len(a)
a.append(row)
print(df.attr.iloc[i])
data = np.random.random((int(1000.0), int(100000.0)))
any((a[:] == [1, 2]).all(1))
np.vstack((a, a, a))
doctest.testmod()
plt.setp(plt.xticks()[1], rotation=90)
cursor.execute(qSQL)
print(json.dumps(data, default=date_handler))
frame1.axes.get_yaxis().set_ticks([])
arr.append(list(df.iloc[i]))
threading.Thread.__init__(self)
[map(counter.__getitem__, all_features) for counter in counters]
file.close()
~pd.isnull(df[list_of_cols])
2 * frexp(n)[0]
gdata.gauth.AeLoad(users.get_current_user().user_id())
G = nx.MultiGraph()
df.stack()
sock.close()
np.vstack([np.diag(c[:, (i), (i)]) for i in range(A.shape[0])]).T
f = open(filename)
qs.filter(user=request.user)
screen.mainloop()
QtCore.Qt.ItemIsEnabled
MyApp().run()
result[numpy.argsort(A)] = numpy.sort(B)
time.sleep(10)
print(getpass.getuser())
print(queue.method.message_count)
item.set_fontsize(20)
cal_window.show_all()
test_moduleA.py
mpl.ticker.MaxNLocator.__init__(self, nbins=9, steps=[1, 2, 5, 10])
main()
dict((k, json.dumps(v)) for k, v in list(json.loads(val).items()))
signal.signal(signal.SIGALRM, old_handler)
(m.T * c).T
df.iloc[idx]
new_list = list(range(1, 6)) + list(range(15, 20))
app.MainLoop()
fig = plt.figure()
os.chdir(storetodir)
axborder.set_ylim(binimg.shape[0], -1)
print(codeproc.stdout.read())
image = Image.open(f)
dset1.apply(func, axis=1)
layout.addWidget(self.label)
repeat(lambda : bar(42))
connection.commit()
elapsed2s.append(elapsed2)
elapsed1s.append(elapsed1)
d[key].append(row[1:])
subsampled = df.ix[(choice(x) for x in grouped.groups.values())]
p.map(process_file, listdir(inputDir))
locale.resetlocale()
b.foo()
python - mfoo.bar
thread.start()
img.size
User.insert_many(row_dicts).execute()
df.Group.map(df.Group.value_counts())
plt.draw()
pdf_text_object.textOut(text)
imp.load_dynamic(__name__, __file__)
form.save()
main()
df = df.sort()
mock.assert_called_with(42)
fig.subplots_adjust(wspace=0.4)
print(df[(df.Symbol1 == df.Symbol2) & (df.BB == df.CC)])
wx.StaticBitmap(panel, -1, bmp, (10, pos), (bmp.GetWidth(), bmp.GetHeight()))
other_app.other_view(request, **kwargs)
print(map(float_or_str, line.split()))
myArray = np.vstack(myArray)
process_data(line)
moduleZ.py
plt.plot(X, Y, lw=0)
do_some_other_stuff()
legline.set_color(color)
df_out
json.dumps(result, default=json_util.default)
fig, ax = plt.subplots()
self.__class__(data)
t.start()
f(*args, **kwargs)
print(tag.nextSibling.nextSibling.__class__)
[(a if C else b) for i in items]
uniq_animal_groups = map(list, set(map(tuple, animal_groups)))
fig, ax = plt.subplots()
x + 1
root.withdraw()
pool = multiprocessing.Pool(multiprocessing.cpu_count())
r = requests.get(URL, cookies=jar)
foo()
conn.close()
greetings.hello()
numpy.zeros((2, 2), dtype=bool)
r.findall(s)
output, err = p.communicate()
a = a.reshape(-1)
d += timedelta(days=6 - d.weekday())
print(yaml.load(f))
jsonify(result=wordlist)
print([filters.get(word) for word in sentence.split() if word in filters])
proc.terminate()
[[2], [0], [1], [0], [1], [0]]
np.dot(Zij, G)
tuple(x[0] for x in G)
print(t.timeit(5))
fig, ax = plt.subplots()
ax2.set_xticks([100, 80, 50])
df
a.remove(i)
hex((val + (1 << nbits)) % (1 << nbits))
pyglet.app.run()
distinct()
result = response.read()
hashlib.md5(img.tostring()).hexdigest()
button.pack()
MyClass in MyClass.__mro__
self.listTools.add(self.addButton)
a.append((1, 2, 4))
xml.close()
sorted([B, C, A, D, X], key=lambda cls: len(cls.mro()))
hash(self.PersonID)
str_list = [item for item in str_list if item]
next(hex_list)
OrderedDict(sorted(list(d.items()), key=lambda t: t[1]))
X[:, (i)] = x
platform.system()
print(newcorpus.sents())
len(set(it_copy)) == 1
a.flatten()
random.shuffle(array)
pprint(data)
assert len(A) == len(B)
uniq_animal_groups = map(list, set(map(tuple, map(set, animal_groups))))
all(x == 0 for x in list(d.values()))
b.setdefault(j, []).append(i)
os.remove(os.path.join(my_dir, fname))
self.name = name
form.save()
B[A[1], cat_index] = A[2]
shutil.rmtree(tmpdir)
f.flush()
seq[n:] + seq[:n]
df
logger.addHandler(fileHandler)
b = np.array([0] * 4)
result = [sum(data) for data in zip(*args)]
fig = plt.figure()
new_list.append(x)
unique_a.view(a.dtype).reshape((unique_a.shape[0], a.shape[1]))
plt.gcf().tight_layout()
assert np.allclose(result, expected)
Thread.__init__(self)
arity.__class__.arity = arity
numpy.histogram(my_values, bins=numpy.r_[-numpy.inf, my_bins, numpy.inf])
p.start()
df.clip(upper=4400).plot.hist(stacked=True, bins=bins, normed=True)
df = pd.DataFrame([[1, 0, 0, 0], [0, 0, 1, 0]])
self._server.shutdown()
ax.set_autoscale_on(False)
traceback.print_exc()
help(hehe)
arr[([1, 1]), :]
[x for x in mylist if not any(c.isdigit() for c in x)]
traceback.print_exc()
self._list[x]
b[i] = 1
itertools.islice(mygenerator(), 10)
l = json.loads(s)
a, b = 1, 2
fig = plt.figure()
func()
Py_Finalize()
dialog.setAttribute(QtCore.Qt.WA_DeleteOnClose)
stack[-1].append([])
mask1 = (arange(10) > 5) & (arange(10) <= 8)
self.sock.connect((host, port))
list(map(chr, list(range(ord(s[0]), ord(s[-1]) + 1))))
a.reshape((2, 2, 2))
logger = logging.getLogger(__name__)
a, result = a[:-1], a[-1]
top.sort(key=lambda a: a[1])
b = tuple(b)
tf.contrib.layers.embedding_column(workclass, dimension=8)
GEN_SUSPENDED
x.view((float, len(x.dtype.names)))
setattr(self, k, d[k])
result.append(list[-1])
output.append(float(row[4]))
words = [x for x in words if x not in bad_words]
list(set([x for x in l if l.count(x) > 1]))
[[6, 2], [7, 5], [8, 7], [9, 9], [0, 4]]
print(x)
do_something_dangerous()
fig.autofmt_xdate()
AB = [(a + b) for a, b in itertools.zip_longest(A, B, fillvalue=0)]
unittest.main()
sys.exit(1)
ax2 = ax.twinx()
foo()
any(some_func(x) for x in some_list if x > 5)
r.json()
time.sleep(1)
from_date = from_date - datetime.timedelta(days=1)
df.dtypes
out.close()
some_value
uuid.uuid1(random.randint(0, 281474976710655))
unittest.main(failfast=True)
nonzero(r_[1, diff(t)[:-1]])
bar.foobar()
print(textelem.text)
x = json.loads(x)
np.vstack([topbottom, xvalues])[:, (mask)].T
ax.xaxis.set_major_formatter(major_formatter)
fig = plt.figure()
s.add(get_my_new_random_number())
self.label.pack()
ispower(1, 1)
print(json.JSONEncoder().encode(response))
df.loc[:, (df.dtypes == object)]
random.shuffle(ans)
args = parser.parse_args()
norm.cdf(1.96)
self.fileobj.seek(-8, 1)
Base.metadata.create_all(engine)
views.py
foo.f()
element.clear()
[1426802400, 1429218000]
cursor.commit()
self.scrollbar.grid(column=2, sticky=N + S)
ax2.set_ylim([np.amin(image[:, (5), (5)]), np.amax(image[:, (5), (5)])])
print(p.stderr.read())
plt.show()
QtCore.QAbstractListModel.__init__(self)
canvas.configure(yscrollcommand=vsb.set)
soup.prettify()
print(Foo.instance_count)
zip(*lol)
ax.yaxis.set_visible(False)
tableWidget.show()
json_data.close()
bool(urlparse.urlparse(url).netloc)
hash(obj)
print(request.headers)
subList = [tempList[n:n + N] for n in range(0, len(theList), N)]
feeder_lock_object.lock()
f.columnconfigure(0, weight=1)
parser.parse(string)
ax.clear()
seen_add(element)
a[b]
self.window.show()
batch.execute(http=http)
soup = BeautifulSoup(html)
do_the_stuff(my_list)
zip(*r)
plt.subplots_adjust(top=0.55)
df.stack().loc[first:last].min()
run(reloader=True)
str(self.__dict__)
cursor.execute(CQLString)
x.pop()
np.testing.assert_almost_equal((x, x, x), (y, y, y), 5)
bar()
c.save()
fnan == fnan
zip(words[1:], words[:-1])
outsock.close()
sorted(list(range(len(a))), key=a.__getitem__)
PLT.show()
sns.regplot(x, y, lowess=True)
a[a < 0] = 0
cmp(x[1], y[1])
main()
event.SetEventObject(self)
option.click()
datetime.datetime(year=year, month=month, day=day, hour=hour)
[(i + j) for i, j in zip(list_of_urls, string.lowercase[:14])]
contents = fh.read()
print(db_data.count(with_limit_and_skip=True))
outputStream.close()
plt.show()
np.arange(lllon, urlon, 2.0),
print(a, b, c)
self.widget.click.connect(self.onWidgetClick)
xlim(0, 0.8)
print(A[0], B[0])
print(2 * math.acos(0))
max(a, key=itemgetter(1))[0]
out.close()
np.sum(np.linalg.solve(L, xdiff.T) ** 2, axis=0)
globals()[name] = value
syncdict.update([(key, syncdict.get(key) + inc)])
ax2.imshow(template, cmap=plt.cm.gray)
print(list1[-5:])
sys.exit(app.exec_())
gc.get_objects()
ASTVisitor.__init__(self)
logger = logging.getLogger(COMPANY_LOGGER)
m[:, :, ::-1]
server.terminate()
C.__init__(self)
[(y1 - x1, y2 - x2) for (x1, x2), (y1, y2) in combinations(myList, 2)]
ax = fig.add_subplot(1, 1, 1)
(b - a).total_seconds()
writer.writerow(row)
int(round(170, -2))
self.view.header().resizeSection(column, width)
test()
tdelta.total_seconds()
root.mainloop()
self.assertAlmostEqual(em(1, 2), 0.1481, 4)
print(len(request.headers))
[(x * next(cyc)) for x in lis[0]]
i = int(float(s))
ax.xaxis.set_major_formatter(mpl.ticker.FuncFormatter(myFormatter))
pprint(od, width=40)
args = parser.parse_args()
HttpResponse(status=204)
mylib.mySub.argtypes = [POINTER(c_double), c_int, POINTER(c_double)]
ax.yaxis.set_major_formatter(y_formatter)
user = User.objects.get(pk=uid)
even = list(next(iter(())) if n == 412 else n for n in numbers if 0 == n % 2)
ttk.Radiobutton(self.mainframe, value=0).grid(column=1, row=2)
pass
print(ArrayAddition([2, 95, 96, 97, 98, 99, 100]))
map(func, *sequences)
print(float(x))
[ips_data[ip] for ip in sorted_ips]
plt.show()
reactor.run()
self.assertEqual(expected, self.nums.marshal())
self.fcall(*args)
signal.signal(signal.SIGTERM, sigterm_handler)
admin.site.register(LocationGroup)
container.grid_columnconfigure(0, weight=1)
numpy.fromiter((your_func(row) for row in X), dtype=bool, count=len(X))
time.sleep(1)
zip(*data)
self.frame.pack()
f.close()
name = CharField()
f.read()
plt.ylim(-1, 2)
[str[i:i + chunk_size] for i in range(0, len(str), chunk_size)]
l[t[0]][t[1]] = something
sorted(li, key=lambda x: x.anniversary_score)
sys.exit(-1)
np.roots([a, b, c])
main()
title = models.CharField()
plt.show()
MyInterpreter().cmdloop()
x = np.linspace(0, 2 * np.pi)
np.issubdtype(np.complex64, np.integer)
sizer.Add(widget, proportion=0, style=wx.ALL, border=5)
csv_out.close()
self.fp.flush()
print([v for v in values if len(v[1]) > 1])
str1_list == str2_list
int(s)
pprint(list(iter_rows(ws)))
ax.plot(data1)
tunnel.start()
plt.plot(x, y)
xbook.close()
pd.Series(test).where(lambda x: x != 1).dropna()
f(*args)
process.poll()
lines = [line for line in f if line.strip()]
info[2][1] == 6
Text.__init__(self, *args, **kwargs)
s.reset_index()
df.reindex(all_days)
get_value(dic, 0)
mdd, start, end
fig.canvas.draw()
[a, b, c]
subprocess.call([path_to_notepad, path_to_file])
data = [(x if x.isalpha() else float(x)) for x in line.split()]
np.array([0, 1]).any()
data = self.request.recv(1024)
file = os.path.join(os.getcwd(), os.listdir(os.getcwd())[0])
plot(x, y)
dict([(elem, 0) for elem in s])
out[1:, :] += tmp[:-1, :]
ax.xaxis.set_major_locator(ticker.MultipleLocator(20))
ssh.load_system_host_keys()
keys = [k for k, v in Arr]
plt.show()
requests.get(url, stream=True)
aw2.show()
do_something(i)
out = []
q.put(urllib.request.urlopen(url).read())
print(type(parsed))
A = alpha * x * y + beta * x ** 2 + gamma * y ** 2
foo(**{key: 1, foo: 2})
json.dumps(datetime.datetime.now(), default=date_handler)
found = m.group(1)
print(response.read())
os.close(fh1)
a.reshape((-1, 5))[:, 1:4] = 100
vfunc(*np.ix_(xv, yv, zv))
email = forms.EmailField(required=True)
fib(n - 1) + fib(n - 2)
p.wait()
[push(D, k, K) for K, D in list(c.items())]
signal.signal(signal.SIGINT, signal_handler)
mask = numpy.random.choice([False, True], len(data_arr), p=[0.75, 0.25])
list(ordered_dict.values())[2]
words[0] == words[-1] == check_str
plt.ylim([0, 5])
winfile.close()
df.A.append(df.B).dropna().reset_index(drop=True)
time.sleep(2)
print([arr[i][i][i] for i in range(len(arr))])
urllib.request.urlopen(r)
print(my_queryset.query)
self.mfcChanged.emit()
deletemydict[key]
logger = get_task_logger(__name__)
a[(0, 2), :, :]
self.rect.left += self.xvel
pipe.wait()
[k for k, v in groupby(sorted(a))]
a + _(b * c)
c = [(x + [y]) for x, y in zip(a, b)]
data = numpy.fromfile(my_file, dtype=numpy.uint8).reshape(-1, N)
print([name for name in dir(B) if isbuiltin(getattr(B, name))])
sample_object.save()
print(tree.getpath(e))
os.makedirs(dest_dir)
time.sleep(5)
list(range(*args))
r, g, b = wfloat.transpose((2, 0, 1))
d = {k: v for dct in l for k, v in list(dct.items())}
f.write(urllib.request.urlopen(url).read())
numpy.random.randint(0, 1000, count) * 0.001
s.sort()
ax.plot(x, y * 2)
zip_longest(fillvalue=fillvalue, *args)
[0, 1, 1, 1, 1, 1, 1, 0],
l = [cond(i) for i in range(1, n)]
base64.urlsafe_b64encode(encoded_string)
ax.plot(x, y)
c.execute(query)
print(lxml.etree.tostring(the_doc, pretty_print=True))
screen.blit(surf2, (200, 200, 100, 100))
plt.figure(figsize=(7, 7))
sizer.Add(fsizer, 0, wx.EXPAND)
tf.matmul(tf.transpose(x), y)
logging.info(line)
main()
tree.add(2)
plt.show()
avg_sum.append(A.sum(axis=1).mean())
(self.players1.all() | self.players2.all()).distinct()
result = process.communicate()[0]
pass
signal.signal(signal.SIGINT, signal_handler)
Gtk.main()
options = webdriver.ChromeOptions()
[i for i in a if i != [0]]
[solution for solution in solve(4)]
time.sleep(0.5)
image.astype(np.uint8)
map(lambda d: abs(d - date), dates)
sys.setrecursionlimit(100000)
cols.append(str(col))
s.cookies.clear()
dates_dict[key].append(date)
np.maximum.accumulate(Q, axis=1)
self.own_id = current_socket.getsockname()[1]
ax.yaxis.set_major_locator(ticker.MultipleLocator(20))
ax.plot(x, y)
random.shuffle(l)
stream = sys.argv[1] if len(sys.argv) > 1 else sys.stdin
obj.save()
wx.Panel.__init__(self, parent)
x = int(x)
i += 1
plt.show()
plt.setp(ax2.get_yticklabels(), visible=False)
json.dump(my_dict, f)
a.split()
sum(map(my_condition, l))
ax.add_patch(patch)
df.loc[(df[0] == k[0]) & (df[1] == k[1])] = [[v[0], v[1]]]
deletex[k]
indices = zip(*sp_matrix.nonzero())
X[np.ix_(idx, idx)]
mail.starttls()
[z0] * len(seconds)
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
p.start()
x = numpy.arange(data.shape[1])
out.value_counts(sort=False).plot.bar()
test.pop(5)
add(*l)
plt.show()
writer.writerows(clean_list)
a = fig.add_subplot(1, 2, 1)
[0, 0, 0, 0, 1, 0, 0, 0],
signal.signal(signal.SIGALRM, _handle_timeout)
array.sort(key=lambda k: (k[0] - point[0]) ** 2 + (k[1] - point[1]) ** 2)
os.open(os.devnull, os.O_RDWR)
self.setCentralWidget(self.view)
conn.rollback()
y = numpy.arange(data.shape[0])
print(dict(d))
[i for i, (a1, a2) in enumerate(zip(s1, s2)) if a1 != a2]
f_new.close()
df.as_matrix(columns=[df[1:]])
self.axes.set_title(title)
num_words += len(line.split())
image = np.zeros((max_x, max_y))
index = np.array([0, 1, 2])
new.append(l[i:i + 5])
main(sys.argv[1])
ax1.plot(list(range(0, 10)))
print(r.content)
df.to_excel(writer, index=False)
line = line.strip()
heapq.heappush(heap, (-prod2, x, y - 1))
plt.setp(g.ax_heatmap.get_xticklabels(), rotation=90)
ttypager(text)
self.add_widget(Label(text=str(data)))
type(c)(a)
A.f.__func__(b)
sys.path.append(somepath)
buffer += ser.read(ser.inWaiting())
p = np.poly1d(np.polyfit(t, data, 2))
l.extend(t)
fig = plt.figure()
soup = BeautifulSoup.BeautifulSoup(data)
new_list.append([some_tuple])
pir(df)
self.figure.canvas.draw()
ax.imshow(X, cmap=cm.jet)
f.write(image_response.read())
ax.set_xlim(-1, 7)
df.merge(melted_items, left_index=True, right_index=True)
[x for x in data if func(x)]
recur(n - 1, count + 1)
self.response.write(name)
document.append(line)
[x for x in range(len(self.states)) if self.states[x]]
plt.show()
series.hist(bins=division)
driver = webdriver.Chrome()
plt.plot(list(range(10)))
not any(d.values())
plt.show()
dict((x, duplicates(List, x)) for x in set(List) if List.count(x) > 1)
print(r[i:i + n])
print(new_dic)
self.assertAlmostEqual(em(1, 1), 0.6407, 4)
a.sort(key=key, reverse=True)
pass
print(year_fraction(datetime.datetime.today()))
print(counter.most_common())
numpy.nextafter(1, 0)
element.clear()
df.ix[yesterday.strftime(fmt):now.strftime(fmt)]
fig.canvas.draw()
print((f.__name__, f.__hash__))
plt.setp(ax2, xticks=[], yticks=[])
win.set_keep_above(False)
child.interact()
plt.xlim([0, 1])
ax1.set_color_cycle([colormap(i) for i in np.linspace(0, 1, number_of_plots)])
a.remove(10)
pass
fig.autofmt_xdate()
df.join(pd.concat([pd.DataFrame(s).T] * len(df), ignore_index=True))
0, 1, 0, 1
signal.alarm(0)
urllib.request.install_opener(opener)
(a1[:, (numpy.newaxis)] == a2).all(axis=2)
OrderedDict(sorted(list(d.items()), key=lambda t: t[0]))
collections.Counter(lst)
ax.fill_between(np.arange(1, 10), 1, 2, zorder=-1, **kwargs)
id = Column(Integer, primary_key=True)
frame.Show()
df.columns = zip(*col_names)[1]
print(url_without_query_string)
img.putdata(my_list)
urllib.request.install_opener(opener)
self.canvas = tk.Canvas(self, width=100, height=100)
data = json.loads(json_input)
reactor.run()
B = np.array([2, 4, 6, 8])
[x for x in l1 if not any(fnmatch(x, p) for p in l2)]
f.close()
self.video_out.release()
uniq_animal_groups = set(map(tuple, animal_groups))
fig, ax = plt.subplots(2, 1)
outfile.close()
db.session.commit()
conset = set(map(frozenset, consarray))
a[::-1]
print(message.get_payload())
astar(formation, heuristic, solution, getneighbors)
zip_longest(fillvalue=fillvalue, *args)
sum(masked, axis=1)
a.tolist()
set(df.Col1) | set(df.Col2)
data = [str(float(fractions.Fraction(x))) for x in data]
self.driver.close()
[1][2][2]
admin.site.register(FooProxy, FooAdmin2)
(datetime.datetime.min + value).time()
jsonpath.jsonpath(data, path)
new_dict = dict(list)
a = np.arange(100)
time.sleep(0.1)
reader = io.open(sys.stdin.fileno())
PLT.show()
np.random.seed(0)
series[10] = np.nan
matplotlib.pyplot.close()
np.nanargmax(a, axis=1)
file = zipfile.ZipFile(BytesIO(request.content))
msglist = list(chunkify(hextotal, 4096))
ax.xaxis.set_minor_locator(MultipleLocator(0.2))
django.setup()
shutil.copyfileobj(infile, outfile)
celery.start()
x.reshape(x.shape[0], -1).shape
Response(UserSerializer(request.user).data)
[Factorial(x) for x in it]
f()
np.roll(a, -2)
fp.close()
gca().get_xaxis().get_major_formatter().set_useOffset(False)
myfunc()
res.cumsum().applymap(lambda x: np.unique(list(x)))
plt.show()
p.start()
pd.DataFrame(v[i0:i1], df.loc[df.name].index[i0:i1], df.columns)
new_string
connection.disconnect()
type(a).__call__(a)
f.write(chunk)
b.sort(key=order.get)
self.setWindowFlags(Qt.FramelessWindowHint)
print(f.read())
ax.plot_surface(x, y, 10, rstride=5, cstride=5, facecolors=img)
im = img.load()
self.__class__.__name__
print(df.reset_index())
[1, 2]
[list(g) for k, g in groupby(a)]
self.start.connect(self.run)
plt.bar(J2 - 0.5 * width, z(J2), width=width)
csv_fileh.seek(0)
User.objects.get(pk=user_id)
ee.save()
max(n for n in a if n < 0.7)
{{raw | unquote_raw}}
inspect.getargvalues(traceback.tb_frame)
dict.__delitem__(self, key)
p.start()
a if b else c
instance.save()
df
l = np.array([[0, 0], [0, 1], [1, 1]])
[1][2][1]
r = requests.post(url, files=files, data=values)
pprint({key: getattr(f, key) for key in dir(f)})
self.fig = mplfig.Figure(figsize=(5, 4), dpi=100)
frec(word)
keys = set()
ax.bar(list(range(len(dates))), values, width=width)
module1.f()
s.run()
app = QtGui.QApplication(sys.argv)
nums.sort(key=functools.cmp_to_key(lambda x, y: cmp(y + x, x + y)))
plt.legend(handles=legend_patches)
ssh_client = paramiko.SSHClient()
print({i: f.lower() for i in nums for f in fruit})
request.finish()
print(cursor.fetchall())
df.reindex(ind - ind2).join(df2.reindex(ind - ind2))
inithello()
base64.b64decode(a)
ax.scatter(x, y)
np.shape(result)
reader = csv.reader(f)
plt.show()
df.index.get_level_values(0)
p.plot(x, y)
fig, axes = plt.subplots((2, 2))
time.sleep(0.1)
plt.pcolormesh(X[0:1], Y[0:1], C[0:1])
newList = [word for word, mask in zip(s, b) if mask]
mask[y:y + h, x:x + w] = img[y:y + h, x:x + w]
zip(*([iter(l)] * 2))
server.sendmail(FROMADDR, TOADDRS, msg)
out.close()
db.put(1)
df.loc[i] = [float(d) for d in data]
len([i for i in x if 60 < i < 70])
(df == 0).astype(int).sum(axis=1)
b = a[m]
board.append([])
destination.close()
y = x[1:] - x[:-1]
c.coords(x)
plot(x, sin(x))
instance._meta.app_label
subprocess.Popen(SCRIPT % filename, shell=True)
python - V
plt.ion()
next(p)
x.astype(int)
sys.stdout = old_stdout
[x for x in l if x not in f]
[x for i, x in enumerate(a) if i in indices]
list(intermix([1, 0, 1, 1, 2, 1, 0, 1, 1, 1, 2]))
a()
Silly(0)
ax.yaxis.set_visible(False)
[id(i) for i in x]
plt.figure(1)
double([1, 2])
fig.canvas.draw()
int(s)
app.MainLoop()
isinstance(x, int)
sorted(array, key=lambda x: x is 0)
c.append(l)
main_sizer.Add(content_sizer, 1, wx.EXPAND)
a = A(10)
file.seek(0, os.SEEK_END)
print(url)
ax.set_ylim(0, max_height)
a[i] = d.get(a[i], a[i])
surround.py
result.append(item)
self.show()
xl.ActiveWorkbook.Close(SaveChanges=1)
driver.switch_to_default_content()
out, err = proc.communicate()
fig = plt.figure(figsize=(10, 5))